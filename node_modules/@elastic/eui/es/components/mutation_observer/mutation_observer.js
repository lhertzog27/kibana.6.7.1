import "core-js/modules/es7.symbol.async-iterator";
import "core-js/modules/es6.symbol";
import "core-js/modules/es6.object.set-prototype-of";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { Component } from 'react';
import PropTypes from 'prop-types';

var EuiMutationObserver =
/*#__PURE__*/
function (_Component) {
  _inherits(EuiMutationObserver, _Component);

  function EuiMutationObserver() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, EuiMutationObserver);

    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
      _args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(EuiMutationObserver)).call.apply(_getPrototypeOf2, [this].concat(_args)));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "updateChildNode", function (ref) {
      if (_this.childNode === ref) return; // node hasn't changed

      _this.childNode = ref; // if there's an existing observer disconnect it

      if (_this.observer != null) {
        _this.observer.disconnect();

        _this.observer = null;
      }

      if (_this.childNode != null) {
        _this.observer = new MutationObserver(_this.onMutation);

        _this.observer.observe(_this.childNode, _this.props.observerOptions);
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onMutation", function () {
      var _this$props;

      (_this$props = _this.props).onMutation.apply(_this$props, arguments);
    });

    _this.childNode = null;
    _this.observer = null;
    return _this;
  }

  _createClass(EuiMutationObserver, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.childNode == null) {
        throw new Error('EuiMutationObserver did not receive a ref');
      }
    }
  }, {
    key: "render",
    value: function render() {
      return this.props.children(this.updateChildNode);
    }
  }]);

  return EuiMutationObserver;
}(Component);

EuiMutationObserver.propTypes = {
  children: PropTypes.func.isRequired,
  observerOptions: PropTypes.shape({
    // matches a [MutationObserverInit](https://developer.mozilla.org/en-US/docs/Web/API/MutationObserverInit)
    attributeFilter: PropTypes.arrayOf(PropTypes.string),
    attributeOldValue: PropTypes.bool,
    attributes: PropTypes.bool,
    characterData: PropTypes.bool,
    characterDataOldValue: PropTypes.bool,
    childList: PropTypes.bool,
    subtree: PropTypes.bool
  }).isRequired,
  onMutation: PropTypes.func.isRequired
};
export { EuiMutationObserver };
EuiMutationObserver.__docgenInfo = {
  "description": "",
  "methods": [{
    "name": "updateChildNode",
    "docblock": null,
    "modifiers": [],
    "params": [{
      "name": "ref",
      "type": null
    }],
    "returns": null
  }, {
    "name": "onMutation",
    "docblock": null,
    "modifiers": [],
    "params": [{
      "name": "...args",
      "type": null
    }],
    "returns": null
  }],
  "displayName": "EuiMutationObserver",
  "props": {
    "children": {
      "type": {
        "name": "func"
      },
      "required": true,
      "description": ""
    },
    "observerOptions": {
      "type": {
        "name": "shape",
        "value": {
          "attributeFilter": {
            "name": "arrayOf",
            "value": {
              "name": "string"
            },
            "required": false
          },
          "attributeOldValue": {
            "name": "bool",
            "required": false
          },
          "attributes": {
            "name": "bool",
            "required": false
          },
          "characterData": {
            "name": "bool",
            "required": false
          },
          "characterDataOldValue": {
            "name": "bool",
            "required": false
          },
          "childList": {
            "name": "bool",
            "required": false
          },
          "subtree": {
            "name": "bool",
            "required": false
          }
        }
      },
      "required": true,
      "description": ""
    },
    "onMutation": {
      "type": {
        "name": "func"
      },
      "required": true,
      "description": ""
    }
  }
};