import "core-js/modules/es6.object.assign";
import "core-js/modules/web.dom.iterable";
import "core-js/modules/es6.array.iterator";
import "core-js/modules/es6.object.keys";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import { LEFT_ALIGNMENT, RIGHT_ALIGNMENT, CENTER_ALIGNMENT } from '../../services';
var ALIGNMENT = [LEFT_ALIGNMENT, RIGHT_ALIGNMENT, CENTER_ALIGNMENT];
export var EuiTableRowCell = function EuiTableRowCell(_ref) {
  var align = _ref.align,
      children = _ref.children,
      className = _ref.className,
      truncateText = _ref.truncateText,
      showOnHover = _ref.showOnHover,
      textOnly = _ref.textOnly,
      colSpan = _ref.colSpan,
      header = _ref.header,
      hideForMobile = _ref.hideForMobile,
      isMobileHeader = _ref.isMobileHeader,
      isMobileFullWidth = _ref.isMobileFullWidth,
      hasActions = _ref.hasActions,
      isExpander = _ref.isExpander,
      rest = _objectWithoutProperties(_ref, ["align", "children", "className", "truncateText", "showOnHover", "textOnly", "colSpan", "header", "hideForMobile", "isMobileHeader", "isMobileFullWidth", "hasActions", "isExpander"]);

  var cellClasses = classNames('euiTableRowCell', {
    'euiTableRowCell--hideForMobile': hideForMobile,
    'euiTableRowCell--isMobileHeader': isMobileHeader,
    'euiTableRowCell--hasActions': hasActions,
    'euiTableRowCell--isMobileFullWidth': isMobileFullWidth,
    'euiTableRowCell--isExpander': isExpander
  });
  var contentClasses = classNames('euiTableCellContent', className, {
    'euiTableCellContent--alignRight': align === RIGHT_ALIGNMENT,
    'euiTableCellContent--alignCenter': align === CENTER_ALIGNMENT,
    'euiTableCellContent--showOnHover': showOnHover,
    'euiTableCellContent--truncateText': truncateText,
    // We're doing this rigamarole instead of creating `euiTableCellContent--textOnly` for BWC
    // purposes for the time-being.
    'euiTableCellContent--overflowingContent': textOnly !== true
  });
  var childClasses = classNames({
    'euiTableCellContent__text': textOnly === true,
    'euiTableCellContent__hoverItem': showOnHover
  });
  var modifiedChildren = children;

  if (textOnly === true) {
    modifiedChildren = React.createElement("span", {
      className: childClasses
    }, children);
  } else if (React.isValidElement(modifiedChildren)) {
    modifiedChildren = React.Children.map(children, function (child) {
      return React.cloneElement(child, {
        className: classNames(child.props.className, childClasses)
      });
    });
  }

  return React.createElement("td", _extends({
    className: cellClasses,
    colSpan: colSpan,
    "data-header": header
  }, rest), React.createElement("div", {
    className: contentClasses
  }, modifiedChildren));
};
EuiTableRowCell.propTypes = {
  align: PropTypes.oneOf(ALIGNMENT),
  showOnHover: PropTypes.bool,
  truncateText: PropTypes.bool,
  children: PropTypes.node,
  className: PropTypes.string,

  /**
   * Setting textOnly to false will break words unnecessarily on FF and IE.
   * To combat this problem on FF, wrap contents with the css utility `.eui-textBreakWord`.
   */
  textOnly: PropTypes.bool,
  colSpan: PropTypes.number,

  /**
   * The column's header title for use in mobile view (will be added as a data-attr)
   */
  header: PropTypes.string,

  /**
   * Indicates if the column was created to be the row's heading in mobile view
   * (this column will be hidden at larger screens)
   */
  isMobileHeader: PropTypes.bool,

  /**
   * Indicates if the column should not show for mobile users
   * (typically hidden because a custom mobile header utilizes the column's contents)
   */
  hideForMobile: PropTypes.bool,

  /**
   * Allocates 100% of the width of the container in mobile view
   * (typically cells are contained to 50%)
   */
  isMobileFullWidth: PropTypes.bool,

  /**
   * Indicates if the column is dedicated to icon-only actions (affects mobile only)
   */
  hasActions: PropTypes.bool,

  /**
   * Indicates if the column is dedicated as the expandable row toggle
   */
  isExpander: PropTypes.bool
};
EuiTableRowCell.defaultProps = {
  align: LEFT_ALIGNMENT,
  textOnly: true
};
EuiTableRowCell.__docgenInfo = {
  "description": "",
  "methods": [],
  "displayName": "EuiTableRowCell",
  "props": {
    "align": {
      "defaultValue": {
        "value": "LEFT_ALIGNMENT",
        "computed": true
      },
      "type": {
        "name": "enum",
        "value": [{
          "value": "import {\n  LEFT_ALIGNMENT,\n  RIGHT_ALIGNMENT,\n  CENTER_ALIGNMENT\n} from '../../services';",
          "computed": true
        }, {
          "value": "import {\n  LEFT_ALIGNMENT,\n  RIGHT_ALIGNMENT,\n  CENTER_ALIGNMENT\n} from '../../services';",
          "computed": true
        }, {
          "value": "import {\n  LEFT_ALIGNMENT,\n  RIGHT_ALIGNMENT,\n  CENTER_ALIGNMENT\n} from '../../services';",
          "computed": true
        }]
      },
      "required": false,
      "description": ""
    },
    "textOnly": {
      "defaultValue": {
        "value": "true",
        "computed": false
      },
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "Setting textOnly to false will break words unnecessarily on FF and IE.\nTo combat this problem on FF, wrap contents with the css utility `.eui-textBreakWord`."
    },
    "showOnHover": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": ""
    },
    "truncateText": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": ""
    },
    "children": {
      "type": {
        "name": "node"
      },
      "required": false,
      "description": ""
    },
    "className": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": ""
    },
    "colSpan": {
      "type": {
        "name": "number"
      },
      "required": false,
      "description": ""
    },
    "header": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": "The column's header title for use in mobile view (will be added as a data-attr)"
    },
    "isMobileHeader": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "Indicates if the column was created to be the row's heading in mobile view\n(this column will be hidden at larger screens)"
    },
    "hideForMobile": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "Indicates if the column should not show for mobile users\n(typically hidden because a custom mobile header utilizes the column's contents)"
    },
    "isMobileFullWidth": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "Allocates 100% of the width of the container in mobile view\n(typically cells are contained to 50%)"
    },
    "hasActions": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "Indicates if the column is dedicated to icon-only actions (affects mobile only)"
    },
    "isExpander": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "Indicates if the column is dedicated as the expandable row toggle"
    }
  }
};