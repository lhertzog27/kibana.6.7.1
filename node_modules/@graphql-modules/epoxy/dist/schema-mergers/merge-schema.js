"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var graphql_1 = require("graphql");
var utils_1 = require("./utils");
var merge_nodes_1 = require("./merge-nodes");
function mergeGraphQLSchemas(types) {
    var astDefinitions = mergeGraphQLTypes(types);
    return astDefinitions
        .map(function (definition) { return ({
        kind: 'Document',
        definitions: [definition],
    }); })
        .map(function (document) { return graphql_1.print(document); })
        .join('\n');
}
exports.mergeGraphQLSchemas = mergeGraphQLSchemas;
function mergeGraphQLTypes(types) {
    var allNodes = types
        .map(function (type) {
        if (utils_1.isGraphQLSchema(type)) {
            var printedSchema = graphql_1.printSchema(type, { commentDescriptions: true });
            return graphql_1.parse(printedSchema);
        }
        else if (utils_1.isStringTypes(type) || utils_1.isSourceTypes(type)) {
            return graphql_1.parse(type);
        }
        return type;
    })
        .map(function (ast) { return ast.definitions; })
        .reduce(function (defs, newDef) { return defs.concat(newDef); }, []);
    var mergedNodes = merge_nodes_1.mergeGraphQLNodes(allNodes);
    var allTypes = Object.keys(mergedNodes);
    var queryType = allTypes.includes('Query') ? 'query: Query' : null;
    var mutationType = allTypes.includes('Mutation') ? 'mutation: Mutation' : null;
    var subscriptionType = allTypes.includes('Subscription') ? 'subscription: Subscription' : null;
    var relevantTypes = [queryType, mutationType, subscriptionType].filter(function (a) { return a; });
    if (relevantTypes.length === 0) {
        return Object.values(mergedNodes);
    }
    var schemaDefinition = graphql_1.parse("schema { " + relevantTypes.join('\n') + " }").definitions[0];
    return Object.values(mergedNodes).concat([
        schemaDefinition,
    ]);
}
exports.mergeGraphQLTypes = mergeGraphQLTypes;
//# sourceMappingURL=merge-schema.js.map