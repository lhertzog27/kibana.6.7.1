#!/usr/bin/env node
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const yargs_1 = __importDefault(require("yargs"));
const lodash_flatten_1 = __importDefault(require("lodash.flatten"));
const steps_1 = require("./steps");
const configs_1 = require("../lib/configs");
const logger = __importStar(require("../lib/logger"));
async function getConfig() {
    try {
        return await configs_1.getCombinedConfig();
    }
    catch (e) {
        switch (e.name) {
            case 'HandledError':
                logger.error(e.message);
                break;
            default:
                logger.error(e);
        }
        return process.exit(1);
    }
}
function getOptions(config, cliArgs) {
    try {
        return configs_1.validateOptions(Object.assign({}, config, { branches: flattenBranches(cliArgs.branch), sha: cliArgs.sha, all: cliArgs.all, multiple: cliArgs.multiple, multipleBranches: cliArgs.multipleBranches || cliArgs.multiple, multipleCommits: cliArgs.multipleCommits || cliArgs.multiple, upstream: cliArgs.upstream }));
    }
    catch (e) {
        console.error(e.message);
        return process.exit(1);
    }
}
async function initYargs() {
    const config = await getConfig();
    const cliArgs = yargs_1.default
        .usage('$0 [args]')
        .option('multiple', {
        default: config.multiple,
        description: 'Select multiple branches/commits',
        type: 'boolean'
    })
        .option('multiple-commits', {
        default: config.multipleCommits,
        description: 'Backport multiple commits',
        type: 'boolean'
    })
        .option('multiple-branches', {
        default: config.multipleBranches,
        description: 'Backport to multiple branches',
        type: 'boolean'
    })
        .option('all', {
        default: config.all,
        description: 'List all commits',
        type: 'boolean'
    })
        .option('upstream', {
        default: config.upstream,
        description: 'Name of repository',
        type: 'string'
    })
        .option('branch', {
        default: [],
        description: 'Branch to backport',
        type: 'array'
    })
        .option('sha', {
        description: 'Commit sha to backport',
        type: 'string'
    })
        .option('show-config', {
        description: 'Show config settings',
        type: 'boolean'
    })
        .alias('v', 'version')
        .version()
        .help().argv;
    const options = getOptions(config, cliArgs);
    if (cliArgs.showConfig) {
        logger.log(JSON.stringify(options, null, 4));
        process.exit(0);
    }
    return steps_1.initSteps(options);
}
function flattenBranches(branches) {
    return lodash_flatten_1.default(branches.map(b => b.toString().split(','))).filter(b => !!b);
}
initYargs();
