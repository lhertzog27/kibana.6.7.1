"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const inquirer_1 = __importDefault(require("inquirer"));
const lodash_isempty_1 = __importDefault(require("lodash.isempty"));
async function prompt(options) {
    const { promptResult } = (await inquirer_1.default.prompt([
        Object.assign({}, options, { name: 'promptResult' })
    ]));
    return promptResult;
}
function listProjects(repoNames) {
    return prompt({
        choices: repoNames,
        message: 'Select project',
        type: 'list'
    });
}
exports.listProjects = listProjects;
async function listCommits(commits, isMultipleChoice) {
    const choices = commits.map((c, i) => ({
        name: `${i + 1}. ${c.message}`,
        short: c.message,
        value: c
    }));
    const res = await prompt({
        choices,
        message: 'Select commit to backport',
        pageSize: Math.min(10, commits.length),
        type: isMultipleChoice ? 'checkbox' : 'list'
    });
    const selectedCommits = Array.isArray(res) ? res.reverse() : [res];
    return lodash_isempty_1.default(selectedCommits)
        ? listCommits(commits, isMultipleChoice)
        : selectedCommits;
}
exports.listCommits = listCommits;
async function listBranches(branches, isMultipleChoice) {
    const res = await prompt({
        choices: branches,
        message: 'Select branch to backport to',
        type: isMultipleChoice ? 'checkbox' : 'list'
    });
    const selectedBranches = Array.isArray(res) ? res : [res];
    return lodash_isempty_1.default(selectedBranches)
        ? listBranches(branches, isMultipleChoice)
        : selectedBranches;
}
exports.listBranches = listBranches;
function confirmConflictResolved() {
    return prompt({
        message: 'Press enter when you have commited all changes',
        type: 'confirm'
    });
}
exports.confirmConflictResolved = confirmConflictResolved;
