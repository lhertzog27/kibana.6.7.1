"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const joi_1 = __importDefault(require("joi"));
const errors_1 = require("./errors");
const branchesSchema = joi_1.default.array().items(joi_1.default.object().keys({
    name: joi_1.default.string().required(),
    checked: joi_1.default.bool()
}), joi_1.default.string());
const configOptions = {
    all: joi_1.default.bool(),
    multiple: joi_1.default.bool(),
    multipleCommits: joi_1.default.bool(),
    multipleBranches: joi_1.default.bool()
};
exports.projectConfig = joi_1.default.object().keys(Object.assign({ upstream: joi_1.default.string().required(), branches: branchesSchema.required(), labels: joi_1.default.array().items(joi_1.default.string()) }, configOptions));
exports.globalConfig = joi_1.default.object().keys(Object.assign({ username: joi_1.default.string().required(), accessToken: joi_1.default.string().required(), projects: joi_1.default.array() }, configOptions));
function formatError(error) {
    return error.details
        .map(detail => {
        const errorPath = detail.path.length > 1 ? `(in ${detail.path.join('.')})` : '';
        return ` - ${detail.message} ${errorPath}`;
    })
        .join('\n');
}
exports.formatError = formatError;
function validate(config, schema) {
    const options = {
        abortEarly: false,
        convert: false
    };
    return joi_1.default.validate(config, schema, options);
}
exports.validate = validate;
function validateGlobalConfig(config, filename) {
    const { error } = validate(config, exports.globalConfig);
    if (error) {
        throw new errors_1.HandledError(`The global config file (${filename}) is not valid:\n${formatError(error)}`);
    }
    return config;
}
exports.validateGlobalConfig = validateGlobalConfig;
function validateProjectConfig(config, filepath) {
    const { error } = validate(config, exports.projectConfig);
    if (error) {
        throw new errors_1.HandledError(`The project config file (${filepath}) is not valid:\n${formatError(error)}`);
    }
    return config;
}
exports.validateProjectConfig = validateProjectConfig;
