"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var validate_documents_1 = require("./loaders/documents/validate-documents");
var commander = require("commander");
var path = require("path");
var fs = require("fs");
var mkdirp = require("mkdirp");
var chalk_1 = require("chalk");
var graphql_1 = require("graphql");
var graphql_config_1 = require("graphql-config");
var templates_scanner_1 = require("./loaders/template/templates-scanner");
var graphql_codegen_compiler_1 = require("graphql-codegen-compiler");
var graphql_codegen_core_1 = require("graphql-codegen-core");
var epoxy_1 = require("@graphql-modules/epoxy");
var graphql_tools_1 = require("graphql-tools");
var load_1 = require("./load");
var errors_1 = require("./errors");
var spinner_1 = require("./spinner");
process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';
function collect(val, memo) {
    memo.push(val);
    return memo;
}
exports.initCLI = function (args) {
    commander
        .usage('gql-gen [options]')
        .option('-s, --schema <path>', 'Path to GraphQL schema: local JSON file, GraphQL endpoint, local file that exports GraphQLSchema/AST/JSON')
        .option('-cs, --clientSchema <path>', 'Path to GraphQL client schema: local JSON file, local file that exports GraphQLSchema/AST/JSON')
        .option('-h, --header [header]', 'Header to add to the introspection HTTP request when using --url/--schema with url', collect, [])
        .option('-t, --template <template-name>', 'Language/platform name templates, or a name of NPM modules that `export default` GqlGenConfig object')
        .option('-p, --project <project-path>', 'Project path(s) to scan for custom template files')
        .option('--config <json-file>', 'Codegen configuration file, defaults to: ./gql-gen.json')
        .option('-m, --skip-schema', 'Generates only client side documents, without server side schema types')
        .option('-c, --skip-documents', 'Generates only server side schema types, without client side documents')
        .option('-o, --out <path>', 'Output file(s) path', String, './')
        .option('-r, --require [require]', 'module to preload (option can be repeated)', collect, [])
        .option('-ow, --no-overwrite', 'Skip file writing if the output file(s) already exists in path')
        .option('-w, --watch', 'Watch for changes and execute generation automatically')
        .option('--silent', 'Does not print anything to the console')
        .option('-ms, --merge-schema <merge-logic>', 'Merge schemas with custom logic')
        .arguments('<options> [documents...]')
        .parse(args);
    return commander;
};
exports.cliError = function (err, exitOnError) {
    if (exitOnError === void 0) { exitOnError = true; }
    spinner_1.default.fail();
    var msg;
    if (err instanceof Error) {
        msg = err.message || err.toString();
    }
    else if (typeof err === 'string') {
        msg = err;
    }
    else {
        msg = JSON.stringify(err);
    }
    graphql_codegen_core_1.getLogger().error(msg);
    if (exitOnError) {
        process.exit(1);
    }
    return;
};
exports.validateCliOptions = function (options) {
    if (options.silent) {
        graphql_codegen_core_1.setSilentLogger();
    }
    else {
        graphql_codegen_core_1.useWinstonLogger();
    }
    var schema = options.schema;
    var template = options.template;
    var project = options.project;
    if (!schema) {
        try {
            var graphqlProjectConfig = graphql_config_1.getGraphQLProjectConfig(project);
            options.schema = graphqlProjectConfig.schemaPath;
        }
        catch (e) {
            if (e instanceof graphql_config_1.ConfigNotFoundError) {
                exports.cliError("\n          \n          Flag " + chalk_1.default.bold('--schema') + " is missing.\n          \n          Schema points to one of following:\n            - url of a GraphQL server\n            - path to a .graphql file with GraphQL Schema\n            - path to a introspection file\n          \n\n          CLI example:\n            \n            $ gql-gen --schema ./schema.json ...\n          \n          API example:\n            \n            generate({\n              schema: './schema.json',\n              ...\n            });\n\n        ");
            }
        }
    }
    if (!template && !project) {
        exports.cliError("\n      \n      Please specify the template.\n      \n      A template matches an npm package's name.\n\n      CLI example:\n            \n        $ gql-gen --template graphql-codegen-typescript-template ...\n          \n      API example:\n            \n        generate({\n          template: 'graphql-codegen-typescript-template',\n          ...\n        });\n\n    ");
    }
};
exports.executeWithOptions = function (options) { return __awaiter(_this, void 0, void 0, function () {
    var schema, clientSchema, documents, template, project, gqlGenConfigFilePath, out, generateSchema, generateDocuments, modulesToRequire, exitOnError, templateConfig, localFilePath, localFileExists, templateFromExport, configPath, config, templates, resolvedHelpers_1, relevantEnvVars, addToSchema, asArray, executeGeneration, normalizeOutput, output, error_1;
    var _this = this;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                spinner_1.default.start('Validating options');
                exports.validateCliOptions(options);
                schema = options.schema;
                clientSchema = options.clientSchema;
                documents = options.args || [];
                template = options.template;
                project = options.project;
                gqlGenConfigFilePath = options.config || './gql-gen.json';
                out = options.out || './';
                generateSchema = !options.skipSchema;
                generateDocuments = !options.skipDocuments;
                modulesToRequire = options.require || [];
                exitOnError = typeof options.exitOnError === 'undefined' ? true : options.exitOnError;
                modulesToRequire.forEach(function (mod) { return require(mod); });
                templateConfig = null;
                if (template && template !== '') {
                    spinner_1.default.log("Loading template: " + template);
                    graphql_codegen_core_1.debugLog("[executeWithOptions] using template: " + template);
                    // Backward compatibility for older versions
                    if (template === 'ts' ||
                        template === 'ts-single' ||
                        template === 'typescript' ||
                        template === 'typescript-single') {
                        spinner_1.default.warn("You are using the old template name, please install it from NPM and use it by it's new name: \"graphql-codegen-typescript-template\"");
                        template = 'graphql-codegen-typescript-template';
                    }
                    else if (template === 'ts-multiple' || template === 'typescript-multiple') {
                        spinner_1.default.warn("You are using the old template name, please install it from NPM and use it by it's new name: \"graphql-codegen-typescript-template-multiple\"");
                        template = 'graphql-codegen-typescript-template-multiple';
                    }
                    localFilePath = path.resolve(process.cwd(), template);
                    localFileExists = fs.existsSync(localFilePath);
                    try {
                        templateFromExport = require(localFileExists ? localFilePath : template);
                        if (!templateFromExport) {
                            throw new Error();
                        }
                        templateConfig = templateFromExport.default || templateFromExport.config || templateFromExport;
                        spinner_1.default.succeed();
                    }
                    catch (e) {
                        throw new errors_1.DetailedError("\n\n        Unknown codegen template: \"" + template + "\"\n\n        Please make sure it's installed using npm or yarn.\n\n          $ yarn add " + template + " -D\n\n          OR\n\n          $ npm install " + template + " -D\n\n        Template should match package's name.\n\n      ");
                    }
                }
                graphql_codegen_core_1.debugLog("[executeWithOptions] using project: " + project);
                configPath = path.resolve(process.cwd(), gqlGenConfigFilePath);
                config = null;
                if (fs.existsSync(configPath)) {
                    graphql_codegen_core_1.getLogger().info("Loading config file from: " + configPath);
                    config = JSON.parse(fs.readFileSync(configPath).toString());
                    graphql_codegen_core_1.debugLog("[executeWithOptions] Got project config JSON: " + JSON.stringify(config));
                }
                if (project && project !== '') {
                    spinner_1.default.log("Using project: " + project);
                    if (config === null) {
                        throw new errors_1.DetailedError("\n          To use project feature, please specify " + chalk_1.default.bold('path to the config file') + " or create " + chalk_1.default.bold('gql-gen.json') + " in your project root\n\n          If config file is different then gql-gen.json do the following.\n\n          CLI example:\n\n            $ gql-gen --config ./my-gql-gen.json\n\n          API example:\n\n            generate({\n              config: './my-gql-gen.json'\n            });\n        ");
                    }
                    templates = templates_scanner_1.scanForTemplatesInPath(project, graphql_codegen_compiler_1.ALLOWED_CUSTOM_TEMPLATE_EXT);
                    resolvedHelpers_1 = {};
                    Object.keys(config.customHelpers || {}).map(function (helperName) {
                        var filePath = config.customHelpers[helperName];
                        var resolvedPath = path.isAbsolute(filePath) ? filePath : path.resolve(process.cwd(), filePath);
                        if (fs.existsSync(resolvedPath)) {
                            var requiredFile = require(resolvedPath);
                            if (requiredFile && typeof requiredFile === 'function') {
                                resolvedHelpers_1[helperName] = requiredFile;
                            }
                            else {
                                throw new errors_1.DetailedError("Custom template file " + resolvedPath + " does not have a default export function.");
                            }
                        }
                        else {
                            throw new errors_1.DetailedError("Custom template file " + helperName + " does not exists in path: " + resolvedPath);
                        }
                    });
                    templateConfig = {
                        inputType: graphql_codegen_core_1.EInputType.PROJECT,
                        templates: templates,
                        flattenTypes: config.flattenTypes,
                        primitives: config.primitives,
                        customHelpers: resolvedHelpers_1
                    };
                }
                spinner_1.default.succeed();
                relevantEnvVars = Object.keys(process.env)
                    .filter(function (name) { return name.startsWith('CODEGEN_'); })
                    .reduce(function (prev, name) {
                    var cleanName = name
                        .replace('CODEGEN_', '')
                        .toLowerCase()
                        .replace(/[-_]+/g, ' ')
                        .replace(/[^\w\s]/g, '')
                        .replace(/ (.)/g, function (res) { return res.toUpperCase(); })
                        .replace(/ /g, '');
                    var value = process.env[name];
                    if (value === 'true') {
                        value = true;
                    }
                    else if (value === 'false') {
                        value = false;
                    }
                    prev[cleanName] = value;
                    return prev;
                }, {});
                addToSchema = [];
                if (graphql_codegen_core_1.isGeneratorConfig(templateConfig)) {
                    templateConfig.config = __assign({}, (config && config.generatorConfig ? config.generatorConfig || {} : {}), (options && options['templateConfig'] ? options['templateConfig'] : {}), (relevantEnvVars || {}));
                    if (templateConfig.deprecationNote) {
                        spinner_1.default.warn("Template " + template + " is deprecated: " + templateConfig.deprecationNote);
                    }
                    if (templateConfig.addToSchema) {
                        asArray = Array.isArray(templateConfig.addToSchema)
                            ? templateConfig.addToSchema
                            : [templateConfig.addToSchema];
                        addToSchema = asArray.map(function (extension) { return (typeof extension === 'string' ? graphql_1.parse(extension) : extension); });
                    }
                    if (config) {
                        if ('flattenTypes' in config) {
                            templateConfig.flattenTypes = config.flattenTypes;
                        }
                        if ('primitives' in config) {
                            templateConfig.primitives = __assign({}, templateConfig.primitives, config.primitives);
                        }
                    }
                }
                executeGeneration = function () { return __awaiter(_this, void 0, void 0, function () {
                    var schemas, allSchemas, graphQlSchema, _i, addToSchema_1, extension, context, hasDocuments, documentsFiles, loadDocumentErrors, errors, errorCount, _a, loadDocumentErrors_1, loadDocumentError, _b, _c, graphQLError, transformedDocuments;
                    return __generator(this, function (_d) {
                        switch (_d.label) {
                            case 0:
                                schemas = [];
                                try {
                                    spinner_1.default.log('Loading remote schema');
                                    graphql_codegen_core_1.debugLog("[executeWithOptions] Schema is being loaded ");
                                    schemas.push(load_1.loadSchema(schema, options));
                                    spinner_1.default.succeed();
                                }
                                catch (e) {
                                    graphql_codegen_core_1.debugLog("[executeWithOptions] Failed to load schema", e);
                                    exports.cliError("\n      \n        " + chalk_1.default.bold('Invalid schema provided.') + "\n        Please use a path to local file, HTTP endpoint or a glob expression.\n\n        Local file should export a string, GraphQLSchema object or should be a .graphql file.\n        GraphQL Code Generator accepts: ES6 modules and CommonJS modules.\n        It should either export schema with the " + chalk_1.default.italic('schema') + " variable or with default export.\n\n        CLI example:\n\n          $ gql-gen --schema ./path/to/schema.json ...\n\n        API example:\n\n          generate({\n            schema: './path/to/schema.json',\n            ...\n          });\n\n      ");
                                }
                                if (clientSchema) {
                                    spinner_1.default.log('Loading client schema');
                                    try {
                                        graphql_codegen_core_1.debugLog("[executeWithOptions] Client Schema is being loaded ");
                                        schemas.push(load_1.loadSchema(clientSchema, options));
                                        spinner_1.default.succeed();
                                    }
                                    catch (e) {
                                        graphql_codegen_core_1.debugLog("[executeWithOptions] Failed to load client schema", e);
                                        exports.cliError("\n        \n          " + chalk_1.default.bold('Invalid client schema.') + "\n          Please use a path to local file or a glob expression.\n\n          Local file should export a string, GraphQLSchema object or should be a .graphql file.\n          GraphQL Code Generator accepts: ES6 modules and CommonJS modules.\n          It should either export schema with the " + chalk_1.default.italic('schema') + " variable or with default export.\n\n          CLI example:\n\n            $ gql-gen --clientSchema ./path/to/schema.json\n\n          API example:\n\n            generate({\n              clientSchema: './path/to/schema.json',\n              ...\n            });\n\n        ");
                                    }
                                }
                                return [4 /*yield*/, Promise.all(schemas)];
                            case 1:
                                allSchemas = _d.sent();
                                graphQlSchema = allSchemas.length === 1
                                    ? allSchemas[0]
                                    : graphql_tools_1.makeExecutableSchema({ typeDefs: epoxy_1.mergeGraphQLSchemas(allSchemas), allowUndefinedInResolve: true });
                                if (addToSchema && addToSchema.length > 0) {
                                    for (_i = 0, addToSchema_1 = addToSchema; _i < addToSchema_1.length; _i++) {
                                        extension = addToSchema_1[_i];
                                        graphql_codegen_core_1.debugLog("Extending GraphQL Schema with: ", extension);
                                        graphQlSchema = graphql_1.extendSchema(graphQlSchema, extension);
                                    }
                                }
                                if (process.env.VERBOSE !== undefined) {
                                    graphql_codegen_core_1.getLogger().info("GraphQL Schema is: ", graphQlSchema);
                                }
                                context = graphql_codegen_core_1.schemaToTemplateContext(graphQlSchema);
                                graphql_codegen_core_1.debugLog("[executeWithOptions] Schema template context build, the result is: ");
                                Object.keys(context).forEach(function (key) {
                                    if (Array.isArray(context[key])) {
                                        graphql_codegen_core_1.debugLog("Total of " + key + ": " + context[key].length);
                                    }
                                });
                                hasDocuments = documents.length;
                                if (hasDocuments) {
                                    spinner_1.default.log('Loading documents');
                                }
                                return [4 /*yield*/, load_1.loadDocuments(documents)];
                            case 2:
                                documentsFiles = _d.sent();
                                loadDocumentErrors = validate_documents_1.validateGraphQlDocuments(graphQlSchema, documentsFiles);
                                if (loadDocumentErrors.length > 0) {
                                    errors = [];
                                    errorCount = 0;
                                    for (_a = 0, loadDocumentErrors_1 = loadDocumentErrors; _a < loadDocumentErrors_1.length; _a++) {
                                        loadDocumentError = loadDocumentErrors_1[_a];
                                        for (_b = 0, _c = loadDocumentError.errors; _b < _c.length; _b++) {
                                            graphQLError = _c[_b];
                                            errors.push("\n\n            " + loadDocumentError.filePath + ": \n              " + graphQLError.message + "\n\n          ");
                                            errorCount++;
                                        }
                                    }
                                    exports.cliError("\n\n          Found " + errorCount + " errors.\n\n          GraphQL Code Generator validated your GraphQL documents against the schema.\n          Please fix following errors and run codegen again:\n\n\n          " + errors.join('') + "\n        \n        ", options.watch ? false : exitOnError);
                                }
                                transformedDocuments = graphql_codegen_core_1.transformDocumentsFiles(graphQlSchema, documentsFiles);
                                if (hasDocuments) {
                                    spinner_1.default.succeed();
                                }
                                spinner_1.default.log("Compiling template: " + template);
                                try {
                                    return [2 /*return*/, graphql_codegen_compiler_1.compileTemplate(templateConfig, context, [transformedDocuments], {
                                            generateSchema: generateSchema,
                                            generateDocuments: generateDocuments
                                        })];
                                }
                                catch (error) {
                                    throw new errors_1.DetailedError("\n        Failed to compile " + template + " template.\n\n        In most cases it's related to the configuration and the GraphQL schema.\n\n          " + error.message + "\n\n      ");
                                }
                                return [2 /*return*/];
                        }
                    });
                }); };
                normalizeOutput = function (item) {
                    var resultName = item.filename;
                    if (!path.isAbsolute(resultName)) {
                        var resolved = path.resolve(process.cwd(), out);
                        if (fs.existsSync(resolved)) {
                            var stats = fs.lstatSync(resolved);
                            if (stats.isDirectory()) {
                                resultName = path.resolve(resolved, item.filename);
                            }
                            else if (stats.isFile()) {
                                resultName = resolved;
                            }
                        }
                        else {
                            if (out.endsWith('/')) {
                                resultName = path.resolve(resolved, item.filename);
                            }
                            else {
                                resultName = resolved;
                            }
                        }
                    }
                    var resultDir = path.dirname(resultName);
                    mkdirp.sync(resultDir);
                    return {
                        content: item.content,
                        filename: resultName
                    };
                };
                _a.label = 1;
            case 1:
                _a.trys.push([1, 3, , 4]);
                return [4 /*yield*/, executeGeneration()];
            case 2:
                output = _a.sent();
                return [2 /*return*/, output.map(normalizeOutput)];
            case 3:
                error_1 = _a.sent();
                if (error_1 instanceof errors_1.DetailedError) {
                    throw error_1;
                }
                else {
                    throw new errors_1.DetailedError("\n        \n        Failed to finish the task:\n\n        " + error_1.message + "\n\n      ", error_1);
                }
                return [3 /*break*/, 4];
            case 4: return [2 /*return*/];
        }
    });
}); };
//# sourceMappingURL=codegen.js.map