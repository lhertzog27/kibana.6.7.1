"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var graphql_codegen_core_1 = require("graphql-codegen-core");
var fs_1 = require("fs");
var isValidPath = require("is-valid-path");
var path_1 = require("path");
var spinner_1 = require("../../spinner");
var errors_1 = require("../../errors");
var IntrospectionFromFileLoader = /** @class */ (function () {
    function IntrospectionFromFileLoader() {
    }
    IntrospectionFromFileLoader.prototype.stripBOM = function (content) {
        content = content.toString();
        // Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
        // because the buffer-to-string conversion in `fs.readFileSync()`
        // translates it to FEFF, the UTF-16 BOM.
        if (content.charCodeAt(0) === 0xfeff) {
            content = content.slice(1);
        }
        return content;
    };
    IntrospectionFromFileLoader.prototype.parseBOM = function (content) {
        return JSON.parse(this.stripBOM(content));
    };
    IntrospectionFromFileLoader.prototype.canHandle = function (pointerToSchema) {
        return isValidPath(pointerToSchema) && fs_1.existsSync(pointerToSchema) && path_1.extname(pointerToSchema) === '.json';
    };
    IntrospectionFromFileLoader.prototype.handle = function (pointerToSchema, _cliOptions) {
        return __awaiter(this, void 0, void 0, function () {
            var fullPath, fileContent, introspection;
            return __generator(this, function (_a) {
                spinner_1.default.info("Loading GraphQL Introspection from file: " + pointerToSchema + "...");
                fullPath = path_1.isAbsolute(pointerToSchema) ? pointerToSchema : path_1.resolve(process.cwd(), pointerToSchema);
                if (fs_1.existsSync(fullPath)) {
                    fileContent = fs_1.readFileSync(fullPath, 'utf8');
                    if (!fileContent) {
                        throw new errors_1.DetailedError("Unable to read local introspection file: " + fullPath);
                    }
                    introspection = this.parseBOM(fileContent);
                    if (introspection.data) {
                        introspection = introspection.data;
                    }
                    graphql_codegen_core_1.validateIntrospection(introspection);
                    return [2 /*return*/, graphql_codegen_core_1.introspectionToGraphQLSchema(introspection)];
                }
                throw new errors_1.DetailedError("Unable to locate local introspection file: " + fullPath);
            });
        });
    };
    return IntrospectionFromFileLoader;
}());
exports.IntrospectionFromFileLoader = IntrospectionFromFileLoader;
//# sourceMappingURL=introspection-from-file.js.map