"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var graphql_codegen_core_1 = require("graphql-codegen-core");
var handlebars_1 = require("handlebars");
var handlebars_extensions_1 = require("./handlebars-extensions");
var flatten_types_1 = require("./flatten-types");
var generate_multiple_files_1 = require("./generate-multiple-files");
var generate_single_file_1 = require("./generate-single-file");
var clean_template_1 = require("./clean-template");
var build_files_array_1 = require("./build-files-array");
exports.DEFAULT_SETTINGS = {
    generateSchema: true,
    generateDocuments: true
};
function compileTemplate(config, templateContext, documents, settings) {
    if (documents === void 0) { documents = []; }
    if (settings === void 0) { settings = exports.DEFAULT_SETTINGS; }
    return __awaiter(this, void 0, void 0, function () {
        var isExternalProcessingFunction, executionSettings, mergedDocuments, documentsFiles, externalFn, result, e_1, templates_1, compiledTemplates;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    isExternalProcessingFunction = graphql_codegen_core_1.isCustomProcessingFunction(config);
                    graphql_codegen_core_1.debugLog("[compileTemplate] settings = ", settings);
                    if (!config) {
                        throw new Error("compileTemplate requires a valid GeneratorConfig object or a custom output processing function (CustomProcessingFunction)!");
                    }
                    executionSettings = Object.assign(exports.DEFAULT_SETTINGS, settings);
                    if (!executionSettings.generateDocuments) {
                        graphql_codegen_core_1.debugLog("[compileTemplate] generateDocuments is false, ignoring documents...");
                        mergedDocuments = {
                            fragments: [],
                            operations: [],
                            hasFragments: false,
                            hasOperations: false
                        };
                        documentsFiles = [];
                    }
                    else {
                        mergedDocuments = documents.reduce(function (previousValue, item) {
                            var opArr = previousValue.operations.concat(item.operations);
                            var frArr = previousValue.fragments.concat(item.fragments);
                            return {
                                operations: opArr,
                                fragments: frArr,
                                hasFragments: frArr.length > 0,
                                hasOperations: opArr.length > 0
                            };
                        }, { hasFragments: false, hasOperations: false, operations: [], fragments: [] });
                        graphql_codegen_core_1.debugLog("[compileTemplate] all documents merged into single document, total of " + mergedDocuments.operations.length + " operations and " + mergedDocuments.fragments.length + " fragments");
                        documentsFiles = build_files_array_1.buildFilesArray(mergedDocuments);
                        if (!isExternalProcessingFunction && config.flattenTypes) {
                            graphql_codegen_core_1.debugLog("[compileTemplate] flattenTypes is true, flattening all selection sets from all documents...");
                            mergedDocuments = flatten_types_1.flattenTypes(mergedDocuments);
                        }
                    }
                    if (!isExternalProcessingFunction) return [3 /*break*/, 5];
                    graphql_codegen_core_1.debugLog("[compileTemplate] starting to compile template with external processing function...");
                    externalFn = config;
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, externalFn(templateContext, mergedDocuments, executionSettings)];
                case 2:
                    result = _a.sent();
                    if (!Array.isArray(result)) {
                        throw new Error('The result of external processing function must be an array of FileOutput!');
                    }
                    return [2 /*return*/, result];
                case 3:
                    e_1 = _a.sent();
                    graphql_codegen_core_1.debugLog('[compileTemplate] external processing function has thrown an exception!', e_1);
                    throw e_1;
                case 4: return [3 /*break*/, 6];
                case 5:
                    config = config;
                    if (!config.config) {
                        config.config = {};
                    }
                    graphql_codegen_core_1.debugLog("[compileTemplate] starting to compile template with input type = " + config.inputType);
                    handlebars_extensions_1.initHelpers(config, templateContext);
                    templates_1 = config.templates;
                    Object.keys(templates_1).forEach(function (templateName) {
                        graphql_codegen_core_1.debugLog("[compileTemplate] register partial template " + templateName);
                        var partialName = templateName.includes('.') ? templateName.split('.').reverse()[1] : templateName;
                        handlebars_1.registerPartial(partialName, templates_1[templateName].trim());
                    });
                    if (config.inputType === graphql_codegen_core_1.EInputType.SINGLE_FILE) {
                        if (!templates_1['index']) {
                            throw new Error("Template 'index' is required when using inputType = SINGLE_FILE!");
                        }
                        if (!config.outFile) {
                            throw new Error('Config outFile is required when using inputType = SINGLE_FILE!');
                        }
                        graphql_codegen_core_1.debugLog("[compileTemplate] Executing generateSingleFile...");
                        return [2 /*return*/, generate_single_file_1.generateSingleFile(handlebars_1.compile(clean_template_1.cleanTemplateComments(templates_1['index'])), executionSettings, config, templateContext, mergedDocuments, documentsFiles)];
                    }
                    else if (config.inputType === graphql_codegen_core_1.EInputType.MULTIPLE_FILES || config.inputType === graphql_codegen_core_1.EInputType.PROJECT) {
                        if (config.inputType === graphql_codegen_core_1.EInputType.MULTIPLE_FILES) {
                            if (!config.filesExtension) {
                                throw new Error('Config filesExtension is required when using inputType = MULTIPLE_FILES!');
                            }
                        }
                        graphql_codegen_core_1.debugLog("[compileTemplate] Executing generateMultipleFiles...");
                        compiledTemplates = Object.keys(templates_1)
                            .map(function (templateName) {
                            graphql_codegen_core_1.debugLog("[compileTemplate] Compiling template: " + templateName + "...");
                            var compiledTemplate = handlebars_1.compile(clean_template_1.cleanTemplateComments(templates_1[templateName], templateName));
                            return {
                                key: templateName,
                                value: compiledTemplate
                            };
                        })
                            .reduce(function (prev, item) {
                            prev[item.key] = item.value;
                            return prev;
                        }, {});
                        graphql_codegen_core_1.debugLog("[compileTemplate] Templates names: ", Object.keys(compiledTemplates));
                        return [2 /*return*/, generate_multiple_files_1.generateMultipleFiles(compiledTemplates, executionSettings, config, templateContext, mergedDocuments, documentsFiles)];
                    }
                    else {
                        throw new Error("Invalid inputType specified: " + config.inputType + "!");
                    }
                    _a.label = 6;
                case 6: return [2 /*return*/];
            }
        });
    });
}
exports.compileTemplate = compileTemplate;
//# sourceMappingURL=compile.js.map