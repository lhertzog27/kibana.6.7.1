"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var graphql_codegen_core_1 = require("graphql-codegen-core");
var sanitizie_filename_1 = require("./sanitizie-filename");
var prepare_documents_only_1 = require("./prepare-documents-only");
var path = require("path");
var moment = require("moment");
var handlersMap = {
    type: handleType,
    inputType: handleInputType,
    union: handleUnion,
    enum: handleEnum,
    scalar: handleScalar,
    interface: handleInterface,
    operation: handleOperation,
    fragment: handleFragment,
    schema: handleSchema,
    documents: handleDocuments,
    all: handleAll
};
exports.ALLOWED_CUSTOM_TEMPLATE_EXT = ['template', 'handlebars', 'tmpl', 'gqlgen'];
function handleSchema(compiledTemplate, schemaContext, _documents, extraConfig, fileExtension, prefixAndPath) {
    if (prefixAndPath === void 0) { prefixAndPath = ''; }
    graphql_codegen_core_1.debugLog("[handleSchema] called");
    return [
        {
            filename: prefixAndPath + '.' + (fileExtension || ''),
            content: compiledTemplate(__assign({}, extraConfig, schemaContext))
        }
    ];
}
function handleAll(compiledTemplate, schemaContext, documents, extraConfig, fileExtension, prefixAndPath) {
    if (prefixAndPath === void 0) { prefixAndPath = ''; }
    graphql_codegen_core_1.debugLog("[handleAll] called");
    return [
        {
            filename: prefixAndPath + '.' + (fileExtension || ''),
            content: compiledTemplate(__assign({}, schemaContext, extraConfig, { operations: documents.operations, fragments: documents.fragments, hasFragments: documents.hasFragments, hasOperations: documents.hasOperations }))
        }
    ];
}
function handleDocuments(compiledTemplate, _schemaContext, documents, extraConfig, fileExtension, prefixAndPath) {
    if (prefixAndPath === void 0) { prefixAndPath = ''; }
    graphql_codegen_core_1.debugLog("[handleDocuments] called");
    return [
        {
            filename: prefixAndPath + '.' + (fileExtension || ''),
            content: compiledTemplate(__assign({}, extraConfig, { operations: documents.operations, fragments: documents.fragments, hasFragments: documents.hasFragments, hasOperations: documents.hasOperations }))
        }
    ];
}
function handleType(compiledTemplate, schemaContext, _documents, extraConfig, fileExtension, prefixAndPath) {
    if (prefixAndPath === void 0) { prefixAndPath = ''; }
    graphql_codegen_core_1.debugLog("[handleType] called");
    return schemaContext.types.map(function (type) { return ({
        filename: prefixAndPath + sanitizie_filename_1.sanitizeFilename(type.name, 'type') + '.' + (fileExtension || ''),
        content: compiledTemplate(__assign({}, type, extraConfig))
    }); });
}
function handleInputType(compiledTemplate, schemaContext, _documents, extraConfig, fileExtension, prefixAndPath) {
    if (prefixAndPath === void 0) { prefixAndPath = ''; }
    graphql_codegen_core_1.debugLog("[handleInputType] called");
    return schemaContext.inputTypes.map(function (type) { return ({
        filename: prefixAndPath + sanitizie_filename_1.sanitizeFilename(type.name, 'input-type') + '.' + (fileExtension || ''),
        content: compiledTemplate(__assign({}, type, extraConfig))
    }); });
}
function handleUnion(compiledTemplate, schemaContext, _documents, extraConfig, fileExtension, prefixAndPath) {
    if (prefixAndPath === void 0) { prefixAndPath = ''; }
    graphql_codegen_core_1.debugLog("[handleUnion] called");
    return schemaContext.unions.map(function (union) { return ({
        filename: prefixAndPath + sanitizie_filename_1.sanitizeFilename(union.name, 'union') + '.' + (fileExtension || ''),
        content: compiledTemplate(__assign({}, union, extraConfig))
    }); });
}
function handleEnum(compiledTemplate, schemaContext, _documents, extraConfig, fileExtension, prefixAndPath) {
    if (prefixAndPath === void 0) { prefixAndPath = ''; }
    graphql_codegen_core_1.debugLog("[handleEnum] called");
    return schemaContext.enums.map(function (en) { return ({
        filename: prefixAndPath + sanitizie_filename_1.sanitizeFilename(en.name, 'enum') + '.' + (fileExtension || ''),
        content: compiledTemplate(__assign({}, en, extraConfig))
    }); });
}
function handleScalar(compiledTemplate, schemaContext, _documents, extraConfig, fileExtension, prefixAndPath) {
    if (prefixAndPath === void 0) { prefixAndPath = ''; }
    graphql_codegen_core_1.debugLog("[handleScalar] called");
    return schemaContext.scalars.map(function (scalar) { return ({
        filename: prefixAndPath + sanitizie_filename_1.sanitizeFilename(scalar.name, 'scalar') + '.' + (fileExtension || ''),
        content: compiledTemplate(__assign({}, scalar, extraConfig))
    }); });
}
function handleInterface(compiledTemplate, schemaContext, _documents, extraConfig, fileExtension, prefixAndPath) {
    if (prefixAndPath === void 0) { prefixAndPath = ''; }
    graphql_codegen_core_1.debugLog("[handleInterface] called");
    return schemaContext.interfaces.map(function (inf) { return ({
        filename: prefixAndPath + sanitizie_filename_1.sanitizeFilename(inf.name, 'interface') + '.' + (fileExtension || ''),
        content: compiledTemplate(__assign({}, inf, extraConfig))
    }); });
}
function handleOperation(compiledTemplate, _schemaContext, documents, extraConfig, fileExtension, prefixAndPath) {
    if (prefixAndPath === void 0) { prefixAndPath = ''; }
    graphql_codegen_core_1.debugLog("[handleOperation] called");
    return documents.operations.map(function (operation) { return ({
        filename: prefixAndPath + sanitizie_filename_1.sanitizeFilename(operation.name, operation.operationType) + '.' + (fileExtension || ''),
        content: compiledTemplate(__assign({}, operation, extraConfig))
    }); });
}
function handleFragment(compiledTemplate, _schemaContext, documents, extraConfig, fileExtension, prefixAndPath) {
    if (prefixAndPath === void 0) { prefixAndPath = ''; }
    graphql_codegen_core_1.debugLog("[handleFragment] called");
    return documents.fragments.map(function (fragment) { return ({
        filename: prefixAndPath + sanitizie_filename_1.sanitizeFilename(fragment.name, 'fragment') + '.' + (fileExtension || ''),
        content: compiledTemplate(__assign({}, fragment, extraConfig))
    }); });
}
function parseTemplateNameElements(templateName) {
    var basename = path.basename(templateName);
    var pathPrefix = templateName.substr(0, templateName.length - basename.length);
    var splitted = path.basename(templateName).split('.');
    var hasPrefix = true;
    if (splitted.length === 3) {
        splitted.unshift('');
        hasPrefix = false;
    }
    if (splitted.length > 4 && templateName.includes('/')) {
        splitted = [splitted.slice(0, splitted.length - 3).join('.'), splitted[2], splitted[3], splitted[4]];
    }
    var templateExtension = splitted[3];
    if (templateExtension && exports.ALLOWED_CUSTOM_TEMPLATE_EXT.includes(templateExtension)) {
        var prefix = splitted[0];
        var compilationContext = splitted[2];
        return {
            pathPrefix: pathPrefix,
            fileExtension: splitted[1],
            compilationContext: compilationContext,
            prefix: hasPrefix
                ? ['all', 'documents', 'schema'].includes(compilationContext)
                    ? prefix
                    : prefix + '.'
                : ['all', 'documents', 'schema'].includes(compilationContext)
                    ? compilationContext
                    : prefix
        };
    }
    return null;
}
function parseTemplateName(templateName) {
    var elements = parseTemplateNameElements(templateName);
    if (elements && handlersMap[elements.compilationContext]) {
        var compilationContext = elements.compilationContext, pathPrefix = elements.pathPrefix, prefix = elements.prefix, fileExtension = elements.fileExtension;
        return {
            handler: handlersMap[compilationContext],
            prefix: pathPrefix + prefix,
            fileExtension: fileExtension
        };
    }
    return null;
}
function generateMultipleFiles(templates, executionSettings, config, templateContext, documents, documentsFiles) {
    if (documentsFiles === void 0) { documentsFiles = []; }
    graphql_codegen_core_1.debugLog("[generateMultipleFiles] Compiling multiple files...");
    var result = [];
    var schemaContext = !executionSettings.generateSchema
        ? prepare_documents_only_1.prepareSchemaForDocumentsOnly(templateContext)
        : templateContext;
    Object.keys(templates).forEach(function (templateName) {
        graphql_codegen_core_1.debugLog("[generateMultipleFiles] Checking template: " + templateName);
        var templateFn = templates[templateName];
        if (handlersMap[templateName]) {
            graphql_codegen_core_1.debugLog("[generateMultipleFiles] Using simple handle of type: " + templateName);
            var handler = handlersMap[templateName];
            result.push.apply(result, handler(templateFn, schemaContext, documents, {
                documentsFiles: documentsFiles,
                config: config.config,
                primitives: config.primitives,
                currentTime: moment().format()
            }, config.filesExtension));
        }
        else {
            var parsedTemplateName = parseTemplateName(templateName);
            graphql_codegen_core_1.debugLog("[generateMultipleFiles] Using custom template handlers, parsed template name result: ", parsedTemplateName);
            if (parsedTemplateName !== null) {
                result.push.apply(result, parsedTemplateName.handler(templateFn, schemaContext, documents, {
                    documentsFiles: documentsFiles,
                    config: config.config,
                    currentTime: moment().format()
                }, parsedTemplateName.fileExtension, parsedTemplateName.prefix));
            }
        }
    });
    return result;
}
exports.generateMultipleFiles = generateMultipleFiles;
//# sourceMappingURL=generate-multiple-files.js.map