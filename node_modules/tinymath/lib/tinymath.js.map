{"version":3,"file":"tinymath.js","sources":["../node_modules/object-get/lib/object-get.js","../src/grammar.js","../src/functions/abs.js","../src/functions/add.js","../src/functions/cbrt.js","../src/functions/ceil.js","../src/functions/clamp.js","../src/functions/size.js","../src/functions/count.js","../src/functions/pow.js","../src/functions/cube.js","../src/functions/divide.js","../src/functions/exp.js","../src/functions/first.js","../src/functions/fix.js","../src/functions/floor.js","../src/functions/last.js","../src/functions/log.js","../src/functions/log10.js","../src/functions/max.js","../src/functions/mean.js","../src/functions/lib/transpose.js","../src/functions/median.js","../src/functions/min.js","../src/functions/mod.js","../src/functions/mode.js","../src/functions/multiply.js","../src/functions/random.js","../src/functions/subtract.js","../src/functions/range.js","../src/functions/round.js","../src/functions/sqrt.js","../src/functions/square.js","../src/functions/sum.js","../src/functions/unique.js","../src/functions/index.js","../src/index.js"],"sourcesContent":["'use strict'\n\n/**\n * Access nested property values at any depth with a simple expression.\n *\n * @module object-get\n * @typicalname objectGet\n * @example\n * ```js\n * const objectGet = require('object-get')\n *\n * const colour = objectGet(mammal, 'fur.appearance.colour')\n * const text = objectGet(el, 'children[2].children[1].children[1].textContent')\n * ```\n *\n * Helps avoid long logical expressions like:\n *\n * ```js\n * const colour = mammal && mammal.fur && mammal.fur.appearance && mammal.fur.appearance.colour\n * ```\n */\nmodule.exports = objectGet\n\n/**\n * Returns the value at the given property.\n *\n * @param {object} - the input object\n * @param {string} - the property accessor expression. \n * @returns {*}\n * @alias module:object-get\n * @example\n * > objectGet({ animal: 'cow' }, 'animal')\n * 'cow'\n *\n * > objectGet({ animal: { mood: 'lazy' } }, 'animal')\n * { mood: 'lazy' }\n *\n * > objectGet({ animal: { mood: 'lazy' } }, 'animal.mood')\n * 'lazy'\n *\n * > objectGet({ animal: { mood: 'lazy' } }, 'animal.email')\n * undefined\n */\nfunction objectGet (object, expression) {\n  if (!(object && expression)) throw new Error('both object and expression args are required')\n  return expression.trim().split('.').reduce(function (prev, curr) {\n    var arr = curr.match(/(.*?)\\[(.*?)\\]/)\n    if (arr) {\n      return prev && prev[arr[1]][arr[2]]\n    } else {\n      return prev && prev[curr]\n    }\n  }, object)\n}\n","/*\n * Generated by PEG.js 0.10.0.\n *\n * http://pegjs.org/\n */\n\n\"use strict\";\n\nfunction peg$subclass(child, parent) {\n  function ctor() { this.constructor = child; }\n  ctor.prototype = parent.prototype;\n  child.prototype = new ctor();\n}\n\nfunction peg$SyntaxError(message, expected, found, location) {\n  this.message  = message;\n  this.expected = expected;\n  this.found    = found;\n  this.location = location;\n  this.name     = \"SyntaxError\";\n\n  if (typeof Error.captureStackTrace === \"function\") {\n    Error.captureStackTrace(this, peg$SyntaxError);\n  }\n}\n\npeg$subclass(peg$SyntaxError, Error);\n\npeg$SyntaxError.buildMessage = function(expected, found) {\n  var DESCRIBE_EXPECTATION_FNS = {\n        literal: function(expectation) {\n          return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n        },\n\n        \"class\": function(expectation) {\n          var escapedParts = \"\",\n              i;\n\n          for (i = 0; i < expectation.parts.length; i++) {\n            escapedParts += expectation.parts[i] instanceof Array\n              ? classEscape(expectation.parts[i][0]) + \"-\" + classEscape(expectation.parts[i][1])\n              : classEscape(expectation.parts[i]);\n          }\n\n          return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n        },\n\n        any: function(expectation) {\n          return \"any character\";\n        },\n\n        end: function(expectation) {\n          return \"end of input\";\n        },\n\n        other: function(expectation) {\n          return expectation.description;\n        }\n      };\n\n  function hex(ch) {\n    return ch.charCodeAt(0).toString(16).toUpperCase();\n  }\n\n  function literalEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\"/g,  '\\\\\"')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function classEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\\]/g, '\\\\]')\n      .replace(/\\^/g, '\\\\^')\n      .replace(/-/g,  '\\\\-')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function describeExpectation(expectation) {\n    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n  }\n\n  function describeExpected(expected) {\n    var descriptions = new Array(expected.length),\n        i, j;\n\n    for (i = 0; i < expected.length; i++) {\n      descriptions[i] = describeExpectation(expected[i]);\n    }\n\n    descriptions.sort();\n\n    if (descriptions.length > 0) {\n      for (i = 1, j = 1; i < descriptions.length; i++) {\n        if (descriptions[i - 1] !== descriptions[i]) {\n          descriptions[j] = descriptions[i];\n          j++;\n        }\n      }\n      descriptions.length = j;\n    }\n\n    switch (descriptions.length) {\n      case 1:\n        return descriptions[0];\n\n      case 2:\n        return descriptions[0] + \" or \" + descriptions[1];\n\n      default:\n        return descriptions.slice(0, -1).join(\", \")\n          + \", or \"\n          + descriptions[descriptions.length - 1];\n    }\n  }\n\n  function describeFound(found) {\n    return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\n  }\n\n  return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n};\n\nfunction peg$parse(input, options) {\n  options = options !== void 0 ? options : {};\n\n  var peg$FAILED = {},\n\n      peg$startRuleFunctions = { start: peg$parsestart },\n      peg$startRuleFunction  = peg$parsestart,\n\n      peg$c0 = peg$otherExpectation(\"whitespace\"),\n      peg$c1 = /^[ \\t\\n\\r]/,\n      peg$c2 = peg$classExpectation([\" \", \"\\t\", \"\\n\", \"\\r\"], false, false),\n      peg$c3 = /^[ ]/,\n      peg$c4 = peg$classExpectation([\" \"], false, false),\n      peg$c5 = /^[\"']/,\n      peg$c6 = peg$classExpectation([\"\\\"\", \"'\"], false, false),\n      peg$c7 = /^[A-Za-z_@.[\\]\\-]/,\n      peg$c8 = peg$classExpectation([[\"A\", \"Z\"], [\"a\", \"z\"], \"_\", \"@\", \".\", \"[\", \"]\", \"-\"], false, false),\n      peg$c9 = /^[0-9A-Za-z._@[\\]\\-]/,\n      peg$c10 = peg$classExpectation([[\"0\", \"9\"], [\"A\", \"Z\"], [\"a\", \"z\"], \".\", \"_\", \"@\", \"[\", \"]\", \"-\"], false, false),\n      peg$c11 = peg$otherExpectation(\"literal\"),\n      peg$c12 = function(literal) {\n          return literal;\n        },\n      peg$c13 = function(first, rest) { // We can open this up later. Strict for now.\n          return first + rest.join('');\n        },\n      peg$c14 = function(first, mid) {\n          return first + mid.map(m => m[0].join('') + m[1].join('')).join('')\n        },\n      peg$c15 = \"+\",\n      peg$c16 = peg$literalExpectation(\"+\", false),\n      peg$c17 = \"-\",\n      peg$c18 = peg$literalExpectation(\"-\", false),\n      peg$c19 = function(left, rest) {\n          return rest.reduce((acc, curr) => ({\n            name: curr[0] === '+' ? 'add' : 'subtract',\n            args: [acc, curr[1]]\n          }), left)\n        },\n      peg$c20 = \"*\",\n      peg$c21 = peg$literalExpectation(\"*\", false),\n      peg$c22 = \"/\",\n      peg$c23 = peg$literalExpectation(\"/\", false),\n      peg$c24 = function(left, rest) {\n          return rest.reduce((acc, curr) => ({\n            name: curr[0] === '*' ? 'multiply' : 'divide',\n            args: [acc, curr[1]]\n          }), left)\n        },\n      peg$c25 = \"(\",\n      peg$c26 = peg$literalExpectation(\"(\", false),\n      peg$c27 = \")\",\n      peg$c28 = peg$literalExpectation(\")\", false),\n      peg$c29 = function(expr) {\n          return expr\n        },\n      peg$c30 = peg$otherExpectation(\"arguments\"),\n      peg$c31 = \",\",\n      peg$c32 = peg$literalExpectation(\",\", false),\n      peg$c33 = function(first, arg) {return arg},\n      peg$c34 = function(first, rest) {\n          return [first].concat(rest);\n        },\n      peg$c35 = peg$otherExpectation(\"function\"),\n      peg$c36 = /^[a-z]/,\n      peg$c37 = peg$classExpectation([[\"a\", \"z\"]], false, false),\n      peg$c38 = function(name, args) {\n          return {name: name.join(''), args: args || []};\n        },\n      peg$c39 = peg$otherExpectation(\"number\"),\n      peg$c40 = function() { return parseFloat(text()); },\n      peg$c41 = /^[eE]/,\n      peg$c42 = peg$classExpectation([\"e\", \"E\"], false, false),\n      peg$c43 = peg$otherExpectation(\"exponent\"),\n      peg$c44 = \".\",\n      peg$c45 = peg$literalExpectation(\".\", false),\n      peg$c46 = \"0\",\n      peg$c47 = peg$literalExpectation(\"0\", false),\n      peg$c48 = /^[1-9]/,\n      peg$c49 = peg$classExpectation([[\"1\", \"9\"]], false, false),\n      peg$c50 = /^[0-9]/,\n      peg$c51 = peg$classExpectation([[\"0\", \"9\"]], false, false),\n\n      peg$currPos          = 0,\n      peg$savedPos         = 0,\n      peg$posDetailsCache  = [{ line: 1, column: 1 }],\n      peg$maxFailPos       = 0,\n      peg$maxFailExpected  = [],\n      peg$silentFails      = 0,\n\n      peg$result;\n\n  if (\"startRule\" in options) {\n    if (!(options.startRule in peg$startRuleFunctions)) {\n      throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n    }\n\n    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n  }\n\n  function text() {\n    return input.substring(peg$savedPos, peg$currPos);\n  }\n\n  function location() {\n    return peg$computeLocation(peg$savedPos, peg$currPos);\n  }\n\n  function expected(description, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildStructuredError(\n      [peg$otherExpectation(description)],\n      input.substring(peg$savedPos, peg$currPos),\n      location\n    );\n  }\n\n  function error(message, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildSimpleError(message, location);\n  }\n\n  function peg$literalExpectation(text, ignoreCase) {\n    return { type: \"literal\", text: text, ignoreCase: ignoreCase };\n  }\n\n  function peg$classExpectation(parts, inverted, ignoreCase) {\n    return { type: \"class\", parts: parts, inverted: inverted, ignoreCase: ignoreCase };\n  }\n\n  function peg$anyExpectation() {\n    return { type: \"any\" };\n  }\n\n  function peg$endExpectation() {\n    return { type: \"end\" };\n  }\n\n  function peg$otherExpectation(description) {\n    return { type: \"other\", description: description };\n  }\n\n  function peg$computePosDetails(pos) {\n    var details = peg$posDetailsCache[pos], p;\n\n    if (details) {\n      return details;\n    } else {\n      p = pos - 1;\n      while (!peg$posDetailsCache[p]) {\n        p--;\n      }\n\n      details = peg$posDetailsCache[p];\n      details = {\n        line:   details.line,\n        column: details.column\n      };\n\n      while (p < pos) {\n        if (input.charCodeAt(p) === 10) {\n          details.line++;\n          details.column = 1;\n        } else {\n          details.column++;\n        }\n\n        p++;\n      }\n\n      peg$posDetailsCache[pos] = details;\n      return details;\n    }\n  }\n\n  function peg$computeLocation(startPos, endPos) {\n    var startPosDetails = peg$computePosDetails(startPos),\n        endPosDetails   = peg$computePosDetails(endPos);\n\n    return {\n      start: {\n        offset: startPos,\n        line:   startPosDetails.line,\n        column: startPosDetails.column\n      },\n      end: {\n        offset: endPos,\n        line:   endPosDetails.line,\n        column: endPosDetails.column\n      }\n    };\n  }\n\n  function peg$fail(expected) {\n    if (peg$currPos < peg$maxFailPos) { return; }\n\n    if (peg$currPos > peg$maxFailPos) {\n      peg$maxFailPos = peg$currPos;\n      peg$maxFailExpected = [];\n    }\n\n    peg$maxFailExpected.push(expected);\n  }\n\n  function peg$buildSimpleError(message, location) {\n    return new peg$SyntaxError(message, null, null, location);\n  }\n\n  function peg$buildStructuredError(expected, found, location) {\n    return new peg$SyntaxError(\n      peg$SyntaxError.buildMessage(expected, found),\n      expected,\n      found,\n      location\n    );\n  }\n\n  function peg$parsestart() {\n    var s0;\n\n    s0 = peg$parseAddSubtract();\n\n    return s0;\n  }\n\n  function peg$parse_() {\n    var s0, s1;\n\n    peg$silentFails++;\n    s0 = [];\n    if (peg$c1.test(input.charAt(peg$currPos))) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c2); }\n    }\n    while (s1 !== peg$FAILED) {\n      s0.push(s1);\n      if (peg$c1.test(input.charAt(peg$currPos))) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c2); }\n      }\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c0); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseSpace() {\n    var s0;\n\n    if (peg$c3.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c4); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseQuote() {\n    var s0;\n\n    if (peg$c5.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c6); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseStartChar() {\n    var s0;\n\n    if (peg$c7.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c8); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseValidChar() {\n    var s0;\n\n    if (peg$c9.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c10); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLiteral() {\n    var s0, s1, s2, s3;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parse_();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseNumber();\n      if (s2 === peg$FAILED) {\n        s2 = peg$parseVariableWithQuote();\n        if (s2 === peg$FAILED) {\n          s2 = peg$parseVariable();\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse_();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c12(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c11); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseVariable() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$parse_();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseStartChar();\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$parseValidChar();\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          s4 = peg$parseValidChar();\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c13(s2, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseVariableWithQuote() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    s1 = peg$parse_();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseQuote();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseStartChar();\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$currPos;\n          s6 = [];\n          s7 = peg$parseSpace();\n          while (s7 !== peg$FAILED) {\n            s6.push(s7);\n            s7 = peg$parseSpace();\n          }\n          if (s6 !== peg$FAILED) {\n            s7 = [];\n            s8 = peg$parseValidChar();\n            if (s8 !== peg$FAILED) {\n              while (s8 !== peg$FAILED) {\n                s7.push(s8);\n                s8 = peg$parseValidChar();\n              }\n            } else {\n              s7 = peg$FAILED;\n            }\n            if (s7 !== peg$FAILED) {\n              s6 = [s6, s7];\n              s5 = s6;\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$currPos;\n            s6 = [];\n            s7 = peg$parseSpace();\n            while (s7 !== peg$FAILED) {\n              s6.push(s7);\n              s7 = peg$parseSpace();\n            }\n            if (s6 !== peg$FAILED) {\n              s7 = [];\n              s8 = peg$parseValidChar();\n              if (s8 !== peg$FAILED) {\n                while (s8 !== peg$FAILED) {\n                  s7.push(s8);\n                  s8 = peg$parseValidChar();\n                }\n              } else {\n                s7 = peg$FAILED;\n              }\n              if (s7 !== peg$FAILED) {\n                s6 = [s6, s7];\n                s5 = s6;\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseQuote();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c14(s3, s4);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseAddSubtract() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = peg$parse_();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseMultiplyDivide();\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 43) {\n          s5 = peg$c15;\n          peg$currPos++;\n        } else {\n          s5 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c16); }\n        }\n        if (s5 === peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 45) {\n            s5 = peg$c17;\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c18); }\n          }\n        }\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parseMultiplyDivide();\n          if (s6 !== peg$FAILED) {\n            s5 = [s5, s6];\n            s4 = s5;\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          s4 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 43) {\n            s5 = peg$c15;\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c16); }\n          }\n          if (s5 === peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 45) {\n              s5 = peg$c17;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c18); }\n            }\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parseMultiplyDivide();\n            if (s6 !== peg$FAILED) {\n              s5 = [s5, s6];\n              s4 = s5;\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c19(s2, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseMultiplyDivide() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = peg$parse_();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseFactor();\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 42) {\n          s5 = peg$c20;\n          peg$currPos++;\n        } else {\n          s5 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c21); }\n        }\n        if (s5 === peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 47) {\n            s5 = peg$c22;\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c23); }\n          }\n        }\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parseFactor();\n          if (s6 !== peg$FAILED) {\n            s5 = [s5, s6];\n            s4 = s5;\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          s4 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 42) {\n            s5 = peg$c20;\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c21); }\n          }\n          if (s5 === peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 47) {\n              s5 = peg$c22;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c23); }\n            }\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parseFactor();\n            if (s6 !== peg$FAILED) {\n              s5 = [s5, s6];\n              s4 = s5;\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c24(s2, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseFactor() {\n    var s0;\n\n    s0 = peg$parseGroup();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseFunction();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseLiteral();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseGroup() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parse_();\n    if (s1 !== peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s2 = peg$c25;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c26); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse_();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseAddSubtract();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse_();\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s6 = peg$c27;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c28); }\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse_();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c29(s4);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseArguments() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parse_();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseAddSubtract();\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$currPos;\n        s5 = peg$parse_();\n        if (s5 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 44) {\n            s6 = peg$c31;\n            peg$currPos++;\n          } else {\n            s6 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c32); }\n          }\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parse_();\n            if (s7 !== peg$FAILED) {\n              s8 = peg$parseAddSubtract();\n              if (s8 !== peg$FAILED) {\n                peg$savedPos = s4;\n                s5 = peg$c33(s2, s8);\n                s4 = s5;\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          s4 = peg$currPos;\n          s5 = peg$parse_();\n          if (s5 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 44) {\n              s6 = peg$c31;\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c32); }\n            }\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parse_();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parseAddSubtract();\n                if (s8 !== peg$FAILED) {\n                  peg$savedPos = s4;\n                  s5 = peg$c33(s2, s8);\n                  s4 = s5;\n                } else {\n                  peg$currPos = s4;\n                  s4 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n          if (s4 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 44) {\n              s5 = peg$c31;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c32); }\n            }\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c34(s2, s3);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c30); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseFunction() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parse_();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c36.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c37); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c36.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c37); }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 40) {\n          s3 = peg$c25;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c26); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseArguments();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n              if (s6 !== peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 41) {\n                  s7 = peg$c27;\n                  peg$currPos++;\n                } else {\n                  s7 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c28); }\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse_();\n                  if (s8 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c38(s2, s5);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c35); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseNumber() {\n    var s0, s1, s2, s3, s4;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 45) {\n      s1 = peg$c17;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c18); }\n    }\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseInteger();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseFraction();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseExp();\n          if (s4 === peg$FAILED) {\n            s4 = null;\n          }\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c40();\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c39); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseE() {\n    var s0;\n\n    if (peg$c41.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c42); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseExp() {\n    var s0, s1, s2, s3, s4;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parseE();\n    if (s1 !== peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 45) {\n        s2 = peg$c17;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c18); }\n      }\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$parseDigit();\n        if (s4 !== peg$FAILED) {\n          while (s4 !== peg$FAILED) {\n            s3.push(s4);\n            s4 = peg$parseDigit();\n          }\n        } else {\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          s1 = [s1, s2, s3];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c43); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseFraction() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 46) {\n      s1 = peg$c44;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c45); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parseDigit();\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$parseDigit();\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseInteger() {\n    var s0, s1, s2, s3;\n\n    if (input.charCodeAt(peg$currPos) === 48) {\n      s0 = peg$c46;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c47); }\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (peg$c48.test(input.charAt(peg$currPos))) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c49); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$parseDigit();\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$parseDigit();\n        }\n        if (s2 !== peg$FAILED) {\n          s1 = [s1, s2];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseDigit() {\n    var s0;\n\n    if (peg$c50.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c51); }\n    }\n\n    return s0;\n  }\n\n  peg$result = peg$startRuleFunction();\n\n  if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n    return peg$result;\n  } else {\n    if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n      peg$fail(peg$endExpectation());\n    }\n\n    throw peg$buildStructuredError(\n      peg$maxFailExpected,\n      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n      peg$maxFailPos < input.length\n        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n    );\n  }\n}\n\nmodule.exports = {\n  SyntaxError: peg$SyntaxError,\n  parse:       peg$parse\n};\n","/**\n * Calculates the absolute value of a number. For arrays, the function will be applied index-wise to each element.\n * @param {(number|number[])} a a number or an array of numbers\n * @return {(number|number[])} The absolute value of `a`. Returns an array with the the absolute values of each element if `a` is an array.\n *\n * @example\n * abs(-1) // returns 1\n * abs(2) // returns 2\n * abs([-1 , -2, 3, -4]) // returns [1, 2, 3, 4]\n */\n\nexport function abs(a) {\n  if (Array.isArray(a)) {\n    return a.map(a => Math.abs(a));\n  }\n  return Math.abs(a);\n}\n","/**\n * Calculates the sum of one or more numbers/arrays passed into the function. If at least one array of numbers is passed into the function, the function will calculate the sum by index.\n * @param {...(number|number[])} args one or more numbers or arrays of numbers\n * @return {(number|number[])} The sum of all numbers in `args` if `args` contains only numbers. Returns an array of sums of the elements at each index, including all scalar numbers in `args` in the calculation at each index if `args` contains at least one array.\n * @throws `'Array length mismatch'` if `args` contains arrays of different lengths\n * @example\n * add(1, 2, 3) // returns 6\n * add([10, 20, 30, 40], 10, 20, 30) // returns [70, 80, 90, 100]\n * add([1, 2], 3, [4, 5], 6) // returns [(1 + 3 + 4 + 6), (2 + 3 + 5 + 6)] = [14, 16]\n */\n\nexport function add(...args) {\n  if (args.length === 1) {\n    if (Array.isArray(args[0])) return args[0].reduce((result, current) => result + current);\n    return args[0];\n  }\n\n  return args.reduce((result, current) => {\n    if (Array.isArray(result) && Array.isArray(current)) {\n      if (current.length !== result.length) throw new Error('Array length mismatch');\n      return result.map((val, i) => val + current[i]);\n    }\n    if (Array.isArray(result)) return result.map(val => val + current);\n    if (Array.isArray(current)) return current.map(val => val + result);\n    return result + current;\n  });\n}\n","/**\n * Calculates the cube root of a number. For arrays, the function will be applied index-wise to each element.\n * @param {(number|number[])} a a number or an array of numbers\n * @return {(number|number[])} The cube root of `a`. Returns an array with the the cube roots of each element if `a` is an array.\n *\n * @example\n * cbrt(-27) // returns -3\n * cbrt(94) // returns 4.546835943776344\n * cbrt([27, 64, 125]) // returns [3, 4, 5]\n */\n\nexport function cbrt(a) {\n  if (Array.isArray(a)) {\n    return a.map(a => Math.cbrt(a));\n  }\n  return Math.cbrt(a);\n}\n","/**\n * Calculates the ceiling of a number, i.e. rounds a number towards positive infinity. For arrays, the function will be applied index-wise to each element.\n * @param {(number|number[])} a a number or an array of numbers\n * @return {(number|number[])} The ceiling of `a`. Returns an array with the the ceilings of each element if `a` is an array.\n *\n * @example\n * ceil(1.2) // returns 2\n * ceil(-1.8) // returns -1\n * ceil([1.1, 2.2, 3.3]) // returns [2, 3, 4]\n */\n\nexport function ceil(a) {\n  if (Array.isArray(a)) {\n    return a.map(a => Math.ceil(a));\n  }\n  return Math.ceil(a);\n}\n","const findClamp = (a, min, max) => {\n  if (min > max) throw new Error('Min must be less than max');\n  return Math.min(Math.max(a, min), max);\n};\n\n/**\n * Restricts value to a given range and returns closed available value. If only min is provided, values are restricted to only a lower bound.\n * @param {...(number|number[])} a one or more numbers or arrays of numbers\n * @param {(number|number[])} min The minimum value this function will return.\n * @param {(number|number[])} max The maximum value this function will return.\n * @return {(number|number[])} The closest value between `min` (inclusive) and `max` (inclusive). Returns an array with values greater than or equal to `min` and less than or equal to `max` (if provided) at each index.\n * @throws `'Array length mismatch'` if `a`, `min`, and/or `max` are arrays of different lengths\n * @throws `'Min must be less than max'` if `max` is less than `min`\n * @throws `'Missing minimum value. You may want to use the 'max' function instead'` if min is not provided\n * @throws `'Missing maximum value. You may want to use the 'min' function instead'` if max is not provided\n *\n * @example\n * clamp(1, 2, 3) // returns 2\n * clamp([10, 20, 30, 40], 15, 25) // returns [15, 20, 25, 25]\n * clamp(10, [15, 2, 4, 20], 25) // returns [15, 10, 10, 20]\n * clamp(35, 10, [20, 30, 40, 50]) // returns [20, 30, 35, 35]\n * clamp([1, 9], 3, [4, 5]) // returns [clamp([1, 3, 4]), clamp([9, 3, 5])] = [3, 5]\n */\n\nexport function clamp(a, min, max) {\n  if (max === null)\n    throw new Error(\"Missing maximum value. You may want to use the 'min' function instead\");\n  if (min === null)\n    throw new Error(\"Missing minimum value. You may want to use the 'max' function instead\");\n\n  if (Array.isArray(max)) {\n    if (Array.isArray(a) && Array.isArray(min)) {\n      if (a.length !== max.length || a.length !== min.length)\n        throw new Error('Array length mismatch');\n      return max.map((max, i) => findClamp(a[i], min[i], max));\n    }\n\n    if (Array.isArray(a)) {\n      if (a.length !== max.length) throw new Error('Array length mismatch');\n      return max.map((max, i) => findClamp(a[i], min, max));\n    }\n\n    if (Array.isArray(min)) {\n      if (min.length !== max.length) throw new Error('Array length mismatch');\n      return max.map((max, i) => findClamp(a, min[i], max));\n    }\n\n    return max.map(max => findClamp(a, min, max));\n  }\n\n  if (Array.isArray(a) && Array.isArray(min)) {\n    if (a.length !== min.length) throw new Error('Array length mismatch');\n    return a.map((a, i) => findClamp(a, min[i]));\n  }\n\n  if (Array.isArray(a)) {\n    return a.map(a => findClamp(a, min, max));\n  }\n\n  if (Array.isArray(min)) {\n    return min.map(min => findClamp(a, min, max));\n  }\n\n  return findClamp(a, min, max);\n}\n","/**\n * Returns the length of an array. Alias for count\n * @param {any[]} a array of any values\n * @return {(number)} The length of the array. Returns 1 if `a` is not an array.\n * @throws `'Must pass an array'` if `a` is not an array\n * @example\n * size([]) // returns 0\n * size([-1, -2, -3, -4]) // returns 4\n * size(100) // returns 1\n */\n\nexport function size(a) {\n  if (Array.isArray(a)) return a.length;\n  throw new Error('Must pass an array');\n}\n\nsize.skipNumberValidation = true;\n","import { size } from './size.js';\n\n/**\n * Returns the length of an array. Alias for size\n * @param {any[]} a array of any values\n * @return {(number)} The length of the array. Returns 1 if `a` is not an array.\n * @throws `'Must pass an array'` if `a` is not an array\n * @example\n * count([]) // returns 0\n * count([-1, -2, -3, -4]) // returns 4\n * count(100) // returns 1\n */\n\nexport function count(a) {\n  return size(a);\n}\n\ncount.skipNumberValidation = true;\n","/**\n * Calculates the cube root of a number. For arrays, the function will be applied index-wise to each element.\n * @param {(number|number[])} a a number or an array of numbers\n * @param {(number)} b the power that `a` is raised to\n * @return {(number|number[])} `a` raised to the power of `b`. Returns an array with the each element raised to the power of `b` if `a` is an array.\n * @throws `'Missing exponent'` if `b` is not provided\n * @example\n * pow(2,3) // returns 8\n * pow([1, 2, 3], 4) // returns [1, 16, 81]\n */\n\nexport function pow(a, b) {\n  if (b == null) throw new Error('Missing exponent');\n  if (Array.isArray(a)) {\n    return a.map(a => Math.pow(a, b));\n  }\n  return Math.pow(a, b);\n}\n","import { pow } from './pow.js';\n\n/**\n * Calculates the cube of a number. For arrays, the function will be applied index-wise to each element.\n * @param {(number|number[])} a a number or an array of numbers\n * @return {(number|number[])} The cube of `a`. Returns an array with the the cubes of each element if `a` is an array.\n *\n * @example\n * cube(-3) // returns -27\n * cube([3, 4, 5]) // returns [27, 64, 125]\n */\n\nexport function cube(a) {\n  return pow(a, 3);\n}\n","/**\n * Divides two numbers. If at least one array of numbers is passed into the function, the function will be applied index-wise to each element.\n * @param {(number|number[])} a dividend, a number or an array of numbers\n * @param {(number|number[])} b divisor, a number or an array of numbers, `b` != 0\n * @return {(number|number[])} The quotient of `a` and `b` if both are numbers. Returns an array with the quotients applied index-wise to each element if `a` or `b` is an array.\n * @throws `'Array length mismatch'` if `a` and `b` are arrays with different lengths\n * - `'Cannot divide by 0'` if `b` equals 0 or contains 0\n * @example\n * divide(6, 3) // returns 2\n * divide([10, 20, 30, 40], 10) // returns [1, 2, 3, 4]\n * divide(10, [1, 2, 5, 10]) // returns [10, 5, 2, 1]\n * divide([14, 42, 65, 108], [2, 7, 5, 12]) // returns [7, 6, 13, 9]\n */\n\nexport function divide(a, b) {\n  if (Array.isArray(a) && Array.isArray(b)) {\n    if (a.length !== b.length) throw new Error('Array length mismatch');\n    return a.map((val, i) => {\n      if (b[i] === 0) throw new Error('Cannot divide by 0');\n      return val / b[i];\n    });\n  }\n  if (Array.isArray(b)) return b.map(b => a / b);\n  if (b === 0) throw new Error('Cannot divide by 0');\n  if (Array.isArray(a)) return a.map(a => a / b);\n  return a / b;\n}\n","/**\n * Calculates _e^x_ where _e_ is Euler's number. For arrays, the function will be applied index-wise to each element.\n * @param {(number|number[])} a a number or an array of numbers\n * @return {(number|number[])} `e^a`. Returns an array with the values of `e^x` evaluated where `x` is each element of `a` if `a` is an array.\n *\n * @example\n * exp(2) // returns e^2 = 7.3890560989306495\n * exp([1, 2, 3]) // returns [e^1, e^2, e^3] = [2.718281828459045, 7.3890560989306495, 20.085536923187668]\n */\n\nexport function exp(a) {\n  if (Array.isArray(a)) {\n    return a.map(a => Math.exp(a));\n  }\n  return Math.exp(a);\n}\n","/**\n * Returns the first element of an array. If anything other than an array is passed in, the input is returned.\n * @param {any[]} a array of any values\n * @return {*} The first element of `a`. Returns `a` if `a` is not an array.\n *\n * @example\n * first(2) // returns 2\n * first([1, 2, 3]) // returns 1\n */\n\nexport function first(a) {\n  if (Array.isArray(a)) {\n    return a[0];\n  }\n  return a;\n}\n\nfirst.skipNumberValidation = true;\n","const fixer = a => {\n  if (a > 0) {\n    return Math.floor(a);\n  }\n  return Math.ceil(a);\n};\n\n/**\n * Calculates the fix of a number, i.e. rounds a number towards 0. For arrays, the function will be applied index-wise to each element.\n * @param {(number|number[])} a a number or an array of numbers\n * @return {(number|number[])} The fix of `a`. Returns an array with the the fixes for each element if `a` is an array.\n *\n * @example\n * fix(1.2) // returns 1\n * fix(-1.8) // returns -1\n * fix([1.8, 2.9, -3.7, -4.6]) // returns [1, 2, -3, -4]\n */\n\nexport function fix(a) {\n  if (Array.isArray(a)) {\n    return a.map(a => fixer(a));\n  }\n  return fixer(a);\n}\n","/**\n * Calculates the floor of a number, i.e. rounds a number towards negative infinity. For arrays, the function will be applied index-wise to each element.\n * @param {(number|number[])} a a number or an array of numbers\n * @return {(number|number[])} The floor of `a`. Returns an array with the the floor of each element if `a` is an array.\n *\n * @example\n * floor(1.8) // returns 1\n * floor(-1.2) // returns -2\n * floor([1.7, 2.8, 3.9]) // returns [1, 2, 3]\n */\n\nexport function floor(a) {\n  if (Array.isArray(a)) {\n    return a.map(a => Math.floor(a));\n  }\n  return Math.floor(a);\n}\n","/**\n * Returns the last element of an array. If anything other than an array is passed in, the input is returned.\n * @param {any[]} a array of any values\n * @return {*} The last element of `a`. Returns `a` if `a` is not an array.\n *\n * @example\n * last(2) // returns 2\n * last([1, 2, 3]) // returns 3\n */\n\nexport function last(a) {\n  if (Array.isArray(a)) {\n    return a[a.length - 1];\n  }\n  return a;\n}\n\nlast.skipNumberValidation = true;\n","const changeOfBase = (a, b) => Math.log(a) / Math.log(b);\n\n/**\n * Calculates the logarithm of a number. For arrays, the function will be applied index-wise to each element.\n * @param {(number|number[])} a a number or an array of numbers, `a` must be greater than 0\n * @param {{number}} b (optional) base for the logarithm. If not provided a value, the default base is e, and the natural log is calculated.\n * @return {(number|number[])} The logarithm of `a`. Returns an array with the the logarithms of each element if `a` is an array.\n * @throws `'Base out of range'` if `b` <= 0\n * - 'Must be greater than 0' if `a` > 0\n * @example\n * log(1) // returns 0\n * log(64, 8) // returns 2\n * log(42, 5) // returns 2.322344707681546\n * log([2, 4, 8, 16, 32], 2) // returns [1, 2, 3, 4, 5]\n */\n\nexport function log(a, b = Math.E) {\n  if (b <= 0) throw new Error('Base out of range');\n\n  if (Array.isArray(a)) {\n    return a.map(a => {\n      if (a < 0) throw new Error('Must be greater than 0');\n      return changeOfBase(a, b);\n    });\n  }\n  if (a < 0) throw new Error('Must be greater than 0');\n  return changeOfBase(a, b);\n}\n","import { log } from './log.js';\n\n/**\n * Calculates the logarithm base 10 of a number. For arrays, the function will be applied index-wise to each element.\n * @param {(number|number[])} a a number or an array of numbers, `a` must be greater than 0\n * @return {(number|number[])} The logarithm of `a`. Returns an array with the the logarithms base 10 of each element if `a` is an array.\n * @throws `'Must be greater than 0'` if `a` < 0\n * @example\n * log(10) // returns 1\n * log(100) // returns 2\n * log(80) // returns 1.9030899869919433\n * log([10, 100, 1000, 10000, 100000]) // returns [1, 2, 3, 4, 5]\n */\n\nexport function log10(a) {\n  return log(a, 10);\n}\n","/**\n * Finds the maximum value of one of more numbers/arrays of numbers into the function. If at least one array of numbers is passed into the function, the function will find the maximum by index.\n * @param {...(number|number[])} args one or more numbers or arrays of numbers\n * @return {(number|number[])} The maximum value of all numbers if `args` contains only numbers. Returns an array with the the maximum values at each index, including all scalar numbers in `args` in the calculation at each index if `args` contains at least one array.\n * @throws `'Array length mismatch'` if `args` contains arrays of different lengths\n * @example\n * max(1, 2, 3) // returns 3\n * max([10, 20, 30, 40], 15) // returns [15, 20, 30, 40]\n * max([1, 9], 4, [3, 5]) // returns [max([1, 4, 3]), max([9, 4, 5])] = [4, 9]\n */\n\nexport function max(...args) {\n  if (args.length === 1) {\n    if (Array.isArray(args[0]))\n      return args[0].reduce((result, current) => Math.max(result, current));\n    return args[0];\n  }\n\n  return args.reduce((result, current) => {\n    if (Array.isArray(result) && Array.isArray(current)) {\n      if (current.length !== result.length) throw new Error('Array length mismatch');\n      return result.map((val, i) => Math.max(val, current[i]));\n    }\n    if (Array.isArray(result)) return result.map(val => Math.max(val, current));\n    if (Array.isArray(current)) return current.map(val => Math.max(val, result));\n    return Math.max(result, current);\n  });\n}\n","import { add } from './add.js';\n\n/**\n * Finds the mean value of one of more numbers/arrays of numbers into the function. If at least one array of numbers is passed into the function, the function will find the mean by index.\n * @param {...(number|number[])} args one or more numbers or arrays of numbers\n * @return {(number|number[])} The mean value of all numbers if `args` contains only numbers. Returns an array with the the mean values of each index, including all scalar numbers in `args` in the calculation at each index if `args` contains at least one array.\n *\n * @example\n * mean(1, 2, 3) // returns 2\n * mean([10, 20, 30, 40], 20) // returns [15, 20, 25, 30]\n * mean([1, 9], 5, [3, 4]) // returns [mean([1, 5, 3]), mean([9, 5, 4])] = [3, 6]\n */\n\nexport function mean(...args) {\n  if (args.length === 1) {\n    if (Array.isArray(args[0])) return add(args[0]) / args[0].length;\n    return args[0];\n  }\n  const sum = add(...args);\n\n  if (Array.isArray(sum)) {\n    return sum.map(val => val / args.length);\n  }\n\n  return sum / args.length;\n}\n","/**\n * Transposes a 2D array, i.e. turns the rows into columns and vice versa. Scalar values are also included in the transpose.\n * @param {any[][]} args an array or an array that contains arrays\n * @param {number} index index of the first array element in args\n * @return {any[][]} transpose of args\n * @throws `'Array length mismatch'` if `args` contains arrays of different lengths\n * @example\n * transpose([[1,2], [3,4], [5,6]], 0) // returns [[1, 3, 5], [2, 4, 6]]\n * transpose([10, 20, [10, 20, 30, 40], 30], 2) // returns [[10, 20, 10, 30], [10, 20, 20, 30], [10, 20, 30, 30], [10, 20, 40, 30]]\n * transpose([4, [1, 9], [3, 5]], 1) // returns [[4, 1, 3], [4, 9, 5]]\n */\n\nexport function transpose(args, index) {\n  const len = args[index].length;\n  return args[index].map((col, i) =>\n    args.map(row => {\n      if (Array.isArray(row)) {\n        if (row.length !== len) throw new Error('Array length mismatch');\n        return row[i];\n      }\n      return row;\n    })\n  );\n}\n","import { transpose } from './lib/transpose';\n\nconst findMedian = a => {\n  const len = a.length;\n  const half = Math.floor(len / 2);\n\n  a.sort((a, b) => a > b);\n\n  if (len % 2 === 0) {\n    return (a[half] + a[half - 1]) / 2;\n  }\n\n  return a[half];\n};\n\n/**\n * Finds the median value(s) of one of more numbers/arrays of numbers into the function. If at least one array of numbers is passed into the function, the function will find the median by index.\n * @param {...(number|number[])} args one or more numbers or arrays of numbers\n * @return {(number|number[])} The median value of all numbers if `args` contains only numbers. Returns an array with the the median values of each index, including all scalar numbers in `args` in the calculation at each index if `args` contains at least one array.\n *\n * @example\n * median(1, 1, 2, 3) // returns 1.5\n * median(1, 1, 2, 2, 3) // returns 2\n * median([10, 20, 30, 40], 10, 20, 30) // returns [15, 20, 25, 25]\n * median([1, 9], 2, 4, [3, 5]) // returns [median([1, 2, 4, 3]), median([9, 2, 4, 5])] = [2.5, 4.5]\n */\n\nexport function median(...args) {\n  if (args.length === 1) {\n    if (Array.isArray(args[0])) return findMedian(args[0]);\n    return args[0];\n  }\n\n  const firstArray = args.findIndex(element => Array.isArray(element));\n  if (firstArray !== -1) {\n    const result = transpose(args, firstArray);\n    return result.map(val => findMedian(val));\n  }\n  return findMedian(args);\n}\n","/**\n * Finds the minimum value of one of more numbers/arrays of numbers into the function. If at least one array of numbers is passed into the function, the function will find the minimum by index.\n * @param {...(number|number[])} args one or more numbers or arrays of numbers\n * @return {(number|number[])} The minimum value of all numbers if `args` contains only numbers. Returns an array with the the minimum values of each index, including all scalar numbers in `args` in the calculation at each index if `a` is an array.\n * @throws `'Array length mismatch'` if `args` contains arrays of different lengths\n * @example\n * min(1, 2, 3) // returns 1\n * min([10, 20, 30, 40], 25) // returns [10, 20, 25, 25]\n * min([1, 9], 4, [3, 5]) // returns [min([1, 4, 3]), min([9, 4, 5])] = [1, 4]\n */\n\nexport function min(...args) {\n  if (args.length === 1) {\n    if (Array.isArray(args[0]))\n      return args[0].reduce((result, current) => Math.min(result, current));\n    return args[0];\n  }\n\n  return args.reduce((result, current) => {\n    if (Array.isArray(result) && Array.isArray(current)) {\n      if (current.length !== result.length) throw new Error('Array length mismatch');\n      return result.map((val, i) => Math.min(val, current[i]));\n    }\n    if (Array.isArray(result)) return result.map(val => Math.min(val, current));\n    if (Array.isArray(current)) return current.map(val => Math.min(val, result));\n    return Math.min(result, current);\n  });\n}\n","/**\n * Remainder after dividing two numbers. If at least one array of numbers is passed into the function, the function will be applied index-wise to each element.\n * @param {(number|number[])} a dividend, a number or an array of numbers\n * @param {(number|number[])} b divisor, a number or an array of numbers, `b` != 0\n * @return {(number|number[])} The remainder of `a` divided by `b` if both are numbers. Returns an array with the the remainders applied index-wise to each element if `a` or `b` is an array.\n * @throws `'Array length mismatch'` if `a` and `b` are arrays with different lengths\n * - `'Cannot divide by 0'` if `b` equals 0 or contains 0\n * @example\n * mod(10, 7) // returns 3\n * mod([11, 22, 33, 44], 10) // returns [1, 2, 3, 4]\n * mod(100, [3, 7, 11, 23]) // returns [1, 2, 1, 8]\n * mod([14, 42, 65, 108], [5, 4, 14, 2]) // returns [5, 2, 9, 0]\n */\n\nexport function mod(a, b) {\n  if (Array.isArray(a) && Array.isArray(b)) {\n    if (a.length !== b.length) throw new Error('Array length mismatch');\n    return a.map((val, i) => {\n      if (b[i] === 0) throw new Error('Cannot divide by 0');\n      return val % b[i];\n    });\n  }\n  if (Array.isArray(b)) return b.map(b => a % b);\n  if (b === 0) throw new Error('Cannot divide by 0');\n  if (Array.isArray(a)) return a.map(a => a % b);\n  return a % b;\n}\n","import { transpose } from './lib/transpose';\n\nconst findMode = a => {\n  let maxFreq = 0;\n  const mapping = {};\n\n  a.map(val => {\n    if (mapping[val] === undefined) {\n      mapping[val] = 0;\n    }\n    mapping[val] += 1;\n    if (mapping[val] > maxFreq) {\n      maxFreq = mapping[val];\n    }\n  });\n\n  return Object.keys(mapping)\n    .filter(key => mapping[key] === maxFreq)\n    .map(val => parseFloat(val))\n    .sort((a, b) => a - b);\n};\n\n/**\n * Finds the mode value(s) of one of more numbers/arrays of numbers into the function. If at least one array of numbers is passed into the function, the function will find the mode by index.\n * @param {...(number|number[])} args one or more numbers or arrays of numbers\n * @return {(number[]|number[][])} An array mode value(s) of all numbers if `args` contains only numbers. Returns an array of arrays with mode value(s) of each index, including all scalar numbers in `args` in the calculation at each index  if `args` contains at least one array.\n *\n * @example\n * mode(1, 1, 2, 3) // returns [1]\n * mode(1, 1, 2, 2, 3) // returns [1,2]\n * mode([10, 20, 30, 40], 10, 20, 30) // returns [[10], [20], [30], [10, 20, 30, 40]]\n * mode([1, 9], 1, 4, [3, 5]) // returns [mode([1, 1, 4, 3]), mode([9, 1, 4, 5])] = [[1], [4, 5, 9]]\n */\n\nexport function mode(...args) {\n  if (args.length === 1) {\n    if (Array.isArray(args[0])) return findMode(args[0]);\n    return args[0];\n  }\n\n  const firstArray = args.findIndex(element => Array.isArray(element));\n  if (firstArray !== -1) {\n    const result = transpose(args, firstArray);\n    return result.map(val => findMode(val));\n  }\n  return findMode(args);\n}\n","/**\n * Multiplies two numbers. If at least one array of numbers is passed into the function, the function will be applied index-wise to each element.\n * @param {(number|number[])} a a number or an array of numbers\n * @param {(number|number[])} b a number or an array of numbers\n * @return {(number|number[])} The product of `a` and `b` if both are numbers. Returns an array with the the products applied index-wise to each element if `a` or `b` is an array.\n * @throws `'Array length mismatch'` if `a` and `b` are arrays with different lengths\n * @example\n * multiply(6, 3) // returns 18\n * multiply([10, 20, 30, 40], 10) // returns [100, 200, 300, 400]\n * multiply(10, [1, 2, 5, 10]) // returns [10, 20, 50, 100]\n * multiply([1, 2, 3, 4], [2, 7, 5, 12]) // returns [2, 14, 15, 48]\n */\n\nexport function multiply(...args) {\n  return args.reduce((result, current) => {\n    if (Array.isArray(result) && Array.isArray(current)) {\n      if (current.length !== result.length) throw new Error('Array length mismatch');\n      return result.map((val, i) => val * current[i]);\n    }\n    if (Array.isArray(result)) return result.map(val => val * current);\n    if (Array.isArray(current)) return current.map(val => val * result);\n    return result * current;\n  });\n}\n","/**\n * Generates a random number within the given range where the lower bound is inclusive and the upper bound is exclusive. If no numbers are passed in, it will return a number between 0 and 1. If only one number is passed in, it will return .\n * @param {number} a (optional) must be greater than 0 if `b` is not provided\n * @param {number} b (optional) must be greater\n * @return {number} A random number between 0 and 1 if no numbers are passed in. Returns a random number between 0 and `a` if only one number is passed in. Returns a random number between `a` and `b` if two numbers are passed in.\n * @throws `'Min is be greater than max'` if `a` < 0 when only `a` is passed in or if `a` > `b` when both `a` and `b` are passed in\n * @example\n * random() // returns a random number between 0 (inclusive) and 1 (exclusive)\n * random(10) // returns a random number between 0 (inclusive) and 10 (exclusive)\n * random(-10,10) // returns a random number between -10 (inclusive) and 10 (exclusive)\n */\n\nexport function random(a, b) {\n  if (a == null) return Math.random();\n\n  // a: max, generate random number between 0 and a\n  if (b == null) {\n    if (a < 0) throw new Error(`Min is greater than max`);\n    return Math.random() * a;\n  }\n\n  // a: min, b: max, generate random number between a and b\n  if (a > b) throw new Error(`Min is greater than max`);\n  return Math.random() * (b - a) + a;\n}\n","/**\n * Subtracts two numbers. If at least one array of numbers is passed into the function, the function will be applied index-wise to each element.\n * @param {(number|number[])} a a number or an array of numbers\n * @param {(number|number[])} b a number or an array of numbers\n * @return {(number|number[])} The difference of `a` and `b` if both are numbers or an array of differences applied index-wise to each element.\n * @throws `'Array length mismatch'` if `a` and `b` are arrays with different lengths\n * @example\n * subtract(6, 3) // returns 3\n * subtract([10, 20, 30, 40], 10) // returns [0, 10, 20, 30]\n * subtract(10, [1, 2, 5, 10]) // returns [9, 8, 5, 0]\n * subtract([14, 42, 65, 108], [2, 7, 5, 12]) // returns [12, 35, 52, 96]\n */\n\nexport function subtract(a, b) {\n  if (Array.isArray(a) && Array.isArray(b)) {\n    if (a.length !== b.length) throw new Error('Array length mismatch');\n    return a.map((val, i) => val - b[i]);\n  }\n  if (Array.isArray(a)) return a.map(a => a - b);\n  if (Array.isArray(b)) return b.map(b => a - b);\n  return a - b;\n}\n","import { max } from './max.js';\nimport { min } from './min.js';\nimport { subtract } from './subtract.js';\n\n/**\n * Finds the range of one of more numbers/arrays of numbers into the function. If at least one array of numbers is passed into the function, the function will find the range by index.\n * @param {...(number|number[])} args one or more numbers or arrays of numbers\n * @return {(number|number[])} The range value of all numbers if `args` contains only numbers. Returns an array with the the range values at each index, including all scalar numbers in `args` in the calculation at each index if `args` contains at least one array.\n *\n * @example\n * range(1, 2, 3) // returns 2\n * range([10, 20, 30, 40], 15) // returns [5, 5, 15, 25]\n * range([1, 9], 4, [3, 5]) // returns [range([1, 4, 3]), range([9, 4, 5])] = [3, 5]\n */\n\nexport function range(...args) {\n  return subtract(max(...args), min(...args));\n}\n","const rounder = (a, b) => Math.round(a * Math.pow(10, b)) / Math.pow(10, b);\n\n/**\n * Rounds a number towards the nearest integer by default or decimal place if specified. For arrays, the function will be applied index-wise to each element.\n * @param {(number|number[])} a a number or an array of numbers\n * @param {(number)} b (optional) number of decimal places, default value: 0\n * @return {(number|number[])} The rounded value of `a`. Returns an array with the the rounded values of each element if `a` is an array.\n *\n * @example\n * round(1.2) // returns 2\n * round(-10.51) // returns -11\n * round(-10.1, 2) // returns -10.1\n * round(10.93745987, 4) // returns 10.9375\n * round([2.9234, 5.1234, 3.5234, 4.49234324], 2) // returns [2.92, 5.12, 3.52, 4.49]\n */\n\nexport function round(a, b = 0) {\n  if (Array.isArray(a)) {\n    return a.map(a => rounder(a, b));\n  }\n  return rounder(a, b);\n}\n","/**\n * Calculates the square root of a number. For arrays, the function will be applied index-wise to each element.\n * @param {(number|number[])} a a number or an array of numbers\n * @return {(number|number[])} The square root of `a`. Returns an array with the the square roots of each element if `a` is an array.\n * @throws `'Unable find the square root of a negative number'` if `a` < 0\n * @example\n * sqrt(9) // returns 3\n * sqrt(30) //5.477225575051661\n * sqrt([9, 16, 25]) // returns [3, 4, 5]\n */\n\nexport function sqrt(a) {\n  if (Array.isArray(a)) {\n    return a.map(a => {\n      if (a < 0) throw new Error('Unable find the square root of a negative number');\n      return Math.sqrt(a);\n    });\n  }\n\n  if (a < 0) throw new Error('Unable find the square root of a negative number');\n  return Math.sqrt(a);\n}\n","import { pow } from './pow.js';\n\n/**\n * Calculates the square of a number. For arrays, the function will be applied index-wise to each element.\n * @param {(number|number[])} a a number or an array of numbers\n * @return {(number|number[])} The square of `a`. Returns an array with the the squares of each element if `a` is an array.\n *\n * @example\n * square(-3) // returns 9\n * square([3, 4, 5]) // returns [9, 16, 25]\n */\n\nexport function square(a) {\n  return pow(a, 2);\n}\n","const findSum = (total, current) => total + current;\n\n/**\n * Calculates the sum of one or more numbers/arrays passed into the function. If at least one array is passed, the function will sum up one or more numbers/arrays of numbers and distinct values of an array. Sum accepts arrays of different lengths.\n * @param {...(number|number[])} args one or more numbers or arrays of numbers\n * @return {number} The sum of one or more numbers/arrays of numbers including distinct values in arrays\n *\n * @example\n * sum(1, 2, 3) // returns 6\n * sum([10, 20, 30, 40], 10, 20, 30) // returns 160\n * sum([1, 2], 3, [4, 5], 6) // returns sum(1, 2, 3, 4, 5, 6) = 21\n * sum([10, 20, 30, 40], 10, [1, 2, 3], 22) // returns sum(10, 20, 30, 40, 10, 1, 2, 3, 22) = 138\n */\n\nexport function sum(...args) {\n  return args.reduce((total, current) => {\n    if (Array.isArray(current)) {\n      return total + current.reduce(findSum, 0);\n    }\n    return total + current;\n  }, 0);\n}\n","/**\n * Counts the number of unique values in an array\n * @param {any[]} a array of any values\n * @return {number} The number of unique values in the array. Returns 1 if `a` is not an array.\n *\n * @example\n * unique(100) // returns 1\n * unique([]) // returns 0\n * unique([1, 2, 3, 4]) // returns 4\n * unique([1, 2, 3, 4, 2, 2, 2, 3, 4, 2, 4, 5, 2, 1, 4, 2]) // returns 5\n */\n\nexport function unique(a) {\n  if (Array.isArray(a)) {\n    return a.filter((val, i) => a.indexOf(val) === i).length;\n  }\n  return 1;\n}\n\nunique.skipNumberValidation = true;\n","import { abs } from './abs';\nimport { add } from './add';\nimport { cbrt } from './cbrt';\nimport { ceil } from './ceil';\nimport { clamp } from './clamp';\nimport { count } from './count';\nimport { cube } from './cube';\nimport { divide } from './divide';\nimport { exp } from './exp';\nimport { first } from './first';\nimport { fix } from './fix';\nimport { floor } from './floor';\nimport { last } from './last';\nimport { log } from './log';\nimport { log10 } from './log10';\nimport { max } from './max';\nimport { mean } from './mean';\nimport { median } from './median';\nimport { min } from './min';\nimport { mod } from './mod';\nimport { mode } from './mode';\nimport { multiply } from './multiply';\nimport { pow } from './pow';\nimport { random } from './random';\nimport { range } from './range';\nimport { round } from './round';\nimport { size } from './size';\nimport { sqrt } from './sqrt';\nimport { square } from './square';\nimport { subtract } from './subtract';\nimport { sum } from './sum';\nimport { unique } from './unique';\n\nexport const functions = {\n  abs,\n  add,\n  cbrt,\n  ceil,\n  clamp,\n  count,\n  cube,\n  divide,\n  exp,\n  first,\n  fix,\n  floor,\n  last,\n  log,\n  log10,\n  max,\n  mean,\n  median,\n  min,\n  mod,\n  mode,\n  multiply,\n  pow,\n  random,\n  range,\n  round,\n  size,\n  sqrt,\n  square,\n  subtract,\n  sum,\n  unique,\n};\n","import get from 'object-get';\nimport { parse as parseFn } from './grammar';\nimport { functions as includedFunctions } from './functions';\n\nexport function parse(input, options) {\n  if (input == null) {\n    throw new Error('Missing expression');\n  }\n\n  if (typeof input !== 'string') {\n    throw new Error('Expression must be a string');\n  }\n\n  try {\n    return parseFn(input, options);\n  } catch (e) {\n    throw new Error(`Failed to parse expression. ${e.message}`);\n  }\n}\n\nexport function evaluate(expression, scope = {}, injectedFunctions = {}) {\n  scope = scope || {};\n  return interpret(parse(expression), scope, injectedFunctions);\n}\n\nexport function interpret(node, scope, injectedFunctions) {\n  const functions = Object.assign({}, includedFunctions, injectedFunctions); // eslint-disable-line\n  return exec(node);\n\n  function exec(node) {\n    const type = getType(node);\n\n    if (type === 'function') return invoke(node);\n\n    if (type === 'string') {\n      const val = getValue(scope, node);\n      if (typeof val === 'undefined') throw new Error(`Unknown variable: ${node}`);\n      return val;\n    }\n\n    return node; // Can only be a number at this point\n  }\n\n  function invoke(node) {\n    const { name, args } = node;\n    const fn = functions[name];\n    if (!fn) throw new Error(`No such function: ${name}`);\n    const execOutput = args.map(exec);\n    if (fn.skipNumberValidation || isOperable(execOutput)) return fn(...execOutput);\n    return NaN;\n  }\n}\n\nfunction getValue(scope, node) {\n  // attempt to read value from nested object first, check for exact match if value is undefined\n  const val = get(scope, node);\n  return typeof val !== 'undefined' ? val : scope[node];\n}\n\nfunction getType(x) {\n  const type = typeof x;\n  if (type === 'object') {\n    const keys = Object.keys(x);\n    if (keys.length !== 2 || !x.name || !x.args) throw new Error('Invalid AST object');\n    return 'function';\n  }\n  if (type === 'string' || type === 'number') return type;\n  throw new Error(`Unknown AST property type: ${type}`);\n}\n\nfunction isOperable(args) {\n  return args.every(arg => {\n    if (Array.isArray(arg)) return isOperable(arg);\n    return typeof arg === 'number' && !isNaN(arg);\n  });\n}\n"],"names":["peg$subclass","child","parent","ctor","constructor","prototype","peg$SyntaxError","message","expected","found","location","name","Error","captureStackTrace","buildMessage","DESCRIBE_EXPECTATION_FNS","expectation","literalEscape","text","escapedParts","i","parts","length","Array","classEscape","inverted","description","hex","ch","charCodeAt","toString","toUpperCase","s","replace","describeExpectation","type","describeExpected","descriptions","j","sort","slice","join","describeFound","peg$parse","input","options","peg$FAILED","peg$startRuleFunctions","start","peg$parsestart","peg$startRuleFunction","peg$c0","peg$otherExpectation","peg$c1","peg$c2","peg$classExpectation","peg$c3","peg$c4","peg$c5","peg$c6","peg$c7","peg$c8","peg$c9","peg$c10","peg$c11","peg$c12","literal","peg$c13","first","rest","peg$c14","mid","map","m","peg$c15","peg$c16","peg$literalExpectation","peg$c17","peg$c18","peg$c19","left","reduce","acc","curr","peg$c20","peg$c21","peg$c22","peg$c23","peg$c24","peg$c25","peg$c26","peg$c27","peg$c28","peg$c29","expr","peg$c30","peg$c31","peg$c32","peg$c33","arg","peg$c34","concat","peg$c35","peg$c36","peg$c37","peg$c38","args","peg$c39","peg$c40","parseFloat","peg$c41","peg$c42","peg$c43","peg$c44","peg$c45","peg$c46","peg$c47","peg$c48","peg$c49","peg$c50","peg$c51","peg$currPos","peg$savedPos","peg$posDetailsCache","line","column","peg$maxFailPos","peg$maxFailExpected","peg$silentFails","peg$result","startRule","substring","ignoreCase","peg$endExpectation","peg$computePosDetails","pos","details","p","peg$computeLocation","startPos","endPos","startPosDetails","endPosDetails","peg$fail","push","peg$buildStructuredError","s0","peg$parseAddSubtract","peg$parse_","s1","test","charAt","peg$parseSpace","peg$parseQuote","peg$parseStartChar","peg$parseValidChar","peg$parseLiteral","s2","s3","peg$parseNumber","peg$parseVariableWithQuote","peg$parseVariable","s4","s5","s6","s7","s8","peg$parseMultiplyDivide","peg$parseFactor","peg$parseGroup","peg$parseFunction","peg$parseArguments","peg$parseInteger","peg$parseFraction","peg$parseExp","peg$parseE","peg$parseDigit","abs","a","isArray","Math","add","result","current","val","cbrt","ceil","findClamp","min","max","clamp","size","skipNumberValidation","count","pow","b","cube","divide","exp","fixer","floor","fix","last","changeOfBase","log","E","log10","mean","sum","transpose","index","len","col","row","findMedian","half","median","firstArray","findIndex","element","mod","findMode","maxFreq","mapping","undefined","Object","keys","filter","key","mode","multiply","random","subtract","range","rounder","round","sqrt","square","findSum","total","unique","indexOf","functions","parse","parseFn","e","evaluate","expression","scope","injectedFunctions","interpret","node","assign","includedFunctions","exec","getType","invoke","getValue","fn","execOutput","isOperable","NaN","get","x","every","isNaN"],"mappings":"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"}