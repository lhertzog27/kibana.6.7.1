{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/ui/public/number_list/number_list.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/number_list/number_list.js","mtime":1567631711746},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _range = require('../utils/range');\n\nrequire('./number_list_input');\n\nvar _modules = require('../modules');\n\nvar _number_list = require('./number_list.html');\n\nvar _number_list2 = _interopRequireDefault(_number_list);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_modules.uiModules.get('kibana').directive('kbnNumberList', function () {\n  return {\n    restrict: 'E',\n    template: _number_list2.default,\n    controllerAs: 'numberListCntr',\n    require: 'ngModel',\n    scope: {\n      validateAscendingOrder: '=?',\n      labelledbyId: '@'\n    },\n    controller: function controller($scope, $attrs, $parse) {\n      var self = this;\n\n      self.labelledbyId = $scope.labelledbyId;\n\n      // Called from the pre-link function once we have the controllers\n      self.init = function (modelCntr) {\n        self.modelCntr = modelCntr;\n\n        self.getList = function () {\n          return self.modelCntr.$modelValue;\n        };\n\n        self.getUnitName = _lodash2.default.partial($parse($attrs.unit), $scope);\n\n        var defaultRange = self.range = (0, _range.parseRange)('[0,Infinity)');\n        self.validateAscOrder = _lodash2.default.isUndefined($scope.validateAscendingOrder) ? true : $scope.validateAscendingOrder;\n\n        $scope.$watch(function () {\n          return $attrs.range;\n        }, function (range) {\n          if (!range) {\n            self.range = defaultRange;\n            return;\n          }\n\n          try {\n            self.range = (0, _range.parseRange)(range);\n          } catch (e) {\n            throw new TypeError('Unable to parse range: ' + e.message);\n          }\n        });\n\n        /**\n        * Remove an item from list by index\n        * @param  {number} index\n        * @return {undefined}\n        */\n        self.remove = function (index) {\n          var list = self.getList();\n          if (!list) return;\n\n          list.splice(index, 1);\n        };\n\n        /**\n        * Add an item to the end of the list\n        * @return {undefined}\n        */\n        self.add = function () {\n          var list = self.getList();\n          if (!list) return;\n\n          function getNext() {\n            if (list.length === 0) {\n              // returning NaN adds an empty input\n              return NaN;\n            }\n\n            var next = _lodash2.default.last(list) + 1;\n            if (next < self.range.max) {\n              return next;\n            }\n\n            return self.range.max - 1;\n          }\n\n          var next = getNext();\n          list.push(next);\n        };\n\n        /**\n        * Check to see if the list is too short.\n        *\n        * @return {Boolean}\n        */\n        self.tooShort = function () {\n          return _lodash2.default.size(self.getList()) < 1;\n        };\n\n        /**\n        * Check to see if the list is too short, but simply\n        * because the user hasn't interacted with it yet\n        *\n        * @return {Boolean}\n        */\n        self.undefinedLength = function () {\n          return self.tooShort() && self.modelCntr.$untouched && self.modelCntr.$pristine;\n        };\n\n        /**\n        * Check to see if the list is too short\n        *\n        * @return {Boolean}\n        */\n        self.invalidLength = function () {\n          return self.tooShort() && !self.undefinedLength();\n        };\n\n        $scope.$watchCollection(self.getList, function () {\n          self.modelCntr.$setValidity('numberListLength', !self.tooShort());\n        });\n      };\n    },\n    link: {\n      pre: function pre($scope, $el, attrs, ngModelCntr) {\n        $scope.numberListCntr.init(ngModelCntr);\n      }\n    }\n  };\n}); /*\n     * Licensed to Elasticsearch B.V. under one or more contributor\n     * license agreements. See the NOTICE file distributed with\n     * this work for additional information regarding copyright\n     * ownership. Elasticsearch B.V. licenses this file to you under\n     * the Apache License, Version 2.0 (the \"License\"); you may\n     * not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *    http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing,\n     * software distributed under the License is distributed on an\n     * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n     * KIND, either express or implied.  See the License for the\n     * specific language governing permissions and limitations\n     * under the License.\n     */",null]}