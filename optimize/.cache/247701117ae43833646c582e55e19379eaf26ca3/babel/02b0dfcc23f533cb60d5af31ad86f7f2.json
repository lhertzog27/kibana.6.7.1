{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/ui/public/promises/promises.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/promises/promises.js","mtime":1567631711749},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _modules = require('../modules');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nvar _module = _modules.uiModules.get('kibana');\n\n// Provides a tiny subset of the excellent API from\n// bluebird, reimplemented using the $q service\n_module.service('Promise', function ($q, $timeout) {\n  function Promise(fn) {\n    if (typeof this === 'undefined') throw new Error('Promise constructor must be called with \"new\"');\n\n    var defer = $q.defer();\n    try {\n      fn(defer.resolve, defer.reject);\n    } catch (e) {\n      defer.reject(e);\n    }\n    return defer.promise;\n  }\n\n  Promise.all = Promise.props = $q.all;\n  Promise.resolve = function (val) {\n    var defer = $q.defer();\n    defer.resolve(val);\n    return defer.promise;\n  };\n  Promise.reject = function (reason) {\n    var defer = $q.defer();\n    defer.reject(reason);\n    return defer.promise;\n  };\n  Promise.cast = $q.when;\n  Promise.defer = $q.defer;\n  Promise.delay = function (ms) {\n    return $timeout(_lodash2.default.noop, ms);\n  };\n  Promise.method = function (fn) {\n    return function () {\n      var args = Array.prototype.slice.call(arguments);\n      return Promise.try(fn, args, this);\n    };\n  };\n  Promise.nodeify = function (promise, cb) {\n    promise.then(function (val) {\n      cb(void 0, val);\n    }, cb);\n  };\n  Promise.map = function (arr, fn) {\n    return Promise.all(arr.map(function (i, el, list) {\n      return Promise.try(fn, [i, el, list]);\n    }));\n  };\n  Promise.each = function (arr, fn) {\n    var queue = arr.slice(0);\n    var i = 0;\n    return function next() {\n      if (!queue.length) return arr;\n      return Promise.try(fn, [arr.shift(), i++]).then(next);\n    }();\n  };\n  Promise.is = function (obj) {\n    // $q doesn't create instances of any constructor, promises are just objects with a then function\n    // https://github.com/angular/angular.js/blob/58f5da86645990ef984353418cd1ed83213b111e/src/ng/q.js#L335\n    return obj && typeof obj.then === 'function';\n  };\n  Promise.halt = _lodash2.default.once(function () {\n    var promise = new Promise(function () {});\n    promise.then = _lodash2.default.constant(promise);\n    promise.catch = _lodash2.default.constant(promise);\n    return promise;\n  });\n  Promise.try = function (fn, args, ctx) {\n    if (typeof fn !== 'function') {\n      return Promise.reject(new TypeError('fn must be a function'));\n    }\n\n    var value = void 0;\n\n    if (Array.isArray(args)) {\n      try {\n        value = fn.apply(ctx, args);\n      } catch (e) {\n        return Promise.reject(e);\n      }\n    } else {\n      try {\n        value = fn.call(ctx, args);\n      } catch (e) {\n        return Promise.reject(e);\n      }\n    }\n\n    return Promise.resolve(value);\n  };\n  Promise.fromNode = function (takesCbFn) {\n    return new Promise(function (resolve, reject) {\n      takesCbFn(function (err) {\n        for (var _len = arguments.length, results = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          results[_key - 1] = arguments[_key];\n        }\n\n        if (err) reject(err);else if (results.length > 1) resolve(results);else resolve(results[0]);\n      });\n    });\n  };\n  Promise.race = function (iterable) {\n    return new Promise(function (resolve, reject) {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = iterable[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var i = _step.value;\n\n          Promise.resolve(i).then(resolve, reject);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    });\n  };\n\n  return Promise;\n});",null]}