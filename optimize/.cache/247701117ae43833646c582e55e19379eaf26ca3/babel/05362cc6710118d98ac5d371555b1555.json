{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/legacy/core_plugins/console/public/src/history.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/legacy/core_plugins/console/public/src/history.js","mtime":1567631691127},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nvar $ = require('jquery');\nvar storage = require('./storage');\n\nvar history = {\n  restoreFromHistory: function restoreFromHistory() {\n    // default method for history.restoreFromHistory\n    // replace externally to do something when the user chooses\n    // to relive a bit of history\n    throw new Error('not implemented');\n  },\n  getHistoryKeys: function getHistoryKeys() {\n    return storage.keys().filter(function (key) {\n      return key.indexOf('hist_elem') === 0;\n    }).sort().reverse();\n  },\n  getHistory: function getHistory() {\n    return history.getHistoryKeys().map(function (key) {\n      return storage.get(key);\n    });\n  },\n  addToHistory: function addToHistory(endpoint, method, data) {\n    var keys = history.getHistoryKeys();\n    keys.splice(0, 500); // only maintain most recent X;\n    $.each(keys, function (i, k) {\n      storage.delete(k);\n    });\n\n    var timestamp = new Date().getTime();\n    var k = 'hist_elem_' + timestamp;\n    storage.set(k, {\n      time: timestamp,\n      endpoint: endpoint,\n      method: method,\n      data: data\n    });\n  },\n  updateCurrentState: function updateCurrentState(content) {\n    var timestamp = new Date().getTime();\n    storage.set('editor_state', {\n      time: timestamp,\n      content: content\n    });\n  },\n  getSavedEditorState: function getSavedEditorState() {\n    var saved = storage.get('editor_state');\n    if (!saved) return;\n    var time = saved.time,\n        content = saved.content;\n\n    return { time: time, content: content };\n  },\n  clearHistory: function clearHistory() {\n    history.getHistoryKeys().forEach(function (key) {\n      return storage.delete(key);\n    });\n  }\n};\n\nexports.default = history;\nmodule.exports = exports['default'];",null]}