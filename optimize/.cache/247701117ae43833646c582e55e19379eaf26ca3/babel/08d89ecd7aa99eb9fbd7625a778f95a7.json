{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/ui/public/saved_objects/saved_objects_client_provider.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/saved_objects/saved_objects_client_provider.js","mtime":1567631711753},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SavedObjectsClientProvider = SavedObjectsClientProvider;\n\nvar _chrome = require('../chrome');\n\nvar _chrome2 = _interopRequireDefault(_chrome);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Provide an angular wrapper around savedObjectClient so all actions get resolved in an Angular Promise\n// If you do not need the promise to execute in an angular digest cycle then you should not use this\n// and get savedObjectClient directly from chrome.\nfunction SavedObjectsClientProvider(Promise) {\n  var savedObjectsClient = _chrome2.default.getSavedObjectsClient();\n\n  return {\n    create: function create() {\n      return Promise.resolve(savedObjectsClient.create.apply(savedObjectsClient, arguments));\n    },\n    bulkCreate: function bulkCreate() {\n      return Promise.resolve(savedObjectsClient.bulkCreate.apply(savedObjectsClient, arguments));\n    },\n    delete: function _delete() {\n      return Promise.resolve(savedObjectsClient.delete.apply(savedObjectsClient, arguments));\n    },\n    find: function find() {\n      return Promise.resolve(savedObjectsClient.find.apply(savedObjectsClient, arguments));\n    },\n    get: function get() {\n      return Promise.resolve(savedObjectsClient.get.apply(savedObjectsClient, arguments));\n    },\n    bulkGet: function bulkGet() {\n      return Promise.resolve(savedObjectsClient.bulkGet.apply(savedObjectsClient, arguments));\n    },\n    update: function update() {\n      return Promise.resolve(savedObjectsClient.update.apply(savedObjectsClient, arguments));\n    }\n  };\n} /*\n   * Licensed to Elasticsearch B.V. under one or more contributor\n   * license agreements. See the NOTICE file distributed with\n   * this work for additional information regarding copyright\n   * ownership. Elasticsearch B.V. licenses this file to you under\n   * the Apache License, Version 2.0 (the \"License\"); you may\n   * not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *    http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing,\n   * software distributed under the License is distributed on an\n   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n   * KIND, either express or implied.  See the License for the\n   * specific language governing permissions and limitations\n   * under the License.\n   */",null]}