{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/ui/public/notify/banners/banners.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/notify/banners/banners.js","mtime":1567631711745},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/**\n * Banners represents a prioritized list of displayed components.\n */\nvar Banners = exports.Banners = function Banners() {\n  var _this = this;\n\n  _classCallCheck(this, Banners);\n\n  this._changed = function () {\n    if (_this.onChangeCallback) {\n      _this.onChangeCallback();\n    }\n  };\n\n  this._remove = function (id) {\n    var index = _this.list.findIndex(function (details) {\n      return details.id === id;\n    });\n\n    if (index !== -1) {\n      _this.list.splice(index, 1);\n\n      return true;\n    }\n\n    return false;\n  };\n\n  this.onChange = function (callback) {\n    _this.onChangeCallback = callback;\n  };\n\n  this.add = function (_ref) {\n    var component = _ref.component,\n        _ref$priority = _ref.priority,\n        priority = _ref$priority === undefined ? 0 : _ref$priority;\n\n    var id = \"\" + ++_this.uniqueId;\n    var bannerDetails = { id: id, component: component, priority: priority };\n\n    // find the lowest priority item to put this banner in front of\n    var index = _this.list.findIndex(function (details) {\n      return priority > details.priority;\n    });\n\n    if (index !== -1) {\n      // we found something with a lower priority; so stick it in front of that item\n      _this.list.splice(index, 0, bannerDetails);\n    } else {\n      // nothing has a lower priority, so put it at the end\n      _this.list.push(bannerDetails);\n    }\n\n    _this._changed();\n\n    return id;\n  };\n\n  this.remove = function (id) {\n    var removed = _this._remove(id);\n\n    if (removed) {\n      _this._changed();\n    }\n\n    return removed;\n  };\n\n  this.set = function (_ref2) {\n    var component = _ref2.component,\n        id = _ref2.id,\n        _ref2$priority = _ref2.priority,\n        priority = _ref2$priority === undefined ? 0 : _ref2$priority;\n\n    _this._remove(id);\n\n    return _this.add({ component: component, priority: priority });\n  };\n\n  // sorted in descending order (100, 99, 98...) so that higher priorities are in front\n  this.list = [];\n  this.uniqueId = 0;\n  this.onChangeCallback = null;\n}\n\n/**\n * Set the {@code callback} to invoke whenever changes are made to the banner list.\n *\n * Use {@code null} or {@code undefined} to unset it.\n *\n * @param {Function} callback The callback to use.\n */\n\n\n/**\n * Add a new banner.\n *\n * @param {Object} component The React component to display.\n * @param {Number} priority The optional priority order to display this banner. Higher priority values are shown first.\n * @return {String} A newly generated ID. This value can be used to remove/replace the banner.\n */\n\n\n/**\n * Remove an existing banner.\n *\n * @param {String} id The ID of the banner to remove.\n * @return {Boolean} {@code true} if the ID is recognized and the banner is removed. {@code false} otherwise.\n */\n\n\n/**\n * Replace an existing banner by removing it, if it exists, and adding a new one in its place.\n *\n * This is similar to calling banners.remove, followed by banners.add, except that it only notifies the listener\n * after adding.\n *\n * @param {Object} component The React component to display.\n * @param {String} id The ID of the Banner to remove.\n * @param {Number} priority The optional priority order to display this banner. Higher priority values are shown first.\n * @return {String} A newly generated ID. This value can be used to remove/replace the banner.\n */\n;\n\n/**\n * A singleton instance meant to represent all Kibana banners.\n */\n\n\nvar banners = exports.banners = new Banners();",null]}