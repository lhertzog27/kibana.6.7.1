{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/legacy/core_plugins/console/public/src/sense_editor/mode/input_highlight_rules.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/legacy/core_plugins/console/public/src/sense_editor/mode/input_highlight_rules.js","mtime":1567631691127},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nexports.InputHighlightRules = InputHighlightRules;\n\nvar _x_json_highlight_rules = require('./x_json_highlight_rules');\n\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nvar ace = require('brace');\n\n\nvar oop = ace.acequire('ace/lib/oop');\n\nvar _ace$acequire = ace.acequire('ace/mode/text_highlight_rules'),\n    TextHighlightRules = _ace$acequire.TextHighlightRules;\n\nfunction InputHighlightRules() {\n  function mergeTokens() /* ... */{\n    return [].concat.apply([], arguments);\n  }\n\n  function addEOL(tokens, reg, nextIfEOL, normalNext) {\n    if ((typeof reg === 'undefined' ? 'undefined' : _typeof(reg)) === 'object') {\n      reg = reg.source;\n    }\n    return [{ token: tokens.concat(['whitespace']), regex: reg + '(\\\\s*)$', next: nextIfEOL }, { token: tokens, regex: reg, next: normalNext }];\n  }\n\n  // regexp must not have capturing parentheses. Use (?:) instead.\n  // regexps are ordered -> the first match is used\n  /*jshint -W015 */\n  this.$rules = {\n    'start': mergeTokens([{ 'token': 'warning', 'regex': '#!.*$' }, { token: 'comment', regex: /^#.*$/ }, { token: 'paren.lparen', regex: '{', next: 'json', push: true }], addEOL(['method'], /([a-zA-Z]+)/, 'start', 'method_sep'), [{\n      token: 'whitespace',\n      regex: '\\\\s+'\n    }, {\n      token: 'text',\n      regex: '.+?'\n    }]),\n    'method_sep': mergeTokens(addEOL(['whitespace', 'url.protocol_host', 'url.slash'], /(\\s+)(https?:\\/\\/[^?\\/,]+)(\\/)/, 'start', 'url'), addEOL(['whitespace', 'url.protocol_host'], /(\\s+)(https?:\\/\\/[^?\\/,]+)/, 'start', 'url'), addEOL(['whitespace', 'url.slash'], /(\\s+)(\\/)/, 'start', 'url'), addEOL(['whitespace'], /(\\s+)/, 'start', 'url')),\n    'url': mergeTokens(addEOL(['url.part'], /([^?\\/,\\s]+)/, 'start'), addEOL(['url.comma'], /(,)/, 'start'), addEOL(['url.slash'], /(\\/)/, 'start'), addEOL(['url.questionmark'], /(\\?)/, 'start', 'urlParams')),\n    'urlParams': mergeTokens(addEOL(['url.param', 'url.equal', 'url.value'], /([^&=]+)(=)([^&]*)/, 'start'), addEOL(['url.param'], /([^&=]+)/, 'start'), addEOL(['url.amp'], /(&)/, 'start'))\n  };\n\n  (0, _x_json_highlight_rules.addToRules)(this);\n\n  if (this.constructor === InputHighlightRules) {\n    this.normalizeRules();\n  }\n}\n\noop.inherits(InputHighlightRules, TextHighlightRules);",null]}