{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/ui/public/index_patterns/static_utils/index.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/index_patterns/static_utils/index.js","mtime":1567631711739},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isFilterable = isFilterable;\nexports.getFromSavedObject = getFromSavedObject;\nexports.getFromLegacyIndexPattern = getFromLegacyIndexPattern;\n\nvar _kbn_field_types = require('../../../../utils/kbn_field_types');\n\nvar filterableTypes = _kbn_field_types.KBN_FIELD_TYPES.filter(function (type) {\n  return type.filterable;\n}).map(function (type) {\n  return type.name;\n}); /*\n     * Licensed to Elasticsearch B.V. under one or more contributor\n     * license agreements. See the NOTICE file distributed with\n     * this work for additional information regarding copyright\n     * ownership. Elasticsearch B.V. licenses this file to you under\n     * the Apache License, Version 2.0 (the \"License\"); you may\n     * not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *    http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing,\n     * software distributed under the License is distributed on an\n     * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n     * KIND, either express or implied.  See the License for the\n     * specific language governing permissions and limitations\n     * under the License.\n     */\n\nfunction isFilterable(field) {\n  return filterableTypes.includes(field.type);\n}\n\nfunction getFromSavedObject(savedObject) {\n  if (!savedObject) {\n    return null;\n  }\n\n  return {\n    fields: JSON.parse(savedObject.attributes.fields),\n    title: savedObject.attributes.title\n  };\n}\n\nfunction getFromLegacyIndexPattern(indexPatterns) {\n  return indexPatterns.map(function (indexPattern) {\n    return {\n      fields: indexPattern.fields.raw,\n      title: indexPattern.title\n    };\n  });\n}",null]}