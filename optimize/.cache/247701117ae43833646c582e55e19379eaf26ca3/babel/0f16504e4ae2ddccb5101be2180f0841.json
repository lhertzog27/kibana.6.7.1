{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/ui/public/kbn_top_nav/bread_crumbs/bread_crumbs.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/kbn_top_nav/bread_crumbs/bread_crumbs.js","mtime":1567631711741},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nvar _bread_crumbs = require('./bread_crumbs.html');\n\nvar _bread_crumbs2 = _interopRequireDefault(_bread_crumbs);\n\nvar _modules = require('../../modules');\n\nvar _routes = require('../../routes');\n\nvar _routes2 = _interopRequireDefault(_routes);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _module = _modules.uiModules.get('kibana'); /*\n                                                 * Licensed to Elasticsearch B.V. under one or more contributor\n                                                 * license agreements. See the NOTICE file distributed with\n                                                 * this work for additional information regarding copyright\n                                                 * ownership. Elasticsearch B.V. licenses this file to you under\n                                                 * the Apache License, Version 2.0 (the \"License\"); you may\n                                                 * not use this file except in compliance with the License.\n                                                 * You may obtain a copy of the License at\n                                                 *\n                                                 *    http://www.apache.org/licenses/LICENSE-2.0\n                                                 *\n                                                 * Unless required by applicable law or agreed to in writing,\n                                                 * software distributed under the License is distributed on an\n                                                 * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n                                                 * KIND, either express or implied.  See the License for the\n                                                 * specific language governing permissions and limitations\n                                                 * under the License.\n                                                 */\n\n_module.directive('breadCrumbs', function () {\n  return {\n    restrict: 'E',\n    scope: {\n      omitCurrentPage: '=',\n      /**\n       * Pages to omit from the breadcrumbs. Should be lower-case.\n       * @type {Array}\n       */\n      omitPages: '=',\n      /**\n       * Optional title to append at the end of the breadcrumbs. Note that this can't just be\n       * 'title', because that will be interpreted by browsers as an actual 'title' HTML attribute.\n       * @type {String}\n       */\n      pageTitle: '=',\n      /**\n       * If true, makes each breadcrumb a clickable link.\n       * @type {String}\n       */\n      useLinks: '='\n    },\n    template: _bread_crumbs2.default,\n    controller: function controller($scope, config) {\n      config.watch('k7design', function (val) {\n        return $scope.showPluginBreadcrumbs = !val;\n      });\n\n      function omitPagesFilter(crumb) {\n        return !$scope.omitPages || !$scope.omitPages.includes(crumb.id);\n      }\n\n      function omitCurrentPageFilter(crumb) {\n        return !($scope.omitCurrentPage && crumb.current);\n      }\n\n      $scope.$watchMulti(['[]omitPages', 'omitCurrentPage'], function getBreadcrumbs() {\n        $scope.breadcrumbs = _routes2.default.getBreadcrumbs().filter(omitPagesFilter).filter(omitCurrentPageFilter);\n\n        var newBreadcrumbs = $scope.breadcrumbs.map(function (b) {\n          return { text: b.display, href: b.href };\n        });\n\n        if ($scope.pageTitle) {\n          newBreadcrumbs.push({ text: $scope.pageTitle });\n        }\n      });\n    }\n  };\n});",null]}