{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/ui/public/agg_table/agg_table_group.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/agg_table/agg_table_group.js","mtime":1567631711694},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nrequire('angular');\n\nrequire('angular-recursion');\n\nrequire('./');\n\nvar _modules = require('../modules');\n\nvar _agg_table_group = require('./agg_table_group.html');\n\nvar _agg_table_group2 = _interopRequireDefault(_agg_table_group);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_modules.uiModules.get('kibana', ['RecursionHelper']).directive('kbnAggTableGroup', function (RecursionHelper) {\n  return {\n    restrict: 'E',\n    template: _agg_table_group2.default,\n    scope: {\n      group: '=',\n      perPage: '=?',\n      sort: '=?',\n      exportTitle: '=?',\n      showTotal: '=',\n      totalFunc: '='\n    },\n    compile: function compile($el) {\n      // Use the compile function from the RecursionHelper,\n      // And return the linking function(s) which it returns\n      return RecursionHelper.compile($el, {\n        post: function post($scope) {\n          $scope.$watch('group', function (group) {\n            // clear the previous \"state\"\n            $scope.rows = $scope.columns = false;\n\n            if (!group || !group.tables.length) return;\n\n            var firstTable = group.tables[0];\n            var params = firstTable.aggConfig && firstTable.aggConfig.params;\n            // render groups that have Table children as if they were rows, because iteration is cleaner\n            var childLayout = params && !params.row ? 'columns' : 'rows';\n\n            $scope[childLayout] = group.tables;\n          });\n        }\n      });\n    }\n  };\n}); /*\n     * Licensed to Elasticsearch B.V. under one or more contributor\n     * license agreements. See the NOTICE file distributed with\n     * this work for additional information regarding copyright\n     * ownership. Elasticsearch B.V. licenses this file to you under\n     * the Apache License, Version 2.0 (the \"License\"); you may\n     * not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *    http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing,\n     * software distributed under the License is distributed on an\n     * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n     * KIND, either express or implied.  See the License for the\n     * specific language governing permissions and limitations\n     * under the License.\n     */",null]}