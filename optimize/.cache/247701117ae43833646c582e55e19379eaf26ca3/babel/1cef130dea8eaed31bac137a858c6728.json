{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/ui/public/routes/wrap_route_with_prep.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/routes/wrap_route_with_prep.js","mtime":1567631711752},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.wrapRouteWithPrep = wrapRouteWithPrep;\n\nvar _angular = require('angular');\n\nvar _angular2 = _interopRequireDefault(_angular);\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _work_queue = require('./work_queue');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction wrapRouteWithPrep(route, setup) {\n  if (!route.resolve && route.redirectTo) return;\n\n  var userWork = new _work_queue.WorkQueue();\n  // the point at which we will consider the queue \"full\"\n  userWork.limit = _lodash2.default.keys(route.resolve).length;\n\n  var resolve = {\n    __prep__: function __prep__($injector) {\n      return $injector.invoke(setup.doWork, setup, { userWork: userWork });\n    }\n  };\n\n  // send each user resolve to the userWork queue, which will prevent it from running before the\n  // prep is complete\n  _lodash2.default.forOwn(route.resolve || {}, function (expr, name) {\n    resolve[name] = function ($injector, Promise) {\n      var defer = Promise.defer();\n      userWork.push(defer);\n      return defer.promise.then(function () {\n        return $injector[_angular2.default.isString(expr) ? 'get' : 'invoke'](expr);\n      });\n    };\n  });\n\n  // we're copied everything over so now overwrite\n  route.resolve = resolve;\n} /*\n   * Licensed to Elasticsearch B.V. under one or more contributor\n   * license agreements. See the NOTICE file distributed with\n   * this work for additional information regarding copyright\n   * ownership. Elasticsearch B.V. licenses this file to you under\n   * the Apache License, Version 2.0 (the \"License\"); you may\n   * not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *    http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing,\n   * software distributed under the License is distributed on an\n   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n   * KIND, either express or implied.  See the License for the\n   * specific language governing permissions and limitations\n   * under the License.\n   */",null]}