{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/utils/strings/prose.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/utils/strings/prose.js","mtime":1567631711789},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.formatListAsProse = formatListAsProse;\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/**\n *  Converts an array of items into a sentence-ready string.\n *\n *  @param {Array<any>} list\n *  @param {Object} [options={}]\n *  @property {Boolean} [options.inclusive=true] Creates an inclusive list using \"and\"\n *                                               when `true` (default), otherwise uses \"or\"\n *  @return {String}\n */\nfunction formatListAsProse(list) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _options$inclusive = options.inclusive,\n      inclusive = _options$inclusive === undefined ? true : _options$inclusive;\n\n\n  if (!Array.isArray(list)) {\n    throw new TypeError('formatListAsProse() requires an array');\n  }\n\n  var count = list.length;\n  var conjunction = inclusive ? 'and' : 'or';\n\n  if (count <= 2) {\n    return list.join(' ' + conjunction + ' ');\n  }\n\n  return list.slice(0, -1).concat(conjunction + ' ' + list[count - 1]).join(', ');\n}",null]}