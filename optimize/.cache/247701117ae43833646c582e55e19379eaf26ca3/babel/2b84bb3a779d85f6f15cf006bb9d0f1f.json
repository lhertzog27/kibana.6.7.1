{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/ui/public/vis/components/tooltip/tooltip.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/vis/components/tooltip/tooltip.js","mtime":1567631711769},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Tooltip = Tooltip;\nexports.TooltipProvider = TooltipProvider;\n\nvar _d = require('d3');\n\nvar _d2 = _interopRequireDefault(_d);\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _binder = require('../../../binder');\n\nvar _position_tooltip = require('./position_tooltip');\n\nvar _jquery = require('jquery');\n\nvar _jquery2 = _interopRequireDefault(_jquery);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar allContents = [];\n\n/**\n * Add tooltip and listeners to visualization elements\n *\n * @class Tooltip\n * @constructor\n * @param el {HTMLElement} Reference to DOM element\n * @param formatter {Function} Tooltip formatter\n * @param events {Constructor} Allows tooltip to return event response data\n */\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nfunction Tooltip(id, el, formatter, events) {\n  if (!(this instanceof Tooltip)) {\n    return new Tooltip(id, el, formatter, events);\n  }\n\n  this.id = id; // unique id for this tooltip type\n  this.el = el;\n  this.order = 100; // higher ordered contents are rendered below the others\n  this.formatter = formatter;\n  this.events = events;\n  this.containerClass = 'visWrapper';\n  this.tooltipClass = 'visTooltip';\n  this.tooltipSizerClass = 'visTooltip__sizingClone';\n  this.showCondition = _lodash2.default.constant(true);\n\n  this.binder = new _binder.Binder();\n}\n\n/**\n * Get jquery reference to the tooltip node\n *\n * @return {Object} jQuery node object\n */\nTooltip.prototype.$get = _lodash2.default.once(function () {\n  return (0, _jquery2.default)('<div>').addClass(this.tooltipClass).appendTo(document.body);\n});\n\n/**\n * Get jquery reference to the tooltip sizer node\n *\n * @return {Object} jQuery node object\n */\nTooltip.prototype.$getSizer = _lodash2.default.once(function () {\n  return this.$get().clone().removeClass(this.tooltipClass).addClass(this.tooltipSizerClass).appendTo(document.body);\n});\n\n/**\n * Show the tooltip, positioning it based on the content and chart container\n */\nTooltip.prototype.show = function () {\n  var $tooltip = this.$get();\n  var $chart = this.$getChart();\n  var html = $tooltip.html();\n\n  if (!$chart) return;\n\n  var placement = (0, _position_tooltip.positionTooltip)({\n    $window: (0, _jquery2.default)(window),\n    $chart: $chart,\n    $el: $tooltip,\n    $sizer: this.$getSizer(),\n    event: _d2.default.event\n  }, html);\n\n  $tooltip.css({\n    visibility: 'visible',\n    left: placement.left,\n    top: placement.top\n  });\n};\n\n/**\n * Hide the tooltip, clearing its contents\n */\nTooltip.prototype.hide = function () {\n  var $tooltip = this.$get();\n  allContents = [];\n  $tooltip.css({\n    visibility: 'hidden',\n    left: '-500px',\n    top: '-500px'\n  });\n};\n\n/**\n * Get the jQuery chart node, based on the container object\n * NOTE: the container is a d3 selection\n *\n * @return {Object} jQuery node for the chart\n */\nTooltip.prototype.$getChart = function () {\n  var chart = (0, _jquery2.default)(this.container && this.container.node());\n  return chart.length ? chart : false;\n};\n\n/**\n * Renders tooltip\n *\n * @method render\n * @return {Function} Renders tooltip on a D3 selection\n */\nTooltip.prototype.render = function () {\n  var self = this;\n\n  /**\n   * Calculates values for the tooltip placement\n   *\n   * @param {Object} selection D3 selection object\n   */\n  return function (selection) {\n    var $tooltip = self.$get();\n    var id = self.id;\n    var order = self.order;\n\n    if (self.container === undefined || self.container !== _d2.default.select(self.el).select('.' + self.containerClass)) {\n      self.container = _d2.default.select(self.el).select('.' + self.containerClass);\n    }\n\n    var $chart = self.$getChart();\n    if ($chart) {\n      self.binder.jqOn($chart, 'mouseleave', function () {\n        // only clear when we leave the chart, so that\n        // moving between points doesn't make it reposition\n        $chart.removeData('previousPlacement');\n      });\n    }\n\n    selection.each(function (d, i) {\n      var element = _d2.default.select(this);\n\n      function render(html) {\n        allContents = _lodash2.default.filter(allContents, function (content) {\n          return content.id !== id;\n        });\n\n        if (html) allContents.push({ id: id, html: html, order: order });\n\n        var allHtml = (0, _lodash2.default)(allContents).sortBy('order').pluck('html').compact().join('\\n');\n\n        if (allHtml) {\n          $tooltip.html(allHtml);\n          self.show();\n        } else {\n          self.hide();\n        }\n      }\n\n      self.binder.fakeD3Bind(this, 'mousemove', function () {\n        if (!self.showCondition.call(element, d, i)) {\n          return render();\n        }\n\n        var events = self.events ? self.events.eventResponse(d, i) : d;\n        return render(self.formatter(events));\n      });\n\n      self.binder.fakeD3Bind(this, 'mouseleave', function () {\n        render();\n      });\n    });\n  };\n};\n\nTooltip.prototype.destroy = function () {\n  this.hide();\n  this.binder.destroy();\n};\n\nfunction TooltipProvider() {\n  return Tooltip;\n}",null]}