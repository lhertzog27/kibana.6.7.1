{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/ui/public/listen/listen.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/listen/listen.js","mtime":1567631711742},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nvar _modules = require('../modules');\n\n_modules.uiModules.get('kibana').run(function ($rootScope) {\n\n  /**\n   * Helper that registers an event listener, and removes that listener when\n   * the $scope is destroyed.\n   *\n   * @param  {SimpleEmitter} emitter - the event emitter to listen to\n   * @param  {string} eventName - the event name\n   * @param  {Function} handler - the event handler\n   * @return {undefined}\n   */\n  $rootScope.constructor.prototype.$listen = function (emitter, eventName, handler) {\n    emitter.on(eventName, handler);\n    this.$on('$destroy', function () {\n      emitter.off(eventName, handler);\n    });\n  };\n\n  /**\n   * Helper that registers an event listener, and removes that listener when\n   * the $scope is destroyed. Handler is executed inside $evalAsync, ensuring digest cycle is run after the handler\n   *\n   * @param  {SimpleEmitter} emitter - the event emitter to listen to\n   * @param  {string} eventName - the event name\n   * @param  {Function} handler - the event handler\n   * @return {undefined}\n   */\n  $rootScope.constructor.prototype.$listenAndDigestAsync = function (emitter, eventName, handler) {\n    var _this = this;\n\n    var evalAsyncWrappedHandler = function evalAsyncWrappedHandler() {\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this.$evalAsync(function () {\n        return handler(args);\n      });\n    };\n    this.$listen(emitter, eventName, evalAsyncWrappedHandler);\n  };\n}); /*\n     * Licensed to Elasticsearch B.V. under one or more contributor\n     * license agreements. See the NOTICE file distributed with\n     * this work for additional information regarding copyright\n     * ownership. Elasticsearch B.V. licenses this file to you under\n     * the Apache License, Version 2.0 (the \"License\"); you may\n     * not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *    http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing,\n     * software distributed under the License is distributed on an\n     * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n     * KIND, either express or implied.  See the License for the\n     * specific language governing permissions and limitations\n     * under the License.\n     */",null]}