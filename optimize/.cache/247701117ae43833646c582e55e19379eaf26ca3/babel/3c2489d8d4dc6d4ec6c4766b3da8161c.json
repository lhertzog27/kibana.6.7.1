{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/ui/public/courier/search_source/_normalize_sort_request.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/courier/search_source/_normalize_sort_request.js","mtime":1567631711714},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NormalizeSortRequestProvider = NormalizeSortRequestProvider;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction NormalizeSortRequestProvider(config) {\n  var defaultSortOptions = config.get('sort:options');\n\n  /**\n   * Decorate queries with default parameters\n   * @param {query} query object\n   * @returns {object}\n   */\n  return function (sortObject, indexPattern) {\n    // [].concat({}) -> [{}], [].concat([{}]) -> [{}]\n    return [].concat(sortObject).map(function (sortable) {\n      return normalize(sortable, indexPattern);\n    });\n  };\n\n  /*\n    Normalize the sort description to the more verbose format:\n    { someField: \"desc\" } into { someField: { \"order\": \"desc\"}}\n  */\n  function normalize(sortable, indexPattern) {\n    var normalized = {};\n    var sortField = _lodash2.default.keys(sortable)[0];\n    var sortValue = sortable[sortField];\n    var indexField = indexPattern.fields.byName[sortField];\n\n    if (indexField && indexField.scripted && indexField.sortable) {\n      var direction = void 0;\n      if (_lodash2.default.isString(sortValue)) direction = sortValue;\n      if (_lodash2.default.isObject(sortValue) && sortValue.order) direction = sortValue.order;\n\n      sortField = '_script';\n      sortValue = {\n        script: {\n          source: indexField.script,\n          lang: indexField.lang\n        },\n        type: castSortType(indexField.type),\n        order: direction\n      };\n    } else {\n      if (_lodash2.default.isString(sortValue)) {\n        sortValue = { order: sortValue };\n      }\n      sortValue = _lodash2.default.defaults({}, sortValue, defaultSortOptions);\n\n      if (sortField === '_score') {\n        delete sortValue.unmapped_type;\n      }\n    }\n\n    normalized[sortField] = sortValue;\n    return normalized;\n  }\n}\n\n// The ES API only supports sort scripts of type 'number' and 'string'\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nfunction castSortType(type) {\n  var typeCastings = {\n    number: 'number',\n    string: 'string',\n    date: 'number',\n    boolean: 'string'\n  };\n\n  var castedType = typeCastings[type];\n  if (!castedType) {\n    throw new Error('Unsupported script sort type: ' + type);\n  }\n\n  return castedType;\n}",null]}