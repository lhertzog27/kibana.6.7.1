{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/ui/public/timepicker/timepicker.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/timepicker/timepicker.js","mtime":1567631711762},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nvar _timepicker = require('./timepicker.html');\n\nvar _timepicker2 = _interopRequireDefault(_timepicker);\n\nrequire('./quick_panel');\n\nrequire('./recent_panel');\n\nrequire('./relative_panel');\n\nrequire('./absolute_panel');\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _relative_options = require('./relative_options');\n\nvar _parse_relative_parts = require('./parse_relative_parts');\n\nvar _datemath = require('@elastic/datemath');\n\nvar _datemath2 = _interopRequireDefault(_datemath);\n\nvar _moment = require('moment');\n\nvar _moment2 = _interopRequireDefault(_moment);\n\nrequire('./timepicker.less');\n\nrequire('../directives/input_datetime');\n\nrequire('../directives/inequality');\n\nrequire('./refresh_intervals');\n\nrequire('./kbn_global_timepicker');\n\nvar _modules = require('../modules');\n\nvar _modes = require('./modes');\n\nvar _time_units = require('./time_units');\n\nvar _pretty_interval = require('./pretty_interval');\n\nvar _i18n = require('@kbn/i18n');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nvar _module = _modules.uiModules.get('ui/timepicker');\n\n_module.directive('kbnTimepicker', function (refreshIntervals) {\n  return {\n    restrict: 'E',\n    scope: {\n      from: '=',\n      to: '=',\n      mode: '=',\n      interval: '=',\n      activeTab: '=',\n      onFilterSelect: '&',\n      onIntervalSelect: '&'\n    },\n    template: _timepicker2.default,\n    controller: function controller($scope) {\n      $scope.format = 'MMMM Do YYYY, HH:mm:ss.SSS';\n      $scope.modes = Object.values(_modes.TIME_MODES);\n      $scope.activeTab = $scope.activeTab || 'filter';\n\n      if (_lodash2.default.isUndefined($scope.mode)) $scope.mode = _modes.TIME_MODES.QUICK;\n\n      $scope.refreshLists = (0, _lodash2.default)(refreshIntervals).groupBy('section').values().value();\n\n      $scope.relative = {\n        from: {\n          count: 1,\n          unit: 'm',\n          preview: undefined,\n          round: false\n        },\n        to: {\n          count: 0,\n          unit: 's',\n          preview: undefined,\n          round: false\n        }\n      };\n\n      $scope.absolute = {\n        from: (0, _moment2.default)(),\n        to: (0, _moment2.default)()\n      };\n\n      $scope.units = _time_units.timeUnits;\n\n      $scope.relativeOptions = _relative_options.relativeOptions;\n\n      $scope.$watch('from', function (date) {\n        if (_moment2.default.isMoment(date) && $scope.mode === _modes.TIME_MODES.ABSOLUTE) {\n          $scope.absolute.from = date;\n        }\n      });\n\n      $scope.$watch('to', function (date) {\n        if (_moment2.default.isMoment(date) && $scope.mode === _modes.TIME_MODES.ABSOLUTE) {\n          $scope.absolute.to = date;\n        }\n      });\n\n      // If we always return a new object from the getters below (pickFromDate and pickToDate) we'll create an\n      // infinite digest loop, so we maintain these copies to return instead.\n      $scope.$watch('absolute.from', function (newDate) {\n        if (!newDate) {\n          return;\n        }\n\n        _lodash2.default.set($scope, 'browserAbsolute.from', new Date(newDate.year(), newDate.month(), newDate.date()));\n      });\n\n      $scope.$watch('absolute.to', function (newDate) {\n        if (!newDate) {\n          return;\n        }\n\n        _lodash2.default.set($scope, 'browserAbsolute.to', new Date(newDate.year(), newDate.month(), newDate.date()));\n      });\n\n      // The datepicker directive uses native JavaScript Dates, ignoring moment's default timezone. This causes\n      // the datepicker and the text input above it to get out of sync if the user changed the `dateFormat:tz` config\n      // in advanced settings. The text input will show the date in the user selected timezone, the datepicker will\n      // show the date in the local browser timezone. Since we really just want a day, month, year from the datepicker\n      // instead of a moment in time, we grab those individual values from the native date.\n      $scope.pickFromDate = function (date) {\n        if (!date) return _lodash2.default.get($scope, 'browserAbsolute.from');\n\n        var defaultTimeZoneDate = (0, _moment2.default)({\n          year: date.getFullYear(),\n          month: date.getMonth(),\n          day: date.getDate(),\n          hour: 0,\n          minute: 0,\n          second: 0,\n          millisecond: 0\n        });\n        return $scope.absolute.from = defaultTimeZoneDate;\n      };\n\n      $scope.pickToDate = function (date) {\n        if (!date) return _lodash2.default.get($scope, 'browserAbsolute.to');\n\n        var defaultTimeZoneDate = (0, _moment2.default)({\n          year: date.getFullYear(),\n          month: date.getMonth(),\n          day: date.getDate(),\n          hour: 23,\n          minute: 59,\n          second: 59,\n          millisecond: 999\n        });\n        return $scope.absolute.to = defaultTimeZoneDate;\n      };\n\n      $scope.setMode = function (thisMode) {\n        switch (thisMode) {\n          case _modes.TIME_MODES.QUICK:\n            break;\n          case _modes.TIME_MODES.RECENT:\n            break;\n          case _modes.TIME_MODES.RELATIVE:\n            $scope.relative = (0, _parse_relative_parts.parseRelativeParts)($scope.from, $scope.to);\n            $scope.formatRelative('from');\n            $scope.formatRelative('to');\n            break;\n          case _modes.TIME_MODES.ABSOLUTE:\n            $scope.absolute.from = _datemath2.default.parse($scope.from || (0, _moment2.default)().subtract(15, 'minutes'));\n            $scope.absolute.to = _datemath2.default.parse($scope.to || (0, _moment2.default)(), { roundUp: true });\n            break;\n        }\n\n        $scope.mode = thisMode;\n      };\n\n      $scope.setQuick = function (from, to) {\n        $scope.onFilterSelect({ from: from, to: to, mode: _modes.TIME_MODES.QUICK });\n      };\n\n      $scope.setToNow = function (key) {\n        $scope.absolute[key] = (0, _moment2.default)();\n      };\n\n      $scope.setRelativeToNow = function (key) {\n        $scope.relative[key].count = 0;\n        $scope.relative[key].round = false;\n        $scope.formatRelative(key);\n      };\n\n      $scope.checkRelative = function () {\n        if ($scope.relative.from.count != null && $scope.relative.to.count != null) {\n          var from = _datemath2.default.parse(getRelativeString('from'));\n          var to = _datemath2.default.parse(getRelativeString('to'), { roundUp: true });\n          if (to && from) return to.isBefore(from);\n          return true;\n        }\n      };\n\n      $scope.formatRelative = function (key) {\n        var relativeString = getRelativeString(key);\n        var parsed = _datemath2.default.parse(relativeString, { roundUp: key === 'to' });\n        var preview = void 0;\n        if (relativeString === 'now') {\n          preview = _i18n.i18n.translate('common.ui.timepicker.now', { defaultMessage: 'Now' });\n        } else {\n          preview = parsed ? parsed.format($scope.format) : undefined;\n        }\n        _lodash2.default.set($scope, 'relative.' + key + '.preview', preview);\n        return parsed;\n      };\n\n      $scope.applyRelative = function () {\n        $scope.onFilterSelect({\n          from: getRelativeString('from'),\n          to: getRelativeString('to'),\n          mode: _modes.TIME_MODES.RELATIVE\n        });\n      };\n\n      function getRelativeString(key) {\n        var count = _lodash2.default.get($scope, 'relative.' + key + '.count', 0);\n        var round = _lodash2.default.get($scope, 'relative.' + key + '.round', false);\n        var matches = _lodash2.default.get($scope, 'relative.' + key + '.unit', 's').match(/([smhdwMy])(\\+)?/);\n        var unit = void 0;\n        var operator = '-';\n        if (matches && matches[1]) unit = matches[1];\n        if (matches && matches[2]) operator = matches[2];\n        if (count === 0 && !round) return 'now';\n        var result = 'now' + operator + count + unit;\n        result += round ? '/' + unit : '';\n        return result;\n      }\n\n      $scope.applyAbsolute = function () {\n        $scope.onFilterSelect({\n          from: (0, _moment2.default)($scope.absolute.from),\n          to: (0, _moment2.default)($scope.absolute.to),\n          mode: _modes.TIME_MODES.ABSOLUTE\n        });\n      };\n\n      $scope.prettyInterval = function (interval) {\n        return (0, _pretty_interval.prettyInterval)(interval.value);\n      };\n\n      $scope.setRefreshInterval = function (interval) {\n        interval = _lodash2.default.clone(interval || {});\n        interval.pause = interval.pause == null || interval.pause === false ? false : true;\n\n        $scope.onIntervalSelect({\n          interval: {\n            value: interval.value,\n            pause: interval.pause\n          }\n        });\n      };\n\n      $scope.setMode($scope.mode);\n    }\n  };\n});",null]}