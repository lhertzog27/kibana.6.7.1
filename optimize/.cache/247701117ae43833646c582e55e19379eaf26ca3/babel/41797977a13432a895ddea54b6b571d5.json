{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/legacy/core_plugins/input_control_vis/public/control/create_search_source.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/legacy/core_plugins/input_control_vis/public/control/create_search_source.js","mtime":1567631691151},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSearchSource = createSearchSource;\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nfunction createSearchSource(kbnApi, initialState, indexPattern, aggs, useTimeFilter) {\n  var filters = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [];\n\n  var searchSource = new kbnApi.SearchSource(initialState);\n  // Do not not inherit from rootSearchSource to avoid picking up time and globals\n  searchSource.setParent(false);\n  searchSource.setField('filter', function () {\n    var activeFilters = [].concat(_toConsumableArray(filters));\n    if (useTimeFilter) {\n      activeFilters.push(kbnApi.timeFilter.createFilter(indexPattern));\n    }\n    return activeFilters;\n  });\n  searchSource.setField('size', 0);\n  searchSource.setField('index', indexPattern);\n  searchSource.setField('aggs', aggs);\n  return searchSource;\n}",null]}