{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/ui/public/events.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/events.js","mtime":1567631711723},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EventsProvider = EventsProvider;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _notify = require('./notify');\n\nvar _simple_emitter = require('./utils/simple_emitter');\n\nvar _legacy_class = require('./utils/legacy_class');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/**\n * @name Events\n *\n * @extends SimpleEmitter\n */\n\nvar location = 'EventEmitter';\n\nfunction EventsProvider(Private, Promise) {\n  (0, _legacy_class.createLegacyClass)(Events).inherits(_simple_emitter.SimpleEmitter);\n  function Events() {\n    Events.Super.call(this);\n    this._listeners = {};\n    this._emitChain = Promise.resolve();\n  }\n\n  /**\n   * Listens for events\n   * @param {string} name - The name of the event\n   * @param {function} handler - The function to call when the event is triggered\n   * @return {Events} - this, for chaining\n   */\n  Events.prototype.on = function (name, handler) {\n    if (!Array.isArray(this._listeners[name])) {\n      this._listeners[name] = [];\n    }\n\n    var listener = {\n      handler: handler\n    };\n    this._listeners[name].push(listener);\n\n    (function rebuildDefer() {\n      listener.defer = Promise.defer();\n      listener.resolved = listener.defer.promise.then(function (args) {\n        rebuildDefer();\n\n        // we ignore the completion of handlers, just watch for unhandled errors\n        Promise.resolve(handler.apply(handler, args)).catch(function (error) {\n          return (0, _notify.fatalError)(error, location);\n        });\n      });\n    })();\n\n    return this;\n  };\n\n  /**\n   * Removes an event listener\n   * @param {string} [name] - The name of the event\n   * @param {function} [handler] - The handler to remove\n   * @return {Events} - this, for chaining\n   */\n  Events.prototype.off = function (name, handler) {\n    if (!name && !handler) {\n      return this.removeAllListeners();\n    }\n\n    // exit early if there is not an event that matches\n    if (!this._listeners[name]) return this;\n\n    // If no hander remove all the events\n    if (!handler) {\n      delete this._listeners[name];\n    } else {\n      this._listeners[name] = _lodash2.default.filter(this._listeners[name], function (listener) {\n        return handler !== listener.handler;\n      });\n    }\n\n    return this;\n  };\n\n  /**\n   * Emits the event to all listeners\n   *\n   * @param {string} name - The name of the event.\n   * @param {any} [value] - The value that will be passed to all event handlers.\n   * @returns {Promise}\n   */\n  Events.prototype.emit = function (name) {\n    var self = this;\n    var args = _lodash2.default.rest(arguments);\n\n    if (!self._listeners[name]) {\n      return self._emitChain;\n    }\n\n    return Promise.map(self._listeners[name], function (listener) {\n      return self._emitChain = self._emitChain.then(function () {\n        // Double check that off wasn't called after an emit, but before this is fired.\n        if (!self._listeners[name] || self._listeners[name].indexOf(listener) < 0) return;\n\n        listener.defer.resolve(args);\n        return listener.resolved;\n      });\n    });\n  };\n\n  /**\n   * Get a list of the handler functions for a specific event\n   *\n   * @param  {string} name\n   * @return {array[function]}\n   */\n  Events.prototype.listeners = function (name) {\n    return _lodash2.default.pluck(this._listeners[name], 'handler');\n  };\n\n  return Events;\n}",null]}