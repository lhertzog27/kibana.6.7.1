{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/ui/public/config/config.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/config/config.js","mtime":1567631711712},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nvar _angular = require('angular');\n\nvar _angular2 = _interopRequireDefault(_angular);\n\nvar _chrome = require('../chrome');\n\nvar _chrome2 = _interopRequireDefault(_chrome);\n\nvar _lodash = require('lodash');\n\nvar _modules = require('../modules');\n\nvar _subscribe_with_scope = require('../utils/subscribe_with_scope');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _module = _modules.uiModules.get('kibana/config');\n\n/**\n * Angular tie-in to UiSettingsClient, which is implemented in vanilla JS. Designed\n * to expose the exact same API as the config service that has existed since forever.\n * @name config\n */\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n_module.service('config', function ($rootScope, Promise) {\n  var _this = this;\n\n  var uiSettings = _chrome2.default.getUiSettingsClient();\n\n  // direct bind sync methods\n  this.getAll = function () {\n    return uiSettings.getAll.apply(uiSettings, arguments);\n  };\n  this.get = function () {\n    return uiSettings.get.apply(uiSettings, arguments);\n  };\n  this.isDeclared = function () {\n    return uiSettings.isDeclared.apply(uiSettings, arguments);\n  };\n  this.isDefault = function () {\n    return uiSettings.isDefault.apply(uiSettings, arguments);\n  };\n  this.isCustom = function () {\n    return uiSettings.isCustom.apply(uiSettings, arguments);\n  };\n  this.isOverridden = function () {\n    return uiSettings.isOverridden.apply(uiSettings, arguments);\n  };\n\n  // modify remove() to use angular Promises\n  this.remove = function (key) {\n    return Promise.resolve(uiSettings.remove(key));\n  };\n\n  // modify set() to use angular Promises and angular.toJson()\n  this.set = function (key, value) {\n    return Promise.resolve(uiSettings.set(key, (0, _lodash.isPlainObject)(value) ? _angular2.default.toJson(value) : value));\n  };\n\n  //////////////////////////////\n  //* angular specific methods *\n  //////////////////////////////\n\n  var subscription = (0, _subscribe_with_scope.subscribeWithScope)($rootScope, uiSettings.getUpdate$(), {\n    next: function next(_ref) {\n      var key = _ref.key,\n          newValue = _ref.newValue,\n          oldValue = _ref.oldValue;\n\n      $rootScope.$broadcast('change:config', newValue, oldValue, key, _this);\n      $rootScope.$broadcast('change:config.' + key, newValue, oldValue, key, _this);\n    }\n  });\n  $rootScope.$on('$destroy', function () {\n    return subscription.unsubscribe();\n  });\n\n  this.watchAll = function (handler) {\n    var scope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : $rootScope;\n\n    // call handler immediately to initialize\n    handler(null, null, null, this);\n\n    return scope.$on('change:config', function (event) {\n      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      handler.apply(undefined, args);\n    });\n  };\n\n  this.watch = function (key, handler) {\n    var scope = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : $rootScope;\n\n    if (!this.isDeclared(key)) {\n      throw new Error('Unexpected `config.watch(\"' + key + '\", fn)` call on unrecognized configuration setting \"' + key + '\".\\nSetting an initial value via `config.set(\"' + key + '\", value)` before binding\\nany custom setting configuration watchers for \"' + key + '\" may fix this issue.');\n    }\n\n    // call handler immediately with current value\n    handler(this.get(key), null, key, uiSettings);\n\n    // call handler again on each change for this key\n    return scope.$on('change:config.' + key, function (event) {\n      for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      handler.apply(undefined, args);\n    });\n  };\n\n  /**\n   * A little helper for binding config variables to $scopes\n   *\n   * @param  {Scope} $scope - an angular $scope object\n   * @param  {string} key - the config key to bind to\n   * @param  {string} [property] - optional property name where the value should\n   *                             be stored. Defaults to the config key\n   * @return {function} - an unbind function\n   */\n  this.bindToScope = function (scope, key) {\n    var property = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : key;\n\n    var onUpdate = function onUpdate(newVal) {\n      scope[property] = newVal;\n    };\n\n    return this.watch(key, onUpdate, scope);\n  };\n});",null]}