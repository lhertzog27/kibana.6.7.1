{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/ui/public/test_harness/test_sharding/get_shard_num.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/test_harness/test_sharding/get_shard_num.js","mtime":1567631711760},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getShardNum = getShardNum;\n\nvar _murmurhash3js = require('murmurhash3js');\n\nvar _murmurhash3js2 = _interopRequireDefault(_murmurhash3js);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// murmur hashes are 32bit unsigned integers\nvar MAX_HASH = Math.pow(2, 32);\n\n/**\n*  Determine the shard number for a suite by hashing\n*  its name and placing it based on the hash\n*\n*  @param {number} shardTotal - the total number of shards\n*  @param {string} suiteName - the suite name to hash\n*  @return {number} shardNum - 1-based shard number\n*/\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nfunction getShardNum(shardTotal, suiteName) {\n  var hashIntsPerShard = MAX_HASH / shardTotal;\n\n  var hashInt = _murmurhash3js2.default.x86.hash32(suiteName);\n\n  // murmur3 produces 32bit integers, so we devide it by the number of chunks\n  // to determine which chunk the suite should fall in. +1 because the current\n  // chunk is 1-based\n  var shardNum = Math.floor(hashInt / hashIntsPerShard) + 1;\n\n  // It's not clear if hash32 can produce the MAX_HASH or not,\n  // but this just ensures that shard numbers don't go out of bounds\n  // and cause tests to be ignored unnecessarily\n  return Math.max(1, Math.min(shardNum, shardTotal));\n}",null]}