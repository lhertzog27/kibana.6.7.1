{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/legacy/core_plugins/console/public/src/utils.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/legacy/core_plugins/console/public/src/utils.js","mtime":1567631691128},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar utils = {}; /*\n                 * Licensed to Elasticsearch B.V. under one or more contributor\n                 * license agreements. See the NOTICE file distributed with\n                 * this work for additional information regarding copyright\n                 * ownership. Elasticsearch B.V. licenses this file to you under\n                 * the Apache License, Version 2.0 (the \"License\"); you may\n                 * not use this file except in compliance with the License.\n                 * You may obtain a copy of the License at\n                 *\n                 *    http://www.apache.org/licenses/LICENSE-2.0\n                 *\n                 * Unless required by applicable law or agreed to in writing,\n                 * software distributed under the License is distributed on an\n                 * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n                 * KIND, either express or implied.  See the License for the\n                 * specific language governing permissions and limitations\n                 * under the License.\n                 */\n\nutils.textFromRequest = function (request) {\n  var data = request.data;\n  if (typeof data !== 'string') {\n    data = data.join('\\n');\n  }\n  return request.method + ' ' + request.url + '\\n' + data;\n};\n\nutils.jsonToString = function (data, indent) {\n  return JSON.stringify(data, null, indent ? 2 : 0);\n};\n\nutils.reformatData = function (data, indent) {\n  var changed = false;\n  var formattedData = [];\n  for (var i = 0; i < data.length; i++) {\n    var curDoc = data[i];\n    try {\n      var newDoc = utils.jsonToString(JSON.parse(utils.collapseLiteralStrings(curDoc)), indent ? 2 : 0);\n      if (indent) {\n        newDoc = utils.expandLiteralStrings(newDoc);\n      }\n      changed = changed || newDoc !== curDoc;\n      formattedData.push(newDoc);\n    } catch (e) {\n      console.log(e);\n      formattedData.push(curDoc);\n    }\n  }\n\n  return {\n    changed: changed,\n    data: formattedData\n  };\n};\n\nutils.collapseLiteralStrings = function (data) {\n  return data.replace(/\"\"\"(?:\\s*\\r?\\n)?((?:.|\\r?\\n)*?)(?:\\r?\\n\\s*)?\"\"\"/g, function (match, literal) {\n    return JSON.stringify(literal);\n  });\n};\n\nutils.expandLiteralStrings = function (data) {\n  return data.replace(/(\"(?:\\\\\"|[^\"])*?\")/g, function (match, string) {\n    // expand things with two slashes or more\n    if (string.split(/\\\\./).length > 2) {\n      string = JSON.parse(string).replace('^\\s*\\n', '').replace('\\n\\s*^', '');\n      var append = string.includes('\\n') ? '\\n' : ''; // only go multi line if the string has multiline\n      return '\"\"\"' + append + string + append + '\"\"\"';\n    } else {\n      return string;\n    }\n  });\n};\n\nutils.extractDeprecationMessages = function (warnings) {\n  // pattern for valid warning header\n  var re = /\\d{3} [0-9a-zA-Z!#$%&'*+-.^_`|~]+ \\\"((?:\\t| |!|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\x80-\\xff]|\\\\\\\\|\\\\\")*)\\\"(?: \\\"[^\"]*\\\")?/;\n  // split on any comma that is followed by an even number of quotes\n  return _lodash2.default.map(utils.splitOnUnquotedCommaSpace(warnings), function (warning) {\n    var match = re.exec(warning);\n    // extract the actual warning if there was a match\n    return '#! Deprecation: ' + (match !== null ? utils.unescape(match[1]) : warning);\n  });\n};\n\nutils.unescape = function (s) {\n  return s.replace(/\\\\\\\\/g, '\\\\').replace(/\\\\\"/g, '\"');\n};\n\nutils.splitOnUnquotedCommaSpace = function (s) {\n  var quoted = false;\n  var arr = [];\n  var buffer = '';\n  var i = 0;\n  while (i < s.length) {\n    var token = s.charAt(i++);\n    if (token === '\\\\' && i < s.length) {\n      token += s.charAt(i++);\n    } else if (token === ',' && i < s.length && s.charAt(i) === ' ') {\n      token += s.charAt(i++);\n    }\n    if (token === '\"') {\n      quoted = !quoted;\n    } else if (!quoted && token === ', ') {\n      arr.push(buffer);\n      buffer = '';\n      continue;\n    }\n    buffer += token;\n  }\n  arr.push(buffer);\n  return arr;\n};\n\nexports.default = utils;\nmodule.exports = exports['default'];",null]}