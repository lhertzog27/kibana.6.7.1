{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/ui/public/flot-charts/jquery.flot.log.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/flot-charts/jquery.flot.log.js","mtime":1567631711736},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["\"use strict\";\n\n/*@notice\n * Pretty handling of logarithmic axes.\n * Copyright (c) 2007-2014 IOLA and Ole Laursen.\n * Licensed under the MIT license.\n * Created by Arne de Laat\n * Set axis.mode to \"log\" and make the axis logarithmic using transform:\n *     axis: {\n *         mode: 'log',\n *         transform: function(v) {v <= 0 ? Math.log(v) / Math.LN10 : null},\n *         inverseTransform: function(v) {Math.pow(10, v)}\n *     }\n * The transform filters negative and zero values, because those are\n * invalid on logarithmic scales.\n * This plugin tries to create good looking logarithmic ticks, using\n * unicode superscript characters. If all data to be plotted is between two\n * powers of ten then the default flot tick generator and renderer are\n * used. Logarithmic ticks are places at powers of ten and at half those\n * values if there are not to many ticks already (e.g. [1, 5, 10, 50, 100]).\n * For details,  see https://github.com/flot/flot/pull/1328\n*/\n\n(function ($) {\n\n  function log10(value) {\n    /* Get the Log10 of the value\n    */\n    return Math.log(value) / Math.LN10;\n  }\n\n  function floorAsLog10(value) {\n    /* Get power of the first power of 10 below the value\n    */\n    return Math.floor(log10(value));\n  }\n\n  function ceilAsLog10(value) {\n    /* Get power of the first power of 10 above the value\n    */\n    return Math.ceil(log10(value));\n  }\n\n  // round to nearby lower multiple of base\n  function floorInBase(n, base) {\n    return base * Math.floor(n / base);\n  }\n\n  function getUnicodePower(power) {\n    var superscripts = [\"⁰\", \"¹\", \"²\", \"³\", \"⁴\", \"⁵\", \"⁶\", \"⁷\", \"⁸\", \"⁹\"],\n        result = \"\",\n        str_power = \"\" + power;\n    for (var i = 0; i < str_power.length; i++) {\n      if (str_power[i] === \"+\") {} else if (str_power[i] === \"-\") {\n        result += \"⁻\";\n      } else {\n        result += superscripts[str_power[i]];\n      }\n    }\n    return result;\n  }\n\n  function init(plot) {\n    plot.hooks.processOptions.push(function (plot) {\n      $.each(plot.getAxes(), function (axisName, axis) {\n\n        var opts = axis.options;\n\n        if (opts.mode === \"log\") {\n\n          axis.tickGenerator = function (axis) {\n\n            var ticks = [],\n                end = ceilAsLog10(axis.max),\n                start = floorAsLog10(axis.min),\n                tick = Number.NaN,\n                i = 0;\n\n            if (axis.min === null || axis.min <= 0) {\n              // Bad minimum, make ticks from 1 (10**0) to max\n              start = 0;\n              axis.min = 0.6;\n            }\n\n            if (end <= start) {\n              // Start less than end?!\n              ticks = [1e-6, 1e-5, 1e-4, 1e-3, 1e-2, 1e-1, 1e0, 1e1, 1e2, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9];\n            } else if (log10(axis.max) - log10(axis.datamin) < 1) {\n              // Default flot generator incase no powers of 10\n              // are between start and end\n              var prev;\n              start = floorInBase(axis.min, axis.tickSize);\n              do {\n                prev = tick;\n                tick = start + i * axis.tickSize;\n                ticks.push(tick);\n                ++i;\n              } while (tick < axis.max && tick !== prev);\n            } else {\n              // Make ticks at each power of ten\n              for (; i <= end - start; i++) {\n                tick = Math.pow(10, start + i);\n                ticks.push(tick);\n              }\n\n              var length = ticks.length;\n\n              // If not to many ticks also put a tick between\n              // the powers of ten\n              if (end - start < 6) {\n                for (var j = 1; j < length * 2 - 1; j += 2) {\n                  tick = ticks[j - 1] * 5;\n                  ticks.splice(j, 0, tick);\n                }\n              }\n            }\n            return ticks;\n          };\n\n          axis.tickFormatter = function (value, axis) {\n            var formatted;\n            if (log10(axis.max) - log10(axis.datamin) < 1) {\n              // Default flot formatter\n              var factor = axis.tickDecimals ? Math.pow(10, axis.tickDecimals) : 1;\n              formatted = \"\" + Math.round(value * factor) / factor;\n              if (axis.tickDecimals !== null) {\n                var decimal = formatted.indexOf(\".\");\n                var precision = decimal === -1 ? 0 : formatted.length - decimal - 1;\n                if (precision < axis.tickDecimals) {\n                  return (precision ? formatted : formatted + \".\") + (\"\" + factor).substr(1, axis.tickDecimals - precision);\n                }\n              }\n            } else {\n              var multiplier = \"\",\n                  exponential = parseFloat(value).toExponential(0),\n                  power = getUnicodePower(exponential.slice(2));\n              if (exponential[0] !== \"1\") {\n                multiplier = exponential[0] + \"x\";\n              }\n              formatted = multiplier + \"10\" + power;\n            }\n            return formatted;\n          };\n        }\n      });\n    });\n  }\n\n  $.plot.plugins.push({\n    init: init,\n    name: \"log\",\n    version: \"0.9\"\n  });\n})(jQuery);",null]}