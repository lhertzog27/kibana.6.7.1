{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/ui/public/render_directive/render_directive.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/render_directive/render_directive.js","mtime":1567631711751},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nvar _lodash = require('lodash');\n\nvar _modules = require('../modules');\n\nvar _apply_scope_bindings = require('./apply_scope_bindings');\n\n/**\n * The <render-directive> directive is useful for programmatically modifying or\n * extending a view. It allows defining the majority of the directives behavior\n * using a \"definition\" object, which the implementer can obtain from plugins (for instance).\n *\n * The definition object supports the parts of a directive definition that are\n * easy enough to implement without having to hack angular, and does it's best to\n * make sure standard directive life-cycle timing is respected.\n *\n * @param [Object] definition - the external configuration for this directive to assume\n * @param [Function] definition.controller - a constructor used to create the controller for this directive\n * @param [String] definition.controllerAs - a name where the controller should be stored on scope\n * @param [Object] definition.scope - an object defining the binding properties for values read from\n *                                  attributes and bound to $scope. The keys of this object are the\n *                                  local names of $scope properties, and the values are a combination\n *                                  of the binding style (=, @, or &) and the external attribute name.\n *                                  See [the Angular docs]\n *                                  (https://code.angularjs.org/1.4.9/docs/api/ng/service/$compile#-scope-)\n *                                  for more info\n * @param [Object|Function] definition.link - either a post link function or an object with pre and/or\n *                                          post link functions.\n */\n_modules.uiModules.get('kibana').directive('renderDirective', function (Private) {\n  var applyScopeBindings = Private(_apply_scope_bindings.ApplyScopeBindingsProvider);\n\n  return {\n    restrict: 'E',\n    scope: {\n      'definition': '='\n    },\n    template: function template($el) {\n      return $el.html();\n    },\n    controller: function controller($scope, $element, $attrs, $transclude, $injector) {\n      if (!$scope.definition) throw new Error('render-directive must have a definition attribute');\n\n      var _$scope$definition = $scope.definition,\n          controller = _$scope$definition.controller,\n          controllerAs = _$scope$definition.controllerAs,\n          scope = _$scope$definition.scope;\n\n\n      applyScopeBindings(scope, $scope, $attrs);\n\n      if (controller) {\n        if (controllerAs) {\n          $scope[controllerAs] = this;\n        }\n\n        var locals = { $scope: $scope, $element: $element, $attrs: $attrs, $transclude: $transclude };\n        var controllerInstance = $injector.invoke(controller, this, locals) || this;\n\n        if (controllerAs) {\n          $scope[controllerAs] = controllerInstance;\n        }\n      }\n    },\n    link: {\n      pre: function pre($scope, $el, $attrs, controller) {\n        var link = $scope.definition.link;\n\n        var preLink = (0, _lodash.isPlainObject)(link) ? link.pre : null;\n        if (preLink) preLink($scope, $el, $attrs, controller);\n      },\n      post: function post($scope, $el, $attrs, controller) {\n        var link = $scope.definition.link;\n\n        var postLink = (0, _lodash.isPlainObject)(link) ? link.post : link;\n        if (postLink) postLink($scope, $el, $attrs, controller);\n      }\n    }\n  };\n}); /*\n     * Licensed to Elasticsearch B.V. under one or more contributor\n     * license agreements. See the NOTICE file distributed with\n     * this work for additional information regarding copyright\n     * ownership. Elasticsearch B.V. licenses this file to you under\n     * the Apache License, Version 2.0 (the \"License\"); you may\n     * not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *    http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing,\n     * software distributed under the License is distributed on an\n     * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n     * KIND, either express or implied.  See the License for the\n     * specific language governing permissions and limitations\n     * under the License.\n     */",null]}