{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/ui/public/agg_types/metrics/metric_agg_type.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/agg_types/metrics/metric_agg_type.js","mtime":1567631711700},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MetricAggType = undefined;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _agg_type = require('../agg_type');\n\nvar _field_formats = require('../../registry/field_formats');\n\nvar _legacy_class = require('../../utils/legacy_class');\n\nvar _i18n = require('@kbn/i18n');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _legacy_class.createLegacyClass)(MetricAggType).inherits(_agg_type.AggType); /*\n                                                                                  * Licensed to Elasticsearch B.V. under one or more contributor\n                                                                                  * license agreements. See the NOTICE file distributed with\n                                                                                  * this work for additional information regarding copyright\n                                                                                  * ownership. Elasticsearch B.V. licenses this file to you under\n                                                                                  * the Apache License, Version 2.0 (the \"License\"); you may\n                                                                                  * not use this file except in compliance with the License.\n                                                                                  * You may obtain a copy of the License at\n                                                                                  *\n                                                                                  *    http://www.apache.org/licenses/LICENSE-2.0\n                                                                                  *\n                                                                                  * Unless required by applicable law or agreed to in writing,\n                                                                                  * software distributed under the License is distributed on an\n                                                                                  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n                                                                                  * KIND, either express or implied.  See the License for the\n                                                                                  * specific language governing permissions and limitations\n                                                                                  * under the License.\n                                                                                  */\n\nfunction MetricAggType(config) {\n  MetricAggType.Super.call(this, config);\n\n  // allow overriding any value on the prototype\n  _lodash2.default.forOwn(config, function (val, key) {\n    if (_lodash2.default.has(MetricAggType.prototype, key)) {\n      this[key] = val;\n    }\n  }, this);\n}\n\nMetricAggType.prototype.subtype = _i18n.i18n.translate('common.ui.aggTypes.metrics.metricAggregationsSubtypeTitle', {\n  defaultMessage: 'Metric Aggregations'\n});\n/**\n * Read the values for this metric from the\n * @param  {[type]} bucket [description]\n * @return {*}        [description]\n */\nMetricAggType.prototype.getValue = function (agg, bucket) {\n  // Metric types where an empty set equals `zero`\n  var isSettableToZero = ['cardinality', 'sum'].indexOf(agg.__type.name) !== -1;\n\n  // Return proper values when no buckets are present\n  // `Count` handles empty sets properly\n  if (!bucket[agg.id] && isSettableToZero) return 0;\n\n  return bucket[agg.id] && bucket[agg.id].value;\n};\n\n/**\n * Pick a format for the values produced by this agg type,\n * overridden by several metrics that always output a simple\n * number\n *\n * @param  {agg} agg - the agg to pick a format for\n * @return {FieldFormat}\n */\nMetricAggType.prototype.getFormat = function (agg) {\n  var field = agg.getField();\n  return field ? field.format : _field_formats.fieldFormats.getDefaultInstance('number');\n};\n\n/**\n * Determines if this metric can be scaled\n */\nMetricAggType.prototype.isScalable = function () {\n  return false;\n};\n\nexports.MetricAggType = MetricAggType;",null]}