{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/legacy/core_plugins/kibana/common/field_formats/types/static_lookup.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/legacy/core_plugins/kibana/common/field_formats/types/static_lookup.js","mtime":1567631691160},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nexports.createStaticLookupFormat = createStaticLookupFormat;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nfunction convertLookupEntriesToMap(lookupEntries) {\n  return lookupEntries.reduce(function (lookupMap, lookupEntry) {\n    lookupMap[lookupEntry.key] = lookupEntry.value;\n    return lookupMap;\n  }, {});\n}\n\nfunction createStaticLookupFormat(FieldFormat) {\n  var _class, _temp;\n\n  return _temp = _class = function (_FieldFormat) {\n    _inherits(StaticLookupFormat, _FieldFormat);\n\n    function StaticLookupFormat() {\n      _classCallCheck(this, StaticLookupFormat);\n\n      return _possibleConstructorReturn(this, (StaticLookupFormat.__proto__ || Object.getPrototypeOf(StaticLookupFormat)).apply(this, arguments));\n    }\n\n    _createClass(StaticLookupFormat, [{\n      key: 'getParamDefaults',\n      value: function getParamDefaults() {\n        return {\n          lookupEntries: [{}],\n          unknownKeyValue: null\n        };\n      }\n    }, {\n      key: '_convert',\n      value: function _convert(val) {\n        var lookupEntries = this.param('lookupEntries');\n        var unknownKeyValue = this.param('unknownKeyValue');\n\n        var lookupMap = convertLookupEntriesToMap(lookupEntries);\n        return lookupMap[val] || unknownKeyValue || val;\n      }\n    }]);\n\n    return StaticLookupFormat;\n  }(FieldFormat), _class.id = 'static_lookup', _class.title = 'Static Lookup', _class.fieldType = ['string'], _temp;\n}",null]}