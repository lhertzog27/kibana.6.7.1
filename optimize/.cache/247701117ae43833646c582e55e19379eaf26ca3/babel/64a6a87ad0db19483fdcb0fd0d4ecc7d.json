{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/packages/kbn-es-query/target/kuery/functions/range.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/packages/kbn-es-query/target/kuery/functions/range.js","mtime":1567666388171},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.buildNodeParams = buildNodeParams;\nexports.toElasticsearchQuery = toElasticsearchQuery;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _node_types = require('../node_types');\n\nvar _ast = require('../ast');\n\nvar ast = _interopRequireWildcard(_ast);\n\nvar _filters = require('../../filters');\n\nvar _get_fields = require('./utils/get_fields');\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }newObj.default = obj;return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : { default: obj };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });\n  } else {\n    obj[key] = value;\n  }return obj;\n}\n\nfunction _toArray(arr) {\n  return Array.isArray(arr) ? arr : Array.from(arr);\n}\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }return arr2;\n  } else {\n    return Array.from(arr);\n  }\n} /*\n   * Licensed to Elasticsearch B.V. under one or more contributor\n   * license agreements. See the NOTICE file distributed with\n   * this work for additional information regarding copyright\n   * ownership. Elasticsearch B.V. licenses this file to you under\n   * the Apache License, Version 2.0 (the \"License\"); you may\n   * not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *    http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing,\n   * software distributed under the License is distributed on an\n   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n   * KIND, either express or implied.  See the License for the\n   * specific language governing permissions and limitations\n   * under the License.\n   */\n\nfunction buildNodeParams(fieldName, params) {\n  params = _lodash2.default.pick(params, 'gt', 'lt', 'gte', 'lte', 'format');\n  var fieldNameArg = typeof fieldName === 'string' ? ast.fromLiteralExpression(fieldName) : _node_types.nodeTypes.literal.buildNode(fieldName);\n  var args = _lodash2.default.map(params, function (value, key) {\n    return _node_types.nodeTypes.namedArg.buildNode(key, value);\n  });\n\n  return {\n    arguments: [fieldNameArg].concat(_toConsumableArray(args))\n  };\n}\n\nfunction toElasticsearchQuery(node, indexPattern) {\n  var _node$arguments = _toArray(node.arguments),\n      fieldNameArg = _node$arguments[0],\n      args = _node$arguments.slice(1);\n\n  var fields = indexPattern ? (0, _get_fields.getFields)(fieldNameArg, indexPattern) : [];\n  var namedArgs = extractArguments(args);\n  var queryParams = _lodash2.default.mapValues(namedArgs, ast.toElasticsearchQuery);\n\n  // If no fields are found in the index pattern we send through the given field name as-is. We do this to preserve\n  // the behaviour of lucene on dashboards where there are panels based on different index patterns that have different\n  // fields. If a user queries on a field that exists in one pattern but not the other, the index pattern without the\n  // field should return no results. It's debatable whether this is desirable, but it's been that way forever, so we'll\n  // keep things familiar for now.\n  if (fields && fields.length === 0) {\n    fields.push({\n      name: ast.toElasticsearchQuery(fieldNameArg),\n      scripted: false\n    });\n  }\n\n  var queries = fields.map(function (field) {\n    if (field.scripted) {\n      return {\n        script: (0, _filters.getRangeScript)(field, queryParams)\n      };\n    }\n\n    return {\n      range: _defineProperty({}, field.name, queryParams)\n    };\n  });\n\n  return {\n    bool: {\n      should: queries,\n      minimum_should_match: 1\n    }\n  };\n}\n\nfunction extractArguments(args) {\n  if (args.gt && args.gte || args.lt && args.lte) {\n    throw new Error('range ends cannot be both inclusive and exclusive');\n  }\n\n  var unnamedArgOrder = ['gte', 'lte', 'format'];\n\n  return args.reduce(function (acc, arg, index) {\n    if (arg.type === 'namedArg') {\n      acc[arg.name] = arg.value;\n    } else {\n      acc[unnamedArgOrder[index]] = arg;\n    }\n\n    return acc;\n  }, {});\n}",null]}