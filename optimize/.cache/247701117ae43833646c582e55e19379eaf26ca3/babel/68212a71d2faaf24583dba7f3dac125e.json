{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/ui/public/paginated_table/paginated_table.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/paginated_table/paginated_table.js","mtime":1567631711747},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _agg_config_result = require('../vis/agg_config_result');\n\nvar _agg_config_result2 = _interopRequireDefault(_agg_config_result);\n\nvar _modules = require('../modules');\n\nvar _paginated_table = require('./paginated_table.html');\n\nvar _paginated_table2 = _interopRequireDefault(_paginated_table);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n_modules.uiModules.get('kibana').directive('paginatedTable', function ($filter) {\n  var orderBy = $filter('orderBy');\n\n  return {\n    restrict: 'E',\n    template: _paginated_table2.default,\n    transclude: true,\n    scope: {\n      rows: '=',\n      columns: '=',\n      linkToTop: '=',\n      perPage: '=?',\n      showBlankRows: '=?',\n      sortHandler: '=?',\n      sort: '=?',\n      showSelector: '=?',\n      showTotal: '=',\n      totalFunc: '='\n    },\n    controllerAs: 'paginatedTable',\n    controller: function controller($scope) {\n      var self = this;\n      self.sort = {\n        columnIndex: null,\n        direction: null\n      };\n\n      self.sortColumn = function (colIndex) {\n        var sortDirection = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'asc';\n\n        var col = $scope.columns[colIndex];\n\n        if (!col) return;\n        if (col.sortable === false) return;\n\n        if (self.sort.columnIndex === colIndex) {\n          var directions = {\n            null: 'asc',\n            'asc': 'desc',\n            'desc': null\n          };\n          sortDirection = directions[self.sort.direction];\n        }\n\n        self.sort.columnIndex = colIndex;\n        self.sort.direction = sortDirection;\n        if ($scope.sort) {\n          _lodash2.default.assign($scope.sort, self.sort);\n        }\n      };\n\n      self.rowsToShow = function (numRowsPerPage, actualNumRowsOnThisPage) {\n        if ($scope.showBlankRows === false) {\n          return actualNumRowsOnThisPage;\n        } else {\n          return numRowsPerPage;\n        }\n      };\n\n      function valueGetter(row) {\n        var value = row[self.sort.columnIndex];\n        if (value && value.value != null) value = value.value;\n        if (typeof value === 'boolean') value = value ? 0 : 1;\n        if (value instanceof _agg_config_result2.default && value.valueOf() === null) value = false;\n        return value;\n      }\n\n      // Set the sort state if it is set\n      if ($scope.sort && $scope.sort.columnIndex !== null) {\n        self.sortColumn($scope.sort.columnIndex, $scope.sort.direction);\n      }\n      function resortRows() {\n        var newSort = $scope.sort;\n        if (newSort && !_lodash2.default.isEqual(newSort, self.sort)) {\n          self.sortColumn(newSort.columnIndex, newSort.direction);\n        }\n\n        if (!$scope.rows || !$scope.columns) {\n          $scope.sortedRows = false;\n          return;\n        }\n\n        var sort = self.sort;\n        if (sort.direction == null) {\n          $scope.sortedRows = $scope.rows.slice(0);\n        } else {\n          $scope.sortedRows = orderBy($scope.rows, valueGetter, sort.direction === 'desc');\n        }\n      }\n\n      // update the sortedRows result\n      $scope.$watchMulti(['rows', 'columns', '[]sort', '[]paginatedTable.sort'], resortRows);\n    }\n  };\n});",null]}