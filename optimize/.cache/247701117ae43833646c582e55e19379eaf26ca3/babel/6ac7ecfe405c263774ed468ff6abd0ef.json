{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/ui/public/chrome/api/template.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/chrome/api/template.js","mtime":1567631711709},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function (chrome, internals) {\n\n  /**\n   * ui/chrome Template API\n   *\n   *   Root Template\n   *     The root template is rendered within the primary chrome ui and should\n   *     be used when building an app that is more of a page, or to override the\n   *     placement of ng-view. When including a root template, the mark-up will\n   *     look something like this:\n   *\n   *     body\n   *       notifs\n   *       div.content\n   *         nav\n   *         config\n   *         div.application\n   *           <-- your template here -->\n   *\n   *   Root Controller\n   *     To attach a controller to the root of ui/chrome's content area, outside of\n   *     where it attaches the ng-view directive (assuming no rootTemplate is used)\n   *     which will allow cause the controller to persist across views or make for\n   *     a simple place to define some quick global functionality for a very simple\n   *     app (like the status page).\n   */\n\n  /**\n   * @param {string} template\n   * @return {chrome}\n   */\n  chrome.setRootTemplate = function (template) {\n    internals.rootTemplate = template;\n    return chrome;\n  };\n\n  /**\n   * @param {string} as - the name that the controller should bind to\n   * @param {Function} controller - the controller initializer function\n   * @return {chrome}\n   */\n  chrome.setRootController = function (as, controllerName) {\n    if (controllerName === undefined) {\n      controllerName = as;\n      as = null;\n    }\n\n    if (typeof controllerName === 'function') {\n      chrome.$$rootControllerConstruct = controllerName;\n      controllerName = 'chrome.$$rootControllerConstruct';\n    }\n\n    internals.rootController = controllerName + (as ? ' as ' + as : '');\n    return chrome;\n  };\n};\n\nmodule.exports = exports['default']; /*\n                                      * Licensed to Elasticsearch B.V. under one or more contributor\n                                      * license agreements. See the NOTICE file distributed with\n                                      * this work for additional information regarding copyright\n                                      * ownership. Elasticsearch B.V. licenses this file to you under\n                                      * the Apache License, Version 2.0 (the \"License\"); you may\n                                      * not use this file except in compliance with the License.\n                                      * You may obtain a copy of the License at\n                                      *\n                                      *    http://www.apache.org/licenses/LICENSE-2.0\n                                      *\n                                      * Unless required by applicable law or agreed to in writing,\n                                      * software distributed under the License is distributed on an\n                                      * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n                                      * KIND, either express or implied.  See the License for the\n                                      * specific language governing permissions and limitations\n                                      * under the License.\n                                      */",null]}