{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/packages/elastic-datemath/target/index.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/packages/elastic-datemath/target/index.js","mtime":1567666383203},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _moment = require('moment');\n\nvar _moment2 = _interopRequireDefault(_moment);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : { default: obj };\n}\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }return arr2;\n  } else {\n    return Array.from(arr);\n  }\n} /*\n   * Licensed to Elasticsearch B.V. under one or more contributor\n   * license agreements. See the NOTICE file distributed with\n   * this work for additional information regarding copyright\n   * ownership. Elasticsearch B.V. licenses this file to you under\n   * the Apache License, Version 2.0 (the \"License\"); you may\n   * not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *    http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing,\n   * software distributed under the License is distributed on an\n   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n   * KIND, either express or implied.  See the License for the\n   * specific language governing permissions and limitations\n   * under the License.\n   */\n\nvar unitsMap = {\n  ms: { weight: 1, type: 'fixed', base: 1 },\n  s: { weight: 2, type: 'fixed', base: 1000 },\n  m: { weight: 3, type: 'mixed', base: 1000 * 60 },\n  h: { weight: 4, type: 'mixed', base: 1000 * 60 * 60 },\n  d: { weight: 5, type: 'mixed', base: 1000 * 60 * 60 * 24 },\n  w: { weight: 6, type: 'calendar', base: NaN },\n  M: { weight: 7, type: 'calendar', base: NaN },\n  // q: { weight: 8, type: 'calendar' }, // TODO: moment duration does not support quarter\n  y: { weight: 9, type: 'calendar', base: NaN }\n};\nvar units = Object.keys(unitsMap).sort(function (a, b) {\n  return unitsMap[b].weight - unitsMap[a].weight;\n});\nvar unitsDesc = [].concat(_toConsumableArray(units));\nvar unitsAsc = [].concat(_toConsumableArray(units)).reverse();\n\nvar isDate = function isDate(d) {\n  return Object.prototype.toString.call(d) === '[object Date]';\n};\n\nvar isValidDate = function isValidDate(d) {\n  return isDate(d) && !isNaN(d.valueOf());\n};\n\n/*\n * This is a simplified version of elasticsearch's date parser.\n * If you pass in a momentjs instance as the third parameter the calculation\n * will be done using this (and its locale settings) instead of the one bundled\n * with this library.\n */\nfunction parse(text) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$roundUp = _ref.roundUp,\n      roundUp = _ref$roundUp === undefined ? false : _ref$roundUp,\n      _ref$momentInstance = _ref.momentInstance,\n      momentInstance = _ref$momentInstance === undefined ? _moment2.default : _ref$momentInstance,\n      forceNow = _ref.forceNow;\n\n  if (!text) return undefined;\n  if (momentInstance.isMoment(text)) return text;\n  if (isDate(text)) return momentInstance(text);\n  if (forceNow !== undefined && !isValidDate(forceNow)) {\n    throw new Error('forceNow must be a valid Date');\n  }\n\n  var time = void 0;\n  var mathString = '';\n  var index = void 0;\n  var parseString = void 0;\n\n  if (text.substring(0, 3) === 'now') {\n    time = momentInstance(forceNow);\n    mathString = text.substring('now'.length);\n  } else {\n    index = text.indexOf('||');\n    if (index === -1) {\n      parseString = text;\n      mathString = ''; // nothing else\n    } else {\n      parseString = text.substring(0, index);\n      mathString = text.substring(index + 2);\n    }\n    // We're going to just require ISO8601 timestamps, k?\n    time = momentInstance(parseString);\n  }\n\n  if (!mathString.length) {\n    return time;\n  }\n\n  return parseDateMath(mathString, time, roundUp);\n}\n\nfunction parseDateMath(mathString, time, roundUp) {\n  var dateTime = time;\n  var len = mathString.length;\n  var i = 0;\n\n  while (i < len) {\n    var c = mathString.charAt(i++);\n    var type = void 0;\n    var num = void 0;\n    var unit = void 0;\n\n    if (c === '/') {\n      type = 0;\n    } else if (c === '+') {\n      type = 1;\n    } else if (c === '-') {\n      type = 2;\n    } else {\n      return;\n    }\n\n    if (isNaN(mathString.charAt(i))) {\n      num = 1;\n    } else if (mathString.length === 2) {\n      num = mathString.charAt(i);\n    } else {\n      var numFrom = i;\n      while (!isNaN(mathString.charAt(i))) {\n        i++;\n        if (i >= len) return;\n      }\n      num = parseInt(mathString.substring(numFrom, i), 10);\n    }\n\n    if (type === 0) {\n      // rounding is only allowed on whole, single, units (eg M or 1M, not 0.5M or 2M)\n      if (num !== 1) {\n        return;\n      }\n    }\n\n    unit = mathString.charAt(i++);\n\n    // append additional characters in the unit\n    for (var j = i; j < len; j++) {\n      var unitChar = mathString.charAt(i);\n      if (/[a-z]/i.test(unitChar)) {\n        unit += unitChar;\n        i++;\n      } else {\n        break;\n      }\n    }\n\n    if (units.indexOf(unit) === -1) {\n      return;\n    } else {\n      if (type === 0) {\n        if (roundUp) dateTime.endOf(unit);else dateTime.startOf(unit);\n      } else if (type === 1) {\n        dateTime.add(num, unit);\n      } else if (type === 2) {\n        dateTime.subtract(num, unit);\n      }\n    }\n  }\n\n  return dateTime;\n}\n\nexports.default = {\n  parse: parse,\n  unitsMap: Object.freeze(unitsMap),\n  units: Object.freeze(units),\n  unitsAsc: Object.freeze(unitsAsc),\n  unitsDesc: Object.freeze(unitsDesc)\n};\nmodule.exports = exports['default'];",null]}