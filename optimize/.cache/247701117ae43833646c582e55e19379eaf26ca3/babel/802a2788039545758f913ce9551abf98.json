{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/ui/public/doc_table/components/table_row.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/doc_table/components/table_row.js","mtime":1567631711719},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _jquery = require('jquery');\n\nvar _jquery2 = _interopRequireDefault(_jquery);\n\nvar _risonNode = require('rison-node');\n\nvar _risonNode2 = _interopRequireDefault(_risonNode);\n\nrequire('../../doc_viewer');\n\nrequire('../../filters/trust_as_html');\n\nrequire('../../filters/short_dots');\n\nvar _no_white_space = require('../../../../legacy/core_plugins/kibana/common/utils/no_white_space');\n\nvar _open = require('./table_row/open.html');\n\nvar _open2 = _interopRequireDefault(_open);\n\nvar _details = require('./table_row/details.html');\n\nvar _details2 = _interopRequireDefault(_details);\n\nvar _modules = require('../../modules');\n\nvar _filter_bar = require('../../filter_bar');\n\nvar _render_complete = require('../../render_complete');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nvar _module = _modules.uiModules.get('app/discover');\n\n// guesstimate at the minimum number of chars wide cells in the table should be\nvar MIN_LINE_LENGTH = 20;\n\n/**\n * kbnTableRow directive\n *\n * Display a row in the table\n * ```\n * <tr ng-repeat=\"row in rows\" kbn-table-row=\"row\"></tr>\n * ```\n */\n_module.directive('kbnTableRow', function ($compile, $httpParamSerializer, kbnUrl, config) {\n  var cellTemplate = _lodash2.default.template((0, _no_white_space.noWhiteSpace)(require('ui/doc_table/components/table_row/cell.html')));\n  var truncateByHeightTemplate = _lodash2.default.template((0, _no_white_space.noWhiteSpace)(require('ui/partials/truncate_by_height.html')));\n\n  return {\n    restrict: 'A',\n    scope: {\n      columns: '=',\n      filter: '=',\n      filters: '=?',\n      indexPattern: '=',\n      row: '=kbnTableRow',\n      onAddColumn: '=?',\n      onRemoveColumn: '=?'\n    },\n    link: function link($scope, $el) {\n      $el.after('<tr data-test-subj=\"docTableDetailsRow\">');\n      $el.empty();\n\n      // when we compile the details, we use this $scope\n      var $detailsScope = void 0;\n\n      // when we compile the toggle button in the summary, we use this $scope\n      var $toggleScope = void 0;\n\n      // toggle display of the rows details, a full list of the fields from each row\n      $scope.toggleRow = function () {\n        var $detailsTr = $el.next();\n\n        $scope.open = !$scope.open;\n\n        ///\n        // add/remove $details children\n        ///\n\n        $detailsTr.toggle($scope.open);\n\n        if (!$scope.open) {\n          // close the child scope if it exists\n          $detailsScope.$destroy();\n          // no need to go any further\n          return;\n        } else {\n          $detailsScope = $scope.$new();\n        }\n\n        // empty the details and rebuild it\n        $detailsTr.html(_details2.default);\n\n        $detailsScope.row = $scope.row;\n\n        $compile($detailsTr)($detailsScope);\n      };\n\n      $scope.$watchMulti(['indexPattern.timeFieldName', 'row.highlight', '[]columns'], function () {\n        createSummaryRow($scope.row, $scope.row._id);\n      });\n\n      $scope.inlineFilter = function inlineFilter($event, type) {\n        var column = (0, _jquery2.default)($event.target).data().column;\n        var field = $scope.indexPattern.fields.byName[column];\n        $scope.filter(field, $scope.flattenedRow[column], type);\n      };\n\n      $scope.getContextAppHref = function () {\n        var path = kbnUrl.eval('#/context/{{ indexPattern }}/{{ anchorType }}/{{ anchorId }}', {\n          anchorId: $scope.row._id,\n          anchorType: $scope.row._type,\n          indexPattern: $scope.indexPattern.id\n        });\n        var hash = $httpParamSerializer({\n          _a: _risonNode2.default.encode({\n            columns: $scope.columns,\n            filters: ($scope.filters || []).map(_filter_bar.disableFilter)\n          })\n        });\n        return path + '?' + hash;\n      };\n\n      // create a tr element that lists the value for each *column*\n      function createSummaryRow(row) {\n        var indexPattern = $scope.indexPattern;\n        $scope.flattenedRow = indexPattern.flattenHit(row);\n\n        // We just create a string here because its faster.\n        var newHtmls = [_open2.default];\n\n        var mapping = indexPattern.fields.byName;\n        var hideTimeColumn = config.get('doc_table:hideTimeColumn');\n        if (indexPattern.timeFieldName && !hideTimeColumn) {\n          newHtmls.push(cellTemplate({\n            timefield: true,\n            formatted: _displayField(row, indexPattern.timeFieldName),\n            filterable: mapping[indexPattern.timeFieldName].filterable && _lodash2.default.isFunction($scope.filter),\n            column: indexPattern.timeFieldName\n          }));\n        }\n\n        $scope.columns.forEach(function (column) {\n          var isFilterable = $scope.flattenedRow[column] !== undefined && mapping[column] && mapping[column].filterable && _lodash2.default.isFunction($scope.filter);\n\n          newHtmls.push(cellTemplate({\n            timefield: false,\n            sourcefield: column === '_source',\n            formatted: _displayField(row, column, true),\n            filterable: isFilterable,\n            column: column\n          }));\n        });\n\n        var $cells = $el.children();\n        newHtmls.forEach(function (html, i) {\n          var $cell = $cells.eq(i);\n          if ($cell.data('discover:html') === html) return;\n\n          var reuse = _lodash2.default.find($cells.slice(i + 1), function (cell) {\n            return _jquery2.default.data(cell, 'discover:html') === html;\n          });\n\n          var $target = reuse ? (0, _jquery2.default)(reuse).detach() : (0, _jquery2.default)(html);\n          $target.data('discover:html', html);\n          var $before = $cells.eq(i - 1);\n          if ($before.length) {\n            $before.after($target);\n          } else {\n            $el.append($target);\n          }\n\n          // rebuild cells since we modified the children\n          $cells = $el.children();\n\n          if (!reuse) {\n            $toggleScope = $scope.$new();\n            $compile($target)($toggleScope);\n          }\n        });\n\n        if ($scope.open) {\n          $detailsScope.row = row;\n        }\n\n        // trim off cells that were not used rest of the cells\n        $cells.filter(':gt(' + (newHtmls.length - 1) + ')').remove();\n        (0, _render_complete.dispatchRenderComplete)($el[0]);\n      }\n\n      /**\n       * Fill an element with the value of a field\n       */\n      function _displayField(row, fieldName, truncate) {\n        var indexPattern = $scope.indexPattern;\n        var text = indexPattern.formatField(row, fieldName);\n\n        if (truncate && text.length > MIN_LINE_LENGTH) {\n          return truncateByHeightTemplate({\n            body: text\n          });\n        }\n\n        return text;\n      }\n    }\n  };\n});",null]}