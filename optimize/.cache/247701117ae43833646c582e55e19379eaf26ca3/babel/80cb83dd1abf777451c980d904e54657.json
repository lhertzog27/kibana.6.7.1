{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/ui/public/courier/fetch/fetch_soon.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/courier/fetch/fetch_soon.js","mtime":1567631711712},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FetchSoonProvider = FetchSoonProvider;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _search_request_queue = require('../search_request_queue');\n\nvar _fetch_now = require('./fetch_now');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * This is usually the right fetch provider to use, rather than FetchNowProvider, as this class introduces\n * a slight delay in the request process to allow multiple requests to queue up (e.g. when a dashboard\n * is loading).\n *\n * @param Private\n * @param Promise\n * @constructor\n */\nfunction FetchSoonProvider(Private, Promise) {\n  var _this = this;\n\n  var fetchNow = Private(_fetch_now.FetchNowProvider);\n\n  var debouncedFetchNow = _lodash2.default.debounce(function () {\n    fetchNow(_search_request_queue.searchRequestQueue.getPending());\n  }, {\n    wait: 10,\n    maxWait: 50\n  });\n\n  /**\n   * Fetch a list of requests\n   * @param {array} requests - the requests to fetch\n   * @async\n   */\n  this.fetchSearchRequests = function (requests) {\n    requests.forEach(function (req) {\n      return req._setFetchRequested();\n    });\n    debouncedFetchNow();\n    return Promise.all(requests.map(function (req) {\n      return req.getCompletePromise();\n    }));\n  };\n\n  /**\n   * Return a promise that resembles the success of the fetch completing so we can execute\n   * logic based on this state change. Individual errors are routed to their respective requests.\n   */\n  this.fetchQueued = function () {\n    return _this.fetchSearchRequests(_search_request_queue.searchRequestQueue.getStartable());\n  };\n} /*\n   * Licensed to Elasticsearch B.V. under one or more contributor\n   * license agreements. See the NOTICE file distributed with\n   * this work for additional information regarding copyright\n   * ownership. Elasticsearch B.V. licenses this file to you under\n   * the Apache License, Version 2.0 (the \"License\"); you may\n   * not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *    http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing,\n   * software distributed under the License is distributed on an\n   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n   * KIND, either express or implied.  See the License for the\n   * specific language governing permissions and limitations\n   * under the License.\n   */",null]}