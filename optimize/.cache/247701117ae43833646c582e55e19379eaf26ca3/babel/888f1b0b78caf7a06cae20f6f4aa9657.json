{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/utils/kbn_field_types.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/utils/kbn_field_types.js","mtime":1567631711788},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getKbnFieldType = getKbnFieldType;\nexports.castEsToKbnFieldTypeName = castEsToKbnFieldTypeName;\nexports.getKbnTypeNames = getKbnTypeNames;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nvar KbnFieldType = exports.KbnFieldType = function KbnFieldType() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  _classCallCheck(this, KbnFieldType);\n\n  var name = options.name,\n      _options$sortable = options.sortable,\n      sortable = _options$sortable === undefined ? false : _options$sortable,\n      _options$filterable = options.filterable,\n      filterable = _options$filterable === undefined ? false : _options$filterable,\n      _options$esTypes = options.esTypes,\n      esTypes = _options$esTypes === undefined ? [] : _options$esTypes;\n\n\n  Object.defineProperties(this, {\n    name: { value: name },\n    sortable: { value: sortable },\n    filterable: { value: filterable },\n    esTypes: { value: Object.freeze(esTypes.slice()) }\n  });\n};\n\nvar KBN_FIELD_TYPES = exports.KBN_FIELD_TYPES = [new KbnFieldType({\n  name: 'string',\n  sortable: true,\n  filterable: true,\n  esTypes: ['string', 'text', 'keyword', '_type', '_id']\n}), new KbnFieldType({\n  name: 'number',\n  sortable: true,\n  filterable: true,\n  esTypes: ['float', 'half_float', 'scaled_float', 'double', 'integer', 'long', 'short', 'byte', 'token_count']\n}), new KbnFieldType({\n  name: 'date',\n  sortable: true,\n  filterable: true,\n  esTypes: ['date']\n}), new KbnFieldType({\n  name: 'ip',\n  sortable: true,\n  filterable: true,\n  esTypes: ['ip']\n}), new KbnFieldType({\n  name: 'boolean',\n  sortable: true,\n  filterable: true,\n  esTypes: ['boolean']\n}), new KbnFieldType({\n  name: 'geo_point',\n  esTypes: ['geo_point']\n}), new KbnFieldType({\n  name: 'object',\n  esTypes: ['object']\n}), new KbnFieldType({\n  name: 'nested',\n  esTypes: ['nested']\n}), new KbnFieldType({\n  name: 'geo_shape',\n  esTypes: ['geo_shape']\n}), new KbnFieldType({\n  name: 'attachment',\n  esTypes: ['attachment']\n}), new KbnFieldType({\n  name: 'murmur3',\n  esTypes: ['murmur3']\n}), new KbnFieldType({\n  name: '_source',\n  esTypes: ['_source']\n}), new KbnFieldType({\n  name: 'unknown'\n}), new KbnFieldType({\n  name: 'conflict'\n})];\n\n/**\n *  Get a type object by name\n *  @param  {string} typeName\n *  @return {KbnFieldType}\n */\nfunction getKbnFieldType(typeName) {\n  return KBN_FIELD_TYPES.find(function (type) {\n    return type.name === typeName;\n  });\n}\n\n/**\n *  Get the KbnFieldType name for an esType string\n *  @param {string} esType\n *  @return {string}\n */\nfunction castEsToKbnFieldTypeName(esType) {\n  var type = KBN_FIELD_TYPES.find(function (type) {\n    return type.esTypes.includes(esType);\n  });\n  return type ? type.name : 'unknown';\n}\n\n/**\n *  Get the esTypes known by all kbnFieldTypes\n *  @return {Array<string>}\n */\nfunction getKbnTypeNames() {\n  return KBN_FIELD_TYPES.map(function (type) {\n    return type.name;\n  });\n}",null]}