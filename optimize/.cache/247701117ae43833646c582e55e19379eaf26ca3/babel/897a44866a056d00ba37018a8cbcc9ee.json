{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/legacy/core_plugins/console/public/src/sense_editor/mode/input.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/legacy/core_plugins/console/public/src/sense_editor/mode/input.js","mtime":1567631691127},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Mode = Mode;\n\nvar _brace = require('brace');\n\nvar _brace2 = _interopRequireDefault(_brace);\n\nvar _worker = require('./worker');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar oop = _brace2.default.acequire('ace/lib/oop'); /*\n                                                    * Licensed to Elasticsearch B.V. under one or more contributor\n                                                    * license agreements. See the NOTICE file distributed with\n                                                    * this work for additional information regarding copyright\n                                                    * ownership. Elasticsearch B.V. licenses this file to you under\n                                                    * the Apache License, Version 2.0 (the \"License\"); you may\n                                                    * not use this file except in compliance with the License.\n                                                    * You may obtain a copy of the License at\n                                                    *\n                                                    *    http://www.apache.org/licenses/LICENSE-2.0\n                                                    *\n                                                    * Unless required by applicable law or agreed to in writing,\n                                                    * software distributed under the License is distributed on an\n                                                    * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n                                                    * KIND, either express or implied.  See the License for the\n                                                    * specific language governing permissions and limitations\n                                                    * under the License.\n                                                    */\n\nvar TextMode = _brace2.default.acequire('ace/mode/text').Mode;\nvar ScriptMode = require('./script').ScriptMode;\nvar MatchingBraceOutdent = _brace2.default.acequire('ace/mode/matching_brace_outdent').MatchingBraceOutdent;\nvar CstyleBehaviour = _brace2.default.acequire('ace/mode/behaviour/cstyle').CstyleBehaviour;\nvar CStyleFoldMode = _brace2.default.acequire('ace/mode/folding/cstyle').FoldMode;\nvar WorkerClient = _brace2.default.acequire('ace/worker/worker_client').WorkerClient;\nvar AceTokenizer = _brace2.default.acequire('ace/tokenizer').Tokenizer;\n\nvar HighlightRules = require('./input_highlight_rules').InputHighlightRules;\nfunction Mode() {\n  this.$tokenizer = new AceTokenizer(new HighlightRules().getRules());\n  this.$outdent = new MatchingBraceOutdent();\n  this.$behaviour = new CstyleBehaviour();\n  this.foldingRules = new CStyleFoldMode();\n  this.createModeDelegates({\n    'script-': ScriptMode\n  });\n}\noop.inherits(Mode, TextMode);\n\n(function () {\n  this.getCompletions = function () {\n    // autocomplete is done by the autocomplete module.\n    return [];\n  };\n\n  this.getNextLineIndent = function (state, line, tab) {\n    var indent = this.$getIndent(line);\n\n    if (state !== 'string_literal') {\n      var match = line.match(/^.*[\\{\\(\\[]\\s*$/);\n      if (match) {\n        indent += tab;\n      }\n    }\n\n    return indent;\n  };\n\n  this.checkOutdent = function (state, line, input) {\n    return this.$outdent.checkOutdent(line, input);\n  };\n\n  this.autoOutdent = function (state, doc, row) {\n    this.$outdent.autoOutdent(doc, row);\n  };\n  this.createWorker = function (session) {\n    var worker = new WorkerClient(['ace', 'sense_editor'], _worker.workerModule, 'SenseWorker');\n    worker.attachToDocument(session.getDocument());\n    worker.on('error', function (e) {\n      session.setAnnotations([e.data]);\n    });\n\n    worker.on('ok', function (anno) {\n      session.setAnnotations(anno.data);\n    });\n\n    return worker;\n  };\n}).call(Mode.prototype);",null]}