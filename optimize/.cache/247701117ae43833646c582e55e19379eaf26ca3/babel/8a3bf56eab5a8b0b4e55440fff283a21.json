{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/ui/public/courier/fetch/call_client.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/courier/fetch/call_client.js","mtime":1567631711712},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CallClientProvider = CallClientProvider;\n\nvar _error_allow_explicit_index = require('../../error_allow_explicit_index');\n\nvar _search_strategy = require('../search_strategy');\n\nvar _is_request = require('./is_request');\n\nvar _merge_duplicate_requests = require('./merge_duplicate_requests');\n\nvar _req_status = require('./req_status');\n\nvar _serialize_fetch_params = require('./request/serialize_fetch_params');\n\nvar _i18n = require('@kbn/i18n');\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * Licensed to Elasticsearch B.V. under one or more contributor\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * license agreements. See the NOTICE file distributed with\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * this work for additional information regarding copyright\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * ownership. Elasticsearch B.V. licenses this file to you under\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * the Apache License, Version 2.0 (the \"License\"); you may\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * not use this file except in compliance with the License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * You may obtain a copy of the License at\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            *    http://www.apache.org/licenses/LICENSE-2.0\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * Unless required by applicable law or agreed to in writing,\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * software distributed under the License is distributed on an\nn                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * KIND, either express or implied.  See the License for the\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * specific language governing permissions and limitations\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * under the License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            */\n\nfunction CallClientProvider(Private, Promise, es, config) {\n  var errorAllowExplicitIndex = Private(_error_allow_explicit_index.ErrorAllowExplicitIndexProvider);\n  var isRequest = Private(_is_request.IsRequestProvider);\n  var mergeDuplicateRequests = Private(_merge_duplicate_requests.MergeDuplicatesRequestProvider);\n  var serializeFetchParams = Private(_serialize_fetch_params.SerializeFetchParamsProvider);\n\n  var ABORTED = _req_status.RequestStatus.ABORTED;\n  var DUPLICATE = _req_status.RequestStatus.DUPLICATE;\n\n  function callClient(searchRequests) {\n    var _this = this;\n\n    var maxConcurrentShardRequests = config.get('courier:maxConcurrentShardRequests');\n    var includeFrozen = config.get('search:includeFrozen');\n\n    // merging docs can change status to DUPLICATE, capture new statuses\n    var searchRequestsAndStatuses = mergeDuplicateRequests(searchRequests);\n\n    // get the actual list of requests that we will be fetching\n    var requestsToFetch = searchRequestsAndStatuses.filter(isRequest);\n    var requestsToFetchCount = requestsToFetch.length;\n\n    if (requestsToFetchCount === 0) {\n      return Promise.resolve([]);\n    }\n\n    // This is how we'll provide the consumer with search responses. Resolved by\n    // respondToSearchRequests.\n    var defer = Promise.defer();\n\n    var abortableSearches = [];\n    var areAllSearchRequestsAborted = false;\n\n    // When we traverse our search requests and send out searches, some of them may fail. We'll\n    // store those that don't fail here.\n    var activeSearchRequests = [];\n\n    // Respond to each searchRequest with the response or ABORTED.\n    var respondToSearchRequests = function respondToSearchRequests() {\n      var responsesInOriginalRequestOrder = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n      // We map over searchRequestsAndStatuses because if we were originally provided an ABORTED\n      // request then we'll return that value.\n      return Promise.map(searchRequestsAndStatuses, function (searchRequest, searchRequestIndex) {\n        if (searchRequest.aborted) {\n          return ABORTED;\n        }\n\n        var status = searchRequestsAndStatuses[searchRequestIndex];\n\n        if (status === ABORTED) {\n          return ABORTED;\n        }\n\n        if (status === DUPLICATE) {\n          return searchRequest._uniq.resp;\n        }\n\n        var activeSearchRequestIndex = activeSearchRequests.indexOf(searchRequest);\n        var isFailedSearchRequest = activeSearchRequestIndex === -1;\n\n        if (isFailedSearchRequest) {\n          return ABORTED;\n        }\n\n        return responsesInOriginalRequestOrder[searchRequestIndex];\n      }).then(function (res) {\n        return defer.resolve(res);\n      }, function (err) {\n        return defer.reject(err);\n      });\n    };\n\n    // handle a request being aborted while being fetched\n    var requestWasAborted = Promise.method(function (searchRequest, index) {\n      if (searchRequestsAndStatuses[index] === ABORTED) {\n        defer.reject(new Error(_i18n.i18n.translate('common.ui.courier.fetch.requestWasAbortedTwiceErrorMessage', {\n          defaultMessage: 'Request was aborted twice?'\n        })));\n      }\n\n      requestsToFetchCount--;\n\n      if (requestsToFetchCount !== 0) {\n        // We can't resolve early unless all searchRequests have been aborted.\n        return;\n      }\n\n      abortableSearches.forEach(function (_ref) {\n        var abort = _ref.abort;\n\n        abort();\n      });\n\n      areAllSearchRequestsAborted = true;\n\n      return respondToSearchRequests();\n    });\n\n    // attach abort handlers, close over request index\n    searchRequestsAndStatuses.forEach(function (searchRequest, index) {\n      if (!isRequest(searchRequest)) {\n        return;\n      }\n\n      searchRequest.whenAborted(function () {\n        requestWasAborted(searchRequest, index).catch(defer.reject);\n      });\n    });\n\n    var searchStrategiesWithRequests = (0, _search_strategy.assignSearchRequestsToSearchStrategies)(requestsToFetch);\n\n    // We're going to create a new async context here, so that the logic within it can execute\n    // asynchronously after we've returned a reference to defer.promise.\n    Promise.resolve().then(_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n      var _loop, i, segregatedResponses, responsesInOriginalRequestOrder;\n\n      return regeneratorRuntime.wrap(function _callee2$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _loop = /*#__PURE__*/regeneratorRuntime.mark(function _loop(i) {\n                var searchStrategyWithSearchRequests, searchStrategy, searchRequests, _ref5, searching, abort, failedSearchRequests;\n\n                return regeneratorRuntime.wrap(function _loop$(_context2) {\n                  while (1) {\n                    switch (_context2.prev = _context2.next) {\n                      case 0:\n                        searchStrategyWithSearchRequests = searchStrategiesWithRequests[i];\n                        searchStrategy = searchStrategyWithSearchRequests.searchStrategy, searchRequests = searchStrategyWithSearchRequests.searchRequests;\n                        _context2.next = 4;\n                        return searchStrategy.search({ searchRequests: searchRequests, es: es, Promise: Promise, serializeFetchParams: serializeFetchParams, includeFrozen: includeFrozen, maxConcurrentShardRequests: maxConcurrentShardRequests });\n\n                      case 4:\n                        _ref5 = _context2.sent;\n                        searching = _ref5.searching;\n                        abort = _ref5.abort;\n                        failedSearchRequests = _ref5.failedSearchRequests;\n\n\n                        // Collect searchRequests which have successfully been sent.\n                        searchRequests.forEach(function (searchRequest) {\n                          if (failedSearchRequests.includes(searchRequest)) {\n                            return;\n                          }\n\n                          activeSearchRequests.push(searchRequest);\n                        });\n\n                        abortableSearches.push({\n                          searching: searching,\n                          abort: abort,\n                          requestsCount: searchRequests.length\n                        });\n\n                      case 10:\n                      case 'end':\n                        return _context2.stop();\n                    }\n                  }\n                }, _loop, _this);\n              });\n              i = 0;\n\n            case 2:\n              if (!(i < searchStrategiesWithRequests.length)) {\n                _context3.next = 7;\n                break;\n              }\n\n              return _context3.delegateYield(_loop(i), 't0', 4);\n\n            case 4:\n              i++;\n              _context3.next = 2;\n              break;\n\n            case 7:\n              _context3.prev = 7;\n\n              if (!areAllSearchRequestsAborted) {\n                _context3.next = 10;\n                break;\n              }\n\n              return _context3.abrupt('return');\n\n            case 10:\n              _context3.next = 12;\n              return Promise.all(abortableSearches.map(function () {\n                var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_ref3) {\n                  var searching = _ref3.searching,\n                      requestsCount = _ref3.requestsCount;\n                  return regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          return _context.abrupt('return', searching.catch(function (e) {\n                            // Duplicate errors so that they correspond to the original requests.\n                            return new Array(requestsCount).fill({ error: e });\n                          }));\n\n                        case 1:\n                        case 'end':\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee, _this);\n                }));\n\n                return function (_x2) {\n                  return _ref4.apply(this, arguments);\n                };\n              }()));\n\n            case 12:\n              segregatedResponses = _context3.sent;\n\n\n              // Assigning searchRequests to strategies means that the responses come back in a different\n              // order than the original searchRequests. So we'll put them back in order so that we can\n              // use the order to associate each response with the original request.\n              responsesInOriginalRequestOrder = new Array(searchRequestsAndStatuses.length);\n\n              segregatedResponses.forEach(function (responses, strategyIndex) {\n                responses.forEach(function (response, responseIndex) {\n                  var searchRequest = searchStrategiesWithRequests[strategyIndex].searchRequests[responseIndex];\n                  var requestIndex = searchRequestsAndStatuses.indexOf(searchRequest);\n                  responsesInOriginalRequestOrder[requestIndex] = response;\n                });\n              });\n\n              _context3.next = 17;\n              return respondToSearchRequests(responsesInOriginalRequestOrder);\n\n            case 17:\n              _context3.next = 24;\n              break;\n\n            case 19:\n              _context3.prev = 19;\n              _context3.t1 = _context3['catch'](7);\n\n              if (!errorAllowExplicitIndex.test(_context3.t1)) {\n                _context3.next = 23;\n                break;\n              }\n\n              return _context3.abrupt('return', errorAllowExplicitIndex.takeover());\n\n            case 23:\n\n              defer.reject(_context3.t1);\n\n            case 24:\n            case 'end':\n              return _context3.stop();\n          }\n        }\n      }, _callee2, _this, [[7, 19]]);\n    })));\n\n    // Return the promise which acts as our vehicle for providing search responses to the consumer.\n    // However, if there are any errors, notify the searchRequests of them *instead* of bubbling\n    // them up to the consumer.\n    return defer.promise.catch(function (err) {\n      // By returning the return value of this catch() without rethrowing the error, we delegate\n      // error-handling to the searchRequest instead of the consumer.\n      searchRequests.forEach(function (searchRequest, index) {\n        if (searchRequestsAndStatuses[index] !== ABORTED) {\n          searchRequest.handleFailure(err);\n        }\n      });\n    });\n  }\n\n  return callClient;\n}",null]}