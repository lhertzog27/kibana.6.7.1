{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/ui/public/agg_types/metrics/top_hit.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/agg_types/metrics/top_hit.js","mtime":1567631711700},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.topHitMetricAgg = undefined;\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _metric_agg_type = require('./metric_agg_type');\n\nvar _top_sort = require('../controls/top_sort.html');\n\nvar _top_sort2 = _interopRequireDefault(_top_sort);\n\nvar _top_aggregate_and_size = require('../controls/top_aggregate_and_size.html');\n\nvar _top_aggregate_and_size2 = _interopRequireDefault(_top_aggregate_and_size);\n\nvar _filter = require('../param_types/filter');\n\nvar _i18n = require('@kbn/i18n');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; } /*\n                                                                                                                                                                                                                   * Licensed to Elasticsearch B.V. under one or more contributor\n                                                                                                                                                                                                                   * license agreements. See the NOTICE file distributed with\n                                                                                                                                                                                                                   * this work for additional information regarding copyright\n                                                                                                                                                                                                                   * ownership. Elasticsearch B.V. licenses this file to you under\n                                                                                                                                                                                                                   * the Apache License, Version 2.0 (the \"License\"); you may\n                                                                                                                                                                                                                   * not use this file except in compliance with the License.\n                                                                                                                                                                                                                   * You may obtain a copy of the License at\n                                                                                                                                                                                                                   *\n                                                                                                                                                                                                                   *    http://www.apache.org/licenses/LICENSE-2.0\n                                                                                                                                                                                                                   *\n                                                                                                                                                                                                                   * Unless required by applicable law or agreed to in writing,\n                                                                                                                                                                                                                   * software distributed under the License is distributed on an\n                                                                                                                                                                                                                   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n                                                                                                                                                                                                                   * KIND, either express or implied.  See the License for the\n                                                                                                                                                                                                                   * specific language governing permissions and limitations\n                                                                                                                                                                                                                   * under the License.\n                                                                                                                                                                                                                   */\n\nvar isNumber = function isNumber(type) {\n  return type === 'number';\n};\n\n_filter.aggTypeFieldFilters.addFilter(function (field, fieldParamType, aggConfig, vis) {\n  if (aggConfig.type.name !== 'top_hit' || vis.type.name === 'table' || vis.type.name === 'metric') {\n    return true;\n  }\n  return field.type === 'number';\n});\n\nvar topHitMetricAgg = exports.topHitMetricAgg = new _metric_agg_type.MetricAggType({\n  name: 'top_hits',\n  title: _i18n.i18n.translate('common.ui.aggTypes.metrics.topHitTitle', {\n    defaultMessage: 'Top Hit'\n  }),\n  makeLabel: function makeLabel(aggConfig) {\n    var lastPrefixLabel = _i18n.i18n.translate('common.ui.aggTypes.metrics.topHit.lastPrefixLabel', {\n      defaultMessage: 'Last'\n    });\n    var firstPrefixLabel = _i18n.i18n.translate('common.ui.aggTypes.metrics.topHit.firstPrefixLabel', {\n      defaultMessage: 'First'\n    });\n    var prefix = aggConfig.params.sortOrder.val === 'desc' ? lastPrefixLabel : firstPrefixLabel;\n    if (aggConfig.params.size !== 1) {\n      prefix += ' ' + aggConfig.params.size;\n    }\n    var field = aggConfig.params.field;\n    return prefix + ' ' + (field ? field.displayName : '');\n  },\n  params: [{\n    name: 'field',\n    type: 'field',\n    onlyAggregatable: false,\n    filterFieldTypes: '*',\n    write: function write(agg, output) {\n      var field = agg.params.field;\n      output.params = {};\n\n      if (field.scripted) {\n        output.params.script_fields = _defineProperty({}, field.name, {\n          script: {\n            source: field.script,\n            lang: field.lang\n          }\n        });\n      } else {\n        if (field.readFromDocValues) {\n          // always format date fields as date_time to avoid\n          // displaying unformatted dates like epoch_millis\n          // or other not-accepted momentjs formats\n          var format = field.type === 'date' ? 'date_time' : 'use_field_mapping';\n          output.params.docvalue_fields = [{ field: field.name, format: format }];\n        }\n        output.params._source = field.name === '_source' ? true : field.name;\n      }\n    }\n  }, {\n    name: 'aggregate',\n    type: 'optioned',\n    editor: _top_aggregate_and_size2.default,\n    options: [{\n      display: _i18n.i18n.translate('common.ui.aggTypes.metrics.topHit.minLabel', {\n        defaultMessage: 'Min'\n      }),\n      isCompatibleType: isNumber,\n      isCompatibleVis: _lodash2.default.constant(true),\n      disabled: true,\n      val: 'min'\n    }, {\n      display: _i18n.i18n.translate('common.ui.aggTypes.metrics.topHit.maxLabel', {\n        defaultMessage: 'Max'\n      }),\n      isCompatibleType: isNumber,\n      isCompatibleVis: _lodash2.default.constant(true),\n      disabled: true,\n      val: 'max'\n    }, {\n      display: _i18n.i18n.translate('common.ui.aggTypes.metrics.topHit.sumLabel', {\n        defaultMessage: 'Sum'\n      }),\n      isCompatibleType: isNumber,\n      isCompatibleVis: _lodash2.default.constant(true),\n      disabled: true,\n      val: 'sum'\n    }, {\n      display: _i18n.i18n.translate('common.ui.aggTypes.metrics.topHit.averageLabel', {\n        defaultMessage: 'Average'\n      }),\n      isCompatibleType: isNumber,\n      isCompatibleVis: _lodash2.default.constant(true),\n      disabled: true,\n      val: 'average'\n    }, {\n      display: _i18n.i18n.translate('common.ui.aggTypes.metrics.topHit.concatenateLabel', {\n        defaultMessage: 'Concatenate'\n      }),\n      isCompatibleType: _lodash2.default.constant(true),\n      isCompatibleVis: function isCompatibleVis(name) {\n        return name === 'metric' || name === 'table';\n      },\n      disabled: true,\n      val: 'concat'\n    }],\n    controller: function controller($scope) {\n      $scope.options = [];\n      $scope.$watchGroup(['vis.type.name', 'agg.params.field.type'], function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            visName = _ref2[0],\n            fieldType = _ref2[1];\n\n        if (fieldType && visName) {\n          $scope.options = _lodash2.default.filter($scope.aggParam.options, function (option) {\n            return option.isCompatibleVis(visName) && option.isCompatibleType(fieldType);\n          });\n          if ($scope.options.length === 1) {\n            $scope.agg.params.aggregate = $scope.options[0];\n          }\n        }\n      });\n    },\n    write: _lodash2.default.noop\n  }, {\n    name: 'size',\n    editor: null, // size setting is done together with the aggregation setting\n    default: 1\n  }, {\n    name: 'sortField',\n    type: 'field',\n    editor: null,\n    filterFieldTypes: ['number', 'date', 'ip', 'string'],\n    default: function _default(agg) {\n      return agg.getIndexPattern().timeFieldName;\n    },\n    write: _lodash2.default.noop // prevent default write, it is handled below\n  }, {\n    name: 'sortOrder',\n    type: 'optioned',\n    default: 'desc',\n    editor: _top_sort2.default,\n    options: [{\n      display: _i18n.i18n.translate('common.ui.aggTypes.metrics.topHit.descendingLabel', {\n        defaultMessage: 'Descending'\n      }),\n      val: 'desc'\n    }, {\n      display: _i18n.i18n.translate('common.ui.aggTypes.metrics.topHit.ascendingLabel', {\n        defaultMessage: 'Ascending'\n      }),\n      val: 'asc'\n    }],\n    write: function write(agg, output) {\n      var sortField = agg.params.sortField;\n      var sortOrder = agg.params.sortOrder;\n\n      if (sortField.scripted) {\n        output.params.sort = [{\n          _script: {\n            script: {\n              source: sortField.script,\n              lang: sortField.lang\n            },\n            type: sortField.type,\n            order: sortOrder.val\n          }\n        }];\n      } else {\n        output.params.sort = [_defineProperty({}, sortField.name, {\n          order: sortOrder.val\n        })];\n      }\n    }\n  }],\n  getValue: function getValue(agg, bucket) {\n    var hits = _lodash2.default.get(bucket, agg.id + '.hits.hits');\n    if (!hits || !hits.length) {\n      return null;\n    }\n    var path = agg.params.field.name;\n\n    var values = (0, _lodash2.default)(hits).map(function (hit) {\n      return path === '_source' ? hit._source : agg.getIndexPattern().flattenHit(hit, true)[path];\n    }).flatten().value();\n\n    if (values.length === 1) {\n      values = values[0];\n    }\n\n    if (Array.isArray(values)) {\n      if (!_lodash2.default.compact(values).length) {\n        return null;\n      }\n      switch (agg.params.aggregate.val) {\n        case 'max':\n          return _lodash2.default.max(values);\n        case 'min':\n          return _lodash2.default.min(values);\n        case 'sum':\n          return _lodash2.default.sum(values);\n        case 'average':\n          return _lodash2.default.sum(values) / values.length;\n      }\n    }\n    return values;\n  }\n});",null]}