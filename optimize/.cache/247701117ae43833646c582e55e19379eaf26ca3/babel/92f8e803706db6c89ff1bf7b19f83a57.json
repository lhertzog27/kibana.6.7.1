{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/ui/public/vis/vis_types/vislib_vis_legend.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/vis/vis_types/vislib_vis_legend.js","mtime":1567631711773},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CUSTOM_LEGEND_VIS_TYPES = undefined;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _vislib_vis_legend = require('./vislib_vis_legend.html');\n\nvar _vislib_vis_legend2 = _interopRequireDefault(_vislib_vis_legend);\n\nvar _data = require('../../vislib/lib/data');\n\nvar _modules = require('../../modules');\n\nvar _vis_filters = require('../vis_filters');\n\nvar _eui = require('@elastic/eui');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nvar CUSTOM_LEGEND_VIS_TYPES = exports.CUSTOM_LEGEND_VIS_TYPES = ['heatmap', 'gauge'];\n\n_modules.uiModules.get('kibana').directive('vislibLegend', function (Private, $timeout, i18n) {\n  var Data = Private(_data.VislibLibDataProvider);\n  var visFilters = Private(_vis_filters.VisFiltersProvider);\n\n  return {\n    restrict: 'E',\n    template: _vislib_vis_legend2.default,\n    link: function link($scope) {\n      $scope.legendId = (0, _eui.htmlIdGenerator)()('legend');\n      $scope.open = $scope.uiState.get('vis.legendOpen', true);\n\n      $scope.$watch('visData', function (data) {\n        if (!data) return;\n        $scope.data = data;\n      });\n\n      $scope.$watch('refreshLegend', function () {\n        refresh();\n      });\n\n      $scope.highlight = function (event) {\n        var el = event.currentTarget;\n        var handler = $scope.vis.vislibVis.handler;\n\n        //there is no guarantee that a Chart will set the highlight-function on its handler\n        if (!handler || typeof handler.highlight !== 'function') {\n          return;\n        }\n        handler.highlight.call(el, handler.el);\n      };\n\n      $scope.unhighlight = function (event) {\n        var el = event.currentTarget;\n        var handler = $scope.vis.vislibVis.handler;\n        //there is no guarantee that a Chart will set the unhighlight-function on its handler\n        if (!handler || typeof handler.unHighlight !== 'function') {\n          return;\n        }\n        handler.unHighlight.call(el, handler.el);\n      };\n\n      $scope.setColor = function (label, color) {\n        var colors = $scope.uiState.get('vis.colors') || {};\n        if (colors[label] === color) delete colors[label];else colors[label] = color;\n        $scope.uiState.setSilent('vis.colors', null);\n        $scope.uiState.set('vis.colors', colors);\n        $scope.uiState.emit('colorChanged');\n        refresh();\n      };\n\n      $scope.toggleLegend = function () {\n        var bwcAddLegend = $scope.vis.params.addLegend;\n        var bwcLegendStateDefault = bwcAddLegend == null ? true : bwcAddLegend;\n        $scope.open = !$scope.uiState.get('vis.legendOpen', bwcLegendStateDefault);\n        // open should be applied on template before we update uiState\n        $timeout(function () {\n          $scope.uiState.set('vis.legendOpen', $scope.open);\n        });\n      };\n\n      $scope.getToggleLegendClasses = function () {\n        switch ($scope.vis.params.legendPosition) {\n          case 'top':\n            return $scope.open ? 'fa-chevron-circle-up' : 'fa-chevron-circle-down';\n          case 'bottom':\n            return $scope.open ? 'fa-chevron-circle-down' : 'fa-chevron-circle-up';\n          case 'left':\n            return $scope.open ? 'fa-chevron-circle-left' : 'fa-chevron-circle-right';\n          case 'right':\n          default:\n            return $scope.open ? 'fa-chevron-circle-right' : 'fa-chevron-circle-left';\n        }\n      };\n\n      $scope.filter = function (legendData, negate) {\n        $scope.vis.API.events.filter({ datum: legendData, negate: negate, shallow: true });\n      };\n\n      $scope.canFilter = function (legendData) {\n        if (CUSTOM_LEGEND_VIS_TYPES.includes($scope.vis.vislibVis.visConfigArgs.type)) {\n          return false;\n        }\n        var filters = visFilters.filter({ datum: legendData, shallow: true }, { simulate: true });\n        return filters.length;\n      };\n\n      /**\n      * Keydown listener for a legend entry.\n      * This will close the details panel of this legend entry when pressing Escape.\n      */\n      $scope.onLegendEntryKeydown = function (event) {\n        if (event.keyCode === _eui.keyCodes.ESCAPE) {\n          event.preventDefault();\n          event.stopPropagation();\n          $scope.shownDetails = undefined;\n        }\n      };\n\n      $scope.toggleDetails = function (label) {\n        $scope.shownDetails = $scope.shownDetails === label ? undefined : label;\n      };\n\n      $scope.areDetailsVisible = function (label) {\n        return $scope.shownDetails === label;\n      };\n\n      $scope.colors = ['#3F6833', '#967302', '#2F575E', '#99440A', '#58140C', '#052B51', '#511749', '#3F2B5B', //6\n      '#508642', '#CCA300', '#447EBC', '#C15C17', '#890F02', '#0A437C', '#6D1F62', '#584477', //2\n      '#629E51', '#E5AC0E', '#64B0C8', '#E0752D', '#BF1B00', '#0A50A1', '#962D82', '#614D93', //4\n      '#7EB26D', '#EAB839', '#6ED0E0', '#EF843C', '#E24D42', '#1F78C1', '#BA43A9', '#705DA0', // Normal\n      '#9AC48A', '#F2C96D', '#65C5DB', '#F9934E', '#EA6460', '#5195CE', '#D683CE', '#806EB7', //5\n      '#B7DBAB', '#F4D598', '#70DBED', '#F9BA8F', '#F29191', '#82B5D8', '#E5A8E2', '#AEA2E0', //3\n      '#E0F9D7', '#FCEACA', '#CFFAFF', '#F9E2D2', '#FCE2DE', '#BADFF4', '#F9D9F9', '#DEDAF7' //7\n      ];\n\n      function refresh() {\n        var vislibVis = $scope.vis.vislibVis;\n        if (!vislibVis || !vislibVis.visConfig) {\n          $scope.labels = [{ label: i18n('common.ui.vis.visTypes.legend.loadingLabel', { defaultMessage: 'loadingâ€¦' }) }];\n          return;\n        } // make sure vislib is defined at this point\n\n        if ($scope.uiState.get('vis.legendOpen') == null && $scope.vis.params.addLegend != null) {\n          $scope.open = $scope.vis.params.addLegend;\n        }\n\n        if (CUSTOM_LEGEND_VIS_TYPES.includes(vislibVis.visConfigArgs.type)) {\n          var labels = vislibVis.getLegendLabels();\n          if (labels) {\n            $scope.labels = _lodash2.default.map(labels, function (label) {\n              return { label: label };\n            });\n          }\n        } else {\n          $scope.labels = getLabels($scope.data, vislibVis.visConfigArgs.type);\n        }\n\n        if (vislibVis.visConfig) {\n          $scope.getColor = vislibVis.visConfig.data.getColorFunc();\n        }\n      }\n\n      // Most of these functions were moved directly from the old Legend class. Not a fan of this.\n      function getLabels(data, type) {\n        if (!data) return [];\n        data = data.columns || data.rows || [data];\n        if (type === 'pie') return Data.prototype.pieNames(data);\n        return getSeriesLabels(data);\n      }\n\n      function getSeriesLabels(data) {\n        var values = data.map(function (chart) {\n          return chart.series;\n        }).reduce(function (a, b) {\n          return a.concat(b);\n        }, []);\n        return _lodash2.default.compact(_lodash2.default.uniq(values, 'label'));\n      }\n    }\n  };\n});",null]}