{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/legacy/core_plugins/kibana/public/context/api/utils/sorting.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/legacy/core_plugins/kibana/public/context/api/utils/sorting.js","mtime":1567631711540},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/**\n * The list of field names that are allowed for sorting, but not included in\n * index pattern fields.\n *\n * @constant\n * @type {string[]}\n */\nvar META_FIELD_NAMES = ['_seq_no', '_doc', '_uid'];\n\n/**\n * Returns a field from the intersection of the set of sortable fields in the\n * given index pattern and a given set of candidate field names.\n *\n * @param {IndexPattern} indexPattern - The index pattern to search for\n *     sortable fields\n * @param {string[]} fields - The list of candidate field names\n *\n * @returns {string[]}\n */\nfunction getFirstSortableField(indexPattern, fieldNames) {\n  var sortableFields = fieldNames.filter(function (fieldName) {\n    return META_FIELD_NAMES.includes(fieldName) || (indexPattern.fields.byName[fieldName] || { sortable: false }).sortable;\n  });\n  return sortableFields[0];\n}\n\n/**\n * A sort order string.\n *\n * @typedef {('asc'|'desc')} SortDirection\n */\n\n/**\n * Return the reversed sort direction.\n *\n * @param {(SortDirection)} sortDirection\n *\n * @returns {(SortDirection)}\n */\nfunction reverseSortDirection(sortDirection) {\n  return sortDirection === 'asc' ? 'desc' : 'asc';\n}\n\nexports.getFirstSortableField = getFirstSortableField;\nexports.reverseSortDirection = reverseSortDirection;",null]}