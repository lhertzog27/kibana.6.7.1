{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/legacy/core_plugins/kbn_vislib_vis_types/public/controls/point_series/series.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/legacy/core_plugins/kbn_vislib_vis_types/public/controls/point_series/series.js","mtime":1567631711536},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _modules = require('ui/modules');\n\nvar _series = require('./series.html');\n\nvar _series2 = _interopRequireDefault(_series);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _module = _modules.uiModules.get('kibana'); /*\n                                                 * Licensed to Elasticsearch B.V. under one or more contributor\n                                                 * license agreements. See the NOTICE file distributed with\n                                                 * this work for additional information regarding copyright\n                                                 * ownership. Elasticsearch B.V. licenses this file to you under\n                                                 * the Apache License, Version 2.0 (the \"License\"); you may\n                                                 * not use this file except in compliance with the License.\n                                                 * You may obtain a copy of the License at\n                                                 *\n                                                 *    http://www.apache.org/licenses/LICENSE-2.0\n                                                 *\n                                                 * Unless required by applicable law or agreed to in writing,\n                                                 * software distributed under the License is distributed on an\n                                                 * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n                                                 * KIND, either express or implied.  See the License for the\n                                                 * specific language governing permissions and limitations\n                                                 * under the License.\n                                                 */\n\n_module.directive('vislibSeries', function () {\n  return {\n    restrict: 'E',\n    template: _series2.default,\n    replace: true,\n    link: function link($scope) {\n      function makeSerie(id, label) {\n        var last = $scope.series[$scope.series.length - 1];\n        return {\n          show: true,\n          mode: last ? last.mode : 'normal',\n          type: last ? last.type : 'line',\n          drawLinesBetweenPoints: last ? last.drawLinesBetweenPoints : true,\n          showCircles: last ? last.showCircles : true,\n          interpolate: last ? last.interpolate : 'linear',\n          lineWidth: last ? last.lineWidth : 2,\n          data: {\n            id: id,\n            label: label\n          },\n          valueAxis: last ? last.valueAxis : $scope.editorState.params.valueAxes[0].id\n        };\n      }\n\n      $scope.series = $scope.editorState.params.seriesParams;\n      $scope.$watch(function () {\n        return $scope.editorState.aggs.map(function (agg) {\n          return agg.makeLabel();\n        }).join();\n      }, function () {\n        var schemaTitle = $scope.vis.type.schemas.metrics[0].title;\n\n        var metrics = $scope.editorState.aggs.filter(function (agg) {\n          var isMetric = agg.type && agg.type.type === 'metrics';\n          return isMetric && agg.schema.title === schemaTitle;\n        });\n\n        // update labels for existing params or create new one\n        $scope.editorState.params.seriesParams = metrics.map(function (agg) {\n          var params = $scope.editorState.params.seriesParams.find(function (param) {\n            return param.data.id === agg.id;\n          });\n          if (params) {\n            params.data.label = agg.makeLabel();\n            return params;\n          } else {\n            var series = makeSerie(agg.id, agg.makeLabel());\n            return series;\n          }\n        });\n      });\n\n      $scope.$watch(function () {\n        return $scope.editorState.params.seriesParams.map(function (series) {\n          return series.type;\n        }).join();\n      }, function () {\n        var types = _lodash2.default.uniq(_lodash2.default.map($scope.editorState.params.seriesParams, 'type'));\n        $scope.vis.type.type = types.length === 1 ? types[0] : 'histogram';\n      });\n\n      $scope.$watch('editorState.params.valueAxes.length', function () {\n        $scope.editorState.params.seriesParams.forEach(function (series) {\n          if (!$scope.editorState.params.valueAxes.find(function (axis) {\n            return axis.id === series.valueAxis;\n          })) {\n            series.valueAxis = $scope.editorState.params.valueAxes[0].id;\n          }\n        });\n      });\n\n      $scope.changeValueAxis = function (index) {\n        var series = $scope.editorState.params.seriesParams[index];\n        if (series.valueAxis === 'new') {\n          var axis = $scope.addValueAxis();\n          series.valueAxis = axis.id;\n        }\n        $scope.updateAxisTitle();\n      };\n    }\n  };\n});",null]}