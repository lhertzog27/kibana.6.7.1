{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/ui/public/vis/map/service_settings.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/vis/map/service_settings.js","mtime":1567631711772},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\nicensed to Elasticsearch B.V. under one or more contributor\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * license agreements. See the NOTICE file distributed with\nthis work for additional information regarding copyright\nownership. Elasticsearch B.V. licenses this file to you under\nthe Apache License, Version 2.0 (the \"License\"); you may\nnot use this file except in compliance with the License.\nou may obtain a copy of the License at\nnhttp://www.apache.org/licenses/LICENSE-2.0\nnnless required by applicable law or agreed to in writing,\nsoftware distributed under the License is distributed on an\nneither express or implied.  See the License for the\nspecific language governing permissions and limitations\nunder the License.\nn\nvar _modules = require('../../modules');\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _markdownIt = require('markdown-it');\n\nvar _markdownIt2 = _interopRequireDefault(_markdownIt);\n\nvar _origin = require('../../../../legacy/core_plugins/tile_map/common/origin');\n\nvar _ems_client = require('../../../../legacy/core_plugins/tile_map/common/ems_client');\n\nvar _i18n = require('@kbn/i18n');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar markdownIt = new _markdownIt2.default({\n  html: false,\n  linkify: true\n});\n\nvar TMS_IN_YML_ID = 'TMS in config/kibana.yml';\n\n_modules.uiModules.get('kibana').service('serviceSettings', function ($http, $sanitize, mapConfig, tilemapsConfig, kbnVersion) {\n\n  var attributionFromConfig = $sanitize(markdownIt.render(tilemapsConfig.deprecated.config.options.attribution || ''));\n  var tmsOptionsFromConfig = _lodash2.default.assign({}, tilemapsConfig.deprecated.config.options, { attribution: attributionFromConfig });\n\n  var ServiceSettings = function () {\n    function ServiceSettings() {\n      _classCallCheck(this, ServiceSettings);\n\n      this._showZoomMessage = true;\n\n      this._emsClient = new _ems_client.EMSClientV66({\n        language: _i18n.i18n.getLocale(),\n        kbnVersion: kbnVersion,\n        manifestServiceUrl: mapConfig.manifestServiceUrl,\n        htmlSanitizer: $sanitize,\n        landingPageUrl: mapConfig.emsLandingPageUrl\n      });\n    }\n\n    _createClass(ServiceSettings, [{\n      key: 'shouldShowZoomMessage',\n      value: function shouldShowZoomMessage(_ref) {\n        var origin = _ref.origin;\n\n        return origin === _origin.ORIGIN.EMS && this._showZoomMessage;\n      }\n    }, {\n      key: 'disableZoomMessage',\n      value: function disableZoomMessage() {\n        this._showZoomMessage = false;\n      }\n    }, {\n      key: '__debugStubManifestCalls',\n      value: function __debugStubManifestCalls(manifestRetrieval) {\n        var _this = this;\n\n        var oldGetManifest = this._emsClient._getManifest;\n        this._emsClient._getManifest = manifestRetrieval;\n        return {\n          removeStub: function removeStub() {\n            delete _this._emsClient._getManifest;\n            //not strictly necessary since this is prototype method\n            if (_this._emsClient._getManifest !== oldGetManifest) {\n              _this._emsClient._getManifest = oldGetManifest;\n            }\n          }\n        };\n      }\n    }, {\n      key: 'getFileLayers',\n      value: function () {\n        var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n          var fileLayers;\n          return regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  if (mapConfig.includeElasticMapsService) {\n                    _context.next = 2;\n                    break;\n                  }\n\n                  return _context.abrupt('return', []);\n\n                case 2:\n                  _context.next = 4;\n                  return this._emsClient.getFileLayers();\n\n                case 4:\n                  fileLayers = _context.sent;\n                  return _context.abrupt('return', fileLayers.map(function (fileLayer) {\n\n                    //backfill to older settings\n                    var format = fileLayer.getDefaultFormatType();\n                    var meta = fileLayer.getDefaultFormatMeta();\n\n                    return {\n                      name: fileLayer.getDisplayName(),\n                      origin: fileLayer.getOrigin(),\n                      id: fileLayer.getId(),\n                      created_at: fileLayer.getCreatedAt(),\n                      attribution: fileLayer.getHTMLAttribution(),\n                      fields: fileLayer.getFieldsInLanguage(),\n                      format: format, //legacy: format and meta are split up\n                      meta: meta //legacy, format and meta are split up\n                    };\n                  }));\n\n                case 6:\n                case 'end':\n                  return _context.stop();\n              }\n            }\n          }, _callee, this);\n        }));\n\n        function getFileLayers() {\n          return _ref2.apply(this, arguments);\n        }\n\n        return getFileLayers;\n      }()\n\n      /**\n       * Returns all the services published by EMS (if configures)\n       * It also includes the service configured in tilemap (override)\n       */\n\n    }, {\n      key: 'getTMSServices',\n      value: function () {\n        var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n          var allServices, tmsService, servicesFromManifest, strippedServiceFromManifest;\n          return regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  allServices = [];\n\n                  if (tilemapsConfig.deprecated.isOverridden) {\n                    //use tilemap.* settings from yml\n                    tmsService = _lodash2.default.cloneDeep(tmsOptionsFromConfig);\n\n                    tmsService.id = TMS_IN_YML_ID;\n                    tmsService.origin = _origin.ORIGIN.KIBANA_YML;\n                    allServices.push(tmsService);\n                  }\n\n                  if (!mapConfig.includeElasticMapsService) {\n                    _context2.next = 8;\n                    break;\n                  }\n\n                  _context2.next = 5;\n                  return this._emsClient.getTMSServices();\n\n                case 5:\n                  servicesFromManifest = _context2.sent;\n                  strippedServiceFromManifest = servicesFromManifest.map(function (service) {\n                    //shim for compatibility\n                    var shim = {\n                      origin: service.getOrigin(),\n                      id: service.getId(),\n                      minZoom: service.getMinZoom(),\n                      maxZoom: service.getMaxZoom(),\n                      attribution: service.getHTMLAttribution()\n                    };\n                    return shim;\n                  });\n\n                  allServices = allServices.concat(strippedServiceFromManifest);\n\n                case 8:\n                  return _context2.abrupt('return', allServices);\n\n                case 9:\n                case 'end':\n                  return _context2.stop();\n              }\n            }\n          }, _callee2, this);\n        }));\n\n        function getTMSServices() {\n          return _ref3.apply(this, arguments);\n        }\n\n        return getTMSServices;\n      }()\n\n      /**\n       * Add optional query-parameters to all requests\n       *\n       * @param additionalQueryParams\n       */\n\n    }, {\n      key: 'addQueryParams',\n      value: function addQueryParams(additionalQueryParams) {\n        this._emsClient.addQueryParams(additionalQueryParams);\n      }\n    }, {\n      key: 'getEMSHotLink',\n      value: function () {\n        var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(fileLayerConfig) {\n          var fileLayers, layer;\n          return regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  _context3.next = 2;\n                  return this._emsClient.getFileLayers();\n\n                case 2:\n                  fileLayers = _context3.sent;\n                  layer = fileLayers.find(function (fileLayer) {\n                    var hasIdByName = fileLayer.hasId(fileLayerConfig.name); //legacy\n                    var hasIdById = fileLayer.hasId(fileLayerConfig.id);\n                    return hasIdByName || hasIdById;\n                  });\n                  return _context3.abrupt('return', layer ? layer.getEMSHotLink() : null);\n\n                case 5:\n                case 'end':\n                  return _context3.stop();\n              }\n            }\n          }, _callee3, this);\n        }));\n\n        function getEMSHotLink(_x) {\n          return _ref4.apply(this, arguments);\n        }\n\n        return getEMSHotLink;\n      }()\n    }, {\n      key: '_getUrlTemplateForEMSTMSLayer',\n      value: function () {\n        var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(tmsServiceConfig) {\n          var tmsServices, tmsService;\n          return regeneratorRuntime.wrap(function _callee4$(_context4) {\n            while (1) {\n              switch (_context4.prev = _context4.next) {\n                case 0:\n                  _context4.next = 2;\n                  return this._emsClient.getTMSServices();\n\n                case 2:\n                  tmsServices = _context4.sent;\n                  tmsService = tmsServices.find(function (service) {\n                    return service.getId() === tmsServiceConfig.id;\n                  });\n                  return _context4.abrupt('return', tmsService.getUrlTemplate());\n\n                case 5:\n                case 'end':\n                  return _context4.stop();\n              }\n            }\n          }, _callee4, this);\n        }));\n\n        function _getUrlTemplateForEMSTMSLayer(_x2) {\n          return _ref5.apply(this, arguments);\n        }\n\n        return _getUrlTemplateForEMSTMSLayer;\n      }()\n    }, {\n      key: 'getUrlTemplateForTMSLayer',\n      value: function () {\n        var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(tmsServiceConfig) {\n          return regeneratorRuntime.wrap(function _callee5$(_context5) {\n            while (1) {\n              switch (_context5.prev = _context5.next) {\n                case 0:\n                  if (!(tmsServiceConfig.origin === _origin.ORIGIN.EMS)) {\n                    _context5.next = 4;\n                    break;\n                  }\n\n                  return _context5.abrupt('return', this._getUrlTemplateForEMSTMSLayer(tmsServiceConfig));\n\n                case 4:\n                  if (!(tmsServiceConfig.origin === _origin.ORIGIN.KIBANA_YML)) {\n                    _context5.next = 8;\n                    break;\n                  }\n\n                  return _context5.abrupt('return', tilemapsConfig.deprecated.config.url);\n\n                case 8:\n                  if (!(tmsServiceConfig.id === TMS_IN_YML_ID)) {\n                    _context5.next = 12;\n                    break;\n                  }\n\n                  return _context5.abrupt('return', tilemapsConfig.deprecated.config.url);\n\n                case 12:\n                  return _context5.abrupt('return', this._getUrlTemplateForEMSTMSLayer(tmsServiceConfig));\n\n                case 13:\n                case 'end':\n                  return _context5.stop();\n              }\n            }\n          }, _callee5, this);\n        }));\n\n        function getUrlTemplateForTMSLayer(_x3) {\n          return _ref6.apply(this, arguments);\n        }\n\n        return getUrlTemplateForTMSLayer;\n      }()\n    }, {\n      key: '_getFileUrlFromEMS',\n      value: function () {\n        var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(fileLayerConfig) {\n          var fileLayers, layer;\n          return regeneratorRuntime.wrap(function _callee6$(_context6) {\n            while (1) {\n              switch (_context6.prev = _context6.next) {\n                case 0:\n                  _context6.next = 2;\n                  return this._emsClient.getFileLayers();\n\n                case 2:\n                  fileLayers = _context6.sent;\n                  layer = fileLayers.find(function (fileLayer) {\n                    var hasIdByName = fileLayer.hasId(fileLayerConfig.name); //legacy\n                    var hasIdById = fileLayer.hasId(fileLayerConfig.id);\n                    return hasIdByName || hasIdById;\n                  });\n\n                  if (!layer) {\n                    _context6.next = 8;\n                    break;\n                  }\n\n                  return _context6.abrupt('return', layer.getDefaultFormatUrl());\n\n                case 8:\n                  throw new Error('File  ' + fileLayerConfig.name + ' not recognized');\n\n                case 9:\n                case 'end':\n                  return _context6.stop();\n              }\n            }\n          }, _callee6, this);\n        }));\n\n        function _getFileUrlFromEMS(_x4) {\n          return _ref7.apply(this, arguments);\n        }\n\n        return _getFileUrlFromEMS;\n      }()\n    }, {\n      key: 'getUrlForRegionLayer',\n      value: function () {\n        var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(fileLayerConfig) {\n          var url;\n          return regeneratorRuntime.wrap(function _callee7$(_context7) {\n            while (1) {\n              switch (_context7.prev = _context7.next) {\n                case 0:\n                  url = void 0;\n\n                  if (fileLayerConfig.origin === _origin.ORIGIN.EMS) {\n                    url = this._getFileUrlFromEMS(fileLayerConfig);\n                  } else if (fileLayerConfig.layerId && fileLayerConfig.layerId.startsWith(_origin.ORIGIN.EMS + '.')) {\n                    //fallback for older saved objects\n                    url = this._getFileUrlFromEMS(fileLayerConfig);\n                  } else if (fileLayerConfig.layerId && fileLayerConfig.layerId.startsWith(_origin.ORIGIN.KIBANA_YML + '.')) {\n                    //fallback for older saved objects\n                    url = fileLayerConfig.url;\n                  } else {\n                    //generic fallback\n                    url = fileLayerConfig.url;\n                  }\n                  return _context7.abrupt('return', url);\n\n                case 3:\n                case 'end':\n                  return _context7.stop();\n              }\n            }\n          }, _callee7, this);\n        }));\n\n        function getUrlForRegionLayer(_x5) {\n          return _ref8.apply(this, arguments);\n        }\n\n        return getUrlForRegionLayer;\n      }()\n    }, {\n      key: 'getJsonForRegionLayer',\n      value: function () {\n        var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(fileLayerConfig) {\n          var url, json;\n          return regeneratorRuntime.wrap(function _callee8$(_context8) {\n            while (1) {\n              switch (_context8.prev = _context8.next) {\n                case 0:\n                  _context8.next = 2;\n                  return this.getUrlForRegionLayer(fileLayerConfig);\n\n                case 2:\n                  url = _context8.sent;\n                  _context8.next = 5;\n                  return $http({\n                    url: url,\n                    method: 'GET'\n                  });\n\n                case 5:\n                  json = _context8.sent;\n                  return _context8.abrupt('return', json.data);\n\n                case 7:\n                case 'end':\n                  return _context8.stop();\n              }\n            }\n          }, _callee8, this);\n        }));\n\n        function getJsonForRegionLayer(_x6) {\n          return _ref9.apply(this, arguments);\n        }\n\n        return getJsonForRegionLayer;\n      }()\n    }]);\n\n    return ServiceSettings;\n  }();\n\n  return new ServiceSettings();\n});",null]}