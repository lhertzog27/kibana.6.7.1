{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/legacy/core_plugins/metric_vis/public/metric_vis_controller.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/legacy/core_plugins/metric_vis/public/metric_vis_controller.js","mtime":1567631711607},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MetricVisComponent = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _heatmap_color = require('ui/vislib/components/color/heatmap_color');\n\nvar _eui = require('@elastic/eui');\n\nvar _metric_vis_value = require('./components/metric_vis_value');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Licensed to Elasticsearch B.V. under one or more contributor\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * license agreements. See the NOTICE file distributed with\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * this work for additional information regarding copyright\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * ownership. Elasticsearch B.V. licenses this file to you under\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * the Apache License, Version 2.0 (the \"License\"); you may\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * not use this file except in compliance with the License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * You may obtain a copy of the License at\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\nhttp://www.apache.org/licenses/LICENSE-2.0\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Unless required by applicable law or agreed to in writing,\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * software distributed under the License is distributed on an\nneither express or implied.  See the License for the\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * specific language governing permissions and limitations\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * under the License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\nvar MetricVisComponent = exports.MetricVisComponent = function (_Component) {\n  _inherits(MetricVisComponent, _Component);\n\n  function MetricVisComponent() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, MetricVisComponent);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = MetricVisComponent.__proto__ || Object.getPrototypeOf(MetricVisComponent)).call.apply(_ref, [this].concat(args))), _this), _this._filterBucket = function (metric) {\n      if (!metric.filterKey || !metric.bucketAgg) {\n        return;\n      }\n      var table = _this.props.visData;\n      _this.props.vis.API.events.filter({ table: table, column: metric.columnIndex, row: metric.rowIndex });\n    }, _this._renderMetric = function (metric, index) {\n      return _react2.default.createElement(_metric_vis_value.MetricVisValue, {\n        key: index,\n        metric: metric,\n        fontSize: _this.props.vis.params.metric.style.fontSize,\n        onFilter: metric.filterKey && metric.bucketAgg ? _this._filterBucket : null,\n        showLabel: _this.props.vis.params.metric.labels.show\n      });\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(MetricVisComponent, [{\n    key: '_getLabels',\n    value: function _getLabels() {\n      var config = this.props.vis.params.metric;\n      var isPercentageMode = config.percentageMode;\n      var colorsRange = config.colorsRange;\n      var max = _lodash2.default.last(colorsRange).to;\n      var labels = [];\n      colorsRange.forEach(function (range) {\n        var from = isPercentageMode ? Math.round(100 * range.from / max) : range.from;\n        var to = isPercentageMode ? Math.round(100 * range.to / max) : range.to;\n        labels.push(from + ' - ' + to);\n      });\n\n      return labels;\n    }\n  }, {\n    key: '_getColors',\n    value: function _getColors() {\n      var config = this.props.vis.params.metric;\n      var invertColors = config.invertColors;\n      var colorSchema = config.colorSchema;\n      var colorsRange = config.colorsRange;\n      var labels = this._getLabels();\n      var colors = {};\n      for (var i = 0; i < labels.length; i += 1) {\n        var divider = Math.max(colorsRange.length - 1, 1);\n        var val = invertColors ? 1 - i / divider : i / divider;\n        colors[labels[i]] = (0, _heatmap_color.getHeatmapColors)(val, colorSchema);\n      }\n      return colors;\n    }\n  }, {\n    key: '_getBucket',\n    value: function _getBucket(val) {\n      var config = this.props.vis.params.metric;\n      var bucket = _lodash2.default.findIndex(config.colorsRange, function (range) {\n        return range.from <= val && range.to > val;\n      });\n\n      if (bucket === -1) {\n        if (val < config.colorsRange[0].from) bucket = 0;else bucket = config.colorsRange.length - 1;\n      }\n\n      return bucket;\n    }\n  }, {\n    key: '_getColor',\n    value: function _getColor(val, labels, colors) {\n      var bucket = this._getBucket(val);\n      var label = labels[bucket];\n      return colors[label];\n    }\n  }, {\n    key: '_needsLightText',\n    value: function _needsLightText(bgColor) {\n      var color = /rgb\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*\\)/.exec(bgColor);\n      if (!color) {\n        return false;\n      }\n      return (0, _eui.isColorDark)(parseInt(color[1]), parseInt(color[2]), parseInt(color[3]));\n    }\n  }, {\n    key: '_getFormattedValue',\n    value: function _getFormattedValue(fieldFormatter, value) {\n      if (_lodash2.default.isNaN(value)) return '-';\n      return fieldFormatter(value);\n    }\n  }, {\n    key: '_processTableGroups',\n    value: function _processTableGroups(table) {\n      var _this2 = this;\n\n      var config = this.props.vis.params.metric;\n      var isPercentageMode = config.percentageMode;\n      var min = config.colorsRange[0].from;\n      var max = _lodash2.default.last(config.colorsRange).to;\n      var colors = this._getColors();\n      var labels = this._getLabels();\n      var metrics = [];\n\n      var bucketAgg = void 0;\n      var bucketColumnId = void 0;\n      var rowHeaderIndex = void 0;\n\n      table.columns.forEach(function (column, columnIndex) {\n        var aggConfig = column.aggConfig;\n\n        if (aggConfig && aggConfig.type.type === 'buckets') {\n          bucketAgg = aggConfig;\n          // Store the current index, so we later know in which position in the\n          // row array, the bucket agg key will be, so we can create filters on it.\n          rowHeaderIndex = columnIndex;\n          bucketColumnId = column.id;\n          return;\n        }\n\n        table.rows.forEach(function (row, rowIndex) {\n\n          var title = column.name;\n          var value = row[column.id];\n          var color = _this2._getColor(value, labels, colors);\n\n          if (isPercentageMode) {\n            var percentage = Math.round(100 * (value - min) / (max - min));\n            value = percentage + '%';\n          }\n\n          if (aggConfig) {\n            if (!isPercentageMode) value = _this2._getFormattedValue(aggConfig.fieldFormatter('html'), value);\n            if (bucketAgg) {\n              var bucketValue = bucketAgg.fieldFormatter('text')(row[bucketColumnId]);\n              title = bucketValue + ' - ' + aggConfig.makeLabel();\n            } else {\n              title = aggConfig.makeLabel();\n            }\n          }\n\n          var shouldColor = config.colorsRange.length > 1;\n\n          metrics.push({\n            label: title,\n            value: value,\n            color: shouldColor && config.style.labelColor ? color : null,\n            bgColor: shouldColor && config.style.bgColor ? color : null,\n            lightText: shouldColor && config.style.bgColor && _this2._needsLightText(color),\n            filterKey: bucketColumnId !== undefined ? row[bucketColumnId] : null,\n            rowIndex: rowIndex,\n            columnIndex: rowHeaderIndex,\n            bucketAgg: bucketAgg\n          });\n        });\n      });\n\n      return metrics;\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var metricsHtml = void 0;\n      if (this.props.visData) {\n        var metrics = this._processTableGroups(this.props.visData);\n        metricsHtml = metrics.map(this._renderMetric);\n      }\n      return _react2.default.createElement(\n        'div',\n        { className: 'mtrVis' },\n        metricsHtml\n      );\n    }\n  }, {\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.props.renderComplete();\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate() {\n      this.props.renderComplete();\n    }\n  }]);\n\n  return MetricVisComponent;\n}(_react.Component);",null]}