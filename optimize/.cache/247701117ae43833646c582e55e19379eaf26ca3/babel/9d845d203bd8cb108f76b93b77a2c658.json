{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/ui/public/chrome/api/xsrf.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/chrome/api/xsrf.js","mtime":1567631711709},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.initChromeXsrfApi = initChromeXsrfApi;\n\nvar _jquery = require('jquery');\n\nvar _jquery2 = _interopRequireDefault(_jquery);\n\nvar _lodash = require('lodash');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nfunction initChromeXsrfApi(chrome, internals) {\n\n  chrome.getXsrfToken = function () {\n    return internals.version;\n  };\n\n  _jquery2.default.ajaxPrefilter(function (_ref, originalOptions, jqXHR) {\n    var _ref$kbnXsrfToken = _ref.kbnXsrfToken,\n        kbnXsrfToken = _ref$kbnXsrfToken === undefined ? true : _ref$kbnXsrfToken;\n\n    if (kbnXsrfToken) {\n      jqXHR.setRequestHeader('kbn-version', internals.version);\n    }\n  });\n\n  chrome.$setupXsrfRequestInterceptor = function ($httpProvider) {\n    $httpProvider.interceptors.push(function () {\n      return {\n        request: function request(opts) {\n          var _opts$kbnXsrfToken = opts.kbnXsrfToken,\n              kbnXsrfToken = _opts$kbnXsrfToken === undefined ? true : _opts$kbnXsrfToken;\n\n          if (kbnXsrfToken) {\n            (0, _lodash.set)(opts, ['headers', 'kbn-version'], internals.version);\n          }\n          return opts;\n        }\n      };\n    });\n  };\n}",null]}