{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/legacy/core_plugins/timelion/public/directives/chart/chart.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/legacy/core_plugins/timelion/public/directives/chart/chart.js","mtime":1567631711648},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nvar _panel_registry = require('../../lib/panel_registry');\n\nvar _panel_registry2 = _interopRequireDefault(_panel_registry);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nrequire('ui/modules').get('apps/timelion', []).directive('chart', function (Private, i18n) {\n  return {\n    restrict: 'A',\n    scope: {\n      seriesList: '=chart', // The flot object, data, config and all\n      search: '=', // The function to execute to kick off a search\n      interval: '=', // Required for formatting x-axis ticks\n      rerenderTrigger: '='\n    },\n    link: function link($scope, $elem) {\n\n      var panelRegistry = Private(_panel_registry2.default);\n      var panelScope = $scope.$new(true);\n\n      function render() {\n        panelScope.$destroy();\n\n        if (!$scope.seriesList) return;\n\n        $scope.seriesList.render = $scope.seriesList.render || {\n          type: 'timechart'\n        };\n\n        var panelSchema = panelRegistry.byName[$scope.seriesList.render.type];\n\n        if (!panelSchema) {\n          $elem.text(i18n('timelion.chart.seriesList.noSchemaWarning', {\n            defaultMessage: 'No such panel type: {renderType}',\n            values: { renderType: $scope.seriesList.render.type }\n          }));\n          return;\n        }\n\n        panelScope = $scope.$new(true);\n        panelScope.seriesList = $scope.seriesList;\n        panelScope.interval = $scope.interval;\n        panelScope.search = $scope.search;\n\n        panelSchema.render(panelScope, $elem);\n      }\n\n      $scope.$watchGroup(['seriesList', 'rerenderTrigger'], render);\n    }\n  };\n}); /*\n     * Licensed to Elasticsearch B.V. under one or more contributor\n     * license agreements. See the NOTICE file distributed with\n     * this work for additional information regarding copyright\n     * ownership. Elasticsearch B.V. licenses this file to you under\n     * the Apache License, Version 2.0 (the \"License\"); you may\n     * not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *    http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing,\n     * software distributed under the License is distributed on an\n     * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n     * KIND, either express or implied.  See the License for the\n     * specific language governing permissions and limitations\n     * under the License.\n     */",null]}