{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/ui/public/time_buckets/calc_es_interval.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/time_buckets/calc_es_interval.js","mtime":1567631711760},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.convertDurationToNormalizedEsInterval = convertDurationToNormalizedEsInterval;\nexports.convertIntervalToEsInterval = convertIntervalToEsInterval;\n\nvar _datemath = require('@elastic/datemath');\n\nvar _datemath2 = _interopRequireDefault(_datemath);\n\nvar _parse_es_interval = require('ui/utils/parse_es_interval');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nvar unitsDesc = _datemath2.default.unitsDesc;\nvar largeMax = unitsDesc.indexOf('M');\n\n/**\n * Convert a moment.duration into an es\n * compatible expression, and provide\n * associated metadata\n *\n * @param  {moment.duration} duration\n * @return {object}\n */\nfunction convertDurationToNormalizedEsInterval(duration) {\n  for (var i = 0; i < unitsDesc.length; i++) {\n    var unit = unitsDesc[i];\n    var val = duration.as(unit);\n    // find a unit that rounds neatly\n    if (val >= 1 && Math.floor(val) === val) {\n\n      // if the unit is \"large\", like years, but\n      // isn't set to 1 ES will puke. So keep going until\n      // we get out of the \"large\" units\n      if (i <= largeMax && val !== 1) {\n        continue;\n      }\n\n      return {\n        value: val,\n        unit: unit,\n        expression: val + unit\n      };\n    }\n  }\n\n  var ms = duration.as('ms');\n  return {\n    value: ms,\n    unit: 'ms',\n    expression: ms + 'ms'\n  };\n}\n\nfunction convertIntervalToEsInterval(interval) {\n  var _parseEsInterval = (0, _parse_es_interval.parseEsInterval)(interval),\n      value = _parseEsInterval.value,\n      unit = _parseEsInterval.unit;\n\n  return {\n    value: value,\n    unit: unit,\n    expression: interval\n  };\n}",null]}