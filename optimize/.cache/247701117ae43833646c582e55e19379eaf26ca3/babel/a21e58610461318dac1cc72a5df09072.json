{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/ui/public/field_editor/field_editor.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/field_editor/field_editor.js","mtime":1567631711728},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FieldEditor = exports.FieldEditorComponent = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _lodash = require('lodash');\n\nvar _scripting_languages = require('ui/scripting_languages');\n\nvar _field_formats = require('ui/registry/field_formats');\n\nvar _documentation_links = require('ui/documentation_links');\n\nvar _notify = require('ui/notify');\n\nvar _eui = require('@elastic/eui');\n\nvar _scripting_call_outs = require('./components/scripting_call_outs');\n\nvar _scripting_help = require('./components/scripting_help');\n\nvar _field_format_editor = require('./components/field_format_editor');\n\nvar _constants = require('./constants');\n\nvar _lib = require('./lib');\n\nvar _react3 = require('@kbn/i18n/react');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Licensed to Elasticsearch B.V. under one or more contributor\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * license agreements. See the NOTICE file distributed with\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * this work for additional information regarding copyright\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * ownership. Elasticsearch B.V. licenses this file to you under\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * the Apache License, Version 2.0 (the \"License\"); you may\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * not use this file except in compliance with the License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * You may obtain a copy of the License at\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\nhttp://www.apache.org/licenses/LICENSE-2.0\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Unless required by applicable law or agreed to in writing,\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * software distributed under the License is distributed on an\nneither express or implied.  See the License for the\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * specific language governing permissions and limitations\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * under the License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\nvar FieldEditorComponent = exports.FieldEditorComponent = function (_PureComponent) {\n  _inherits(FieldEditorComponent, _PureComponent);\n\n  function FieldEditorComponent(props) {\n    _classCallCheck(this, FieldEditorComponent);\n\n    var _this = _possibleConstructorReturn(this, (FieldEditorComponent.__proto__ || Object.getPrototypeOf(FieldEditorComponent)).call(this, props));\n\n    _initialiseProps.call(_this);\n\n    var field = props.field,\n        indexPattern = props.indexPattern,\n        Field = props.helpers.Field;\n\n\n    _this.state = {\n      isReady: false,\n      isCreating: false,\n      isDeprecatedLang: false,\n      scriptingLangs: [],\n      fieldTypes: [],\n      fieldTypeFormats: [],\n      existingFieldNames: indexPattern.fields.map(function (f) {\n        return f.name;\n      }),\n      field: (0, _lib.copyField)(field, indexPattern, Field),\n      fieldFormatId: undefined,\n      fieldFormatParams: {},\n      showScriptingHelp: false,\n      showDeleteModal: false,\n      hasFormatError: false,\n      hasScriptError: false,\n      isSaving: false\n    };\n    _this.supportedLangs = (0, _scripting_languages.getSupportedScriptingLanguages)();\n    _this.deprecatedLangs = (0, _scripting_languages.getDeprecatedScriptingLanguages)();\n    _this.init();\n    return _this;\n  }\n\n  _createClass(FieldEditorComponent, [{\n    key: 'init',\n    value: function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var $http, field, indexPattern, getEnabledScriptingLanguages, enabledLangs, scriptingLangs, fieldTypes, DefaultFieldFormat, fieldTypeFormats;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                $http = this.props.helpers.$http;\n                field = this.state.field;\n                indexPattern = this.props.indexPattern;\n                getEnabledScriptingLanguages = new _scripting_languages.GetEnabledScriptingLanguagesProvider($http);\n                _context.next = 6;\n                return getEnabledScriptingLanguages();\n\n              case 6:\n                enabledLangs = _context.sent;\n                scriptingLangs = (0, _lodash.intersection)(enabledLangs, (0, _lodash.union)(this.supportedLangs, this.deprecatedLangs));\n\n                field.lang = scriptingLangs.includes(field.lang) ? field.lang : undefined;\n\n                fieldTypes = (0, _lodash.get)(_constants.FIELD_TYPES_BY_LANG, field.lang, _constants.DEFAULT_FIELD_TYPES);\n\n                field.type = fieldTypes.includes(field.type) ? field.type : fieldTypes[0];\n\n                DefaultFieldFormat = _field_formats.fieldFormats.getDefaultType(field.type);\n                fieldTypeFormats = [(0, _lib.getDefaultFormat)(DefaultFieldFormat)].concat(_toConsumableArray(_field_formats.fieldFormats.byFieldType[field.type]));\n\n\n                this.setState({\n                  isReady: true,\n                  isCreating: !indexPattern.fields.byName[field.name],\n                  isDeprecatedLang: this.deprecatedLangs.includes(field.lang),\n                  errors: [],\n                  scriptingLangs: scriptingLangs,\n                  fieldTypes: fieldTypes,\n                  fieldTypeFormats: fieldTypeFormats,\n                  fieldFormatId: (0, _lodash.get)(indexPattern, ['fieldFormatMap', field.name, 'type', 'id']),\n                  fieldFormatParams: field.format.params()\n                });\n\n              case 14:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function init() {\n        return _ref.apply(this, arguments);\n      }\n\n      return init;\n    }()\n  }, {\n    key: 'isDuplicateName',\n    value: function isDuplicateName() {\n      var _state = this.state,\n          isCreating = _state.isCreating,\n          field = _state.field,\n          existingFieldNames = _state.existingFieldNames;\n\n      return isCreating && existingFieldNames.includes(field.name);\n    }\n  }, {\n    key: 'renderName',\n    value: function renderName() {\n      var _this2 = this;\n\n      var _state2 = this.state,\n          isCreating = _state2.isCreating,\n          field = _state2.field;\n      var intl = this.props.intl;\n\n      var isInvalid = !field.name || !field.name.trim();\n\n      return isCreating ? _react2.default.createElement(\n        _eui.EuiFormRow,\n        {\n          label: intl.formatMessage({ id: 'common.ui.fieldEditor.nameLabel', defaultMessage: 'Name' }),\n          helpText: this.isDuplicateName() ? _react2.default.createElement(\n            'span',\n            null,\n            _react2.default.createElement(_eui.EuiIcon, { type: 'alert', color: 'warning', size: 's' }),\n            '\\xA0',\n            _react2.default.createElement(_react3.FormattedMessage, {\n              id: 'common.ui.fieldEditor.mappingConflictLabel.mappingConflictDetail',\n              defaultMessage: '{mappingConflict} You already have a field with the name {fieldName}. Naming your scripted field with the same name means you won\\'t be able to query both fields at the same time.',\n              values: {\n                mappingConflict: _react2.default.createElement(\n                  'strong',\n                  null,\n                  _react2.default.createElement(_react3.FormattedMessage, {\n                    id: 'common.ui.fieldEditor.mappingConflictLabel.mappingConflictLabel',\n                    defaultMessage: 'Mapping Conflict:'\n                  })\n                ),\n                fieldName: _react2.default.createElement(\n                  _eui.EuiCode,\n                  null,\n                  field.name\n                )\n              }\n            })\n          ) : null,\n          isInvalid: isInvalid,\n          error: isInvalid ? intl.formatMessage({\n            id: 'common.ui.fieldEditor.nameErrorMessage',\n            defaultMessage: 'Name is required'\n          }) : null\n        },\n        _react2.default.createElement(_eui.EuiFieldText, {\n          value: field.name || '',\n          placeholder: intl.formatMessage({ id: 'common.ui.fieldEditor.namePlaceholder', defaultMessage: 'New scripted field' }),\n          'data-test-subj': 'editorFieldName',\n          onChange: function onChange(e) {\n            _this2.onFieldChange('name', e.target.value);\n          },\n          isInvalid: isInvalid\n        })\n      ) : null;\n    }\n  }, {\n    key: 'renderLanguage',\n    value: function renderLanguage() {\n      var _this3 = this;\n\n      var _state3 = this.state,\n          field = _state3.field,\n          scriptingLangs = _state3.scriptingLangs,\n          isDeprecatedLang = _state3.isDeprecatedLang;\n      var intl = this.props.intl;\n\n\n      return field.scripted ? _react2.default.createElement(\n        _eui.EuiFormRow,\n        {\n          label: intl.formatMessage({ id: 'common.ui.fieldEditor.languageLabel', defaultMessage: 'Language' }),\n          helpText: isDeprecatedLang ? _react2.default.createElement(\n            'span',\n            null,\n            _react2.default.createElement(_eui.EuiIcon, { type: 'alert', color: 'warning', size: 's' }),\n            '\\xA0',\n            _react2.default.createElement(\n              'strong',\n              null,\n              _react2.default.createElement(_react3.FormattedMessage, {\n                id: 'common.ui.fieldEditor.warningHeader',\n                defaultMessage: 'Deprecation Warning:'\n              })\n            ),\n            '\\xA0',\n            _react2.default.createElement(_react3.FormattedMessage, {\n              id: 'common.ui.fieldEditor.warningLabel.warningDetail',\n              defaultMessage: '{language} is deprecated and support will be removed in the next major version of Kibana and Elasticsearch. We recommend using {painlessLink} for new scripted fields.',\n              values: {\n                language: _react2.default.createElement(\n                  _eui.EuiCode,\n                  null,\n                  field.lang\n                ),\n                painlessLink: _react2.default.createElement(\n                  _eui.EuiLink,\n                  { target: '_window', href: (0, _documentation_links.getDocLink)('scriptedFields.painless') },\n                  _react2.default.createElement(_react3.FormattedMessage, {\n                    id: 'common.ui.fieldEditor.warningLabel.painlessLinkLabel',\n                    defaultMessage: 'Painless'\n                  })\n                )\n              }\n            })\n          ) : null\n        },\n        _react2.default.createElement(_eui.EuiSelect, {\n          value: field.lang,\n          options: scriptingLangs.map(function (lang) {\n            return { value: lang, text: lang };\n          }),\n          'data-test-subj': 'editorFieldLang',\n          onChange: function onChange(e) {\n            _this3.onLangChange(e.target.value);\n          }\n        })\n      ) : null;\n    }\n  }, {\n    key: 'renderType',\n    value: function renderType() {\n      var _this4 = this;\n\n      var _state4 = this.state,\n          field = _state4.field,\n          fieldTypes = _state4.fieldTypes;\n      var intl = this.props.intl;\n\n\n      return _react2.default.createElement(\n        _eui.EuiFormRow,\n        { label: intl.formatMessage({ id: 'common.ui.fieldEditor.typeLabel', defaultMessage: 'Type' }) },\n        _react2.default.createElement(_eui.EuiSelect, {\n          value: field.type,\n          disabled: !field.scripted,\n          options: fieldTypes.map(function (type) {\n            return { value: type, text: type };\n          }),\n          'data-test-subj': 'editorFieldType',\n          onChange: function onChange(e) {\n            _this4.onTypeChange(e.target.value);\n          }\n        })\n      );\n    }\n  }, {\n    key: 'renderFormat',\n    value: function renderFormat() {\n      var _this5 = this;\n\n      var _state5 = this.state,\n          field = _state5.field,\n          fieldTypeFormats = _state5.fieldTypeFormats,\n          fieldFormatId = _state5.fieldFormatId,\n          fieldFormatParams = _state5.fieldFormatParams;\n      var fieldFormatEditors = this.props.helpers.fieldFormatEditors;\n\n      var defaultFormat = fieldTypeFormats[0] && fieldTypeFormats[0].resolvedTitle;\n      var label = defaultFormat ? _react2.default.createElement(_react3.FormattedMessage, {\n        id: 'common.ui.fieldEditor.defaultFormatHeader',\n        defaultMessage: 'Format (Default: {defaultFormat})',\n        values: {\n          defaultFormat: _react2.default.createElement(\n            _eui.EuiCode,\n            null,\n            defaultFormat\n          )\n        }\n      }) : _react2.default.createElement(_react3.FormattedMessage, {\n        id: 'common.ui.fieldEditor.formatHeader',\n        defaultMessage: 'Format'\n      });\n\n      return _react2.default.createElement(\n        _react.Fragment,\n        null,\n        _react2.default.createElement(\n          _eui.EuiFormRow,\n          {\n            label: label,\n            helpText: _react2.default.createElement(_react3.FormattedMessage, {\n              id: 'common.ui.fieldEditor.formatLabel',\n              defaultMessage: 'Formatting allows you to control the way that specific values are displayed. It can also cause values to be completely changed and prevent highlighting in Discover from working.'\n            })\n          },\n          _react2.default.createElement(_eui.EuiSelect, {\n            value: fieldFormatId,\n            options: fieldTypeFormats.map(function (format) {\n              return { value: format.id || '', text: format.title };\n            }),\n            'data-test-subj': 'editorSelectedFormatId',\n            onChange: function onChange(e) {\n              _this5.onFormatChange(e.target.value);\n            }\n          })\n        ),\n        fieldFormatId ? _react2.default.createElement(_field_format_editor.FieldFormatEditor, {\n          fieldType: field.type,\n          fieldFormat: field.format,\n          fieldFormatId: fieldFormatId,\n          fieldFormatParams: fieldFormatParams,\n          fieldFormatEditors: fieldFormatEditors,\n          onChange: this.onFormatParamsChange,\n          onError: this.onFormatParamsError\n        }) : null\n      );\n    }\n  }, {\n    key: 'renderPopularity',\n    value: function renderPopularity() {\n      var _this6 = this;\n\n      var field = this.state.field;\n      var intl = this.props.intl;\n\n\n      return _react2.default.createElement(\n        _eui.EuiFormRow,\n        { label: intl.formatMessage({ id: 'common.ui.fieldEditor.popularityLabel', defaultMessage: 'Popularity' }) },\n        _react2.default.createElement(_eui.EuiFieldNumber, {\n          value: field.count,\n          'data-test-subj': 'editorFieldCount',\n          onChange: function onChange(e) {\n            _this6.onFieldChange('count', e.target.value ? Number(e.target.value) : '');\n          }\n        })\n      );\n    }\n  }, {\n    key: 'renderScript',\n    value: function renderScript() {\n      var _state6 = this.state,\n          field = _state6.field,\n          hasScriptError = _state6.hasScriptError;\n      var intl = this.props.intl;\n\n      var isInvalid = !field.script || !field.script.trim() || hasScriptError;\n      var errorMsg = hasScriptError ? _react2.default.createElement(\n        'span',\n        { 'data-test-subj': 'invalidScriptError' },\n        intl.formatMessage({\n          id: 'common.ui.fieldEditor.scriptInvalidErrorMessage', defaultMessage: 'Script is invalid. View script preview for details' })\n      ) : intl.formatMessage({ id: 'common.ui.fieldEditor.scriptRequiredErrorMessage', defaultMessage: 'Script is required' });\n\n      return field.scripted ? _react2.default.createElement(\n        _react.Fragment,\n        null,\n        _react2.default.createElement(\n          _eui.EuiFormRow,\n          {\n            label: intl.formatMessage({ id: 'common.ui.fieldEditor.scriptLabel', defaultMessage: 'Script' }),\n            isInvalid: isInvalid,\n            error: isInvalid ? errorMsg : null\n          },\n          _react2.default.createElement(_eui.EuiTextArea, {\n            value: field.script,\n            'data-test-subj': 'editorFieldScript',\n            onChange: this.onScriptChange,\n            isInvalid: isInvalid\n          })\n        ),\n        _react2.default.createElement(\n          _eui.EuiFormRow,\n          null,\n          _react2.default.createElement(\n            _react.Fragment,\n            null,\n            _react2.default.createElement(\n              _eui.EuiText,\n              null,\n              _react2.default.createElement(_react3.FormattedMessage, {\n                id: 'common.ui.fieldEditor.script.accessWithLabel',\n                defaultMessage: 'Access fields with {code}.',\n                values: { code: _react2.default.createElement(\n                    'code',\n                    null,\n                    'doc[\\'some_field\\'].value'\n                  ) }\n              })\n            ),\n            _react2.default.createElement('br', null),\n            _react2.default.createElement(\n              _eui.EuiLink,\n              { onClick: this.showScriptingHelp, 'data-test-subj': 'scriptedFieldsHelpLink' },\n              _react2.default.createElement(_react3.FormattedMessage, {\n                id: 'common.ui.fieldEditor.script.getHelpLabel',\n                defaultMessage: 'Get help with the syntax and preview the results of your script.'\n              })\n            )\n          )\n        )\n      ) : null;\n    }\n  }, {\n    key: 'renderActions',\n    value: function renderActions() {\n      var _state7 = this.state,\n          isCreating = _state7.isCreating,\n          field = _state7.field,\n          isSaving = _state7.isSaving;\n      var redirectAway = this.props.helpers.redirectAway;\n\n\n      return _react2.default.createElement(\n        _eui.EuiFormRow,\n        null,\n        _react2.default.createElement(\n          _eui.EuiFlexGroup,\n          null,\n          _react2.default.createElement(\n            _eui.EuiFlexItem,\n            { grow: false },\n            _react2.default.createElement(\n              _eui.EuiButton,\n              {\n                fill: true,\n                onClick: this.saveField,\n                isDisabled: this.isSavingDisabled(),\n                isLoading: isSaving,\n                'data-test-subj': 'fieldSaveButton'\n              },\n              isCreating ? _react2.default.createElement(_react3.FormattedMessage, {\n                id: 'common.ui.fieldEditor.actions.createButton',\n                defaultMessage: 'Create field'\n              }) : _react2.default.createElement(_react3.FormattedMessage, {\n                id: 'common.ui.fieldEditor.actions.saveButton',\n                defaultMessage: 'Save field'\n              })\n            )\n          ),\n          _react2.default.createElement(\n            _eui.EuiFlexItem,\n            { grow: false },\n            _react2.default.createElement(\n              _eui.EuiButtonEmpty,\n              {\n                onClick: redirectAway,\n                'data-test-subj': 'fieldCancelButton'\n              },\n              _react2.default.createElement(_react3.FormattedMessage, {\n                id: 'common.ui.fieldEditor.actions.cancelButton',\n                defaultMessage: 'Cancel'\n              })\n            )\n          ),\n          !isCreating && field.scripted ? _react2.default.createElement(\n            _eui.EuiFlexItem,\n            null,\n            _react2.default.createElement(\n              _eui.EuiFlexGroup,\n              { justifyContent: 'flexEnd' },\n              _react2.default.createElement(\n                _eui.EuiFlexItem,\n                { grow: false },\n                _react2.default.createElement(\n                  _eui.EuiButtonEmpty,\n                  {\n                    color: 'danger',\n                    onClick: this.showDeleteModal\n                  },\n                  _react2.default.createElement(_react3.FormattedMessage, {\n                    id: 'common.ui.fieldEditor.actions.deleteButton',\n                    defaultMessage: 'Delete'\n                  })\n                )\n              )\n            )\n          ) : null\n        )\n      );\n    }\n  }, {\n    key: 'isSavingDisabled',\n    value: function isSavingDisabled() {\n      var _state8 = this.state,\n          field = _state8.field,\n          hasFormatError = _state8.hasFormatError,\n          hasScriptError = _state8.hasScriptError;\n\n\n      if (hasFormatError || hasScriptError || !field.name || !field.name.trim() || field.scripted && (!field.script || !field.script.trim())) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _state9 = this.state,\n          isReady = _state9.isReady,\n          isCreating = _state9.isCreating,\n          field = _state9.field;\n\n\n      return isReady ? _react2.default.createElement(\n        'div',\n        null,\n        _react2.default.createElement(\n          _eui.EuiText,\n          null,\n          _react2.default.createElement(\n            'h3',\n            null,\n            isCreating ? _react2.default.createElement(_react3.FormattedMessage, {\n              id: 'common.ui.fieldEditor.createHeader',\n              defaultMessage: 'Create scripted field'\n            }) : _react2.default.createElement(_react3.FormattedMessage, {\n              id: 'common.ui.fieldEditor.editHeader',\n              defaultMessage: 'Edit {fieldName}',\n              values: { fieldName: field.name }\n            })\n          )\n        ),\n        _react2.default.createElement(_eui.EuiSpacer, { size: 'm' }),\n        _react2.default.createElement(\n          _eui.EuiForm,\n          null,\n          this.renderScriptingPanels(),\n          this.renderName(),\n          this.renderLanguage(),\n          this.renderType(),\n          this.renderFormat(),\n          this.renderPopularity(),\n          this.renderScript(),\n          this.renderActions(),\n          this.renderDeleteModal()\n        ),\n        _react2.default.createElement(_eui.EuiSpacer, { size: 'l' })\n      ) : null;\n    }\n  }]);\n\n  return FieldEditorComponent;\n}(_react.PureComponent);\n\nFieldEditorComponent.propTypes = {\n  indexPattern: _propTypes2.default.object.isRequired,\n  field: _propTypes2.default.object.isRequired,\n  helpers: _propTypes2.default.shape({\n    Field: _propTypes2.default.func.isRequired,\n    getConfig: _propTypes2.default.func.isRequired,\n    $http: _propTypes2.default.func.isRequired,\n    fieldFormatEditors: _propTypes2.default.object.isRequired,\n    redirectAway: _propTypes2.default.func.isRequired\n  })\n};\n\nvar _initialiseProps = function _initialiseProps() {\n  var _this7 = this;\n\n  this.onFieldChange = function (fieldName, value) {\n    var field = _this7.state.field;\n    field[fieldName] = value;\n    _this7.forceUpdate();\n  };\n\n  this.onTypeChange = function (type) {\n    var getConfig = _this7.props.helpers.getConfig;\n    var field = _this7.state.field;\n\n    var DefaultFieldFormat = _field_formats.fieldFormats.getDefaultType(type);\n    field.type = type;\n\n    var fieldTypeFormats = [(0, _lib.getDefaultFormat)(DefaultFieldFormat)].concat(_toConsumableArray(_field_formats.fieldFormats.byFieldType[field.type]));\n\n    var FieldFormat = fieldTypeFormats[0];\n    field.format = new FieldFormat(null, getConfig);\n\n    _this7.setState({\n      fieldTypeFormats: fieldTypeFormats,\n      fieldFormatId: FieldFormat.id,\n      fieldFormatParams: field.format.params()\n    });\n  };\n\n  this.onLangChange = function (lang) {\n    var field = _this7.state.field;\n\n    var fieldTypes = (0, _lodash.get)(_constants.FIELD_TYPES_BY_LANG, lang, _constants.DEFAULT_FIELD_TYPES);\n    field.lang = lang;\n    field.type = fieldTypes.includes(field.type) ? field.type : fieldTypes[0];\n\n    _this7.setState({\n      fieldTypes: fieldTypes\n    });\n  };\n\n  this.onFormatChange = function (formatId, params) {\n    var getConfig = _this7.props.helpers.getConfig;\n    var _state10 = _this7.state,\n        field = _state10.field,\n        fieldTypeFormats = _state10.fieldTypeFormats;\n\n    var FieldFormat = fieldTypeFormats.find(function (format) {\n      return format.id === formatId;\n    }) || fieldTypeFormats[0];\n    field.format = new FieldFormat(params, getConfig);\n\n    _this7.setState({\n      fieldFormatId: FieldFormat.id,\n      fieldFormatParams: field.format.params()\n    });\n  };\n\n  this.onFormatParamsChange = function (newParams) {\n    var fieldFormatId = _this7.state.fieldFormatId;\n\n    _this7.onFormatChange(fieldFormatId, newParams);\n  };\n\n  this.onFormatParamsError = function (error) {\n    _this7.setState({\n      hasFormatError: !!error\n    });\n  };\n\n  this.onScriptChange = function (e) {\n    _this7.setState({\n      hasScriptError: false\n    });\n    _this7.onFieldChange('script', e.target.value);\n  };\n\n  this.showScriptingHelp = function () {\n    _this7.setState({\n      showScriptingHelp: true\n    });\n  };\n\n  this.hideScriptingHelp = function () {\n    _this7.setState({\n      showScriptingHelp: false\n    });\n  };\n\n  this.renderDeleteModal = function () {\n    var field = _this7.state.field;\n    var intl = _this7.props.intl;\n\n\n    return _this7.state.showDeleteModal ? _react2.default.createElement(\n      _eui.EuiOverlayMask,\n      null,\n      _react2.default.createElement(\n        _eui.EuiConfirmModal,\n        {\n          title: intl.formatMessage({ id: 'common.ui.fieldEditor.deleteFieldHeader', defaultMessage: 'Delete field \\'{fieldName}\\'' }, { fieldName: field.name }),\n          onCancel: _this7.hideDeleteModal,\n          onConfirm: function onConfirm() {\n            _this7.hideDeleteModal();\n            _this7.deleteField();\n          },\n          cancelButtonText: intl.formatMessage({ id: 'common.ui.fieldEditor.deleteField.cancelButton', defaultMessage: 'Cancel' }),\n          confirmButtonText: intl.formatMessage({ id: 'common.ui.fieldEditor.deleteField.deleteButton', defaultMessage: 'Delete' }),\n          buttonColor: 'danger',\n          defaultFocusedButton: _eui.EUI_MODAL_CONFIRM_BUTTON\n        },\n        _react2.default.createElement(\n          'p',\n          null,\n          _react2.default.createElement(_react3.FormattedMessage, {\n            id: 'common.ui.fieldEditor.deleteFieldLabel',\n            defaultMessage: 'You can\\'t recover a deleted field.{separator}Are you sure you want to do this?',\n            values: {\n              separator: _react2.default.createElement(\n                'span',\n                null,\n                _react2.default.createElement('br', null),\n                _react2.default.createElement('br', null)\n              )\n            }\n          })\n        )\n      )\n    ) : null;\n  };\n\n  this.showDeleteModal = function () {\n    _this7.setState({\n      showDeleteModal: true\n    });\n  };\n\n  this.hideDeleteModal = function () {\n    _this7.setState({\n      showDeleteModal: false\n    });\n  };\n\n  this.renderScriptingPanels = function () {\n    var _state11 = _this7.state,\n        scriptingLangs = _state11.scriptingLangs,\n        field = _state11.field,\n        showScriptingHelp = _state11.showScriptingHelp;\n\n\n    if (!field.scripted) {\n      return;\n    }\n\n    return _react2.default.createElement(\n      _react.Fragment,\n      null,\n      _react2.default.createElement(_scripting_call_outs.ScriptingDisabledCallOut, { isVisible: !scriptingLangs.length }),\n      _react2.default.createElement(_scripting_call_outs.ScriptingWarningCallOut, { isVisible: true }),\n      _react2.default.createElement(_scripting_help.ScriptingHelpFlyout, {\n        isVisible: showScriptingHelp,\n        onClose: _this7.hideScriptingHelp,\n        indexPattern: _this7.props.indexPattern,\n        lang: field.lang,\n        name: field.name,\n        script: field.script,\n        executeScript: _lib.executeScript\n      })\n    );\n  };\n\n  this.deleteField = function () {\n    var redirectAway = _this7.props.helpers.redirectAway;\n    var _props = _this7.props,\n        indexPattern = _props.indexPattern,\n        intl = _props.intl;\n    var field = _this7.state.field;\n\n    var remove = indexPattern.removeScriptedField(field.name);\n\n    if (remove) {\n      remove.then(function () {\n        var message = intl.formatMessage({ id: 'common.ui.fieldEditor.deleteField.deletedHeader', defaultMessage: 'Deleted \\'{fieldName}\\'' }, { fieldName: field.name });\n        _notify.toastNotifications.addSuccess(message);\n        redirectAway();\n      });\n    } else {\n      redirectAway();\n    }\n  };\n\n  this.saveField = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n    var field, _props2, indexPattern, intl, fieldFormatId, isValid, redirectAway, index;\n\n    return regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            field = _this7.state.field.toActualField();\n            _props2 = _this7.props, indexPattern = _props2.indexPattern, intl = _props2.intl;\n            fieldFormatId = _this7.state.fieldFormatId;\n\n            if (!field.scripted) {\n              _context2.next = 11;\n              break;\n            }\n\n            _this7.setState({\n              isSaving: true\n            });\n\n            _context2.next = 7;\n            return (0, _lib.isScriptValid)({\n              name: field.name,\n              lang: field.lang,\n              script: field.script,\n              indexPatternTitle: indexPattern.title\n            });\n\n          case 7:\n            isValid = _context2.sent;\n\n            if (isValid) {\n              _context2.next = 11;\n              break;\n            }\n\n            _this7.setState({\n              hasScriptError: true,\n              isSaving: false\n            });\n            return _context2.abrupt('return');\n\n          case 11:\n            redirectAway = _this7.props.helpers.redirectAway;\n            index = indexPattern.fields.findIndex(function (f) {\n              return f.name === field.name;\n            });\n\n\n            if (index > -1) {\n              indexPattern.fields.splice(index, 1, field);\n            } else {\n              indexPattern.fields.push(field);\n            }\n\n            if (!fieldFormatId) {\n              indexPattern.fieldFormatMap[field.name] = {};\n            } else {\n              indexPattern.fieldFormatMap[field.name] = field.format;\n            }\n\n            return _context2.abrupt('return', indexPattern.save().then(function () {\n              var message = intl.formatMessage({ id: 'common.ui.fieldEditor.deleteField.savedHeader', defaultMessage: 'Saved \\'{fieldName}\\'' }, { fieldName: field.name });\n              _notify.toastNotifications.addSuccess(message);\n              redirectAway();\n            }));\n\n          case 16:\n          case 'end':\n            return _context2.stop();\n        }\n      }\n    }, _callee2, _this7);\n  }));\n};\n\nvar FieldEditor = exports.FieldEditor = (0, _react3.injectI18n)(FieldEditorComponent);",null]}