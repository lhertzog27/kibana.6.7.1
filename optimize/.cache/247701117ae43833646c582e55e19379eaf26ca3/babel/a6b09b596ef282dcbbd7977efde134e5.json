{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/ui/public/agg_response/point_series/_get_point.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/agg_response/point_series/_get_point.js","mtime":1567631711693},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getPoint = getPoint;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction unwrap(aggConfigResult, def) {\n  return aggConfigResult ? aggConfigResult.value : def;\n} /*\n   * Licensed to Elasticsearch B.V. under one or more contributor\n   * license agreements. See the NOTICE file distributed with\n   * this work for additional information regarding copyright\n   * ownership. Elasticsearch B.V. licenses this file to you under\n   * the Apache License, Version 2.0 (the \"License\"); you may\n   * not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *    http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing,\n   * software distributed under the License is distributed on an\n   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n   * KIND, either express or implied.  See the License for the\n   * specific language governing permissions and limitations\n   * under the License.\n   */\n\nfunction getPoint(x, series, yScale, row, y, z) {\n  var zRow = z && row[z.i];\n  var xRow = row[x.i];\n\n  var point = {\n    x: unwrap(xRow, '_all'),\n    y: unwrap(row[y.i]),\n    z: zRow && unwrap(zRow),\n    aggConfigResult: row[y.i],\n    extraMetrics: _lodash2.default.compact([zRow]),\n    yScale: yScale\n  };\n\n  if (point.y === 'NaN') {\n    // filter out NaN from stats\n    // from metrics that are not based at zero\n    return;\n  }\n\n  if (series) {\n    var seriesArray = series.length ? series : [series];\n    point.aggConfig = seriesArray[0].aggConfig;\n    point.series = seriesArray.map(function (s) {\n      return s.aggConfig.fieldFormatter()(unwrap(row[s.i]));\n    }).join(' - ');\n    point.seriesRow = row[seriesArray[0].i];\n  } else if (y) {\n    // If the data is not split up with a series aspect, then\n    // each point's \"series\" becomes the y-agg that produced it\n    point.aggConfig = y.aggConfig;\n    point.series = y.title;\n    point.seriesRow = y;\n  }\n\n  if (yScale) {\n    point.y *= yScale;\n  }\n\n  return point;\n}",null]}