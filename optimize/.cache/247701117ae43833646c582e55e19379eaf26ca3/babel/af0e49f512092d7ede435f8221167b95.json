{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/ui/public/vis/vis_update_state.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/vis/vis_update_state.js","mtime":1567631711773},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.updateOldState = undefined;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Will figure out if an heatmap state was saved before the auto coloring\n * feature of heatmaps was created. If so it will set the overwriteColor flag\n * for the label to true if labels are enabled and a non default color has been used.\n * So that those earlier created heatmaps will still use the manual specified color.\n */\nfunction convertHeatmapLabelColor(visState) {\n  var hasOverwriteColorParam = _lodash2.default.get(visState, 'params.valueAxes[0].labels.overwriteColor') !== undefined;\n  if (visState.type === 'heatmap' && visState.params && !hasOverwriteColorParam) {\n    var showLabels = _lodash2.default.get(visState, 'params.valueAxes[0].labels.show', false);\n    var color = _lodash2.default.get(visState, 'params.valueAxes[0].labels.color', '#555');\n    _lodash2.default.set(visState, 'params.valueAxes[0].labels.overwriteColor', showLabels && color !== '#555');\n  }\n}\n\n/**\n * Update old terms aggregation format to new terms aggregation format. This will\n * update the following things:\n * - Rewrite orderBy: _term to orderBy: _key (new API in Elasticsearch)\n */\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nfunction convertTermAggregation(visState) {\n  if (visState.aggs) {\n    visState.aggs.forEach(function (agg) {\n      if (agg.type === 'terms' && agg.params && agg.params.orderBy === '_term') {\n        agg.params.orderBy = '_key';\n      }\n    });\n  }\n}\n\nfunction convertPropertyNames(visState) {\n  // 'showMeticsAtAllLevels' is a legacy typo we'll fix by changing it to 'showMetricsAtAllLevels'.\n  if (typeof _lodash2.default.get(visState, 'params.showMeticsAtAllLevels') === 'boolean') {\n    visState.params.showMetricsAtAllLevels = visState.params.showMeticsAtAllLevels;\n    delete visState.params.showMeticsAtAllLevels;\n  }\n}\n\n/**\n * This function is responsible for updating old visStates - the actual saved object\n * object - into the format, that will be required by the current Kibana version.\n * This method will be executed for each saved vis object, that will be loaded.\n * It will return the updated version as Kibana would expect it. It does not modify\n * the passed state.\n */\nvar updateOldState = exports.updateOldState = function updateOldState(visState) {\n  if (!visState) return visState;\n  var newState = _lodash2.default.cloneDeep(visState);\n\n  convertTermAggregation(newState);\n  convertPropertyNames(newState);\n\n  if (visState.type === 'gauge' && visState.fontSize) {\n    delete newState.fontSize;\n    _lodash2.default.set(newState, 'gauge.style.fontSize', visState.fontSize);\n  }\n\n  // update old metric to the new one\n  // Changed from 6.0 -> 6.1\n  if (['gauge', 'metric'].includes(visState.type) && _lodash2.default.get(visState.params, 'gauge.gaugeType', null) === 'Metric') {\n    newState.type = 'metric';\n    newState.params.addLegend = false;\n    newState.params.type = 'metric';\n    newState.params.metric = newState.params.gauge;\n    delete newState.params.gauge;\n    delete newState.params.metric.gaugeType;\n    delete newState.params.metric.gaugeStyle;\n    delete newState.params.metric.backStyle;\n    delete newState.params.metric.scale;\n    delete newState.params.metric.type;\n    delete newState.params.metric.orientation;\n    delete newState.params.metric.verticalSplit;\n    delete newState.params.metric.autoExtend;\n    newState.params.metric.metricColorMode = newState.params.metric.gaugeColorMode;\n    delete newState.params.metric.gaugeColorMode;\n  } else if (visState.type === 'metric' && _lodash2.default.get(visState.params, 'gauge.gaugeType', 'Metric') !== 'Metric') {\n    newState.type = 'gauge';\n    newState.params.type = 'gauge';\n  }\n\n  convertHeatmapLabelColor(newState);\n\n  return newState;\n};",null]}