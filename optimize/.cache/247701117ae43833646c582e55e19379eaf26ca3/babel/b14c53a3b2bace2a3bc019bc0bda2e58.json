{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--4-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--4-2!/home/anthony/git_workspaces/kibana/packages/kbn-i18n/target/web/core/i18n.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/packages/kbn-i18n/target/web/core/i18n.js","mtime":1567666389874},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.addTranslation = addTranslation;\nexports.getTranslation = getTranslation;\nexports.setLocale = setLocale;\nexports.getLocale = getLocale;\nexports.setDefaultLocale = setDefaultLocale;\nexports.getDefaultLocale = getDefaultLocale;\nexports.setFormats = setFormats;\nexports.getFormats = getFormats;\nexports.getRegisteredLocales = getRegisteredLocales;\nexports.translate = translate;\nexports.init = init;\nexports.load = load;\n\nvar _intlFormatCache = _interopRequireDefault(require(\"intl-format-cache\"));\n\nvar _intlMessageformat = _interopRequireDefault(require(\"intl-messageformat\"));\n\nvar _intlRelativeformat = _interopRequireDefault(require(\"intl-relativeformat\"));\n\nvar _formats = require(\"./formats\");\n\nvar _helper = require(\"./helper\");\n\nvar _pseudo_locale = require(\"./pseudo_locale\");\n\nrequire(\"./locales.js\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : { default: obj };\n}\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);var value = info.value;\n  } catch (error) {\n    reject(error);return;\n  }if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }_next(undefined);\n    });\n  };\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};var ownKeys = Object.keys(source);if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });\n  } else {\n    obj[key] = value;\n  }return obj;\n}\n\nvar EN_LOCALE = 'en';\nvar translationsForLocale = {};\nvar getMessageFormat = (0, _intlFormatCache.default)(_intlMessageformat.default);\nvar defaultLocale = EN_LOCALE;\nvar currentLocale = EN_LOCALE;\nvar formats = _formats.formats;\n_intlMessageformat.default.defaultLocale = defaultLocale;\n_intlRelativeformat.default.defaultLocale = defaultLocale;\n/**\n * Returns message by the given message id.\n * @param id - path to the message\n */\n\nfunction getMessageById(id) {\n  var translation = getTranslation();\n  return translation.messages ? translation.messages[id] : undefined;\n}\n/**\n * Normalizes locale to make it consistent with IntlMessageFormat locales\n * @param locale\n */\n\nfunction normalizeLocale(locale) {\n  return locale.toLowerCase();\n}\n/**\n * Provides a way to register translations with the engine\n * @param newTranslation\n * @param [locale = messages.locale]\n */\n\nfunction addTranslation(newTranslation) {\n  var locale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : newTranslation.locale;\n\n  if (!locale || !(0, _helper.isString)(locale)) {\n    throw new Error('[I18n] A `locale` must be a non-empty string to add messages.');\n  }\n\n  if (newTranslation.locale && newTranslation.locale !== locale) {\n    throw new Error('[I18n] A `locale` in the translation object is different from the one provided as a second argument.');\n  }\n\n  var normalizedLocale = normalizeLocale(locale);\n  var existingTranslation = translationsForLocale[normalizedLocale] || {\n    messages: {}\n  };\n  translationsForLocale[normalizedLocale] = {\n    formats: newTranslation.formats || existingTranslation.formats,\n    locale: newTranslation.locale || existingTranslation.locale,\n    messages: _objectSpread({}, existingTranslation.messages, newTranslation.messages)\n  };\n}\n/**\n * Returns messages for the current language\n */\n\nfunction getTranslation() {\n  return translationsForLocale[currentLocale] || {\n    messages: {}\n  };\n}\n/**\n * Tells the engine which language to use by given language key\n * @param locale\n */\n\nfunction setLocale(locale) {\n  if (!locale || !(0, _helper.isString)(locale)) {\n    throw new Error('[I18n] A `locale` must be a non-empty string.');\n  }\n\n  currentLocale = normalizeLocale(locale);\n}\n/**\n * Returns the current locale\n */\n\nfunction getLocale() {\n  return currentLocale;\n}\n/**\n * Tells the library which language to fallback when missing translations\n * @param locale\n */\n\nfunction setDefaultLocale(locale) {\n  if (!locale || !(0, _helper.isString)(locale)) {\n    throw new Error('[I18n] A `locale` must be a non-empty string.');\n  }\n\n  defaultLocale = normalizeLocale(locale);\n  _intlMessageformat.default.defaultLocale = defaultLocale;\n  _intlRelativeformat.default.defaultLocale = defaultLocale;\n}\n\nfunction getDefaultLocale() {\n  return defaultLocale;\n}\n/**\n * Supplies a set of options to the underlying formatter\n * [Default format options used as the prototype of the formats]\n * {@link https://github.com/yahoo/intl-messageformat/blob/master/src/core.js#L62}\n * These are used when constructing the internal Intl.NumberFormat\n * and Intl.DateTimeFormat instances.\n * @param newFormats\n * @param [newFormats.number]\n * @param [newFormats.date]\n * @param [newFormats.time]\n */\n\nfunction setFormats(newFormats) {\n  if (!(0, _helper.isObject)(newFormats) || !(0, _helper.hasValues)(newFormats)) {\n    throw new Error('[I18n] A `formats` must be a non-empty object.');\n  }\n\n  formats = (0, _helper.mergeAll)(formats, newFormats);\n}\n/**\n * Returns current formats\n */\n\nfunction getFormats() {\n  return formats;\n}\n/**\n * Returns array of locales having translations\n */\n\nfunction getRegisteredLocales() {\n  return Object.keys(translationsForLocale);\n}\n\n/**\n * Translate message by id\n * @param id - translation id to be translated\n * @param [options]\n * @param [options.values] - values to pass into translation\n * @param [options.defaultMessage] - will be used unless translation was successful\n */\nfunction translate(id, _ref) {\n  var _ref$values = _ref.values,\n      values = _ref$values === void 0 ? {} : _ref$values,\n      defaultMessage = _ref.defaultMessage;\n  var shouldUsePseudoLocale = (0, _pseudo_locale.isPseudoLocale)(currentLocale);\n\n  if (!id || !(0, _helper.isString)(id)) {\n    throw new Error('[I18n] An `id` must be a non-empty string to translate a message.');\n  }\n\n  var message = shouldUsePseudoLocale ? defaultMessage : getMessageById(id);\n\n  if (!message && !defaultMessage) {\n    throw new Error(\"[I18n] Cannot format message: \\\"\".concat(id, \"\\\". Default message must be provided.\"));\n  }\n\n  if (message) {\n    try {\n      // We should call `format` even for messages without any value references\n      // to let it handle escaped curly braces `\\\\{` that are the part of the text itself\n      // and not value reference boundaries.\n      var formattedMessage = getMessageFormat(message, getLocale(), getFormats()).format(values);\n      return shouldUsePseudoLocale ? (0, _pseudo_locale.translateUsingPseudoLocale)(formattedMessage) : formattedMessage;\n    } catch (e) {\n      throw new Error(\"[I18n] Error formatting message: \\\"\".concat(id, \"\\\" for locale: \\\"\").concat(getLocale(), \"\\\".\\n\").concat(e));\n    }\n  }\n\n  try {\n    var msg = getMessageFormat(defaultMessage, getDefaultLocale(), getFormats());\n    return msg.format(values);\n  } catch (e) {\n    throw new Error(\"[I18n] Error formatting the default message for: \\\"\".concat(id, \"\\\".\\n\").concat(e));\n  }\n}\n/**\n * Initializes the engine\n * @param newTranslation\n */\n\nfunction init(newTranslation) {\n  if (!newTranslation) {\n    return;\n  }\n\n  addTranslation(newTranslation);\n\n  if (newTranslation.locale) {\n    setLocale(newTranslation.locale);\n  }\n\n  if (newTranslation.formats) {\n    setFormats(newTranslation.formats);\n  }\n}\n/**\n * Loads JSON with translations from the specified URL and initializes i18n engine with them.\n * @param translationsUrl URL pointing to the JSON bundle with translations.\n */\n\nfunction load(_x) {\n  return _load.apply(this, arguments);\n}\n\nfunction _load() {\n  _load = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee(translationsUrl) {\n    var response;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetch(translationsUrl, {\n              credentials: 'same-origin'\n            });\n\n          case 2:\n            response = _context.sent;\n\n            if (!(response.status >= 300)) {\n              _context.next = 5;\n              break;\n            }\n\n            throw new Error(\"Translations request failed with status code: \".concat(response.status));\n\n          case 5:\n            _context.t0 = init;\n            _context.next = 8;\n            return response.json();\n\n          case 8:\n            _context.t1 = _context.sent;\n            (0, _context.t0)(_context.t1);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n  return _load.apply(this, arguments);\n}",null]}