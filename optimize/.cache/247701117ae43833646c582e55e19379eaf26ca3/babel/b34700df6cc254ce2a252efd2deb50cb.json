{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/legacy/core_plugins/tile_map/public/base_maps_visualization.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/legacy/core_plugins/tile_map/public/base_maps_visualization.js","mtime":1567631711644},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\nicensed to Elasticsearch B.V. under one or more contributor\nlicense agreements. See the NOTICE file distributed with\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * this work for additional information regarding copyright\nownership. Elasticsearch B.V. licenses this file to you under\nthe Apache License, Version 2.0 (the \"License\"); you may\nnot use this file except in compliance with the License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * You may obtain a copy of the License at\nnhttp://www.apache.org/licenses/LICENSE-2.0\nn                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * Unless required by applicable law or agreed to in writing,\nsoftware distributed under the License is distributed on an\nneither express or implied.  See the License for the\nspecific language governing permissions and limitations\nunder the License.\nn\nexports.BaseMapsVisualizationProvider = BaseMapsVisualizationProvider;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _kibana_map = require('ui/vis/map/kibana_map');\n\nvar _rxjs = require('rxjs');\n\nvar Rx = _interopRequireWildcard(_rxjs);\n\nvar _operators = require('rxjs/operators');\n\nrequire('ui/vis/map/service_settings');\n\nvar _notify = require('ui/notify');\n\nvar _modules = require('ui/modules');\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar WMS_MINZOOM = 0;\nvar WMS_MAXZOOM = 22; //increase this to 22. Better for WMS\n\nvar emsServiceSettings = new Promise(function (resolve) {\n  _modules.uiModules.get('kibana').run(function ($injector) {\n    var serviceSttings = $injector.get('serviceSettings');\n    resolve(serviceSttings);\n  });\n});\n\nfunction BaseMapsVisualizationProvider(serviceSettings, i18n) {\n\n  /**\n   * Abstract base class for a visualization consisting of a map with a single baselayer.\n   * @class BaseMapsVisualization\n   * @constructor\n   */\n  return function () {\n    function BaseMapsVisualization(element, vis) {\n      _classCallCheck(this, BaseMapsVisualization);\n\n      this.vis = vis;\n      this._container = element;\n      this._kibanaMap = null;\n      this._chartData = null; //reference to data currently on the map.\n      this._baseLayerDirty = true;\n      this._mapIsLoaded = this._makeKibanaMap();\n    }\n\n    _createClass(BaseMapsVisualization, [{\n      key: 'isLoaded',\n      value: function isLoaded() {\n        return this._mapIsLoaded;\n      }\n    }, {\n      key: 'destroy',\n      value: function destroy() {\n        if (this._kibanaMap) {\n          this._kibanaMap.destroy();\n          this._kibanaMap = null;\n        }\n      }\n\n      /**\n       * Implementation of Visualization#render.\n       * Child-classes can extend this method if the render-complete function requires more time until rendering has completed.\n       * @param esResponse\n       * @param status\n       * @return {Promise}\n       */\n\n    }, {\n      key: 'render',\n      value: function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(esResponse, status) {\n          return regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  if (this._kibanaMap) {\n                    _context.next = 2;\n                    break;\n                  }\n\n                  return _context.abrupt('return');\n\n                case 2:\n                  _context.next = 4;\n                  return this._mapIsLoaded;\n\n                case 4:\n\n                  if (status.resize) {\n                    this._kibanaMap.resize();\n                  }\n\n                  if (!(status.params || status.aggs)) {\n                    _context.next = 8;\n                    break;\n                  }\n\n                  _context.next = 8;\n                  return this._updateParams();\n\n                case 8:\n                  if (!this._hasESResponseChanged(esResponse)) {\n                    _context.next = 11;\n                    break;\n                  }\n\n                  _context.next = 11;\n                  return this._updateData(esResponse);\n\n                case 11:\n                  if (status.uiState) {\n                    this._kibanaMap.useUiStateFromVisualization(this.vis);\n                  }\n\n                  _context.next = 14;\n                  return this._whenBaseLayerIsLoaded();\n\n                case 14:\n                case 'end':\n                  return _context.stop();\n              }\n            }\n          }, _callee, this);\n        }));\n\n        function render(_x, _x2) {\n          return _ref.apply(this, arguments);\n        }\n\n        return render;\n      }()\n\n      /**\n       * Creates an instance of a kibana-map with a single baselayer and assigns it to the this._kibanaMap property.\n       * Clients can override this method to customize the initialization.\n       * @private\n       */\n\n    }, {\n      key: '_makeKibanaMap',\n      value: function () {\n        var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n          var _this = this;\n\n          var options, uiState, zoomFromUiState, centerFromUIState;\n          return regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  options = {};\n                  uiState = this.vis.getUiState();\n                  zoomFromUiState = parseInt(uiState.get('mapZoom'));\n                  centerFromUIState = uiState.get('mapCenter');\n\n                  options.zoom = !isNaN(zoomFromUiState) ? zoomFromUiState : this.vis.params.mapZoom;\n                  options.center = centerFromUIState ? centerFromUIState : this.vis.params.mapCenter;\n\n                  this._kibanaMap = new _kibana_map.KibanaMap(this._container, options);\n                  this._kibanaMap.setMinZoom(WMS_MINZOOM); //use a default\n                  this._kibanaMap.setMaxZoom(WMS_MAXZOOM); //use a default\n\n                  this._kibanaMap.addLegendControl();\n                  this._kibanaMap.addFitControl();\n                  this._kibanaMap.persistUiStateForVisualization(this.vis);\n\n                  this._kibanaMap.on('baseLayer:loaded', function () {\n                    _this._baseLayerDirty = false;\n                  });\n                  this._kibanaMap.on('baseLayer:loading', function () {\n                    _this._baseLayerDirty = true;\n                  });\n                  _context2.next = 16;\n                  return this._updateBaseLayer();\n\n                case 16:\n                case 'end':\n                  return _context2.stop();\n              }\n            }\n          }, _callee2, this);\n        }));\n\n        function _makeKibanaMap() {\n          return _ref2.apply(this, arguments);\n        }\n\n        return _makeKibanaMap;\n      }()\n    }, {\n      key: '_tmsConfigured',\n      value: function _tmsConfigured() {\n        var _getMapsParams2 = this._getMapsParams(),\n            wms = _getMapsParams2.wms;\n\n        var hasTmsBaseLayer = !!wms.selectedTmsLayer;\n\n        return hasTmsBaseLayer;\n      }\n    }, {\n      key: '_wmsConfigured',\n      value: function _wmsConfigured() {\n        var _getMapsParams3 = this._getMapsParams(),\n            wms = _getMapsParams3.wms;\n\n        var hasWmsBaseLayer = !!wms.enabled;\n\n        return hasWmsBaseLayer;\n      }\n    }, {\n      key: '_updateBaseLayer',\n      value: function () {\n        var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n          var DEFAULT_EMS_BASEMAP, mapParams, tmsServices, userConfiguredTmsLayer, initBasemapLayer, selectedTmsLayer;\n          return regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  DEFAULT_EMS_BASEMAP = 'road_map';\n\n                  if (this._kibanaMap) {\n                    _context3.next = 3;\n                    break;\n                  }\n\n                  return _context3.abrupt('return');\n\n                case 3:\n                  mapParams = this._getMapsParams();\n\n                  if (this._tmsConfigured()) {\n                    _context3.next = 19;\n                    break;\n                  }\n\n                  _context3.prev = 5;\n                  _context3.next = 8;\n                  return serviceSettings.getTMSServices();\n\n                case 8:\n                  tmsServices = _context3.sent;\n                  userConfiguredTmsLayer = tmsServices[0];\n                  initBasemapLayer = userConfiguredTmsLayer ? userConfiguredTmsLayer : tmsServices.find(function (s) {\n                    return s.id === DEFAULT_EMS_BASEMAP;\n                  });\n\n                  if (initBasemapLayer) {\n                    this._setTmsLayer(initBasemapLayer);\n                  }\n                  _context3.next = 18;\n                  break;\n\n                case 14:\n                  _context3.prev = 14;\n                  _context3.t0 = _context3['catch'](5);\n\n                  _notify.toastNotifications.addWarning(_context3.t0.message);\n                  return _context3.abrupt('return');\n\n                case 18:\n                  return _context3.abrupt('return');\n\n                case 19:\n\n                  try {\n                    if (this._wmsConfigured()) {\n                      if (WMS_MINZOOM > this._kibanaMap.getMaxZoomLevel()) {\n                        this._kibanaMap.setMinZoom(WMS_MINZOOM);\n                        this._kibanaMap.setMaxZoom(WMS_MAXZOOM);\n                      }\n\n                      this._kibanaMap.setBaseLayer({\n                        baseLayerType: 'wms',\n                        options: _extends({\n                          minZoom: WMS_MINZOOM,\n                          maxZoom: WMS_MAXZOOM,\n                          url: mapParams.wms.url\n                        }, mapParams.wms.options)\n                      });\n                    } else if (this._tmsConfigured()) {\n                      selectedTmsLayer = mapParams.wms.selectedTmsLayer;\n\n                      this._setTmsLayer(selectedTmsLayer);\n                    }\n                  } catch (tmsLoadingError) {\n                    _notify.toastNotifications.addWarning(tmsLoadingError.message);\n                  }\n\n                case 20:\n                case 'end':\n                  return _context3.stop();\n              }\n            }\n          }, _callee3, this, [[5, 14]]);\n        }));\n\n        function _updateBaseLayer() {\n          return _ref3.apply(this, arguments);\n        }\n\n        return _updateBaseLayer;\n      }()\n    }, {\n      key: '_setTmsLayer',\n      value: function () {\n        var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(tmsLayer) {\n          var url, showZoomMessage, options;\n          return regeneratorRuntime.wrap(function _callee4$(_context4) {\n            while (1) {\n              switch (_context4.prev = _context4.next) {\n                case 0:\n                  this._kibanaMap.setMinZoom(tmsLayer.minZoom);\n                  this._kibanaMap.setMaxZoom(tmsLayer.maxZoom);\n                  if (this._kibanaMap.getZoomLevel() > tmsLayer.maxZoom) {\n                    this._kibanaMap.setZoomLevel(tmsLayer.maxZoom);\n                  }\n                  _context4.next = 5;\n                  return emsServiceSettings;\n\n                case 5:\n                  _context4.t0 = tmsLayer;\n                  _context4.next = 8;\n                  return _context4.sent.getUrlTemplateForTMSLayer(_context4.t0);\n\n                case 8:\n                  url = _context4.sent;\n                  showZoomMessage = serviceSettings.shouldShowZoomMessage(tmsLayer);\n                  options = _lodash2.default.cloneDeep(tmsLayer);\n\n                  delete options.id;\n                  delete options.url;\n                  this._kibanaMap.setBaseLayer({\n                    baseLayerType: 'tms',\n                    options: _extends({ url: url, showZoomMessage: showZoomMessage }, options)\n                  });\n\n                case 14:\n                case 'end':\n                  return _context4.stop();\n              }\n            }\n          }, _callee4, this);\n        }));\n\n        function _setTmsLayer(_x3) {\n          return _ref4.apply(this, arguments);\n        }\n\n        return _setTmsLayer;\n      }()\n    }, {\n      key: '_updateData',\n      value: function () {\n        var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {\n          return regeneratorRuntime.wrap(function _callee5$(_context5) {\n            while (1) {\n              switch (_context5.prev = _context5.next) {\n                case 0:\n                  throw new Error(i18n('tileMap.baseMapsVisualization.childShouldImplementMethodErrorMessage', {\n                    defaultMessage: 'Child should implement this method to respond to data-update'\n                  }));\n\n                case 1:\n                case 'end':\n                  return _context5.stop();\n              }\n            }\n          }, _callee5, this);\n        }));\n\n        function _updateData() {\n          return _ref5.apply(this, arguments);\n        }\n\n        return _updateData;\n      }()\n    }, {\n      key: '_hasESResponseChanged',\n      value: function _hasESResponseChanged(data) {\n        return this._chartData !== data;\n      }\n\n      /**\n       * called on options change (vis.params change)\n       */\n\n    }, {\n      key: '_updateParams',\n      value: function () {\n        var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {\n          var mapParams;\n          return regeneratorRuntime.wrap(function _callee6$(_context6) {\n            while (1) {\n              switch (_context6.prev = _context6.next) {\n                case 0:\n                  mapParams = this._getMapsParams();\n                  _context6.next = 3;\n                  return this._updateBaseLayer();\n\n                case 3:\n                  this._kibanaMap.setLegendPosition(mapParams.legendPosition);\n                  this._kibanaMap.setShowTooltip(mapParams.addTooltip);\n                  this._kibanaMap.useUiStateFromVisualization(this.vis);\n\n                case 6:\n                case 'end':\n                  return _context6.stop();\n              }\n            }\n          }, _callee6, this);\n        }));\n\n        function _updateParams() {\n          return _ref6.apply(this, arguments);\n        }\n\n        return _updateParams;\n      }()\n    }, {\n      key: '_getMapsParams',\n      value: function _getMapsParams() {\n        return _lodash2.default.assign({}, this.vis.type.visConfig.defaults, { type: this.vis.type.name }, this.vis.params);\n      }\n    }, {\n      key: '_whenBaseLayerIsLoaded',\n      value: function _whenBaseLayerIsLoaded() {\n        var _this2 = this;\n\n        if (!this._tmsConfigured()) {\n          return true;\n        }\n\n        var maxTimeForBaseLayer = 10000;\n        var interval$ = Rx.interval(10).pipe((0, _operators.filter)(function () {\n          return !_this2._baseLayerDirty;\n        }));\n        var timer$ = Rx.timer(maxTimeForBaseLayer);\n\n        return Rx.race(interval$, timer$).pipe((0, _operators.first)()).toPromise();\n      }\n    }]);\n\n    return BaseMapsVisualization;\n  }();\n}",null]}