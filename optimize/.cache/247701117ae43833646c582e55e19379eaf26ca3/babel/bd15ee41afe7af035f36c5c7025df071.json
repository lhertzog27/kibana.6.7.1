{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/ui/public/filter_bar/lib/map_range.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/filter_bar/lib/map_range.js","mtime":1567631711732},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FilterBarLibMapRangeProvider = FilterBarLibMapRangeProvider;\n\nvar _lodash = require('lodash');\n\nvar _errors = require('../../errors');\n\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nfunction FilterBarLibMapRangeProvider(Promise, indexPatterns) {\n  return function (filter) {\n    var isScriptedRangeFilter = isScriptedRange(filter);\n    if (!filter.range && !isScriptedRangeFilter) {\n      return Promise.reject(filter);\n    }\n\n    function getParams(indexPattern) {\n      var type = 'range';\n      var key = isScriptedRangeFilter ? filter.meta.field : Object.keys(filter.range)[0];\n      var params = isScriptedRangeFilter ? filter.script.script.params : filter.range[key];\n\n      var left = (0, _lodash.has)(params, 'gte') ? params.gte : params.gt;\n      if (left == null) left = -Infinity;\n\n      var right = (0, _lodash.has)(params, 'lte') ? params.lte : params.lt;\n      if (right == null) right = Infinity;\n\n      // Sometimes a filter will end up with an invalid index param. This could happen for a lot of reasons,\n      // for example a user might manually edit the url or the index pattern's ID might change due to\n      // external factors e.g. a reindex. We only need the index in order to grab the field formatter, so we fallback\n      // on displaying the raw value if the index is invalid.\n      var value = left + ' to ' + right;\n      if (indexPattern) {\n        var convert = indexPattern.fields.byName[key].format.getConverterFor('text');\n        value = convert(left) + ' to ' + convert(right);\n      }\n\n      return { type: type, key: key, value: value, params: params };\n    }\n\n    return indexPatterns.get(filter.meta.index).then(getParams).catch(function (error) {\n      if (error instanceof _errors.SavedObjectNotFound) {\n        return getParams();\n      }\n      throw error;\n    });\n  };\n}\n\nfunction isScriptedRange(filter) {\n  var params = (0, _lodash.get)(filter, ['script', 'script', 'params']);\n  return params && Object.keys(params).find(function (key) {\n    return ['gte', 'gt', 'lte', 'lt'].includes(key);\n  });\n}",null]}