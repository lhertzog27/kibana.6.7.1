{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/ui/public/timepicker/parse_relative_parts.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/timepicker/parse_relative_parts.js","mtime":1567631711762},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseRelativeString = parseRelativeString;\nexports.parseRelativeParts = parseRelativeParts;\n\nvar _datemath = require('@elastic/datemath');\n\nvar _datemath2 = _interopRequireDefault(_datemath);\n\nvar _moment = require('moment');\n\nvar _moment2 = _interopRequireDefault(_moment);\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _relative_options = require('./relative_options');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nfunction parseRelativeString(part) {\n  var results = {};\n  var matches = _lodash2.default.isString(part) && part.match(/now(([\\-\\+])([0-9]+)([smhdwMy])(\\/[smhdwMy])?)?/);\n\n  var isNow = matches && !matches[1];\n  var operator = matches && matches[2];\n  var count = matches && matches[3];\n  var unit = matches && matches[4];\n  var roundBy = matches && matches[5];\n\n  if (isNow) {\n    return { count: 0, unit: 's', round: false };\n  }\n\n  if (count && unit) {\n    results.count = parseInt(count, 10);\n    results.unit = unit;\n    if (operator === '+') results.unit += '+';\n    results.round = roundBy ? true : false;\n    return results;\n  } else {\n    results = { count: 0, unit: 's', round: false };\n    var duration = _moment2.default.duration((0, _moment2.default)().diff(_datemath2.default.parse(part)));\n    var units = _lodash2.default.pluck(_lodash2.default.clone(_relative_options.relativeOptions).reverse(), 'value').filter(function (s) {\n      return (/^[smhdwMy]$/.test(s)\n      );\n    });\n    var unitOp = '';\n    for (var i = 0; i < units.length; i++) {\n      var as = duration.as(units[i]);\n      if (as < 0) unitOp = '+';\n      if (Math.abs(as) > 1) {\n        results.count = Math.round(Math.abs(as));\n        results.unit = units[i] + unitOp;\n        results.round = false;\n        break;\n      }\n    }\n    return results;\n  }\n}\n\nfunction parseRelativeParts(from, to) {\n  var results = {};\n  results.from = parseRelativeString(from);\n  results.to = parseRelativeString(to);\n  if (results.from && results.to) return results;\n}",null]}