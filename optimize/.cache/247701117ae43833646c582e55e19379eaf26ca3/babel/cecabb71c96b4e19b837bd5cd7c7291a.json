{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/ui/public/filter_bar/filter_bar.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/filter_bar/filter_bar.js","mtime":1567631711729},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toggleFilterDisabled = exports.enableFilter = exports.disableFilter = undefined;\n\nvar _disable_filter = require('./lib/disable_filter');\n\nObject.defineProperty(exports, 'disableFilter', {\n  enumerable: true,\n  get: function get() {\n    return _disable_filter.disableFilter;\n  }\n});\nObject.defineProperty(exports, 'enableFilter', {\n  enumerable: true,\n  get: function get() {\n    return _disable_filter.enableFilter;\n  }\n});\nObject.defineProperty(exports, 'toggleFilterDisabled', {\n  enumerable: true,\n  get: function get() {\n    return _disable_filter.toggleFilterDisabled;\n  }\n});\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _filter_bar = require('./filter_bar.html');\n\nvar _filter_bar2 = _interopRequireDefault(_filter_bar);\n\nrequire('../directives/json_input');\n\nrequire('../filter_editor');\n\nrequire('./filter_pill/filter_pill');\n\nvar _filter_applied_and_unwrap = require('./lib/filter_applied_and_unwrap');\n\nvar _map_and_flatten_filters = require('./lib/map_and_flatten_filters');\n\nvar _map_flatten_and_wrap_filters = require('./lib/map_flatten_and_wrap_filters');\n\nvar _extract_time_filter = require('./lib/extract_time_filter');\n\nvar _filter_out_time_based_filter = require('./lib/filter_out_time_based_filter');\n\nvar _change_time_filter = require('./lib/change_time_filter');\n\nvar _query_filter = require('./query_filter');\n\nvar _compare_filters = require('./lib/compare_filters');\n\nvar _modules = require('../modules');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _module = _modules.uiModules.get('kibana');\n\n_module.directive('filterBar', function (Private, Promise, getAppState, i18n) {\n  var mapAndFlattenFilters = Private(_map_and_flatten_filters.FilterBarLibMapAndFlattenFiltersProvider);\n  var mapFlattenAndWrapFilters = Private(_map_flatten_and_wrap_filters.FilterBarLibMapFlattenAndWrapFiltersProvider);\n  var extractTimeFilter = Private(_extract_time_filter.FilterBarLibExtractTimeFilterProvider);\n  var filterOutTimeBasedFilter = Private(_filter_out_time_based_filter.FilterBarLibFilterOutTimeBasedFilterProvider);\n  var queryFilter = Private(_query_filter.FilterBarQueryFilterProvider);\n\n  return {\n    template: _filter_bar2.default,\n    restrict: 'E',\n    scope: {\n      indexPatterns: '=',\n      tooltipContent: '='\n    },\n    link: function link($scope, $elem) {\n      // bind query filter actions to the scope\n      ['addFilters', 'toggleFilter', 'toggleAll', 'pinFilter', 'pinAll', 'invertFilter', 'invertAll', 'removeFilter', 'removeAll'].forEach(function (method) {\n        $scope[method] = queryFilter[method];\n      });\n\n      $scope.state = getAppState();\n\n      $scope.showCollapseLink = function () {\n        var pill = $elem.find('filter-pill');\n        return pill[pill.length - 1].offsetTop > 10;\n      };\n\n      var collapseFilterTooltip = i18n('common.ui.filterBar.collapseFilterTooltip', {\n        defaultMessage: 'Collapse filter bar \\n to show less'\n      });\n      var expandFilterTooltip = i18n('common.ui.filterBar.expandFilterTooltip', { defaultMessage: 'Expand filter bar \\n to show more' });\n\n      $scope.filterNavToggle = {\n        isOpen: true,\n        tooltipContent: collapseFilterTooltip\n      };\n\n      $scope.toggleFilterShown = function () {\n        var collapser = $elem.find('.filter-nav-link__collapser');\n        var filterPanelPill = $elem.find('.filter-panel__pill');\n        if ($scope.filterNavToggle.isOpen) {\n          $scope.filterNavToggle.tooltipContent = expandFilterTooltip;\n          collapser.attr('aria-expanded', 'false');\n          filterPanelPill.attr('style', 'width: calc(100% - 80px)');\n        } else {\n          $scope.filterNavToggle.tooltipContent = collapseFilterTooltip;\n          collapser.attr('aria-expanded', 'true');\n          filterPanelPill.attr('style', 'width: auto');\n        }\n\n        $scope.filterNavToggle.isOpen = !$scope.filterNavToggle.isOpen;\n      };\n\n      $scope.applyFilters = function (filters) {\n        addAndInvertFilters((0, _filter_applied_and_unwrap.filterAppliedAndUnwrap)(filters));\n        $scope.newFilters = [];\n\n        // change time filter\n        if ($scope.changeTimeFilter && $scope.changeTimeFilter.meta && $scope.changeTimeFilter.meta.apply) {\n          (0, _change_time_filter.changeTimeFilter)($scope.changeTimeFilter);\n        }\n      };\n\n      $scope.addFilter = function () {\n        $scope.editingFilter = {\n          meta: { isNew: true }\n        };\n      };\n\n      $scope.deleteFilter = function (filter) {\n        $scope.removeFilter(filter);\n        if (filter === $scope.editingFilter) $scope.cancelEdit();\n      };\n\n      $scope.editFilter = function (filter) {\n        $scope.editingFilter = filter;\n      };\n\n      $scope.cancelEdit = function () {\n        delete $scope.editingFilter;\n      };\n\n      $scope.saveEdit = function (filter, newFilter, isPinned) {\n        if (!filter.meta.isNew) $scope.removeFilter(filter);\n        delete $scope.editingFilter;\n        $scope.addFilters([newFilter], isPinned);\n      };\n\n      $scope.clearFilterBar = function () {\n        $scope.newFilters = [];\n        $scope.changeTimeFilter = null;\n      };\n\n      // update the scope filter list on filter changes\n      $scope.$listen(queryFilter, 'update', function () {\n        updateFilters();\n      });\n\n      // when appState changes, update scope's state\n      $scope.$watch(getAppState, function (appState) {\n        $scope.state = appState;\n      });\n\n      $scope.$watch('state.$newFilters', function (filters) {\n        if (!filters) return;\n\n        // If filters is not undefined and the length is greater than\n        // one we need to set the newFilters attribute and allow the\n        // users to decide what they want to apply.\n        if (filters.length > 1) {\n          return mapFlattenAndWrapFilters(filters).then(function (results) {\n            extractTimeFilter(results).then(function (filter) {\n              $scope.changeTimeFilter = filter;\n            });\n            return results;\n          }).then(filterOutTimeBasedFilter).then(function (results) {\n            $scope.newFilters = results;\n          });\n        }\n\n        // Just add single filters to the state.\n        if (filters.length === 1) {\n          Promise.resolve(filters).then(function (filters) {\n            extractTimeFilter(filters).then(function (timeFilter) {\n              if (timeFilter) (0, _change_time_filter.changeTimeFilter)(timeFilter);\n            });\n            return filters;\n          }).then(filterOutTimeBasedFilter).then(addAndInvertFilters);\n        }\n      });\n\n      function addAndInvertFilters(filters) {\n        var existingFilters = queryFilter.getFilters();\n        var inversionFilters = _lodash2.default.filter(existingFilters, function (existingFilter) {\n          var newMatchingFilter = _lodash2.default.find(filters, _lodash2.default.partial(_compare_filters.compareFilters, existingFilter));\n          return newMatchingFilter && newMatchingFilter.meta && existingFilter.meta && existingFilter.meta.negate !== newMatchingFilter.meta.negate;\n        });\n        var newFilters = _lodash2.default.reject(filters, function (filter) {\n          return _lodash2.default.find(inversionFilters, _lodash2.default.partial(_compare_filters.compareFilters, filter));\n        });\n\n        _lodash2.default.forEach(inversionFilters, $scope.invertFilter);\n        $scope.addFilters(newFilters);\n      }\n\n      function updateFilters() {\n        var filters = queryFilter.getFilters();\n        mapAndFlattenFilters(filters).then(function (results) {\n          // used to display the current filters in the state\n          $scope.filters = _lodash2.default.sortBy(results, function (filter) {\n            return !filter.meta.pinned;\n          });\n          $scope.$emit('filterbar:updated');\n        });\n      }\n\n      updateFilters();\n    }\n  };\n});",null]}