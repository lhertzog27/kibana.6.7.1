{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/ui/public/accessibility/kbn_ui_ace_keyboard_mode.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/accessibility/kbn_ui_ace_keyboard_mode.js","mtime":1567631711691},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nvar _angular = require('angular');\n\nvar _angular2 = _interopRequireDefault(_angular);\n\nvar _modules = require('../modules');\n\nvar _eui = require('@elastic/eui');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar aceKeyboardModeId = 0; /*\n                            * Licensed to Elasticsearch B.V. under one or more contributor\n                            * license agreements. See the NOTICE file distributed with\n                            * this work for additional information regarding copyright\n                            * ownership. Elasticsearch B.V. licenses this file to you under\n                            * the Apache License, Version 2.0 (the \"License\"); you may\n                            * not use this file except in compliance with the License.\n                            * You may obtain a copy of the License at\n                            *\n                            *    http://www.apache.org/licenses/LICENSE-2.0\n                            *\n                            * Unless required by applicable law or agreed to in writing,\n                            * software distributed under the License is distributed on an\n                            * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n                            * KIND, either express or implied.  See the License for the\n                            * specific language governing permissions and limitations\n                            * under the License.\n                            */\n\n/**\n * The `kbn-ui-ace-keyboard-mode` directive should be used on any element, that\n * `ui-ace` is used on. It will prevent the keyboard trap, that ui-ace usually\n * has, i.e. tabbing into the box won't give you any possibilities to leave\n * it via keyboard again, since tab inside the textbox works like a tab character.\n *\n * This directive won't change anything, if the user uses the mouse. But if she\n * tabs to the ace editor, an overlay will be shown, that you have to press Enter\n * to enter editing mode, and that it can be left by pressing Escape again.\n *\n * That way the ui-ace editor won't trap keyboard focus, and won't cause that\n * accessibility issue anymore.\n */\n\n_modules.uiModules.get('kibana').factory('kbnUiAceKeyboardModeService', function () {\n  return {\n    initialize: function initialize(scope, element) {\n      var uniqueId = 'kbnUiAceKeyboardHint-' + scope.$id + '-' + aceKeyboardModeId++;\n\n      var hint = _angular2.default.element('<div\\n          class=\"kbnUiAceKeyboardHint\"\\n          id=\"' + uniqueId + '\"\\n          tabindex=\"0\"\\n          role=\"application\"\\n        >\\n          <p class=\"kuiText kuiVerticalRhythmSmall\">\\n            Press Enter to start editing.\\n          </p>\\n          <p class=\"kuiText kuiVerticalRhythmSmall\">\\n            When you&rsquo;re done, press Escape to stop editing.\\n          </p>\\n        </div>');\n\n      var uiAceTextbox = element.find('textarea');\n\n      function startEditing() {\n        // We are not using ng-class in the element, so that we won't need to $compile it\n        hint.addClass('kbnUiAceKeyboardHint-isInactive');\n        uiAceTextbox.focus();\n      }\n\n      function enableOverlay() {\n        hint.removeClass('kbnUiAceKeyboardHint-isInactive');\n      }\n\n      hint.keydown(function (ev) {\n        if (ev.keyCode === _eui.keyCodes.ENTER) {\n          ev.preventDefault();\n          startEditing();\n        }\n      });\n\n      uiAceTextbox.blur(function () {\n        enableOverlay();\n      });\n\n      var isAutoCompleterOpen = void 0;\n\n      // We have to capture this event on the 'capture' phase, otherwise Ace will have already\n      // dismissed the autocompleter when the user hits ESC.\n      document.addEventListener('keydown', function () {\n        var autoCompleter = document.querySelector('.ace_autocomplete');\n\n        if (!autoCompleter) {\n          isAutoCompleterOpen = false;\n          return;\n        }\n\n        // The autoComplete is just hidden when it's closed, not removed from the DOM.\n        isAutoCompleterOpen = autoCompleter.style.display !== 'none';\n      }, { capture: true });\n\n      uiAceTextbox.keydown(function (ev) {\n        if (ev.keyCode === _eui.keyCodes.ESCAPE) {\n          // If the autocompletion context menu is open then we want to let ESC close it but\n          // **not** exit out of editing mode.\n          if (!isAutoCompleterOpen) {\n            ev.preventDefault();\n            ev.stopPropagation();\n            enableOverlay();\n            hint.focus();\n          }\n        }\n      });\n\n      hint.click(startEditing);\n      // Prevent tabbing into the ACE textarea, we now handle all focusing for it\n      uiAceTextbox.attr('tabindex', '-1');\n      element.prepend(hint);\n    }\n  };\n}).directive('kbnUiAceKeyboardMode', function (kbnUiAceKeyboardModeService) {\n  return {\n    restrict: 'A',\n    link: function link(scope, element) {\n      kbnUiAceKeyboardModeService.initialize(scope, element);\n    }\n  };\n});",null]}