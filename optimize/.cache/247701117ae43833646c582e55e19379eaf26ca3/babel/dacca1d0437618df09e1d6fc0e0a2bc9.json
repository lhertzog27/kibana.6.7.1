{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/ui/public/courier/fetch/call_response_handlers.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/courier/fetch/call_response_handlers.js","mtime":1567631711712},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CallResponseHandlersProvider = CallResponseHandlersProvider;\n\nvar _notify = require('../../notify');\n\nvar _errors = require('../../errors');\n\nvar _req_status = require('./req_status');\n\nvar _search_error = require('../search_strategy/search_error');\n\nvar _i18n = require('@kbn/i18n');\n\nfunction CallResponseHandlersProvider(Private, Promise) {\n  var ABORTED = _req_status.RequestStatus.ABORTED;\n  var INCOMPLETE = _req_status.RequestStatus.INCOMPLETE;\n\n  function callResponseHandlers(searchRequests, responses) {\n    return Promise.map(searchRequests, function (searchRequest, index) {\n      if (searchRequest === ABORTED || searchRequest.aborted) {\n        return ABORTED;\n      }\n\n      var response = responses[index];\n\n      if (response.timed_out) {\n        _notify.toastNotifications.addWarning({\n          title: _i18n.i18n.translate('common.ui.courier.fetch.requestTimedOutNotificationMessage', {\n            defaultMessage: 'Data might be incomplete because your request timed out'\n          })\n        });\n      }\n\n      if (response._shards && response._shards.failed) {\n        _notify.toastNotifications.addWarning({\n          title: _i18n.i18n.translate('common.ui.courier.fetch.shardsFailedNotificationMessage', {\n            defaultMessage: '{shardsFailed} of {shardsTotal} shards failed',\n            values: { shardsFailed: response._shards.failed, shardsTotal: response._shards.total }\n          })\n        });\n      }\n\n      function progress() {\n        if (searchRequest.isIncomplete()) {\n          return INCOMPLETE;\n        }\n\n        searchRequest.complete();\n        return response;\n      }\n\n      if (response.error) {\n        if (searchRequest.filterError(response)) {\n          return progress();\n        } else {\n          return searchRequest.handleFailure(response.error instanceof _search_error.SearchError ? response.error : new _errors.RequestFailure(null, response));\n        }\n      }\n\n      return Promise.try(function () {\n        return searchRequest.handleResponse(response);\n      }).then(progress);\n    });\n  }\n\n  return callResponseHandlers;\n} /*\n   * Licensed to Elasticsearch B.V. under one or more contributor\n   * license agreements. See the NOTICE file distributed with\n   * this work for additional information regarding copyright\n   * ownership. Elasticsearch B.V. licenses this file to you under\n   * the Apache License, Version 2.0 (the \"License\"); you may\n   * not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *    http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing,\n   * software distributed under the License is distributed on an\n   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n   * KIND, either express or implied.  See the License for the\n   * specific language governing permissions and limitations\n   * under the License.\n   */",null]}