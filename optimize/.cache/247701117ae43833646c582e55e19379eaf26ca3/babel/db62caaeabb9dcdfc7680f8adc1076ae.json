{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/ui/public/state_management/state_hashing/hash_url.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/state_management/state_hashing/hash_url.js","mtime":1567631711755},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hashUrl = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /*\n                                                                                                                                                                                                                                                                   * Licensed to Elasticsearch B.V. under one or more contributor\n                                                                                                                                                                                                                                                                   * license agreements. See the NOTICE file distributed with\n                                                                                                                                                                                                                                                                   * this work for additional information regarding copyright\n                                                                                                                                                                                                                                                                   * ownership. Elasticsearch B.V. licenses this file to you under\n                                                                                                                                                                                                                                                                   * the Apache License, Version 2.0 (the \"License\"); you may\n                                                                                                                                                                                                                                                                   * not use this file except in compliance with the License.\n                                                                                                                                                                                                                                                                   * You may obtain a copy of the License at\n                                                                                                                                                                                                                                                                   *\n                                                                                                                                                                                                                                                                   *    http://www.apache.org/licenses/LICENSE-2.0\n                                                                                                                                                                                                                                                                   *\n                                                                                                                                                                                                                                                                   * Unless required by applicable law or agreed to in writing,\n                                                                                                                                                                                                                                                                   * software distributed under the License is distributed on an\n                                                                                                                                                                                                                                                                   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n                                                                                                                                                                                                                                                                   * KIND, either express or implied.  See the License for the\n                                                                                                                                                                                                                                                                   * specific language governing permissions and limitations\n                                                                                                                                                                                                                                                                   * under the License.\n                                                                                                                                                                                                                                                                   */\n\nvar _encodeUriQuery = require('encode-uri-query');\n\nvar _encodeUriQuery2 = _interopRequireDefault(_encodeUriQuery);\n\nvar _risonNode = require('rison-node');\n\nvar _risonNode2 = _interopRequireDefault(_risonNode);\n\nvar _url = require('url');\n\nvar _querystring = require('querystring');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar conservativeStringifyQuerystring = function conservativeStringifyQuerystring(query) {\n  return (0, _querystring.stringify)(query, null, null, {\n    encodeURIComponent: _encodeUriQuery2.default\n  });\n};\n\nvar hashStateInQuery = function hashStateInQuery(state, query) {\n  var name = state.getQueryParamName();\n  var value = query[name];\n  if (!value) {\n    return { name: name, value: value };\n  }\n\n  var decodedValue = _risonNode2.default.decode(value);\n  var hashedValue = state.toQueryParam(decodedValue);\n  return { name: name, value: hashedValue };\n};\n\nvar hashStatesInQuery = function hashStatesInQuery(states, query) {\n  var hashedQuery = states.reduce(function (result, state) {\n    var _hashStateInQuery = hashStateInQuery(state, query),\n        name = _hashStateInQuery.name,\n        value = _hashStateInQuery.value;\n\n    if (value) {\n      result[name] = value;\n    }\n    return result;\n  }, {});\n\n  return _extends({}, query, hashedQuery);\n};\n\nvar hashUrl = exports.hashUrl = function hashUrl(states, redirectUrl) {\n  // we need states to proceed, throwing an error if we don't have any\n  if (states === null || !states.length) {\n    throw new Error('states parameter must be an Array with length greater than 0');\n  }\n\n  var parsedUrl = (0, _url.parse)(redirectUrl);\n  // if we don't have a hash, we return the redirectUrl without hashing anything\n  if (!parsedUrl.hash) {\n    return redirectUrl;\n  }\n\n  // The URLs that we use aren't \"conventional\" and the hash is sometimes appearing before\n  // the querystring, even though conventionally they appear after it. The parsedUrl\n  // is the entire URL, and the parsedAppUrl is everything after the hash.\n  //\n  // EXAMPLE\n  // parsedUrl: /app/kibana#/visualize/edit/somelongguid?g=()&a=()\n  // parsedAppUrl: /visualize/edit/somelongguid?g=()&a=()\n  var parsedAppUrl = (0, _url.parse)(parsedUrl.hash.slice(1), true);\n\n  // the parsedAppUrl actually has the query that we care about\n  var query = parsedAppUrl.query;\n\n  var newQuery = hashStatesInQuery(states, query);\n\n  var newHash = (0, _url.format)({\n    search: conservativeStringifyQuerystring(newQuery),\n    pathname: parsedAppUrl.pathname\n  });\n\n  return (0, _url.format)({\n    hash: '#' + newHash,\n    host: parsedUrl.host,\n    search: parsedUrl.search,\n    pathname: parsedUrl.pathname,\n    protocol: parsedUrl.protocol\n  });\n};",null]}