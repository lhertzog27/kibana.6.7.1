{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/ui/public/timepicker/kbn_global_timepicker.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/timepicker/kbn_global_timepicker.js","mtime":1567631711761},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nvar _modules = require('../modules');\n\nvar _kbn_global_timepicker = require('./kbn_global_timepicker.html');\n\nvar _kbn_global_timepicker2 = _interopRequireDefault(_kbn_global_timepicker);\n\nvar _time_navigation = require('./time_navigation');\n\nvar _timefilter = require('ui/timefilter');\n\nvar _pretty_duration = require('./pretty_duration');\n\nvar _pretty_interval = require('./pretty_interval');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n_modules.uiModules.get('kibana').directive('kbnGlobalTimepicker', function (globalState, config) {\n  var getConfig = function getConfig() {\n    return config.get.apply(config, arguments);\n  };\n\n  var listenForUpdates = function listenForUpdates($scope) {\n    $scope.$listenAndDigestAsync(_timefilter.timefilter, 'refreshIntervalUpdate', function () {\n      setTimefilterValues($scope);\n    });\n    $scope.$listenAndDigestAsync(_timefilter.timefilter, 'timeUpdate', function () {\n      setTimefilterValues($scope);\n    });\n    $scope.$listenAndDigestAsync(_timefilter.timefilter, 'enabledUpdated', function () {\n      setTimefilterValues($scope);\n    });\n  };\n\n  function setTimefilterValues($scope) {\n    var time = _timefilter.timefilter.getTime();\n    var refreshInterval = _timefilter.timefilter.getRefreshInterval();\n    $scope.timefilterValues = {\n      refreshInterval: refreshInterval,\n      time: time,\n      display: {\n        time: (0, _pretty_duration.prettyDuration)(time.from, time.to, getConfig),\n        refreshInterval: (0, _pretty_interval.prettyInterval)(refreshInterval.value)\n      },\n      isAutoRefreshSelectorEnabled: _timefilter.timefilter.isAutoRefreshSelectorEnabled,\n      isTimeRangeSelectorEnabled: _timefilter.timefilter.isTimeRangeSelectorEnabled\n    };\n  }\n\n  return {\n    template: _kbn_global_timepicker2.default,\n    replace: true,\n    require: '^kbnTopNav',\n    link: function link($scope, element, attributes, kbnTopNav) {\n      listenForUpdates($scope);\n\n      setTimefilterValues($scope);\n\n      $scope.toggleRefresh = function () {\n        _timefilter.timefilter.toggleRefresh();\n      };\n\n      $scope.forward = function () {\n        _timefilter.timefilter.setTime(_time_navigation.timeNavigation.stepForward(_timefilter.timefilter.getBounds()));\n      };\n\n      $scope.back = function () {\n        _timefilter.timefilter.setTime(_time_navigation.timeNavigation.stepBackward(_timefilter.timefilter.getBounds()));\n      };\n\n      $scope.updateFilter = function (from, to, mode) {\n        _timefilter.timefilter.setTime({ from: from, to: to, mode: mode });\n        kbnTopNav.close('filter');\n      };\n\n      $scope.updateInterval = function (interval) {\n        _timefilter.timefilter.setRefreshInterval(interval);\n        kbnTopNav.close('interval');\n      };\n\n      $scope.getSharedTimeFilterFromDate = function () {\n        return _timefilter.timefilter.isAutoRefreshSelectorEnabled || _timefilter.timefilter.isTimeRangeSelectorEnabled ? _timefilter.timefilter.getBounds().min.clone().utc().format() : null;\n      };\n\n      $scope.getSharedTimeFilterToDate = function () {\n        return _timefilter.timefilter.isAutoRefreshSelectorEnabled || _timefilter.timefilter.isTimeRangeSelectorEnabled ? _timefilter.timefilter.getBounds().max.clone().utc().format() : null;\n      };\n    }\n  };\n});",null]}