{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/legacy/core_plugins/tagcloud/public/tag_cloud_visualization.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/legacy/core_plugins/tagcloud/public/tag_cloud_visualization.js","mtime":1567631711643},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TagCloudVisualization = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\nicensed to Elasticsearch B.V. under one or more contributor\nlicense agreements. See the NOTICE file distributed with\nthis work for additional information regarding copyright\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * ownership. Elasticsearch B.V. licenses this file to you under\nthe Apache License, Version 2.0 (the \"License\"); you may\nnot use this file except in compliance with the License.\nou may obtain a copy of the License at\nnhttp://www.apache.org/licenses/LICENSE-2.0\nnnless required by applicable law or agreed to in writing,\nsoftware distributed under the License is distributed on an\nneither express or implied.  See the License for the\nspecific language governing permissions and limitations\nunder the License.\nn\nvar _tag_cloud = require('./tag_cloud');\n\nvar _tag_cloud2 = _interopRequireDefault(_tag_cloud);\n\nvar _rxjs = require('rxjs');\n\nvar Rx = _interopRequireWildcard(_rxjs);\n\nvar _operators = require('rxjs/operators');\n\nvar _reactDom = require('react-dom');\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _i18n = require('ui/i18n');\n\nvar _label = require('./label');\n\nvar _feedback_message = require('./feedback_message');\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar MAX_TAG_COUNT = 200;\n\nvar TagCloudVisualization = exports.TagCloudVisualization = function () {\n  function TagCloudVisualization(node, vis) {\n    var _this = this;\n\n    _classCallCheck(this, TagCloudVisualization);\n\n    this._containerNode = node;\n\n    var cloudContainer = document.createElement('div');\n    cloudContainer.classList.add('tgcVis');\n    cloudContainer.setAttribute('data-test-subj', 'tagCloudVisualization');\n    this._containerNode.appendChild(cloudContainer);\n\n    this._vis = vis;\n    this._bucketAgg = null;\n    this._truncated = false;\n    this._tagCloud = new _tag_cloud2.default(cloudContainer);\n    this._tagCloud.on('select', function (event) {\n      if (!_this._bucketAgg) {\n        return;\n      }\n      _this._vis.API.events.filter({\n        table: event.meta.data, column: 0, row: event.meta.rowIndex\n      });\n    });\n    this._renderComplete$ = Rx.fromEvent(this._tagCloud, 'renderComplete');\n\n    this._feedbackNode = document.createElement('div');\n    this._containerNode.appendChild(this._feedbackNode);\n    this._feedbackMessage = _react2.default.createRef();\n    (0, _reactDom.render)(_react2.default.createElement(\n      _i18n.I18nContext,\n      null,\n      _react2.default.createElement(_feedback_message.FeedbackMessage, { ref: this._feedbackMessage })\n    ), this._feedbackNode);\n\n    this._labelNode = document.createElement('div');\n    this._containerNode.appendChild(this._labelNode);\n    this._label = _react2.default.createRef();\n    (0, _reactDom.render)(_react2.default.createElement(_label.Label, { ref: this._label }), this._labelNode);\n  }\n\n  _createClass(TagCloudVisualization, [{\n    key: 'render',\n    value: function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(data, status) {\n        var hasAggDefined;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (status.resize || status.data || status.params) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt('return');\n\n              case 2:\n\n                if (status.params || status.aggs) {\n                  this._updateParams();\n                }\n\n                if (status.data) {\n                  this._updateData(data);\n                }\n\n                if (status.resize) {\n                  this._resize();\n                }\n\n                _context.next = 7;\n                return this._renderComplete$.pipe((0, _operators.take)(1)).toPromise();\n\n              case 7:\n                hasAggDefined = this._vis.aggs[0] && this._vis.aggs[1];\n\n                if (hasAggDefined) {\n                  _context.next = 11;\n                  break;\n                }\n\n                this._feedbackMessage.current.setState({\n                  shouldShowTruncate: false,\n                  shouldShowIncomplete: false\n                });\n                return _context.abrupt('return');\n\n              case 11:\n                this._label.current.setState({\n                  label: this._vis.aggs[0].makeLabel() + ' - ' + this._vis.aggs[1].makeLabel(),\n                  shouldShowLabel: this._vis.params.showLabel\n                });\n                this._feedbackMessage.current.setState({\n                  shouldShowTruncate: this._truncated,\n                  shouldShowIncomplete: this._tagCloud.getStatus() === _tag_cloud2.default.STATUS.INCOMPLETE\n                });\n\n              case 13:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function render(_x, _x2) {\n        return _ref.apply(this, arguments);\n      }\n\n      return render;\n    }()\n  }, {\n    key: 'destroy',\n    value: function destroy() {\n      this._tagCloud.destroy();\n      (0, _reactDom.unmountComponentAtNode)(this._feedbackNode);\n      (0, _reactDom.unmountComponentAtNode)(this._labelNode);\n    }\n  }, {\n    key: '_updateData',\n    value: function _updateData(data) {\n      var _this2 = this;\n\n      if (!data || !data.rows.length) {\n        this._tagCloud.setData([]);\n        return;\n      }\n\n      var segmentAggs = this._vis.aggs.bySchemaName.segment;\n      if (segmentAggs && segmentAggs.length > 0) {\n        this._bucketAgg = segmentAggs[0];\n      } else {\n        this._bucketAgg = null;\n      }\n\n      var hasTags = data.columns.length === 2;\n      var tagColumn = hasTags ? data.columns[0].id : -1;\n      var metricColumn = data.columns[hasTags ? 1 : 0].id;\n      var tags = data.rows.map(function (row, rowIndex) {\n        var tag = row[tagColumn] || 'all';\n        var metric = row[metricColumn];\n        return {\n          displayText: _this2._bucketAgg ? _this2._bucketAgg.fieldFormatter()(tag) : tag,\n          rawText: tag,\n          value: metric,\n          meta: {\n            data: data,\n            rowIndex: rowIndex\n          }\n        };\n      });\n\n      if (tags.length > MAX_TAG_COUNT) {\n        tags.length = MAX_TAG_COUNT;\n        this._truncated = true;\n      } else {\n        this._truncated = false;\n      }\n\n      this._tagCloud.setData(tags);\n    }\n  }, {\n    key: '_updateParams',\n    value: function _updateParams() {\n      this._tagCloud.setOptions(this._vis.params);\n    }\n  }, {\n    key: '_resize',\n    value: function _resize() {\n      this._tagCloud.resize();\n    }\n  }]);\n\n  return TagCloudVisualization;\n}();",null]}