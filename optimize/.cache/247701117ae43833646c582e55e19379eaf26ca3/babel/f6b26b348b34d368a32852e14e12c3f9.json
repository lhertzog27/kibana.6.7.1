{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/ui/public/directives/file_upload.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/directives/file_upload.js","mtime":1567631711717},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _jquery = require('jquery');\n\nvar _jquery2 = _interopRequireDefault(_jquery);\n\nvar _modules = require('../modules');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _module = _modules.uiModules.get('kibana'); /*\n                                                 * Licensed to Elasticsearch B.V. under one or more contributor\n                                                 * license agreements. See the NOTICE file distributed with\n                                                 * this work for additional information regarding copyright\n                                                 * ownership. Elasticsearch B.V. licenses this file to you under\n                                                 * the Apache License, Version 2.0 (the \"License\"); you may\n                                                 * not use this file except in compliance with the License.\n                                                 * You may obtain a copy of the License at\n                                                 *\n                                                 *    http://www.apache.org/licenses/LICENSE-2.0\n                                                 *\n                                                 * Unless required by applicable law or agreed to in writing,\n                                                 * software distributed under the License is distributed on an\n                                                 * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n                                                 * KIND, either express or implied.  See the License for the\n                                                 * specific language governing permissions and limitations\n                                                 * under the License.\n                                                 */\n\nvar html = '<span class=\"dropzone\" ng-transclude></span>';\n\n_module.directive('fileUpload', function () {\n  return {\n    restrict: 'E',\n    transclude: true,\n    scope: {\n      onRead: '&',\n      onLocate: '&',\n      uploadSelector: '@'\n    },\n    template: html,\n    link: function link($scope, $elem, attrs) {\n      var $button = $elem.find($scope.uploadSelector);\n      var $dropzone = $elem.find('.dropzone');\n\n      var handleFile = function handleFile(file) {\n        if (_lodash2.default.isUndefined(file)) return;\n\n        if (_lodash2.default.has(attrs, 'onRead')) {\n          var reader = new FileReader();\n          reader.onload = function (e) {\n            $scope.$apply(function () {\n              $scope.onRead({ fileContents: e.target.result });\n            });\n          };\n          reader.readAsText(file);\n        }\n\n        if (_lodash2.default.has(attrs, 'onLocate')) {\n          $scope.$apply(function () {\n            $scope.onLocate({ file: file });\n          });\n        }\n      };\n\n      $dropzone.on('dragover', function (e) {\n        e.preventDefault();\n        e.stopPropagation();\n      });\n\n      $dropzone.on('dragenter', function (e) {\n        e.preventDefault();\n        e.stopPropagation();\n      });\n\n      $dropzone.on('drop', function (e) {\n        e.stopPropagation();\n        e.preventDefault();\n        var file = _lodash2.default.get(e, 'originalEvent.dataTransfer.files[0]');\n\n        if (file) {\n          handleFile(file);\n        }\n      });\n\n      if ($button) {\n        var $fileInput = (0, _jquery2.default)('<input type=\"file\" style=\"opacity: 0;' + ' display:none; position:absolute; right: -999999999px\" id=\"testfile\" />');\n        $elem.append($fileInput);\n\n        $fileInput.on('change', function (e) {\n          var target = e.srcElement || e.target;\n          if (_lodash2.default.get(target, 'files.length')) {\n            handleFile(target.files[0]);\n          }\n        });\n\n        $button.on('click', function () {\n          $fileInput.val(null);\n          $fileInput.trigger('click');\n        });\n      }\n    }\n  };\n});",null]}