{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/ui/public/index_patterns/_flatten_hit.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/index_patterns/_flatten_hit.js","mtime":1567631711738},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.IndexPatternsFlattenHitProvider = IndexPatternsFlattenHitProvider;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Takes a hit, merges it with any stored/scripted fields, and with the metaFields\n// returns a flattened version\nfunction IndexPatternsFlattenHitProvider(config) {\n  var metaFields = config.get('metaFields');\n\n  config.watch('metaFields', function (value) {\n    metaFields = value;\n  });\n\n  function flattenHit(indexPattern, hit, deep) {\n    var flat = {};\n\n    // recursively merge _source\n    var fields = indexPattern.fields.byName;\n    (function flatten(obj, keyPrefix) {\n      keyPrefix = keyPrefix ? keyPrefix + '.' : '';\n      _lodash2.default.forOwn(obj, function (val, key) {\n        key = keyPrefix + key;\n\n        if (deep) {\n          var isNestedField = fields[key] && fields[key].type === 'nested';\n          var isArrayOfObjects = Array.isArray(val) && _lodash2.default.isPlainObject(_lodash2.default.first(val));\n          if (isArrayOfObjects && !isNestedField) {\n            _lodash2.default.each(val, function (v) {\n              return flatten(v, key);\n            });\n            return;\n          }\n        } else if (flat[key] !== void 0) {\n          return;\n        }\n\n        var hasValidMapping = fields[key] && fields[key].type !== 'conflict';\n        var isValue = !_lodash2.default.isPlainObject(val);\n\n        if (hasValidMapping || isValue) {\n          if (!flat[key]) {\n            flat[key] = val;\n          } else if (Array.isArray(flat[key])) {\n            flat[key].push(val);\n          } else {\n            flat[key] = [flat[key], val];\n          }\n          return;\n        }\n\n        flatten(val, key);\n      });\n    })(hit._source);\n\n    // assign the meta fields\n    _lodash2.default.each(metaFields, function (meta) {\n      if (meta === '_source') return;\n      flat[meta] = hit[meta];\n    });\n\n    // unwrap computed fields\n    _lodash2.default.forOwn(hit.fields, function (val, key) {\n      if (key[0] === '_' && !_lodash2.default.contains(metaFields, key)) return;\n      flat[key] = Array.isArray(val) && val.length === 1 ? val[0] : val;\n    });\n\n    return flat;\n  }\n\n  return function flattenHitWrapper(indexPattern) {\n    return function cachedFlatten(hit) {\n      var deep = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      return hit.$$_flattened || (hit.$$_flattened = flattenHit(indexPattern, hit, deep));\n    };\n  };\n} /*\n   * Licensed to Elasticsearch B.V. under one or more contributor\n   * license agreements. See the NOTICE file distributed with\n   * this work for additional information regarding copyright\n   * ownership. Elasticsearch B.V. licenses this file to you under\n   * the Apache License, Version 2.0 (the \"License\"); you may\n   * not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *    http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing,\n   * software distributed under the License is distributed on an\n   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n   * KIND, either express or implied.  See the License for the\n   * specific language governing permissions and limitations\n   * under the License.\n   */",null]}