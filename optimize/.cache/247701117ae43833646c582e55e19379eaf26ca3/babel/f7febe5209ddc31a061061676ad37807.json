{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/ui/public/directives/paginated_selectable_list.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/directives/paginated_selectable_list.js","mtime":1567631711718},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _modules = require('../modules');\n\nvar _paginated_selectable_list = require('../partials/paginated_selectable_list.html');\n\nvar _paginated_selectable_list2 = _interopRequireDefault(_paginated_selectable_list);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _module = _modules.uiModules.get('kibana'); /*\n                                                 * Licensed to Elasticsearch B.V. under one or more contributor\n                                                 * license agreements. See the NOTICE file distributed with\n                                                 * this work for additional information regarding copyright\n                                                 * ownership. Elasticsearch B.V. licenses this file to you under\n                                                 * the Apache License, Version 2.0 (the \"License\"); you may\n                                                 * not use this file except in compliance with the License.\n                                                 * You may obtain a copy of the License at\n                                                 *\n                                                 *    http://www.apache.org/licenses/LICENSE-2.0\n                                                 *\n                                                 * Unless required by applicable law or agreed to in writing,\n                                                 * software distributed under the License is distributed on an\n                                                 * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n                                                 * KIND, either express or implied.  See the License for the\n                                                 * specific language governing permissions and limitations\n                                                 * under the License.\n                                                 */\n\nfunction throwError(message) {\n  throw new Error(message);\n}\n\n_module.directive('paginatedSelectableList', function () {\n\n  return {\n    restrict: 'E',\n    scope: {\n      perPage: '=?',\n      list: '=',\n      listProperty: '@',\n      userMakeUrl: '=?',\n      userOnSelect: '=?',\n      disableAutoFocus: '='\n    },\n    template: _paginated_selectable_list2.default,\n    controller: function controller($scope, $filter) {\n      function calculateHitsByQuery() {\n        $scope.hitsByQuery = $filter('filter')($scope.hits, $scope.query);\n      }\n\n      // Should specify either user-make-url or user-on-select\n      if (!$scope.userMakeUrl && !$scope.userOnSelect) {\n        throwError('paginatedSelectableList directive expects a makeUrl or onSelect function');\n      }\n\n      // Should specify either user-make-url or user-on-select, but not both.\n      if ($scope.userMakeUrl && $scope.userOnSelect) {\n        throwError('paginatedSelectableList directive expects a makeUrl or onSelect attribute but not both');\n      }\n\n      $scope.perPage = $scope.perPage || 10;\n      $scope.hits = $scope.list = _lodash2.default.sortBy($scope.list, $scope.accessor);\n      $scope.$watchGroup(['hits', 'query'], calculateHitsByQuery);\n      calculateHitsByQuery();\n      $scope.hitCount = $scope.hits.length;\n\n      /**\n       * Boolean that keeps track of whether hits are sorted ascending (true)\n       * or descending (false)\n       * * @type {Boolean}\n       */\n      $scope.isAscending = true;\n\n      /**\n       * Sorts saved object finder hits either ascending or descending\n       * @param  {Array} hits Array of saved finder object hits\n       * @return {Array} Array sorted either ascending or descending\n       */\n      $scope.sortHits = function (hits) {\n        var sortedList = _lodash2.default.sortBy(hits, $scope.accessor);\n\n        $scope.isAscending = !$scope.isAscending;\n        $scope.hits = $scope.isAscending ? sortedList : sortedList.reverse();\n      };\n\n      $scope.makeUrl = function (hit) {\n        return $scope.userMakeUrl(hit);\n      };\n\n      $scope.onSelect = function (hit, $event) {\n        return $scope.userOnSelect(hit, $event);\n      };\n\n      $scope.accessor = function (val) {\n        var prop = $scope.listProperty;\n        return prop ? _lodash2.default.get(val, prop) : val;\n      };\n    }\n  };\n});",null]}