{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/src/ui/public/resize_checker/resize_checker.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/resize_checker/resize_checker.ts","mtime":1567631711751},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport * as tslib_1 from \"tslib\";\nimport { EventEmitter } from 'events';\nimport $ from 'jquery';\nimport { isEqual } from 'lodash';\nimport ResizeObserver from 'resize-observer-polyfill';\nfunction validateElArg(el) {\n    // the ResizeChecker historically accepted jquery elements,\n    // so we wrap in jQuery then extract the element\n    var $el = $(el);\n    if ($el.length !== 1) {\n        throw new TypeError('ResizeChecker must be constructed with a single DOM element.');\n    }\n    return $el.get(0);\n}\nfunction getSize(el) {\n    return [el.clientWidth, el.clientHeight];\n}\n/**\n *  ResizeChecker receives an element and emits a \"resize\" event every time it changes size.\n */\nvar ResizeChecker = /** @class */ (function (_super) {\n    tslib_1.__extends(ResizeChecker, _super);\n    function ResizeChecker(el, args) {\n        if (args === void 0) { args = {}; }\n        var _this = _super.call(this) || this;\n        _this.destroyed = false;\n        _this.expectedSize = null;\n        _this.el = validateElArg(el);\n        _this.observer = new ResizeObserver(function () {\n            if (_this.expectedSize) {\n                var sameSize = isEqual(getSize(el), _this.expectedSize);\n                _this.expectedSize = null;\n                if (sameSize) {\n                    // don't trigger resize notification if the size is what we expect\n                    return;\n                }\n            }\n            _this.emit('resize');\n        });\n        // Only enable the checker immediately if args.disabled wasn't set to true\n        if (!args.disabled) {\n            _this.enable();\n        }\n        return _this;\n    }\n    ResizeChecker.prototype.enable = function () {\n        if (this.destroyed) {\n            // Don't allow enabling an already destroyed resize checker\n            return;\n        }\n        // the width and height of the element that we expect to see\n        // on the next resize notification. If it matches the size at\n        // the time of starting observing then it we will be ignored.\n        // We know that observer and el are not null since we are not yet destroyed.\n        this.expectedSize = getSize(this.el);\n        this.observer.observe(this.el);\n    };\n    /**\n     *  Run a function and ignore all resizes that occur\n     *  while it's running.\n     */\n    ResizeChecker.prototype.modifySizeWithoutTriggeringResize = function (block) {\n        try {\n            block();\n        }\n        finally {\n            if (this.el) {\n                this.expectedSize = getSize(this.el);\n            }\n        }\n    };\n    /**\n     * Tell the ResizeChecker to shutdown, stop listenings, and never\n     * emit another resize event.\n     *\n     * Cleans up it's listeners and timers.\n     */\n    ResizeChecker.prototype.destroy = function () {\n        if (this.destroyed) {\n            return;\n        }\n        this.destroyed = true;\n        this.observer.disconnect();\n        this.observer = null;\n        this.expectedSize = null;\n        this.el = null;\n        this.removeAllListeners();\n    };\n    return ResizeChecker;\n}(EventEmitter));\nexport { ResizeChecker };\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/src/ui/public/resize_checker/resize_checker.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/src/ui/public/resize_checker/resize_checker.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;GAiBG;;AAEH,OAAO,EAAE,YAAY,EAAE,MAAM,QAAQ,CAAC;AACtC,OAAO,CAAC,MAAM,QAAQ,CAAC;AACvB,OAAO,EAAE,OAAO,EAAE,MAAM,QAAQ,CAAC;AACjC,OAAO,cAAc,MAAM,0BAA0B,CAAC;AAEtD,SAAS,aAAa,CAAC,EAAe;IACpC,2DAA2D;IAC3D,gDAAgD;IAChD,IAAM,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;IAElB,IAAI,GAAG,CAAC,MAAM,KAAK,CAAC,EAAE;QACpB,MAAM,IAAI,SAAS,CAAC,8DAA8D,CAAC,CAAC;KACrF;IAED,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC;AAED,SAAS,OAAO,CAAC,EAAe;IAC9B,OAAO,CAAC,EAAE,CAAC,WAAW,EAAE,EAAE,CAAC,YAAY,CAAC,CAAC;AAC3C,CAAC;AAED;;GAEG;AACH;IAAmC,yCAAY;IAM7C,uBAAY,EAAe,EAAE,IAAiC;QAAjC,qBAAA,EAAA,SAAiC;QAA9D,YACE,iBAAO,SAsBR;QA5BO,eAAS,GAAY,KAAK,CAAC;QAG3B,kBAAY,GAA4B,IAAI,CAAC;QAKnD,KAAI,CAAC,EAAE,GAAG,aAAa,CAAC,EAAE,CAAC,CAAC;QAE5B,KAAI,CAAC,QAAQ,GAAG,IAAI,cAAc,CAAC;YACjC,IAAI,KAAI,CAAC,YAAY,EAAE;gBACrB,IAAM,QAAQ,GAAG,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,EAAE,KAAI,CAAC,YAAY,CAAC,CAAC;gBACzD,KAAI,CAAC,YAAY,GAAG,IAAI,CAAC;gBAEzB,IAAI,QAAQ,EAAE;oBACZ,kEAAkE;oBAClE,OAAO;iBACR;aACF;YAED,KAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;QAEH,0EAA0E;QAC1E,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YAClB,KAAI,CAAC,MAAM,EAAE,CAAC;SACf;;IACH,CAAC;IAEM,8BAAM,GAAb;QACE,IAAI,IAAI,CAAC,SAAS,EAAE;YAClB,2DAA2D;YAC3D,OAAO;SACR;QACD,4DAA4D;QAC5D,6DAA6D;QAC7D,6DAA6D;QAC7D,4EAA4E;QAC5E,IAAI,CAAC,YAAY,GAAG,OAAO,CAAC,IAAI,CAAC,EAAG,CAAC,CAAC;QACtC,IAAI,CAAC,QAAS,CAAC,OAAO,CAAC,IAAI,CAAC,EAAG,CAAC,CAAC;IACnC,CAAC;IAED;;;OAGG;IACI,yDAAiC,GAAxC,UAAyC,KAAiB;QACxD,IAAI;YACF,KAAK,EAAE,CAAC;SACT;gBAAS;YACR,IAAI,IAAI,CAAC,EAAE,EAAE;gBACX,IAAI,CAAC,YAAY,GAAG,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;aACtC;SACF;IACH,CAAC;IAED;;;;;OAKG;IACI,+BAAO,GAAd;QACE,IAAI,IAAI,CAAC,SAAS,EAAE;YAClB,OAAO;SACR;QACD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QAEtB,IAAI,CAAC,QAAS,CAAC,UAAU,EAAE,CAAC;QAC5B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACrB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;QACzB,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC;QACf,IAAI,CAAC,kBAAkB,EAAE,CAAC;IAC5B,CAAC;IACH,oBAAC;AAAD,CAAC,AA5ED,CAAmC,YAAY,GA4E9C","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { EventEmitter } from 'events';\nimport $ from 'jquery';\nimport { isEqual } from 'lodash';\nimport ResizeObserver from 'resize-observer-polyfill';\n\nfunction validateElArg(el: HTMLElement) {\n  // the ResizeChecker historically accepted jquery elements,\n  // so we wrap in jQuery then extract the element\n  const $el = $(el);\n\n  if ($el.length !== 1) {\n    throw new TypeError('ResizeChecker must be constructed with a single DOM element.');\n  }\n\n  return $el.get(0);\n}\n\nfunction getSize(el: HTMLElement): [number, number] {\n  return [el.clientWidth, el.clientHeight];\n}\n\n/**\n *  ResizeChecker receives an element and emits a \"resize\" event every time it changes size.\n */\nexport class ResizeChecker extends EventEmitter {\n  private destroyed: boolean = false;\n  private el: HTMLElement | null;\n  private observer: ResizeObserver | null;\n  private expectedSize: [number, number] | null = null;\n\n  constructor(el: HTMLElement, args: { disabled?: boolean } = {}) {\n    super();\n\n    this.el = validateElArg(el);\n\n    this.observer = new ResizeObserver(() => {\n      if (this.expectedSize) {\n        const sameSize = isEqual(getSize(el), this.expectedSize);\n        this.expectedSize = null;\n\n        if (sameSize) {\n          // don't trigger resize notification if the size is what we expect\n          return;\n        }\n      }\n\n      this.emit('resize');\n    });\n\n    // Only enable the checker immediately if args.disabled wasn't set to true\n    if (!args.disabled) {\n      this.enable();\n    }\n  }\n\n  public enable() {\n    if (this.destroyed) {\n      // Don't allow enabling an already destroyed resize checker\n      return;\n    }\n    // the width and height of the element that we expect to see\n    // on the next resize notification. If it matches the size at\n    // the time of starting observing then it we will be ignored.\n    // We know that observer and el are not null since we are not yet destroyed.\n    this.expectedSize = getSize(this.el!);\n    this.observer!.observe(this.el!);\n  }\n\n  /**\n   *  Run a function and ignore all resizes that occur\n   *  while it's running.\n   */\n  public modifySizeWithoutTriggeringResize(block: () => void): void {\n    try {\n      block();\n    } finally {\n      if (this.el) {\n        this.expectedSize = getSize(this.el);\n      }\n    }\n  }\n\n  /**\n   * Tell the ResizeChecker to shutdown, stop listenings, and never\n   * emit another resize event.\n   *\n   * Cleans up it's listeners and timers.\n   */\n  public destroy(): void {\n    if (this.destroyed) {\n      return;\n    }\n    this.destroyed = true;\n\n    this.observer!.disconnect();\n    this.observer = null;\n    this.expectedSize = null;\n    this.el = null;\n    this.removeAllListeners();\n  }\n}\n"]}]}