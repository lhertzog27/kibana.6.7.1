{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/src/ui/public/inspector/adapters/request/request_responder.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/inspector/adapters/request/request_responder.ts","mtime":1567631711740},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport * as tslib_1 from \"tslib\";\nimport { i18n } from '@kbn/i18n';\nimport { RequestStatus } from './types';\n/**\n * An API to specify information about a specific request that will be logged.\n * Create a new instance to log a request using {@link RequestAdapter#start}.\n */\nvar RequestResponder = /** @class */ (function () {\n    function RequestResponder(request, onChange) {\n        this.request = request;\n        this.onChange = onChange;\n    }\n    RequestResponder.prototype.json = function (reqJson) {\n        this.request.json = reqJson;\n        this.onChange();\n        return this;\n    };\n    RequestResponder.prototype.stats = function (stats) {\n        this.request.stats = tslib_1.__assign({}, (this.request.stats || {}), stats);\n        var startDate = new Date(this.request.startTime);\n        this.request.stats.requestTimestamp = {\n            label: i18n.translate('common.ui.inspector.reqTimestampKey', {\n                defaultMessage: 'Request timestamp',\n            }),\n            value: startDate.toISOString(),\n            description: i18n.translate('common.ui.inspector.reqTimestampDescription', {\n                defaultMessage: 'Time when the start of the request has been logged',\n            }),\n        };\n        this.onChange();\n        return this;\n    };\n    RequestResponder.prototype.finish = function (status, response) {\n        this.request.time = Date.now() - this.request.startTime;\n        this.request.status = status;\n        this.request.response = response;\n        this.onChange();\n    };\n    RequestResponder.prototype.ok = function (response) {\n        this.finish(RequestStatus.OK, response);\n    };\n    RequestResponder.prototype.error = function (response) {\n        this.finish(RequestStatus.ERROR, response);\n    };\n    return RequestResponder;\n}());\nexport { RequestResponder };\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/src/ui/public/inspector/adapters/request/request_responder.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/src/ui/public/inspector/adapters/request/request_responder.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;GAiBG;;AAEH,OAAO,EAAE,IAAI,EAAE,MAAM,WAAW,CAAC;AACjC,OAAO,EAA8B,aAAa,EAAY,MAAM,SAAS,CAAC;AAE9E;;;GAGG;AACH;IAIE,0BAAY,OAAgB,EAAE,QAAoB;QAChD,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC3B,CAAC;IAEM,+BAAI,GAAX,UAAY,OAAe;QACzB,IAAI,CAAC,OAAO,CAAC,IAAI,GAAG,OAAO,CAAC;QAC5B,IAAI,CAAC,QAAQ,EAAE,CAAC;QAChB,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,gCAAK,GAAZ,UAAa,KAAwB;QACnC,IAAI,CAAC,OAAO,CAAC,KAAK,wBACb,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,IAAI,EAAE,CAAC,EAC1B,KAAK,CACT,CAAC;QAEF,IAAM,SAAS,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;QAEnD,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,gBAAgB,GAAG;YACpC,KAAK,EAAE,IAAI,CAAC,SAAS,CAAC,qCAAqC,EAAE;gBAC3D,cAAc,EAAE,mBAAmB;aACpC,CAAC;YACF,KAAK,EAAE,SAAS,CAAC,WAAW,EAAE;YAC9B,WAAW,EAAE,IAAI,CAAC,SAAS,CAAC,6CAA6C,EAAE;gBACzE,cAAc,EAAE,oDAAoD;aACrE,CAAC;SACH,CAAC;QAEF,IAAI,CAAC,QAAQ,EAAE,CAAC;QAChB,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,iCAAM,GAAb,UAAc,MAAqB,EAAE,QAAkB;QACrD,IAAI,CAAC,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC;QACxD,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,MAAM,CAAC;QAC7B,IAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACjC,IAAI,CAAC,QAAQ,EAAE,CAAC;IAClB,CAAC;IAEM,6BAAE,GAAT,UAAU,QAAkB;QAC1B,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC;IAC1C,CAAC;IAEM,gCAAK,GAAZ,UAAa,QAAkB;QAC7B,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;IAC7C,CAAC;IACH,uBAAC;AAAD,CAAC,AAnDD,IAmDC","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { i18n } from '@kbn/i18n';\nimport { Request, RequestStatistics, RequestStatus, Response } from './types';\n\n/**\n * An API to specify information about a specific request that will be logged.\n * Create a new instance to log a request using {@link RequestAdapter#start}.\n */\nexport class RequestResponder {\n  private readonly request: Request;\n  private readonly onChange: () => void;\n\n  constructor(request: Request, onChange: () => void) {\n    this.request = request;\n    this.onChange = onChange;\n  }\n\n  public json(reqJson: object): RequestResponder {\n    this.request.json = reqJson;\n    this.onChange();\n    return this;\n  }\n\n  public stats(stats: RequestStatistics): RequestResponder {\n    this.request.stats = {\n      ...(this.request.stats || {}),\n      ...stats,\n    };\n\n    const startDate = new Date(this.request.startTime);\n\n    this.request.stats.requestTimestamp = {\n      label: i18n.translate('common.ui.inspector.reqTimestampKey', {\n        defaultMessage: 'Request timestamp',\n      }),\n      value: startDate.toISOString(),\n      description: i18n.translate('common.ui.inspector.reqTimestampDescription', {\n        defaultMessage: 'Time when the start of the request has been logged',\n      }),\n    };\n\n    this.onChange();\n    return this;\n  }\n\n  public finish(status: RequestStatus, response: Response): void {\n    this.request.time = Date.now() - this.request.startTime;\n    this.request.status = status;\n    this.request.response = response;\n    this.onChange();\n  }\n\n  public ok(response: Response): void {\n    this.finish(RequestStatus.OK, response);\n  }\n\n  public error(response: Response): void {\n    this.finish(RequestStatus.ERROR, response);\n  }\n}\n"]}]}