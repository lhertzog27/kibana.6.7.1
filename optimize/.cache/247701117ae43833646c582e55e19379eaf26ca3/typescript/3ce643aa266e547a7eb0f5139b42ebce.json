{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/src/ui/public/embeddable/embeddable.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/embeddable/embeddable.ts","mtime":1567631711722},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nvar Embeddable = /** @class */ (function () {\n    // TODO: Make title and editUrl required and move out of options parameter.\n    function Embeddable(metadata) {\n        if (metadata === void 0) { metadata = {}; }\n        this.metadata = {};\n        this.metadata = metadata || {};\n    }\n    Embeddable.prototype.onContainerStateChanged = function (containerState) {\n        return;\n    };\n    /**\n     * An embeddable can return inspector adapters if it want the inspector to be\n     * available via the context menu of that panel.\n     * @return Inspector adapters that will be used to open an inspector for.\n     */\n    Embeddable.prototype.getInspectorAdapters = function () {\n        return undefined;\n    };\n    Embeddable.prototype.destroy = function () {\n        return;\n    };\n    Embeddable.prototype.reload = function () {\n        return;\n    };\n    return Embeddable;\n}());\nexport { Embeddable };\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/src/ui/public/embeddable/embeddable.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/src/ui/public/embeddable/embeddable.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;GAiBG;AA6BH;IAGE,2EAA2E;IAC3E,oBAAY,QAAiC;QAAjC,yBAAA,EAAA,aAAiC;QAH7B,aAAQ,GAAuB,EAAE,CAAC;QAIhD,IAAI,CAAC,QAAQ,GAAG,QAAQ,IAAI,EAAE,CAAC;IACjC,CAAC;IAEM,4CAAuB,GAA9B,UAA+B,cAA8B;QAC3D,OAAO;IACT,CAAC;IAOD;;;;OAIG;IACI,yCAAoB,GAA3B;QACE,OAAO,SAAS,CAAC;IACnB,CAAC;IAEM,4BAAO,GAAd;QACE,OAAO;IACT,CAAC;IAEM,2BAAM,GAAb;QACE,OAAO;IACT,CAAC;IACH,iBAAC;AAAD,CAAC,AAjCD,IAiCC","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { Adapters } from 'ui/inspector';\nimport { ContainerState } from './types';\n\nexport interface EmbeddableMetadata {\n  // TODO: change to an array, embeddables should be able to specify multiple index patterns they use. Also\n  // see https://github.com/elastic/kibana/issues/19408 - this needs to be generalized to support embeddables that\n  // use dynamic index patterns (vega, TSVB) instead of saved object index patterns (most other visualizations).\n  /**\n   * Should specify any index pattern the embeddable uses. This will be used by the container to list out\n   * available fields to filter on.\n   */\n  indexPattern?: object;\n\n  /**\n   * The title, or name, of the embeddable.\n   */\n  title?: string;\n\n  /**\n   * A url to direct the user for managing the embeddable instance. We may want to eventually make this optional\n   * for non-instanced panels that can only be created and deleted but not edited. We also wish to eventually support\n   * in-place editing on the dashboard itself, so another option could be to supply an element, or fly out panel, to\n   * offer for editing directly on the dashboard.\n   */\n  editUrl?: string;\n}\n\nexport abstract class Embeddable {\n  public readonly metadata: EmbeddableMetadata = {};\n\n  // TODO: Make title and editUrl required and move out of options parameter.\n  constructor(metadata: EmbeddableMetadata = {}) {\n    this.metadata = metadata || {};\n  }\n\n  public onContainerStateChanged(containerState: ContainerState): void {\n    return;\n  }\n\n  /**\n   * Embeddable should render itself at the given domNode.\n   */\n  public abstract render(domNode: HTMLElement, containerState: ContainerState): void;\n\n  /**\n   * An embeddable can return inspector adapters if it want the inspector to be\n   * available via the context menu of that panel.\n   * @return Inspector adapters that will be used to open an inspector for.\n   */\n  public getInspectorAdapters(): Adapters | undefined {\n    return undefined;\n  }\n\n  public destroy(): void {\n    return;\n  }\n\n  public reload(): void {\n    return;\n  }\n}\n"]}]}