{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/src/ui/public/state_management/state_hashing/unhash_query_string.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/state_management/state_hashing/unhash_query_string.ts","mtime":1567631711755},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { mapValues } from 'lodash';\n/**\n * Takes in a parsed url query and state objects, finding the state objects that match the query parameters and expanding\n * the hashed state. For example, a url query string like '?_a=@12353&_g=@19028df' will become\n * '?_a=[expanded app state here]&_g=[expanded global state here]. This is used when storeStateInSessionStorage is turned on.\n */\nexport function unhashQueryString(parsedQueryString, states) {\n    return mapValues(parsedQueryString, function (val, key) {\n        var state = states.find(function (s) { return key === s.getQueryParamName(); });\n        return state ? state.translateHashToRison(val) : val;\n    });\n}\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/src/ui/public/state_management/state_hashing/unhash_query_string.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/src/ui/public/state_management/state_hashing/unhash_query_string.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;GAiBG;AAEH,OAAO,EAAE,SAAS,EAAE,MAAM,QAAQ,CAAC;AAInC;;;;GAIG;AACH,MAAM,UAAU,iBAAiB,CAC/B,iBAAiC,EACjC,MAAe;IAEf,OAAO,SAAS,CAAC,iBAAiB,EAAE,UAAC,GAAG,EAAE,GAAG;QAC3C,IAAM,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,GAAG,KAAK,CAAC,CAAC,iBAAiB,EAAE,EAA7B,CAA6B,CAAC,CAAC;QAC9D,OAAO,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;IACvD,CAAC,CAAC,CAAC;AACL,CAAC","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { mapValues } from 'lodash';\nimport { ParsedUrlQuery } from 'querystring';\nimport { State } from '../state';\n\n/**\n * Takes in a parsed url query and state objects, finding the state objects that match the query parameters and expanding\n * the hashed state. For example, a url query string like '?_a=@12353&_g=@19028df' will become\n * '?_a=[expanded app state here]&_g=[expanded global state here]. This is used when storeStateInSessionStorage is turned on.\n */\nexport function unhashQueryString(\n  parsedQueryString: ParsedUrlQuery,\n  states: State[]\n): ParsedUrlQuery {\n  return mapValues(parsedQueryString, (val, key) => {\n    const state = states.find(s => key === s.getQueryParamName());\n    return state ? state.translateHashToRison(val) : val;\n  });\n}\n"]}]}