{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/src/legacy/core_plugins/kibana/public/dashboard/panel/panel_header/panel_options_menu_container.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/legacy/core_plugins/kibana/public/dashboard/panel/panel_header/panel_options_menu_container.ts","mtime":1567631711560},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { i18n } from '@kbn/i18n';\nimport { connect } from 'react-redux';\nimport { buildEuiContextMenuPanels, ContextMenuPanel, } from 'ui/embeddable';\nimport { panelActionsStore } from '../../store/panel_actions_store';\nimport { getCustomizePanelAction, getEditPanelAction, getInspectorPanelAction, getRemovePanelAction, getToggleExpandPanelAction, } from './panel_actions';\nimport { PanelOptionsMenu } from './panel_options_menu';\nimport { closeContextMenu, deletePanel, maximizePanel, minimizePanel, resetPanelTitle, setPanelTitle, setVisibleContextMenuPanelId, } from '../../actions';\nimport { DashboardViewMode } from '../../dashboard_view_mode';\nimport { getContainerState, getEmbeddable, getEmbeddableEditUrl, getEmbeddableTitle, getMaximizedPanelId, getPanel, getViewMode, getVisibleContextMenuPanelId, } from '../../selectors';\nvar mapStateToProps = function (_a, _b) {\n    var dashboard = _a.dashboard;\n    var panelId = _b.panelId;\n    var embeddable = getEmbeddable(dashboard, panelId);\n    var panel = getPanel(dashboard, panelId);\n    var embeddableTitle = getEmbeddableTitle(dashboard, panelId);\n    var containerState = getContainerState(dashboard, panelId);\n    var visibleContextMenuPanelId = getVisibleContextMenuPanelId(dashboard);\n    var viewMode = getViewMode(dashboard);\n    return {\n        panelTitle: panel.title === undefined ? embeddableTitle : panel.title,\n        editUrl: embeddable ? getEmbeddableEditUrl(dashboard, panelId) : null,\n        isExpanded: getMaximizedPanelId(dashboard) === panelId,\n        containerState: containerState,\n        visibleContextMenuPanelId: visibleContextMenuPanelId,\n        isViewMode: viewMode === DashboardViewMode.VIEW,\n    };\n};\n/**\n * @param dispatch {Function}\n * @param embeddableFactory {EmbeddableFactory}\n * @param panelId {string}\n */\nvar mapDispatchToProps = function (dispatch, _a) {\n    var panelId = _a.panelId;\n    return ({\n        onDeletePanel: function () {\n            dispatch(deletePanel(panelId));\n        },\n        onCloseContextMenu: function () { return dispatch(closeContextMenu()); },\n        openContextMenu: function () { return dispatch(setVisibleContextMenuPanelId(panelId)); },\n        onMaximizePanel: function () { return dispatch(maximizePanel(panelId)); },\n        onMinimizePanel: function () { return dispatch(minimizePanel()); },\n        onResetPanelTitle: function () { return dispatch(resetPanelTitle(panelId)); },\n        onUpdatePanelTitle: function (newTitle) { return dispatch(setPanelTitle({ title: newTitle, panelId: panelId })); },\n    });\n};\nvar mergeProps = function (stateProps, dispatchProps, ownProps) {\n    var isExpanded = stateProps.isExpanded, panelTitle = stateProps.panelTitle, containerState = stateProps.containerState, visibleContextMenuPanelId = stateProps.visibleContextMenuPanelId, isViewMode = stateProps.isViewMode;\n    var isPopoverOpen = visibleContextMenuPanelId === ownProps.panelId;\n    var onMaximizePanel = dispatchProps.onMaximizePanel, onMinimizePanel = dispatchProps.onMinimizePanel, onDeletePanel = dispatchProps.onDeletePanel, onResetPanelTitle = dispatchProps.onResetPanelTitle, onUpdatePanelTitle = dispatchProps.onUpdatePanelTitle, onCloseContextMenu = dispatchProps.onCloseContextMenu, openContextMenu = dispatchProps.openContextMenu;\n    var toggleContextMenu = function () { return (isPopoverOpen ? onCloseContextMenu() : openContextMenu()); };\n    // Outside click handlers will trigger for every closed context menu, we only want to react to clicks external to\n    // the currently opened menu.\n    var closeMyContextMenuPanel = function () {\n        if (isPopoverOpen) {\n            onCloseContextMenu();\n        }\n    };\n    var toggleExpandedPanel = function () {\n        isExpanded ? onMinimizePanel() : onMaximizePanel();\n        closeMyContextMenuPanel();\n    };\n    var panels = [];\n    // Don't build the panels if the pop over is not open, or this gets expensive - this function is called once for\n    // every panel, every time any state changes.\n    if (isPopoverOpen) {\n        var contextMenuPanel = new ContextMenuPanel({\n            title: i18n.translate('kbn.dashboard.panel.optionsMenu.optionsContextMenuTitle', {\n                defaultMessage: 'Options',\n            }),\n            id: 'mainMenu',\n        });\n        var actions = [\n            getInspectorPanelAction({\n                closeContextMenu: closeMyContextMenuPanel,\n                panelTitle: panelTitle,\n            }),\n            getEditPanelAction(),\n            getCustomizePanelAction({\n                onResetPanelTitle: onResetPanelTitle,\n                onUpdatePanelTitle: onUpdatePanelTitle,\n                title: panelTitle,\n                closeContextMenu: closeMyContextMenuPanel,\n            }),\n            getToggleExpandPanelAction({ isExpanded: isExpanded, toggleExpandedPanel: toggleExpandedPanel }),\n            getRemovePanelAction(onDeletePanel),\n        ].concat(panelActionsStore.actions);\n        panels = buildEuiContextMenuPanels({\n            contextMenuPanel: contextMenuPanel,\n            actions: actions,\n            embeddable: ownProps.embeddable,\n            containerState: containerState,\n        });\n    }\n    return {\n        panels: panels,\n        toggleContextMenu: toggleContextMenu,\n        closeContextMenu: closeMyContextMenuPanel,\n        isPopoverOpen: isPopoverOpen,\n        isViewMode: isViewMode,\n    };\n};\nexport var PanelOptionsMenuContainer = connect(mapStateToProps, mapDispatchToProps, mergeProps)(PanelOptionsMenu);\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/src/legacy/core_plugins/kibana/public/dashboard/panel/panel_header/panel_options_menu_container.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/src/legacy/core_plugins/kibana/public/dashboard/panel/panel_header/panel_options_menu_container.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;GAiBG;AAGH,OAAO,EAAE,IAAI,EAAE,MAAM,WAAW,CAAC;AACjC,OAAO,EAAE,OAAO,EAAE,MAAM,aAAa,CAAC;AACtC,OAAO,EACL,yBAAyB,EAEzB,gBAAgB,GAEjB,MAAM,eAAe,CAAC;AACvB,OAAO,EAAE,iBAAiB,EAAE,MAAM,iCAAiC,CAAC;AACpE,OAAO,EACL,uBAAuB,EACvB,kBAAkB,EAClB,uBAAuB,EACvB,oBAAoB,EACpB,0BAA0B,GAC3B,MAAM,iBAAiB,CAAC;AACzB,OAAO,EAAE,gBAAgB,EAAyB,MAAM,sBAAsB,CAAC;AAE/E,OAAO,EACL,gBAAgB,EAChB,WAAW,EACX,aAAa,EACb,aAAa,EACb,eAAe,EACf,aAAa,EACb,4BAA4B,GAC7B,MAAM,eAAe,CAAC;AAIvB,OAAO,EAAE,iBAAiB,EAAE,MAAM,2BAA2B,CAAC;AAC9D,OAAO,EACL,iBAAiB,EACjB,aAAa,EACb,oBAAoB,EACpB,kBAAkB,EAClB,mBAAmB,EACnB,QAAQ,EACR,WAAW,EACX,4BAA4B,GAE7B,MAAM,iBAAiB,CAAC;AA0BzB,IAAM,eAAe,GAAG,UACtB,EAA8B,EAC9B,EAA8C;QAD5C,wBAAS;QACT,oBAAO;IAET,IAAM,UAAU,GAAG,aAAa,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;IACrD,IAAM,KAAK,GAAG,QAAQ,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;IAC3C,IAAM,eAAe,GAAG,kBAAkB,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;IAC/D,IAAM,cAAc,GAAG,iBAAiB,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;IAC7D,IAAM,yBAAyB,GAAG,4BAA4B,CAAC,SAAS,CAAC,CAAC;IAC1E,IAAM,QAAQ,GAAG,WAAW,CAAC,SAAS,CAAC,CAAC;IACxC,OAAO;QACL,UAAU,EAAE,KAAK,CAAC,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK;QACrE,OAAO,EAAE,UAAU,CAAC,CAAC,CAAC,oBAAoB,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI;QACrE,UAAU,EAAE,mBAAmB,CAAC,SAAS,CAAC,KAAK,OAAO;QACtD,cAAc,gBAAA;QACd,yBAAyB,2BAAA;QACzB,UAAU,EAAE,QAAQ,KAAK,iBAAiB,CAAC,IAAI;KAChD,CAAC;AACJ,CAAC,CAAC;AAEF;;;;GAIG;AACH,IAAM,kBAAkB,GAAG,UACzB,QAAkB,EAClB,EAA8C;QAA5C,oBAAO;IACN,OAAA,CAAC;QACJ,aAAa,EAAE;YACb,QAAQ,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC;QACjC,CAAC;QACD,kBAAkB,EAAE,cAAM,OAAA,QAAQ,CAAC,gBAAgB,EAAE,CAAC,EAA5B,CAA4B;QACtD,eAAe,EAAE,cAAM,OAAA,QAAQ,CAAC,4BAA4B,CAAC,OAAO,CAAC,CAAC,EAA/C,CAA+C;QACtE,eAAe,EAAE,cAAM,OAAA,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,EAAhC,CAAgC;QACvD,eAAe,EAAE,cAAM,OAAA,QAAQ,CAAC,aAAa,EAAE,CAAC,EAAzB,CAAyB;QAChD,iBAAiB,EAAE,cAAM,OAAA,QAAQ,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC,EAAlC,CAAkC;QAC3D,kBAAkB,EAAE,UAAC,QAAgB,IAAK,OAAA,QAAQ,CAAC,aAAa,CAAC,EAAE,KAAK,EAAE,QAAQ,EAAE,OAAO,SAAA,EAAE,CAAC,CAAC,EAArD,CAAqD;KAChG,CAAC;AAVG,CAUH,CAAC;AAEH,IAAM,UAAU,GAAG,UACjB,UAA+C,EAC/C,aAAqD,EACrD,QAA2C;IAGzC,IAAA,kCAAU,EACV,kCAAU,EACV,0CAAc,EACd,gEAAyB,EACzB,kCAAU,CACG;IACf,IAAM,aAAa,GAAG,yBAAyB,KAAK,QAAQ,CAAC,OAAO,CAAC;IAEnE,IAAA,+CAAe,EACf,+CAAe,EACf,2CAAa,EACb,mDAAiB,EACjB,qDAAkB,EAClB,qDAAkB,EAClB,+CAAe,CACC;IAClB,IAAM,iBAAiB,GAAG,cAAM,OAAA,CAAC,aAAa,CAAC,CAAC,CAAC,kBAAkB,EAAE,CAAC,CAAC,CAAC,eAAe,EAAE,CAAC,EAA1D,CAA0D,CAAC;IAE3F,iHAAiH;IACjH,6BAA6B;IAC7B,IAAM,uBAAuB,GAAG;QAC9B,IAAI,aAAa,EAAE;YACjB,kBAAkB,EAAE,CAAC;SACtB;IACH,CAAC,CAAC;IAEF,IAAM,mBAAmB,GAAG;QAC1B,UAAU,CAAC,CAAC,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC,eAAe,EAAE,CAAC;QACnD,uBAAuB,EAAE,CAAC;IAC5B,CAAC,CAAC;IAEF,IAAI,MAAM,GAAoC,EAAE,CAAC;IAEjD,gHAAgH;IAChH,6CAA6C;IAC7C,IAAI,aAAa,EAAE;QACjB,IAAM,gBAAgB,GAAG,IAAI,gBAAgB,CAAC;YAC5C,KAAK,EAAE,IAAI,CAAC,SAAS,CAAC,yDAAyD,EAAE;gBAC/E,cAAc,EAAE,SAAS;aAC1B,CAAC;YACF,EAAE,EAAE,UAAU;SACf,CAAC,CAAC;QAEH,IAAM,OAAO,GAAG;YACd,uBAAuB,CAAC;gBACtB,gBAAgB,EAAE,uBAAuB;gBACzC,UAAU,YAAA;aACX,CAAC;YACF,kBAAkB,EAAE;YACpB,uBAAuB,CAAC;gBACtB,iBAAiB,mBAAA;gBACjB,kBAAkB,oBAAA;gBAClB,KAAK,EAAE,UAAU;gBACjB,gBAAgB,EAAE,uBAAuB;aAC1C,CAAC;YACF,0BAA0B,CAAC,EAAE,UAAU,YAAA,EAAE,mBAAmB,qBAAA,EAAE,CAAC;YAC/D,oBAAoB,CAAC,aAAa,CAAC;SACpC,CAAC,MAAM,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;QAEpC,MAAM,GAAG,yBAAyB,CAAC;YACjC,gBAAgB,kBAAA;YAChB,OAAO,SAAA;YACP,UAAU,EAAE,QAAQ,CAAC,UAAU;YAC/B,cAAc,gBAAA;SACf,CAAC,CAAC;KACJ;IAED,OAAO;QACL,MAAM,QAAA;QACN,iBAAiB,mBAAA;QACjB,gBAAgB,EAAE,uBAAuB;QACzC,aAAa,eAAA;QACb,UAAU,YAAA;KACX,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,IAAM,yBAAyB,GAAG,OAAO,CAO9C,eAAe,EACf,kBAAkB,EAClB,UAAU,CACX,CAAC,gBAAgB,CAAC,CAAC","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { EuiContextMenuPanelDescriptor } from '@elastic/eui';\nimport { i18n } from '@kbn/i18n';\nimport { connect } from 'react-redux';\nimport {\n  buildEuiContextMenuPanels,\n  ContainerState,\n  ContextMenuPanel,\n  Embeddable,\n} from 'ui/embeddable';\nimport { panelActionsStore } from '../../store/panel_actions_store';\nimport {\n  getCustomizePanelAction,\n  getEditPanelAction,\n  getInspectorPanelAction,\n  getRemovePanelAction,\n  getToggleExpandPanelAction,\n} from './panel_actions';\nimport { PanelOptionsMenu, PanelOptionsMenuProps } from './panel_options_menu';\n\nimport {\n  closeContextMenu,\n  deletePanel,\n  maximizePanel,\n  minimizePanel,\n  resetPanelTitle,\n  setPanelTitle,\n  setVisibleContextMenuPanelId,\n} from '../../actions';\n\nimport { Dispatch } from 'redux';\nimport { CoreKibanaState } from '../../../selectors';\nimport { DashboardViewMode } from '../../dashboard_view_mode';\nimport {\n  getContainerState,\n  getEmbeddable,\n  getEmbeddableEditUrl,\n  getEmbeddableTitle,\n  getMaximizedPanelId,\n  getPanel,\n  getViewMode,\n  getVisibleContextMenuPanelId,\n  PanelId,\n} from '../../selectors';\n\ninterface PanelOptionsMenuContainerDispatchProps {\n  onDeletePanel: () => void;\n  onCloseContextMenu: () => void;\n  openContextMenu: () => void;\n  onMaximizePanel: () => void;\n  onMinimizePanel: () => void;\n  onResetPanelTitle: () => void;\n  onUpdatePanelTitle: (title: string) => void;\n}\n\ninterface PanelOptionsMenuContainerOwnProps {\n  panelId: PanelId;\n  embeddable?: Embeddable;\n}\n\ninterface PanelOptionsMenuContainerStateProps {\n  panelTitle?: string;\n  editUrl: string | null | undefined;\n  isExpanded: boolean;\n  containerState: ContainerState;\n  visibleContextMenuPanelId: PanelId | undefined;\n  isViewMode: boolean;\n}\n\nconst mapStateToProps = (\n  { dashboard }: CoreKibanaState,\n  { panelId }: PanelOptionsMenuContainerOwnProps\n) => {\n  const embeddable = getEmbeddable(dashboard, panelId);\n  const panel = getPanel(dashboard, panelId);\n  const embeddableTitle = getEmbeddableTitle(dashboard, panelId);\n  const containerState = getContainerState(dashboard, panelId);\n  const visibleContextMenuPanelId = getVisibleContextMenuPanelId(dashboard);\n  const viewMode = getViewMode(dashboard);\n  return {\n    panelTitle: panel.title === undefined ? embeddableTitle : panel.title,\n    editUrl: embeddable ? getEmbeddableEditUrl(dashboard, panelId) : null,\n    isExpanded: getMaximizedPanelId(dashboard) === panelId,\n    containerState,\n    visibleContextMenuPanelId,\n    isViewMode: viewMode === DashboardViewMode.VIEW,\n  };\n};\n\n/**\n * @param dispatch {Function}\n * @param embeddableFactory {EmbeddableFactory}\n * @param panelId {string}\n */\nconst mapDispatchToProps = (\n  dispatch: Dispatch,\n  { panelId }: PanelOptionsMenuContainerOwnProps\n) => ({\n  onDeletePanel: () => {\n    dispatch(deletePanel(panelId));\n  },\n  onCloseContextMenu: () => dispatch(closeContextMenu()),\n  openContextMenu: () => dispatch(setVisibleContextMenuPanelId(panelId)),\n  onMaximizePanel: () => dispatch(maximizePanel(panelId)),\n  onMinimizePanel: () => dispatch(minimizePanel()),\n  onResetPanelTitle: () => dispatch(resetPanelTitle(panelId)),\n  onUpdatePanelTitle: (newTitle: string) => dispatch(setPanelTitle({ title: newTitle, panelId })),\n});\n\nconst mergeProps = (\n  stateProps: PanelOptionsMenuContainerStateProps,\n  dispatchProps: PanelOptionsMenuContainerDispatchProps,\n  ownProps: PanelOptionsMenuContainerOwnProps\n) => {\n  const {\n    isExpanded,\n    panelTitle,\n    containerState,\n    visibleContextMenuPanelId,\n    isViewMode,\n  } = stateProps;\n  const isPopoverOpen = visibleContextMenuPanelId === ownProps.panelId;\n  const {\n    onMaximizePanel,\n    onMinimizePanel,\n    onDeletePanel,\n    onResetPanelTitle,\n    onUpdatePanelTitle,\n    onCloseContextMenu,\n    openContextMenu,\n  } = dispatchProps;\n  const toggleContextMenu = () => (isPopoverOpen ? onCloseContextMenu() : openContextMenu());\n\n  // Outside click handlers will trigger for every closed context menu, we only want to react to clicks external to\n  // the currently opened menu.\n  const closeMyContextMenuPanel = () => {\n    if (isPopoverOpen) {\n      onCloseContextMenu();\n    }\n  };\n\n  const toggleExpandedPanel = () => {\n    isExpanded ? onMinimizePanel() : onMaximizePanel();\n    closeMyContextMenuPanel();\n  };\n\n  let panels: EuiContextMenuPanelDescriptor[] = [];\n\n  // Don't build the panels if the pop over is not open, or this gets expensive - this function is called once for\n  // every panel, every time any state changes.\n  if (isPopoverOpen) {\n    const contextMenuPanel = new ContextMenuPanel({\n      title: i18n.translate('kbn.dashboard.panel.optionsMenu.optionsContextMenuTitle', {\n        defaultMessage: 'Options',\n      }),\n      id: 'mainMenu',\n    });\n\n    const actions = [\n      getInspectorPanelAction({\n        closeContextMenu: closeMyContextMenuPanel,\n        panelTitle,\n      }),\n      getEditPanelAction(),\n      getCustomizePanelAction({\n        onResetPanelTitle,\n        onUpdatePanelTitle,\n        title: panelTitle,\n        closeContextMenu: closeMyContextMenuPanel,\n      }),\n      getToggleExpandPanelAction({ isExpanded, toggleExpandedPanel }),\n      getRemovePanelAction(onDeletePanel),\n    ].concat(panelActionsStore.actions);\n\n    panels = buildEuiContextMenuPanels({\n      contextMenuPanel,\n      actions,\n      embeddable: ownProps.embeddable,\n      containerState,\n    });\n  }\n\n  return {\n    panels,\n    toggleContextMenu,\n    closeContextMenu: closeMyContextMenuPanel,\n    isPopoverOpen,\n    isViewMode,\n  };\n};\n\nexport const PanelOptionsMenuContainer = connect<\n  PanelOptionsMenuContainerStateProps,\n  PanelOptionsMenuContainerDispatchProps,\n  PanelOptionsMenuContainerOwnProps,\n  PanelOptionsMenuProps,\n  CoreKibanaState\n>(\n  mapStateToProps,\n  mapDispatchToProps,\n  mergeProps\n)(PanelOptionsMenu);\n"]}]}