{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/src/ui/public/agg_types/filter/agg_type_filters.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/agg_types/filter/agg_type_filters.ts","mtime":1567631711699},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/**\n * A registry to store {@link AggTypeFilter} which are used to filter down\n * available aggregations for a specific visualization and {@link AggConfig}.\n */\nvar AggTypeFilters = /** @class */ (function () {\n    function AggTypeFilters() {\n        this.filters = new Set();\n    }\n    /**\n     * Register a new {@link AggTypeFilter} with this registry.\n     *\n     * @param filter The filter to register.\n     */\n    AggTypeFilters.prototype.addFilter = function (filter) {\n        this.filters.add(filter);\n    };\n    /**\n     * Returns the {@link AggType|aggTypes} filtered by all registered filters.\n     *\n     * @param aggTypes A list of aggTypes that will be filtered down by this registry.\n     * @param indexPattern The indexPattern for which this list should be filtered down.\n     * @param aggConfig The aggConfig for which the returning list will be used.\n     * @return A filtered list of the passed aggTypes.\n     */\n    AggTypeFilters.prototype.filter = function (aggTypes, indexPattern, aggConfig) {\n        var allFilters = Array.from(this.filters);\n        var allowedAggTypes = aggTypes.filter(function (aggType) {\n            var isAggTypeAllowed = allFilters.every(function (filter) { return filter(aggType, indexPattern, aggConfig); });\n            return isAggTypeAllowed;\n        });\n        return allowedAggTypes;\n    };\n    return AggTypeFilters;\n}());\nvar aggTypeFilters = new AggTypeFilters();\nexport { aggTypeFilters, AggTypeFilters };\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/src/ui/public/agg_types/filter/agg_type_filters.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/src/ui/public/agg_types/filter/agg_type_filters.ts"],"names":[],"mappings":"AA4BA;;;GAGG;AACH;IAAA;QACU,YAAO,GAAG,IAAI,GAAG,EAAiB,CAAC;IA2B7C,CAAC;IAzBC;;;;OAIG;IACI,kCAAS,GAAhB,UAAiB,MAAqB;QACpC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IAC3B,CAAC;IAED;;;;;;;OAOG;IACI,+BAAM,GAAb,UAAc,QAAmB,EAAE,YAA0B,EAAE,SAAoB;QACjF,IAAM,UAAU,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC5C,IAAM,eAAe,GAAG,QAAQ,CAAC,MAAM,CAAC,UAAA,OAAO;YAC7C,IAAM,gBAAgB,GAAG,UAAU,CAAC,KAAK,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,OAAO,EAAE,YAAY,EAAE,SAAS,CAAC,EAAxC,CAAwC,CAAC,CAAC;YAC9F,OAAO,gBAAgB,CAAC;QAC1B,CAAC,CAAC,CAAC;QACH,OAAO,eAAe,CAAC;IACzB,CAAC;IACH,qBAAC;AAAD,CAAC,AA5BD,IA4BC;AAED,IAAM,cAAc,GAAG,IAAI,cAAc,EAAE,CAAC;AAE5C,OAAO,EAAE,cAAc,EAAE,cAAc,EAAE,CAAC","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { AggType } from '..';\nimport { IndexPattern } from '../../index_patterns';\nimport { AggConfig } from '../../vis';\n\ntype AggTypeFilter = (\n  aggType: AggType,\n  indexPattern: IndexPattern,\n  aggConfig: AggConfig\n) => boolean;\n\n/**\n * A registry to store {@link AggTypeFilter} which are used to filter down\n * available aggregations for a specific visualization and {@link AggConfig}.\n */\nclass AggTypeFilters {\n  private filters = new Set<AggTypeFilter>();\n\n  /**\n   * Register a new {@link AggTypeFilter} with this registry.\n   *\n   * @param filter The filter to register.\n   */\n  public addFilter(filter: AggTypeFilter): void {\n    this.filters.add(filter);\n  }\n\n  /**\n   * Returns the {@link AggType|aggTypes} filtered by all registered filters.\n   *\n   * @param aggTypes A list of aggTypes that will be filtered down by this registry.\n   * @param indexPattern The indexPattern for which this list should be filtered down.\n   * @param aggConfig The aggConfig for which the returning list will be used.\n   * @return A filtered list of the passed aggTypes.\n   */\n  public filter(aggTypes: AggType[], indexPattern: IndexPattern, aggConfig: AggConfig) {\n    const allFilters = Array.from(this.filters);\n    const allowedAggTypes = aggTypes.filter(aggType => {\n      const isAggTypeAllowed = allFilters.every(filter => filter(aggType, indexPattern, aggConfig));\n      return isAggTypeAllowed;\n    });\n    return allowedAggTypes;\n  }\n}\n\nconst aggTypeFilters = new AggTypeFilters();\n\nexport { aggTypeFilters, AggTypeFilters };\n"]}]}