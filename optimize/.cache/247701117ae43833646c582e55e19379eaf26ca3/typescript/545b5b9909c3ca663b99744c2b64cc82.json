{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/src/core/public/chrome/chrome_service.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/core/public/chrome/chrome_service.ts","mtime":1567631711496},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport * as tslib_1 from \"tslib\";\nimport * as Url from 'url';\nimport * as Rx from 'rxjs';\nimport { map, takeUntil } from 'rxjs/operators';\nvar IS_COLLAPSED_KEY = 'core.chrome.isCollapsed';\nfunction isEmbedParamInHash() {\n    var query = Url.parse(String(window.location.hash).slice(1), true).query;\n    return Boolean(query.embed);\n}\nvar ChromeService = /** @class */ (function () {\n    function ChromeService() {\n        this.stop$ = new Rx.ReplaySubject(1);\n    }\n    ChromeService.prototype.start = function () {\n        var _this = this;\n        var FORCE_HIDDEN = isEmbedParamInHash();\n        var brand$ = new Rx.BehaviorSubject({});\n        var isVisible$ = new Rx.BehaviorSubject(true);\n        var isCollapsed$ = new Rx.BehaviorSubject(!!localStorage.getItem(IS_COLLAPSED_KEY));\n        var applicationClasses$ = new Rx.BehaviorSubject(new Set());\n        var breadcrumbs$ = new Rx.BehaviorSubject([]);\n        return {\n            /**\n             * Set the brand configuration. Normally the `logo` property will be rendered as the\n             * CSS background for the home link in the chrome navigation, but when the page is\n             * rendered in a small window the `smallLogo` will be used and rendered at about\n             * 45px wide.\n             *\n             * example:\n             *\n             *    chrome.setBrand({\n             *      logo: 'url(/plugins/app/logo.png) center no-repeat'\n             *      smallLogo: 'url(/plugins/app/logo-small.png) center no-repeat'\n             *    })\n             *\n             */\n            setBrand: function (brand) {\n                brand$.next(Object.freeze({\n                    logo: brand.logo,\n                    smallLogo: brand.smallLogo,\n                }));\n            },\n            /**\n             * Get an observable of the current brand information.\n             */\n            getBrand$: function () { return brand$.pipe(takeUntil(_this.stop$)); },\n            /**\n             * Set the temporary visibility for the chrome. This does nothing if the chrome is hidden\n             * by default and should be used to hide the chrome for things like full-screen modes\n             * with an exit button.\n             */\n            setIsVisible: function (visibility) {\n                isVisible$.next(visibility);\n            },\n            /**\n             * Get an observable of the current visibility state of the chrome.\n             */\n            getIsVisible$: function () {\n                return isVisible$.pipe(map(function (visibility) { return (FORCE_HIDDEN ? false : visibility); }), takeUntil(_this.stop$));\n            },\n            /**\n             * Set the collapsed state of the chrome navigation.\n             */\n            setIsCollapsed: function (isCollapsed) {\n                isCollapsed$.next(isCollapsed);\n                if (isCollapsed) {\n                    localStorage.setItem(IS_COLLAPSED_KEY, 'true');\n                }\n                else {\n                    localStorage.removeItem(IS_COLLAPSED_KEY);\n                }\n            },\n            /**\n             * Get an observable of the current collapsed state of the chrome.\n             */\n            getIsCollapsed$: function () { return isCollapsed$.pipe(takeUntil(_this.stop$)); },\n            /**\n             * Add a className that should be set on the application container.\n             */\n            addApplicationClass: function (className) {\n                var update = new Set(tslib_1.__spread(applicationClasses$.getValue()));\n                update.add(className);\n                applicationClasses$.next(update);\n            },\n            /**\n             * Remove a className added with `addApplicationClass()`. If className is unknown it is ignored.\n             */\n            removeApplicationClass: function (className) {\n                var update = new Set(tslib_1.__spread(applicationClasses$.getValue()));\n                update.delete(className);\n                applicationClasses$.next(update);\n            },\n            /**\n             * Get the current set of classNames that will be set on the application container.\n             */\n            getApplicationClasses$: function () {\n                return applicationClasses$.pipe(map(function (set) { return tslib_1.__spread(set); }), takeUntil(_this.stop$));\n            },\n            /**\n             * Get an observable of the current list of breadcrumbs\n             */\n            getBreadcrumbs$: function () { return breadcrumbs$.pipe(takeUntil(_this.stop$)); },\n            /**\n             * Override the current set of breadcrumbs\n             */\n            setBreadcrumbs: function (newBreadcrumbs) {\n                breadcrumbs$.next(newBreadcrumbs);\n            },\n        };\n    };\n    ChromeService.prototype.stop = function () {\n        this.stop$.next();\n    };\n    return ChromeService;\n}());\nexport { ChromeService };\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/src/core/public/chrome/chrome_service.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/src/core/public/chrome/chrome_service.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport * as Url from 'url';\n\nimport * as Rx from 'rxjs';\nimport { map, takeUntil } from 'rxjs/operators';\n\nconst IS_COLLAPSED_KEY = 'core.chrome.isCollapsed';\n\nfunction isEmbedParamInHash() {\n  const { query } = Url.parse(String(window.location.hash).slice(1), true);\n  return Boolean(query.embed);\n}\n\nexport interface Brand {\n  logo?: string;\n  smallLogo?: string;\n}\n\nexport interface Breadcrumb {\n  text: string;\n  href?: string;\n}\n\nexport class ChromeService {\n  private readonly stop$ = new Rx.ReplaySubject(1);\n\n  public start() {\n    const FORCE_HIDDEN = isEmbedParamInHash();\n\n    const brand$ = new Rx.BehaviorSubject<Brand>({});\n    const isVisible$ = new Rx.BehaviorSubject(true);\n    const isCollapsed$ = new Rx.BehaviorSubject(!!localStorage.getItem(IS_COLLAPSED_KEY));\n    const applicationClasses$ = new Rx.BehaviorSubject<Set<string>>(new Set());\n    const breadcrumbs$ = new Rx.BehaviorSubject<Breadcrumb[]>([]);\n\n    return {\n      /**\n       * Set the brand configuration. Normally the `logo` property will be rendered as the\n       * CSS background for the home link in the chrome navigation, but when the page is\n       * rendered in a small window the `smallLogo` will be used and rendered at about\n       * 45px wide.\n       *\n       * example:\n       *\n       *    chrome.setBrand({\n       *      logo: 'url(/plugins/app/logo.png) center no-repeat'\n       *      smallLogo: 'url(/plugins/app/logo-small.png) center no-repeat'\n       *    })\n       *\n       */\n      setBrand: (brand: Brand) => {\n        brand$.next(\n          Object.freeze({\n            logo: brand.logo,\n            smallLogo: brand.smallLogo,\n          })\n        );\n      },\n\n      /**\n       * Get an observable of the current brand information.\n       */\n      getBrand$: () => brand$.pipe(takeUntil(this.stop$)),\n\n      /**\n       * Set the temporary visibility for the chrome. This does nothing if the chrome is hidden\n       * by default and should be used to hide the chrome for things like full-screen modes\n       * with an exit button.\n       */\n      setIsVisible: (visibility: boolean) => {\n        isVisible$.next(visibility);\n      },\n\n      /**\n       * Get an observable of the current visibility state of the chrome.\n       */\n      getIsVisible$: () =>\n        isVisible$.pipe(\n          map(visibility => (FORCE_HIDDEN ? false : visibility)),\n          takeUntil(this.stop$)\n        ),\n\n      /**\n       * Set the collapsed state of the chrome navigation.\n       */\n      setIsCollapsed: (isCollapsed: boolean) => {\n        isCollapsed$.next(isCollapsed);\n        if (isCollapsed) {\n          localStorage.setItem(IS_COLLAPSED_KEY, 'true');\n        } else {\n          localStorage.removeItem(IS_COLLAPSED_KEY);\n        }\n      },\n\n      /**\n       * Get an observable of the current collapsed state of the chrome.\n       */\n      getIsCollapsed$: () => isCollapsed$.pipe(takeUntil(this.stop$)),\n\n      /**\n       * Add a className that should be set on the application container.\n       */\n      addApplicationClass: (className: string) => {\n        const update = new Set([...applicationClasses$.getValue()]);\n        update.add(className);\n        applicationClasses$.next(update);\n      },\n\n      /**\n       * Remove a className added with `addApplicationClass()`. If className is unknown it is ignored.\n       */\n      removeApplicationClass: (className: string) => {\n        const update = new Set([...applicationClasses$.getValue()]);\n        update.delete(className);\n        applicationClasses$.next(update);\n      },\n\n      /**\n       * Get the current set of classNames that will be set on the application container.\n       */\n      getApplicationClasses$: () =>\n        applicationClasses$.pipe(\n          map(set => [...set]),\n          takeUntil(this.stop$)\n        ),\n\n      /**\n       * Get an observable of the current list of breadcrumbs\n       */\n      getBreadcrumbs$: () => breadcrumbs$.pipe(takeUntil(this.stop$)),\n\n      /**\n       * Override the current set of breadcrumbs\n       */\n      setBreadcrumbs: (newBreadcrumbs: Breadcrumb[]) => {\n        breadcrumbs$.next(newBreadcrumbs);\n      },\n    };\n  }\n\n  public stop() {\n    this.stop$.next();\n  }\n}\n\nexport type ChromeStartContract = ReturnType<ChromeService['start']>;\n"]}]}