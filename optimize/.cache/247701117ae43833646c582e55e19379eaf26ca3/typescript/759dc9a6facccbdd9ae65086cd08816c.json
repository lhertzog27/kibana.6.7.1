{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/src/core/public/legacy_platform/legacy_platform_service.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/core/public/legacy_platform/legacy_platform_service.ts","mtime":1567631711498},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport angular from 'angular';\n/**\n * The LegacyPlatformService is responsible for initializing\n * the legacy platform by injecting parts of the new platform\n * services into the legacy platform modules, like ui/modules,\n * and then bootstrapping the ui/chrome or ui/test_harness to\n * start either the app or browser tests.\n */\nvar LegacyPlatformService = /** @class */ (function () {\n    function LegacyPlatformService(params) {\n        this.params = params;\n    }\n    LegacyPlatformService.prototype.start = function (_a) {\n        var i18n = _a.i18n, injectedMetadata = _a.injectedMetadata, fatalErrors = _a.fatalErrors, notifications = _a.notifications, loadingCount = _a.loadingCount, basePath = _a.basePath, uiSettings = _a.uiSettings, chrome = _a.chrome;\n        // Inject parts of the new platform into parts of the legacy platform\n        // so that legacy APIs/modules can mimic their new platform counterparts\n        require('ui/metadata').__newPlatformInit__(injectedMetadata.getLegacyMetadata());\n        require('ui/i18n').__newPlatformInit__(i18n.Context);\n        require('ui/notify/fatal_error').__newPlatformInit__(fatalErrors);\n        require('ui/notify/toasts').__newPlatformInit__(notifications.toasts);\n        require('ui/chrome/api/loading_count').__newPlatformInit__(loadingCount);\n        require('ui/chrome/api/base_path').__newPlatformInit__(basePath);\n        require('ui/chrome/api/ui_settings').__newPlatformInit__(uiSettings);\n        require('ui/chrome/api/injected_vars').__newPlatformInit__(injectedMetadata);\n        require('ui/chrome/api/controls').__newPlatformInit__(chrome);\n        require('ui/chrome/api/theme').__newPlatformInit__(chrome);\n        require('ui/chrome/api/breadcrumbs').__newPlatformInit__(chrome);\n        require('ui/chrome/services/global_nav_state').__newPlatformInit__(chrome);\n        // Load the bootstrap module before loading the legacy platform files so that\n        // the bootstrap module can modify the environment a bit first\n        var bootstrapModule = this.loadBootstrapModule();\n        // require the files that will tie into the legacy platform\n        this.params.requireLegacyFiles();\n        bootstrapModule.bootstrap(this.params.targetDomElement);\n    };\n    LegacyPlatformService.prototype.stop = function () {\n        var angularRoot = angular.element(this.params.targetDomElement);\n        var injector$ = angularRoot.injector();\n        // if we haven't gotten to the point of bootstraping\n        // angular, injector$ won't be defined\n        if (!injector$) {\n            return;\n        }\n        // destroy the root angular scope\n        injector$.get('$rootScope').$destroy();\n        // clear the inner html of the root angular element\n        this.params.targetDomElement.textContent = '';\n    };\n    LegacyPlatformService.prototype.loadBootstrapModule = function () {\n        if (this.params.useLegacyTestHarness) {\n            // wrapped in NODE_ENV check so the `ui/test_harness` module\n            // is not included in the distributable\n            if (process.env.IS_KIBANA_DISTRIBUTABLE !== 'true') {\n                return require('ui/test_harness');\n            }\n            throw new Error('tests bundle is not available in the distributable');\n        }\n        return require('ui/chrome');\n    };\n    return LegacyPlatformService;\n}());\nexport { LegacyPlatformService };\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/src/core/public/legacy_platform/legacy_platform_service.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/src/core/public/legacy_platform/legacy_platform_service.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;GAiBG;AAEH,OAAO,OAAO,MAAM,SAAS,CAAC;AA2B9B;;;;;;GAMG;AACH;IACE,+BAA6B,MAA4B;QAA5B,WAAM,GAAN,MAAM,CAAsB;IAAG,CAAC;IAEtD,qCAAK,GAAZ,UAAa,EASN;YARL,cAAI,EACJ,sCAAgB,EAChB,4BAAW,EACX,gCAAa,EACb,8BAAY,EACZ,sBAAQ,EACR,0BAAU,EACV,kBAAM;QAEN,qEAAqE;QACrE,wEAAwE;QACxE,OAAO,CAAC,aAAa,CAAC,CAAC,mBAAmB,CAAC,gBAAgB,CAAC,iBAAiB,EAAE,CAAC,CAAC;QACjF,OAAO,CAAC,SAAS,CAAC,CAAC,mBAAmB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACrD,OAAO,CAAC,uBAAuB,CAAC,CAAC,mBAAmB,CAAC,WAAW,CAAC,CAAC;QAClE,OAAO,CAAC,kBAAkB,CAAC,CAAC,mBAAmB,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;QACtE,OAAO,CAAC,6BAA6B,CAAC,CAAC,mBAAmB,CAAC,YAAY,CAAC,CAAC;QACzE,OAAO,CAAC,yBAAyB,CAAC,CAAC,mBAAmB,CAAC,QAAQ,CAAC,CAAC;QACjE,OAAO,CAAC,2BAA2B,CAAC,CAAC,mBAAmB,CAAC,UAAU,CAAC,CAAC;QACrE,OAAO,CAAC,6BAA6B,CAAC,CAAC,mBAAmB,CAAC,gBAAgB,CAAC,CAAC;QAC7E,OAAO,CAAC,wBAAwB,CAAC,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;QAC9D,OAAO,CAAC,qBAAqB,CAAC,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;QAC3D,OAAO,CAAC,2BAA2B,CAAC,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;QACjE,OAAO,CAAC,qCAAqC,CAAC,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;QAE3E,6EAA6E;QAC7E,8DAA8D;QAC9D,IAAM,eAAe,GAAG,IAAI,CAAC,mBAAmB,EAAE,CAAC;QAEnD,2DAA2D;QAC3D,IAAI,CAAC,MAAM,CAAC,kBAAkB,EAAE,CAAC;QAEjC,eAAe,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC;IAC1D,CAAC;IAEM,oCAAI,GAAX;QACE,IAAM,WAAW,GAAG,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC;QAClE,IAAM,SAAS,GAAG,WAAW,CAAC,QAAQ,EAAE,CAAC;QAEzC,oDAAoD;QACpD,sCAAsC;QACtC,IAAI,CAAC,SAAS,EAAE;YACd,OAAO;SACR;QAED,iCAAiC;QACjC,SAAS,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,QAAQ,EAAE,CAAC;QAEvC,mDAAmD;QACnD,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,WAAW,GAAG,EAAE,CAAC;IAChD,CAAC;IAEO,mDAAmB,GAA3B;QAGE,IAAI,IAAI,CAAC,MAAM,CAAC,oBAAoB,EAAE;YACpC,4DAA4D;YAC5D,uCAAuC;YACvC,IAAI,OAAO,CAAC,GAAG,CAAC,uBAAuB,KAAK,MAAM,EAAE;gBAClD,OAAO,OAAO,CAAC,iBAAiB,CAAC,CAAC;aACnC;YAED,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;SACvE;QAED,OAAO,OAAO,CAAC,WAAW,CAAC,CAAC;IAC9B,CAAC;IACH,4BAAC;AAAD,CAAC,AAtED,IAsEC","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport angular from 'angular';\nimport { BasePathStartContract } from '../base_path';\nimport { ChromeStartContract } from '../chrome';\nimport { FatalErrorsStartContract } from '../fatal_errors';\nimport { I18nStartContract } from '../i18n';\nimport { InjectedMetadataStartContract } from '../injected_metadata';\nimport { LoadingCountStartContract } from '../loading_count';\nimport { NotificationsStartContract } from '../notifications';\nimport { UiSettingsClient } from '../ui_settings';\n\ninterface Deps {\n  i18n: I18nStartContract;\n  injectedMetadata: InjectedMetadataStartContract;\n  fatalErrors: FatalErrorsStartContract;\n  notifications: NotificationsStartContract;\n  loadingCount: LoadingCountStartContract;\n  basePath: BasePathStartContract;\n  uiSettings: UiSettingsClient;\n  chrome: ChromeStartContract;\n}\n\nexport interface LegacyPlatformParams {\n  targetDomElement: HTMLElement;\n  requireLegacyFiles: () => void;\n  useLegacyTestHarness?: boolean;\n}\n\n/**\n * The LegacyPlatformService is responsible for initializing\n * the legacy platform by injecting parts of the new platform\n * services into the legacy platform modules, like ui/modules,\n * and then bootstrapping the ui/chrome or ui/test_harness to\n * start either the app or browser tests.\n */\nexport class LegacyPlatformService {\n  constructor(private readonly params: LegacyPlatformParams) {}\n\n  public start({\n    i18n,\n    injectedMetadata,\n    fatalErrors,\n    notifications,\n    loadingCount,\n    basePath,\n    uiSettings,\n    chrome,\n  }: Deps) {\n    // Inject parts of the new platform into parts of the legacy platform\n    // so that legacy APIs/modules can mimic their new platform counterparts\n    require('ui/metadata').__newPlatformInit__(injectedMetadata.getLegacyMetadata());\n    require('ui/i18n').__newPlatformInit__(i18n.Context);\n    require('ui/notify/fatal_error').__newPlatformInit__(fatalErrors);\n    require('ui/notify/toasts').__newPlatformInit__(notifications.toasts);\n    require('ui/chrome/api/loading_count').__newPlatformInit__(loadingCount);\n    require('ui/chrome/api/base_path').__newPlatformInit__(basePath);\n    require('ui/chrome/api/ui_settings').__newPlatformInit__(uiSettings);\n    require('ui/chrome/api/injected_vars').__newPlatformInit__(injectedMetadata);\n    require('ui/chrome/api/controls').__newPlatformInit__(chrome);\n    require('ui/chrome/api/theme').__newPlatformInit__(chrome);\n    require('ui/chrome/api/breadcrumbs').__newPlatformInit__(chrome);\n    require('ui/chrome/services/global_nav_state').__newPlatformInit__(chrome);\n\n    // Load the bootstrap module before loading the legacy platform files so that\n    // the bootstrap module can modify the environment a bit first\n    const bootstrapModule = this.loadBootstrapModule();\n\n    // require the files that will tie into the legacy platform\n    this.params.requireLegacyFiles();\n\n    bootstrapModule.bootstrap(this.params.targetDomElement);\n  }\n\n  public stop() {\n    const angularRoot = angular.element(this.params.targetDomElement);\n    const injector$ = angularRoot.injector();\n\n    // if we haven't gotten to the point of bootstraping\n    // angular, injector$ won't be defined\n    if (!injector$) {\n      return;\n    }\n\n    // destroy the root angular scope\n    injector$.get('$rootScope').$destroy();\n\n    // clear the inner html of the root angular element\n    this.params.targetDomElement.textContent = '';\n  }\n\n  private loadBootstrapModule(): {\n    bootstrap: (targetDomElement: HTMLElement) => void;\n  } {\n    if (this.params.useLegacyTestHarness) {\n      // wrapped in NODE_ENV check so the `ui/test_harness` module\n      // is not included in the distributable\n      if (process.env.IS_KIBANA_DISTRIBUTABLE !== 'true') {\n        return require('ui/test_harness');\n      }\n\n      throw new Error('tests bundle is not available in the distributable');\n    }\n\n    return require('ui/chrome');\n  }\n}\n"]}]}