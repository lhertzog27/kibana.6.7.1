{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/src/ui/public/url/kibana_parsed_url.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/url/kibana_parsed_url.ts","mtime":1567631711763},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { parse } from 'url';\nimport { modifyUrl } from '../../../core/public/utils';\nimport { prependPath } from './prepend_path';\n/**\n * Represents the pieces that make up a url in Kibana, offering some helpful functionality\n * for translating those pieces into absolute or relative urls. A Kibana url with a basePath\n * looks like this: http://localhost:5601/basePath/app/appId#/an/appPath?with=query&params\n *\n *  - basePath is \"/basePath\"\n *  - appId is \"appId\"\n *  - appPath is \"/an/appPath?with=query&params\"\n *\n * Almost all urls in Kibana should have this structure, including the \"/app\" portion in front of the appId\n * (one exception is the login link).\n */\nvar KibanaParsedUrl = /** @class */ (function () {\n    function KibanaParsedUrl(options) {\n        var appId = options.appId, _a = options.basePath, basePath = _a === void 0 ? '' : _a, _b = options.appPath, appPath = _b === void 0 ? '' : _b, hostname = options.hostname, protocol = options.protocol, port = options.port;\n        // We'll use window defaults\n        var hostOrProtocolSpecified = hostname || protocol || port;\n        this.basePath = basePath;\n        this.appId = appId;\n        this.appPath = appPath;\n        this.hostname = hostOrProtocolSpecified ? hostname : window.location.hostname;\n        this.port = hostOrProtocolSpecified ? port : window.location.port;\n        this.protocol = hostOrProtocolSpecified ? protocol : window.location.protocol;\n    }\n    KibanaParsedUrl.prototype.getGlobalState = function () {\n        if (!this.appPath) {\n            return '';\n        }\n        var parsedUrl = parse(this.appPath, true);\n        var query = parsedUrl.query || {};\n        return query._g || '';\n    };\n    KibanaParsedUrl.prototype.setGlobalState = function (newGlobalState) {\n        if (!this.appPath) {\n            return;\n        }\n        this.appPath = modifyUrl(this.appPath, function (parsed) {\n            parsed.query._g = newGlobalState;\n        });\n    };\n    KibanaParsedUrl.prototype.addQueryParameter = function (name, val) {\n        this.appPath = modifyUrl(this.appPath, function (parsed) {\n            parsed.query[name] = val;\n        });\n    };\n    KibanaParsedUrl.prototype.getHashedAppPath = function () {\n        return \"#\" + this.appPath;\n    };\n    KibanaParsedUrl.prototype.getAppBasePath = function () {\n        return \"/\" + this.appId;\n    };\n    KibanaParsedUrl.prototype.getAppRootPath = function () {\n        return \"/app\" + this.getAppBasePath() + this.getHashedAppPath();\n    };\n    KibanaParsedUrl.prototype.getRootRelativePath = function () {\n        return prependPath(this.getAppRootPath(), this.basePath);\n    };\n    KibanaParsedUrl.prototype.getAbsoluteUrl = function () {\n        var _this = this;\n        return modifyUrl(this.getRootRelativePath(), function (parsed) {\n            parsed.protocol = _this.protocol;\n            parsed.port = _this.port;\n            parsed.hostname = _this.hostname;\n        });\n    };\n    return KibanaParsedUrl;\n}());\nexport { KibanaParsedUrl };\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/src/ui/public/url/kibana_parsed_url.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/src/ui/public/url/kibana_parsed_url.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { parse } from 'url';\n\nimport { modifyUrl } from '../../../core/public/utils';\nimport { prependPath } from './prepend_path';\n\ninterface Options {\n  /**\n   * An optional base path for kibana. If supplied, should start with a \"/\".\n   * e.g. in https://localhost:5601/gra/app/kibana#/visualize/edit/viz_id the\n   * basePath is \"/gra\"\n   */\n  basePath?: string;\n\n  /**\n   * The app id.\n   * e.g. in https://localhost:5601/gra/app/kibana#/visualize/edit/viz_id the app id is \"kibana\".\n   */\n  appId: string;\n\n  /**\n   * The path for a page in the the app. Should start with a \"/\". Don't include the hash sign. Can\n   * include all query parameters.\n   * e.g. in https://localhost:5601/gra/app/kibana#/visualize/edit/viz_id?g=state the appPath is\n   * \"/visualize/edit/viz_id?g=state\"\n   */\n  appPath?: string;\n\n  /**\n   * Optional hostname. Uses current window location's hostname if hostname, port,\n   * and protocol are undefined.\n   */\n  hostname?: string;\n\n  /**\n   * Optional port. Uses current window location's port if hostname, port,\n   * and protocol are undefined.\n   */\n  port?: string;\n\n  /**\n   * Optional protocol. Uses current window location's protocol if hostname, port,\n   * and protocol are undefined.\n   */\n  protocol?: string;\n}\n\n/**\n * Represents the pieces that make up a url in Kibana, offering some helpful functionality\n * for translating those pieces into absolute or relative urls. A Kibana url with a basePath\n * looks like this: http://localhost:5601/basePath/app/appId#/an/appPath?with=query&params\n *\n *  - basePath is \"/basePath\"\n *  - appId is \"appId\"\n *  - appPath is \"/an/appPath?with=query&params\"\n *\n * Almost all urls in Kibana should have this structure, including the \"/app\" portion in front of the appId\n * (one exception is the login link).\n */\nexport class KibanaParsedUrl {\n  public appId: string;\n  public appPath: string;\n  public basePath: string;\n  public hostname?: string;\n  public protocol?: string;\n  public port?: string;\n\n  constructor(options: Options) {\n    const { appId, basePath = '', appPath = '', hostname, protocol, port } = options;\n\n    // We'll use window defaults\n    const hostOrProtocolSpecified = hostname || protocol || port;\n\n    this.basePath = basePath;\n    this.appId = appId;\n    this.appPath = appPath;\n    this.hostname = hostOrProtocolSpecified ? hostname : window.location.hostname;\n    this.port = hostOrProtocolSpecified ? port : window.location.port;\n    this.protocol = hostOrProtocolSpecified ? protocol : window.location.protocol;\n  }\n\n  public getGlobalState() {\n    if (!this.appPath) {\n      return '';\n    }\n    const parsedUrl = parse(this.appPath, true);\n    const query = parsedUrl.query || {};\n    return query._g || '';\n  }\n\n  public setGlobalState(newGlobalState: string) {\n    if (!this.appPath) {\n      return;\n    }\n\n    this.appPath = modifyUrl(this.appPath, parsed => {\n      parsed.query._g = newGlobalState;\n    });\n  }\n\n  public addQueryParameter(name: string, val: string) {\n    this.appPath = modifyUrl(this.appPath, parsed => {\n      parsed.query[name] = val;\n    });\n  }\n\n  public getHashedAppPath() {\n    return `#${this.appPath}`;\n  }\n\n  public getAppBasePath() {\n    return `/${this.appId}`;\n  }\n\n  public getAppRootPath() {\n    return `/app${this.getAppBasePath()}${this.getHashedAppPath()}`;\n  }\n\n  public getRootRelativePath() {\n    return prependPath(this.getAppRootPath(), this.basePath);\n  }\n\n  public getAbsoluteUrl() {\n    return modifyUrl(this.getRootRelativePath(), parsed => {\n      parsed.protocol = this.protocol;\n      parsed.port = this.port;\n      parsed.hostname = this.hostname;\n    });\n  }\n}\n"]}]}