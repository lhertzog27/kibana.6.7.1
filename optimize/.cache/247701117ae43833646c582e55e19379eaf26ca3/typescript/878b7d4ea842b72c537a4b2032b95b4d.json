{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/src/ui/public/state_management/state_monitor_factory.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/state_management/state_monitor_factory.ts","mtime":1567631711755},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { cloneDeep, isEqual, isPlainObject, set } from 'lodash';\nexport var stateMonitorFactory = {\n    create: function (state, customInitialState) { return stateMonitor(state, customInitialState); },\n};\nfunction stateMonitor(state, customInitialState) {\n    var destroyed = false;\n    var ignoredProps = [];\n    var changeHandlers = [];\n    var initialState;\n    setInitialState(customInitialState);\n    function setInitialState(innerCustomInitialState) {\n        // state.toJSON returns a reference, clone so we can mutate it safely\n        initialState = cloneDeep(innerCustomInitialState) || cloneDeep(state.toJSON());\n    }\n    function removeIgnoredProps(innerState) {\n        ignoredProps.forEach(function (path) {\n            set(innerState, path, true);\n        });\n        return innerState;\n    }\n    function getStatus() {\n        // state.toJSON returns a reference, clone so we can mutate it safely\n        var currentState = removeIgnoredProps(cloneDeep(state.toJSON()));\n        var isClean = isEqual(currentState, initialState);\n        return {\n            clean: isClean,\n            dirty: !isClean,\n        };\n    }\n    function dispatchChange(type, keys) {\n        if (type === void 0) { type = null; }\n        if (keys === void 0) { keys = []; }\n        var status = getStatus();\n        if (!changeHandlers) {\n            throw new Error('Change handlers is undefined, this object has been destroyed');\n        }\n        changeHandlers.forEach(function (changeHandler) {\n            changeHandler(status, type, keys);\n        });\n    }\n    function dispatchFetch(keys) {\n        dispatchChange('fetch_with_changes', keys);\n    }\n    function dispatchSave(keys) {\n        dispatchChange('save_with_changes', keys);\n    }\n    function dispatchReset(keys) {\n        dispatchChange('reset_with_changes', keys);\n    }\n    return {\n        setInitialState: function (innerCustomInitialState) {\n            if (!isPlainObject(innerCustomInitialState)) {\n                throw new TypeError('The default state must be an object');\n            }\n            // check the current status\n            var previousStatus = getStatus();\n            // update the initialState and apply ignoredProps\n            setInitialState(innerCustomInitialState);\n            removeIgnoredProps(initialState);\n            // fire the change handler if the status has changed\n            if (!isEqual(previousStatus, getStatus())) {\n                dispatchChange();\n            }\n        },\n        ignoreProps: function (props) {\n            ignoredProps = ignoredProps.concat(props);\n            removeIgnoredProps(initialState);\n            return this;\n        },\n        onChange: function (callback) {\n            if (destroyed || !changeHandlers) {\n                throw new Error('Monitor has been destroyed');\n            }\n            if (typeof callback !== 'function') {\n                throw new Error('onChange handler must be a function');\n            }\n            changeHandlers.push(callback);\n            // Listen for state events.\n            state.on('fetch_with_changes', dispatchFetch);\n            state.on('save_with_changes', dispatchSave);\n            state.on('reset_with_changes', dispatchReset);\n            // if the state is already dirty, fire the change handler immediately\n            var status = getStatus();\n            if (status.dirty) {\n                dispatchChange();\n            }\n            return this;\n        },\n        destroy: function () {\n            destroyed = true;\n            changeHandlers = undefined;\n            state.off('fetch_with_changes', dispatchFetch);\n            state.off('save_with_changes', dispatchSave);\n            state.off('reset_with_changes', dispatchReset);\n        },\n    };\n}\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/src/ui/public/state_management/state_monitor_factory.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/src/ui/public/state_management/state_monitor_factory.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { cloneDeep, isEqual, isPlainObject, set } from 'lodash';\nimport { State } from './state';\n\nexport const stateMonitorFactory = {\n  create: (state: State, customInitialState: State) => stateMonitor(state, customInitialState),\n};\n\ninterface StateStatus {\n  clean: boolean;\n  dirty: boolean;\n}\n\ntype ChangeHandlerFn = (status: StateStatus, type: string | null, keys: string[]) => void;\n\nfunction stateMonitor(state: State, customInitialState: State) {\n  let destroyed = false;\n  let ignoredProps: string[] = [];\n  let changeHandlers: ChangeHandlerFn[] | undefined = [];\n  let initialState: State;\n\n  setInitialState(customInitialState);\n\n  function setInitialState(innerCustomInitialState: State) {\n    // state.toJSON returns a reference, clone so we can mutate it safely\n    initialState = cloneDeep(innerCustomInitialState) || cloneDeep(state.toJSON());\n  }\n\n  function removeIgnoredProps(innerState: State) {\n    ignoredProps.forEach(path => {\n      set(innerState, path, true);\n    });\n    return innerState;\n  }\n\n  function getStatus(): StateStatus {\n    // state.toJSON returns a reference, clone so we can mutate it safely\n    const currentState = removeIgnoredProps(cloneDeep(state.toJSON()));\n    const isClean = isEqual(currentState, initialState);\n\n    return {\n      clean: isClean,\n      dirty: !isClean,\n    };\n  }\n\n  function dispatchChange(type: string | null = null, keys: string[] = []) {\n    const status = getStatus();\n    if (!changeHandlers) {\n      throw new Error('Change handlers is undefined, this object has been destroyed');\n    }\n    changeHandlers.forEach(changeHandler => {\n      changeHandler(status, type, keys);\n    });\n  }\n\n  function dispatchFetch(keys: string[]) {\n    dispatchChange('fetch_with_changes', keys);\n  }\n\n  function dispatchSave(keys: string[]) {\n    dispatchChange('save_with_changes', keys);\n  }\n\n  function dispatchReset(keys: string[]) {\n    dispatchChange('reset_with_changes', keys);\n  }\n\n  return {\n    setInitialState(innerCustomInitialState: State) {\n      if (!isPlainObject(innerCustomInitialState)) {\n        throw new TypeError('The default state must be an object');\n      }\n\n      // check the current status\n      const previousStatus = getStatus();\n\n      // update the initialState and apply ignoredProps\n      setInitialState(innerCustomInitialState);\n      removeIgnoredProps(initialState);\n\n      // fire the change handler if the status has changed\n      if (!isEqual(previousStatus, getStatus())) {\n        dispatchChange();\n      }\n    },\n\n    ignoreProps(props: string[]) {\n      ignoredProps = ignoredProps.concat(props);\n      removeIgnoredProps(initialState);\n      return this;\n    },\n\n    onChange(callback: ChangeHandlerFn) {\n      if (destroyed || !changeHandlers) {\n        throw new Error('Monitor has been destroyed');\n      }\n      if (typeof callback !== 'function') {\n        throw new Error('onChange handler must be a function');\n      }\n\n      changeHandlers.push(callback);\n\n      // Listen for state events.\n      state.on('fetch_with_changes', dispatchFetch);\n      state.on('save_with_changes', dispatchSave);\n      state.on('reset_with_changes', dispatchReset);\n\n      // if the state is already dirty, fire the change handler immediately\n      const status = getStatus();\n      if (status.dirty) {\n        dispatchChange();\n      }\n\n      return this;\n    },\n\n    destroy() {\n      destroyed = true;\n      changeHandlers = undefined;\n      state.off('fetch_with_changes', dispatchFetch);\n      state.off('save_with_changes', dispatchSave);\n      state.off('reset_with_changes', dispatchReset);\n    },\n  };\n}\n"]}]}