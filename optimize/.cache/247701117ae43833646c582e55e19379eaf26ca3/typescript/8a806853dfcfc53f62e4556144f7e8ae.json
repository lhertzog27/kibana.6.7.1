{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/src/ui/public/embeddable/context_menu_actions/build_eui_context_menu_panels.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/embeddable/context_menu_actions/build_eui_context_menu_panels.ts","mtime":1567631711721},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport * as tslib_1 from \"tslib\";\nimport _ from 'lodash';\n/**\n * Loops through allActions and extracts those that belong on the given contextMenuPanelId\n * @param {string} contextMenuPanelId\n * @param {Array.<ContextMenuAction>} allActions\n */\nfunction getActionsForPanel(contextMenuPanelId, allActions) {\n    return allActions.filter(function (action) { return action.parentPanelId === contextMenuPanelId; });\n}\n/**\n * @param {String} contextMenuPanelId\n * @param {Array.<ContextMenuAction>} actions\n * @param {Embeddable} embeddable\n * @param {ContainerState} containerState\n * @return {{\n *   Array.<EuiContextMenuPanelItemDescriptor> items - panel actions converted into the items expected to be on an\n *     EuiContextMenuPanel,\n *   Array.<EuiContextMenuPanelDescriptor> childPanels - extracted child panels, if any actions also open a panel. They\n *     need to be moved to the top level for EUI.\n *  }}\n */\nfunction buildEuiContextMenuPanelItemsAndChildPanels(_a) {\n    var contextMenuPanelId = _a.contextMenuPanelId, actions = _a.actions, embeddable = _a.embeddable, containerState = _a.containerState;\n    var items = [];\n    var childPanels = [];\n    var actionsForPanel = getActionsForPanel(contextMenuPanelId, actions);\n    actionsForPanel.forEach(function (action) {\n        var isVisible = action.isVisible({ embeddable: embeddable, containerState: containerState });\n        if (!isVisible) {\n            return;\n        }\n        if (action.childContextMenuPanel) {\n            childPanels.push.apply(childPanels, tslib_1.__spread(buildEuiContextMenuPanels({\n                contextMenuPanel: action.childContextMenuPanel,\n                actions: actions,\n                embeddable: embeddable,\n                containerState: containerState,\n            })));\n        }\n        items.push(convertPanelActionToContextMenuItem({\n            action: action,\n            containerState: containerState,\n            embeddable: embeddable,\n        }));\n    });\n    return { items: items, childPanels: childPanels };\n}\n/**\n * Transforms a DashboardContextMenuPanel to the shape EuiContextMenuPanel expects, inserting any registered pluggable\n * panel actions.\n * @param {ContextMenuPanel} contextMenuPanel\n * @param {Array.<ContextMenuAction>} actions to build the context menu with\n * @param {Embeddable} embeddable\n * @param {ContainerState} containerState\n * @return {EuiContextMenuPanelDescriptor[]} An array of context menu panels to be used in the eui react component.\n */\nexport function buildEuiContextMenuPanels(_a) {\n    var contextMenuPanel = _a.contextMenuPanel, actions = _a.actions, embeddable = _a.embeddable, containerState = _a.containerState;\n    var euiContextMenuPanel = {\n        id: contextMenuPanel.id,\n        title: contextMenuPanel.title,\n        items: [],\n        content: contextMenuPanel.getContent({ embeddable: embeddable, containerState: containerState }),\n    };\n    var contextMenuPanels = [euiContextMenuPanel];\n    var _b = buildEuiContextMenuPanelItemsAndChildPanels({\n        contextMenuPanelId: contextMenuPanel.id,\n        actions: actions,\n        embeddable: embeddable,\n        containerState: containerState,\n    }), items = _b.items, childPanels = _b.childPanels;\n    euiContextMenuPanel.items = items;\n    return contextMenuPanels.concat(childPanels);\n}\n/**\n *\n * @param {ContextMenuAction} action\n * @param {ContainerState} containerState\n * @param {Embeddable} embeddable\n * @return {EuiContextMenuPanelItemDescriptor}\n */\nfunction convertPanelActionToContextMenuItem(_a) {\n    var action = _a.action, containerState = _a.containerState, embeddable = _a.embeddable;\n    var menuPanelItem = {\n        name: action.displayName,\n        icon: action.icon,\n        panel: _.get(action, 'childContextMenuPanel.id'),\n        disabled: action.isDisabled({ embeddable: embeddable, containerState: containerState }),\n        'data-test-subj': \"dashboardPanelAction-\" + action.id,\n    };\n    if (action.onClick) {\n        menuPanelItem.onClick = function () {\n            if (action.onClick) {\n                action.onClick({ embeddable: embeddable, containerState: containerState });\n            }\n        };\n    }\n    if (action.getHref) {\n        menuPanelItem.href = action.getHref({ embeddable: embeddable, containerState: containerState });\n    }\n    return menuPanelItem;\n}\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/src/ui/public/embeddable/context_menu_actions/build_eui_context_menu_panels.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/src/ui/public/embeddable/context_menu_actions/build_eui_context_menu_panels.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { EuiContextMenuPanelDescriptor, EuiContextMenuPanelItemDescriptor } from '@elastic/eui';\nimport _ from 'lodash';\nimport { ContainerState, ContextMenuAction, ContextMenuPanel, Embeddable } from 'ui/embeddable';\n\n/**\n * Loops through allActions and extracts those that belong on the given contextMenuPanelId\n * @param {string} contextMenuPanelId\n * @param {Array.<ContextMenuAction>} allActions\n */\nfunction getActionsForPanel(contextMenuPanelId: string, allActions: ContextMenuAction[]) {\n  return allActions.filter(action => action.parentPanelId === contextMenuPanelId);\n}\n\n/**\n * @param {String} contextMenuPanelId\n * @param {Array.<ContextMenuAction>} actions\n * @param {Embeddable} embeddable\n * @param {ContainerState} containerState\n * @return {{\n *   Array.<EuiContextMenuPanelItemDescriptor> items - panel actions converted into the items expected to be on an\n *     EuiContextMenuPanel,\n *   Array.<EuiContextMenuPanelDescriptor> childPanels - extracted child panels, if any actions also open a panel. They\n *     need to be moved to the top level for EUI.\n *  }}\n */\nfunction buildEuiContextMenuPanelItemsAndChildPanels({\n  contextMenuPanelId,\n  actions,\n  embeddable,\n  containerState,\n}: {\n  contextMenuPanelId: string;\n  actions: ContextMenuAction[];\n  embeddable?: Embeddable;\n  containerState: ContainerState;\n}) {\n  const items: EuiContextMenuPanelItemDescriptor[] = [];\n  const childPanels: EuiContextMenuPanelDescriptor[] = [];\n  const actionsForPanel = getActionsForPanel(contextMenuPanelId, actions);\n  actionsForPanel.forEach(action => {\n    const isVisible = action.isVisible({ embeddable, containerState });\n    if (!isVisible) {\n      return;\n    }\n\n    if (action.childContextMenuPanel) {\n      childPanels.push(\n        ...buildEuiContextMenuPanels({\n          contextMenuPanel: action.childContextMenuPanel,\n          actions,\n          embeddable,\n          containerState,\n        })\n      );\n    }\n\n    items.push(\n      convertPanelActionToContextMenuItem({\n        action,\n        containerState,\n        embeddable,\n      })\n    );\n  });\n\n  return { items, childPanels };\n}\n\n/**\n * Transforms a DashboardContextMenuPanel to the shape EuiContextMenuPanel expects, inserting any registered pluggable\n * panel actions.\n * @param {ContextMenuPanel} contextMenuPanel\n * @param {Array.<ContextMenuAction>} actions to build the context menu with\n * @param {Embeddable} embeddable\n * @param {ContainerState} containerState\n * @return {EuiContextMenuPanelDescriptor[]} An array of context menu panels to be used in the eui react component.\n */\nexport function buildEuiContextMenuPanels({\n  contextMenuPanel,\n  actions,\n  embeddable,\n  containerState,\n}: {\n  contextMenuPanel: ContextMenuPanel;\n  actions: ContextMenuAction[];\n  embeddable?: Embeddable;\n  containerState: ContainerState;\n}): EuiContextMenuPanelDescriptor[] {\n  const euiContextMenuPanel: EuiContextMenuPanelDescriptor = {\n    id: contextMenuPanel.id,\n    title: contextMenuPanel.title,\n    items: [],\n    content: contextMenuPanel.getContent({ embeddable, containerState }),\n  };\n  const contextMenuPanels = [euiContextMenuPanel];\n\n  const { items, childPanels } = buildEuiContextMenuPanelItemsAndChildPanels({\n    contextMenuPanelId: contextMenuPanel.id,\n    actions,\n    embeddable,\n    containerState,\n  });\n\n  euiContextMenuPanel.items = items;\n  return contextMenuPanels.concat(childPanels);\n}\n\n/**\n *\n * @param {ContextMenuAction} action\n * @param {ContainerState} containerState\n * @param {Embeddable} embeddable\n * @return {EuiContextMenuPanelItemDescriptor}\n */\nfunction convertPanelActionToContextMenuItem({\n  action,\n  containerState,\n  embeddable,\n}: {\n  action: ContextMenuAction;\n  containerState: ContainerState;\n  embeddable?: Embeddable;\n}): EuiContextMenuPanelItemDescriptor {\n  const menuPanelItem: EuiContextMenuPanelItemDescriptor = {\n    name: action.displayName,\n    icon: action.icon,\n    panel: _.get(action, 'childContextMenuPanel.id'),\n    disabled: action.isDisabled({ embeddable, containerState }),\n    'data-test-subj': `dashboardPanelAction-${action.id}`,\n  };\n\n  if (action.onClick) {\n    menuPanelItem.onClick = () => {\n      if (action.onClick) {\n        action.onClick({ embeddable, containerState });\n      }\n    };\n  }\n\n  if (action.getHref) {\n    menuPanelItem.href = action.getHref({ embeddable, containerState });\n  }\n\n  return menuPanelItem;\n}\n"]}]}