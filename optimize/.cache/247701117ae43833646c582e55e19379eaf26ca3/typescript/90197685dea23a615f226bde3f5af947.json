{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/src/ui/public/share/lib/url_shortener.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/share/lib/url_shortener.ts","mtime":1567631711753},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport * as tslib_1 from \"tslib\";\nimport { kfetch } from 'ui/kfetch';\nimport url from 'url';\nimport chrome from '../../chrome';\nexport function shortenUrl(absoluteUrl) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n        var basePath, parsedUrl, path, hash, relativeUrl, body, resp;\n        return tslib_1.__generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    basePath = chrome.getBasePath();\n                    parsedUrl = url.parse(absoluteUrl);\n                    if (!parsedUrl || !parsedUrl.path) {\n                        return [2 /*return*/];\n                    }\n                    path = parsedUrl.path.replace(basePath, '');\n                    hash = parsedUrl.hash ? parsedUrl.hash : '';\n                    relativeUrl = path + hash;\n                    body = JSON.stringify({ url: relativeUrl });\n                    return [4 /*yield*/, kfetch({ method: 'POST', pathname: '/api/shorten_url', body: body })];\n                case 1:\n                    resp = _a.sent();\n                    return [2 /*return*/, url.format({\n                            protocol: parsedUrl.protocol,\n                            host: parsedUrl.host,\n                            pathname: basePath + \"/goto/\" + resp.urlId,\n                        })];\n            }\n        });\n    });\n}\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/src/ui/public/share/lib/url_shortener.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/src/ui/public/share/lib/url_shortener.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;GAiBG;;AAEH,OAAO,EAAE,MAAM,EAAE,MAAM,WAAW,CAAC;AACnC,OAAO,GAAG,MAAM,KAAK,CAAC;AACtB,OAAO,MAAM,MAAM,cAAc,CAAC;AAElC,MAAM,UAAgB,UAAU,CAAC,WAAmB;;;;;;oBAC5C,QAAQ,GAAG,MAAM,CAAC,WAAW,EAAE,CAAC;oBAEhC,SAAS,GAAG,GAAG,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;oBACzC,IAAI,CAAC,SAAS,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE;wBACjC,sBAAO;qBACR;oBACK,IAAI,GAAG,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;oBAC5C,IAAI,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC;oBAC5C,WAAW,GAAG,IAAI,GAAG,IAAI,CAAC;oBAE1B,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,EAAE,GAAG,EAAE,WAAW,EAAE,CAAC,CAAC;oBAErC,qBAAM,MAAM,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,kBAAkB,EAAE,IAAI,MAAA,EAAE,CAAC,EAAA;;oBAA3E,IAAI,GAAG,SAAoE;oBACjF,sBAAO,GAAG,CAAC,MAAM,CAAC;4BAChB,QAAQ,EAAE,SAAS,CAAC,QAAQ;4BAC5B,IAAI,EAAE,SAAS,CAAC,IAAI;4BACpB,QAAQ,EAAK,QAAQ,cAAS,IAAI,CAAC,KAAO;yBAC3C,CAAC,EAAC;;;;CACJ","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { kfetch } from 'ui/kfetch';\nimport url from 'url';\nimport chrome from '../../chrome';\n\nexport async function shortenUrl(absoluteUrl: string) {\n  const basePath = chrome.getBasePath();\n\n  const parsedUrl = url.parse(absoluteUrl);\n  if (!parsedUrl || !parsedUrl.path) {\n    return;\n  }\n  const path = parsedUrl.path.replace(basePath, '');\n  const hash = parsedUrl.hash ? parsedUrl.hash : '';\n  const relativeUrl = path + hash;\n\n  const body = JSON.stringify({ url: relativeUrl });\n\n  const resp = await kfetch({ method: 'POST', pathname: '/api/shorten_url', body });\n  return url.format({\n    protocol: parsedUrl.protocol,\n    host: parsedUrl.host,\n    pathname: `${basePath}/goto/${resp.urlId}`,\n  });\n}\n"]}]}