{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/src/ui/public/embeddable/embeddable_factory.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/embeddable/embeddable_factory.ts","mtime":1567631711722},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/**\n * The EmbeddableFactory creates and initializes an embeddable instance\n */\nvar EmbeddableFactory = /** @class */ (function () {\n    /**\n     *\n     * @param name - a unique identified for this factory, which will be used to map an embeddable spec to\n     * a factory that can generate an instance of it.\n     */\n    function EmbeddableFactory(_a) {\n        var name = _a.name;\n        this.name = name;\n    }\n    return EmbeddableFactory;\n}());\nexport { EmbeddableFactory };\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/src/ui/public/embeddable/embeddable_factory.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/src/ui/public/embeddable/embeddable_factory.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;GAiBG;AAOH;;GAEG;AACH;IAGE;;;;OAIG;IACH,2BAAY,EAA0B;YAAxB,cAAI;QAChB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACnB,CAAC;IAeH,wBAAC;AAAD,CAAC,AAzBD,IAyBC","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { Embeddable } from './embeddable';\nimport { EmbeddableState } from './types';\n\nexport type OnEmbeddableStateChanged = (embeddableStateChanges: EmbeddableState) => void;\n\n/**\n * The EmbeddableFactory creates and initializes an embeddable instance\n */\nexport abstract class EmbeddableFactory {\n  public readonly name: string;\n\n  /**\n   *\n   * @param name - a unique identified for this factory, which will be used to map an embeddable spec to\n   * a factory that can generate an instance of it.\n   */\n  constructor({ name }: { name: string }) {\n    this.name = name;\n  }\n\n  /**\n   *\n   * @param {{ id: string }} containerMetadata. Currently just passing in panelState but it's more than we need, so we should\n   * decouple this to only include data given to us from the embeddable when it's added to the dashboard. Generally\n   * will be just the object id, but could be anything depending on the plugin.\n   * @param {onEmbeddableStateChanged} onEmbeddableStateChanged - embeddable should call this function with updated\n   * state whenever something changes that the dashboard should know about.\n   * @return {Promise.<Embeddable>}\n   */\n  public abstract create(\n    containerMetadata: { id: string },\n    onEmbeddableStateChanged: OnEmbeddableStateChanged\n  ): Promise<Embeddable>;\n}\n"]}]}