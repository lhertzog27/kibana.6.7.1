{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/src/core/public/utils/share_weak_replay.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/core/public/utils/share_weak_replay.ts","mtime":1567631691078},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport * as Rx from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n/**\n * Just like the [`shareReplay()`](https://rxjs-dev.firebaseapp.com/api/operators/shareReplay) operator from\n * RxJS except for a few key differences:\n *\n * - If all downstream subscribers unsubscribe the source subscription will be unsubscribed.\n *\n * - Replay-ability is only maintained while the source is active, if it completes or errors\n *   then complete/error is sent to the current subscribers and the replay buffer is cleared.\n *\n * - Any subscription after the the source completes or errors will create a new subscription\n *   to the source observable.\n *\n * @param bufferSize Optional, default is `Number.POSITIVE_INFINITY`\n */\nexport function shareWeakReplay(bufferSize) {\n    return function (source) {\n        var subject;\n        var stop$ = new Rx.Subject();\n        return new Rx.Observable(function (observer) {\n            if (!subject) {\n                subject = new Rx.ReplaySubject(bufferSize);\n            }\n            subject.subscribe(observer).add(function () {\n                if (!subject) {\n                    return;\n                }\n                if (subject.observers.length === 0) {\n                    stop$.next();\n                }\n                if (subject.closed || subject.isStopped) {\n                    subject = undefined;\n                }\n            });\n            if (subject && subject.observers.length === 1) {\n                source.pipe(takeUntil(stop$)).subscribe(subject);\n            }\n        });\n    };\n}\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/src/core/public/utils/share_weak_replay.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/src/core/public/utils/share_weak_replay.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;GAiBG;AAEH,OAAO,KAAK,EAAE,MAAM,MAAM,CAAC;AAC3B,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;AAE3C;;;;;;;;;;;;;GAaG;AACH,MAAM,UAAU,eAAe,CAAI,UAAmB;IACpD,OAAO,UAAC,MAAwB;QAC9B,IAAI,OAAwC,CAAC;QAC7C,IAAM,KAAK,GAAG,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;QAE/B,OAAO,IAAI,EAAE,CAAC,UAAU,CAAC,UAAA,QAAQ;YAC/B,IAAI,CAAC,OAAO,EAAE;gBACZ,OAAO,GAAG,IAAI,EAAE,CAAC,aAAa,CAAI,UAAU,CAAC,CAAC;aAC/C;YAED,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC;gBAC9B,IAAI,CAAC,OAAO,EAAE;oBACZ,OAAO;iBACR;gBAED,IAAI,OAAO,CAAC,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE;oBAClC,KAAK,CAAC,IAAI,EAAE,CAAC;iBACd;gBAED,IAAI,OAAO,CAAC,MAAM,IAAI,OAAO,CAAC,SAAS,EAAE;oBACvC,OAAO,GAAG,SAAS,CAAC;iBACrB;YACH,CAAC,CAAC,CAAC;YAEH,IAAI,OAAO,IAAI,OAAO,CAAC,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE;gBAC7C,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;aAClD;QACH,CAAC,CAAC,CAAC;IACL,CAAC,CAAC;AACJ,CAAC","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport * as Rx from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n/**\n * Just like the [`shareReplay()`](https://rxjs-dev.firebaseapp.com/api/operators/shareReplay) operator from\n * RxJS except for a few key differences:\n *\n * - If all downstream subscribers unsubscribe the source subscription will be unsubscribed.\n *\n * - Replay-ability is only maintained while the source is active, if it completes or errors\n *   then complete/error is sent to the current subscribers and the replay buffer is cleared.\n *\n * - Any subscription after the the source completes or errors will create a new subscription\n *   to the source observable.\n *\n * @param bufferSize Optional, default is `Number.POSITIVE_INFINITY`\n */\nexport function shareWeakReplay<T>(bufferSize?: number): Rx.MonoTypeOperatorFunction<T> {\n  return (source: Rx.Observable<T>) => {\n    let subject: Rx.ReplaySubject<T> | undefined;\n    const stop$ = new Rx.Subject();\n\n    return new Rx.Observable(observer => {\n      if (!subject) {\n        subject = new Rx.ReplaySubject<T>(bufferSize);\n      }\n\n      subject.subscribe(observer).add(() => {\n        if (!subject) {\n          return;\n        }\n\n        if (subject.observers.length === 0) {\n          stop$.next();\n        }\n\n        if (subject.closed || subject.isStopped) {\n          subject = undefined;\n        }\n      });\n\n      if (subject && subject.observers.length === 1) {\n        source.pipe(takeUntil(stop$)).subscribe(subject);\n      }\n    });\n  };\n}\n"]}]}