{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/src/legacy/core_plugins/kibana/public/discover/embeddable/search_embeddable.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/legacy/core_plugins/kibana/public/discover/embeddable/search_embeddable.ts","mtime":1567631711564},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport * as tslib_1 from \"tslib\";\nimport angular from 'angular';\nimport * as columnActions from 'ui/doc_table/actions/columns';\nimport { Embeddable, } from 'ui/embeddable';\nimport { RequestAdapter } from 'ui/inspector/adapters';\nimport { getTime } from 'ui/timefilter/get_time';\nimport searchTemplate from './search_template.html';\nvar SearchEmbeddable = /** @class */ (function (_super) {\n    tslib_1.__extends(SearchEmbeddable, _super);\n    function SearchEmbeddable(_a) {\n        var onEmbeddableStateChanged = _a.onEmbeddableStateChanged, savedSearch = _a.savedSearch, editUrl = _a.editUrl, $rootScope = _a.$rootScope, $compile = _a.$compile;\n        var _this = _super.call(this, {\n            title: savedSearch.title,\n            editUrl: editUrl,\n            indexPattern: savedSearch.searchSource.getField('index'),\n        }) || this;\n        _this.panelTitle = '';\n        _this.onEmbeddableStateChanged = onEmbeddableStateChanged;\n        _this.savedSearch = savedSearch;\n        _this.$rootScope = $rootScope;\n        _this.$compile = $compile;\n        _this.customization = {};\n        _this.inspectorAdaptors = {\n            requests: new RequestAdapter(),\n        };\n        return _this;\n    }\n    SearchEmbeddable.prototype.getInspectorAdapters = function () {\n        return this.inspectorAdaptors;\n    };\n    SearchEmbeddable.prototype.onContainerStateChanged = function (containerState) {\n        this.customization = containerState.embeddableCustomization || {};\n        this.filters = containerState.filters;\n        this.query = containerState.query;\n        this.timeRange = containerState.timeRange;\n        this.panelTitle = '';\n        if (!containerState.hidePanelTitles) {\n            this.panelTitle =\n                containerState.customTitle !== undefined\n                    ? containerState.customTitle\n                    : this.savedSearch.title;\n        }\n        if (this.searchScope) {\n            this.pushContainerStateParamsToScope(this.searchScope);\n        }\n    };\n    /**\n     *\n     * @param {Element} domNode\n     * @param {ContainerState} containerState\n     */\n    SearchEmbeddable.prototype.render = function (domNode, containerState) {\n        this.onContainerStateChanged(containerState);\n        this.initializeSearchScope();\n        if (!this.searchScope) {\n            throw new Error('Search scope not defined');\n            return;\n        }\n        this.searchInstance = this.$compile(searchTemplate)(this.searchScope);\n        var rootNode = angular.element(domNode);\n        rootNode.append(this.searchInstance);\n    };\n    SearchEmbeddable.prototype.destroy = function () {\n        this.savedSearch.destroy();\n        if (this.searchInstance) {\n            this.searchInstance.remove();\n        }\n        if (this.searchScope) {\n            this.searchScope.$destroy();\n            delete this.searchScope;\n        }\n    };\n    SearchEmbeddable.prototype.initializeSearchScope = function () {\n        var _this = this;\n        var searchScope = this.$rootScope.$new();\n        searchScope.description = this.savedSearch.description;\n        searchScope.searchSource = this.savedSearch.searchSource;\n        searchScope.inspectorAdapters = this.inspectorAdaptors;\n        var timeRangeSearchSource = searchScope.searchSource.create();\n        timeRangeSearchSource.setField('filter', function () {\n            if (!_this.searchScope || !_this.timeRange) {\n                return;\n            }\n            return getTime(_this.searchScope.searchSource.getField('index'), _this.timeRange);\n        });\n        this.filtersSearchSource = searchScope.searchSource.create();\n        this.filtersSearchSource.setParent(timeRangeSearchSource);\n        searchScope.searchSource.setParent(this.filtersSearchSource);\n        this.pushContainerStateParamsToScope(searchScope);\n        searchScope.setSortOrder = function (columnName, direction) {\n            searchScope.sort = _this.customization.sort = [columnName, direction];\n            _this.emitEmbeddableStateChange(_this.getEmbeddableState());\n        };\n        searchScope.addColumn = function (columnName) {\n            if (!searchScope.columns) {\n                return;\n            }\n            _this.savedSearch.searchSource.getField('index').popularizeField(columnName, 1);\n            columnActions.addColumn(searchScope.columns, columnName);\n            searchScope.columns = _this.customization.columns = searchScope.columns;\n            _this.emitEmbeddableStateChange(_this.getEmbeddableState());\n        };\n        searchScope.removeColumn = function (columnName) {\n            if (!searchScope.columns) {\n                return;\n            }\n            _this.savedSearch.searchSource.getField('index').popularizeField(columnName, 1);\n            columnActions.removeColumn(searchScope.columns, columnName);\n            _this.customization.columns = searchScope.columns;\n            _this.emitEmbeddableStateChange(_this.getEmbeddableState());\n        };\n        searchScope.moveColumn = function (columnName, newIndex) {\n            if (!searchScope.columns) {\n                return;\n            }\n            columnActions.moveColumn(searchScope.columns, columnName, newIndex);\n            _this.customization.columns = searchScope.columns;\n            _this.emitEmbeddableStateChange(_this.getEmbeddableState());\n        };\n        searchScope.filter = function (field, value, operator) {\n            var index = _this.savedSearch.searchSource.getField('index').id;\n            var stagedFilter = {\n                field: field,\n                value: value,\n                operator: operator,\n                index: index,\n            };\n            _this.emitEmbeddableStateChange(tslib_1.__assign({}, _this.getEmbeddableState(), { stagedFilter: stagedFilter }));\n        };\n        this.searchScope = searchScope;\n    };\n    SearchEmbeddable.prototype.emitEmbeddableStateChange = function (embeddableState) {\n        this.onEmbeddableStateChanged(embeddableState);\n    };\n    SearchEmbeddable.prototype.getEmbeddableState = function () {\n        return {\n            customization: this.customization,\n        };\n    };\n    SearchEmbeddable.prototype.pushContainerStateParamsToScope = function (searchScope) {\n        // If there is column or sort data on the panel, that means the original columns or sort settings have\n        // been overridden in a dashboard.\n        searchScope.columns = this.customization.columns || this.savedSearch.columns;\n        searchScope.sort = this.customization.sort || this.savedSearch.sort;\n        searchScope.sharedItemTitle = this.panelTitle;\n        this.filtersSearchSource.setField('filter', this.filters);\n        this.filtersSearchSource.setField('query', this.query);\n    };\n    return SearchEmbeddable;\n}(Embeddable));\nexport { SearchEmbeddable };\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/src/legacy/core_plugins/kibana/public/discover/embeddable/search_embeddable.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/src/legacy/core_plugins/kibana/public/discover/embeddable/search_embeddable.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport angular from 'angular';\nimport { SearchSource } from 'ui/courier';\nimport * as columnActions from 'ui/doc_table/actions/columns';\nimport {\n  ContainerState,\n  Embeddable,\n  EmbeddableState,\n  OnEmbeddableStateChanged,\n  TimeRange,\n} from 'ui/embeddable';\nimport { Filters, Query } from 'ui/embeddable/types';\nimport { RequestAdapter } from 'ui/inspector/adapters';\nimport { Adapters } from 'ui/inspector/types';\nimport { getTime } from 'ui/timefilter/get_time';\nimport { SavedSearch } from '../types';\nimport searchTemplate from './search_template.html';\n\ninterface SearchScope extends ng.IScope {\n  columns?: string[];\n  description?: string;\n  sort?: string[];\n  searchSource?: SearchSource;\n  sharedItemTitle?: string;\n  inspectorAdapters?: Adapters;\n  setSortOrder?: (column: string, columnDirection: string) => void;\n  removeColumn?: (column: string) => void;\n  addColumn?: (column: string) => void;\n  moveColumn?: (column: string, index: number) => void;\n  filter?: (field: string, value: string, operator: string) => void;\n}\n\ninterface SearchEmbeddableCustomization {\n  sort?: string[];\n  columns?: string[];\n}\n\ninterface SearchEmbeddableConfig {\n  onEmbeddableStateChanged: OnEmbeddableStateChanged;\n  savedSearch: SavedSearch;\n  editUrl: string;\n  $rootScope: ng.IRootScopeService;\n  $compile: ng.ICompileService;\n}\n\nexport class SearchEmbeddable extends Embeddable {\n  private readonly onEmbeddableStateChanged: OnEmbeddableStateChanged;\n  private readonly savedSearch: SavedSearch;\n  private $rootScope: ng.IRootScopeService;\n  private $compile: ng.ICompileService;\n  private customization: SearchEmbeddableCustomization;\n  private inspectorAdaptors: Adapters;\n  private searchScope?: SearchScope;\n  private panelTitle: string = '';\n  private filtersSearchSource: SearchSource;\n  private timeRange?: TimeRange;\n  private filters?: Filters;\n  private query?: Query;\n  private searchInstance?: JQLite;\n\n  constructor({\n    onEmbeddableStateChanged,\n    savedSearch,\n    editUrl,\n    $rootScope,\n    $compile,\n  }: SearchEmbeddableConfig) {\n    super({\n      title: savedSearch.title,\n      editUrl,\n      indexPattern: savedSearch.searchSource.getField('index'),\n    });\n    this.onEmbeddableStateChanged = onEmbeddableStateChanged;\n    this.savedSearch = savedSearch;\n    this.$rootScope = $rootScope;\n    this.$compile = $compile;\n    this.customization = {};\n    this.inspectorAdaptors = {\n      requests: new RequestAdapter(),\n    };\n  }\n\n  public getInspectorAdapters() {\n    return this.inspectorAdaptors;\n  }\n\n  public onContainerStateChanged(containerState: ContainerState) {\n    this.customization = containerState.embeddableCustomization || {};\n    this.filters = containerState.filters;\n    this.query = containerState.query;\n    this.timeRange = containerState.timeRange;\n    this.panelTitle = '';\n    if (!containerState.hidePanelTitles) {\n      this.panelTitle =\n        containerState.customTitle !== undefined\n          ? containerState.customTitle\n          : this.savedSearch.title;\n    }\n\n    if (this.searchScope) {\n      this.pushContainerStateParamsToScope(this.searchScope);\n    }\n  }\n\n  /**\n   *\n   * @param {Element} domNode\n   * @param {ContainerState} containerState\n   */\n  public render(domNode: HTMLElement, containerState: ContainerState) {\n    this.onContainerStateChanged(containerState);\n    this.initializeSearchScope();\n    if (!this.searchScope) {\n      throw new Error('Search scope not defined');\n      return;\n    }\n    this.searchInstance = this.$compile(searchTemplate)(this.searchScope);\n    const rootNode = angular.element(domNode);\n    rootNode.append(this.searchInstance);\n  }\n\n  public destroy() {\n    this.savedSearch.destroy();\n    if (this.searchInstance) {\n      this.searchInstance.remove();\n    }\n    if (this.searchScope) {\n      this.searchScope.$destroy();\n      delete this.searchScope;\n    }\n  }\n\n  private initializeSearchScope() {\n    const searchScope: SearchScope = this.$rootScope.$new();\n\n    searchScope.description = this.savedSearch.description;\n    searchScope.searchSource = this.savedSearch.searchSource;\n    searchScope.inspectorAdapters = this.inspectorAdaptors;\n\n    const timeRangeSearchSource = searchScope.searchSource.create();\n    timeRangeSearchSource.setField('filter', () => {\n      if (!this.searchScope || !this.timeRange) {\n        return;\n      }\n      return getTime(this.searchScope.searchSource.getField('index'), this.timeRange);\n    });\n\n    this.filtersSearchSource = searchScope.searchSource.create();\n    this.filtersSearchSource.setParent(timeRangeSearchSource);\n\n    searchScope.searchSource.setParent(this.filtersSearchSource);\n\n    this.pushContainerStateParamsToScope(searchScope);\n\n    searchScope.setSortOrder = (columnName, direction) => {\n      searchScope.sort = this.customization.sort = [columnName, direction];\n      this.emitEmbeddableStateChange(this.getEmbeddableState());\n    };\n\n    searchScope.addColumn = (columnName: string) => {\n      if (!searchScope.columns) {\n        return;\n      }\n      this.savedSearch.searchSource.getField('index').popularizeField(columnName, 1);\n      columnActions.addColumn(searchScope.columns, columnName);\n      searchScope.columns = this.customization.columns = searchScope.columns;\n      this.emitEmbeddableStateChange(this.getEmbeddableState());\n    };\n\n    searchScope.removeColumn = (columnName: string) => {\n      if (!searchScope.columns) {\n        return;\n      }\n      this.savedSearch.searchSource.getField('index').popularizeField(columnName, 1);\n      columnActions.removeColumn(searchScope.columns, columnName);\n      this.customization.columns = searchScope.columns;\n      this.emitEmbeddableStateChange(this.getEmbeddableState());\n    };\n\n    searchScope.moveColumn = (columnName, newIndex: number) => {\n      if (!searchScope.columns) {\n        return;\n      }\n      columnActions.moveColumn(searchScope.columns, columnName, newIndex);\n      this.customization.columns = searchScope.columns;\n      this.emitEmbeddableStateChange(this.getEmbeddableState());\n    };\n\n    searchScope.filter = (field, value, operator) => {\n      const index = this.savedSearch.searchSource.getField('index').id;\n      const stagedFilter = {\n        field,\n        value,\n        operator,\n        index,\n      };\n      this.emitEmbeddableStateChange({\n        ...this.getEmbeddableState(),\n        stagedFilter,\n      });\n    };\n\n    this.searchScope = searchScope;\n  }\n\n  private emitEmbeddableStateChange(embeddableState: EmbeddableState) {\n    this.onEmbeddableStateChanged(embeddableState);\n  }\n\n  private getEmbeddableState(): EmbeddableState {\n    return {\n      customization: this.customization,\n    };\n  }\n\n  private pushContainerStateParamsToScope(searchScope: SearchScope) {\n    // If there is column or sort data on the panel, that means the original columns or sort settings have\n    // been overridden in a dashboard.\n\n    searchScope.columns = this.customization.columns || this.savedSearch.columns;\n    searchScope.sort = this.customization.sort || this.savedSearch.sort;\n    searchScope.sharedItemTitle = this.panelTitle;\n\n    this.filtersSearchSource.setField('filter', this.filters);\n    this.filtersSearchSource.setField('query', this.query);\n  }\n}\n"]}]}