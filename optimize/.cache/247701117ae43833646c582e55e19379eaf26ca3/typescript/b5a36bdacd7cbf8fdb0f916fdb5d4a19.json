{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/src/ui/public/inspector/view_registry.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/inspector/view_registry.ts","mtime":1567631711741},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport * as tslib_1 from \"tslib\";\nimport { EventEmitter } from 'events';\nimport { InspectorViewDescription } from './types';\n/**\n * @callback viewShouldShowFunc\n * @param {object} adapters - A list of adapters to check whether or not this view\n *    should be shown for.\n * @returns {boolean} true - if this view should be shown for the given adapters.\n */\n/**\n * A registry that will hold inspector views.\n */\nvar InspectorViewRegistry = /** @class */ (function (_super) {\n    tslib_1.__extends(InspectorViewRegistry, _super);\n    function InspectorViewRegistry() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.views = [];\n        return _this;\n    }\n    /**\n     * Register a new inspector view to the registry. Check the README.md in the\n     * inspector directory for more information of the object format to register\n     * here. This will also emit a 'change' event on the registry itself.\n     *\n     * @param {InspectorViewDescription} view - The view description to add to the registry.\n     */\n    InspectorViewRegistry.prototype.register = function (view) {\n        if (!view) {\n            return;\n        }\n        this.views.push(view);\n        // Keep registry sorted by the order property\n        this.views.sort(function (a, b) { return (a.order || Number.MAX_VALUE) - (b.order || Number.MAX_VALUE); });\n        this.emit('change');\n    };\n    /**\n     * Retrieve all views currently registered with the registry.\n     * @returns {InspectorViewDescription[]} A by `order` sorted list of all registered\n     *    inspector views.\n     */\n    InspectorViewRegistry.prototype.getAll = function () {\n        return this.views;\n    };\n    /**\n     * Retrieve all registered views, that want to be visible for the specified adapters.\n     * @param {object} adapters - an adapter configuration\n     * @returns {InspectorViewDescription[]} All inespector view descriptions visible\n     *    for the specific adapters.\n     */\n    InspectorViewRegistry.prototype.getVisible = function (adapters) {\n        if (!adapters) {\n            return [];\n        }\n        return this.views.filter(function (view) { return !view.shouldShow || view.shouldShow(adapters); });\n    };\n    return InspectorViewRegistry;\n}(EventEmitter));\n/**\n * The global view registry. In the long run this should be solved by a registry\n * system introduced by the new platform instead, to not keep global state like that.\n */\nvar viewRegistry = new InspectorViewRegistry();\nexport { viewRegistry, InspectorViewRegistry, InspectorViewDescription };\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/src/ui/public/inspector/view_registry.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/src/ui/public/inspector/view_registry.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;GAiBG;;AAEH,OAAO,EAAE,YAAY,EAAE,MAAM,QAAQ,CAAC;AACtC,OAAO,EAAY,wBAAwB,EAAE,MAAM,SAAS,CAAC;AAE7D;;;;;GAKG;AAEH;;GAEG;AACH;IAAoC,iDAAY;IAAhD;QAAA,qEAyCC;QAxCS,WAAK,GAA+B,EAAE,CAAC;;IAwCjD,CAAC;IAtCC;;;;;;OAMG;IACI,wCAAQ,GAAf,UAAgB,IAA8B;QAC5C,IAAI,CAAC,IAAI,EAAE;YACT,OAAO;SACR;QACD,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACtB,6CAA6C;QAC7C,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,CAAC,CAAC,CAAC,KAAK,IAAI,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,IAAI,MAAM,CAAC,SAAS,CAAC,EAA7D,CAA6D,CAAC,CAAC;QACzF,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACtB,CAAC;IAED;;;;OAIG;IACI,sCAAM,GAAb;QACE,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IAED;;;;;OAKG;IACI,0CAAU,GAAjB,UAAkB,QAAmB;QACnC,IAAI,CAAC,QAAQ,EAAE;YACb,OAAO,EAAE,CAAC;SACX;QACD,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,UAAA,IAAI,IAAI,OAAA,CAAC,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,EAA7C,CAA6C,CAAC,CAAC;IAClF,CAAC;IACH,4BAAC;AAAD,CAAC,AAzCD,CAAoC,YAAY,GAyC/C;AAED;;;GAGG;AACH,IAAM,YAAY,GAAG,IAAI,qBAAqB,EAAE,CAAC;AAEjD,OAAO,EAAE,YAAY,EAAE,qBAAqB,EAAE,wBAAwB,EAAE,CAAC","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { EventEmitter } from 'events';\nimport { Adapters, InspectorViewDescription } from './types';\n\n/**\n * @callback viewShouldShowFunc\n * @param {object} adapters - A list of adapters to check whether or not this view\n *    should be shown for.\n * @returns {boolean} true - if this view should be shown for the given adapters.\n */\n\n/**\n * A registry that will hold inspector views.\n */\nclass InspectorViewRegistry extends EventEmitter {\n  private views: InspectorViewDescription[] = [];\n\n  /**\n   * Register a new inspector view to the registry. Check the README.md in the\n   * inspector directory for more information of the object format to register\n   * here. This will also emit a 'change' event on the registry itself.\n   *\n   * @param {InspectorViewDescription} view - The view description to add to the registry.\n   */\n  public register(view: InspectorViewDescription): void {\n    if (!view) {\n      return;\n    }\n    this.views.push(view);\n    // Keep registry sorted by the order property\n    this.views.sort((a, b) => (a.order || Number.MAX_VALUE) - (b.order || Number.MAX_VALUE));\n    this.emit('change');\n  }\n\n  /**\n   * Retrieve all views currently registered with the registry.\n   * @returns {InspectorViewDescription[]} A by `order` sorted list of all registered\n   *    inspector views.\n   */\n  public getAll(): InspectorViewDescription[] {\n    return this.views;\n  }\n\n  /**\n   * Retrieve all registered views, that want to be visible for the specified adapters.\n   * @param {object} adapters - an adapter configuration\n   * @returns {InspectorViewDescription[]} All inespector view descriptions visible\n   *    for the specific adapters.\n   */\n  public getVisible(adapters?: Adapters): InspectorViewDescription[] {\n    if (!adapters) {\n      return [];\n    }\n    return this.views.filter(view => !view.shouldShow || view.shouldShow(adapters));\n  }\n}\n\n/**\n * The global view registry. In the long run this should be solved by a registry\n * system introduced by the new platform instead, to not keep global state like that.\n */\nconst viewRegistry = new InspectorViewRegistry();\n\nexport { viewRegistry, InspectorViewRegistry, InspectorViewDescription };\n"]}]}