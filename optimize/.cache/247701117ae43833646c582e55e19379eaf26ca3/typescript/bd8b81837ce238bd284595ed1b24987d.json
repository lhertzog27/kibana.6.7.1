{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/src/core/public/utils/modify_url.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/core/public/utils/modify_url.ts","mtime":1567631711499},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { format as formatUrl, parse as parseUrl } from 'url';\n/**\n *  Takes a URL and a function that takes the meaningful parts\n *  of the URL as a key-value object, modifies some or all of\n *  the parts, and returns the modified parts formatted again\n *  as a url.\n *\n *  Url Parts sent:\n *    - protocol\n *    - slashes (does the url have the //)\n *    - auth\n *    - hostname (just the name of the host, no port or auth information)\n *    - port\n *    - pathname (the path after the hostname, no query or hash, starts\n *        with a slash if there was a path)\n *    - query (always an object, even when no query on original url)\n *    - hash\n *\n *  Why?\n *    - The default url library in node produces several conflicting\n *      properties on the \"parsed\" output. Modifying any of these might\n *      lead to the modifications being ignored (depending on which\n *      property was modified)\n *    - It's not always clear wither to use path/pathname, host/hostname,\n *      so this tries to add helpful constraints\n *\n *  @param url the url to parse\n *  @param block a function that will modify the parsed url, or return a new one\n */\nexport function modifyUrl(url, block) {\n    var parsed = parseUrl(url, true);\n    // copy over the most specific version of each\n    // property. By default, the parsed url includes\n    // several conflicting properties (like path and\n    // pathname + search, or search and query) and keeping\n    // track of which property is actually used when they\n    // are formatted is harder than necessary\n    var meaningfulParts = {\n        protocol: parsed.protocol,\n        slashes: parsed.slashes,\n        auth: parsed.auth,\n        hostname: parsed.hostname,\n        port: parsed.port,\n        pathname: parsed.pathname,\n        query: parsed.query || {},\n        hash: parsed.hash,\n    };\n    // the block modifies the meaningfulParts object, or returns a new one\n    var modifiedParts = block(meaningfulParts) || meaningfulParts;\n    // format the modified/replaced meaningfulParts back into a url\n    return formatUrl({\n        protocol: modifiedParts.protocol,\n        slashes: modifiedParts.slashes,\n        auth: modifiedParts.auth,\n        hostname: modifiedParts.hostname,\n        port: modifiedParts.port,\n        pathname: modifiedParts.pathname,\n        query: modifiedParts.query,\n        hash: modifiedParts.hash,\n    });\n}\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/src/core/public/utils/modify_url.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/src/core/public/utils/modify_url.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;GAiBG;AAEH,OAAO,EAAE,MAAM,IAAI,SAAS,EAAE,KAAK,IAAI,QAAQ,EAAE,MAAM,KAAK,CAAC;AAa7D;;;;;;;;;;;;;;;;;;;;;;;;;;;GA2BG;AACH,MAAM,UAAU,SAAS,CAAC,GAAW,EAAE,KAAoD;IACzF,IAAM,MAAM,GAAG,QAAQ,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;IAEnC,8CAA8C;IAC9C,gDAAgD;IAChD,gDAAgD;IAChD,sDAAsD;IACtD,qDAAqD;IACrD,yCAAyC;IACzC,IAAM,eAAe,GAAG;QACtB,QAAQ,EAAE,MAAM,CAAC,QAAQ;QACzB,OAAO,EAAE,MAAM,CAAC,OAAO;QACvB,IAAI,EAAE,MAAM,CAAC,IAAI;QACjB,QAAQ,EAAE,MAAM,CAAC,QAAQ;QACzB,IAAI,EAAE,MAAM,CAAC,IAAI;QACjB,QAAQ,EAAE,MAAM,CAAC,QAAQ;QACzB,KAAK,EAAE,MAAM,CAAC,KAAK,IAAI,EAAE;QACzB,IAAI,EAAE,MAAM,CAAC,IAAI;KAClB,CAAC;IAEF,sEAAsE;IACtE,IAAM,aAAa,GAAG,KAAK,CAAC,eAAe,CAAC,IAAI,eAAe,CAAC;IAEhE,+DAA+D;IAC/D,OAAO,SAAS,CAAC;QACf,QAAQ,EAAE,aAAa,CAAC,QAAQ;QAChC,OAAO,EAAE,aAAa,CAAC,OAAO;QAC9B,IAAI,EAAE,aAAa,CAAC,IAAI;QACxB,QAAQ,EAAE,aAAa,CAAC,QAAQ;QAChC,IAAI,EAAE,aAAa,CAAC,IAAI;QACxB,QAAQ,EAAE,aAAa,CAAC,QAAQ;QAChC,KAAK,EAAE,aAAa,CAAC,KAAK;QAC1B,IAAI,EAAE,aAAa,CAAC,IAAI;KACzB,CAAC,CAAC;AACL,CAAC","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { format as formatUrl, parse as parseUrl } from 'url';\n\ninterface UrlParts {\n  protocol?: string;\n  slashes?: boolean;\n  auth?: string;\n  hostname?: string;\n  port?: string;\n  pathname?: string;\n  query: { [key: string]: string | string[] | undefined };\n  hash?: string;\n}\n\n/**\n *  Takes a URL and a function that takes the meaningful parts\n *  of the URL as a key-value object, modifies some or all of\n *  the parts, and returns the modified parts formatted again\n *  as a url.\n *\n *  Url Parts sent:\n *    - protocol\n *    - slashes (does the url have the //)\n *    - auth\n *    - hostname (just the name of the host, no port or auth information)\n *    - port\n *    - pathname (the path after the hostname, no query or hash, starts\n *        with a slash if there was a path)\n *    - query (always an object, even when no query on original url)\n *    - hash\n *\n *  Why?\n *    - The default url library in node produces several conflicting\n *      properties on the \"parsed\" output. Modifying any of these might\n *      lead to the modifications being ignored (depending on which\n *      property was modified)\n *    - It's not always clear wither to use path/pathname, host/hostname,\n *      so this tries to add helpful constraints\n *\n *  @param url the url to parse\n *  @param block a function that will modify the parsed url, or return a new one\n */\nexport function modifyUrl(url: string, block: (parts: UrlParts) => Partial<UrlParts> | void) {\n  const parsed = parseUrl(url, true);\n\n  // copy over the most specific version of each\n  // property. By default, the parsed url includes\n  // several conflicting properties (like path and\n  // pathname + search, or search and query) and keeping\n  // track of which property is actually used when they\n  // are formatted is harder than necessary\n  const meaningfulParts = {\n    protocol: parsed.protocol,\n    slashes: parsed.slashes,\n    auth: parsed.auth,\n    hostname: parsed.hostname,\n    port: parsed.port,\n    pathname: parsed.pathname,\n    query: parsed.query || {},\n    hash: parsed.hash,\n  };\n\n  // the block modifies the meaningfulParts object, or returns a new one\n  const modifiedParts = block(meaningfulParts) || meaningfulParts;\n\n  // format the modified/replaced meaningfulParts back into a url\n  return formatUrl({\n    protocol: modifiedParts.protocol,\n    slashes: modifiedParts.slashes,\n    auth: modifiedParts.auth,\n    hostname: modifiedParts.hostname,\n    port: modifiedParts.port,\n    pathname: modifiedParts.pathname,\n    query: modifiedParts.query,\n    hash: modifiedParts.hash,\n  });\n}\n"]}]}