{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/src/core/public/loading_count/loading_count_service.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/core/public/loading_count/loading_count_service.ts","mtime":1567631711498},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport * as tslib_1 from \"tslib\";\nimport * as Rx from 'rxjs';\nimport { distinctUntilChanged, endWith, map, pairwise, startWith, takeUntil, tap, } from 'rxjs/operators';\nvar LoadingCountService = /** @class */ (function () {\n    function LoadingCountService() {\n        this.total$ = new Rx.BehaviorSubject(0);\n        this.stop$ = new Rx.Subject();\n    }\n    LoadingCountService.prototype.start = function (_a) {\n        var _this = this;\n        var fatalErrors = _a.fatalErrors;\n        return {\n            add: function (count$) {\n                count$\n                    .pipe(distinctUntilChanged(), tap(function (count) {\n                    if (count < 0) {\n                        throw new Error('Observables passed to loadingCount.add() must only emit positive numbers');\n                    }\n                }), \n                // use takeUntil() so that we can finish each stream on stop() the same way we do when they complete,\n                // by removing the previous count from the total\n                takeUntil(_this.stop$), endWith(0), startWith(0), pairwise(), map(function (_a) {\n                    var _b = tslib_1.__read(_a, 2), prev = _b[0], next = _b[1];\n                    return next - prev;\n                }))\n                    .subscribe({\n                    next: function (delta) {\n                        _this.total$.next(_this.total$.getValue() + delta);\n                    },\n                    error: function (error) {\n                        fatalErrors.add(error);\n                    },\n                });\n            },\n            getCount$: function () {\n                return _this.total$.pipe(distinctUntilChanged());\n            },\n        };\n    };\n    LoadingCountService.prototype.stop = function () {\n        this.stop$.next();\n        this.total$.complete();\n    };\n    return LoadingCountService;\n}());\nexport { LoadingCountService };\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/src/core/public/loading_count/loading_count_service.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/src/core/public/loading_count/loading_count_service.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;GAiBG;;AAEH,OAAO,KAAK,EAAE,MAAM,MAAM,CAAC;AAC3B,OAAO,EACL,oBAAoB,EACpB,OAAO,EACP,GAAG,EACH,QAAQ,EACR,SAAS,EACT,SAAS,EACT,GAAG,GACJ,MAAM,gBAAgB,CAAC;AAQxB;IAAA;QACmB,WAAM,GAAG,IAAI,EAAE,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QACnC,UAAK,GAAG,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;IA6C5C,CAAC;IA3CQ,mCAAK,GAAZ,UAAa,EAAqB;QAAlC,iBAqCC;YArCc,4BAAW;QACxB,OAAO;YACL,GAAG,EAAE,UAAC,MAA6B;gBACjC,MAAM;qBACH,IAAI,CACH,oBAAoB,EAAE,EAEtB,GAAG,CAAC,UAAA,KAAK;oBACP,IAAI,KAAK,GAAG,CAAC,EAAE;wBACb,MAAM,IAAI,KAAK,CACb,0EAA0E,CAC3E,CAAC;qBACH;gBACH,CAAC,CAAC;gBAEF,qGAAqG;gBACrG,gDAAgD;gBAChD,SAAS,CAAC,KAAI,CAAC,KAAK,CAAC,EACrB,OAAO,CAAC,CAAC,CAAC,EACV,SAAS,CAAC,CAAC,CAAC,EACZ,QAAQ,EAAE,EACV,GAAG,CAAC,UAAC,EAAY;wBAAZ,0BAAY,EAAX,YAAI,EAAE,YAAI;oBAAM,OAAA,IAAI,GAAG,IAAI;gBAAX,CAAW,CAAC,CACnC;qBACA,SAAS,CAAC;oBACT,IAAI,EAAE,UAAA,KAAK;wBACT,KAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,GAAG,KAAK,CAAC,CAAC;oBACnD,CAAC;oBACD,KAAK,EAAE,UAAA,KAAK;wBACV,WAAW,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;oBACzB,CAAC;iBACF,CAAC,CAAC;YACP,CAAC;YAED,SAAS,EAAE;gBACT,OAAO,KAAI,CAAC,MAAM,CAAC,IAAI,CAAC,oBAAoB,EAAE,CAAC,CAAC;YAClD,CAAC;SACF,CAAC;IACJ,CAAC;IAEM,kCAAI,GAAX;QACE,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;QAClB,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC;IACzB,CAAC;IACH,0BAAC;AAAD,CAAC,AA/CD,IA+CC","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport * as Rx from 'rxjs';\nimport {\n  distinctUntilChanged,\n  endWith,\n  map,\n  pairwise,\n  startWith,\n  takeUntil,\n  tap,\n} from 'rxjs/operators';\n\nimport { FatalErrorsStartContract } from '../fatal_errors';\n\ninterface Deps {\n  fatalErrors: FatalErrorsStartContract;\n}\n\nexport class LoadingCountService {\n  private readonly total$ = new Rx.BehaviorSubject(0);\n  private readonly stop$ = new Rx.Subject();\n\n  public start({ fatalErrors }: Deps) {\n    return {\n      add: (count$: Rx.Observable<number>) => {\n        count$\n          .pipe(\n            distinctUntilChanged(),\n\n            tap(count => {\n              if (count < 0) {\n                throw new Error(\n                  'Observables passed to loadingCount.add() must only emit positive numbers'\n                );\n              }\n            }),\n\n            // use takeUntil() so that we can finish each stream on stop() the same way we do when they complete,\n            // by removing the previous count from the total\n            takeUntil(this.stop$),\n            endWith(0),\n            startWith(0),\n            pairwise(),\n            map(([prev, next]) => next - prev)\n          )\n          .subscribe({\n            next: delta => {\n              this.total$.next(this.total$.getValue() + delta);\n            },\n            error: error => {\n              fatalErrors.add(error);\n            },\n          });\n      },\n\n      getCount$: () => {\n        return this.total$.pipe(distinctUntilChanged());\n      },\n    };\n  }\n\n  public stop() {\n    this.stop$.next();\n    this.total$.complete();\n  }\n}\n\nexport type LoadingCountStartContract = ReturnType<LoadingCountService['start']>;\n"]}]}