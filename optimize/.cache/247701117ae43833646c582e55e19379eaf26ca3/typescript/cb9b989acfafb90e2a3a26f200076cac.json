{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/src/legacy/core_plugins/kibana/public/visualize/embeddable/visualize_embeddable.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/legacy/core_plugins/kibana/public/visualize/embeddable/visualize_embeddable.ts","mtime":1567631711601},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport * as tslib_1 from \"tslib\";\nimport _ from 'lodash';\nimport { Embeddable } from 'ui/embeddable';\nimport { PersistedState } from 'ui/persisted_state';\nvar VisualizeEmbeddable = /** @class */ (function (_super) {\n    tslib_1.__extends(VisualizeEmbeddable, _super);\n    function VisualizeEmbeddable(_a) {\n        var onEmbeddableStateChanged = _a.onEmbeddableStateChanged, savedVisualization = _a.savedVisualization, editUrl = _a.editUrl, loader = _a.loader;\n        var _this = _super.call(this, {\n            title: savedVisualization.title,\n            editUrl: editUrl,\n            indexPattern: savedVisualization.vis.indexPattern,\n        }) || this;\n        _this.uiStateChangeHandler = function () {\n            _this.customization = _this.uiState.toJSON();\n            _this.onEmbeddableStateChanged(_this.getEmbeddableState());\n        };\n        _this.onEmbeddableStateChanged = onEmbeddableStateChanged;\n        _this.savedVisualization = savedVisualization;\n        _this.loader = loader;\n        var parsedUiState = savedVisualization.uiStateJSON\n            ? JSON.parse(savedVisualization.uiStateJSON)\n            : {};\n        _this.uiState = new PersistedState(parsedUiState);\n        _this.uiState.on('change', _this.uiStateChangeHandler);\n        return _this;\n    }\n    VisualizeEmbeddable.prototype.getInspectorAdapters = function () {\n        if (!this.handler) {\n            return undefined;\n        }\n        return this.handler.inspectorAdapters;\n    };\n    VisualizeEmbeddable.prototype.getEmbeddableState = function () {\n        return {\n            customization: this.customization,\n        };\n    };\n    /**\n     * Transfers all changes in the containerState.embeddableCustomization into\n     * the uiState of this visualization.\n     */\n    VisualizeEmbeddable.prototype.transferCustomizationsToUiState = function (containerState) {\n        var _this = this;\n        // Check for changes that need to be forwarded to the uiState\n        // Since the vis has an own listener on the uiState we don't need to\n        // pass anything from here to the handler.update method\n        var customization = containerState.embeddableCustomization;\n        if (customization && !_.isEqual(this.customization, customization)) {\n            // Turn this off or the uiStateChangeHandler will fire for every modification.\n            this.uiState.off('change', this.uiStateChangeHandler);\n            this.uiState.clearAllKeys();\n            Object.getOwnPropertyNames(customization).forEach(function (key) {\n                _this.uiState.set(key, customization[key]);\n            });\n            this.customization = customization;\n            this.uiState.on('change', this.uiStateChangeHandler);\n        }\n    };\n    VisualizeEmbeddable.prototype.onContainerStateChanged = function (containerState) {\n        this.transferCustomizationsToUiState(containerState);\n        var updatedParams = {};\n        // Check if timerange has changed\n        if (containerState.timeRange !== this.timeRange) {\n            updatedParams.timeRange = containerState.timeRange;\n            this.timeRange = containerState.timeRange;\n        }\n        // Check if filters has changed\n        if (containerState.filters !== this.filters) {\n            updatedParams.filters = containerState.filters;\n            this.filters = containerState.filters;\n        }\n        // Check if query has changed\n        if (containerState.query !== this.query) {\n            updatedParams.query = containerState.query;\n            this.query = containerState.query;\n        }\n        var derivedPanelTitle = this.getPanelTitle(containerState);\n        if (this.panelTitle !== derivedPanelTitle) {\n            updatedParams.dataAttrs = {\n                title: derivedPanelTitle,\n            };\n            this.panelTitle = derivedPanelTitle;\n        }\n        if (this.handler && !_.isEmpty(updatedParams)) {\n            this.handler.update(updatedParams);\n        }\n    };\n    /**\n     *\n     * @param {Element} domNode\n     * @param {ContainerState} containerState\n     */\n    VisualizeEmbeddable.prototype.render = function (domNode, containerState) {\n        this.panelTitle = this.getPanelTitle(containerState);\n        this.timeRange = containerState.timeRange;\n        this.query = containerState.query;\n        this.filters = containerState.filters;\n        this.transferCustomizationsToUiState(containerState);\n        var dataAttrs = {\n            'shared-item': '',\n            title: this.panelTitle,\n        };\n        if (this.savedVisualization.description) {\n            dataAttrs.description = this.savedVisualization.description;\n        }\n        var handlerParams = {\n            uiState: this.uiState,\n            // Append visualization to container instead of replacing its content\n            append: true,\n            timeRange: containerState.timeRange,\n            query: containerState.query,\n            filters: containerState.filters,\n            cssClass: \"panel-content panel-content--fullWidth\",\n            dataAttrs: dataAttrs,\n        };\n        this.handler = this.loader.embedVisualizationWithSavedObject(domNode, this.savedVisualization, handlerParams);\n    };\n    VisualizeEmbeddable.prototype.destroy = function () {\n        this.uiState.off('change', this.uiStateChangeHandler);\n        this.savedVisualization.destroy();\n        if (this.handler) {\n            this.handler.destroy();\n            this.handler.getElement().remove();\n        }\n    };\n    VisualizeEmbeddable.prototype.reload = function () {\n        if (this.handler) {\n            this.handler.reload();\n        }\n    };\n    /**\n     * Retrieve the panel title for this panel from the container state.\n     * This will either return the overwritten panel title or the visualization title.\n     */\n    VisualizeEmbeddable.prototype.getPanelTitle = function (containerState) {\n        var derivedPanelTitle = '';\n        if (!containerState.hidePanelTitles) {\n            derivedPanelTitle =\n                containerState.customTitle !== undefined\n                    ? containerState.customTitle\n                    : this.savedVisualization.title;\n        }\n        return derivedPanelTitle;\n    };\n    return VisualizeEmbeddable;\n}(Embeddable));\nexport { VisualizeEmbeddable };\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/src/legacy/core_plugins/kibana/public/visualize/embeddable/visualize_embeddable.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/src/legacy/core_plugins/kibana/public/visualize/embeddable/visualize_embeddable.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport _ from 'lodash';\nimport { ContainerState, Embeddable } from 'ui/embeddable';\nimport { OnEmbeddableStateChanged } from 'ui/embeddable/embeddable_factory';\nimport { Filters, Query, TimeRange } from 'ui/embeddable/types';\nimport { PersistedState } from 'ui/persisted_state';\nimport { VisualizeLoader } from 'ui/visualize/loader';\nimport { EmbeddedVisualizeHandler } from 'ui/visualize/loader/embedded_visualize_handler';\nimport {\n  VisSavedObject,\n  VisualizeLoaderParams,\n  VisualizeUpdateParams,\n} from 'ui/visualize/loader/types';\n\nexport interface VisualizeEmbeddableConfiguration {\n  onEmbeddableStateChanged: OnEmbeddableStateChanged;\n  savedVisualization: VisSavedObject;\n  editUrl?: string;\n  loader: VisualizeLoader;\n}\n\nexport class VisualizeEmbeddable extends Embeddable {\n  private onEmbeddableStateChanged: OnEmbeddableStateChanged;\n  private savedVisualization: VisSavedObject;\n  private loader: VisualizeLoader;\n  private uiState: PersistedState;\n  private handler?: EmbeddedVisualizeHandler;\n  private customization?: object;\n  private panelTitle?: string;\n  private timeRange?: TimeRange;\n  private query?: Query;\n  private filters?: Filters;\n\n  constructor({\n    onEmbeddableStateChanged,\n    savedVisualization,\n    editUrl,\n    loader,\n  }: VisualizeEmbeddableConfiguration) {\n    super({\n      title: savedVisualization.title,\n      editUrl,\n      indexPattern: savedVisualization.vis.indexPattern,\n    });\n    this.onEmbeddableStateChanged = onEmbeddableStateChanged;\n    this.savedVisualization = savedVisualization;\n    this.loader = loader;\n\n    const parsedUiState = savedVisualization.uiStateJSON\n      ? JSON.parse(savedVisualization.uiStateJSON)\n      : {};\n    this.uiState = new PersistedState(parsedUiState);\n\n    this.uiState.on('change', this.uiStateChangeHandler);\n  }\n\n  public getInspectorAdapters() {\n    if (!this.handler) {\n      return undefined;\n    }\n    return this.handler.inspectorAdapters;\n  }\n\n  public getEmbeddableState() {\n    return {\n      customization: this.customization,\n    };\n  }\n\n  /**\n   * Transfers all changes in the containerState.embeddableCustomization into\n   * the uiState of this visualization.\n   */\n  public transferCustomizationsToUiState(containerState: ContainerState) {\n    // Check for changes that need to be forwarded to the uiState\n    // Since the vis has an own listener on the uiState we don't need to\n    // pass anything from here to the handler.update method\n    const customization = containerState.embeddableCustomization;\n    if (customization && !_.isEqual(this.customization, customization)) {\n      // Turn this off or the uiStateChangeHandler will fire for every modification.\n      this.uiState.off('change', this.uiStateChangeHandler);\n      this.uiState.clearAllKeys();\n      Object.getOwnPropertyNames(customization).forEach(key => {\n        this.uiState.set(key, customization[key]);\n      });\n      this.customization = customization;\n      this.uiState.on('change', this.uiStateChangeHandler);\n    }\n  }\n\n  public onContainerStateChanged(containerState: ContainerState) {\n    this.transferCustomizationsToUiState(containerState);\n\n    const updatedParams: VisualizeUpdateParams = {};\n\n    // Check if timerange has changed\n    if (containerState.timeRange !== this.timeRange) {\n      updatedParams.timeRange = containerState.timeRange;\n      this.timeRange = containerState.timeRange;\n    }\n\n    // Check if filters has changed\n    if (containerState.filters !== this.filters) {\n      updatedParams.filters = containerState.filters;\n      this.filters = containerState.filters;\n    }\n\n    // Check if query has changed\n    if (containerState.query !== this.query) {\n      updatedParams.query = containerState.query;\n      this.query = containerState.query;\n    }\n\n    const derivedPanelTitle = this.getPanelTitle(containerState);\n    if (this.panelTitle !== derivedPanelTitle) {\n      updatedParams.dataAttrs = {\n        title: derivedPanelTitle,\n      };\n      this.panelTitle = derivedPanelTitle;\n    }\n\n    if (this.handler && !_.isEmpty(updatedParams)) {\n      this.handler.update(updatedParams);\n    }\n  }\n\n  /**\n   *\n   * @param {Element} domNode\n   * @param {ContainerState} containerState\n   */\n  public render(domNode: HTMLElement, containerState: ContainerState) {\n    this.panelTitle = this.getPanelTitle(containerState);\n    this.timeRange = containerState.timeRange;\n    this.query = containerState.query;\n    this.filters = containerState.filters;\n\n    this.transferCustomizationsToUiState(containerState);\n\n    const dataAttrs: { [key: string]: string } = {\n      'shared-item': '',\n      title: this.panelTitle,\n    };\n    if (this.savedVisualization.description) {\n      dataAttrs.description = this.savedVisualization.description;\n    }\n\n    const handlerParams: VisualizeLoaderParams = {\n      uiState: this.uiState,\n      // Append visualization to container instead of replacing its content\n      append: true,\n      timeRange: containerState.timeRange,\n      query: containerState.query,\n      filters: containerState.filters,\n      cssClass: `panel-content panel-content--fullWidth`,\n      dataAttrs,\n    };\n\n    this.handler = this.loader.embedVisualizationWithSavedObject(\n      domNode,\n      this.savedVisualization,\n      handlerParams\n    );\n  }\n\n  public destroy() {\n    this.uiState.off('change', this.uiStateChangeHandler);\n    this.savedVisualization.destroy();\n    if (this.handler) {\n      this.handler.destroy();\n      this.handler.getElement().remove();\n    }\n  }\n\n  public reload() {\n    if (this.handler) {\n      this.handler.reload();\n    }\n  }\n\n  /**\n   * Retrieve the panel title for this panel from the container state.\n   * This will either return the overwritten panel title or the visualization title.\n   */\n  private getPanelTitle(containerState: ContainerState) {\n    let derivedPanelTitle = '';\n    if (!containerState.hidePanelTitles) {\n      derivedPanelTitle =\n        containerState.customTitle !== undefined\n          ? containerState.customTitle\n          : this.savedVisualization.title;\n    }\n    return derivedPanelTitle;\n  }\n\n  private uiStateChangeHandler = () => {\n    this.customization = this.uiState.toJSON();\n    this.onEmbeddableStateChanged(this.getEmbeddableState());\n  };\n}\n"]}]}