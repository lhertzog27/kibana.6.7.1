{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/src/ui/public/chrome/api/breadcrumbs.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/chrome/api/breadcrumbs.ts","mtime":1567631711709},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport * as tslib_1 from \"tslib\";\nimport { fatalError } from 'ui/notify/fatal_error';\nimport { Breadcrumb } from '../../../../core/public/chrome';\nexport { Breadcrumb };\nvar newPlatformChrome;\nexport function __newPlatformInit__(instance) {\n    if (newPlatformChrome) {\n        throw new Error('ui/chrome/api/breadcrumbs is already initialized');\n    }\n    newPlatformChrome = instance;\n}\nfunction createBreadcrumbsApi(chrome) {\n    // A flag used to determine if we should automatically\n    // clear the breadcrumbs between angular route changes.\n    var breadcrumbSetSinceRouteChange = false;\n    var currentBreadcrumbs = [];\n    // reset breadcrumbSetSinceRouteChange any time the breadcrumbs change, even\n    // if it was done directly through the new platform\n    newPlatformChrome.getBreadcrumbs$().subscribe({\n        next: function (nextBreadcrumbs) {\n            breadcrumbSetSinceRouteChange = true;\n            currentBreadcrumbs = nextBreadcrumbs;\n        },\n    });\n    return {\n        breadcrumbs: {\n            /**\n             * Get an observerable that emits the current list of breadcrumbs\n             * and emits each update to the breadcrumbs\n             */\n            get$: function () {\n                return newPlatformChrome.getBreadcrumbs$();\n            },\n            /**\n             * Replace the set of breadcrumbs with a new set\n             */\n            set: function (newBreadcrumbs) {\n                newPlatformChrome.setBreadcrumbs(newBreadcrumbs);\n            },\n            /**\n             * Add a breadcrumb to the end of the list of breadcrumbs\n             */\n            push: function (breadcrumb) {\n                newPlatformChrome.setBreadcrumbs(tslib_1.__spread(currentBreadcrumbs, [breadcrumb]));\n            },\n            /**\n             * Filter the current set of breadcrumbs with a function. Works like Array#filter()\n             */\n            filter: function (fn) {\n                newPlatformChrome.setBreadcrumbs(currentBreadcrumbs.filter(fn));\n            },\n        },\n        /**\n         * internal angular run function that will be called when angular bootstraps and\n         * lets us integrate with the angular router so that we can automatically clear\n         * the breadcrumbs if we switch to a Kibana app that does not use breadcrumbs correctly\n         */\n        $setupBreadcrumbsAutoClear: function ($rootScope, $injector) {\n            var uiSettings = chrome.getUiSettingsClient();\n            var $route = $injector.has('$route') ? $injector.get('$route') : {};\n            $rootScope.$on('$routeChangeStart', function () {\n                breadcrumbSetSinceRouteChange = false;\n            });\n            $rootScope.$on('$routeChangeSuccess', function () {\n                var current = $route.current || {};\n                if (breadcrumbSetSinceRouteChange || (current.$$route && current.$$route.redirectTo)) {\n                    return;\n                }\n                var k7BreadcrumbsProvider = current.k7Breadcrumbs;\n                if (!k7BreadcrumbsProvider || !uiSettings.get('k7design')) {\n                    newPlatformChrome.setBreadcrumbs([]);\n                    return;\n                }\n                try {\n                    chrome.breadcrumbs.set($injector.invoke(k7BreadcrumbsProvider));\n                }\n                catch (error) {\n                    fatalError(error);\n                }\n            });\n        },\n    };\n}\nexport function initBreadcrumbsApi(chrome, internals) {\n    var _a = createBreadcrumbsApi(chrome), breadcrumbs = _a.breadcrumbs, $setupBreadcrumbsAutoClear = _a.$setupBreadcrumbsAutoClear;\n    chrome.breadcrumbs = breadcrumbs;\n    internals.$setupBreadcrumbsAutoClear = $setupBreadcrumbsAutoClear;\n}\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/src/ui/public/chrome/api/breadcrumbs.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/src/ui/public/chrome/api/breadcrumbs.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { IRootScopeService } from 'angular';\nimport { fatalError } from 'ui/notify/fatal_error';\nimport { Breadcrumb, ChromeStartContract } from '../../../../core/public/chrome';\nexport { Breadcrumb };\n\nexport type BreadcrumbsApi = ReturnType<typeof createBreadcrumbsApi>['breadcrumbs'];\n\nlet newPlatformChrome: ChromeStartContract;\nexport function __newPlatformInit__(instance: ChromeStartContract) {\n  if (newPlatformChrome) {\n    throw new Error('ui/chrome/api/breadcrumbs is already initialized');\n  }\n\n  newPlatformChrome = instance;\n}\n\nfunction createBreadcrumbsApi(chrome: { [key: string]: any }) {\n  // A flag used to determine if we should automatically\n  // clear the breadcrumbs between angular route changes.\n  let breadcrumbSetSinceRouteChange = false;\n  let currentBreadcrumbs: Breadcrumb[] = [];\n\n  // reset breadcrumbSetSinceRouteChange any time the breadcrumbs change, even\n  // if it was done directly through the new platform\n  newPlatformChrome.getBreadcrumbs$().subscribe({\n    next(nextBreadcrumbs) {\n      breadcrumbSetSinceRouteChange = true;\n      currentBreadcrumbs = nextBreadcrumbs;\n    },\n  });\n\n  return {\n    breadcrumbs: {\n      /**\n       * Get an observerable that emits the current list of breadcrumbs\n       * and emits each update to the breadcrumbs\n       */\n      get$() {\n        return newPlatformChrome.getBreadcrumbs$();\n      },\n\n      /**\n       * Replace the set of breadcrumbs with a new set\n       */\n      set(newBreadcrumbs: Breadcrumb[]) {\n        newPlatformChrome.setBreadcrumbs(newBreadcrumbs);\n      },\n\n      /**\n       * Add a breadcrumb to the end of the list of breadcrumbs\n       */\n      push(breadcrumb: Breadcrumb) {\n        newPlatformChrome.setBreadcrumbs([...currentBreadcrumbs, breadcrumb]);\n      },\n\n      /**\n       * Filter the current set of breadcrumbs with a function. Works like Array#filter()\n       */\n      filter(fn: (breadcrumb: Breadcrumb, i: number, all: Breadcrumb[]) => boolean) {\n        newPlatformChrome.setBreadcrumbs(currentBreadcrumbs.filter(fn));\n      },\n    },\n\n    /**\n     * internal angular run function that will be called when angular bootstraps and\n     * lets us integrate with the angular router so that we can automatically clear\n     * the breadcrumbs if we switch to a Kibana app that does not use breadcrumbs correctly\n     */\n    $setupBreadcrumbsAutoClear: ($rootScope: IRootScopeService, $injector: any) => {\n      const uiSettings = chrome.getUiSettingsClient();\n      const $route = $injector.has('$route') ? $injector.get('$route') : {};\n\n      $rootScope.$on('$routeChangeStart', () => {\n        breadcrumbSetSinceRouteChange = false;\n      });\n\n      $rootScope.$on('$routeChangeSuccess', () => {\n        const current = $route.current || {};\n\n        if (breadcrumbSetSinceRouteChange || (current.$$route && current.$$route.redirectTo)) {\n          return;\n        }\n\n        const k7BreadcrumbsProvider = current.k7Breadcrumbs;\n        if (!k7BreadcrumbsProvider || !uiSettings.get('k7design')) {\n          newPlatformChrome.setBreadcrumbs([]);\n          return;\n        }\n\n        try {\n          chrome.breadcrumbs.set($injector.invoke(k7BreadcrumbsProvider));\n        } catch (error) {\n          fatalError(error);\n        }\n      });\n    },\n  };\n}\n\nexport function initBreadcrumbsApi(\n  chrome: { [key: string]: any },\n  internals: { [key: string]: any }\n) {\n  const { breadcrumbs, $setupBreadcrumbsAutoClear } = createBreadcrumbsApi(chrome);\n  chrome.breadcrumbs = breadcrumbs;\n  internals.$setupBreadcrumbsAutoClear = $setupBreadcrumbsAutoClear;\n}\n"]}]}