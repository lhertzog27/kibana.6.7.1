{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/src/core/public/injected_metadata/injected_metadata_service.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/core/public/injected_metadata/injected_metadata_service.ts","mtime":1567631711497},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { get } from 'lodash';\nimport { deepFreeze } from './deep_freeze';\n/**\n * Provides access to the metadata that is injected by the\n * server into the page. The metadata is actually defined\n * in the entry file for the bundle containing the new platform\n * and is read from the DOM in most cases.\n */\nvar InjectedMetadataService = /** @class */ (function () {\n    function InjectedMetadataService(params) {\n        this.params = params;\n        this.state = deepFreeze(this.params.injectedMetadata);\n    }\n    InjectedMetadataService.prototype.start = function () {\n        var _this = this;\n        return {\n            getBasePath: function () {\n                return _this.state.basePath;\n            },\n            getKibanaVersion: function () {\n                return _this.getKibanaVersion();\n            },\n            getLegacyMetadata: function () {\n                return _this.state.legacyMetadata;\n            },\n            getInjectedVar: function (name, defaultValue) {\n                return get(_this.state.vars, name, defaultValue);\n            },\n            getInjectedVars: function () {\n                return _this.state.vars;\n            },\n        };\n    };\n    InjectedMetadataService.prototype.getKibanaVersion = function () {\n        return this.state.version;\n    };\n    InjectedMetadataService.prototype.getKibanaBuildNumber = function () {\n        return this.state.buildNumber;\n    };\n    return InjectedMetadataService;\n}());\nexport { InjectedMetadataService };\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/src/core/public/injected_metadata/injected_metadata_service.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/src/core/public/injected_metadata/injected_metadata_service.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;GAiBG;AAEH,OAAO,EAAE,GAAG,EAAE,MAAM,QAAQ,CAAC;AAE7B,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AA8B3C;;;;;GAKG;AACH;IAGE,iCAA6B,MAA8B;QAA9B,WAAM,GAAN,MAAM,CAAwB;QAFnD,UAAK,GAAG,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC;IAEK,CAAC;IAExD,uCAAK,GAAZ;QAAA,iBAsBC;QArBC,OAAO;YACL,WAAW,EAAE;gBACX,OAAO,KAAI,CAAC,KAAK,CAAC,QAAQ,CAAC;YAC7B,CAAC;YAED,gBAAgB,EAAE;gBAChB,OAAO,KAAI,CAAC,gBAAgB,EAAE,CAAC;YACjC,CAAC;YAED,iBAAiB,EAAE;gBACjB,OAAO,KAAI,CAAC,KAAK,CAAC,cAAc,CAAC;YACnC,CAAC;YAED,cAAc,EAAE,UAAC,IAAY,EAAE,YAAkB;gBAC/C,OAAO,GAAG,CAAC,KAAI,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,EAAE,YAAY,CAAC,CAAC;YAClD,CAAC;YAED,eAAe,EAAE;gBACf,OAAO,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC;YACzB,CAAC;SACF,CAAC;IACJ,CAAC;IAEM,kDAAgB,GAAvB;QACE,OAAO,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC;IAC5B,CAAC;IAEM,sDAAoB,GAA3B;QACE,OAAO,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC;IAChC,CAAC;IACH,8BAAC;AAAD,CAAC,AApCD,IAoCC","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { get } from 'lodash';\nimport { UiSettingsState } from '../ui_settings';\nimport { deepFreeze } from './deep_freeze';\n\nexport interface InjectedMetadataParams {\n  injectedMetadata: {\n    version: string;\n    buildNumber: number;\n    basePath: string;\n    vars: {\n      [key: string]: unknown;\n    };\n    legacyMetadata: {\n      app: unknown;\n      translations: unknown;\n      bundleId: string;\n      nav: unknown;\n      version: string;\n      branch: string;\n      buildNum: number;\n      buildSha: string;\n      basePath: string;\n      serverName: string;\n      devMode: boolean;\n      uiSettings: {\n        defaults: UiSettingsState;\n        user?: UiSettingsState;\n      };\n    };\n  };\n}\n\n/**\n * Provides access to the metadata that is injected by the\n * server into the page. The metadata is actually defined\n * in the entry file for the bundle containing the new platform\n * and is read from the DOM in most cases.\n */\nexport class InjectedMetadataService {\n  private state = deepFreeze(this.params.injectedMetadata);\n\n  constructor(private readonly params: InjectedMetadataParams) {}\n\n  public start() {\n    return {\n      getBasePath: () => {\n        return this.state.basePath;\n      },\n\n      getKibanaVersion: () => {\n        return this.getKibanaVersion();\n      },\n\n      getLegacyMetadata: () => {\n        return this.state.legacyMetadata;\n      },\n\n      getInjectedVar: (name: string, defaultValue?: any): unknown => {\n        return get(this.state.vars, name, defaultValue);\n      },\n\n      getInjectedVars: () => {\n        return this.state.vars;\n      },\n    };\n  }\n\n  public getKibanaVersion() {\n    return this.state.version;\n  }\n\n  public getKibanaBuildNumber() {\n    return this.state.buildNumber;\n  }\n}\n\nexport type InjectedMetadataStartContract = ReturnType<InjectedMetadataService['start']>;\n"]}]}