{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/src/ui/public/vis/editors/config/editor_config_providers.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/vis/editors/config/editor_config_providers.ts","mtime":1567631711769},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport * as tslib_1 from \"tslib\";\nimport { leastCommonMultiple } from '../../../utils/math';\nimport { parseEsInterval } from '../../../utils/parse_es_interval';\nimport { leastCommonInterval } from '../../lib/least_common_interval';\nvar EditorConfigProviderRegistry = /** @class */ (function () {\n    function EditorConfigProviderRegistry() {\n        this.providers = new Set();\n    }\n    EditorConfigProviderRegistry.prototype.register = function (configProvider) {\n        this.providers.add(configProvider);\n    };\n    EditorConfigProviderRegistry.prototype.getConfigForAgg = function (aggType, indexPattern, aggConfig) {\n        var configs = Array.from(this.providers).map(function (provider) {\n            return provider(aggType, indexPattern, aggConfig);\n        });\n        return this.mergeConfigs(configs);\n    };\n    EditorConfigProviderRegistry.prototype.isTimeBaseParam = function (config) {\n        return config.hasOwnProperty('default') && config.hasOwnProperty('timeBase');\n    };\n    EditorConfigProviderRegistry.prototype.isBaseParam = function (config) {\n        return config.hasOwnProperty('base');\n    };\n    EditorConfigProviderRegistry.prototype.isFixedParam = function (config) {\n        return config.hasOwnProperty('fixedValue');\n    };\n    EditorConfigProviderRegistry.prototype.mergeHidden = function (current, merged) {\n        return Boolean(current.hidden || merged.hidden);\n    };\n    EditorConfigProviderRegistry.prototype.mergeHelp = function (current, merged) {\n        if (!current.help) {\n            return merged.help;\n        }\n        return merged.help ? merged.help + \"\\n\\n\" + current.help : current.help;\n    };\n    EditorConfigProviderRegistry.prototype.mergeFixedAndBase = function (current, merged, paramName) {\n        if (this.isFixedParam(current) &&\n            this.isFixedParam(merged) &&\n            current.fixedValue !== merged.fixedValue) {\n            // In case multiple configurations provided a fixedValue, these must all be the same.\n            // If not we'll throw an error.\n            throw new Error(\"Two EditorConfigProviders provided different fixed values for field \" + paramName + \":\\n          \" + merged.fixedValue + \" !== \" + current.fixedValue);\n        }\n        if ((this.isFixedParam(current) && this.isBaseParam(merged)) ||\n            (this.isBaseParam(current) && this.isFixedParam(merged))) {\n            // In case one config tries to set a fixed value and another setting a base value,\n            // we'll throw an error. This could be solved more elegantly, by allowing fixedValues\n            // that are the multiple of the specific base value, but since there is no use-case for that\n            // right now, this isn't implemented.\n            throw new Error(\"Tried to provide a fixedValue and a base for param \" + paramName + \".\");\n        }\n        if (this.isBaseParam(current) && this.isBaseParam(merged)) {\n            // In case where both had interval values, just use the least common multiple between both interval\n            return {\n                base: leastCommonMultiple(current.base, merged.base),\n            };\n        }\n        // In this case we haven't had a fixed value of base for that param yet, we use the one specified\n        // in the current config\n        if (this.isFixedParam(current)) {\n            return {\n                fixedValue: current.fixedValue,\n            };\n        }\n        if (this.isBaseParam(current)) {\n            return {\n                base: current.base,\n            };\n        }\n        return {};\n    };\n    EditorConfigProviderRegistry.prototype.mergeTimeBase = function (current, merged, paramName) {\n        if (current.default !== current.timeBase) {\n            throw new Error(\"Tried to provide differing default and timeBase values for \" + paramName + \".\");\n        }\n        if (this.isTimeBaseParam(current) && this.isTimeBaseParam(merged)) {\n            // In case both had where interval values, just use the least common multiple between both intervals\n            try {\n                var timeBase = leastCommonInterval(current.timeBase, merged.timeBase);\n                return {\n                    default: timeBase,\n                    timeBase: timeBase,\n                };\n            }\n            catch (e) {\n                throw e;\n            }\n        }\n        if (this.isTimeBaseParam(current)) {\n            try {\n                parseEsInterval(current.timeBase);\n                return {\n                    default: current.timeBase,\n                    timeBase: current.timeBase,\n                };\n            }\n            catch (e) {\n                throw e;\n            }\n        }\n        return {};\n    };\n    EditorConfigProviderRegistry.prototype.mergeConfigs = function (configs) {\n        var _this = this;\n        return configs.reduce(function (output, conf) {\n            Object.entries(conf).forEach(function (_a) {\n                var _b = tslib_1.__read(_a, 2), paramName = _b[0], paramConfig = _b[1];\n                if (!output[paramName]) {\n                    output[paramName] = {};\n                }\n                output[paramName] = tslib_1.__assign({ hidden: _this.mergeHidden(paramConfig, output[paramName]), help: _this.mergeHelp(paramConfig, output[paramName]) }, (_this.isTimeBaseParam(paramConfig)\n                    ? _this.mergeTimeBase(paramConfig, output[paramName], paramName)\n                    : _this.mergeFixedAndBase(paramConfig, output[paramName], paramName)));\n            });\n            return output;\n        }, {});\n    };\n    return EditorConfigProviderRegistry;\n}());\nvar editorConfigProviders = new EditorConfigProviderRegistry();\nexport { editorConfigProviders, EditorConfigProviderRegistry };\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/src/ui/public/vis/editors/config/editor_config_providers.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/src/ui/public/vis/editors/config/editor_config_providers.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { TimeIntervalParam } from 'ui/vis/editors/config/types';\nimport { AggConfig } from '../..';\nimport { AggType } from '../../../agg_types';\nimport { IndexPattern } from '../../../index_patterns';\nimport { leastCommonMultiple } from '../../../utils/math';\nimport { parseEsInterval } from '../../../utils/parse_es_interval';\nimport { leastCommonInterval } from '../../lib/least_common_interval';\nimport { EditorConfig, EditorParamConfig, FixedParam, NumericIntervalParam } from './types';\n\ntype EditorConfigProvider = (\n  aggType: AggType,\n  indexPattern: IndexPattern,\n  aggConfig: AggConfig\n) => EditorConfig;\n\nclass EditorConfigProviderRegistry {\n  private providers: Set<EditorConfigProvider> = new Set();\n\n  public register(configProvider: EditorConfigProvider): void {\n    this.providers.add(configProvider);\n  }\n\n  public getConfigForAgg(\n    aggType: AggType,\n    indexPattern: IndexPattern,\n    aggConfig: AggConfig\n  ): EditorConfig {\n    const configs = Array.from(this.providers).map(provider =>\n      provider(aggType, indexPattern, aggConfig)\n    );\n    return this.mergeConfigs(configs);\n  }\n\n  private isTimeBaseParam(config: EditorParamConfig): config is TimeIntervalParam {\n    return config.hasOwnProperty('default') && config.hasOwnProperty('timeBase');\n  }\n\n  private isBaseParam(config: EditorParamConfig): config is NumericIntervalParam {\n    return config.hasOwnProperty('base');\n  }\n\n  private isFixedParam(config: EditorParamConfig): config is FixedParam {\n    return config.hasOwnProperty('fixedValue');\n  }\n\n  private mergeHidden(current: EditorParamConfig, merged: EditorParamConfig): boolean {\n    return Boolean(current.hidden || merged.hidden);\n  }\n\n  private mergeHelp(current: EditorParamConfig, merged: EditorParamConfig): string | undefined {\n    if (!current.help) {\n      return merged.help;\n    }\n\n    return merged.help ? `${merged.help}\\n\\n${current.help}` : current.help;\n  }\n\n  private mergeFixedAndBase(\n    current: EditorParamConfig,\n    merged: EditorParamConfig,\n    paramName: string\n  ): { fixedValue?: any; base?: number } {\n    if (\n      this.isFixedParam(current) &&\n      this.isFixedParam(merged) &&\n      current.fixedValue !== merged.fixedValue\n    ) {\n      // In case multiple configurations provided a fixedValue, these must all be the same.\n      // If not we'll throw an error.\n      throw new Error(`Two EditorConfigProviders provided different fixed values for field ${paramName}:\n          ${merged.fixedValue} !== ${current.fixedValue}`);\n    }\n\n    if (\n      (this.isFixedParam(current) && this.isBaseParam(merged)) ||\n      (this.isBaseParam(current) && this.isFixedParam(merged))\n    ) {\n      // In case one config tries to set a fixed value and another setting a base value,\n      // we'll throw an error. This could be solved more elegantly, by allowing fixedValues\n      // that are the multiple of the specific base value, but since there is no use-case for that\n      // right now, this isn't implemented.\n      throw new Error(`Tried to provide a fixedValue and a base for param ${paramName}.`);\n    }\n\n    if (this.isBaseParam(current) && this.isBaseParam(merged)) {\n      // In case where both had interval values, just use the least common multiple between both interval\n      return {\n        base: leastCommonMultiple(current.base, merged.base),\n      };\n    }\n\n    // In this case we haven't had a fixed value of base for that param yet, we use the one specified\n    // in the current config\n    if (this.isFixedParam(current)) {\n      return {\n        fixedValue: current.fixedValue,\n      };\n    }\n    if (this.isBaseParam(current)) {\n      return {\n        base: current.base,\n      };\n    }\n\n    return {};\n  }\n\n  private mergeTimeBase(\n    current: TimeIntervalParam,\n    merged: EditorParamConfig,\n    paramName: string\n  ): { timeBase?: string; default?: string } {\n    if (current.default !== current.timeBase) {\n      throw new Error(`Tried to provide differing default and timeBase values for ${paramName}.`);\n    }\n\n    if (this.isTimeBaseParam(current) && this.isTimeBaseParam(merged)) {\n      // In case both had where interval values, just use the least common multiple between both intervals\n      try {\n        const timeBase = leastCommonInterval(current.timeBase, merged.timeBase);\n        return {\n          default: timeBase,\n          timeBase,\n        };\n      } catch (e) {\n        throw e;\n      }\n    }\n\n    if (this.isTimeBaseParam(current)) {\n      try {\n        parseEsInterval(current.timeBase);\n        return {\n          default: current.timeBase,\n          timeBase: current.timeBase,\n        };\n      } catch (e) {\n        throw e;\n      }\n    }\n\n    return {};\n  }\n\n  private mergeConfigs(configs: EditorConfig[]): EditorConfig {\n    return configs.reduce((output, conf) => {\n      Object.entries(conf).forEach(([paramName, paramConfig]) => {\n        if (!output[paramName]) {\n          output[paramName] = {};\n        }\n\n        output[paramName] = {\n          hidden: this.mergeHidden(paramConfig, output[paramName]),\n          help: this.mergeHelp(paramConfig, output[paramName]),\n          ...(this.isTimeBaseParam(paramConfig)\n            ? this.mergeTimeBase(paramConfig, output[paramName], paramName)\n            : this.mergeFixedAndBase(paramConfig, output[paramName], paramName)),\n        };\n      });\n      return output;\n    }, {});\n  }\n}\n\nconst editorConfigProviders = new EditorConfigProviderRegistry();\n\nexport { editorConfigProviders, EditorConfigProviderRegistry };\n"]}]}