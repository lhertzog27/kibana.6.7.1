{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/public/lib/aeroelastic_kibana.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/public/lib/aeroelastic_kibana.js","mtime":1567631711932},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.aeroelastic = undefined;\n\nvar _aeroelastic = require('./aeroelastic');\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } } /*\n                                                                                                                                                                                                     * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                     * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                     * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                     */\n\nvar stores = new Map();\n\nvar aeroelastic = exports.aeroelastic = {\n  matrix: _aeroelastic.matrix,\n\n  clearStores: function clearStores() {\n    stores.clear();\n  },\n  createStore: function createStore(initialState) {\n    var onChangeCallback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};\n    var page = arguments[2];\n\n    if (stores.has(page)) {\n      throw new Error('Only a single aeroelastic store per page should exist');\n    }\n\n    stores.set(page, _aeroelastic.state.createStore(initialState, onChangeCallback));\n\n    var updateScene = _aeroelastic.state.select(function (nextScene, primaryUpdate) {\n      return {\n        shapeAdditions: nextScene.shapes,\n        primaryUpdate: primaryUpdate,\n        currentScene: nextScene,\n        configuration: nextScene.configuration\n      };\n    })(_aeroelastic.layout.nextScene, _aeroelastic.layout.primaryUpdate);\n\n    stores.get(page).setUpdater(updateScene);\n  },\n  removeStore: function removeStore(page) {\n    if (stores.has(page)) {\n      stores.delete(page);\n    }\n  },\n  getStore: function getStore(page) {\n    var store = stores.get(page);\n    if (!store) {\n      throw new Error('An aeroelastic store should exist for page ' + page);\n    }\n\n    return store.getCurrentState();\n  },\n  commit: function commit(page) {\n    var store = stores.get(page);\n\n    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    return store && store.commit.apply(store, _toConsumableArray(args));\n  }\n};",null]}