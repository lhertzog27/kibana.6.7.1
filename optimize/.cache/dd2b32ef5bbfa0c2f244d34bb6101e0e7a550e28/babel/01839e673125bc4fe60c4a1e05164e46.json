{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/watcher/public/components/threshold_watch_expression/threshold_watch_expression.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/watcher/public/components/threshold_watch_expression/threshold_watch_expression.js","mtime":1567631712340},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _lodash = require('lodash');\n\nvar _modules = require('ui/modules');\n\nvar _threshold_watch_expression = require('./threshold_watch_expression.html');\n\nvar _threshold_watch_expression2 = _interopRequireDefault(_threshold_watch_expression);\n\nrequire('./components/threshold_watch_agg_type');\n\nrequire('./components/threshold_watch_agg_field');\n\nrequire('./components/threshold_watch_group_by');\n\nrequire('./components/threshold_watch_threshold_level');\n\nrequire('./components/threshold_watch_time_window');\n\nrequire('plugins/watcher/components/expression_builder');\n\nvar _agg_types = require('./lib/agg_types');\n\nvar _comparators = require('./lib/comparators');\n\nvar _group_by_types = require('./lib/group_by_types');\n\nvar _constants = require('plugins/watcher/constants');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } } /*\n                                                                                                                                                           * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                           * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                           * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                           */\n\nvar app = _modules.uiModules.get('xpack/watcher');\n\napp.directive('thresholdWatchExpression', function () {\n\n  return {\n    restrict: 'E',\n    template: _threshold_watch_expression2.default,\n    scope: {\n      thresholdWatch: '=',\n      fields: '=',\n      onChange: '=',\n      onValid: '=',\n      onInvalid: '=',\n      onDirty: '='\n    },\n    bindToController: true,\n    controllerAs: 'thresholdWatchExpression',\n    controller: function ThresholdWatchExpressionController($scope) {\n      var _this = this;\n\n      _classCallCheck(this, ThresholdWatchExpressionController);\n\n      this.onAggTypeChange = function (aggType) {\n        if (!_this.initialized) {\n          return;\n        }\n\n        _this.aggType = aggType;\n\n        if (aggType.fieldRequired) {\n          _this.items['agg-field'].isVisible = true;\n          _this.aggFields = (0, _lodash.filter)(_this.fields, function (field) {\n            return (0, _lodash.includes)(aggType.validNormalizedTypes, field.normalizedType);\n          });\n          // The selected aggField may no longer be in the new array of aggFields. If so,\n          // unset it via the handler, so additional business logic is fired.\n          if (!(0, _lodash.includes)(_this.aggFields, _this.aggField)) {\n            _this.onAggFieldChange(null);\n          }\n        } else {\n          _this.items['agg-field'].isVisible = false;\n          _this.onAggFieldChange(null);\n        }\n\n        _this.thresholdWatch.aggType = aggType ? aggType.value : null;\n\n        _this.onChange(_this.thresholdWatch);\n      };\n\n      this.onAggFieldChange = function (aggField) {\n        if (!_this.initialized) {\n          return;\n        }\n\n        _this.aggField = aggField;\n        _this.thresholdWatch.aggField = aggField ? aggField.name : null;\n\n        _this.onChange(_this.thresholdWatch);\n      };\n\n      this.onGroupByChange = function (_ref, _ref2) {\n        var _ref4 = _slicedToArray(_ref, 3),\n            groupByType = _ref4[0],\n            termSize = _ref4[1],\n            termField = _ref4[2];\n\n        var _ref3 = _slicedToArray(_ref2, 1),\n            oldGroupByType = _ref3[0];\n\n        if (!_this.initialized) {\n          return;\n        }\n\n        _this.groupByType = groupByType;\n        _this.termSize = termSize;\n        _this.termField = termField;\n\n        if (groupByType !== oldGroupByType) {\n          _this.termFields = (0, _lodash.filter)(_this.fields, function (field) {\n            return (0, _lodash.includes)(_this.groupByType.validNormalizedTypes, field.normalizedType);\n          });\n\n          if (Boolean(oldGroupByType)) {\n            if (_this.groupByType === _this.groupByTypes.all) {\n              _this.termSize = null;\n              _this.termField = null;\n            } else {\n              _this.termSize = _this.thresholdWatch.DEFAULT_VALUES.TERM_SIZE;\n            }\n          }\n        }\n\n        _this.thresholdWatch.termSize = _this.termSize;\n        _this.thresholdWatch.termField = _this.termField ? _this.termField.name : null;\n\n        _this.onChange(_this.thresholdWatch);\n      };\n\n      this.onThresholdLevelChange = function (_ref5) {\n        var _ref6 = _slicedToArray(_ref5, 2),\n            thresholdComparator = _ref6[0],\n            threshold = _ref6[1];\n\n        if (!_this.initialized) {\n          return;\n        }\n\n        _this.thresholdComparator = thresholdComparator;\n        _this.threshold = threshold;\n\n        _this.thresholdWatch.thresholdComparator = _this.thresholdComparator.value;\n        _this.thresholdWatch.threshold = _this.threshold;\n\n        _this.onChange(_this.thresholdWatch);\n      };\n\n      this.onTimeWindowChange = function (_ref7) {\n        var _ref8 = _slicedToArray(_ref7, 2),\n            timeWindowSize = _ref8[0],\n            timeWindowUnit = _ref8[1];\n\n        if (!_this.initialized) {\n          return;\n        }\n\n        _this.timeWindowSize = timeWindowSize;\n        _this.timeWindowUnit = timeWindowUnit;\n\n        _this.thresholdWatch.timeWindowSize = _this.timeWindowSize;\n        _this.thresholdWatch.timeWindowUnit = _this.timeWindowUnit;\n\n        _this.onChange(_this.thresholdWatch);\n      };\n\n      this.isItemVisible = function (itemId) {\n        return _this.items[itemId].isVisible;\n      };\n\n      this.isItemOpen = function (itemId) {\n        return _this.items[itemId].isOpen;\n      };\n\n      this.onItemOpen = function (itemId) {\n        (0, _lodash.forEach)(_this.items, function (item, id) {\n          item.isOpen = itemId === id;\n        });\n      };\n\n      this.onItemClose = function (itemId) {\n        _this.items[itemId].isOpen = false;\n      };\n\n      this.isExpressionValid = function () {\n        return (0, _lodash.every)(_this.items, function (item) {\n          return item.isValid || !item.isVisible;\n        });\n      };\n\n      this.showExpressionValidation = function () {\n        return (0, _lodash.some)(_this.items, function (item) {\n          return !item.isValid && item.isVisible && item.isDirty;\n        });\n      };\n\n      this.checkValidity = function () {\n        if (_this.isExpressionValid()) {\n          _this.onValid();\n        } else {\n          _this.onInvalid();\n        }\n      };\n\n      this.onItemValid = function (itemId) {\n        _this.items[itemId].isValid = true;\n\n        _this.checkValidity();\n      };\n\n      this.onItemInvalid = function (itemId) {\n        _this.items[itemId].isValid = false;\n\n        _this.checkValidity();\n      };\n\n      this.onItemDirty = function (itemId) {\n        _this.items[itemId].isDirty = true;\n      };\n\n      this.onItemPristine = function (itemId) {\n        _this.items[itemId].isDirty = false;\n      };\n\n      this.items = {\n        'agg-type': { isOpen: false, isVisible: true, isValid: true },\n        'agg-field': { isOpen: false, isVisible: false, isValid: true },\n        'group-by': { isOpen: false, isVisible: true, isValid: true },\n        'threshold-level': { isOpen: false, isVisible: true, isValid: true },\n        'time-window': { isOpen: false, isVisible: true, isValid: true }\n      };\n\n      this.aggTypes = _agg_types.aggTypes;\n      this.groupByTypes = _group_by_types.groupByTypes;\n      this.comparators = _comparators.comparators;\n      this.timeUnits = _constants.TIME_UNITS;\n      this.initialized = false;\n      this.dirty = false;\n\n      $scope.$watchGroup(['thresholdWatchExpression.thresholdWatch', 'thresholdWatchExpression.fields'], function (_ref9) {\n        var _ref10 = _slicedToArray(_ref9, 2),\n            thresholdWatch = _ref10[0],\n            fields = _ref10[1];\n\n        if (!thresholdWatch || !fields) {\n          return;\n        }\n\n        _this.aggType = (0, _lodash.find)(_this.aggTypes, { value: _this.thresholdWatch.aggType });\n        _this.aggField = (0, _lodash.find)(_this.fields, { name: _this.thresholdWatch.aggField });\n        _this.groupByType = _this.thresholdWatch.termField ? _this.groupByTypes.top : _this.groupByTypes.all;\n        _this.termSize = _this.thresholdWatch.termSize;\n        _this.termField = (0, _lodash.find)(_this.fields, { name: _this.thresholdWatch.termField });\n        _this.threshold = _this.thresholdWatch.threshold;\n        _this.thresholdComparator = (0, _lodash.find)(_this.comparators, { value: _this.thresholdWatch.thresholdComparator });\n        _this.timeWindowSize = _this.thresholdWatch.timeWindowSize;\n        _this.timeWindowUnit = _this.thresholdWatch.timeWindowUnit;\n\n        _this.initialized = true;\n      });\n    }\n  };\n});",null]}