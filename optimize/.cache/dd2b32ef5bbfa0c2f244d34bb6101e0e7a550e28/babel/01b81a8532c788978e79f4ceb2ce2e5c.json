{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/index_lifecycle_management/public/store/selectors/lifecycle.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/index_lifecycle_management/public/store/selectors/lifecycle.js","mtime":1567631711967},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getLifecycle = exports.validateLifecycle = exports.policyNameAlreadyUsedErrorMessage = exports.policyNameMustBeDifferentErrorMessage = exports.policyNameTooLongErrorMessage = exports.policyNameContainsSpaceErrorMessage = exports.policyNameContainsCommaErrorMessage = exports.policyNameStartsWithUnderscoreErrorMessage = exports.policyNameRequiredMessage = exports.validatePhase = exports.positiveNumbersAboveZeroErrorMessage = exports.maximumDocumentsRequiredMessage = exports.maximumSizeRequiredMessage = exports.maximumAgeRequiredMessage = exports.positiveNumberRequiredMessage = exports.numberRequiredMessage = undefined;\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /*\n                                                                                                                                                                                                                                                                   * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                   * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                   * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                   */\n\n\nvar _i18n = require('@kbn/i18n');\n\nvar _constants = require('../constants');\n\nvar _ = require('.');\n\nvar _policies = require('./policies');\n\nvar numberRequiredMessage = exports.numberRequiredMessage = _i18n.i18n.translate('xpack.indexLifecycleMgmt.editPolicy.numberRequiredError', {\n  defaultMessage: 'A number is required.'\n});\nvar positiveNumberRequiredMessage = exports.positiveNumberRequiredMessage = _i18n.i18n.translate('xpack.indexLifecycleMgmt.editPolicy.positiveNumberRequiredError', {\n  defaultMessage: 'Only positive numbers are allowed.'\n});\nvar maximumAgeRequiredMessage = exports.maximumAgeRequiredMessage = _i18n.i18n.translate('xpack.indexLifecycleMgmt.editPolicy.maximumAgeMissingError', {\n  defaultMessage: 'A maximum age is required.'\n});\nvar maximumSizeRequiredMessage = exports.maximumSizeRequiredMessage = _i18n.i18n.translate('xpack.indexLifecycleMgmt.editPolicy.maximumIndexSizeMissingError', {\n  defaultMessage: 'A maximum index size is required.'\n});\nvar maximumDocumentsRequiredMessage = exports.maximumDocumentsRequiredMessage = _i18n.i18n.translate('xpack.indexLifecycleMgmt.editPolicy.maximumDocumentsMissingError', {\n  defaultMessage: 'Maximum documents is required.'\n});\nvar positiveNumbersAboveZeroErrorMessage = exports.positiveNumbersAboveZeroErrorMessage = _i18n.i18n.translate('xpack.indexLifecycleMgmt.editPolicy.positiveNumberAboveZeroRequiredError', {\n  defaultMessage: 'Only numbers above 0 are allowed.'\n});\nvar validatePhase = exports.validatePhase = function validatePhase(type, phase, errors) {\n  var phaseErrors = {};\n\n  if (!phase[_constants.PHASE_ENABLED]) {\n    return;\n  }\n\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = _constants.PHASE_ATTRIBUTES_THAT_ARE_NUMBERS_VALIDATE[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var numberedAttribute = _step.value;\n\n      if (phase.hasOwnProperty(numberedAttribute)) {\n        // If WARM_PHASE_ON_ROLLOVER or PHASE_HOT there is no need to validate this\n        if (numberedAttribute === _constants.PHASE_ROLLOVER_MINIMUM_AGE && (phase[_constants.WARM_PHASE_ON_ROLLOVER] || type === _constants.PHASE_HOT)) {\n          continue;\n        }\n        // If shrink is disabled, there is no need to validate this\n        if (numberedAttribute === _constants.PHASE_PRIMARY_SHARD_COUNT && !phase[_constants.PHASE_SHRINK_ENABLED]) {\n          continue;\n        }\n        // If forcemerge is disabled, there is no need to validate this\n        if (numberedAttribute === _constants.PHASE_FORCE_MERGE_SEGMENTS && !phase[_constants.PHASE_FORCE_MERGE_ENABLED]) {\n          continue;\n        }\n        // PHASE_REPLICA_COUNT is optional and can be zero\n        if (numberedAttribute === _constants.PHASE_REPLICA_COUNT && !phase[numberedAttribute]) {\n          continue;\n        }\n        // PHASE_INDEX_PRIORITY is optional and can be zero\n        if (numberedAttribute === _constants.PHASE_INDEX_PRIORITY && !phase[numberedAttribute]) {\n          continue;\n        }\n        if (!(0, _.isNumber)(phase[numberedAttribute])) {\n          phaseErrors[numberedAttribute] = [numberRequiredMessage];\n        } else if (phase[numberedAttribute] < 0) {\n          phaseErrors[numberedAttribute] = [positiveNumberRequiredMessage];\n        } else if ((numberedAttribute === _constants.PHASE_ROLLOVER_MINIMUM_AGE || numberedAttribute === _constants.PHASE_PRIMARY_SHARD_COUNT) && phase[numberedAttribute] < 1) {\n          phaseErrors[numberedAttribute] = [positiveNumbersAboveZeroErrorMessage];\n        }\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  if (phase[_constants.PHASE_ROLLOVER_ENABLED]) {\n    if (!(0, _.isNumber)(phase[_constants.PHASE_ROLLOVER_MAX_AGE]) && !(0, _.isNumber)(phase[_constants.PHASE_ROLLOVER_MAX_SIZE_STORED]) && !(0, _.isNumber)(phase[_constants.PHASE_ROLLOVER_MAX_DOCUMENTS])) {\n      phaseErrors[_constants.PHASE_ROLLOVER_MAX_AGE] = [maximumAgeRequiredMessage];\n      phaseErrors[_constants.PHASE_ROLLOVER_MAX_SIZE_STORED] = [maximumSizeRequiredMessage];\n      phaseErrors[_constants.PHASE_ROLLOVER_MAX_DOCUMENTS] = [maximumDocumentsRequiredMessage];\n    }\n    if ((0, _.isNumber)(phase[_constants.PHASE_ROLLOVER_MAX_AGE]) && phase[_constants.PHASE_ROLLOVER_MAX_AGE] < 1) {\n      phaseErrors[_constants.PHASE_ROLLOVER_MAX_AGE] = [positiveNumbersAboveZeroErrorMessage];\n    }\n    if ((0, _.isNumber)(phase[_constants.PHASE_ROLLOVER_MAX_SIZE_STORED]) && phase[_constants.PHASE_ROLLOVER_MAX_SIZE_STORED] < 1) {\n      phaseErrors[_constants.PHASE_ROLLOVER_MAX_SIZE_STORED] = [positiveNumbersAboveZeroErrorMessage];\n    }\n    if ((0, _.isNumber)(phase[_constants.PHASE_ROLLOVER_MAX_DOCUMENTS]) && phase[_constants.PHASE_ROLLOVER_MAX_DOCUMENTS] < 1) {\n      phaseErrors[_constants.PHASE_ROLLOVER_MAX_DOCUMENTS] = [positiveNumbersAboveZeroErrorMessage];\n    }\n  }\n  if (phase[_constants.PHASE_SHRINK_ENABLED]) {\n    if (!(0, _.isNumber)(phase[_constants.PHASE_PRIMARY_SHARD_COUNT])) {\n      phaseErrors[_constants.PHASE_PRIMARY_SHARD_COUNT] = [numberRequiredMessage];\n    } else if (phase[_constants.PHASE_PRIMARY_SHARD_COUNT] < 1) {\n      phaseErrors[_constants.PHASE_PRIMARY_SHARD_COUNT] = [positiveNumbersAboveZeroErrorMessage];\n    }\n  }\n\n  if (phase[_constants.PHASE_FORCE_MERGE_ENABLED]) {\n    if (!(0, _.isNumber)(phase[_constants.PHASE_FORCE_MERGE_SEGMENTS])) {\n      phaseErrors[_constants.PHASE_FORCE_MERGE_SEGMENTS] = [numberRequiredMessage];\n    } else if (phase[_constants.PHASE_FORCE_MERGE_SEGMENTS] < 1) {\n      phaseErrors[_constants.PHASE_FORCE_MERGE_SEGMENTS] = [positiveNumbersAboveZeroErrorMessage];\n    }\n  }\n  errors[type] = _extends({}, errors[type], phaseErrors);\n};\n\nvar policyNameRequiredMessage = exports.policyNameRequiredMessage = _i18n.i18n.translate('xpack.indexLifecycleMgmt.editPolicy.policyNameRequiredError', {\n  defaultMessage: 'A policy name is required.'\n});\nvar policyNameStartsWithUnderscoreErrorMessage = exports.policyNameStartsWithUnderscoreErrorMessage = _i18n.i18n.translate('xpack.indexLifecycleMgmt.editPolicy.policyNameStartsWithUnderscoreError', {\n  defaultMessage: 'A policy name cannot start with an underscore.'\n});\nvar policyNameContainsCommaErrorMessage = exports.policyNameContainsCommaErrorMessage = _i18n.i18n.translate('xpack.indexLifecycleMgmt.editPolicy.policyNameContainsCommaError', {\n  defaultMessage: 'A policy name cannot include a comma.'\n});\nvar policyNameContainsSpaceErrorMessage = exports.policyNameContainsSpaceErrorMessage = _i18n.i18n.translate('xpack.indexLifecycleMgmt.editPolicy.policyNameContainsSpaceError', {\n  defaultMessage: 'A policy name cannot include a space.'\n});\nvar policyNameTooLongErrorMessage = exports.policyNameTooLongErrorMessage = _i18n.i18n.translate('xpack.indexLifecycleMgmt.editPolicy.policyNameTooLongError', {\n  defaultMessage: 'A policy name cannot be longer than 255 bytes.'\n});\nvar policyNameMustBeDifferentErrorMessage = exports.policyNameMustBeDifferentErrorMessage = _i18n.i18n.translate('xpack.indexLifecycleMgmt.editPolicy.differentPolicyNameRequiredError', {\n  defaultMessage: 'The policy name must be different.'\n});\nvar policyNameAlreadyUsedErrorMessage = exports.policyNameAlreadyUsedErrorMessage = _i18n.i18n.translate('xpack.indexLifecycleMgmt.editPolicy.policyNameAlreadyUsedError', {\n  defaultMessage: 'That policy name is already used.'\n});\nvar validateLifecycle = exports.validateLifecycle = function validateLifecycle(state) {\n  // This method of deep copy does not always work but it should be fine here\n  var errors = JSON.parse(JSON.stringify(_constants.ERROR_STRUCTURE));\n  var policyName = (0, _.getSelectedPolicyName)(state);\n  if (!policyName) {\n    errors[_constants.STRUCTURE_POLICY_NAME].push(policyNameRequiredMessage);\n  } else {\n    if (policyName.startsWith('_')) {\n      errors[_constants.STRUCTURE_POLICY_NAME].push(policyNameStartsWithUnderscoreErrorMessage);\n    }\n    if (policyName.includes(',')) {\n      errors[_constants.STRUCTURE_POLICY_NAME].push(policyNameContainsCommaErrorMessage);\n    }\n    if (policyName.includes(' ')) {\n      errors[_constants.STRUCTURE_POLICY_NAME].push(policyNameContainsSpaceErrorMessage);\n    }\n    if (window.TextEncoder && new window.TextEncoder('utf-8').encode(policyName).length > 255) {\n      errors[_constants.STRUCTURE_POLICY_NAME].push(policyNameTooLongErrorMessage);\n    }\n  }\n\n  if ((0, _.getSaveAsNewPolicy)(state) && (0, _.getSelectedOriginalPolicyName)(state) === (0, _.getSelectedPolicyName)(state)) {\n    errors[_constants.STRUCTURE_POLICY_NAME].push(policyNameMustBeDifferentErrorMessage);\n  } else if ((0, _.getSelectedOriginalPolicyName)(state) !== (0, _.getSelectedPolicyName)(state)) {\n    var policyNames = (0, _.getPolicies)(state).map(function (policy) {\n      return policy.name;\n    });\n    if (policyNames.includes((0, _.getSelectedPolicyName)(state))) {\n      errors[_constants.STRUCTURE_POLICY_NAME].push(policyNameAlreadyUsedErrorMessage);\n    }\n  }\n\n  var hotPhase = (0, _.getPhase)(state, _constants.PHASE_HOT);\n  var warmPhase = (0, _.getPhase)(state, _constants.PHASE_WARM);\n  var coldPhase = (0, _.getPhase)(state, _constants.PHASE_COLD);\n  var deletePhase = (0, _.getPhase)(state, _constants.PHASE_DELETE);\n\n  validatePhase(_constants.PHASE_HOT, hotPhase, errors);\n  validatePhase(_constants.PHASE_WARM, warmPhase, errors);\n  validatePhase(_constants.PHASE_COLD, coldPhase, errors);\n  validatePhase(_constants.PHASE_DELETE, deletePhase, errors);\n  return errors;\n};\n\nvar getLifecycle = exports.getLifecycle = function getLifecycle(state) {\n  var policyName = (0, _.getSelectedPolicyName)(state);\n  var phases = Object.entries((0, _.getPhases)(state)).reduce(function (accum, _ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        phaseName = _ref2[0],\n        phase = _ref2[1];\n\n    // Hot is ALWAYS enabled\n    if (phaseName === _constants.PHASE_HOT) {\n      phase[_constants.PHASE_ENABLED] = true;\n    }\n    var esPolicy = (0, _policies.getPolicyByName)(state, policyName).policy || {};\n    var esPhase = esPolicy.phases ? esPolicy.phases[phaseName] : {};\n    if (phase[_constants.PHASE_ENABLED]) {\n      accum[phaseName] = (0, _.phaseToES)(phase, esPhase);\n\n      // These seem to be constants\n      if (phaseName === _constants.PHASE_DELETE) {\n        accum[phaseName].actions = _extends({}, accum[phaseName].actions, {\n          delete: {}\n        });\n      }\n    }\n    return accum;\n  }, {});\n\n  return {\n    name: (0, _.getSelectedPolicyName)(state),\n    //type, TODO: figure this out (jsut store it and not let the user change it?)\n    phases: phases\n  };\n};",null]}