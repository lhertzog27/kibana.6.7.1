{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/settings/filter_lists/components/delete_filter_list_modal/delete_filter_lists.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/settings/filter_lists/components/delete_filter_list_modal/delete_filter_lists.js","mtime":1567631712066},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.deleteFilterLists = undefined;\n\nvar deleteFilterLists = exports.deleteFilterLists = function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(filterListsToDelete) {\n    var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, filterList, filterId;\n\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(filterListsToDelete === undefined || filterListsToDelete.length === 0)) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt('return');\n\n          case 2:\n\n            // Delete each of the specified filter lists in turn, waiting for each response\n            // before deleting the next to minimize load on the cluster.\n            _notify.toastNotifications.add(_i18n.i18n.translate('xpack.ml.settings.filterLists.deleteFilterLists.deletingNotificationMessage', {\n              defaultMessage: 'Deleting {filterListsToDeleteLength, plural, one {{filterListToDeleteId}} other {# filter lists}}',\n              values: {\n                filterListsToDeleteLength: filterListsToDelete.length,\n                filterListToDeleteId: !!filterListsToDelete.length && filterListsToDelete[0].filter_id\n              }\n            }));\n\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _iteratorError = undefined;\n            _context.prev = 6;\n            _iterator = filterListsToDelete[Symbol.iterator]();\n\n          case 8:\n            if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {\n              _context.next = 23;\n              break;\n            }\n\n            filterList = _step.value;\n            filterId = filterList.filter_id;\n            _context.prev = 11;\n            _context.next = 14;\n            return _ml_api_service.ml.filters.deleteFilter(filterId);\n\n          case 14:\n            _context.next = 20;\n            break;\n\n          case 16:\n            _context.prev = 16;\n            _context.t0 = _context['catch'](11);\n\n            console.log('Error deleting filter list:', _context.t0);\n            _notify.toastNotifications.addDanger(_i18n.i18n.translate('xpack.ml.settings.filterLists.deleteFilterLists.deletingErrorMessage', {\n              defaultMessage: 'An error occurred deleting filter list {filterListId}{respMessage}',\n              values: {\n                filterListId: filterList.filter_id,\n                respMessage: _context.t0.message ? ' : ' + _context.t0.message : ''\n              }\n            }));\n\n          case 20:\n            _iteratorNormalCompletion = true;\n            _context.next = 8;\n            break;\n\n          case 23:\n            _context.next = 29;\n            break;\n\n          case 25:\n            _context.prev = 25;\n            _context.t1 = _context['catch'](6);\n            _didIteratorError = true;\n            _iteratorError = _context.t1;\n\n          case 29:\n            _context.prev = 29;\n            _context.prev = 30;\n\n            if (!_iteratorNormalCompletion && _iterator.return) {\n              _iterator.return();\n            }\n\n          case 32:\n            _context.prev = 32;\n\n            if (!_didIteratorError) {\n              _context.next = 35;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 35:\n            return _context.finish(32);\n\n          case 36:\n            return _context.finish(29);\n\n          case 37:\n\n            _notify.toastNotifications.addSuccess(_i18n.i18n.translate('xpack.ml.settings.filterLists.deleteFilterLists.filtersSuccessfullyDeletedNotificationMessage', {\n              defaultMessage: '{filterListsToDeleteLength, plural, one {{filterListToDeleteId}} other {# filter lists}} deleted',\n              values: {\n                filterListsToDeleteLength: filterListsToDelete.length,\n                filterListToDeleteId: !!filterListsToDelete.length && filterListsToDelete[0].filter_id\n              }\n            }));\n\n          case 38:\n          case 'end':\n            return _context.stop();\n        }\n      }\n    }, _callee, this, [[6, 25, 29, 37], [11, 16], [30,, 32, 36]]);\n  }));\n\n  return function deleteFilterLists(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar _notify = require('ui/notify');\n\nvar _i18n = require('@kbn/i18n');\n\nvar _ml_api_service = require('../../../../services/ml_api_service');\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            */",null]}