{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/logstash/public/services/monitoring/monitoring_service.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/logstash/public/services/monitoring/monitoring_service.js","mtime":1567631712009},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MonitoringService = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\nopyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\nor more contributor license agreements. Licensed under the Elastic License;\nyou may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      */\n\nvar _moment = require('moment');\n\nvar _moment2 = _interopRequireDefault(_moment);\n\nvar _chrome = require('ui/chrome');\n\nvar _chrome2 = _interopRequireDefault(_chrome);\n\nvar _constants = require('../../../common/constants');\n\nvar _pipeline_list_item = require('plugins/logstash/models/pipeline_list_item');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar MonitoringService = exports.MonitoringService = function () {\n  function MonitoringService($http, Promise, monitoringUiEnabled, clusterService) {\n    _classCallCheck(this, MonitoringService);\n\n    this.$http = $http;\n    this.Promise = Promise;\n    this.monitoringUiEnabled = monitoringUiEnabled;\n    this.clusterService = clusterService;\n    this.basePath = _chrome2.default.addBasePath(_constants.ROUTES.MONITORING_API_ROOT);\n  }\n\n  _createClass(MonitoringService, [{\n    key: 'isMonitoringEnabled',\n    value: function isMonitoringEnabled() {\n      return this.monitoringUiEnabled;\n    }\n  }, {\n    key: 'getPipelineList',\n    value: function getPipelineList() {\n      var _this = this;\n\n      if (!this.isMonitoringEnabled()) {\n        return Promise.resolve([]);\n      }\n\n      return this.clusterService.loadCluster().then(function (cluster) {\n        var url = _this.basePath + '/v1/clusters/' + cluster.uuid + '/logstash/pipelines';\n        var now = _moment2.default.utc();\n        var body = {\n          timeRange: {\n            max: now.toISOString(),\n            min: now.subtract(_constants.MONITORING.ACTIVE_PIPELINE_RANGE_S, 'seconds').toISOString()\n          }\n        };\n        return _this.$http.post(url, body);\n      }).then(function (response) {\n        return response.data.pipelines.map(function (pipeline) {\n          return _pipeline_list_item.PipelineListItem.fromUpstreamMonitoringJSON(pipeline);\n        });\n      }).catch(function () {\n        return [];\n      });\n    }\n  }]);\n\n  return MonitoringService;\n}();",null]}