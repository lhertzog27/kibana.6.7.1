{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/ui/public/indexed_array/indexed_array.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/indexed_array/indexed_array.js","mtime":1567631711739},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.IndexedArray = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } }; /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             * Licensed to Elasticsearch B.V. under one or more contributor\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             * license agreements. See the NOTICE file distributed with\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             * this work for additional information regarding copyright\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             * ownership. Elasticsearch B.V. licenses this file to you under\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             * the Apache License, Version 2.0 (the \"License\"); you may\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             * not use this file except in compliance with the License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             * You may obtain a copy of the License at\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             *    http://www.apache.org/licenses/LICENSE-2.0\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             * Unless required by applicable law or agreed to in writing,\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             * software distributed under the License is distributed on an\nneither express or implied.  See the License for the\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             * specific language governing permissions and limitations\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             * under the License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             */\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _inflector = require('./inflector');\n\nvar _collection = require('../utils/collection');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar pathGetter = (0, _lodash2.default)(_lodash2.default.get).rearg(1, 0).ary(2);\nvar inflectIndex = (0, _inflector.inflector)('by');\nvar inflectOrder = (0, _inflector.inflector)('in', 'Order');\n\nvar CLEAR_CACHE = {};\nvar OPT_NAMES = ['index', 'group', 'order', 'initialSet', 'immutable'];\n\n/**\n *  Generic extension of Array class, which will index (and reindex) the\n *  objects it contains based on their properties.\n *\n *  @param {Object} config describes the properties of this registry object\n *  @param {Array<string>} [config.index] a list of props/paths that should be used to index the docs.\n *  @param {Array<string>} [config.group] a list of keys/paths to group docs by.\n *  @param {Array<string>} [config.order] a list of keys/paths to order the keys by.\n *  @param {Array<any>} [config.initialSet] the initial dataset the IndexedArray should contain.\n *  @param {boolean} [config.immutable] a flag that hints to people reading the implementation that this IndexedArray\n *                                      should not be modified\n */\n\nvar IndexedArray = exports.IndexedArray = function () {\n  function IndexedArray(config) {\n    _classCallCheck(this, IndexedArray);\n\n    config = _lodash2.default.pick(config || {}, OPT_NAMES);\n\n    // use defineProperty so that value can't be changed\n    Object.defineProperty(this, 'raw', { value: [] });\n\n    this._indexNames = _lodash2.default.union(this._setupIndex(config.group, inflectIndex, organizeByIndexedArray(config)), this._setupIndex(config.index, inflectIndex, _lodash2.default.indexBy), this._setupIndex(config.order, inflectOrder, function (raw, pluckValue) {\n      return [].concat(_toConsumableArray(raw)).sort(function (itemA, itemB) {\n        var a = pluckValue(itemA);\n        var b = pluckValue(itemB);\n        if (typeof a === 'number' && typeof b === 'number') {\n          return a - b;\n        }\n        return String(a).toLowerCase().localeCompare(String(b).toLowerCase());\n      });\n    }));\n\n    if (config.initialSet) {\n      this.push.apply(this, config.initialSet);\n    }\n\n    Object.defineProperty(this, 'immutable', { value: !!config.immutable });\n  }\n\n  /**\n   * Remove items from this based on a predicate\n   * @param {Function|Object|string} predicate - the predicate used to decide what is removed\n   * @return {array} - the removed data\n   */\n\n\n  _createClass(IndexedArray, [{\n    key: 'remove',\n    value: function remove(predicate) {\n      this._assertMutable('remove');\n      var out = _lodash2.default.remove(this, predicate);\n      _lodash2.default.remove(this.raw, predicate);\n      this._clearIndices();\n      return out;\n    }\n\n    /**\n     * provide a hook for the JSON serializer\n     * @return {array} - a plain, vanilla array with our same data\n     */\n\n  }, {\n    key: 'toJSON',\n    value: function toJSON() {\n      return this.raw;\n    }\n\n    // wrappers for mutable Array methods\n\n  }, {\n    key: 'copyWithin',\n    value: function copyWithin() {\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return this._mutation('copyWithin', args);\n    }\n  }, {\n    key: 'fill',\n    value: function fill() {\n      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      return this._mutation('fill', args);\n    }\n  }, {\n    key: 'pop',\n    value: function pop() {\n      for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n\n      return this._mutation('pop', args);\n    }\n  }, {\n    key: 'push',\n    value: function push() {\n      for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n\n      return this._mutation('push', args);\n    }\n  }, {\n    key: 'reverse',\n    value: function reverse() {\n      for (var _len5 = arguments.length, args = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n        args[_key5] = arguments[_key5];\n      }\n\n      return this._mutation('reverse', args);\n    }\n  }, {\n    key: 'shift',\n    value: function shift() {\n      for (var _len6 = arguments.length, args = Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n        args[_key6] = arguments[_key6];\n      }\n\n      return this._mutation('shift', args);\n    }\n  }, {\n    key: 'sort',\n    value: function sort() {\n      for (var _len7 = arguments.length, args = Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n        args[_key7] = arguments[_key7];\n      }\n\n      return this._mutation('sort', args);\n    }\n  }, {\n    key: 'splice',\n    value: function splice() {\n      for (var _len8 = arguments.length, args = Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n        args[_key8] = arguments[_key8];\n      }\n\n      return this._mutation('splice', args);\n    }\n  }, {\n    key: 'unshift',\n    value: function unshift() {\n      for (var _len9 = arguments.length, args = Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n        args[_key9] = arguments[_key9];\n      }\n\n      return this._mutation('unshift', args);\n    }\n\n    /**\n     *  If this instance of IndexedArray is not mutable, throw an error\n     *  @private\n     *  @param  {String} methodName - user facing method name, for error message\n     *  @return {undefined}\n     */\n\n  }, {\n    key: '_assertMutable',\n    value: function _assertMutable(methodName) {\n      if (this.immutable) {\n        throw new Error(methodName + '() is not allowed on immutable IndexedArray instances');\n      }\n    }\n\n    /**\n     *  Execute some mutable method from the Array prototype\n     *  on the IndexedArray and this.raw\n     *\n     *  @private\n     *  @param  {string} methodName\n     *  @param  {Array<any>} args\n     *  @return {any}\n     */\n\n  }, {\n    key: '_mutation',\n    value: function _mutation(methodName, args) {\n      this._assertMutable(methodName);\n      _get(IndexedArray.prototype.__proto__ || Object.getPrototypeOf(IndexedArray.prototype), methodName, this).apply(this, args);\n      this._clearIndices();\n      return _get(IndexedArray.prototype.__proto__ || Object.getPrototypeOf(IndexedArray.prototype), methodName, this).apply(this.raw, args);\n    }\n\n    /**\n     * Create indices for a group of object properties. getters and setters are used to\n     * read and control the indices.\n     * @private\n     * @param  {string[]} props   - the properties that should be used to index docs\n     * @param  {function} inflect - a function that will be called with a property name, and\n     *                            creates the public property at which the index will be exposed\n     * @param  {function} op      - the function that will be used to create the indices, it is passed\n     *                            the raw representation of the registry, and a getter for reading the\n     *                            right prop\n     *\n     * @returns {string[]}        - the public keys of all indices created\n     */\n\n  }, {\n    key: '_setupIndex',\n    value: function _setupIndex(props, inflect, op) {\n      var _this = this;\n\n      // shortcut for empty props\n      if (!props || props.length === 0) return;\n\n      return props.map(function (prop) {\n        var indexName = inflect(prop);\n        var getIndexValueFromItem = pathGetter.partial(prop).value();\n        var cache = void 0;\n\n        Object.defineProperty(_this, indexName, {\n          enumerable: false,\n          configurable: false,\n\n          set: function set(val) {\n            // can't set any value other than the CLEAR_CACHE constant\n            if (val === CLEAR_CACHE) {\n              cache = false;\n            } else {\n              throw new TypeError(indexName + ' can not be set, it is a computed index of values');\n            }\n          },\n          get: function get() {\n            if (!cache) {\n              cache = op(_this.raw, getIndexValueFromItem);\n            }\n\n            return cache;\n          }\n        });\n\n        return indexName;\n      });\n    }\n\n    /**\n     * Clear cached index/group/order caches so they will be recreated\n     * on next access\n     * @private\n     * @return {undefined}\n     */\n\n  }, {\n    key: '_clearIndices',\n    value: function _clearIndices() {\n      var _this2 = this;\n\n      this._indexNames.forEach(function (name) {\n        _this2[name] = CLEAR_CACHE;\n      });\n    }\n  }]);\n\n  return IndexedArray;\n}();\n\n// using traditional `extends Array` syntax doesn't work with babel\n// See https://babeljs.io/docs/usage/caveats/\n\n\nIndexedArray.OPT_NAMES = OPT_NAMES;\nObject.setPrototypeOf(IndexedArray.prototype, Array.prototype);\n\n// Similar to `organizeBy` but returns IndexedArrays instead of normal Arrays.\nfunction organizeByIndexedArray(config) {\n  return function () {\n    var grouped = _collection.organizeBy.apply(undefined, arguments);\n\n    return _lodash2.default.reduce(grouped, function (acc, value, group) {\n      acc[group] = new IndexedArray(_extends({}, config, {\n        initialSet: value\n      }));\n\n      return acc;\n    }, {});\n  };\n}",null]}