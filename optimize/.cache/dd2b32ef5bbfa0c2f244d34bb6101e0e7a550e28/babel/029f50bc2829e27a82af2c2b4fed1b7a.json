{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/public/lib/arg_helpers.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/public/lib/arg_helpers.js","mtime":1567631711932},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateArg = validateArg;\nexports.getSimpleArg = getSimpleArg;\nexports.setSimpleArg = setSimpleArg;\n\nvar _lodash = require('lodash');\n\nvar _common = require('@kbn/interpreter/common');\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; } /*\n                                                                                                                                                                                                                   * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                   * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                   * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                   */\n\n/*\n\n  IMPORTANT: These only work with simple values, eg string, number, boolean.\n  Getting or setting anything else will throw.\n\n*/\n\n// TODO: With the removal of objectified literals in the AST I don't think we need this anymore.\n\nvar allowedTypes = ['string', 'number', 'boolean'];\nvar badType = function badType() {\n  return new Error('Arg setting helpers only support ' + allowedTypes.join(','));\n};\n\nvar isAllowed = function isAllowed(type) {\n  return (0, _lodash.includes)(allowedTypes, type);\n};\n\nfunction validateArg(value) {\n  var type = (0, _common.getType)(value);\n  if (!isAllowed(type)) {\n    throw badType();\n  }\n  return value;\n}\n\nfunction getSimpleArg(name, args) {\n  if (!args[name]) {\n    return [];\n  }\n  return args[name].map(function (astVal) {\n    if (!isAllowed((0, _common.getType)(astVal))) {\n      throw badType();\n    }\n    return astVal;\n  });\n}\n\nfunction setSimpleArg(name, value) {\n  value = Array.isArray(value) ? value : [value];\n  return _defineProperty({}, name, value.map(validateArg));\n}",null]}