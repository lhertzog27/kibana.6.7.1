{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/privilege/check_privilege.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/privilege/check_privilege.js","mtime":1567631712061},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.checkGetJobsPrivilege = checkGetJobsPrivilege;\nexports.checkCreateJobsPrivilege = checkCreateJobsPrivilege;\nexports.checkFindFileStructurePrivilege = checkFindFileStructurePrivilege;\nexports.checkPermission = checkPermission;\nexports.createPermissionFailureMessage = createPermissionFailureMessage;\n\nvar _i18n = require('@kbn/i18n');\n\nvar _get_privileges = require('./get_privileges');\n\nvar _check_license = require('../license/check_license');\n\nvar privileges = {}; /*\n                      * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                      * or more contributor license agreements. Licensed under the Elastic License;\n                      * you may not use this file except in compliance with the Elastic License.\n                      */\n\nfunction checkGetJobsPrivilege(Private, Promise, kbnUrl) {\n  return new Promise(function (resolve, reject) {\n    (0, _get_privileges.getPrivileges)().then(function (priv) {\n      privileges = priv;\n      // the minimum privilege for using ML with a platinum license is being able to get the jobs list.\n      // all other functionality is controlled by the return privileges object\n      if (privileges.canGetJobs) {\n        return resolve(privileges);\n      } else {\n        kbnUrl.redirect('/access-denied');\n        return reject();\n      }\n    });\n  });\n}\n\nfunction checkCreateJobsPrivilege(Private, Promise, kbnUrl) {\n  return new Promise(function (resolve, reject) {\n    (0, _get_privileges.getPrivileges)().then(function (priv) {\n      privileges = priv;\n      if (privileges.canCreateJob) {\n        return resolve(privileges);\n      } else {\n        // if the user has no permission to create a job,\n        // redirect them back to the Jobs Management page\n        kbnUrl.redirect('/jobs');\n        return reject();\n      }\n    });\n  });\n}\n\nfunction checkFindFileStructurePrivilege(Private, Promise, kbnUrl) {\n  return new Promise(function (resolve, reject) {\n    (0, _get_privileges.getPrivileges)().then(function (priv) {\n      privileges = priv;\n      // the minimum privilege for using ML with a basic license is being able to use the datavisualizer.\n      // all other functionality is controlled by the return privileges object\n      if (privileges.canFindFileStructure) {\n        return resolve(privileges);\n      } else {\n        kbnUrl.redirect('/access-denied');\n        return reject();\n      }\n    });\n  });\n}\n\n// check the privilege type and the license to see whether a user has permission to access a feature.\n// takes the name of the privilege variable as specified in get_privileges.js\nfunction checkPermission(privilegeType) {\n  var licenseHasExpired = (0, _check_license.hasLicenseExpired)();\n  return privileges[privilegeType] === true && licenseHasExpired !== true;\n}\n\n// create the text for the button's tooltips if the user's license has\n// expired or if they don't have the privilege to press that button\nfunction createPermissionFailureMessage(privilegeType) {\n  var message = '';\n  var licenseHasExpired = (0, _check_license.hasLicenseExpired)();\n  if (licenseHasExpired) {\n    message = _i18n.i18n.translate('xpack.ml.privilege.licenseHasExpiredTooltip', {\n      defaultMessage: 'Your license has expired.'\n    });\n  } else if (privilegeType === 'canCreateJob') {\n    message = _i18n.i18n.translate('xpack.ml.privilege.noPermission.createMLJobsTooltip', {\n      defaultMessage: 'You do not have permission to create Machine Learning jobs.'\n    });\n  } else if (privilegeType === 'canStartStopDatafeed') {\n    message = _i18n.i18n.translate('xpack.ml.privilege.noPermission.startOrStopDatafeedsTooltip', {\n      defaultMessage: 'You do not have permission to start or stop datafeeds.'\n    });\n  } else if (privilegeType === 'canUpdateJob') {\n    message = _i18n.i18n.translate('xpack.ml.privilege.noPermission.editJobsTooltip', {\n      defaultMessage: 'You do not have permission to edit jobs.'\n    });\n  } else if (privilegeType === 'canDeleteJob') {\n    message = _i18n.i18n.translate('xpack.ml.privilege.noPermission.deleteJobsTooltip', {\n      defaultMessage: 'You do not have permission to delete jobs.'\n    });\n  } else if (privilegeType === 'canCreateCalendar') {\n    message = _i18n.i18n.translate('xpack.ml.privilege.noPermission.createCalendarsTooltip', {\n      defaultMessage: 'You do not have permission to create calendars.'\n    });\n  } else if (privilegeType === 'canDeleteCalendar') {\n    message = _i18n.i18n.translate('xpack.ml.privilege.noPermission.deleteCalendarsTooltip', {\n      defaultMessage: 'You do not have permission to delete calendars.'\n    });\n  } else if (privilegeType === 'canForecastJob') {\n    message = _i18n.i18n.translate('xpack.ml.privilege.noPermission.runForecastsTooltip', {\n      defaultMessage: 'You do not have permission to run forecasts.'\n    });\n  }\n  return _i18n.i18n.translate('xpack.ml.privilege.pleaseContactAdministratorTooltip', {\n    defaultMessage: '{message} Please contact your administrator.',\n    values: {\n      message: message\n    }\n  });\n}",null]}