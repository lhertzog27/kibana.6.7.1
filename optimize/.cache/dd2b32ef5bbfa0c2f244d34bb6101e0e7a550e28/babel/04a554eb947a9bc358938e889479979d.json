{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/logstash/public/sections/pipeline_edit/components/pipeline_edit/pipeline_edit.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/logstash/public/sections/pipeline_edit/components/pipeline_edit/pipeline_edit.js","mtime":1567631712008},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = require('react-dom');\n\nvar _lodash = require('lodash');\n\nvar _modules = require('ui/modules');\n\nvar _notify = require('ui/notify');\n\nvar _i18n = require('ui/i18n');\n\nvar _pipeline_editor = require('../../../../components/pipeline_editor');\n\nrequire('plugins/logstash/services/license');\n\nrequire('plugins/logstash/services/security');\n\nrequire('ace');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            */\n\nvar app = _modules.uiModules.get('xpack/logstash');\n\napp.directive('pipelineEdit', function ($injector) {\n  var _this = this;\n\n  var pipelineService = $injector.get('pipelineService');\n  var licenseService = $injector.get('logstashLicenseService');\n  var securityService = $injector.get('logstashSecurityService');\n  var kbnUrl = $injector.get('kbnUrl');\n  var shieldUser = $injector.get('ShieldUser');\n  var $route = $injector.get('$route');\n\n  return {\n    restrict: 'E',\n    link: function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(scope, el) {\n        var close, open, userResource;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                close = function close() {\n                  return scope.$evalAsync(kbnUrl.change('/management/logstash/pipelines', {}));\n                };\n\n                open = function open(id) {\n                  return scope.$evalAsync(kbnUrl.change('/management/logstash/pipelines/' + id + '/edit'));\n                };\n\n                if (!securityService.isSecurityEnabled) {\n                  _context.next = 8;\n                  break;\n                }\n\n                _context.next = 5;\n                return shieldUser.getCurrent().$promise;\n\n              case 5:\n                _context.t0 = _context.sent;\n                _context.next = 9;\n                break;\n\n              case 8:\n                _context.t0 = null;\n\n              case 9:\n                userResource = _context.t0;\n\n\n                (0, _reactDom.render)(_react2.default.createElement(\n                  _i18n.I18nContext,\n                  null,\n                  _react2.default.createElement(_pipeline_editor.PipelineEditor, {\n                    kbnUrl: kbnUrl,\n                    close: close,\n                    open: open,\n                    isNewPipeline: (0, _lodash.isEmpty)(scope.pipeline.id),\n                    username: userResource ? userResource.username : null,\n                    pipeline: scope.pipeline,\n                    pipelineService: pipelineService,\n                    routeService: $route,\n                    toastNotifications: _notify.toastNotifications,\n                    licenseService: licenseService,\n                    notifier: new _notify.Notifier({ location: 'Logstash' })\n                  })\n                ), el[0]);\n\n              case 11:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, _this);\n      }));\n\n      function link(_x, _x2) {\n        return _ref.apply(this, arguments);\n      }\n\n      return link;\n    }(),\n    scope: {\n      pipeline: '='\n    }\n  };\n});",null]}