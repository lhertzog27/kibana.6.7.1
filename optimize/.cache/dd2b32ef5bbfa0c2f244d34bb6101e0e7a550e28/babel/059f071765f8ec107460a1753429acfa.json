{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/jobs/new_job/wizard/steps/job_type/job_type_controller.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/jobs/new_job/wizard/steps/job_type/job_type_controller.js","mtime":1567631712061},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nvar _routes = require('ui/routes');\n\nvar _routes2 = _interopRequireDefault(_routes);\n\nvar _check_license = require('plugins/ml/license/check_license');\n\nvar _check_privilege = require('plugins/ml/privilege/check_privilege');\n\nvar _new_job_utils = require('plugins/ml/jobs/new_job/utils/new_job_utils');\n\nvar _index_utils = require('plugins/ml/util/index_utils');\n\nvar _recently_accessed = require('plugins/ml/util/recently_accessed');\n\nvar _check_ml_nodes = require('plugins/ml/ml_nodes_check/check_ml_nodes');\n\nvar _job_type = require('./job_type.html');\n\nvar _job_type2 = _interopRequireDefault(_job_type);\n\nvar _timefilter = require('ui/timefilter');\n\nvar _modules = require('ui/modules');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_routes2.default.when('/jobs/new_job/step/job_type', {\n  template: _job_type2.default,\n  resolve: {\n    CheckLicense: _check_license.checkLicenseExpired,\n    privileges: _check_privilege.checkCreateJobsPrivilege,\n    indexPattern: _index_utils.loadCurrentIndexPattern,\n    savedSearch: _index_utils.loadCurrentSavedSearch,\n    checkMlNodesAvailable: _check_ml_nodes.checkMlNodesAvailable\n  }\n}); /*\n     * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n     * or more contributor license agreements. Licensed under the Elastic License;\n     * you may not use this file except in compliance with the Elastic License.\n     */\n\n/*\n * Controller for the second step in the Create Job wizard, allowing\n * the user to select the type of job they wish to create.\n */\n\nvar _module = _modules.uiModules.get('apps/ml');\n\n_module.controller('MlNewJobStepJobType', function ($scope, Private, i18n) {\n\n  _timefilter.timefilter.disableTimeRangeSelector(); // remove time picker from top of page\n  _timefilter.timefilter.disableAutoRefreshSelector(); // remove time picker from top of page\n\n  var createSearchItems = Private(_new_job_utils.SearchItemsProvider);\n\n  var _createSearchItems = createSearchItems(),\n      indexPattern = _createSearchItems.indexPattern,\n      savedSearch = _createSearchItems.savedSearch;\n\n  // check to see that the index pattern is time based.\n  // if it isn't, display a warning and disable all links\n\n\n  $scope.indexWarningTitle = '';\n  $scope.isTimeBasedIndex = (0, _index_utils.timeBasedIndexCheck)(indexPattern);\n  if ($scope.isTimeBasedIndex === false) {\n    $scope.indexWarningTitle = savedSearch.id === undefined ? i18n('xpack.ml.newJob.wizard.jobType.indexPatternNotTimeBasedMessage', {\n      defaultMessage: 'Index pattern {indexPatternTitle} is not time based',\n      values: { indexPatternTitle: indexPattern.title }\n    }) : i18n('xpack.ml.newJob.wizard.jobType.indexPatternFromSavedSearchNotTimeBasedMessage', {\n      defaultMessage: '{savedSearchTitle} uses index pattern {indexPatternTitle} which is not time based',\n      values: {\n        savedSearchTitle: savedSearch.title,\n        indexPatternTitle: indexPattern.title\n      }\n    });\n  }\n\n  $scope.indexPattern = indexPattern;\n  $scope.savedSearch = savedSearch;\n  $scope.recognizerResults = {\n    count: 0,\n    onChange: function onChange() {\n      $scope.$applyAsync();\n    }\n  };\n\n  $scope.pageTitleLabel = savedSearch.id !== undefined ? i18n('xpack.ml.newJob.wizard.jobType.savedSearchPageTitleLabel', {\n    defaultMessage: 'saved search {savedSearchTitle}',\n    values: { savedSearchTitle: savedSearch.title }\n  }) : i18n('xpack.ml.newJob.wizard.jobType.indexPatternPageTitleLabel', {\n    defaultMessage: 'index pattern {indexPatternTitle}',\n    values: { indexPatternTitle: indexPattern.title }\n  });\n\n  $scope.getUrl = function (basePath) {\n    return savedSearch.id === undefined ? basePath + '?index=' + indexPattern.id : basePath + '?savedSearchId=' + savedSearch.id;\n  };\n\n  $scope.addSelectionToRecentlyAccessed = function () {\n    var title = savedSearch.id === undefined ? indexPattern.title : savedSearch.title;\n    var url = $scope.getUrl('');\n    (0, _recently_accessed.addItemToRecentlyAccessed)('jobs/new_job/datavisualizer', title, url);\n  };\n});",null]}