{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/canvas_plugin_src/functions/common/progress.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/canvas_plugin_src/functions/common/progress.js","mtime":1567631711898},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.progress = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /*\n                                                                                                                                                                                                                                                                   * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                   * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                   * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                   */\n\nvar _lodash = require('lodash');\n\nvar _fonts = require('../../../common/lib/fonts');\n\nvar shapes = ['gauge', 'horizontalBar', 'horizontalPill', 'semicircle', 'unicorn', 'verticalBar', 'verticalPill', 'wheel'];\n\nvar progress = exports.progress = function progress() {\n  return {\n    name: 'progress',\n    aliases: [],\n    type: 'render',\n    help: 'Configure a progress element',\n    context: {\n      types: ['number']\n    },\n    args: {\n      shape: {\n        type: ['string'],\n        alias: ['_'],\n        help: 'Select ' + shapes.slice(0, -1).join(', ') + ', or ' + shapes.slice(-1)[0],\n        options: shapes,\n        default: 'gauge'\n      },\n      max: {\n        type: ['number'],\n        help: 'Maximum value of the progress element',\n        default: 1\n      },\n      valueColor: {\n        type: ['string'],\n        help: 'Color of the progress bar',\n        default: '#1785b0'\n      },\n      barColor: {\n        type: ['string'],\n        help: 'Color of the background bar',\n        default: '#f0f0f0'\n      },\n      valueWeight: {\n        type: ['number'],\n        help: 'Thickness of the progress bar',\n        default: 20\n      },\n      barWeight: {\n        type: ['number'],\n        help: 'Thickness of the background bar',\n        default: 20\n      },\n      label: {\n        type: ['boolean', 'string'],\n        help: 'Set true/false to show/hide label or provide a string to display as the label',\n        default: true\n      },\n      font: {\n        types: ['style'],\n        help: 'Font settings for the label. Technically you can stick other styles in here too!',\n        default: '{font size=24 family=\"' + _fonts.openSans.value + '\" color=\"#000000\" align=center}'\n      }\n    },\n    fn: function fn(value, args) {\n      if (args.max <= 0) {\n        throw new Error('Invalid max value: \\'' + args.max + '\\'. \\'max\\' must be greater than 0');\n      }\n      if (value > args.max || value < 0) {\n        throw new Error('Invalid value: \\'' + value + '\\'. Value must be between 0 and ' + args.max);\n      }\n\n      var label = '';\n      if (args.label) {\n        label = typeof args.label === 'string' ? args.label : '' + value;\n      }\n\n      var font = {};\n\n      if ((0, _lodash.get)(args, 'font.spec')) {\n        font = _extends({}, args.font);\n        font.spec.fill = args.font.spec.color; // SVG <text> uses fill for font color\n      }\n\n      return {\n        type: 'render',\n        as: 'progress',\n        value: _extends({\n          value: value\n        }, args, {\n          label: label,\n          font: font\n        })\n      };\n    }\n  };\n};",null]}