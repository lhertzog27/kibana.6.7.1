{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/monitoring/public/components/elasticsearch/nodes/nodes.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/monitoring/public/components/elasticsearch/nodes/nodes.js","mtime":1567631712086},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ElasticsearchNodes = undefined;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _node = require('../node');\n\nvar _extract_ip = require('../../../lib/extract_ip');\n\nvar _cluster_status = require('../cluster_status');\n\nvar _table = require('../../table');\n\nvar _cells = require('./cells');\n\nvar _eui = require('@elastic/eui');\n\nvar _i18n = require('@kbn/i18n');\n\nvar _react3 = require('@kbn/i18n/react');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; } /*\n                                                                                                                                                                                                                              * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                              * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                              * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                              */\n\n// TODO this is only used for elasticsearch nodes summary / node detail, so it should be moved to components/elasticsearch/nodes/lib\n\n\nvar getColumns = function getColumns(showCgroupMetricsElasticsearch) {\n  var cols = [];\n\n  var cpuUsageColumnTitle = _i18n.i18n.translate('xpack.monitoring.elasticsearch.nodes.cpuUsageColumnTitle', {\n    defaultMessage: 'CPU Usage'\n  });\n\n  cols.push({\n    name: _i18n.i18n.translate('xpack.monitoring.elasticsearch.nodes.nameColumnTitle', {\n      defaultMessage: 'Name'\n    }),\n    field: 'name',\n    sortable: true,\n    render: function render(value, node) {\n      return _react2.default.createElement(\n        'div',\n        null,\n        _react2.default.createElement(\n          'div',\n          { className: 'monTableCell__name' },\n          _react2.default.createElement(\n            _eui.EuiToolTip,\n            {\n              position: 'bottom',\n              content: node.nodeTypeLabel\n            },\n            _react2.default.createElement('span', { className: 'fa ' + node.nodeTypeClass })\n          ),\n          '\\xA0',\n          _react2.default.createElement(\n            'span',\n            { 'data-test-subj': 'name' },\n            _react2.default.createElement(\n              _eui.EuiLink,\n              {\n                href: '#/elasticsearch/nodes/' + node.resolver,\n                'data-test-subj': 'nodeLink-' + node.resolver\n              },\n              value\n            )\n          )\n        ),\n        _react2.default.createElement(\n          'div',\n          { className: 'monTableCell__transportAddress' },\n          (0, _extract_ip.extractIp)(node.transport_address)\n        )\n      );\n    }\n  });\n\n  cols.push({\n    name: _i18n.i18n.translate('xpack.monitoring.elasticsearch.nodes.statusColumnTitle', {\n      defaultMessage: 'Status'\n    }),\n    field: 'isOnline',\n    sortable: true,\n    render: function render(value) {\n      var status = value ? _i18n.i18n.translate('xpack.monitoring.elasticsearch.nodes.statusColumn.onlineLabel', {\n        defaultMessage: 'Online'\n      }) : _i18n.i18n.translate('xpack.monitoring.elasticsearch.nodes.statusColumn.offlineLabel', {\n        defaultMessage: 'Offline'\n      });\n      return _react2.default.createElement(\n        'div',\n        { className: 'monTableCell__status' },\n        _react2.default.createElement(_node.NodeStatusIcon, {\n          isOnline: value,\n          status: status\n        }),\n        ' ',\n        status\n      );\n    }\n  });\n\n  if (showCgroupMetricsElasticsearch) {\n    cols.push({\n      name: cpuUsageColumnTitle,\n      field: 'node_cgroup_quota',\n      sortable: true,\n      render: function render(value, node) {\n        return _react2.default.createElement(_cells.MetricCell, {\n          isOnline: node.isOnline,\n          metric: value,\n          isPercent: true,\n          'data-test-subj': 'cpuQuota'\n        });\n      }\n    });\n\n    cols.push({\n      name: _i18n.i18n.translate('xpack.monitoring.elasticsearch.nodes.cpuThrottlingColumnTitle', {\n        defaultMessage: 'CPU Throttling'\n      }),\n      field: 'node_cgroup_throttled',\n      sortable: true,\n      render: function render(value, node) {\n        return _react2.default.createElement(_cells.MetricCell, {\n          isOnline: node.isOnline,\n          metric: value,\n          isPercent: false,\n          'data-test-subj': 'cpuThrottled'\n        });\n      }\n    });\n  } else {\n    cols.push({\n      name: cpuUsageColumnTitle,\n      field: 'node_cpu_utilization',\n      sortable: true,\n      render: function render(value, node) {\n        return _react2.default.createElement(_cells.MetricCell, {\n          isOnline: node.isOnline,\n          metric: value,\n          isPercent: true,\n          'data-test-subj': 'cpuUsage'\n        });\n      }\n    });\n\n    cols.push({\n      name: _i18n.i18n.translate('xpack.monitoring.elasticsearch.nodes.loadAverageColumnTitle', {\n        defaultMessage: 'Load Average'\n      }),\n      field: 'node_load_average',\n      sortable: true,\n      render: function render(value, node) {\n        return _react2.default.createElement(_cells.MetricCell, {\n          isOnline: node.isOnline,\n          metric: value,\n          isPercent: false,\n          'data-test-subj': 'loadAverage'\n        });\n      }\n    });\n  }\n\n  cols.push({\n    name: _i18n.i18n.translate('xpack.monitoring.elasticsearch.nodes.jvmMemoryColumnTitle', {\n      defaultMessage: '{javaVirtualMachine} Memory',\n      values: {\n        javaVirtualMachine: 'JVM'\n      }\n    }),\n    field: 'node_jvm_mem_percent',\n    sortable: true,\n    render: function render(value, node) {\n      return _react2.default.createElement(_cells.MetricCell, {\n        isOnline: node.isOnline,\n        metric: value,\n        isPercent: true,\n        'data-test-subj': 'jvmMemory'\n      });\n    }\n  });\n\n  cols.push({\n    name: _i18n.i18n.translate('xpack.monitoring.elasticsearch.nodes.diskFreeSpaceColumnTitle', {\n      defaultMessage: 'Disk Free Space'\n    }),\n    field: 'node_free_space',\n    sortable: true,\n    width: '300px',\n    render: function render(value, node) {\n      return _react2.default.createElement(_cells.MetricCell, {\n        isOnline: node.isOnline,\n        metric: value,\n        isPercent: false,\n        'data-test-subj': 'diskFreeSpace'\n      });\n    }\n  });\n\n  cols.push({\n    name: _i18n.i18n.translate('xpack.monitoring.elasticsearch.nodes.shardsColumnTitle', {\n      defaultMessage: 'Shards'\n    }),\n    field: 'shardCount',\n    sortable: true,\n    render: function render(value, node) {\n      return node.isOnline ? _react2.default.createElement(\n        'div',\n        { className: 'monTableCell__number', 'data-test-subj': 'shards' },\n        value\n      ) : _react2.default.createElement(_cells.OfflineCell, null);\n    }\n  });\n\n  return cols;\n};\n\nfunction ElasticsearchNodesUI(_ref) {\n  var clusterStatus = _ref.clusterStatus,\n      nodes = _ref.nodes,\n      showCgroupMetricsElasticsearch = _ref.showCgroupMetricsElasticsearch,\n      intl = _ref.intl,\n      props = _objectWithoutProperties(_ref, ['clusterStatus', 'nodes', 'showCgroupMetricsElasticsearch', 'intl']);\n\n  var columns = getColumns(showCgroupMetricsElasticsearch);\n  var sorting = props.sorting,\n      pagination = props.pagination,\n      onTableChange = props.onTableChange;\n\n\n  return _react2.default.createElement(\n    _eui.EuiPage,\n    null,\n    _react2.default.createElement(\n      _eui.EuiPageBody,\n      null,\n      _react2.default.createElement(\n        _eui.EuiPanel,\n        null,\n        _react2.default.createElement(_cluster_status.ClusterStatus, { stats: clusterStatus })\n      ),\n      _react2.default.createElement(_eui.EuiSpacer, { size: 'm' }),\n      _react2.default.createElement(\n        _eui.EuiPageContent,\n        null,\n        _react2.default.createElement(_table.EuiMonitoringTable, {\n          className: 'elasticsearchNodesTable',\n          rows: nodes,\n          columns: columns,\n          sorting: sorting,\n          pagination: pagination,\n          search: {\n            box: {\n              incremental: true,\n              placeholder: intl.formatMessage({\n                id: 'xpack.monitoring.elasticsearch.nodes.monitoringTablePlaceholder',\n                defaultMessage: 'Filter Nodes…'\n              })\n            }\n          },\n          onTableChange: onTableChange,\n          executeQueryOptions: {\n            defaultFields: ['name']\n          }\n        })\n      )\n    )\n  );\n}\n\nvar ElasticsearchNodes = exports.ElasticsearchNodes = (0, _react3.injectI18n)(ElasticsearchNodesUI);",null]}