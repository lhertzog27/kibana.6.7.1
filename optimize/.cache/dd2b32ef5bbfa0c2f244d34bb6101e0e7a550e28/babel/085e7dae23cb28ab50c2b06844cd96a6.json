{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/canvas_plugin_src/functions/common/staticColumn.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/canvas_plugin_src/functions/common/staticColumn.js","mtime":1567631711899},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.staticColumn = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /*\n                                                                                                                                                                                                                                                                   * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                   * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                   * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                   */\n\nvar _common = require('@kbn/interpreter/common');\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar staticColumn = exports.staticColumn = function staticColumn() {\n  return {\n    name: 'staticColumn',\n    type: 'datatable',\n    help: 'Add a column with a static value',\n    context: {\n      types: ['datatable']\n    },\n    args: {\n      name: {\n        types: ['string'],\n        aliases: ['_', 'column'],\n        help: 'The name of the new column column',\n        required: true\n      },\n      value: {\n        types: ['string', 'number', 'boolean', 'null'],\n        help: 'The value to insert in each column. Tip: use a sub-expression to rollup other columns into a static value',\n        default: null\n      }\n    },\n    fn: function fn(context, args) {\n      var rows = context.rows.map(function (row) {\n        return _extends({}, row, _defineProperty({}, args.name, args.value));\n      });\n      var type = (0, _common.getType)(args.value);\n      var columns = [].concat(_toConsumableArray(context.columns));\n      var existingColumnIndex = columns.findIndex(function (_ref) {\n        var name = _ref.name;\n        return name === args.name;\n      });\n      var newColumn = { name: args.name, type: type };\n\n      if (existingColumnIndex > -1) {\n        columns[existingColumnIndex] = newColumn;\n      } else {\n        columns.push(newColumn);\n      }\n\n      return {\n        type: 'datatable',\n        columns: columns,\n        rows: rows\n      };\n    }\n  };\n};",null]}