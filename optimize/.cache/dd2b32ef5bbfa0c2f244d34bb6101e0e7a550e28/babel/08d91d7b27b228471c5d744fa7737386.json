{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/jobs/new_job/simple/components/bucket_span_estimator/bucket_span_estimator_directive.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/jobs/new_job/simple/components/bucket_span_estimator/bucket_span_estimator_directive.js","mtime":1567631712054},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; /*\n                                                                                                                                                                                                                                                                               * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                               * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                               * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                               */\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _bucket_span_estimator_view = require('./bucket_span_estimator_view');\n\nvar _general = require('plugins/ml/jobs/new_job/simple/components/constants/general');\n\nvar _ml_api_service = require('plugins/ml/services/ml_api_service');\n\nvar _i18n = require('ui/i18n');\n\nvar _modules = require('ui/modules');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _module = _modules.uiModules.get('apps/ml');\n\n_module.directive('mlBucketSpanEstimator', function (i18n) {\n  return {\n    restrict: 'AE',\n    replace: false,\n    scope: {\n      bucketSpanFieldChange: '=',\n      formConfig: '=',\n      jobStateWrapper: '=',\n      JOB_STATE: '=jobState',\n      ui: '=ui',\n      exportedFunctions: '='\n    },\n    link: function link($scope, $element) {\n      var STATUS = {\n        FAILED: -1,\n        NOT_RUNNING: 0,\n        RUNNING: 1,\n        FINISHED: 2\n      };\n\n      var errorHandler = function errorHandler(error) {\n        console.log('Bucket span could not be estimated', error);\n        $scope.ui.bucketSpanEstimator.status = STATUS.FAILED;\n        $scope.ui.bucketSpanEstimator.message = i18n('xpack.ml.newJob.simple.bucketSpanEstimator.bucketSpanCouldNotBeEstimatedMessage', {\n          defaultMessage: 'Bucket span could not be estimated'\n        });\n        $scope.$applyAsync();\n      };\n\n      $scope.guessBucketSpan = function () {\n        $scope.ui.bucketSpanEstimator.status = STATUS.RUNNING;\n        $scope.ui.bucketSpanEstimator.message = '';\n        $scope.$applyAsync();\n\n        // we need to create a request object here because $scope.formConfig\n        // includes objects with methods which might break the required\n        // object structure when stringified for the server call\n        var data = {\n          aggTypes: [],\n          duration: {\n            start: $scope.formConfig.start,\n            end: $scope.formConfig.end\n          },\n          fields: [],\n          filters: $scope.formConfig.filters,\n          index: $scope.formConfig.indexPattern.title,\n          query: $scope.formConfig.combinedQuery,\n          splitField: $scope.formConfig.splitField && $scope.formConfig.splitField.name,\n          timeField: $scope.formConfig.timeField\n        };\n\n        if ($scope.formConfig.fields === undefined) {\n          // single metric config\n          var fieldName = $scope.formConfig.field === null ? null : $scope.formConfig.field.name;\n          data.fields.push(fieldName);\n          data.aggTypes.push($scope.formConfig.agg.type.dslName);\n        } else {\n          // multi metric config\n          Object.keys($scope.formConfig.fields).map(function (id) {\n            var field = $scope.formConfig.fields[id];\n            var fieldName = field.id === _general.EVENT_RATE_COUNT_FIELD ? null : field.name;\n            data.fields.push(fieldName);\n            data.aggTypes.push(field.agg.type.dslName);\n          });\n        }\n\n        _ml_api_service.ml.estimateBucketSpan(data).then(function (interval) {\n          if (interval.error) {\n            errorHandler(interval.message);\n            return;\n          }\n\n          var notify = $scope.formConfig.bucketSpan !== interval.name;\n          $scope.formConfig.bucketSpan = interval.name;\n          $scope.ui.bucketSpanEstimator.status = STATUS.FINISHED;\n          if (notify && typeof $scope.bucketSpanFieldChange === 'function') {\n            $scope.bucketSpanFieldChange();\n          }\n          $scope.$applyAsync();\n        }).catch(errorHandler);\n      };\n\n      // export the guessBucketSpan function so it can be called from outside this directive.\n      // this is used when auto populating the settings from the URL.\n      if ($scope.exportedFunctions !== undefined && _typeof($scope.exportedFunctions) === 'object') {\n        $scope.exportedFunctions.guessBucketSpan = $scope.guessBucketSpan;\n      }\n\n      // watch for these changes\n      $scope.$watch('formConfig.agg.type', updateButton, true);\n      $scope.$watch('jobStateWrapper.jobState', updateButton, true);\n      $scope.$watch('[ui.showJobInput,ui.formValid,ui.bucketSpanEstimator.status]', updateButton, true);\n\n      function updateButton() {\n        var buttonDisabled = $scope.ui.showJobInput === false || $scope.ui.formValid === false || $scope.formConfig.agg.type === undefined || $scope.jobStateWrapper.jobState === $scope.JOB_STATE.RUNNING || $scope.jobStateWrapper.jobState === $scope.JOB_STATE.STOPPING || $scope.jobStateWrapper.jobState === $scope.JOB_STATE.FINISHED || $scope.ui.bucketSpanEstimator.status === STATUS.RUNNING;\n        var estimatorRunning = $scope.ui.bucketSpanEstimator.status === STATUS.RUNNING;\n        var buttonText = estimatorRunning ? i18n('xpack.ml.newJob.simple.bucketSpanEstimator.estimatingBucketSpanButtonLabel', {\n          defaultMessage: 'Estimating bucket span'\n        }) : i18n('xpack.ml.newJob.simple.bucketSpanEstimator.estimateBucketSpanButtonLabel', {\n          defaultMessage: 'Estimate bucket span'\n        });\n\n        var props = {\n          buttonDisabled: buttonDisabled,\n          estimatorRunning: estimatorRunning,\n          guessBucketSpan: $scope.guessBucketSpan,\n          buttonText: buttonText\n        };\n\n        _reactDom2.default.render(_react2.default.createElement(\n          _i18n.I18nContext,\n          null,\n          _react2.default.createElement(_bucket_span_estimator_view.BucketSpanEstimator, props)\n        ), $element[0]);\n      }\n\n      updateButton();\n    }\n  };\n});",null]}