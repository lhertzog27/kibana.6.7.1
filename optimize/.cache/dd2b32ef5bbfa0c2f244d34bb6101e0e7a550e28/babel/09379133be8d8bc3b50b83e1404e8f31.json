{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/services/mapping_service.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/services/mapping_service.js","mtime":1567631712062},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getFieldTypeFromMapping = getFieldTypeFromMapping;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _ml_api_service = require('../services/ml_api_service');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Returns the mapping type of the specified field.\n// Accepts fieldName containing dots representing a nested sub-field.\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nfunction getFieldTypeFromMapping(index, fieldName) {\n  return new Promise(function (resolve, reject) {\n    if (index !== '') {\n      _ml_api_service.ml.getFieldCaps({ index: index, fields: [fieldName] }).then(function (resp) {\n        var fieldType = '';\n        _lodash2.default.each(resp.fields, function (field) {\n          _lodash2.default.each(field, function (type) {\n            if (fieldType === '') {\n              fieldType = type.type;\n            }\n          });\n        });\n        resolve(fieldType);\n      }).catch(function (error) {\n        reject(error);\n      });\n    } else {\n      reject();\n    }\n  });\n}",null]}