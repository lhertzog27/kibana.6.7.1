{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/canvas_plugin_src/renderers/pie/index.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/canvas_plugin_src/renderers/pie/index.js","mtime":1567631711904},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.pie = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /*\n                                                                                                                                                                                                                                                                   * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                   * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                   * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                   */\n\n// This bit of hackiness is required because this isn't part of the main kibana bundle\n\n\nrequire('jquery');\n\nrequire('../../lib/flot-charts');\n\nvar _lodash = require('lodash');\n\nvar _pie = require('./plugins/pie');\n\nvar pie = exports.pie = function pie() {\n  return {\n    name: 'pie',\n    displayName: 'Pie chart',\n    help: 'Render a pie chart from data',\n    reuseDomNode: false,\n    render: function render(domNode, config, handlers) {\n      if (!(0, _lodash.includes)($.plot.plugins, _pie.pie)) {\n        $.plot.plugins.push(_pie.pie);\n      }\n\n      config.options.legend.labelBoxBorderColor = 'transparent';\n\n      if (config.font) {\n        var labelFormatter = function labelFormatter(label, slice) {\n          // font color defaults to slice color if not specified\n          var fontSpec = _extends({}, config.font.spec, { color: config.font.spec.color || slice.color });\n          var labelDiv = document.createElement('div');\n          Object.assign(labelDiv.style, fontSpec);\n          var labelSpan = new DOMParser().parseFromString(label, 'text/html').body.firstChild;\n          var lineBreak = document.createElement('br');\n          var percentText = document.createTextNode(Math.round(slice.percent) + '%');\n\n          labelDiv.appendChild(labelSpan);\n          labelDiv.appendChild(lineBreak);\n          labelDiv.appendChild(percentText);\n          return labelDiv.outerHTML;\n        };\n        config.options.series.pie.label.formatter = labelFormatter;\n\n        var legendFormatter = function legendFormatter(label) {\n          var labelSpan = document.createElement('span');\n          Object.assign(labelSpan.style, config.font.spec);\n          labelSpan.textContent = label;\n          return labelSpan.outerHTML;\n        };\n        config.options.legend.labelFormatter = legendFormatter;\n      }\n\n      var plot = void 0;\n      function draw() {\n        if (domNode.clientHeight < 1 || domNode.clientWidth < 1) {\n          return;\n        }\n\n        try {\n          $(domNode).empty();\n          if (!config.data || !config.data.length) {\n            $(domNode).empty();\n          } else {\n            plot = $.plot($(domNode), config.data, config.options);\n          }\n        } catch (e) {\n          console.log(e);\n          // Nope\n        }\n      }\n\n      function destroy() {\n        if (plot) {\n          plot.shutdown();\n        }\n      }\n\n      handlers.onDestroy(destroy);\n      handlers.onResize((0, _lodash.debounce)(draw, 40, { maxWait: 40 })); // 1000 / 40 = 25fps\n\n      draw();\n\n      return handlers.done();\n    }\n  };\n};",null]}