{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/settings/calendars/edit/new_calendar.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/settings/calendars/edit/new_calendar.js","mtime":1567631712064},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NewCalendar = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _class, _temp; /*\n                    * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                    * or more contributor license agreements. Licensed under the Elastic License;\n                    * you may not use this file except in compliance with the Elastic License.\n                    */\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _eui = require('@elastic/eui');\n\nvar _chrome = require('ui/chrome');\n\nvar _chrome2 = _interopRequireDefault(_chrome);\n\nvar _utils = require('./utils');\n\nvar _calendar_form = require('./calendar_form/');\n\nvar _new_event_modal = require('./new_event_modal/');\n\nvar _import_modal = require('./import_modal');\n\nvar _ml_api_service = require('../../../services/ml_api_service');\n\nvar _notify = require('ui/notify');\n\nvar _react3 = require('@kbn/i18n/react');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar NewCalendar = exports.NewCalendar = (0, _react3.injectI18n)((_temp = _class = function (_Component) {\n  _inherits(NewCalendar, _Component);\n\n  function NewCalendar(props) {\n    var _this2 = this;\n\n    _classCallCheck(this, NewCalendar);\n\n    var _this = _possibleConstructorReturn(this, (NewCalendar.__proto__ || Object.getPrototypeOf(NewCalendar)).call(this, props));\n\n    _this.isDuplicateId = function () {\n      var _this$state = _this.state,\n          calendars = _this$state.calendars,\n          formCalendarId = _this$state.formCalendarId;\n\n\n      for (var i = 0; i < calendars.length; i++) {\n        if (calendars[i].calendar_id === formCalendarId) {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n    _this.onCreate = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n      var formCalendarId, intl, calendar;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              formCalendarId = _this.state.formCalendarId;\n              intl = _this.props.intl;\n\n              if (!_this.isDuplicateId()) {\n                _context.next = 6;\n                break;\n              }\n\n              _notify.toastNotifications.addDanger(intl.formatMessage({\n                id: 'xpack.ml.calendarsEdit.canNotCreateCalendarWithExistingIdErrorMessag',\n                defaultMessage: 'Cannot create calendar with id [{formCalendarId}] as it already exists.'\n              }, { formCalendarId: formCalendarId }));\n              _context.next = 19;\n              break;\n\n            case 6:\n              calendar = _this.setUpCalendarForApi();\n\n              _this.setState({ saving: true });\n\n              _context.prev = 8;\n              _context.next = 11;\n              return _ml_api_service.ml.addCalendar(calendar);\n\n            case 11:\n              window.location = _chrome2.default.getBasePath() + '/app/ml#/settings/calendars_list';\n              _context.next = 19;\n              break;\n\n            case 14:\n              _context.prev = 14;\n              _context.t0 = _context['catch'](8);\n\n              console.log('Error saving calendar', _context.t0);\n              _this.setState({ saving: false });\n              _notify.toastNotifications.addDanger(intl.formatMessage({\n                id: 'xpack.ml.calendarsEdit.errorWithCreatingCalendarErrorMessage',\n                defaultMessage: 'An error occurred creating calendar {calendarId}'\n              }, { calendarId: calendar.calendarId }));\n\n            case 19:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, _this2, [[8, 14]]);\n    }));\n    _this.onEdit = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n      var calendar;\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              calendar = _this.setUpCalendarForApi();\n\n              _this.setState({ saving: true });\n\n              _context2.prev = 2;\n              _context2.next = 5;\n              return _ml_api_service.ml.updateCalendar(calendar);\n\n            case 5:\n              window.location = _chrome2.default.getBasePath() + '/app/ml#/settings/calendars_list';\n              _context2.next = 13;\n              break;\n\n            case 8:\n              _context2.prev = 8;\n              _context2.t0 = _context2['catch'](2);\n\n              console.log('Error saving calendar', _context2.t0);\n              _this.setState({ saving: false });\n              _notify.toastNotifications.addDanger(_this.props.intl.formatMessage({\n                id: 'xpack.ml.calendarsEdit.errorWithUpdatingCalendarErrorMessage',\n                defaultMessage: 'An error occurred saving calendar {calendarId}. Try refreshing the page.'\n              }, { calendarId: calendar.calendarId }));\n\n            case 13:\n            case 'end':\n              return _context2.stop();\n          }\n        }\n      }, _callee2, _this2, [[2, 8]]);\n    }));\n\n    _this.setUpCalendarForApi = function () {\n      var _this$state2 = _this.state,\n          formCalendarId = _this$state2.formCalendarId,\n          description = _this$state2.description,\n          events = _this$state2.events,\n          selectedGroupOptions = _this$state2.selectedGroupOptions,\n          selectedJobOptions = _this$state2.selectedJobOptions;\n\n\n      var jobIds = selectedJobOptions.map(function (option) {\n        return option.label;\n      });\n      var groupIds = selectedGroupOptions.map(function (option) {\n        return option.label;\n      });\n\n      // Reduce events to fields expected by api\n      var eventsToSave = events.map(function (event) {\n        return {\n          description: event.description,\n          start_time: event.start_time,\n          end_time: event.end_time\n        };\n      });\n\n      // set up calendar\n      var calendar = {\n        calendarId: formCalendarId,\n        description: description,\n        events: eventsToSave,\n        job_ids: [].concat(_toConsumableArray(jobIds), _toConsumableArray(groupIds))\n      };\n\n      return calendar;\n    };\n\n    _this.onCreateGroupOption = function (newGroup) {\n      var newOption = {\n        label: newGroup\n      };\n      // Select the option.\n      _this.setState(function (prevState) {\n        return {\n          selectedGroupOptions: prevState.selectedGroupOptions.concat(newOption)\n        };\n      });\n    };\n\n    _this.onJobSelection = function (selectedJobOptions) {\n      _this.setState({\n        selectedJobOptions: selectedJobOptions\n      });\n    };\n\n    _this.onGroupSelection = function (selectedGroupOptions) {\n      _this.setState({\n        selectedGroupOptions: selectedGroupOptions\n      });\n    };\n\n    _this.onCalendarIdChange = function (e) {\n      var isValid = (0, _utils.validateCalendarId)(e.target.value);\n\n      _this.setState({\n        formCalendarId: e.target.value,\n        isNewCalendarIdValid: isValid\n      });\n    };\n\n    _this.onDescriptionChange = function (e) {\n      _this.setState({\n        description: e.target.value\n      });\n    };\n\n    _this.showImportModal = function () {\n      _this.setState(function (prevState) {\n        return {\n          isImportModalVisible: !prevState.isImportModalVisible\n        };\n      });\n    };\n\n    _this.closeImportModal = function () {\n      _this.setState({\n        isImportModalVisible: false\n      });\n    };\n\n    _this.onEventDelete = function (eventId) {\n      _this.setState(function (prevState) {\n        return {\n          events: prevState.events.filter(function (event) {\n            return event.event_id !== eventId;\n          })\n        };\n      });\n    };\n\n    _this.closeNewEventModal = function () {\n      _this.setState({ isNewEventModalVisible: false });\n    };\n\n    _this.showNewEventModal = function () {\n      _this.setState({ isNewEventModalVisible: true });\n    };\n\n    _this.addEvent = function (event) {\n      _this.setState(function (prevState) {\n        return {\n          events: [].concat(_toConsumableArray(prevState.events), [event]),\n          isNewEventModalVisible: false\n        };\n      });\n    };\n\n    _this.addImportedEvents = function (events) {\n      _this.setState(function (prevState) {\n        return {\n          events: [].concat(_toConsumableArray(prevState.events), _toConsumableArray(events)),\n          isImportModalVisible: false\n        };\n      });\n    };\n\n    _this.state = {\n      isNewEventModalVisible: false,\n      isImportModalVisible: false,\n      isNewCalendarIdValid: null,\n      loading: true,\n      jobIds: [],\n      jobIdOptions: [],\n      groupIds: [],\n      groupIdOptions: [],\n      calendars: [],\n      formCalendarId: '',\n      description: '',\n      selectedJobOptions: [],\n      selectedGroupOptions: [],\n      events: [],\n      saving: false,\n      selectedCalendar: undefined\n    };\n    return _this;\n  }\n\n  _createClass(NewCalendar, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.formSetup();\n    }\n  }, {\n    key: 'formSetup',\n    value: function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n        var _this3 = this;\n\n        var _ref4, jobIds, groupIds, calendars, jobIdOptions, groupIdOptions, selectedJobOptions, selectedGroupOptions, eventsList, selectedCalendar, formCalendarId;\n\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n                _context3.next = 3;\n                return (0, _utils.getCalendarSettingsData)();\n\n              case 3:\n                _ref4 = _context3.sent;\n                jobIds = _ref4.jobIds;\n                groupIds = _ref4.groupIds;\n                calendars = _ref4.calendars;\n                jobIdOptions = jobIds.map(function (jobId) {\n                  return { label: jobId };\n                });\n                groupIdOptions = groupIds.map(function (groupId) {\n                  return { label: groupId };\n                });\n                selectedJobOptions = [];\n                selectedGroupOptions = [];\n                eventsList = [];\n                selectedCalendar = void 0;\n                formCalendarId = '';\n\n                // Editing existing calendar.\n\n                if (this.props.calendarId !== undefined) {\n                  selectedCalendar = calendars.find(function (cal) {\n                    return cal.calendar_id === _this3.props.calendarId;\n                  });\n\n                  if (selectedCalendar) {\n                    formCalendarId = selectedCalendar.calendar_id;\n                    eventsList = selectedCalendar.events;\n\n                    selectedCalendar.job_ids.forEach(function (id) {\n                      if (jobIds.find(function (jobId) {\n                        return jobId === id;\n                      })) {\n                        selectedJobOptions.push({ label: id });\n                      } else if (groupIds.find(function (groupId) {\n                        return groupId === id;\n                      })) {\n                        selectedGroupOptions.push({ label: id });\n                      }\n                    });\n                  }\n                }\n\n                this.setState({\n                  events: eventsList,\n                  formCalendarId: formCalendarId,\n                  jobIds: jobIds,\n                  jobIdOptions: jobIdOptions,\n                  groupIds: groupIds,\n                  groupIdOptions: groupIdOptions,\n                  calendars: calendars,\n                  loading: false,\n                  selectedJobOptions: selectedJobOptions,\n                  selectedGroupOptions: selectedGroupOptions,\n                  selectedCalendar: selectedCalendar\n                });\n                _context3.next = 23;\n                break;\n\n              case 18:\n                _context3.prev = 18;\n                _context3.t0 = _context3['catch'](0);\n\n                console.log(_context3.t0);\n                this.setState({ loading: false });\n                _notify.toastNotifications.addDanger(this.props.intl.formatMessage({\n                  id: 'xpack.ml.calendarsEdit.errorWithLoadingCalendarFromDataErrorMessage',\n                  defaultMessage: 'An error occurred loading calendar form data. Try refreshing the page.'\n                }));\n\n              case 23:\n              case 'end':\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[0, 18]]);\n      }));\n\n      function formSetup() {\n        return _ref3.apply(this, arguments);\n      }\n\n      return formSetup;\n    }()\n  }, {\n    key: 'render',\n    value: function render() {\n      var _state = this.state,\n          events = _state.events,\n          isNewEventModalVisible = _state.isNewEventModalVisible,\n          isImportModalVisible = _state.isImportModalVisible,\n          isNewCalendarIdValid = _state.isNewCalendarIdValid,\n          formCalendarId = _state.formCalendarId,\n          description = _state.description,\n          groupIdOptions = _state.groupIdOptions,\n          jobIdOptions = _state.jobIdOptions,\n          saving = _state.saving,\n          selectedCalendar = _state.selectedCalendar,\n          selectedJobOptions = _state.selectedJobOptions,\n          selectedGroupOptions = _state.selectedGroupOptions;\n\n\n      var modal = '';\n\n      if (isNewEventModalVisible) {\n        modal = _react2.default.createElement(\n          _eui.EuiOverlayMask,\n          null,\n          _react2.default.createElement(_new_event_modal.NewEventModal, {\n            addEvent: this.addEvent,\n            closeModal: this.closeNewEventModal\n          })\n        );\n      } else if (isImportModalVisible) {\n        modal = _react2.default.createElement(\n          _eui.EuiOverlayMask,\n          null,\n          _react2.default.createElement(_import_modal.ImportModal, {\n            addImportedEvents: this.addImportedEvents,\n            closeImportModal: this.closeImportModal\n          })\n        );\n      }\n\n      return _react2.default.createElement(\n        _eui.EuiPage,\n        { className: 'mlCalendarEditForm' },\n        _react2.default.createElement(\n          _eui.EuiPageContent,\n          {\n            className: 'mlCalendarEditForm__content',\n            verticalPosition: 'center',\n            horizontalPosition: 'center'\n          },\n          _react2.default.createElement(_calendar_form.CalendarForm, {\n            calendarId: selectedCalendar ? selectedCalendar.calendar_id : formCalendarId,\n            canCreateCalendar: this.props.canCreateCalendar,\n            canDeleteCalendar: this.props.canDeleteCalendar,\n            description: selectedCalendar ? selectedCalendar.description : description,\n            eventsList: events,\n            groupIds: groupIdOptions,\n            isEdit: selectedCalendar !== undefined,\n            isNewCalendarIdValid: selectedCalendar || isNewCalendarIdValid === null ? true : isNewCalendarIdValid,\n            jobIds: jobIdOptions,\n            onCalendarIdChange: this.onCalendarIdChange,\n            onCreate: this.onCreate,\n            onDescriptionChange: this.onDescriptionChange,\n            onEdit: this.onEdit,\n            onEventDelete: this.onEventDelete,\n            onGroupSelection: this.onGroupSelection,\n            showImportModal: this.showImportModal,\n            onJobSelection: this.onJobSelection,\n            saving: saving,\n            selectedGroupOptions: selectedGroupOptions,\n            selectedJobOptions: selectedJobOptions,\n            onCreateGroupOption: this.onCreateGroupOption,\n            showNewEventModal: this.showNewEventModal\n          })\n        ),\n        modal\n      );\n    }\n  }]);\n\n  return NewCalendar;\n}(_react.Component), _class.propTypes = {\n  calendarId: _propTypes.PropTypes.string,\n  canCreateCalendar: _propTypes.PropTypes.bool.isRequired,\n  canDeleteCalendar: _propTypes.PropTypes.bool.isRequired\n}, _temp));",null]}