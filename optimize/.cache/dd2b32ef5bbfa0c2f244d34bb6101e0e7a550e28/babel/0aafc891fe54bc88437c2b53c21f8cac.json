{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/canvas_plugin_src/functions/common/filterrows.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/canvas_plugin_src/functions/common/filterrows.js","mtime":1567631711897},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nvar filterrows = exports.filterrows = function filterrows() {\n  return {\n    name: 'filterrows',\n    aliases: [],\n    type: 'datatable',\n    context: {\n      types: ['datatable']\n    },\n    help: 'Filter rows in a datatable based on the return value of a subexpression.',\n    args: {\n      fn: {\n        resolve: false,\n        aliases: ['_'],\n        types: ['boolean'],\n        help: 'An expression to pass each rows in the datatable into. The expression should return a boolean. ' + 'A true value will preserve the row, and a false value will remove it.'\n      }\n    },\n    fn: function fn(context, _ref) {\n      var fn = _ref.fn;\n\n      var checks = context.rows.map(function (row) {\n        return fn(_extends({}, context, {\n          rows: [row]\n        }));\n      });\n\n      return Promise.all(checks).then(function (results) {\n        return context.rows.filter(function (row, i) {\n          return results[i];\n        });\n      }).then(function (rows) {\n        return _extends({}, context, {\n          rows: rows\n        });\n      });\n    }\n  };\n};",null]}