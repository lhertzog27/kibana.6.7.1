{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/canvas_plugin_src/functions/common/repeatImage.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/canvas_plugin_src/functions/common/repeatImage.js","mtime":1567631711898},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.repeatImage = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /*\n                                                                                                                                                                                                                                                                   * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                   * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                   * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                   */\n\nvar _resolve_dataurl = require('../../../common/lib/resolve_dataurl');\n\nvar _elastic_outline = require('../../lib/elastic_outline');\n\nvar repeatImage = exports.repeatImage = function repeatImage() {\n  return {\n    name: 'repeatImage',\n    aliases: [],\n    type: 'render',\n    help: 'Configure a repeating image element',\n    context: {\n      types: ['number']\n    },\n    args: {\n      image: {\n        types: ['string', 'null'],\n        help: 'The image to repeat. Usually a dataURL or an asset',\n        default: _elastic_outline.elasticOutline\n      },\n      size: {\n        types: ['number'],\n        default: 100,\n        help: 'The maximum height or width of the image, in pixels. Eg, if you images is taller than it is wide, this will limit its height'\n      },\n      max: {\n        types: ['number', 'null'],\n        help: 'Maximum number of times the image may repeat',\n        default: 1000\n      },\n      emptyImage: {\n        types: ['string', 'null'],\n        help: 'Fill the difference between the input and the `max=` parameter with this image',\n        default: null\n      }\n    },\n    fn: function fn(count, args) {\n      return {\n        type: 'render',\n        as: 'repeatImage',\n        value: _extends({\n          count: Math.floor(count)\n        }, args, {\n          image: (0, _resolve_dataurl.resolveWithMissingImage)(args.image, _elastic_outline.elasticOutline),\n          emptyImage: (0, _resolve_dataurl.resolveWithMissingImage)(args.emptyImage)\n        })\n      };\n    }\n  };\n};",null]}