{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/canvas_plugin_src/functions/common/plot/index.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/canvas_plugin_src/functions/common/plot/index.js","mtime":1567631711898},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.plot = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /*\n                                                                                                                                                                                                                                                                   * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                   * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                   * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                   */\n\nvar _lodash = require('lodash.keyby');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _lodash3 = require('lodash');\n\nvar _get_colors_from_palette = require('../../../../common/lib/get_colors_from_palette');\n\nvar _get_legend_config = require('../../../../common/lib/get_legend_config');\n\nvar _get_flot_axis_config = require('./get_flot_axis_config');\n\nvar _get_font_spec = require('./get_font_spec');\n\nvar _series_style_to_flot = require('./series_style_to_flot');\n\nvar _get_tick_hash = require('./get_tick_hash');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar plot = exports.plot = function plot() {\n  return {\n    name: 'plot',\n    aliases: [],\n    type: 'render',\n    help: 'Configure a plot element',\n    context: {\n      types: ['pointseries']\n    },\n    args: {\n      seriesStyle: {\n        multi: true,\n        types: ['seriesStyle', 'null'],\n        help: 'A style of a specific series'\n      },\n      defaultStyle: {\n        multi: false,\n        types: ['seriesStyle'],\n        help: 'The default style to use for every series',\n        default: '{seriesStyle points=5}'\n      },\n      palette: {\n        types: ['palette'],\n        help: 'A palette object for describing the colors to use on this plot',\n        default: '{palette}'\n      },\n      font: {\n        types: ['style'],\n        help: 'Legend and tick mark fonts',\n        default: '{font}'\n      },\n      legend: {\n        types: ['string', 'boolean'],\n        help: 'Legend position, nw, sw, ne, se or false',\n        default: 'ne',\n        options: ['nw', 'sw', 'ne', 'se', false]\n      },\n      yaxis: {\n        types: ['boolean', 'axisConfig'],\n        help: 'Axis configuration, or false to disable',\n        default: true\n      },\n      xaxis: {\n        types: ['boolean', 'axisConfig'],\n        help: 'Axis configuration, or false to disable',\n        default: true\n      }\n    },\n    fn: function fn(context, args) {\n      var seriesStyles = (0, _lodash2.default)(args.seriesStyle || [], 'label') || {};\n      var sortedRows = (0, _lodash3.sortBy)(context.rows, ['x', 'y', 'color', 'size', 'text']);\n      var ticks = (0, _get_tick_hash.getTickHash)(context.columns, sortedRows);\n      var font = args.font ? (0, _get_font_spec.getFontSpec)(args.font) : {};\n\n      var data = (0, _lodash3.map)((0, _lodash3.groupBy)(sortedRows, 'color'), function (series, label) {\n        var seriesStyle = _extends({}, args.defaultStyle, seriesStyles[label]);\n        var flotStyle = seriesStyle ? (0, _series_style_to_flot.seriesStyleToFlot)(seriesStyle) : {};\n\n        return _extends({}, flotStyle, {\n          label: label,\n          data: series.map(function (point) {\n            var attrs = {};\n            var x = (0, _lodash3.get)(context.columns, 'x.type') === 'string' ? ticks.x.hash[point.x] : point.x;\n            var y = (0, _lodash3.get)(context.columns, 'y.type') === 'string' ? ticks.y.hash[point.y] : point.y;\n\n            if (point.size != null) {\n              attrs.size = point.size;\n            } else if ((0, _lodash3.get)(seriesStyle, 'points')) {\n              attrs.size = seriesStyle.points;\n              (0, _lodash3.set)(flotStyle, 'bubbles.size.min', seriesStyle.points);\n            }\n\n            if (point.text != null) {\n              attrs.text = point.text;\n            }\n\n            return [x, y, attrs];\n          })\n        });\n      });\n\n      var gridConfig = {\n        borderWidth: 0,\n        borderColor: null,\n        color: 'rgba(0,0,0,0)',\n        labelMargin: 30,\n        margin: {\n          right: 30,\n          top: 20,\n          bottom: 0,\n          left: 0\n        }\n      };\n\n      var result = {\n        type: 'render',\n        as: 'plot',\n        value: {\n          font: args.font,\n          data: (0, _lodash3.sortBy)(data, 'label'),\n          options: {\n            canvas: false,\n            colors: (0, _get_colors_from_palette.getColorsFromPalette)(args.palette, data.length),\n            legend: (0, _get_legend_config.getLegendConfig)(args.legend, data.length),\n            grid: gridConfig,\n            xaxis: (0, _get_flot_axis_config.getFlotAxisConfig)('x', args.xaxis, {\n              columns: context.columns,\n              ticks: ticks,\n              font: font\n            }),\n            yaxis: (0, _get_flot_axis_config.getFlotAxisConfig)('y', args.yaxis, {\n              columns: context.columns,\n              ticks: ticks,\n              font: font\n            }),\n            series: _extends({\n              shadowSize: 0\n            }, (0, _series_style_to_flot.seriesStyleToFlot)(args.defaultStyle))\n          }\n        }\n      };\n\n      // fix the issue of plot sometimes re-rendering with an empty chart\n      // TODO: holy hell, why does this work?! the working theory is that some values become undefined\n      // and serializing the result here causes them to be dropped off, and this makes flot react differently.\n      // It's also possible that something else ends up mutating this object, but that seems less likely.\n      return JSON.parse(JSON.stringify(result));\n    }\n  };\n};",null]}