{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/public/state/middleware/es_persist.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/public/state/middleware/es_persist.js","mtime":1567631711935},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.esPersistMiddleware = undefined;\n\nvar _lodash = require('lodash');\n\nvar _workpad = require('../selectors/workpad');\n\nvar _assets = require('../selectors/assets');\n\nvar _workpad2 = require('../actions/workpad');\n\nvar _assets2 = require('../actions/assets');\n\nvar _transient = require('../actions/transient');\n\nvar transientActions = _interopRequireWildcard(_transient);\n\nvar _resolved_args = require('../actions/resolved_args');\n\nvar resolvedArgsActions = _interopRequireWildcard(_resolved_args);\n\nvar _workpad_service = require('../../lib/workpad_service');\n\nvar _notify = require('../../lib/notify');\n\nvar _app = require('../selectors/app');\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } } /*\n                                                                                                                                                                                                     * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                     * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                     * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                     */\n\nvar workpadChanged = function workpadChanged(before, after) {\n  var workpad = (0, _workpad.getWorkpad)(before);\n  return (0, _workpad.getWorkpad)(after) !== workpad;\n};\n\nvar assetsChanged = function assetsChanged(before, after) {\n  var assets = (0, _assets.getAssetIds)(before);\n  return !(0, _lodash.isEqual)(assets, (0, _assets.getAssetIds)(after));\n};\n\nvar esPersistMiddleware = exports.esPersistMiddleware = function esPersistMiddleware(_ref) {\n  var getState = _ref.getState;\n\n  // these are the actions we don't want to trigger a persist call\n  var skippedActions = [_workpad2.setWorkpad, // used for loading and creating workpads\n  _assets2.setAssets, // used when loading assets\n  _assets2.resetAssets, // used when creating new workpads\n  _workpad2.setRefreshInterval].concat(_toConsumableArray(Object.values(resolvedArgsActions)), _toConsumableArray(Object.values(transientActions))).map(function (a) {\n    return a.toString();\n  });\n\n  return function (next) {\n    return function (action) {\n      // if the action is in the skipped list, do not persist\n      if (skippedActions.indexOf(action.type) >= 0) {\n        return next(action);\n      }\n\n      // capture state before and after the action\n      var curState = getState();\n      next(action);\n      var newState = getState();\n\n      // skips the update request if user doesn't have write permissions\n      if (!(0, _app.canUserWrite)(newState)) {\n        return;\n      }\n\n      var notifyError = function notifyError(err) {\n        var statusCode = err.response && err.response.status;\n        switch (statusCode) {\n          case 400:\n            return _notify.notify.error(err.response, {\n              title: 'Couldn\\'t save your changes to Elasticsearch'\n            });\n          case 413:\n            return _notify.notify.error('The server gave a response that the workpad data was too large. This\\n              usually means uploaded image assets that are too large for Kibana or\\n              a proxy. Try removing some assets in the asset manager.', {\n              title: 'Couldn\\'t save your changes to Elasticsearch'\n            });\n          default:\n            return _notify.notify.error(err, {\n              title: 'Couldn\\'t update workpad'\n            });\n        }\n      };\n\n      var changedWorkpad = workpadChanged(curState, newState);\n      var changedAssets = assetsChanged(curState, newState);\n\n      if (changedWorkpad && changedAssets) {\n        // if both the workpad and the assets changed, save it in its entirety to elasticsearch\n        var persistedWorkpad = (0, _workpad.getFullWorkpadPersisted)(getState());\n        return (0, _workpad_service.update)(persistedWorkpad.id, persistedWorkpad).catch(notifyError);\n      } else if (changedWorkpad) {\n        // if the workpad changed, save it to elasticsearch\n        var _persistedWorkpad = (0, _workpad.getWorkpadPersisted)(getState());\n        return (0, _workpad_service.updateWorkpad)(_persistedWorkpad.id, _persistedWorkpad).catch(notifyError);\n      } else if (changedAssets) {\n        // if the assets changed, save it to elasticsearch\n        var _persistedWorkpad2 = (0, _workpad.getFullWorkpadPersisted)(getState());\n        return (0, _workpad_service.updateAssets)(_persistedWorkpad2.id, _persistedWorkpad2.assets).catch(notifyError);\n      }\n    };\n  };\n};",null]}