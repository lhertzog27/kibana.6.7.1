{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/ui/public/courier/search_request_queue/search_request_queue.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/courier/search_request_queue/search_request_queue.js","mtime":1567631711714},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nvar SearchRequestQueue = function () {\n  function SearchRequestQueue() {\n    _classCallCheck(this, SearchRequestQueue);\n\n    // Queue of pending requests, requests are removed as they are processed by fetch.[sourceType]().\n    this._searchRequests = [];\n  }\n\n  _createClass(SearchRequestQueue, [{\n    key: \"getCount\",\n    value: function getCount() {\n      return this._searchRequests.length;\n    }\n  }, {\n    key: \"add\",\n    value: function add(searchRequest) {\n      this._searchRequests.push(searchRequest);\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(searchRequest) {\n      // Remove all matching search requests.\n      this._searchRequests = this._searchRequests.filter(function (existingSearchRequest) {\n        return existingSearchRequest !== searchRequest;\n      });\n    }\n  }, {\n    key: \"removeAll\",\n    value: function removeAll() {\n      this._searchRequests.length = 0;\n    }\n  }, {\n    key: \"abortAll\",\n    value: function abortAll() {\n      this._searchRequests.forEach(function (searchRequest) {\n        return searchRequest.abort();\n      });\n    }\n  }, {\n    key: \"getAll\",\n    value: function getAll() {\n      return this._searchRequests;\n    }\n  }, {\n    key: \"getSearchRequestAt\",\n    value: function getSearchRequestAt(index) {\n      return this._searchRequests[index];\n    }\n  }, {\n    key: \"getInactive\",\n    value: function getInactive() {\n      return this._searchRequests.filter(function (searchRequest) {\n        return !searchRequest.started;\n      });\n    }\n  }, {\n    key: \"getStartable\",\n    value: function getStartable() {\n      return this._searchRequests.filter(function (searchRequest) {\n        return searchRequest.canStart();\n      });\n    }\n  }, {\n    key: \"getPending\",\n    value: function getPending() {\n      return this._searchRequests.filter(function (searchRequest) {\n        return searchRequest.isFetchRequestedAndPending();\n      });\n    }\n  }]);\n\n  return SearchRequestQueue;\n}();\n\nvar searchRequestQueue = exports.searchRequestQueue = new SearchRequestQueue();",null]}