{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/jobs/jobs_list/components/job_details/forecasts_table/forecasts_table.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/jobs/jobs_list/components/job_details/forecasts_table/forecasts_table.js","mtime":1567631712049},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ForecastsTable = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _risonNode = require('rison-node');\n\nvar _risonNode2 = _interopRequireDefault(_risonNode);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _eui = require('@elastic/eui');\n\nvar _format = require('@elastic/eui/lib/services/format');\n\nvar _chrome = require('ui/chrome');\n\nvar _chrome2 = _interopRequireDefault(_chrome);\n\nvar _states = require('plugins/ml/../common/constants/states');\n\nvar _recently_accessed = require('plugins/ml/util/recently_accessed');\n\nvar _forecast_service = require('plugins/ml/services/forecast_service');\n\nvar _react3 = require('@kbn/i18n/react');\n\nvar _job_utils = require('../../../../../../common/util/job_utils');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\nvar MAX_FORECASTS = 500;\nvar TIME_FORMAT = 'YYYY-MM-DD HH:mm:ss';\n\n/**\n * Table component for rendering the lists of forecasts run on an ML job.\n */\n\nvar ForecastsTableUI = function (_Component) {\n  _inherits(ForecastsTableUI, _Component);\n\n  function ForecastsTableUI(props) {\n    _classCallCheck(this, ForecastsTableUI);\n\n    var _this = _possibleConstructorReturn(this, (ForecastsTableUI.__proto__ || Object.getPrototypeOf(ForecastsTableUI)).call(this, props));\n\n    _this.state = {\n      isLoading: props.job.data_counts.processed_record_count !== 0,\n      forecasts: []\n    };\n    return _this;\n  }\n\n  _createClass(ForecastsTableUI, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var dataCounts = this.props.job.data_counts;\n      if (dataCounts.processed_record_count > 0) {\n        // Get the list of all the forecasts with results at or later than the specified 'from' time.\n        _forecast_service.mlForecastService.getForecastsSummary(this.props.job, null, dataCounts.earliest_record_timestamp, MAX_FORECASTS).then(function (resp) {\n          _this2.setState({\n            isLoading: false,\n            forecasts: resp.forecasts\n          });\n        }).catch(function (resp) {\n          console.log('Error loading list of forecasts for jobs list:', resp);\n          _this2.setState({\n            isLoading: false,\n            errorMessage: _this2.props.intl.formatMessage({\n              id: 'xpack.ml.jobsList.jobDetails.forecastsTable.loadingErrorMessage',\n              defaultMessage: 'Error loading the list of forecasts run on this job'\n            }),\n            forecasts: []\n          });\n        });\n      }\n    }\n  }, {\n    key: 'openSingleMetricView',\n    value: function openSingleMetricView(forecast) {\n      // Creates the link to the Single Metric Viewer.\n      // Set the total time range from the start of the job data to the end of the forecast,\n      var dataCounts = this.props.job.data_counts;\n      var jobEarliest = dataCounts.earliest_record_timestamp;\n      var from = new Date(dataCounts.earliest_record_timestamp).toISOString();\n      var to = forecast !== undefined ? new Date(forecast.forecast_end_timestamp).toISOString() : new Date(dataCounts.latest_record_timestamp).toISOString();\n\n      var _g = _risonNode2.default.encode({\n        ml: {\n          jobIds: [this.props.job.job_id]\n        },\n        refreshInterval: {\n          display: 'Off',\n          pause: false,\n          value: 0\n        },\n        time: {\n          from: from,\n          to: to,\n          mode: 'absolute'\n        }\n      });\n\n      var appState = {\n        filters: [],\n        query: {\n          query_string: {\n            analyze_wildcard: true,\n            query: '*'\n          }\n        }\n      };\n\n      if (forecast !== undefined) {\n        // Set the zoom to show duration before the forecast equal to the length of the forecast.\n        var forecastDurationMs = forecast.forecast_end_timestamp - forecast.forecast_start_timestamp;\n        var zoomFrom = Math.max(forecast.forecast_start_timestamp - forecastDurationMs, jobEarliest);\n\n        appState.mlTimeSeriesExplorer = {\n          forecastId: forecast.forecast_id,\n          zoom: {\n            from: new Date(zoomFrom).toISOString(),\n            to: new Date(forecast.forecast_end_timestamp).toISOString()\n          }\n        };\n      }\n\n      var _a = _risonNode2.default.encode(appState);\n\n      var url = '?_g=' + _g + '&_a=' + _a;\n      (0, _recently_accessed.addItemToRecentlyAccessed)('timeseriesexplorer', this.props.job.job_id, url);\n      window.open(_chrome2.default.getBasePath() + '/app/ml#/timeseriesexplorer' + url, '_self');\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this3 = this;\n\n      if (this.state.isLoading === true) {\n        return _react2.default.createElement(\n          _eui.EuiFlexGroup,\n          { justifyContent: 'spaceAround' },\n          _react2.default.createElement(\n            _eui.EuiFlexItem,\n            { grow: false },\n            _react2.default.createElement(_eui.EuiLoadingSpinner, { size: 'l' })\n          )\n        );\n      }\n\n      if (this.state.errorMessage !== undefined) {\n        return _react2.default.createElement(_eui.EuiCallOut, {\n          title: this.state.errorMessage,\n          color: 'danger',\n          iconType: 'cross'\n        });\n      }\n\n      var forecasts = this.state.forecasts;\n\n      if (forecasts.length === 0) {\n        return _react2.default.createElement(\n          _eui.EuiCallOut,\n          {\n            title: _react2.default.createElement(_react3.FormattedMessage, {\n              id: 'xpack.ml.jobsList.jobDetails.forecastsTable.noForecastsTitle',\n              defaultMessage: 'No forecasts have been run for this job'\n            }),\n            iconType: 'iInCircle'\n          },\n          (0, _job_utils.isTimeSeriesViewJob)(this.props.job) && _react2.default.createElement(\n            'p',\n            null,\n            _react2.default.createElement(_react3.FormattedMessage, {\n              id: 'xpack.ml.jobsList.jobDetails.forecastsTable.noForecastsDescription',\n              defaultMessage: 'To run a forecast, open the {singleMetricViewerLink}',\n              values: {\n                singleMetricViewerLink: _react2.default.createElement(\n                  _eui.EuiLink,\n                  { onClick: function onClick() {\n                      return _this3.openSingleMetricView();\n                    } },\n                  _react2.default.createElement(_react3.FormattedMessage, {\n                    id: 'xpack.ml.jobsList.jobDetails.forecastsTable.noForecastsDescription.linkText',\n                    defaultMessage: 'Single Metric Viewer'\n                  })\n                )\n              }\n            })\n          )\n        );\n      }\n\n      var intl = this.props.intl;\n\n\n      var columns = [{\n        field: 'forecast_create_timestamp',\n        name: intl.formatMessage({\n          id: 'xpack.ml.jobsList.jobDetails.forecastsTable.createdLabel',\n          defaultMessage: 'Created'\n        }),\n        dataType: 'date',\n        render: function render(date) {\n          return (0, _format.formatDate)(date, TIME_FORMAT);\n        },\n        textOnly: true,\n        sortable: true\n      }, {\n        field: 'forecast_start_timestamp',\n        name: intl.formatMessage({\n          id: 'xpack.ml.jobsList.jobDetails.forecastsTable.fromLabel',\n          defaultMessage: 'From'\n        }),\n        dataType: 'date',\n        render: function render(date) {\n          return (0, _format.formatDate)(date, TIME_FORMAT);\n        },\n        textOnly: true,\n        sortable: true\n      }, {\n        field: 'forecast_end_timestamp',\n        name: intl.formatMessage({\n          id: 'xpack.ml.jobsList.jobDetails.forecastsTable.toLabel',\n          defaultMessage: 'To'\n        }),\n        dataType: 'date',\n        render: function render(date) {\n          return (0, _format.formatDate)(date, TIME_FORMAT);\n        },\n        textOnly: true,\n        sortable: true\n      }, {\n        field: 'forecast_status',\n        name: intl.formatMessage({\n          id: 'xpack.ml.jobsList.jobDetails.forecastsTable.statusLabel',\n          defaultMessage: 'Status'\n        }),\n        sortable: true\n      }, {\n        field: 'forecast_memory_bytes',\n        name: intl.formatMessage({\n          id: 'xpack.ml.jobsList.jobDetails.forecastsTable.memorySizeLabel',\n          defaultMessage: 'Memory size'\n        }),\n        render: function render(bytes) {\n          return (0, _format.formatNumber)(bytes, '0b');\n        },\n        sortable: true\n      }, {\n        field: 'processing_time_ms',\n        name: intl.formatMessage({\n          id: 'xpack.ml.jobsList.jobDetails.forecastsTable.processingTimeLabel',\n          defaultMessage: 'Processing time'\n        }),\n        render: function render(ms) {\n          return intl.formatMessage({\n            id: 'xpack.ml.jobsList.jobDetails.forecastsTable.msTimeUnitLabel',\n            defaultMessage: '{ms} ms' }, {\n            ms: ms\n          });\n        },\n        sortable: true\n      }, {\n        field: 'forecast_expiry_timestamp',\n        name: intl.formatMessage({\n          id: 'xpack.ml.jobsList.jobDetails.forecastsTable.expiresLabel',\n          defaultMessage: 'Expires'\n        }),\n        render: function render(date) {\n          return (0, _format.formatDate)(date, TIME_FORMAT);\n        },\n        textOnly: true,\n        sortable: true\n      }, {\n        field: 'forecast_messages',\n        name: intl.formatMessage({\n          id: 'xpack.ml.jobsList.jobDetails.forecastsTable.messagesLabel',\n          defaultMessage: 'Messages'\n        }),\n        sortable: false,\n        render: function render(messages) {\n          return _react2.default.createElement(\n            'div',\n            null,\n            messages.map(function (message, index) {\n              return _react2.default.createElement(\n                'p',\n                { key: index },\n                message\n              );\n            })\n          );\n        },\n        textOnly: true\n      }, {\n        name: intl.formatMessage({\n          id: 'xpack.ml.jobsList.jobDetails.forecastsTable.viewLabel',\n          defaultMessage: 'View'\n        }),\n        render: function render(forecast) {\n          return _react2.default.createElement(\n            _eui.EuiButton,\n            {\n              onClick: function onClick() {\n                return _this3.openSingleMetricView(forecast);\n              },\n              className: 'view-forecast-btn',\n              isDisabled: forecast.forecast_status !== _states.FORECAST_REQUEST_STATE.FINISHED\n            },\n            _react2.default.createElement('i', { 'aria-hidden': 'true', className: 'fa fa-line-chart' })\n          );\n        }\n      }];\n\n      return _react2.default.createElement(_eui.EuiInMemoryTable, {\n        className: 'forecasts-table',\n        items: forecasts,\n        columns: columns,\n        pagination: {\n          pageSizeOptions: [5, 10, 25]\n        },\n        sorting: true\n      });\n    }\n  }]);\n\n  return ForecastsTableUI;\n}(_react.Component);\n\nForecastsTableUI.propTypes = {\n  job: _propTypes2.default.object.isRequired\n};\n\nvar ForecastsTable = (0, _react3.injectI18n)(ForecastsTableUI);\n\nexports.ForecastsTable = ForecastsTable;",null]}