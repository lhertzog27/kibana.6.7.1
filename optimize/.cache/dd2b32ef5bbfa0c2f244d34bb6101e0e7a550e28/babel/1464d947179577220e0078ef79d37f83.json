{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/canvas_plugin_src/functions/common/pie.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/canvas_plugin_src/functions/common/pie.js","mtime":1567631711898},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.pie = undefined;\n\nvar _lodash = require('lodash.keyby');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _lodash3 = require('lodash');\n\nvar _get_colors_from_palette = require('../../../common/lib/get_colors_from_palette');\n\nvar _get_legend_config = require('../../../common/lib/get_legend_config');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nvar pie = exports.pie = function pie() {\n  return {\n    name: 'pie',\n    aliases: [],\n    type: 'render',\n    help: 'Configure a pie chart element',\n    context: {\n      types: ['pointseries']\n    },\n    args: {\n      palette: {\n        types: ['palette', 'null'],\n        help: 'A palette object for describing the colors to use on this pie',\n        default: '{palette}'\n      },\n      seriesStyle: {\n        multi: true,\n        types: ['seriesStyle', 'null'],\n        help: 'A style of a specific series'\n      },\n      radius: {\n        type: ['string', 'number'],\n        help: 'Radius of the pie as a percentage (between 0 and 1) of the available space. Set to \\'auto\\' to automatically set radius',\n        default: 'auto'\n      },\n      hole: {\n        types: ['number'],\n        default: 0,\n        help: 'Draw a hole in the pie, 0-100, as a percentage of the pie radius'\n      },\n      labels: {\n        types: ['boolean'],\n        default: true,\n        help: 'Show pie labels',\n        options: [true, false]\n      },\n      labelRadius: {\n        types: ['number'],\n        default: 100,\n        help: 'Percentage of area of container to use as radius for the label circle'\n      },\n      font: {\n        types: ['style'],\n        help: 'Label font',\n        default: '{font}'\n      },\n      legend: {\n        types: ['string', 'boolean'],\n        help: 'Legend position, nw, sw, ne, se or false',\n        default: false,\n        options: ['nw', 'sw', 'ne', 'se', false]\n      },\n      tilt: {\n        types: ['number'],\n        default: 1,\n        help: 'Percentage of tilt where 1 is fully vertical and 0 is completely flat'\n      }\n    },\n    fn: function fn(context, args) {\n      var seriesStyles = (0, _lodash2.default)(args.seriesStyle || [], 'label') || {};\n\n      var data = (0, _lodash3.map)((0, _lodash3.groupBy)(context.rows, 'color'), function (series, label) {\n        var item = {\n          label: label,\n          data: series.map(function (point) {\n            return point.size || 1;\n          })\n        };\n\n        var seriesStyle = seriesStyles[label];\n\n        // append series style, if there is a match\n        if (seriesStyle) {\n          item.color = (0, _lodash3.get)(seriesStyle, 'color');\n        }\n\n        return item;\n      });\n\n      return {\n        type: 'render',\n        as: 'pie',\n        value: {\n          font: args.font,\n          data: data,\n          options: {\n            canvas: false,\n            colors: (0, _get_colors_from_palette.getColorsFromPalette)(args.palette, data.length),\n            legend: (0, _get_legend_config.getLegendConfig)(args.legend, data.length),\n            grid: {\n              show: false\n            },\n            series: {\n              pie: {\n                show: true,\n                innerRadius: Math.max(args.hole, 0) / 100,\n                stroke: {\n                  width: 0\n                },\n                label: {\n                  show: args.labels,\n                  radius: (args.labelRadius >= 0 ? args.labelRadius : 100) / 100\n                },\n                tilt: args.tilt,\n                radius: args.radius\n              },\n              bubbles: {\n                show: false\n              },\n              shadowSize: 0\n            }\n          }\n        }\n      };\n    }\n  };\n};",null]}