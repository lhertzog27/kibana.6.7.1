{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/watcher/public/components/index_select/index_select.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/watcher/public/components/index_select/index_select.js","mtime":1567631712338},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _lodash = require('lodash');\n\nrequire('plugins/watcher/services/indices');\n\nvar _compat = require('ui/compat');\n\nvar _modules = require('ui/modules');\n\nvar _index_select = require('./index_select.html');\n\nvar _index_select2 = _interopRequireDefault(_index_select);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } } /*\n                                                                                                                                                                                                     * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                     * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                     * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                     */\n\nfunction mapIndex(indexName) {\n  var isFromIndexPattern = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var isUserEntered = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  return { indexName: indexName, isFromIndexPattern: isFromIndexPattern, isUserEntered: isUserEntered };\n}\n\nfunction collapseIndices(allIndices, allIndexPatterns) {\n  var indices = (0, _lodash.map)(allIndices, function (indexName) {\n    return mapIndex(indexName, false);\n  });\n  var indexPatterns = (0, _lodash.map)(allIndexPatterns, function (indexName) {\n    return mapIndex(indexName, true);\n  });\n  indices.push.apply(indices, _toConsumableArray(indexPatterns));\n  return indices;\n}\n\nvar INDICES_FROM_INDEX_PATTERNS_HEADER_COPY = 'Based on your index patterns';\nvar INDICES_FOR_CREATION_HEADER_COPY = 'Choose...';\nvar INDICES_FROM_INDICES_HEADER_COPY = 'Based on your indices and aliases';\n\nvar app = _modules.uiModules.get('xpack/watcher');\n\napp.directive('indexSelect', function ($injector) {\n  var indicesService = $injector.get('xpackWatcherIndicesService');\n  var indexPatternsService = $injector.get('indexPatterns');\n  var $timeout = $injector.get('$timeout');\n\n  return {\n    restrict: 'E',\n    template: _index_select2.default,\n    scope: {\n      index: '=',\n      onChange: '=',\n      onTouched: '='\n    },\n    controllerAs: 'indexSelect',\n    bindToController: true,\n    link: function link($scope, $ele) {\n      var $searchBox = $ele.find('input[type=\"search\"]');\n      $scope.indexSelect.$searchBox = $searchBox;\n\n      $searchBox.attr('id', 'indexSelectSearchBox');\n    },\n    controller: function (_InitAfterBindingsWor) {\n      _inherits(IndexSelectController, _InitAfterBindingsWor);\n\n      function IndexSelectController() {\n        _classCallCheck(this, IndexSelectController);\n\n        return _possibleConstructorReturn(this, (IndexSelectController.__proto__ || Object.getPrototypeOf(IndexSelectController)).apply(this, arguments));\n      }\n\n      _createClass(IndexSelectController, [{\n        key: 'initAfterBindings',\n        value: function initAfterBindings($scope) {\n          var _this2 = this;\n\n          this.$scope = $scope;\n          this.indexPattern = undefined;\n          this.fetchingWithNoIndices = true;\n          this.selectedIndices = [];\n          this.fetchedIndices = [];\n\n          if (Boolean(this.index)) {\n            if (Array.isArray(this.index)) {\n              var _selectedIndices;\n\n              (_selectedIndices = this.selectedIndices).push.apply(_selectedIndices, _toConsumableArray(this.index.map(mapIndex)));\n            } else {\n              this.selectedIndices.push(mapIndex(this.index));\n            }\n          }\n\n          if (this.onTouched) {\n            $timeout(function () {\n              _this2.$searchBox.on('blur', function () {\n                $scope.$apply(_this2.onTouched);\n              });\n            });\n            $scope.$on('$destroy', function () {\n              _this2.$searchBox.off('blur');\n            });\n          }\n\n          $scope.$watch('indexSelect.index', function () {\n            $timeout(function () {\n              // Hack that forces the ui-select to resize itself\n              $scope.$$childHead.$select.sizeSearchInput();\n            }, 100);\n          });\n        }\n      }, {\n        key: 'onIndicesChanged',\n\n\n        /**\n         * This method powers the `on-select` and `on-remove` within ui-select\n         * to handle when an index is added or removed from the list\n         */\n        value: function onIndicesChanged() {\n          var indexNames = (0, _lodash.pluck)(this.selectedIndices, 'indexName');\n          this.onChange(indexNames);\n        }\n\n        /**\n         * This method powers the `tagging` within ui-select to format\n         * a search query that has no results into a valid result so it\n         * can be selected\n         *\n         * @param {object} item\n         */\n\n      }, {\n        key: 'onNewItem',\n        value: function onNewItem(unmatchedIndexPattern) {\n          return mapIndex(unmatchedIndexPattern);\n        }\n\n        /**\n         * This method powers the `group-by` within ui-select to group\n         * our indices array based on the source\n         *\n         * @param {object} index\n         */\n\n      }, {\n        key: 'groupIndices',\n        value: function groupIndices(index) {\n          if (index.isFromIndexPattern) {\n            return INDICES_FROM_INDEX_PATTERNS_HEADER_COPY;\n          }\n\n          if (index.isUserEntered) {\n            return INDICES_FOR_CREATION_HEADER_COPY;\n          }\n\n          return INDICES_FROM_INDICES_HEADER_COPY;\n        }\n\n        /**\n         * This method powers the `group-filter` within ui-select to allow\n         * us to sort the grouped object so we can control which group\n         * is shown first\n         *\n         * @param {object} grouped\n         */\n\n      }, {\n        key: 'sortGroupedIndices',\n        value: function sortGroupedIndices(grouped) {\n          return (0, _lodash.sortBy)(grouped, function (group) {\n            return group.name;\n          });\n        }\n\n        /**\n         * This method powers the `uis-open-close` within ui-select to ensure\n         * we reset the search state once the dropdown is closed. The default\n         * behavior of ui-select is to clear the input field when the dropdown\n         * is closed and if we fail to reset the search state at the same time\n         * it will lead to a poor UX.\n         *\n         * @param {bool} isOpen\n         */\n\n      }, {\n        key: 'onDropdownToggled',\n        value: function onDropdownToggled(isOpen) {\n          if (!isOpen) {\n            this.reset();\n          }\n        }\n\n        /**\n         * Resets the search state so we have no stored query or results\n         */\n\n      }, {\n        key: 'reset',\n        value: function reset() {\n          this.fetchedIndices.length = 0;\n          this.indexPattern = undefined;\n        }\n\n        /**\n         * This powers the `refresh` within ui-select which is called\n         * as a way to async fetch results based on the typed in query\n         *\n         * @param {string} indexPattern\n         */\n\n      }, {\n        key: 'fetchIndices',\n        value: function fetchIndices(indexPattern) {\n          var _this3 = this;\n\n          if (!Boolean(indexPattern)) {\n            this.reset();\n            return;\n          }\n\n          // Store this so we can display it if there are no matches\n          this.indexPattern = indexPattern;\n\n          var pattern = indexPattern;\n\n          // Use wildcards religiously to ensure partial matches\n          if (!(0, _lodash.endsWith)(pattern, '*')) {\n            pattern += '*';\n          }\n          if (!(0, _lodash.startsWith)(pattern, '*')) {\n            pattern = '*' + pattern;\n          }\n\n          var promises = [indicesService.getMatchingIndices(pattern), indexPatternsService.getTitles()];\n\n          if (this.fetchedIndices.length === 0) {\n            this.fetchingWithNoIndices = true;\n          }\n\n          Promise.all(promises).then(function (_ref) {\n            var _ref2 = _slicedToArray(_ref, 2),\n                allIndices = _ref2[0],\n                allIndexPatterns = _ref2[1];\n\n            var indices = collapseIndices(allIndices, allIndexPatterns);\n            _this3.fetchedIndices = (0, _lodash.sortBy)(indices, 'indexName');\n            _this3.fetchedIndices.push(mapIndex(_this3.indexPattern, false, true));\n            _this3.fetchingWithNoIndices = false;\n            _this3.$scope.$apply();\n          });\n        }\n      }, {\n        key: 'hasIndexPattern',\n        get: function get() {\n          return Boolean(this.indexPattern);\n        }\n      }]);\n\n      return IndexSelectController;\n    }(_compat.InitAfterBindingsWorkaround)\n  };\n});",null]}