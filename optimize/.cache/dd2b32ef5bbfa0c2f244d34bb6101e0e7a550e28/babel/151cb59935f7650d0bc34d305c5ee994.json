{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/index_management/public/sections/index_list/components/index_actions_context_menu/index_actions_context_menu.container.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/index_management/public/sections/index_list/components/index_actions_context_menu/index_actions_context_menu.container.js","mtime":1567631711972},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.IndexActionsContextMenu = undefined;\n\nvar _reactRedux = require('react-redux');\n\nvar _index_actions_context_menu = require('./index_actions_context_menu');\n\nvar _actions = require('../../../../store/actions');\n\nvar _selectors = require('../../../../store/selectors');\n\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nvar mapStateToProps = function mapStateToProps(state, ownProps) {\n  var indexStatusByName = {};\n  var indexNames = ownProps.indexNames;\n\n  indexNames.forEach(function (indexName) {\n    indexStatusByName[indexName] = (0, _selectors.getIndexStatusByIndexName)(state, indexName);\n  });\n  return {\n    indexStatusByName: indexStatusByName,\n    indices: (0, _selectors.getIndicesByName)(state, indexNames)\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch, _ref) {\n  var indexNames = _ref.indexNames;\n\n  return {\n    editIndexSettings: function editIndexSettings() {\n      dispatch((0, _actions.editIndexSettings)({ indexName: indexNames[0] }));\n    },\n    clearCacheIndices: function clearCacheIndices() {\n      dispatch((0, _actions.clearCacheIndices)({ indexNames: indexNames }));\n    },\n    closeIndices: function closeIndices() {\n      dispatch((0, _actions.closeIndices)({ indexNames: indexNames }));\n    },\n    flushIndices: function flushIndices() {\n      dispatch((0, _actions.flushIndices)({ indexNames: indexNames }));\n    },\n    openIndices: function openIndices() {\n      dispatch((0, _actions.openIndices)({ indexNames: indexNames }));\n    },\n    refreshIndices: function refreshIndices() {\n      dispatch((0, _actions.refreshIndices)({ indexNames: indexNames }));\n    },\n    freezeIndices: function freezeIndices() {\n      dispatch((0, _actions.freezeIndices)({ indexNames: indexNames }));\n    },\n    unfreezeIndices: function unfreezeIndices() {\n      dispatch((0, _actions.unfreezeIndices)({ indexNames: indexNames }));\n    },\n    forcemergeIndices: function forcemergeIndices(maxNumSegments) {\n      dispatch((0, _actions.forcemergeIndices)({ indexNames: indexNames, maxNumSegments: maxNumSegments }));\n    },\n    showSettings: function showSettings() {\n      dispatch((0, _actions.openDetailPanel)({ indexName: indexNames[0], panelType: 'Settings' }));\n    },\n    showMapping: function showMapping() {\n      dispatch((0, _actions.openDetailPanel)({ indexName: indexNames[0], panelType: 'Mapping' }));\n    },\n    showStats: function showStats() {\n      dispatch((0, _actions.openDetailPanel)({ indexName: indexNames[0], panelType: 'Stats' }));\n    },\n    editIndex: function editIndex() {\n      var indexName = indexNames ? indexNames[0] : null;\n      if (indexName) {\n        dispatch((0, _actions.openDetailPanel)({ indexName: indexName, panelType: 'Edit settings' }));\n      }\n    },\n    deleteIndices: function deleteIndices() {\n      dispatch((0, _actions.deleteIndices)({ indexNames: indexNames }));\n    },\n    reloadIndices: function reloadIndices() {\n      dispatch((0, _actions.reloadIndices)(indexNames));\n    },\n    performExtensionAction: function performExtensionAction(requestMethod, successMessage) {\n      dispatch((0, _actions.performExtensionAction)({ requestMethod: requestMethod, successMessage: successMessage, indexNames: indexNames }));\n    }\n  };\n};\n\nvar IndexActionsContextMenu = exports.IndexActionsContextMenu = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(_index_actions_context_menu.IndexActionsContextMenu);",null]}