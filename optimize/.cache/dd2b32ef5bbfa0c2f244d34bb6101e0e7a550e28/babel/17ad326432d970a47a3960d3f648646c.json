{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/common/util/anomaly_utils.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/common/util/anomaly_utils.js","mtime":1567631712025},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.aggregationTypeTransform = undefined;\nexports.getSeverity = getSeverity;\nexports.getSeverityWithLow = getSeverityWithLow;\nexports.getSeverityColor = getSeverityColor;\nexports.getMultiBucketImpactLabel = getMultiBucketImpactLabel;\nexports.getEntityFieldName = getEntityFieldName;\nexports.getEntityFieldValue = getEntityFieldValue;\nexports.showActualForFunction = showActualForFunction;\nexports.showTypicalForFunction = showTypicalForFunction;\nexports.isRuleSupported = isRuleSupported;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _i18n = require('@kbn/i18n');\n\nvar _detector_rule = require('../constants/detector_rule');\n\nvar _multi_bucket_impact = require('../constants/multi_bucket_impact');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// List of function descriptions for which actual values from record level results should be displayed.\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\n/*\n* Contains functions for operations commonly performed on anomaly data\n* to extract information for display in dashboards.\n*/\n\nvar DISPLAY_ACTUAL_FUNCTIONS = ['count', 'distinct_count', 'lat_long', 'mean', 'max', 'min', 'sum', 'median', 'varp', 'info_content', 'time'];\n\n// List of function descriptions for which typical values from record level results should be displayed.\nvar DISPLAY_TYPICAL_FUNCTIONS = ['count', 'distinct_count', 'lat_long', 'mean', 'max', 'min', 'sum', 'median', 'varp', 'info_content', 'time'];\n\nvar severityTypes = void 0;\n\nfunction getSeverityTypes() {\n  if (severityTypes) {\n    return severityTypes;\n  }\n\n  return severityTypes = {\n    critical: { id: 'critical', label: _i18n.i18n.translate('xpack.ml.anomalyUtils.severity.criticalLabel', {\n        defaultMessage: 'critical'\n      }) },\n    major: { id: 'major', label: _i18n.i18n.translate('xpack.ml.anomalyUtils.severity.majorLabel', {\n        defaultMessage: 'major'\n      }) },\n    minor: { id: 'minor', label: _i18n.i18n.translate('xpack.ml.anomalyUtils.severity.minorLabel', {\n        defaultMessage: 'minor'\n      }) },\n    warning: { id: 'warning', label: _i18n.i18n.translate('xpack.ml.anomalyUtils.severity.warningLabel', {\n        defaultMessage: 'warning'\n      }) },\n    unknown: { id: 'unknown', label: _i18n.i18n.translate('xpack.ml.anomalyUtils.severity.unknownLabel', {\n        defaultMessage: 'unknown'\n      }) },\n    low: { id: 'low', label: _i18n.i18n.translate('xpack.ml.anomalyUtils.severityWithLow.lowLabel', {\n        defaultMessage: 'low'\n      }) }\n  };\n}\n\n// Returns a severity label (one of critical, major, minor, warning or unknown)\n// for the supplied normalized anomaly score (a value between 0 and 100).\nfunction getSeverity(normalizedScore) {\n  var severityTypesList = getSeverityTypes();\n\n  if (normalizedScore >= 75) {\n    return severityTypesList.critical;\n  } else if (normalizedScore >= 50) {\n    return severityTypesList.major;\n  } else if (normalizedScore >= 25) {\n    return severityTypesList.minor;\n  } else if (normalizedScore >= 0) {\n    return severityTypesList.warning;\n  } else {\n    return severityTypesList.unknown;\n  }\n}\n\n// Returns a severity label (one of critical, major, minor, warning, low or unknown)\n// for the supplied normalized anomaly score (a value between 0 and 100), where scores\n// less than 3 are assigned a severity of 'low'.\nfunction getSeverityWithLow(normalizedScore) {\n  var severityTypesList = getSeverityTypes();\n\n  if (normalizedScore >= 75) {\n    return severityTypesList.critical;\n  } else if (normalizedScore >= 50) {\n    return severityTypesList.major;\n  } else if (normalizedScore >= 25) {\n    return severityTypesList.minor;\n  } else if (normalizedScore >= 3) {\n    return severityTypesList.warning;\n  } else if (normalizedScore >= 0) {\n    return severityTypesList.low;\n  } else {\n    return severityTypesList.unknown;\n  }\n}\n\n// Returns a severity RGB color (one of critical, major, minor, warning, low_warning or unknown)\n// for the supplied normalized anomaly score (a value between 0 and 100).\nfunction getSeverityColor(normalizedScore) {\n  if (normalizedScore >= 75) {\n    return '#fe5050';\n  } else if (normalizedScore >= 50) {\n    return '#fba740';\n  } else if (normalizedScore >= 25) {\n    return '#fdec25';\n  } else if (normalizedScore >= 3) {\n    return '#8bc8fb';\n  } else if (normalizedScore >= 0) {\n    return '#d2e9f7';\n  } else {\n    return '#ffffff';\n  }\n}\n\n// Returns a label to use for the multi-bucket impact of an anomaly\n// according to the value of the multi_bucket_impact field of a record,\n// which ranges from -5 to +5.\nfunction getMultiBucketImpactLabel(multiBucketImpact) {\n  if (multiBucketImpact >= _multi_bucket_impact.MULTI_BUCKET_IMPACT.HIGH) {\n    return _i18n.i18n.translate('xpack.ml.anomalyUtils.multiBucketImpact.highLabel', {\n      defaultMessage: 'high'\n    });\n  } else if (multiBucketImpact >= _multi_bucket_impact.MULTI_BUCKET_IMPACT.MEDIUM) {\n    return _i18n.i18n.translate('xpack.ml.anomalyUtils.multiBucketImpact.mediumLabel', {\n      defaultMessage: 'medium'\n    });\n  } else if (multiBucketImpact >= _multi_bucket_impact.MULTI_BUCKET_IMPACT.LOW) {\n    return _i18n.i18n.translate('xpack.ml.anomalyUtils.multiBucketImpact.lowLabel', {\n      defaultMessage: 'low'\n    });\n  } else {\n    return _i18n.i18n.translate('xpack.ml.anomalyUtils.multiBucketImpact.noneLabel', {\n      defaultMessage: 'none'\n    });\n  }\n}\n\n// Returns the name of the field to use as the entity name from the source record\n// obtained from Elasticsearch. The function looks first for a by_field, then over_field,\n// then partition_field, returning undefined if none of these fields are present.\nfunction getEntityFieldName(record) {\n  // Analyses with by and over fields, will have a top-level by_field_name, but\n  // the by_field_value(s) will be in the nested causes array.\n  if (_lodash2.default.has(record, 'by_field_name') && _lodash2.default.has(record, 'by_field_value')) {\n    return record.by_field_name;\n  }\n\n  if (_lodash2.default.has(record, 'over_field_name')) {\n    return record.over_field_name;\n  }\n\n  if (_lodash2.default.has(record, 'partition_field_name')) {\n    return record.partition_field_name;\n  }\n\n  return undefined;\n}\n\n// Returns the value of the field to use as the entity value from the source record\n// obtained from Elasticsearch. The function looks first for a by_field, then over_field,\n// then partition_field, returning undefined if none of these fields are present.\nfunction getEntityFieldValue(record) {\n  if (_lodash2.default.has(record, 'by_field_value')) {\n    return record.by_field_value;\n  }\n\n  if (_lodash2.default.has(record, 'over_field_value')) {\n    return record.over_field_value;\n  }\n\n  if (_lodash2.default.has(record, 'partition_field_value')) {\n    return record.partition_field_value;\n  }\n\n  return undefined;\n}\n\n// Returns whether actual values should be displayed for a record with the specified function description.\n// Note that the 'function' field in a record contains what the user entered e.g. 'high_count',\n// whereas the 'function_description' field holds a ML-built display hint for function e.g. 'count'.\nfunction showActualForFunction(functionDescription) {\n  return _lodash2.default.indexOf(DISPLAY_ACTUAL_FUNCTIONS, functionDescription) > -1;\n}\n\n// Returns whether typical values should be displayed for a record with the specified function description.\n// Note that the 'function' field in a record contains what the user entered e.g. 'high_count',\n// whereas the 'function_description' field holds a ML-built display hint for function e.g. 'count'.\nfunction showTypicalForFunction(functionDescription) {\n  return _lodash2.default.indexOf(DISPLAY_TYPICAL_FUNCTIONS, functionDescription) > -1;\n}\n\n// Returns whether a rule can be configured against the specified anomaly.\nfunction isRuleSupported(record) {\n  // A rule can be configured with a numeric condition if the function supports it,\n  // and/or with scope if there is a partitioning fields.\n  return _detector_rule.CONDITIONS_NOT_SUPPORTED_FUNCTIONS.indexOf(record.function) === -1 || getEntityFieldName(record) !== undefined;\n}\n\n// Two functions for converting aggregation type names.\n// ML and ES use different names for the same function.\n// Possible values for ML aggregation type are (defined in lib/model/CAnomalyDetector.cc):\n//    count\n//    distinct_count\n//    rare\n//    info_content\n//    mean\n//    median\n//    min\n//    max\n//    varp\n//    sum\n//    lat_long\n//    time\n// The input to toES and the output from toML correspond to the value of the\n// function_description field of anomaly records.\nvar aggregationTypeTransform = exports.aggregationTypeTransform = {\n  toES: function toES(oldAggType) {\n    var newAggType = oldAggType;\n\n    if (newAggType === 'mean') {\n      newAggType = 'avg';\n    } else if (newAggType === 'distinct_count') {\n      newAggType = 'cardinality';\n    } else if (newAggType === 'median') {\n      newAggType = 'percentiles';\n    }\n\n    return newAggType;\n  },\n  toML: function toML(oldAggType) {\n    var newAggType = oldAggType;\n\n    if (newAggType === 'avg') {\n      newAggType = 'mean';\n    } else if (newAggType === 'cardinality') {\n      newAggType = 'distinct_count';\n    } else if (newAggType === 'percentiles') {\n      newAggType = 'median';\n    }\n\n    return newAggType;\n  }\n};",null]}