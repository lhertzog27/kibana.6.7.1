{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/jobs/new_job/simple/components/watcher/create_watch_directive.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/jobs/new_job/simple/components/watcher/create_watch_directive.js","mtime":1567631712057},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _parse_interval = require('ui/utils/parse_interval');\n\nvar _create_watch_service = require('plugins/ml/jobs/new_job/simple/components/watcher/create_watch_service');\n\nvar _create_watch = require('./create_watch.html');\n\nvar _create_watch2 = _interopRequireDefault(_create_watch);\n\nvar _ml_api_service = require('plugins/ml/services/ml_api_service');\n\nvar _modules = require('ui/modules');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nvar _module = _modules.uiModules.get('apps/ml');\n\n_module.directive('mlCreateWatch', function () {\n  return {\n    restrict: 'AE',\n    replace: false,\n    scope: {\n      jobId: '=',\n      bucketSpan: '=',\n      embedded: '='\n    },\n    template: _create_watch2.default,\n    link: function link($scope) {\n      $scope.config = _create_watch_service.mlCreateWatchService.config;\n      $scope.status = _create_watch_service.mlCreateWatchService.status;\n      $scope.STATUS = _create_watch_service.mlCreateWatchService.STATUS;\n\n      $scope.ui = {\n        emailEnabled: false,\n        embedded: $scope.embedded,\n        watchAlreadyExists: false\n      };\n\n      // make the interval 2 times the bucket span\n      if ($scope.bucketSpan) {\n        var interval = (0, _parse_interval.parseInterval)($scope.bucketSpan);\n        var bs = interval.asMinutes() * 2;\n        if (bs < 1) {\n          bs = 1;\n        }\n        $scope.config.interval = bs + 'm';\n      }\n\n      // load elasticsearch settings to see if email has been configured\n      _ml_api_service.ml.getNotificationSettings().then(function (resp) {\n        if (_lodash2.default.has(resp, 'defaults.xpack.notification.email')) {\n          $scope.ui.emailEnabled = true;\n          $scope.$applyAsync();\n        }\n      });\n\n      // check to see whether a watch for this job has already been created.\n      // display a warning if it has.\n      _create_watch_service.mlCreateWatchService.loadWatch($scope.jobId).then(function () {\n        $scope.ui.watchAlreadyExists = true;\n      }).catch(function () {\n        $scope.ui.watchAlreadyExists = false;\n      }).then(function () {\n        $scope.$applyAsync();\n      });\n    }\n  };\n});",null]}