{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/ui/public/registry/field_formats.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/registry/field_formats.js","mtime":1567631711750},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fieldFormats = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _chrome = require('../chrome');\n\nvar _chrome2 = _interopRequireDefault(_chrome);\n\nvar _field_format = require('../../field_formats/field_format');\n\nvar _indexed_array = require('../indexed_array');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Licensed to Elasticsearch B.V. under one or more contributor\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * license agreements. See the NOTICE file distributed with\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * this work for additional information regarding copyright\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * ownership. Elasticsearch B.V. licenses this file to you under\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * the Apache License, Version 2.0 (the \"License\"); you may\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * not use this file except in compliance with the License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * You may obtain a copy of the License at\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\nhttp://www.apache.org/licenses/LICENSE-2.0\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Unless required by applicable law or agreed to in writing,\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * software distributed under the License is distributed on an\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\neither express or implied.  See the License for the\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * specific language governing permissions and limitations\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * under the License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\nvar FieldFormatRegistry = function (_IndexedArray) {\n  _inherits(FieldFormatRegistry, _IndexedArray);\n\n  function FieldFormatRegistry() {\n    _classCallCheck(this, FieldFormatRegistry);\n\n    var _this = _possibleConstructorReturn(this, (FieldFormatRegistry.__proto__ || Object.getPrototypeOf(FieldFormatRegistry)).call(this, {\n      group: ['fieldType'],\n      index: ['id', 'name']\n    }));\n\n    _this.getDefaultConfig = function (fieldType) {\n      return _this._defaultMap[fieldType] || _this._defaultMap._default_;\n    };\n\n    _this.getType = function (formatId) {\n      return _this.byId[formatId];\n    };\n\n    _this.getDefaultType = function (fieldType) {\n      return _this.byId[_this.getDefaultConfig(fieldType).id];\n    };\n\n    _this.getInstance = _lodash2.default.memoize(function (formatId) {\n      var FieldFormat = this.byId[formatId];\n      if (!FieldFormat) {\n        throw new Error('Field Format \\'' + formatId + '\\' not found!');\n      }\n      return new FieldFormat(null, this.getConfig);\n    });\n    _this.getDefaultInstance = _lodash2.default.memoize(function (fieldType) {\n      var conf = this.getDefaultConfig(fieldType);\n      var FieldFormat = this.byId[conf.id];\n      return new FieldFormat(conf.params, this.getConfig);\n    });\n    _this.name = 'fieldFormats';\n    _this.displayName = '[registry ' + _this.name + ']';\n\n    _this.register = function (module) {\n      _this.push(module(_field_format.FieldFormat));\n      return _this;\n    };\n\n    _this._uiSettings = _chrome2.default.getUiSettingsClient();\n    _this.getConfig = function () {\n      var _this$_uiSettings;\n\n      return (_this$_uiSettings = _this._uiSettings).get.apply(_this$_uiSettings, arguments);\n    };\n    _this._defaultMap = [];\n    _this._providers = [];\n    _this.init();\n    return _this;\n  }\n\n  _createClass(FieldFormatRegistry, [{\n    key: 'init',\n    value: function init() {\n      var _this2 = this;\n\n      this.parseDefaultTypeMap(this._uiSettings.get('format:defaultTypeMap'));\n\n      this._uiSettings.getUpdate$().subscribe(function (_ref) {\n        var key = _ref.key,\n            newValue = _ref.newValue;\n\n        if (key === 'format:defaultTypeMap') {\n          _this2.parseDefaultTypeMap(newValue);\n        }\n      });\n    }\n\n    /**\n     * Get the id of the default type for this field type\n     * using the format:defaultTypeMap config map\n     *\n     * @param  {String} fieldType - the field type\n     * @return {String}\n     */\n\n\n    /**\n     * Get a FieldFormat type (class) by it's id.\n     *\n     * @param  {String} formatId - the format id\n     * @return {Function}\n     */\n\n\n    /**\n     * Get the default FieldFormat type (class) for\n     * a field type, using the format:defaultTypeMap.\n     *\n     * @param  {String} fieldType\n     * @return {Function}\n     */\n\n\n    /**\n     * Get the singleton instance of the FieldFormat type by it's id.\n     *\n     * @param  {String} formatId\n     * @return {FieldFormat}\n     */\n\n\n    /**\n     * Get the default fieldFormat instance for a field format.\n     *\n     * @param  {String} fieldType\n     * @return {FieldFormat}\n     */\n\n  }, {\n    key: 'parseDefaultTypeMap',\n    value: function parseDefaultTypeMap(value) {\n      this._defaultMap = value;\n      _lodash2.default.forOwn(this, function (fn) {\n        if (_lodash2.default.isFunction(fn) && fn.cache) {\n          // clear all memoize caches\n          fn.cache = new _lodash2.default.memoize.Cache();\n        }\n      });\n    }\n  }]);\n\n  return FieldFormatRegistry;\n}(_indexed_array.IndexedArray);\n\nvar fieldFormats = exports.fieldFormats = new FieldFormatRegistry();",null]}