{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/canvas_plugin_src/functions/common/render.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/canvas_plugin_src/functions/common/render.js","mtime":1567631711898},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nvar render = exports.render = function render() {\n  return {\n    name: 'render',\n    aliases: [],\n    type: 'render',\n    help: 'Render an input as a specific element and set element level options such as styling',\n    context: {\n      types: ['render']\n    },\n    args: {\n      as: {\n        types: ['string', 'null'],\n        help: 'The element type to use in rendering. You probably want a specialized function instead, such as plot or grid',\n        options: ['debug', 'error', 'image', 'pie', 'plot', 'shape', 'table', 'text']\n      },\n      css: {\n        types: ['string', 'null'],\n        default: '\"* > * {}\"',\n        help: 'Any block of custom CSS to be scoped to this element.'\n      },\n      containerStyle: {\n        types: ['containerStyle', 'null'],\n        help: 'Style for the container, including background, border, and opacity'\n      }\n    },\n    fn: function fn(context, args) {\n      return _extends({}, context, {\n        as: args.as || context.as,\n        css: args.css,\n        containerStyle: args.containerStyle\n      });\n    }\n  };\n};",null]}