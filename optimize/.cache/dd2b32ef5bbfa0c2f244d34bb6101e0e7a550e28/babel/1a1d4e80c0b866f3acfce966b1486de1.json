{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/components/job_group_select/job_group_select.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/components/job_group_select/job_group_select.js","mtime":1567631712032},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _job_group_select = require('./job_group_select.html');\n\nvar _job_group_select2 = _interopRequireDefault(_job_group_select);\n\nvar _job_service = require('plugins/ml/services/job_service');\n\nvar _calendar_service = require('plugins/ml/services/calendar_service');\n\nvar _compat = require('ui/compat');\n\nvar _modules = require('ui/modules');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\nvar _module = _modules.uiModules.get('apps/ml');\n\n_module.directive('mlJobGroupSelect', function (i18n) {\n  return {\n    restrict: 'E',\n    template: _job_group_select2.default,\n    scope: {\n      jobGroups: '=',\n      disabled: '=',\n      externalUpdateFunction: '='\n    },\n    controllerAs: 'mlGroupSelect',\n    bindToController: true,\n    controller: function (_InitAfterBindingsWor) {\n      _inherits(MlGroupSelectController, _InitAfterBindingsWor);\n\n      function MlGroupSelectController() {\n        _classCallCheck(this, MlGroupSelectController);\n\n        return _possibleConstructorReturn(this, (MlGroupSelectController.__proto__ || Object.getPrototypeOf(MlGroupSelectController)).apply(this, arguments));\n      }\n\n      _createClass(MlGroupSelectController, [{\n        key: 'initAfterBindings',\n        value: function initAfterBindings($scope) {\n          var _this2 = this;\n\n          this.$scope = $scope;\n          this.selectedGroups = [];\n          this.groups = [];\n          this.$scope.newGroupLabel = i18n('xpack.ml.jobGroupSelect.newGroupLabel', { defaultMessage: '(new group)' });\n\n          // load the jobs, in case they've not been loaded before\n          // in order to get the job groups\n          _job_service.mlJobService.loadJobs().then(function () {\n            // temp id map for fast deduplication\n            var tempGroupIds = {};\n\n            var jobGroups = _job_service.mlJobService.getJobGroups();\n            _this2.groups = jobGroups.map(function (g) {\n              tempGroupIds[g.id] = null;\n              return { id: g.id, count: g.jobs.length, isTag: false };\n            });\n            // if jobGroups hasn't been passed in or it isn't an array, create a new one\n            // needed because advanced job configuration page may not have a jobs array. e.g. when cloning\n            if (Array.isArray(_this2.jobGroups) === false) {\n              _this2.jobGroups = [];\n            }\n\n            // load the calendar groups and add any additional groups to the list\n            _calendar_service.mlCalendarService.loadCalendars(_job_service.mlJobService.jobs).then(function () {\n              var calendarGroups = _calendar_service.mlCalendarService.getCalendarGroups();\n              calendarGroups.forEach(function (g) {\n                // if the group is not used in any jobs, add it to the list\n                if (tempGroupIds[g.id] === undefined) {\n                  _this2.groups.push({ id: g.id, count: 0, isTag: false });\n                }\n              });\n              _this2.populateSelectedGroups(_this2.jobGroups);\n            }).catch(function (error) {\n              console.log('Could not load groups from calendars', error);\n              _this2.populateSelectedGroups(_this2.jobGroups);\n            }).then(function () {\n              $scope.$applyAsync();\n            });\n          });\n\n          // make the populateSelectedGroups function callable from elsewhere.\n          // this is used in the advanced job configuration page, when the user has edited the\n          // job's JSON, we need to force update the displayed selected groups\n          if (this.externalUpdateFunction !== undefined) {\n            this.externalUpdateFunction.update = function (groups) {\n              _this2.populateSelectedGroups(groups);\n            };\n          }\n        }\n\n        // takes a list of groups ids\n        // if the ids has already been used, add it to list of selected groups for display\n        // if it hasn't, create the group\n\n      }, {\n        key: 'populateSelectedGroups',\n        value: function populateSelectedGroups(groups) {\n          var _this3 = this;\n\n          this.selectedGroups = [];\n          groups.forEach(function (gId) {\n            var tempGroup = _lodash2.default.filter(_this3.groups, { id: gId });\n            if (tempGroup.length) {\n              _this3.selectedGroups.push(tempGroup[0]);\n            } else {\n              _this3.selectedGroups.push(_this3.createNewItem(gId));\n            }\n          });\n        }\n      }, {\n        key: 'onGroupsChanged',\n        value: function onGroupsChanged() {\n          var _this4 = this;\n\n          // wipe the groups and add all of the selected ids\n          this.jobGroups.length = 0;\n          this.selectedGroups.forEach(function (group) {\n            _this4.jobGroups.push(group.id);\n          });\n        }\n      }, {\n        key: 'createNewItem',\n        value: function createNewItem(groupId) {\n          var gId = groupId.toLowerCase();\n          return { id: gId, count: 0, isTag: true };\n        }\n      }, {\n        key: 'groupTypes',\n        value: function groupTypes(group) {\n          if (group.isTag === false) {\n            return i18n('xpack.ml.jobGroupSelect.existingGroupsLabel', { defaultMessage: 'Existing groups' });\n          }\n        }\n      }]);\n\n      return MlGroupSelectController;\n    }(_compat.InitAfterBindingsWorkaround)\n  };\n});",null]}