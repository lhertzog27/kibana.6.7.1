{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/xpack_main/public/services/xpack_info.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/xpack_main/public/services/xpack_info.js","mtime":1567631712360},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.XPackInfoProvider = XPackInfoProvider;\n\nvar _lodash = require('lodash');\n\nvar _chrome = require('ui/chrome');\n\nvar _chrome2 = _interopRequireDefault(_chrome);\n\nvar _xpack_info_signature = require('plugins/xpack_main/services/xpack_info_signature');\n\nvar _key_case_converter = require('../../../../server/lib/key_case_converter');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } } /*\n                                                                                                                                                           * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                           * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                           * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                           */\n\nvar XPACK_INFO_KEY = 'xpackMain.info';\n\nfunction XPackInfoProvider($window, $injector, Private) {\n  var xpackInfoSignature = Private(_xpack_info_signature.XPackInfoSignatureProvider);\n\n  var XPackInfo = function XPackInfo() {\n    var _this = this;\n\n    var initialInfo = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, XPackInfo);\n\n    this.get = function (path) {\n      var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n\n      var xpackInfoValuesJson = $window.sessionStorage.getItem(XPACK_INFO_KEY);\n      var xpackInfoValues = xpackInfoValuesJson ? JSON.parse(xpackInfoValuesJson) : {};\n      return (0, _lodash.get)(xpackInfoValues, path, defaultValue);\n    };\n\n    this.setAll = function (updatedXPackInfo) {\n      // The decision to convert kebab-case/snake-case keys to camel-case keys stemmed from an old\n      // convention of using kebabe-case/snake-case in API response bodies but camel-case in JS\n      // objects. See pull #29304 for more info.\n      var camelCasedXPackInfo = (0, _key_case_converter.convertKeysToCamelCaseDeep)(updatedXPackInfo);\n      $window.sessionStorage.setItem(XPACK_INFO_KEY, JSON.stringify(camelCasedXPackInfo));\n    };\n\n    this.clear = function () {\n      $window.sessionStorage.removeItem(XPACK_INFO_KEY);\n    };\n\n    this.refresh = function () {\n      if (_this.inProgressRefreshPromise) {\n        return _this.inProgressRefreshPromise;\n      }\n\n      // store the promise in a shared location so that calls to\n      // refresh() before this is complete will get the same promise\n      var $http = $injector.get('$http');\n      _this.inProgressRefreshPromise = $http.get(_chrome2.default.addBasePath('/api/xpack/v1/info')).catch(function (err) {\n        // if we are unable to fetch the updated info, we should\n        // prevent reusing stale info\n        _this.clear();\n        xpackInfoSignature.clear();\n        throw err;\n      }).then(function (xpackInfoResponse) {\n        _this.setAll(xpackInfoResponse.data);\n        xpackInfoSignature.set(xpackInfoResponse.headers('kbn-xpack-sig'));\n      }).finally(function () {\n        _this.inProgressRefreshPromise = null;\n      });\n      return _this.inProgressRefreshPromise;\n    };\n\n    this.getLicense = function () {\n      return _this.get('license', {\n        isActive: false,\n        type: undefined,\n        expiryDateInMillis: undefined\n      });\n    };\n\n    this.inProgressRefreshPromise = null;\n    this.setAll(initialInfo);\n  };\n\n  return new XPackInfo(_chrome2.default.getInjected('xpackInitialInfo'));\n}",null]}