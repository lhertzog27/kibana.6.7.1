{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/canvas_plugin_src/functions/common/alterColumn.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/canvas_plugin_src/functions/common/alterColumn.js","mtime":1567631711897},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.alterColumn = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /*\n                                                                                                                                                                                                                                                                   * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                   * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                   * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                   */\n\nvar _lodash = require('lodash');\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar alterColumn = exports.alterColumn = function alterColumn() {\n  return {\n    name: 'alterColumn',\n    type: 'datatable',\n    help: 'Converts between core types, eg string, number, null, boolean, date and rename columns',\n    context: {\n      types: ['datatable']\n    },\n    args: {\n      column: {\n        aliases: ['_'],\n        types: ['string'],\n        help: 'The name of the column to alter'\n      },\n      type: {\n        types: ['string'],\n        help: 'The type to convert the column to. Leave blank to not change type',\n        default: null,\n        options: ['null', 'boolean', 'number', 'string']\n      },\n      name: {\n        types: ['string'],\n        help: 'The resultant column name. Leave blank to not rename',\n        default: null\n      }\n    },\n    fn: function fn(context, args) {\n      if (!args.column || !args.type && !args.name) {\n        return context;\n      }\n\n      var column = context.columns.find(function (col) {\n        return col.name === args.column;\n      });\n      if (!column) {\n        throw new Error('Column not found: \\'' + args.column + '\\'');\n      }\n\n      var name = args.name || column.name;\n      var type = args.type || column.type;\n\n      var columns = context.columns.reduce(function (all, col) {\n        if (col.name !== args.name) {\n          if (col.name !== column.name) {\n            all.push(col);\n          } else {\n            all.push({ name: name, type: type });\n          }\n        }\n        return all;\n      }, []);\n\n      var handler = function handler(val) {\n        return val;\n      };\n\n      if (args.type) {\n        handler = function getHandler() {\n          switch (type) {\n            case 'string':\n              if (column.type === 'date') {\n                return function (v) {\n                  return new Date(v).toISOString();\n                };\n              }\n              return String;\n            case 'number':\n              return Number;\n            case 'date':\n              return function (v) {\n                return new Date(v).valueOf();\n              };\n            case 'boolean':\n              return Boolean;\n            case 'null':\n              return function () {\n                return null;\n              };\n            default:\n              throw new Error('Cannot convert to \\'' + type + '\\'');\n          }\n        }();\n      }\n\n      var rows = context.rows.map(function (row) {\n        return _extends({}, (0, _lodash.omit)(row, column.name), _defineProperty({}, name, handler(row[column.name])));\n      });\n\n      return {\n        type: 'datatable',\n        columns: columns,\n        rows: rows\n      };\n    }\n  };\n};",null]}