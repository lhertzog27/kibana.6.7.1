{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/security/public/hacks/on_unauthorized_response.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/security/public/hacks/on_unauthorized_response.js","mtime":1567631712296},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nvar _lodash = require('lodash');\n\nvar _modules = require('ui/modules');\n\nvar _path = require('plugins/xpack_main/services/path');\n\nrequire('plugins/security/services/auto_logout');\n\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nfunction isUnauthorizedResponseAllowed(response) {\n  var API_WHITELIST = ['/api/security/v1/login', '/api/security/v1/users/.*/password'];\n\n  var url = response.config.url;\n  return API_WHITELIST.some(function (api) {\n    return url.match(api);\n  });\n}\n\nvar _module = _modules.uiModules.get('security');\n_module.factory('onUnauthorizedResponse', function ($q, $window, $injector, Private, autoLogout) {\n  var isUnauthenticated = Private(_path.PathProvider).isUnauthenticated();\n  function interceptorFactory(responseHandler) {\n    return function interceptor(response) {\n      if (response.status === 401 && !isUnauthorizedResponseAllowed(response) && !isUnauthenticated) return autoLogout();\n      return responseHandler(response);\n    };\n  }\n\n  return {\n    response: interceptorFactory(_lodash.identity),\n    responseError: interceptorFactory($q.reject)\n  };\n});\n\n_module.config(function ($httpProvider) {\n  $httpProvider.interceptors.push('onUnauthorizedResponse');\n});",null]}