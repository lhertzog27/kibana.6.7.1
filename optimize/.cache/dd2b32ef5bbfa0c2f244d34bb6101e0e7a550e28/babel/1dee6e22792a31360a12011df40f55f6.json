{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/maps/public/shared/layers/styles/tile_style.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/maps/public/shared/layers/styles/tile_style.js","mtime":1567631712022},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TileStyle = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _abstract_style = require('./abstract_style');\n\nvar _i18n = require('@kbn/i18n');\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\nvar TileStyle = exports.TileStyle = function (_AbstractStyle) {\n  _inherits(TileStyle, _AbstractStyle);\n\n  function TileStyle() {\n    var styleDescriptor = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, TileStyle);\n\n    var _this = _possibleConstructorReturn(this, (TileStyle.__proto__ || Object.getPrototypeOf(TileStyle)).call(this));\n\n    _this._descriptor = TileStyle.createDescriptor(styleDescriptor.properties);\n    return _this;\n  }\n\n  _createClass(TileStyle, null, [{\n    key: 'canEdit',\n    value: function canEdit(styleInstance) {\n      return styleInstance.constructor === TileStyle;\n    }\n  }, {\n    key: 'createDescriptor',\n    value: function createDescriptor() {\n      var properties = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      return {\n        type: TileStyle.type,\n        properties: _extends({}, properties)\n      };\n    }\n  }, {\n    key: 'getDisplayName',\n    value: function getDisplayName() {\n      return _i18n.i18n.translate('xpack.maps.style.tile.displayNameLabel', {\n        defaultMessage: 'Tile style'\n      });\n    }\n  }]);\n\n  return TileStyle;\n}(_abstract_style.AbstractStyle);\n\nTileStyle.type = 'TILE';",null]}