{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/jobs/new_job/simple/components/enable_model_plot_checkbox/enable_model_plot_checkbox_directive.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/jobs/new_job/simple/components/enable_model_plot_checkbox/enable_model_plot_checkbox_directive.js","mtime":1567631712055},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _enable_model_plot_checkbox_view = require('./enable_model_plot_checkbox_view.js');\n\nvar _ml_api_service = require('../../../../../services/ml_api_service');\n\nvar _new_job_utils = require('../../../utils/new_job_utils');\n\nvar _i18n = require('ui/i18n');\n\nvar _modules = require('ui/modules');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _module = _modules.uiModules.get('apps/ml'); /*\n                                                  * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                  * or more contributor license agreements. Licensed under the Elastic License;\n                                                  * you may not use this file except in compliance with the Elastic License.\n                                                  */\n\n_module.directive('mlEnableModelPlotCheckbox', function (i18n) {\n  return {\n    restrict: 'AE',\n    replace: false,\n    scope: {\n      formConfig: '=',\n      ui: '=ui',\n      getJobFromConfig: '='\n    },\n    link: function link($scope, $element) {\n      var STATUS = {\n        FAILED: -1,\n        NOT_RUNNING: 0,\n        RUNNING: 1,\n        FINISHED: 2,\n        WARNING: 3\n      };\n\n      function errorHandler(error) {\n        console.log('Cardinality could not be validated', error);\n        $scope.ui.cardinalityValidator.status = STATUS.FAILED;\n        $scope.ui.cardinalityValidator.message = i18n('xpack.ml.newJob.simple.enableModelPlot.validatingConfigurationErrorMessage', {\n          defaultMessage: 'An error occurred validating the configuration ' + 'for running the job with model plot enabled. ' + 'Creating model plots can be resource intensive and not recommended where the cardinality of the selected fields is high. ' + 'You may want to select a dedicated results index on the Job Details tab.'\n        });\n        // Go ahead and check the dedicated index box for them\n        $scope.formConfig.useDedicatedIndex = true;\n      }\n\n      function validateCardinality() {\n        $scope.ui.cardinalityValidator.status = STATUS.RUNNING;\n        $scope.ui.cardinalityValidator.message = '';\n\n        // create temporary job since cardinality validation expects that format\n        var tempJob = $scope.getJobFromConfig($scope.formConfig);\n\n        _ml_api_service.ml.validateCardinality(tempJob).then(function (response) {\n          var validationResult = (0, _new_job_utils.checkCardinalitySuccess)(response);\n\n          if (validationResult.success === true) {\n            $scope.formConfig.enableModelPlot = true;\n            $scope.ui.cardinalityValidator.status = STATUS.FINISHED;\n          } else {\n            $scope.ui.cardinalityValidator.message = i18n('xpack.ml.newJob.simple.enableModelPlot.enableModelPlotDescription', {\n              defaultMessage: 'Creating model plots is resource intensive and not recommended ' + 'where the cardinality of the selected fields is greater than 100. Estimated cardinality ' + 'for this job is {highCardinality}. ' + 'If you enable model plot with this configuration we recommend you use a dedicated results index.',\n              values: { highCardinality: validationResult.highCardinality }\n            });\n\n            $scope.ui.cardinalityValidator.status = STATUS.WARNING;\n            // Go ahead and check the dedicated index box for them\n            $scope.formConfig.useDedicatedIndex = true;\n            // show the advanced section so the warning message is visible since validation failed\n            $scope.ui.showAdvanced = true;\n          }\n        }).catch(errorHandler).then(function () {\n          $scope.$applyAsync();\n        });\n      }\n\n      // Re-validate cardinality for updated fields/splitField\n      // when enable model plot is checked and form valid\n      function revalidateCardinalityOnFieldChange() {\n        if ($scope.formConfig.enableModelPlot === true && $scope.ui.formValid === true) {\n          validateCardinality();\n        }\n      }\n\n      $scope.handleCheckboxChange = function (isChecked) {\n        if (isChecked) {\n          $scope.formConfig.enableModelPlot = true;\n          validateCardinality();\n        } else {\n          $scope.formConfig.enableModelPlot = false;\n          $scope.ui.cardinalityValidator.status = STATUS.FINISHED;\n          $scope.ui.cardinalityValidator.message = '';\n          updateCheckbox();\n        }\n      };\n\n      // Update checkbox on these changes\n      $scope.$watch('ui.formValid', updateCheckbox, true);\n      $scope.$watch('ui.cardinalityValidator.status', updateCheckbox, true);\n      // MultiMetric: Fire off cardinality validation when fields and/or split by field is updated\n      $scope.$watch('formConfig.fields', revalidateCardinalityOnFieldChange, true);\n      $scope.$watch('formConfig.splitField', revalidateCardinalityOnFieldChange, true);\n      // Population: Fire off cardinality validation when overField is updated\n      $scope.$watch('formConfig.overField', revalidateCardinalityOnFieldChange, true);\n\n      function updateCheckbox() {\n        // disable if (check is running && checkbox checked) or (form is invalid && checkbox unchecked)\n        var checkboxDisabled = $scope.ui.cardinalityValidator.status === STATUS.RUNNING && $scope.formConfig.enableModelPlot === true || $scope.ui.formValid !== true && $scope.formConfig.enableModelPlot === false;\n        var validatorRunning = $scope.ui.cardinalityValidator.status === STATUS.RUNNING;\n        var warningStatus = ($scope.ui.cardinalityValidator.status === STATUS.WARNING || $scope.ui.cardinalityValidator.status === STATUS.FAILED) && $scope.ui.formValid === true;\n        var checkboxText = validatorRunning ? i18n('xpack.ml.newJob.simple.enableModelPlot.validatingCardinalityLabel', {\n          defaultMessage: 'Validating cardinalityâ€¦'\n        }) : i18n('xpack.ml.newJob.simple.enableModelPlot.enableModelPlotLabel', {\n          defaultMessage: 'Enable model plot'\n        });\n\n        var props = {\n          checkboxDisabled: checkboxDisabled,\n          checkboxText: checkboxText,\n          onCheckboxChange: $scope.handleCheckboxChange,\n          warningContent: $scope.ui.cardinalityValidator.message,\n          warningStatus: warningStatus\n        };\n\n        _reactDom2.default.render(_react2.default.createElement(\n          _i18n.I18nContext,\n          null,\n          _react2.default.createElement(_enable_model_plot_checkbox_view.EnableModelPlotCheckbox, props)\n        ), $element[0]);\n      }\n\n      updateCheckbox();\n    }\n  };\n});",null]}