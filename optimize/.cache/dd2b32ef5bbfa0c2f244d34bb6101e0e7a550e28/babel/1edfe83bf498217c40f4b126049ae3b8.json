{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/monitoring/public/components/cluster/listing/listing.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/monitoring/public/components/cluster/listing/listing.js","mtime":1567631712084},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Listing = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _chrome = require('ui/chrome');\n\nvar _chrome2 = _interopRequireDefault(_chrome);\n\nvar _moment = require('moment');\n\nvar _moment2 = _interopRequireDefault(_moment);\n\nvar _numeral = require('@elastic/numeral');\n\nvar _numeral2 = _interopRequireDefault(_numeral);\n\nvar _lodash = require('lodash');\n\nvar _eui = require('@elastic/eui');\n\nvar _notify = require('ui/notify');\n\nvar _table = require('plugins/monitoring/components/table');\n\nvar _alerts_indicator = require('plugins/monitoring/components/cluster/listing/alerts_indicator');\n\nvar _react3 = require('@kbn/i18n/react');\n\nvar _i18n = require('@kbn/i18n');\n\nvar _constants = require('../../../../common/constants');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\n\nvar IsClusterSupported = function IsClusterSupported(_ref) {\n  var isSupported = _ref.isSupported,\n      children = _ref.children;\n\n  return isSupported ? children : '-';\n};\n\nvar STANDALONE_CLUSTER_STORAGE_KEY = 'viewedStandaloneCluster';\n\n/*\n  * This checks if alerts feature is supported via monitoring cluster\n  * license. If the alerts feature is not supported because the prod cluster\n  * license is basic, IsClusterSupported makes the status col hidden\n  * completely\n  */\nvar IsAlertsSupported = function IsAlertsSupported(props) {\n  var _props$cluster$alerts = props.cluster.alerts,\n      _props$cluster$alerts2 = _props$cluster$alerts.alertsMeta,\n      alertsMeta = _props$cluster$alerts2 === undefined ? { enabled: true } : _props$cluster$alerts2,\n      _props$cluster$alerts3 = _props$cluster$alerts.clusterMeta,\n      clusterMeta = _props$cluster$alerts3 === undefined ? { enabled: true } : _props$cluster$alerts3;\n\n  if (alertsMeta.enabled && clusterMeta.enabled) {\n    return _react2.default.createElement(\n      'span',\n      null,\n      props.children\n    );\n  }\n\n  var message = alertsMeta.message || clusterMeta.message;\n  return _react2.default.createElement(\n    _eui.EuiToolTip,\n    {\n      content: message,\n      position: 'bottom'\n    },\n    _react2.default.createElement(\n      _eui.EuiHealth,\n      { color: 'subdued', 'data-test-subj': 'alertIcon' },\n      'N/A'\n    )\n  );\n};\n\nvar getColumns = function getColumns(showLicenseExpiration, changeCluster, handleClickIncompatibleLicense, handleClickInvalidLicense) {\n  return [{\n    name: _i18n.i18n.translate('xpack.monitoring.cluster.listing.nameColumnTitle', {\n      defaultMessage: 'Name'\n    }),\n    field: 'cluster_name',\n    sortable: true,\n    render: function render(value, cluster) {\n      if (cluster.isSupported) {\n        return _react2.default.createElement(\n          _eui.EuiLink,\n          {\n            onClick: function onClick() {\n              return changeCluster(cluster.cluster_uuid, cluster.ccs);\n            },\n            'data-test-subj': 'clusterLink'\n          },\n          value\n        );\n      }\n\n      // not supported because license is basic/not compatible with multi-cluster\n      if (cluster.license) {\n        return _react2.default.createElement(\n          _eui.EuiLink,\n          {\n            onClick: function onClick() {\n              return handleClickIncompatibleLicense(cluster.cluster_name);\n            },\n            'data-test-subj': 'clusterLink'\n          },\n          value\n        );\n      }\n\n      // not supported because license is invalid\n      return _react2.default.createElement(\n        _eui.EuiLink,\n        {\n          onClick: function onClick() {\n            return handleClickInvalidLicense(cluster.cluster_name);\n          },\n          'data-test-subj': 'clusterLink'\n        },\n        value\n      );\n    }\n  }, {\n    name: _i18n.i18n.translate('xpack.monitoring.cluster.listing.statusColumnTitle', {\n      defaultMessage: 'Status'\n    }),\n    field: 'status',\n    'data-test-subj': 'alertsStatus',\n    sortable: true,\n    render: function render(_status, cluster) {\n      return _react2.default.createElement(\n        IsClusterSupported,\n        cluster,\n        _react2.default.createElement(\n          IsAlertsSupported,\n          { cluster: cluster },\n          _react2.default.createElement(_alerts_indicator.AlertsIndicator, { alerts: cluster.alerts })\n        )\n      );\n    }\n  }, {\n    name: _i18n.i18n.translate('xpack.monitoring.cluster.listing.nodesColumnTitle', {\n      defaultMessage: 'Nodes'\n    }),\n    field: 'elasticsearch.cluster_stats.nodes.count.total',\n    'data-test-subj': 'nodesCount',\n    sortable: true,\n    render: function render(total, cluster) {\n      return _react2.default.createElement(\n        IsClusterSupported,\n        cluster,\n        (0, _numeral2.default)(total).format('0,0')\n      );\n    }\n  }, {\n    name: _i18n.i18n.translate('xpack.monitoring.cluster.listing.indicesColumnTitle', {\n      defaultMessage: 'Indices'\n    }),\n    field: 'elasticsearch.cluster_stats.indices.count',\n    'data-test-subj': 'indicesCount',\n    sortable: true,\n    render: function render(count, cluster) {\n      return _react2.default.createElement(\n        IsClusterSupported,\n        cluster,\n        (0, _numeral2.default)(count).format('0,0')\n      );\n    }\n  }, {\n    name: _i18n.i18n.translate('xpack.monitoring.cluster.listing.dataColumnTitle', {\n      defaultMessage: 'Data'\n    }),\n    field: 'elasticsearch.cluster_stats.indices.store.size_in_bytes',\n    'data-test-subj': 'dataSize',\n    sortable: true,\n    render: function render(size, cluster) {\n      return _react2.default.createElement(\n        IsClusterSupported,\n        cluster,\n        (0, _numeral2.default)(size).format('0,0[.]0 b')\n      );\n    }\n  }, {\n    name: _i18n.i18n.translate('xpack.monitoring.cluster.listing.logstashColumnTitle', {\n      defaultMessage: 'Logstash'\n    }),\n    field: 'logstash.node_count',\n    'data-test-subj': 'logstashCount',\n    sortable: true,\n    render: function render(count, cluster) {\n      return _react2.default.createElement(\n        IsClusterSupported,\n        cluster,\n        (0, _numeral2.default)(count).format('0,0')\n      );\n    }\n  }, {\n    name: _i18n.i18n.translate('xpack.monitoring.cluster.listing.kibanaColumnTitle', {\n      defaultMessage: 'Kibana'\n    }),\n    field: 'kibana.count',\n    'data-test-subj': 'kibanaCount',\n    sortable: true,\n    render: function render(count, cluster) {\n      return _react2.default.createElement(\n        IsClusterSupported,\n        cluster,\n        (0, _numeral2.default)(count).format('0,0')\n      );\n    }\n  }, {\n    name: _i18n.i18n.translate('xpack.monitoring.cluster.listing.licenseColumnTitle', {\n      defaultMessage: 'License'\n    }),\n    field: 'license.type',\n    'data-test-subj': 'clusterLicense',\n    sortable: true,\n    render: function render(licenseType, cluster) {\n      var license = cluster.license;\n\n      if (!licenseType) {\n        return _react2.default.createElement(\n          'div',\n          null,\n          _react2.default.createElement(\n            'div',\n            { className: 'monTableCell__clusterCellLiscense' },\n            'N/A'\n          )\n        );\n      }\n\n      if (license) {\n        var licenseExpiry = function licenseExpiry() {\n          if (license.expiry_date_in_millis < (0, _moment2.default)().valueOf()) {\n            // license is expired\n            return _react2.default.createElement(\n              'span',\n              { className: 'monTableCell__clusterCellExpired' },\n              'Expired'\n            );\n          }\n\n          // license is fine\n          return _react2.default.createElement(\n            'span',\n            null,\n            'Expires ',\n            (0, _moment2.default)(license.expiry_date_in_millis).format('D MMM YY')\n          );\n        };\n\n        return _react2.default.createElement(\n          'div',\n          null,\n          _react2.default.createElement(\n            'div',\n            { className: 'monTableCell__clusterCellLiscense' },\n            (0, _lodash.capitalize)(licenseType)\n          ),\n          _react2.default.createElement(\n            'div',\n            { className: 'monTableCell__clusterCellExpiration' },\n            showLicenseExpiration ? licenseExpiry() : null\n          )\n        );\n      }\n\n      // there is no license!\n      return _react2.default.createElement(\n        _eui.EuiLink,\n        {\n          onClick: function onClick() {\n            return handleClickInvalidLicense(cluster.cluster_name);\n          }\n        },\n        _react2.default.createElement(\n          _eui.EuiHealth,\n          { color: 'subdued', 'data-test-subj': 'alertIcon' },\n          'N/A'\n        )\n      );\n    }\n  }];\n};\n\nvar changeCluster = function changeCluster(scope, globalState, kbnUrl, clusterUuid, ccs) {\n  scope.$evalAsync(function () {\n    globalState.cluster_uuid = clusterUuid;\n    globalState.ccs = ccs;\n    globalState.save();\n    kbnUrl.changePath('/overview');\n  });\n};\n\nvar licenseWarning = function licenseWarning(scope, _ref2) {\n  var title = _ref2.title,\n      text = _ref2.text;\n\n  scope.$evalAsync(function () {\n    _notify.toastNotifications.addWarning({ title: title, text: text, 'data-test-subj': 'monitoringLicenseWarning' });\n  });\n};\n\nvar handleClickIncompatibleLicense = function handleClickIncompatibleLicense(scope, clusterName) {\n  licenseWarning(scope, {\n    title: _react2.default.createElement(_react3.FormattedMessage, {\n      id: 'xpack.monitoring.cluster.listing.incompatibleLicense.warningMessageTitle',\n      defaultMessage: 'You can\\'t view the {clusterName} cluster',\n      values: { clusterName: '\"' + clusterName + '\"' }\n    }),\n    text: _react2.default.createElement(\n      _react.Fragment,\n      null,\n      _react2.default.createElement(\n        'p',\n        null,\n        _react2.default.createElement(_react3.FormattedMessage, {\n          id: 'xpack.monitoring.cluster.listing.incompatibleLicense.noMultiClusterSupportMessage',\n          defaultMessage: 'The Basic license does not support multi-cluster monitoring.'\n        })\n      ),\n      _react2.default.createElement(\n        'p',\n        null,\n        _react2.default.createElement(_react3.FormattedMessage, {\n          id: 'xpack.monitoring.cluster.listing.incompatibleLicense.infoMessage',\n          defaultMessage: 'Need to monitor multiple clusters? {getLicenseInfoLink} to enjoy multi-cluster monitoring.',\n          values: {\n            getLicenseInfoLink: _react2.default.createElement(\n              'a',\n              { href: 'https://www.elastic.co/subscriptions', target: '_blank' },\n              _react2.default.createElement(_react3.FormattedMessage, {\n                id: 'xpack.monitoring.cluster.listing.incompatibleLicense.getLicenseLinkLabel',\n                defaultMessage: 'Get a license with full functionality'\n              })\n            )\n          }\n        })\n      )\n    )\n  });\n};\n\nvar handleClickInvalidLicense = function handleClickInvalidLicense(scope, clusterName) {\n  var licensingPath = _chrome2.default.getBasePath() + '/app/kibana#/management/elasticsearch/license_management/home';\n\n  licenseWarning(scope, {\n    title: _react2.default.createElement(_react3.FormattedMessage, {\n      id: 'xpack.monitoring.cluster.listing.invalidLicense.warningMessageTitle',\n      defaultMessage: 'You can\\'t view the {clusterName} cluster',\n      values: { clusterName: '\"' + clusterName + '\"' }\n    }),\n    text: _react2.default.createElement(\n      _react.Fragment,\n      null,\n      _react2.default.createElement(\n        'p',\n        null,\n        _react2.default.createElement(_react3.FormattedMessage, {\n          id: 'xpack.monitoring.cluster.listing.invalidLicense.invalidInfoMessage',\n          defaultMessage: 'The license information is invalid.'\n        })\n      ),\n      _react2.default.createElement(\n        'p',\n        null,\n        _react2.default.createElement(_react3.FormattedMessage, {\n          id: 'xpack.monitoring.cluster.listing.invalidLicense.infoMessage',\n          defaultMessage: 'Need a license? {getBasicLicenseLink} or {getLicenseInfoLink} to enjoy multi-cluster monitoring.',\n          values: {\n            getBasicLicenseLink: _react2.default.createElement(\n              'a',\n              { href: licensingPath },\n              _react2.default.createElement(_react3.FormattedMessage, {\n                id: 'xpack.monitoring.cluster.listing.invalidLicense.getBasicLicenseLinkLabel',\n                defaultMessage: 'Get a free Basic license'\n              })\n            ),\n            getLicenseInfoLink: _react2.default.createElement(\n              'a',\n              { href: 'https://www.elastic.co/subscriptions', target: '_blank' },\n              _react2.default.createElement(_react3.FormattedMessage, {\n                id: 'xpack.monitoring.cluster.listing.invalidLicense.getLicenseLinkLabel',\n                defaultMessage: 'get a license with full functionality'\n              })\n            )\n          }\n        })\n      )\n    )\n  });\n};\n\nvar Listing = exports.Listing = function (_Component) {\n  _inherits(Listing, _Component);\n\n  function Listing(props) {\n    _classCallCheck(this, Listing);\n\n    var _this = _possibleConstructorReturn(this, (Listing.__proto__ || Object.getPrototypeOf(Listing)).call(this, props));\n\n    _this.state = _defineProperty({}, STANDALONE_CLUSTER_STORAGE_KEY, false);\n    return _this;\n  }\n\n  _createClass(Listing, [{\n    key: 'renderStandaloneClusterCallout',\n    value: function renderStandaloneClusterCallout(changeCluster, storage) {\n      var _this2 = this;\n\n      if (storage.get(STANDALONE_CLUSTER_STORAGE_KEY)) {\n        return null;\n      }\n\n      return _react2.default.createElement(\n        'div',\n        null,\n        _react2.default.createElement(\n          _eui.EuiCallOut,\n          {\n            color: 'warning',\n            title: _i18n.i18n.translate('xpack.monitoring.cluster.listing.standaloneClusterCallOutTitle', {\n              defaultMessage: 'It looks like you have instances that aren\\'t connected to an Elasticsearch cluster.'\n            }),\n            iconType: 'link'\n          },\n          _react2.default.createElement(\n            'p',\n            null,\n            _react2.default.createElement(\n              _eui.EuiLink,\n              {\n                onClick: function onClick() {\n                  return changeCluster(_constants.STANDALONE_CLUSTER_CLUSTER_UUID);\n                },\n                'data-test-subj': 'standaloneClusterLink'\n              },\n              _react2.default.createElement(_react3.FormattedMessage, {\n                id: 'xpack.monitoring.cluster.listing.standaloneClusterCallOutLink',\n                defaultMessage: 'View these instances.'\n              })\n            ),\n            '\\xA0',\n            _react2.default.createElement(_react3.FormattedMessage, {\n              id: 'xpack.monitoring.cluster.listing.standaloneClusterCallOutText',\n              defaultMessage: 'Or, click Standalone Cluster in the table below'\n            })\n          ),\n          _react2.default.createElement(\n            'p',\n            null,\n            _react2.default.createElement(\n              _eui.EuiLink,\n              { onClick: function onClick() {\n                  storage.set(STANDALONE_CLUSTER_STORAGE_KEY, true);\n                  _this2.setState(_defineProperty({}, STANDALONE_CLUSTER_STORAGE_KEY, true));\n                }\n              },\n              _react2.default.createElement(_eui.EuiIcon, { type: 'cross' }),\n              '\\xA0',\n              _react2.default.createElement(_react3.FormattedMessage, {\n                id: 'xpack.monitoring.cluster.listing.standaloneClusterCallOutDismiss',\n                defaultMessage: 'Dismiss'\n              })\n            )\n          )\n        ),\n        _react2.default.createElement(_eui.EuiSpacer, null)\n      );\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          angular = _props.angular,\n          clusters = _props.clusters,\n          sorting = _props.sorting,\n          pagination = _props.pagination,\n          onTableChange = _props.onTableChange;\n\n\n      var _changeCluster = (0, _lodash.partial)(changeCluster, angular.scope, angular.globalState, angular.kbnUrl);\n      var _handleClickIncompatibleLicense = (0, _lodash.partial)(handleClickIncompatibleLicense, angular.scope);\n      var _handleClickInvalidLicense = (0, _lodash.partial)(handleClickInvalidLicense, angular.scope);\n      var hasStandaloneCluster = !!clusters.find(function (cluster) {\n        return cluster.cluster_uuid === _constants.STANDALONE_CLUSTER_CLUSTER_UUID;\n      });\n\n      return _react2.default.createElement(\n        _eui.EuiPage,\n        null,\n        _react2.default.createElement(\n          _eui.EuiPageBody,\n          null,\n          _react2.default.createElement(\n            _eui.EuiPageContent,\n            null,\n            hasStandaloneCluster ? this.renderStandaloneClusterCallout(_changeCluster, angular.storage) : null,\n            _react2.default.createElement(_table.EuiMonitoringTable, {\n              className: 'clusterTable',\n              rows: clusters,\n              columns: getColumns(angular.showLicenseExpiration, _changeCluster, _handleClickIncompatibleLicense, _handleClickInvalidLicense),\n              rowProps: function rowProps(item) {\n                return {\n                  'data-test-subj': 'clusterRow_' + item.cluster_uuid\n                };\n              },\n              sorting: _extends({}, sorting, {\n                sort: _extends({}, sorting.sort, {\n                  field: 'cluster_name'\n                })\n              }),\n              pagination: pagination,\n              search: {\n                box: {\n                  incremental: true,\n                  placeholder: angular.scope.filterText\n                }\n              },\n              onTableChange: onTableChange,\n              executeQueryOptions: {\n                defaultFields: ['cluster_name']\n              }\n            })\n          )\n        )\n      );\n    }\n  }]);\n\n  return Listing;\n}(_react.Component);",null]}