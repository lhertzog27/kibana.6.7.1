{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/ui/public/dirty_prompt/dirty_prompt.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/dirty_prompt/dirty_prompt.js","mtime":1567631711719},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DirtyPrompt = undefined;\n\nvar _lodash = require('lodash');\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } } /*\n                                                                                                                                                           * Licensed to Elasticsearch B.V. under one or more contributor\n                                                                                                                                                           * license agreements. See the NOTICE file distributed with\n                                                                                                                                                           * this work for additional information regarding copyright\n                                                                                                                                                           * ownership. Elasticsearch B.V. licenses this file to you under\n                                                                                                                                                           * the Apache License, Version 2.0 (the \"License\"); you may\n                                                                                                                                                           * not use this file except in compliance with the License.\n                                                                                                                                                           * You may obtain a copy of the License at\n                                                                                                                                                           *\n                                                                                                                                                           *    http://www.apache.org/licenses/LICENSE-2.0\n                                                                                                                                                           *\n                                                                                                                                                           * Unless required by applicable law or agreed to in writing,\n                                                                                                                                                           * software distributed under the License is distributed on an\n                                                                                                                                                           * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n                                                                                                                                                           * KIND, either express or implied.  See the License for the\n                                                                                                                                                           * specific language governing permissions and limitations\n                                                                                                                                                           * under the License.\n                                                                                                                                                           */\n\nvar confirmMessage = 'You have unsaved changes. Proceed and discard changes?';\n\nfunction registerUrlChangeHandler(checkDirty) {\n  this.beforeUnloadHandler = function (event) {\n    if (checkDirty()) {\n      // Browsers do not honor the message you set here. The only requirement\n      // is that is is not an empty string. I am just using the confirmMessage\n      // here for consistency\n      event.returnValue = confirmMessage;\n    }\n  };\n\n  // When the user navigates to an external url or another app, we must\n  // rely on the build-in beforeunload confirmation dialog. We do not have\n  // the ability to change the text or appearance of this dialog.\n  this.$window.addEventListener('beforeunload', this.beforeUnloadHandler);\n}\n\nfunction deregisterUrlChangeHandler() {\n  this.$window.removeEventListener('beforeunload', this.beforeUnloadHandler);\n}\n\nfunction registerRouteChangeHandler(checkDirty) {\n  var _this = this;\n\n  // When the user navigates within the same app, we can present them with\n  // a friendly confirmation dialog box\n  var deregister = this.$rootScope.$on('$locationChangeStart', function (event, newUrl) {\n    if (!checkDirty()) {\n      return;\n    }\n\n    // At this point, we know the dirty prompt should be shown, so\n    // cancel the location change event, and keep the user at\n    // their current location\n    event.preventDefault();\n\n    // Notify user about unsaved changes and ask the user for confirmation\n    // about navigating away (changing their location) anyway\n    var confirmModalOptions = {\n      onConfirm: function onConfirm() {\n        _this.deregister();\n        _this.$window.location.href = newUrl;\n      },\n      confirmButtonText: 'Discard Changes'\n    };\n\n    return _this.confirmModal(confirmMessage, confirmModalOptions);\n  });\n\n  this.deregisterListener = deregister;\n}\n\nfunction deregisterRouteChangeHandler() {\n  this.deregisterListener();\n}\n\nvar DirtyPrompt = exports.DirtyPrompt = function DirtyPrompt($window, $rootScope, confirmModal) {\n  var _this2 = this;\n\n  _classCallCheck(this, DirtyPrompt);\n\n  this.register = function (checkDirty) {\n    registerUrlChangeHandler.call(_this2, checkDirty);\n    registerRouteChangeHandler.call(_this2, checkDirty);\n  };\n\n  this.deregister = function () {\n    deregisterUrlChangeHandler.call(_this2);\n    deregisterRouteChangeHandler.call(_this2);\n  };\n\n  this.$window = $window;\n  this.$rootScope = $rootScope;\n  this.confirmModal = confirmModal;\n  this.deregisterListener = _lodash.noop;\n  this.beforeUnloadHandler = _lodash.noop;\n}\n\n/**\n * @param checkDirty function which returns a bool to call to\n *   determine dirty state\n */\n;",null]}