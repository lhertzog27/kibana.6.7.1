{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/public/expression_types/arg_type.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/public/expression_types/arg_type.js","mtime":1567631711930},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.argTypeRegistry = exports.ArgType = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _common = require('@kbn/interpreter/common');\n\nvar _base_form = require('./base_form');\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\nvar ArgType = exports.ArgType = function (_BaseForm) {\n  _inherits(ArgType, _BaseForm);\n\n  function ArgType(props) {\n    _classCallCheck(this, ArgType);\n\n    var _this = _possibleConstructorReturn(this, (ArgType.__proto__ || Object.getPrototypeOf(ArgType)).call(this, props));\n\n    _this.simpleTemplate = props.simpleTemplate;\n    _this.template = props.template;\n    _this.default = props.default;\n    _this.resolveArgValue = Boolean(props.resolveArgValue);\n    return _this;\n  }\n\n  return ArgType;\n}(_base_form.BaseForm);\n\nvar ArgTypeRegistry = function (_Registry) {\n  _inherits(ArgTypeRegistry, _Registry);\n\n  function ArgTypeRegistry() {\n    _classCallCheck(this, ArgTypeRegistry);\n\n    return _possibleConstructorReturn(this, (ArgTypeRegistry.__proto__ || Object.getPrototypeOf(ArgTypeRegistry)).apply(this, arguments));\n  }\n\n  _createClass(ArgTypeRegistry, [{\n    key: 'wrapper',\n    value: function wrapper(obj) {\n      return new ArgType(obj);\n    }\n  }]);\n\n  return ArgTypeRegistry;\n}(_common.Registry);\n\nvar argTypeRegistry = exports.argTypeRegistry = new ArgTypeRegistry();",null]}