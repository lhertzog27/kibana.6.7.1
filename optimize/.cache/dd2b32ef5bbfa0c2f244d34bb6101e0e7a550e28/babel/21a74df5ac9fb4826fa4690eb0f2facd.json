{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/legacy/core_plugins/kibana/common/tutorials/instruction_variant.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/legacy/core_plugins/kibana/common/tutorials/instruction_variant.js","mtime":1567631711538},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _DISPLAY_MAP;\n\nexports.getDisplayText = getDisplayText;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nvar INSTRUCTION_VARIANT = exports.INSTRUCTION_VARIANT = {\n  OSX: 'osx',\n  DEB: 'deb',\n  RPM: 'rpm',\n  DOCKER: 'docker',\n  WINDOWS: 'windows',\n  NODE: 'node',\n  DJANGO: 'django',\n  FLASK: 'flask',\n  RAILS: 'rails',\n  RACK: 'rack',\n  JS: 'js',\n  GO: 'go',\n  JAVA: 'java'\n};\n\nvar DISPLAY_MAP = (_DISPLAY_MAP = {}, _defineProperty(_DISPLAY_MAP, INSTRUCTION_VARIANT.OSX, 'macOS'), _defineProperty(_DISPLAY_MAP, INSTRUCTION_VARIANT.DEB, 'DEB'), _defineProperty(_DISPLAY_MAP, INSTRUCTION_VARIANT.RPM, 'RPM'), _defineProperty(_DISPLAY_MAP, INSTRUCTION_VARIANT.DOCKER, 'Docker'), _defineProperty(_DISPLAY_MAP, INSTRUCTION_VARIANT.WINDOWS, 'Windows'), _defineProperty(_DISPLAY_MAP, INSTRUCTION_VARIANT.NODE, 'Node.js'), _defineProperty(_DISPLAY_MAP, INSTRUCTION_VARIANT.DJANGO, 'Django'), _defineProperty(_DISPLAY_MAP, INSTRUCTION_VARIANT.FLASK, 'Flask'), _defineProperty(_DISPLAY_MAP, INSTRUCTION_VARIANT.RAILS, 'Ruby on Rails'), _defineProperty(_DISPLAY_MAP, INSTRUCTION_VARIANT.RACK, 'Rack'), _defineProperty(_DISPLAY_MAP, INSTRUCTION_VARIANT.JS, 'RUM (JS)'), _defineProperty(_DISPLAY_MAP, INSTRUCTION_VARIANT.GO, 'Go'), _defineProperty(_DISPLAY_MAP, INSTRUCTION_VARIANT.JAVA, 'Java'), _DISPLAY_MAP);\n\n/**\n * Convert instruction variant id into display text.\n *\n * @params {String} id - instruction variant id as defined from INSTRUCTION_VARIANT\n * @return {String} display name\n */\nfunction getDisplayText(id) {\n  if (id in DISPLAY_MAP) {\n    return DISPLAY_MAP[id];\n  }\n  return id;\n}",null]}