{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/rollup/public/crud_app/services/humanized_numbers.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/rollup/public/crud_app/services/humanized_numbers.js","mtime":1567631712290},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getOrdinalValue = getOrdinalValue;\nexports.getDayName = getDayName;\nexports.getMonthName = getMonthName;\n\nvar _i18n = require('@kbn/i18n');\n\n// The international ISO standard dictates Monday as the first day of the week, but cron patterns\n// use Sunday as the first day, so we're going with the cron way.\nvar dayOrdinalToDayNameMap = {\n  0: _i18n.i18n.translate('xpack.rollupJobs.util.day.sunday', { defaultMessage: 'Sunday' }),\n  1: _i18n.i18n.translate('xpack.rollupJobs.util.day.monday', { defaultMessage: 'Monday' }),\n  2: _i18n.i18n.translate('xpack.rollupJobs.util.day.tuesday', { defaultMessage: 'Tuesday' }),\n  3: _i18n.i18n.translate('xpack.rollupJobs.util.day.wednesday', { defaultMessage: 'Wednesday' }),\n  4: _i18n.i18n.translate('xpack.rollupJobs.util.day.thursday', { defaultMessage: 'Thursday' }),\n  5: _i18n.i18n.translate('xpack.rollupJobs.util.day.friday', { defaultMessage: 'Friday' }),\n  6: _i18n.i18n.translate('xpack.rollupJobs.util.day.saturday', { defaultMessage: 'Saturday' })\n}; /*\n    * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n    * or more contributor license agreements. Licensed under the Elastic License;\n    * you may not use this file except in compliance with the Elastic License.\n    */\n\nvar monthOrdinalToMonthNameMap = {\n  0: _i18n.i18n.translate('xpack.rollupJobs.util.month.january', { defaultMessage: 'January' }),\n  1: _i18n.i18n.translate('xpack.rollupJobs.util.month.february', { defaultMessage: 'February' }),\n  2: _i18n.i18n.translate('xpack.rollupJobs.util.month.march', { defaultMessage: 'March' }),\n  3: _i18n.i18n.translate('xpack.rollupJobs.util.month.april', { defaultMessage: 'April' }),\n  4: _i18n.i18n.translate('xpack.rollupJobs.util.month.may', { defaultMessage: 'May' }),\n  5: _i18n.i18n.translate('xpack.rollupJobs.util.month.june', { defaultMessage: 'June' }),\n  6: _i18n.i18n.translate('xpack.rollupJobs.util.month.july', { defaultMessage: 'July' }),\n  7: _i18n.i18n.translate('xpack.rollupJobs.util.month.august', { defaultMessage: 'August' }),\n  8: _i18n.i18n.translate('xpack.rollupJobs.util.month.september', { defaultMessage: 'September' }),\n  9: _i18n.i18n.translate('xpack.rollupJobs.util.month.october', { defaultMessage: 'October' }),\n  10: _i18n.i18n.translate('xpack.rollupJobs.util.month.november', { defaultMessage: 'November' }),\n  11: _i18n.i18n.translate('xpack.rollupJobs.util.month.december', { defaultMessage: 'December' })\n};\n\nfunction getOrdinalValue(number) {\n  // TODO: This is breaking reporting pdf generation. Possibly due to phantom not setting locale,\n  // which is needed by i18n (formatjs). Need to verify, fix, and restore i18n in place of static stings.\n  // return i18n.translate('xpack.rollupJobs.util.number.ordinal', {\n  //   defaultMessage: '{number, selectordinal, one{#st} two{#nd} few{#rd} other{#th}}',\n  //   values: { number },\n  // });\n\n  // Protects against falsey (including 0) values\n  var num = number && number.toString();\n  var lastDigit = num && num.substr(-1);\n  var ordinal = void 0;\n\n  if (!lastDigit) {\n    return number;\n  }\n  lastDigit = parseFloat(lastDigit);\n\n  switch (lastDigit) {\n    case 1:\n      ordinal = 'st';\n      break;\n    case 2:\n      ordinal = 'nd';\n      break;\n    case 3:\n      ordinal = 'rd';\n      break;\n    default:\n      ordinal = 'th';\n  }\n\n  return '' + num + ordinal;\n}\n\nfunction getDayName(dayOrdinal) {\n  return dayOrdinalToDayNameMap[dayOrdinal];\n}\n\nfunction getMonthName(monthOrdinal) {\n  return monthOrdinalToMonthNameMap[monthOrdinal];\n}",null]}