{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/maps/public/shared/layers/styles/heatmap_style.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/maps/public/shared/layers/styles/heatmap_style.js","mtime":1567631712022},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HeatmapStyle = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _grid_resolution = require('../grid_resolution');\n\nvar _abstract_style = require('./abstract_style');\n\nvar _i18n = require('@kbn/i18n');\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\nvar HeatmapStyle = exports.HeatmapStyle = function (_AbstractStyle) {\n  _inherits(HeatmapStyle, _AbstractStyle);\n\n  function HeatmapStyle() {\n    _classCallCheck(this, HeatmapStyle);\n\n    var _this = _possibleConstructorReturn(this, (HeatmapStyle.__proto__ || Object.getPrototypeOf(HeatmapStyle)).call(this));\n\n    _this._descriptor = HeatmapStyle.createDescriptor();\n    return _this;\n  }\n\n  _createClass(HeatmapStyle, [{\n    key: 'setMBPaintProperties',\n    value: function setMBPaintProperties(_ref) {\n      var mbMap = _ref.mbMap,\n          layerId = _ref.layerId,\n          propertyName = _ref.propertyName,\n          resolution = _ref.resolution;\n\n      var radius = void 0;\n      if (resolution === _grid_resolution.GRID_RESOLUTION.COARSE) {\n        radius = 64;\n      } else if (resolution === _grid_resolution.GRID_RESOLUTION.FINE) {\n        radius = 32;\n      } else if (resolution === _grid_resolution.GRID_RESOLUTION.MOST_FINE) {\n        radius = 16;\n      } else {\n        var errorMessage = _i18n.i18n.translate('xpack.maps.style.heatmap.resolutionStyleErrorMessage', {\n          defaultMessage: 'Resolution param not recognized: {resolution}',\n          values: { resolution: resolution }\n        });\n        throw new Error(errorMessage);\n      }\n      mbMap.setPaintProperty(layerId, 'heatmap-radius', radius);\n      mbMap.setPaintProperty(layerId, 'heatmap-weight', {\n        type: 'identity',\n        property: propertyName\n      });\n    }\n  }], [{\n    key: 'canEdit',\n    value: function canEdit(styleInstance) {\n      return styleInstance.constructor === HeatmapStyle;\n    }\n  }, {\n    key: 'createDescriptor',\n    value: function createDescriptor() {\n      return {\n        type: HeatmapStyle.type\n      };\n    }\n  }, {\n    key: 'getDisplayName',\n    value: function getDisplayName() {\n      return _i18n.i18n.translate('xpack.maps.style.heatmap.displayNameLabel', {\n        defaultMessage: 'Heatmap style'\n      });\n    }\n  }, {\n    key: 'renderEditor',\n    value: function renderEditor() {\n      return null;\n    }\n  }]);\n\n  return HeatmapStyle;\n}(_abstract_style.AbstractStyle);\n\nHeatmapStyle.type = 'HEATMAP';",null]}