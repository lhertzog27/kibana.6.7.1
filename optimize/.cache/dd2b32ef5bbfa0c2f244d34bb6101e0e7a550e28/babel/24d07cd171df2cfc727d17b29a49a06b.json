{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/jobs/new_job/simple/single_metric/create_job/create_job_service.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/jobs/new_job/simple/single_metric/create_job/create_job_service.js","mtime":1567631712060},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\nopyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\nor more contributor license agreements. Licensed under the Elastic License;\nyou may not use this file except in compliance with the Elastic License.\nn\nexports.SingleMetricJobServiceProvider = SingleMetricJobServiceProvider;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _parse_interval = require('ui/utils/parse_interval');\n\nvar _job_utils = require('plugins/ml/../common/util/job_utils');\n\nvar _general = require('plugins/ml/jobs/new_job/simple/components/constants/general');\n\nvar _string_utils = require('plugins/ml/util/string_utils');\n\nvar _field_format_service = require('plugins/ml/services/field_format_service');\n\nvar _job_service = require('plugins/ml/services/job_service');\n\nvar _results_service = require('plugins/ml/services/results_service');\n\nvar _new_job_utils = require('plugins/ml/jobs/new_job/utils/new_job_utils');\n\nvar _ml_api_service = require('plugins/ml/services/ml_api_service');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction SingleMetricJobServiceProvider() {\n  var SingleMetricJobService = function () {\n    function SingleMetricJobService() {\n      _classCallCheck(this, SingleMetricJobService);\n\n      this.chartData = {\n        line: [],\n        model: [],\n        swimlane: [],\n        hasBounds: false,\n        percentComplete: 0,\n        highestValue: 0,\n        chartTicksMargin: { width: 30 },\n        totalResults: 0\n      };\n      this.job = {};\n    }\n\n    _createClass(SingleMetricJobService, [{\n      key: 'getLineChartResults',\n      value: function getLineChartResults(formConfig) {\n        var _this = this;\n\n        return new Promise(function (resolve, reject) {\n\n          _this.chartData.line = [];\n          _this.chartData.model = [];\n          _this.chartData.swimlane = [];\n          _this.chartData.hasBounds = false;\n          _this.chartData.percentComplete = 0;\n          _this.chartData.loadingDifference = 0;\n          _this.chartData.eventRateHighestValue = 0;\n          _this.chartData.totalResults = 0;\n\n          var aggType = formConfig.agg.type.dslName;\n          if (formConfig.field && formConfig.field.id) {\n            _this.chartData.fieldFormat = _field_format_service.mlFieldFormatService.getFieldFormatFromIndexPattern(formConfig.indexPattern, formConfig.field.id, aggType);\n          } else {\n            delete _this.chartData.fieldFormat;\n          }\n\n          var obj = {\n            success: true,\n            results: {}\n          };\n\n          var searchJson = getSearchJsonFromConfig(formConfig);\n\n          _ml_api_service.ml.esSearch(searchJson).then(function (resp) {\n\n            var aggregationsByTime = _lodash2.default.get(resp, ['aggregations', 'times', 'buckets'], []);\n            var highestValue = void 0;\n            var lowestValue = void 0;\n\n            _lodash2.default.each(aggregationsByTime, function (dataForTime) {\n              var time = dataForTime.key;\n              var value = _lodash2.default.get(dataForTime, ['field_value', 'value']);\n\n              if (value === undefined && formConfig.field !== null) {\n                value = _lodash2.default.get(dataForTime, ['field_value', 'values', _job_utils.ML_MEDIAN_PERCENTS]);\n              }\n\n              if (value === undefined && formConfig.field === null) {\n                value = dataForTime.doc_count;\n              }\n              if (!isFinite(value) || dataForTime.doc_count === 0) {\n                value = null;\n              }\n\n              if (value !== null) {\n                highestValue = highestValue === undefined ? value : Math.max(value, highestValue);\n                lowestValue = lowestValue === undefined ? value : Math.min(value, lowestValue);\n              }\n\n              obj.results[time] = {\n                actual: value\n              };\n            });\n\n            _this.chartData.totalResults = resp.hits.total;\n            _this.chartData.line = processLineChartResults(obj.results);\n\n            // Calculate the width required for the chart ticks margin,\n            // which is the larger of the minimum or maximum value when formatted\n            lowestValue = lowestValue === undefined ? 0 : lowestValue;\n            highestValue = highestValue === undefined ? 1 : highestValue;\n\n            // For small ranges e.g 0.15 to 0.55 don't floor/ceil values as\n            // the resulting ints would require less width when rendering\n            var valueRange = highestValue - lowestValue;\n            if (valueRange > 1) {\n              lowestValue = Math.floor(lowestValue);\n              _this.chartData.highestValue = Math.ceil(highestValue);\n            } else {\n\n              _this.chartData.highestValue = highestValue;\n            }\n\n            var lowValueWidth = 0;\n            var highValueWidth = 0;\n            if (_this.chartData.fieldFormat !== undefined) {\n              var lowValueFormatted = _this.chartData.fieldFormat.convert(lowestValue, 'text');\n              var highValueFormatted = _this.chartData.fieldFormat.convert(_this.chartData.highestValue, 'text');\n              lowValueWidth = (0, _string_utils.calculateTextWidth)(lowValueFormatted, false);\n              highValueWidth = (0, _string_utils.calculateTextWidth)(highValueFormatted, false);\n            } else {\n              lowValueWidth = (0, _string_utils.calculateTextWidth)(lowestValue, true);\n              highValueWidth = (0, _string_utils.calculateTextWidth)(_this.chartData.highestValue, true);\n            }\n\n            // Append extra 10px to width of tick label for widest axis value to allow for tick padding.\n            _this.chartData.chartTicksMargin.width = Math.max(lowValueWidth, highValueWidth) + 10;\n\n            resolve(_this.chartData);\n          }).catch(function (resp) {\n            reject(resp);\n          });\n        });\n      }\n    }, {\n      key: 'getJobFromConfig',\n      value: function getJobFromConfig(formConfig) {\n        var _aggregations2, _aggregations3;\n\n        var job = _job_service.mlJobService.getBlankJob();\n        job.data_description.time_field = formConfig.timeField;\n\n        var func = formConfig.agg.type.mlName;\n        if (formConfig.isSparseData) {\n          if (formConfig.agg.type.dslName === 'count') {\n            func = func.replace(/count/, 'non_zero_count');\n          } else if (formConfig.agg.type.dslName === 'sum') {\n            func = func.replace(/sum/, 'non_null_sum');\n          }\n        }\n        var dtr = {\n          function: func\n        };\n\n        var query = formConfig.combinedQuery;\n\n        if (formConfig.field && formConfig.field.id) {\n          dtr.field_name = formConfig.field.id;\n        }\n        job.analysis_config.detectors.push(dtr);\n        job.analysis_config.bucket_span = formConfig.bucketSpan;\n\n        job.analysis_limits = {\n          model_memory_limit: formConfig.modelMemoryLimit\n        };\n\n        delete job.data_description.field_delimiter;\n        delete job.data_description.quote_character;\n        delete job.data_description.time_format;\n        delete job.data_description.format;\n\n        var bucketSpanSeconds = (0, _parse_interval.parseInterval)(formConfig.bucketSpan).asSeconds();\n\n        var indices = formConfig.indexPattern.title.split(',').map(function (i) {\n          return i.trim();\n        });\n        job.datafeed_config = {\n          query: query,\n          indices: indices\n        };\n\n        job.job_id = formConfig.jobId;\n        job.description = formConfig.description;\n        job.groups = formConfig.jobGroups;\n\n        job.model_plot_config = {\n          enabled: true\n        };\n\n        if (formConfig.useDedicatedIndex) {\n          job.results_index_name = job.job_id;\n        }\n\n        if (formConfig.usesSavedSearch === false) {\n          // Jobs created from saved searches cannot be cloned in the wizard as the\n          // ML job config holds no reference to the saved search ID.\n          job.custom_settings = {\n            created_by: _general.WIZARD_TYPE.SINGLE_METRIC\n          };\n        }\n\n        // Use the original es agg type rather than the ML version\n        // e.g. count rather than high_count\n        var aggType = formConfig.agg.type.dslName;\n        var interval = bucketSpanSeconds * 1000;\n        switch (aggType) {\n          case 'count':\n            job.analysis_config.summary_count_field_name = 'doc_count';\n\n            job.datafeed_config.aggregations = {\n              buckets: {\n                date_histogram: {\n                  field: formConfig.timeField,\n                  interval: interval\n                },\n                aggregations: _defineProperty({}, formConfig.timeField, {\n                  max: {\n                    field: formConfig.timeField\n                  }\n                })\n              }\n            };\n            break;\n          case 'avg':\n          case 'median':\n          case 'sum':\n          case 'min':\n          case 'max':\n            job.analysis_config.summary_count_field_name = 'doc_count';\n\n            job.datafeed_config.aggregations = {\n              buckets: {\n                date_histogram: {\n                  field: formConfig.timeField,\n                  interval: interval / 100 * 10 // use 10% of bucketSpan to allow for better sampling\n                },\n                aggregations: (_aggregations2 = {}, _defineProperty(_aggregations2, dtr.field_name, _defineProperty({}, aggType, {\n                  field: formConfig.field.name\n                })), _defineProperty(_aggregations2, formConfig.timeField, {\n                  max: {\n                    field: formConfig.timeField\n                  }\n                }), _aggregations2)\n              }\n            };\n            break;\n          case 'cardinality':\n            job.analysis_config.summary_count_field_name = 'dc_' + dtr.field_name;\n\n            job.datafeed_config.aggregations = {\n              buckets: {\n                date_histogram: {\n                  field: formConfig.timeField,\n                  interval: interval\n                },\n                aggregations: (_aggregations3 = {}, _defineProperty(_aggregations3, formConfig.timeField, {\n                  max: {\n                    field: formConfig.timeField\n                  }\n                }), _defineProperty(_aggregations3, job.analysis_config.summary_count_field_name, _defineProperty({}, aggType, {\n                  field: formConfig.field.name\n                })), _aggregations3)\n              }\n            };\n\n            // finally, modify the detector before saving\n            dtr.function = 'non_zero_count';\n            // add a description using the original function name rather 'non_zero_count'\n            // as the user may not be aware it's been changed\n            dtr.detector_description = func + ' (' + dtr.field_name + ')';\n            delete dtr.field_name;\n\n            break;\n          default:\n            break;\n        }\n\n        return job;\n      }\n    }, {\n      key: 'createJob',\n      value: function createJob(formConfig) {\n        var _this2 = this;\n\n        return new Promise(function (resolve, reject) {\n\n          _this2.job = _this2.getJobFromConfig(formConfig);\n          var job = (0, _new_job_utils.createJobForSaving)(_this2.job);\n\n          // DO THE SAVE\n          _job_service.mlJobService.saveNewJob(job).then(function (resp) {\n            if (resp.success) {\n              resolve(_this2.job);\n            } else {\n              reject(resp);\n            }\n          });\n        });\n      }\n    }, {\n      key: 'startDatafeed',\n      value: function startDatafeed(formConfig) {\n        var datafeedId = _job_service.mlJobService.getDatafeedId(formConfig.jobId);\n        return _job_service.mlJobService.startDatafeed(datafeedId, formConfig.jobId, formConfig.start, formConfig.end);\n      }\n    }, {\n      key: 'stopDatafeed',\n      value: function stopDatafeed(formConfig) {\n        var datafeedId = _job_service.mlJobService.getDatafeedId(formConfig.jobId);\n        return _job_service.mlJobService.stopDatafeed(datafeedId, formConfig.jobId);\n      }\n    }, {\n      key: 'checkDatafeedState',\n      value: function checkDatafeedState(formConfig) {\n        return _job_service.mlJobService.updateSingleJobDatafeedState(formConfig.jobId);\n      }\n    }, {\n      key: 'loadModelData',\n      value: function loadModelData(formConfig) {\n        var _this3 = this;\n\n        return new Promise(function (resolve, reject) {\n\n          var start = formConfig.start;\n\n          if (_this3.chartData.model.length > 5) {\n            // only load the model since the end of the last time we checked\n            // but discard the last 5 buckets in case the model has changed\n            start = _this3.chartData.model[_this3.chartData.model.length - 5].time;\n            for (var i = 0; i < 5; i++) {\n              _this3.chartData.model.pop();\n            }\n          }\n\n          // Obtain the model plot data, passing 0 for the detectorIndex and empty list of partitioning fields.\n          _results_service.mlResultsService.getModelPlotOutput(formConfig.jobId, 0, [], start, formConfig.end, formConfig.resultsIntervalSeconds + 's', formConfig.agg.type.mlModelPlotAgg).then(function (data) {\n            // for count, scale the model upper and lower by the\n            // ratio of chart interval to bucketspan.\n            // this will force the model bounds to be drawn in the correct location\n            var scale = 1;\n            if (formConfig && (formConfig.agg.type.mlName === 'count' || formConfig.agg.type.mlName === 'high_count' || formConfig.agg.type.mlName === 'low_count' || formConfig.agg.type.mlName === 'distinct_count')) {\n              var chartIntervalSeconds = formConfig.chartInterval.getInterval().asSeconds();\n              var bucketSpan = (0, _parse_interval.parseInterval)(formConfig.bucketSpan);\n              if (bucketSpan !== null) {\n                scale = chartIntervalSeconds / bucketSpan.asSeconds();\n              }\n            }\n\n            _this3.chartData.model = _this3.chartData.model.concat(processLineChartResults(data.results, scale));\n\n            var lastBucket = _this3.chartData.model[_this3.chartData.model.length - 1];\n            var time = lastBucket !== undefined ? lastBucket.time : formConfig.start;\n\n            var pcnt = (time - formConfig.start + formConfig.resultsIntervalSeconds) / (formConfig.end - formConfig.start) * 100;\n            _this3.chartData.percentComplete = Math.round(pcnt);\n\n            resolve(_this3.chartData);\n          }).catch(function () {\n            reject(_this3.chartData);\n          });\n        });\n      }\n    }, {\n      key: 'loadSwimlaneData',\n      value: function loadSwimlaneData(formConfig) {\n        var _this4 = this;\n\n        return new Promise(function (resolve) {\n\n          _results_service.mlResultsService.getScoresByBucket([formConfig.jobId], formConfig.start, formConfig.end, formConfig.resultsIntervalSeconds + 's', 1).then(function (data) {\n            var jobResults = data.results[formConfig.jobId];\n            _this4.chartData.swimlane = processSwimlaneResults(jobResults);\n            _this4.chartData.swimlaneInterval = formConfig.resultsIntervalSeconds * 1000;\n            resolve(_this4.chartData);\n          }).catch(function () {\n            resolve(_this4.chartData);\n          });\n        });\n      }\n    }]);\n\n    return SingleMetricJobService;\n  }();\n\n  return new SingleMetricJobService();\n}\n\nfunction processLineChartResults(data) {\n  var scale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n\n  var lineData = [];\n  _lodash2.default.each(data, function (dataForTime, t) {\n    var time = +t;\n    var date = new Date(time);\n    lineData.push({\n      date: date,\n      time: time,\n      lower: dataForTime.modelLower * scale,\n      value: dataForTime.actual,\n      upper: dataForTime.modelUpper * scale\n    });\n  });\n\n  return _lodash2.default.sortBy(lineData, 'time');\n}\n\nfunction processSwimlaneResults(bucketScoreData, init) {\n  // create a dataset in format used by the model plot chart.\n  // create empty swimlane dataset\n  // i.e. array of Objects with keys date (JavaScript date), value, lower and upper.\n  var swimlaneData = [];\n  _lodash2.default.each(bucketScoreData, function (value, t) {\n    var time = +t;\n    var date = new Date(time);\n    value = init ? 0 : value;\n    swimlaneData.push({\n      date: date,\n      time: time,\n      value: value,\n      color: ''\n    });\n  });\n  return swimlaneData;\n}\n\nfunction getSearchJsonFromConfig(formConfig) {\n  var interval = formConfig.chartInterval.getInterval().asMilliseconds() + 'ms';\n  // clone the query as we're modifying it\n  var query = _lodash2.default.cloneDeep(formConfig.combinedQuery);\n\n  var json = {\n    index: formConfig.indexPattern.title,\n    size: 0,\n    rest_total_hits_as_int: true,\n    body: {\n      query: {},\n      aggs: {\n        times: {\n          date_histogram: {\n            field: formConfig.timeField,\n            interval: interval,\n            min_doc_count: 0,\n            extended_bounds: {\n              min: formConfig.start,\n              max: formConfig.end\n            }\n          }\n        }\n      }\n    }\n  };\n\n  query.bool.must.push({\n    range: _defineProperty({}, formConfig.timeField, {\n      gte: formConfig.start,\n      lte: formConfig.end,\n      format: formConfig.format\n    })\n  });\n\n  json.body.query = query;\n\n  if (formConfig.field !== null) {\n    json.body.aggs.times.aggs = {\n      field_value: _defineProperty({}, formConfig.agg.type.dslName, { field: formConfig.field.name })\n    };\n  }\n\n  return json;\n}",null]}