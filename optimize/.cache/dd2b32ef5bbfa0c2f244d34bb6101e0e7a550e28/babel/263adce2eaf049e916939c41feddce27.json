{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/searchprofiler/public/app.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/searchprofiler/public/app.js","mtime":1567631712294},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }(); /*\nopyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          * or more contributor license agreements. Licensed under the Elastic License;\nyou may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          */\n\n// K5 imports\n\n\n// License\n\n\n// Our imports\n\n\n// Styles and templates\n\n\nvar _modules = require('ui/modules');\n\nvar _routes = require('ui/routes');\n\nvar _routes2 = _interopRequireDefault(_routes);\n\nvar _notify = require('ui/notify');\n\nvar _xpack_info = require('plugins/xpack_main/services/xpack_info');\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nrequire('ace');\n\nrequire('angular-ui-ace');\n\nrequire('plugins/searchprofiler/directives');\n\nvar _range = require('./range');\n\nvar _ns_to_pretty = require('plugins/searchprofiler/filters/ns_to_pretty');\n\nvar _ms_to_pretty = require('plugins/searchprofiler/filters/ms_to_pretty');\n\nvar _app_util = require('plugins/searchprofiler/app_util.js');\n\nrequire('ui/autoload/all');\n\nvar _index = require('./templates/index.html');\n\nvar _index2 = _interopRequireDefault(_index);\n\nvar _default_query = require('./templates/default_query');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_routes2.default.when('/dev_tools/searchprofiler', {\n  template: _index2.default,\n  controller: function controller($scope, i18n) {\n    $scope.registerLicenseLinkLabel = i18n('xpack.searchProfiler.registerLicenseLinkLabel', { defaultMessage: 'register a license' });\n    $scope.trialLicense = i18n('xpack.searchProfiler.trialLicenseTitle', { defaultMessage: 'Trial' });\n    $scope.basicLicense = i18n('xpack.searchProfiler.basicLicenseTitle', { defaultMessage: 'Basic' });\n    $scope.goldLicense = i18n('xpack.searchProfiler.goldLicenseTitle', { defaultMessage: 'Gold' });\n    $scope.platinumLicense = i18n('xpack.searchProfiler.platinumLicenseTitle', { defaultMessage: 'Platinum' });\n  }\n});\n\n_modules.uiModules.get('app/searchprofiler', ['ui.bootstrap.buttons', 'ui.ace']).controller('profileViz', profileVizController).filter('nsToPretty', function () {\n  return _ns_to_pretty.nsToPretty;\n}).filter('msToPretty', function () {\n  return _ms_to_pretty.msToPretty;\n}).factory('HighlightService', function () {\n  var service = {\n    details: null\n  };\n  return service;\n});\n\nfunction profileVizController($scope, $route, $interval, $http, HighlightService, Private) {\n  $scope.title = 'Search Profile';\n  $scope.description = 'Search profiling and visualization';\n  $scope.profileResponse = [];\n  $scope.highlight = HighlightService;\n\n  // TODO this map controls which tab is active, but due to how\n  // the tab directive works, we cannot use a single variable to hold the state.\n  // Instead we have to map the tab name to true/false, and make sure only one\n  // state is active.  This should be refactored if possible, as it could be trappy!\n  $scope.activeTab = {\n    search: true\n  };\n  $scope.markers = [];\n  $scope.query = _default_query.defaultQuery;\n  var xpackInfo = Private(_xpack_info.XPackInfoProvider);\n  $scope.licenseEnabled = xpackInfo.get('features.searchprofiler.enableAppLink');\n\n  $scope.aceLoaded = function (_editor) {\n    $scope.ace = _editor;\n    $scope.ace.$blockScrolling = Infinity;\n    $scope.ace.setReadOnly(!$scope.licenseEnabled);\n    if (!$scope.licenseEnabled) {\n      $scope.ace.container.style.pointerEvents = 'none';\n      $scope.ace.container.style.opacity = 0.5;\n      $scope.ace.renderer.setStyle('disabled', true);\n      $scope.ace.blur();\n    }\n  };\n\n  $scope.profile = function () {\n    if (!$scope.licenseEnabled) {\n      return;\n    }\n    // Reset right detail panel\n    $scope.resetHighlightPanel();\n    var json = (0, _app_util.checkForParseErrors)($scope.query);\n    if (json.status === false) {\n      _notify.notify.error(json.error);\n      return;\n    }\n    json = json.parsed;\n\n    // If we can find the start of a profile JSON output, just try to render it\n    // without executing\n    if (json.profile && json.profile.shards) {\n      $scope.renderProfile(json.profile.shards);\n    } else {\n      // Otherwise it's (probably) a regular search, execute remotely\n      var requestBody = {\n        query: $scope.query\n      };\n      if ($scope.index == null || $scope.index === '') {\n        requestBody.index = '_all';\n      } else {\n        requestBody.index = $scope.index;\n      }\n      if (!$scope.type === '') {\n        requestBody.type = $scope.type;\n      }\n      $scope.executeRemoteQuery(requestBody);\n    }\n  };\n\n  $scope.executeRemoteQuery = function (requestBody) {\n    $http.post('../api/searchprofiler/profile', requestBody).then(function (resp) {\n      if (!resp.data.ok) {\n        _notify.notify.error(resp.data.err.msg);\n\n        try {\n          var regex = /line=([0-9]+) col=([0-9]+)/g;\n\n          var _regex$exec = regex.exec(resp.data.err.msg),\n              _regex$exec2 = _slicedToArray(_regex$exec, 3),\n              row = _regex$exec2[1],\n              column = _regex$exec2[2];\n\n          $scope.markers.push($scope.ace.session.addMarker(new _range.Range(row - 1, 0, row - 1, column), 'errorMarker', 'fullLine'));\n        } catch (e) {\n          // Best attempt, not a big deal if we can't highlight the line\n        }\n\n        return;\n      }\n\n      $scope.renderProfile(resp.data.resp.profile.shards);\n    }).catch(_notify.notify.error);\n  };\n\n  $scope.renderProfile = function (data) {\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = data[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var shard = _step.value;\n\n        shard.id = shard.id.match(/\\[([^\\]\\[]*?)\\]/g);\n        shard.id = _lodash2.default.map(shard.id, function (id) {\n          return id.replace('[', '').replace(']', '');\n        });\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    $scope.hasAggregations = data[0].aggregations != null && data[0].aggregations.length > 0;\n    $scope.hasSearch = data[0].searches != null && data[0].searches.length > 0;\n    $scope.profileResponse = data;\n    if (!$scope.hasAggregations) {\n      // No aggs, reset back to search panel\n      $scope.activateTab('search');\n    }\n  };\n\n  $scope.activateTab = function (tab) {\n    // Reset right detail panel\n    $scope.resetHighlightPanel();\n    // Reset active tab map\n    $scope.activeTab = {};\n    if (tab === 'aggregations' && $scope.hasAggregations) {\n      $scope.activeTab.aggregations = true;\n    } else {\n      // Everything has a search, so default to this\n      $scope.activeTab.search = true;\n    }\n  };\n\n  $scope.resetHighlightPanel = function () {\n    $scope.highlight.details = null;\n  };\n}",null]}