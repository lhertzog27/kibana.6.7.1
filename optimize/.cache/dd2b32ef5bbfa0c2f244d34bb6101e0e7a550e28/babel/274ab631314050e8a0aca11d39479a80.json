{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/packages/kbn-interpreter/target/plugin/types/datatable.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/packages/kbn-interpreter/target/plugin/types/datatable.js","mtime":1567666389841},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.datatable = undefined;\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _lodash = require('lodash');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : { default: obj };\n}\n\nvar datatable = exports.datatable = function datatable() {\n  return {\n    name: 'datatable',\n    validate: function validate(datatable) {\n      // TODO: Check columns types. Only string, boolean, number, date, allowed for now.\n      if (!datatable.columns) {\n        throw new Error('datatable must have a columns array, even if it is empty');\n      }\n\n      if (!datatable.rows) throw new Error('datatable must have a rows array, even if it is empty');\n    },\n    serialize: function serialize(datatable) {\n      var columns = datatable.columns,\n          rows = datatable.rows;\n\n      return (0, _extends3.default)({}, datatable, {\n        rows: rows.map(function (row) {\n          return columns.map(function (column) {\n            return row[column.name];\n          });\n        })\n      });\n    },\n    deserialize: function deserialize(datatable) {\n      var columns = datatable.columns,\n          rows = datatable.rows;\n\n      return (0, _extends3.default)({}, datatable, {\n        rows: rows.map(function (row) {\n          return (0, _lodash.zipObject)((0, _lodash.map)(columns, 'name'), row);\n        })\n      });\n    },\n    from: {\n      null: function _null() {\n        return {\n          type: 'datatable',\n          rows: [],\n          columns: []\n        };\n      },\n      pointseries: function pointseries(context) {\n        return {\n          type: 'datatable',\n          rows: context.rows,\n          columns: (0, _lodash.map)(context.columns, function (val, name) {\n            return { name: name, type: val.type, role: val.role };\n          })\n        };\n      }\n    },\n    to: {\n      render: function render(datatable) {\n        return {\n          type: 'render',\n          as: 'table',\n          value: {\n            datatable: datatable,\n            paginate: true,\n            perPage: 10,\n            showHeader: true\n          }\n        };\n      },\n      pointseries: function pointseries(datatable) {\n        // datatable columns are an array that looks like [{ name: \"one\", type: \"string\" }, { name: \"two\", type: \"string\" }]\n        // rows look like [{ one: 1, two: 2}, { one: 3, two: 4}, ...]\n        var validFields = ['x', 'y', 'color', 'size', 'text'];\n        var columns = datatable.columns.filter(function (column) {\n          return validFields.includes(column.name);\n        });\n        var rows = datatable.rows.map(function (row) {\n          return (0, _lodash.pick)(row, validFields);\n        });\n\n        return {\n          type: 'pointseries',\n          columns: columns.reduce(function (acc, column) {\n            /* pointseries columns are an object that looks like this\n             * {\n             *   x: { type: \"string\", expression: \"x\", role: \"dimension\" },\n             *   y: { type: \"string\", expression: \"y\", role: \"dimension\" }\n             * }\n             */\n            acc[column.name] = {\n              type: column.type,\n              expression: column.name,\n              role: 'dimension'\n            };\n\n            return acc;\n          }, {}),\n          rows: rows\n        };\n      }\n    }\n  };\n}; /*\n    * Licensed to Elasticsearch B.V. under one or more contributor\n    * license agreements. See the NOTICE file distributed with\n    * this work for additional information regarding copyright\n    * ownership. Elasticsearch B.V. licenses this file to you under\n    * the Apache License, Version 2.0 (the \"License\"); you may\n    * not use this file except in compliance with the License.\n    * You may obtain a copy of the License at\n    *\n    *    http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing,\n    * software distributed under the License is distributed on an\n    * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n    * KIND, either express or implied.  See the License for the\n    * specific language governing permissions and limitations\n    * under the License.\n    */",null]}