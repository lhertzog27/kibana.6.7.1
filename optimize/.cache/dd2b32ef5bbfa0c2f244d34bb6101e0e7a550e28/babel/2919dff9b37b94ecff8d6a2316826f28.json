{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/canvas_plugin_src/functions/common/plot/get_font_spec.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/canvas_plugin_src/functions/common/plot/get_font_spec.js","mtime":1567631711898},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getFontSpec = exports.defaultSpec = undefined;\n\nvar _fonts = require('../../../../common/lib/fonts');\n\n// converts the output of the font function to a flot font spec\n// for font spec, see https://github.com/flot/flot/blob/master/API.md#customizing-the-axes\nvar defaultSpec = exports.defaultSpec = {\n  size: 14,\n  lHeight: 21,\n  style: 'normal',\n  weight: 'normal',\n  family: _fonts.openSans.value,\n  color: '#000'\n}; /*\n    * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n    * or more contributor license agreements. Licensed under the Elastic License;\n    * you may not use this file except in compliance with the Elastic License.\n    */\n\nvar getFontSpec = exports.getFontSpec = function getFontSpec(argFont) {\n  if (!argFont || !argFont.spec) {\n    return defaultSpec;\n  }\n\n  var _argFont$spec = argFont.spec,\n      fontSize = _argFont$spec.fontSize,\n      lineHeight = _argFont$spec.lineHeight,\n      fontStyle = _argFont$spec.fontStyle,\n      fontWeight = _argFont$spec.fontWeight,\n      fontFamily = _argFont$spec.fontFamily,\n      color = _argFont$spec.color;\n\n  var size = fontSize && Number(fontSize.replace('px', ''));\n  var lHeight = typeof lineHeight === 'string' && Number(lineHeight.replace('px', ''));\n\n  return {\n    size: !isNaN(size) ? size : defaultSpec.size,\n    lHeight: !isNaN(size) ? lHeight : defaultSpec.lHeight,\n    style: fontStyle || defaultSpec.style,\n    weight: fontWeight || defaultSpec.weight,\n    family: fontFamily || defaultSpec.family,\n    color: color || defaultSpec.color\n  };\n};",null]}