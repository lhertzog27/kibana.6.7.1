{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/remote_clusters/public/sections/remote_cluster_list/remote_cluster_table/remote_cluster_table.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/remote_clusters/public/sections/remote_cluster_list/remote_cluster_table/remote_cluster_table.js","mtime":1567631712123},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RemoteClusterTable = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _class, _temp; /*\n                    * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                    * or more contributor license agreements. Licensed under the Elastic License;\n                    * you may not use this file except in compliance with the Elastic License.\n                    */\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _react3 = require('@kbn/i18n/react');\n\nvar _i18n = require('@kbn/i18n');\n\nvar _eui = require('@elastic/eui');\n\nvar _constants = require('../../../constants');\n\nvar _services = require('../../../services');\n\nvar _components = require('../components');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar RemoteClusterTable = exports.RemoteClusterTable = (0, _react3.injectI18n)((_temp = _class = function (_Component) {\n  _inherits(_class, _Component);\n\n  function _class(props) {\n    _classCallCheck(this, _class);\n\n    var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this, props));\n\n    _this.onSearch = function (_ref) {\n      var query = _ref.query;\n      var text = query.text;\n\n      var normalizedSearchText = text.toLowerCase();\n      _this.setState({\n        queryText: normalizedSearchText\n      });\n    };\n\n    _this.getFilteredClusters = function () {\n      var clusters = _this.props.clusters;\n      var queryText = _this.state.queryText;\n\n\n      if (queryText) {\n        return clusters.filter(function (cluster) {\n          var name = cluster.name,\n              seeds = cluster.seeds;\n\n          var normalizedName = name.toLowerCase();\n          if (normalizedName.toLowerCase().includes(queryText)) {\n            return true;\n          }\n\n          return seeds.some(function (seed) {\n            return seed.includes(queryText);\n          });\n        });\n      } else {\n        return clusters.slice(0);\n      }\n    };\n\n    _this.state = {\n      queryText: undefined,\n      selectedItems: []\n    };\n    return _this;\n  }\n\n  _createClass(_class, [{\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var _props = this.props,\n          openDetailPanel = _props.openDetailPanel,\n          intl = _props.intl;\n      var selectedItems = this.state.selectedItems;\n\n\n      var columns = [{\n        field: 'name',\n        name: intl.formatMessage({\n          id: 'xpack.remoteClusters.remoteClusterList.table.nameColumnTitle',\n          defaultMessage: 'Name'\n        }),\n        sortable: true,\n        truncateText: false,\n        render: function render(name, _ref2) {\n          var isConfiguredByNode = _ref2.isConfiguredByNode;\n\n          var link = _react2.default.createElement(\n            _eui.EuiLink,\n            {\n              'data-test-subj': 'remoteClusterTableRowName-' + name,\n              onClick: function onClick() {\n                return openDetailPanel(name);\n              }\n            },\n            name\n          );\n\n          if (isConfiguredByNode) {\n            return _react2.default.createElement(\n              _eui.EuiFlexGroup,\n              { gutterSize: 's', alignItems: 'center' },\n              _react2.default.createElement(\n                _eui.EuiFlexItem,\n                { grow: false },\n                link\n              ),\n              _react2.default.createElement(\n                _eui.EuiFlexItem,\n                { grow: false },\n                _react2.default.createElement(_eui.EuiIconTip, {\n                  type: 'iInCircle',\n                  color: 'subdued',\n                  content: _react2.default.createElement(_react3.FormattedMessage, {\n                    id: 'xpack.remoteClusters.remoteClusterList.table.isConfiguredByNodeMessage',\n                    defaultMessage: 'Defined in elasticsearch.yml'\n                  })\n                })\n              )\n            );\n          }\n\n          return link;\n        }\n      }, {\n        field: 'seeds',\n        name: intl.formatMessage({\n          id: 'xpack.remoteClusters.remoteClusterList.table.seedsColumnTitle',\n          defaultMessage: 'Seeds'\n        }),\n        truncateText: true,\n        render: function render(seeds) {\n          return seeds.join(', ');\n        }\n      }, {\n        field: 'isConnected',\n        name: intl.formatMessage({\n          id: 'xpack.remoteClusters.remoteClusterList.table.connectedColumnTitle',\n          defaultMessage: 'Connection'\n        }),\n        sortable: true,\n        render: function render(isConnected) {\n          return _react2.default.createElement(_components.ConnectionStatus, { isConnected: isConnected });\n        },\n        width: '160px'\n      }, {\n        field: 'connectedNodesCount',\n        name: intl.formatMessage({\n          id: 'xpack.remoteClusters.remoteClusterList.table.connectedNodesColumnTitle',\n          defaultMessage: 'Connected nodes'\n        }),\n        sortable: true,\n        width: '160px'\n      }, {\n        name: intl.formatMessage({\n          id: 'xpack.remoteClusters.remoteClusterList.table.actionsColumnTitle',\n          defaultMessage: 'Actions'\n        }),\n        width: '100px',\n        actions: [{\n          render: function render(_ref3) {\n            var name = _ref3.name,\n                isConfiguredByNode = _ref3.isConfiguredByNode;\n\n            var label = isConfiguredByNode ? _i18n.i18n.translate('xpack.remoteClusters.remoteClusterList.table.actionBlockedDeleteDescription', {\n              defaultMessage: 'Remote clusters defined in elasticsearch.yml can\\'t be deleted'\n            }) : _i18n.i18n.translate('xpack.remoteClusters.remoteClusterList.table.actionDeleteDescription', {\n              defaultMessage: 'Delete remote cluster'\n            });\n\n            return _react2.default.createElement(\n              _eui.EuiToolTip,\n              {\n                content: label,\n                delay: 'long'\n              },\n              _react2.default.createElement(\n                _components.RemoveClusterButtonProvider,\n                { clusterNames: [name] },\n                function (removeCluster) {\n                  return _react2.default.createElement(_eui.EuiButtonIcon, {\n                    'data-test-subj': 'remoteClusterTableRowRemoveButton-' + name,\n                    'aria-label': label,\n                    iconType: 'trash',\n                    color: 'danger',\n                    isDisabled: isConfiguredByNode,\n                    onClick: removeCluster\n                  });\n                }\n              )\n            );\n          }\n        }, {\n          render: function render(_ref4) {\n            var name = _ref4.name,\n                isConfiguredByNode = _ref4.isConfiguredByNode;\n\n            var label = isConfiguredByNode ? _i18n.i18n.translate('xpack.remoteClusters.remoteClusterList.table.actionBlockedEditDescription', {\n              defaultMessage: 'Remote clusters defined in elasticsearch.yml can\\'t be edited'\n            }) : _i18n.i18n.translate('xpack.remoteClusters.remoteClusterList.table.actionEditDescription', {\n              defaultMessage: 'Edit remote cluster'\n            });\n\n            return _react2.default.createElement(\n              _eui.EuiToolTip,\n              {\n                content: label,\n                delay: 'long'\n              },\n              _react2.default.createElement(_eui.EuiButtonIcon, _extends({\n                'data-test-subj': 'remoteClusterTableRowEditButton-' + name,\n                'aria-label': label,\n                iconType: 'pencil',\n                color: 'primary',\n                isDisabled: isConfiguredByNode\n              }, (0, _services.getRouterLinkProps)(_constants.CRUD_APP_BASE_PATH + '/edit/' + name), {\n                disabled: isConfiguredByNode\n              }))\n            );\n          }\n        }]\n      }];\n\n      var sorting = {\n        sort: {\n          field: 'name',\n          direction: 'asc'\n        }\n      };\n\n      var search = {\n        toolsLeft: selectedItems.length ? _react2.default.createElement(\n          _components.RemoveClusterButtonProvider,\n          { clusterNames: selectedItems.map(function (_ref5) {\n              var name = _ref5.name;\n              return name;\n            }) },\n          function (removeCluster) {\n            return _react2.default.createElement(\n              _eui.EuiButton,\n              {\n                color: 'danger',\n                onClick: removeCluster\n              },\n              _react2.default.createElement(_react3.FormattedMessage, {\n                id: 'xpack.remoteClusters.remoteClusterList.table.removeButtonLabel',\n                defaultMessage: 'Remove {count, plural, one {remote cluster} other {{count} remote clusters}}',\n                values: {\n                  count: selectedItems.length\n                }\n              })\n            );\n          }\n        ) : undefined,\n        onChange: this.onSearch,\n        box: {\n          incremental: true\n        }\n      };\n\n      var pagination = {\n        initialPageSize: 20,\n        pageSizeOptions: [10, 20, 50]\n      };\n\n      var selection = {\n        onSelectionChange: function onSelectionChange(selectedItems) {\n          return _this2.setState({ selectedItems: selectedItems });\n        },\n        selectable: function selectable(_ref6) {\n          var isConfiguredByNode = _ref6.isConfiguredByNode;\n          return !isConfiguredByNode;\n        }\n      };\n\n      var filteredClusters = this.getFilteredClusters();\n\n      return _react2.default.createElement(_eui.EuiInMemoryTable, {\n        items: filteredClusters,\n        itemId: 'name',\n        columns: columns,\n        search: search,\n        pagination: pagination,\n        sorting: sorting,\n        selection: selection,\n        isSelectable: true\n      });\n    }\n  }]);\n\n  return _class;\n}(_react.Component), _class.propTypes = {\n  clusters: _propTypes2.default.array,\n  openDetailPanel: _propTypes2.default.func.isRequired\n}, _class.defaultProps = {\n  clusters: []\n}, _temp));",null]}