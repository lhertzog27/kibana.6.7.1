{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/monitoring/public/views/license/controller.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/monitoring/public/views/license/controller.js","mtime":1567631712102},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LicenseViewController = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\nopyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\nor more contributor license agreements. Licensed under the Elastic License;\nyou may not use this file except in compliance with the Elastic License.\nn\nvar _lodash = require('lodash');\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = require('react-dom');\n\nvar _chrome = require('ui/chrome');\n\nvar _chrome2 = _interopRequireDefault(_chrome);\n\nvar _formatting = require('../../../common/formatting');\n\nvar _components = require('plugins/xpack_main/components');\n\nvar _components2 = require('plugins/monitoring/components');\n\nvar _timefilter = require('ui/timefilter');\n\nvar _i18n = require('ui/i18n');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar REACT_NODE_ID = 'licenseReact';\n\nvar LicenseViewController = exports.LicenseViewController = function () {\n  function LicenseViewController($injector, $scope, i18n) {\n    _classCallCheck(this, LicenseViewController);\n\n    _timefilter.timefilter.disableTimeRangeSelector();\n    _timefilter.timefilter.disableAutoRefreshSelector();\n\n    $scope.$on('$destroy', function () {\n      (0, _reactDom.unmountComponentAtNode)(document.getElementById(REACT_NODE_ID));\n    });\n\n    this.init($injector, $scope, i18n);\n  }\n\n  _createClass(LicenseViewController, [{\n    key: 'init',\n    value: function init($injector, $scope, i18n) {\n      var globalState = $injector.get('globalState');\n      var title = $injector.get('title');\n      var $route = $injector.get('$route');\n\n      var cluster = (0, _lodash.find)($route.current.locals.clusters, { cluster_uuid: globalState.cluster_uuid });\n      $scope.cluster = cluster;\n      var routeTitle = i18n('xpack.monitoring.license.licenseRouteTitle', {\n        defaultMessage: 'License'\n      });\n      title($scope.cluster, routeTitle);\n\n      this.license = cluster.license;\n      this.isExpired = Date.now() > (0, _lodash.get)(cluster, 'license.expiry_date_in_millis');\n      this.isPrimaryCluster = cluster.isPrimary;\n\n      var basePath = _chrome2.default.getBasePath();\n      this.uploadLicensePath = basePath + '/app/kibana#' + _components.MANAGEMENT_BASE_PATH + 'upload_license';\n\n      this.renderReact($scope);\n    }\n  }, {\n    key: 'renderReact',\n    value: function renderReact($scope) {\n      var _this = this;\n\n      $scope.$evalAsync(function () {\n        var isPrimaryCluster = _this.isPrimaryCluster,\n            license = _this.license,\n            isExpired = _this.isExpired,\n            uploadLicensePath = _this.uploadLicensePath;\n\n        var expiryDate = license.expiry_date_in_millis;\n        if (license.expiry_date_in_millis !== undefined) {\n          expiryDate = (0, _formatting.formatDateTimeLocal)(license.expiry_date_in_millis);\n        }\n\n        // Mount the React component to the template\n        (0, _reactDom.render)(_react2.default.createElement(\n          _i18n.I18nContext,\n          null,\n          _react2.default.createElement(_components2.License, {\n            isPrimaryCluster: isPrimaryCluster,\n            status: license.status,\n            type: license.type,\n            isExpired: isExpired,\n            expiryDate: expiryDate,\n            uploadLicensePath: uploadLicensePath\n          })\n        ), document.getElementById(REACT_NODE_ID));\n      });\n    }\n  }]);\n\n  return LicenseViewController;\n}();",null]}