{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/maps/public/shared/layers/util/data_request.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/maps/public/shared/layers/util/data_request.js","mtime":1567631712022},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nvar DataRequest = exports.DataRequest = function () {\n  function DataRequest(descriptor) {\n    _classCallCheck(this, DataRequest);\n\n    this._descriptor = descriptor;\n  }\n\n  _createClass(DataRequest, [{\n    key: \"getData\",\n    value: function getData() {\n      return this._descriptor.data;\n    }\n  }, {\n    key: \"isLoading\",\n    value: function isLoading() {\n      return !!this._descriptor.dataRequestToken;\n    }\n  }, {\n    key: \"getMeta\",\n    value: function getMeta() {\n      return this._descriptor.dataMeta;\n    }\n  }, {\n    key: \"hasDataOrRequestInProgress\",\n    value: function hasDataOrRequestInProgress() {\n      return this._descriptor.data || this._descriptor.dataRequestToken;\n    }\n  }, {\n    key: \"getDataId\",\n    value: function getDataId() {\n      return this._descriptor.dataId;\n    }\n  }]);\n\n  return DataRequest;\n}();",null]}