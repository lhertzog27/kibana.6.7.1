{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/maps/public/shared/layers/sources/es_join_source.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/maps/public/shared/layers/sources/es_join_source.js","mtime":1567631712020},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ESJoinSource = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nexports.extractPropertiesMap = extractPropertiesMap;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _es_source = require('./es_source');\n\nvar _schemas = require('ui/vis/editors/default/schemas');\n\nvar _kibana_services = require('../../../kibana_services');\n\nvar _agg_configs = require('ui/vis/agg_configs');\n\nvar _timefilter = require('ui/timefilter/timefilter');\n\nvar _i18n = require('@kbn/i18n');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _objectDestructuringEmpty(obj) { if (obj == null) throw new TypeError(\"Cannot destructure undefined\"); }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\nvar TERMS_AGG_NAME = 'join';\n\nvar aggSchemas = new _schemas.Schemas([{\n  group: 'metrics',\n  name: 'metric',\n  title: 'Value',\n  min: 1,\n  max: Infinity,\n  aggFilter: ['avg', 'count', 'max', 'min', 'sum'],\n  defaults: [{ schema: 'metric', type: 'count' }]\n}, {\n  group: 'buckets',\n  name: 'segment',\n  title: 'Terms',\n  aggFilter: 'terms',\n  min: 1,\n  max: 1\n}]);\n\nfunction extractPropertiesMap(rawEsData, propertyNames, countPropertyName) {\n  var propertiesMap = new Map();\n  _lodash2.default.get(rawEsData, ['aggregations', TERMS_AGG_NAME, 'buckets'], []).forEach(function (termBucket) {\n    var properties = {};\n    if (countPropertyName) {\n      properties[countPropertyName] = termBucket.doc_count;\n    }\n    propertyNames.forEach(function (propertyName) {\n      if (_lodash2.default.has(termBucket, [propertyName, 'value'])) {\n        properties[propertyName] = _lodash2.default.get(termBucket, [propertyName, 'value']);\n      }\n    });\n    propertiesMap.set(termBucket.key, properties);\n  });\n  return propertiesMap;\n}\n\nvar ESJoinSource = exports.ESJoinSource = function (_AbstractESSource) {\n  _inherits(ESJoinSource, _AbstractESSource);\n\n  function ESJoinSource() {\n    _classCallCheck(this, ESJoinSource);\n\n    return _possibleConstructorReturn(this, (ESJoinSource.__proto__ || Object.getPrototypeOf(ESJoinSource)).apply(this, arguments));\n  }\n\n  _createClass(ESJoinSource, [{\n    key: 'hasCompleteConfig',\n    value: function hasCompleteConfig() {\n      if (_lodash2.default.has(this._descriptor, 'indexPatternId') && _lodash2.default.has(this._descriptor, 'term')) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: 'destroy',\n    value: function destroy() {\n      _kibana_services.inspectorAdapters.requests.resetRequest(this._descriptor.id);\n    }\n  }, {\n    key: 'getIndexPatternIds',\n    value: function getIndexPatternIds() {\n      return [this._descriptor.indexPatternId];\n    }\n  }, {\n    key: '_formatMetricKey',\n    value: function _formatMetricKey(metric) {\n      var metricKey = metric.type !== 'count' ? metric.type + '_of_' + metric.field : metric.type;\n      return '__kbnjoin__' + metricKey + '_groupby_' + this._descriptor.indexPatternTitle + '.' + this._descriptor.term;\n    }\n  }, {\n    key: '_formatMetricLabel',\n    value: function _formatMetricLabel(metric) {\n      var metricLabel = metric.type !== 'count' ? metric.type + ' ' + metric.field : 'count';\n      return metricLabel + ' of ' + this._descriptor.indexPatternTitle + ':' + this._descriptor.term;\n    }\n  }, {\n    key: 'getPropertiesMap',\n    value: function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(searchFilters, leftSourceName, leftFieldName) {\n        var indexPattern, timeAware, configStates, aggConfigs, rawEsData, searchSource, dsl, metricPropertyNames, countConfigState, countPropertyName;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (this.hasCompleteConfig()) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt('return', []);\n\n              case 2:\n                _context.next = 4;\n                return this._getIndexPattern();\n\n              case 4:\n                indexPattern = _context.sent;\n                _context.next = 7;\n                return this.isTimeAware();\n\n              case 7:\n                timeAware = _context.sent;\n                configStates = this._makeAggConfigs();\n                aggConfigs = new _agg_configs.AggConfigs(indexPattern, configStates, aggSchemas.all);\n                rawEsData = void 0;\n                _context.prev = 11;\n                searchSource = new _kibana_services.SearchSource();\n\n                searchSource.setField('index', indexPattern);\n                searchSource.setField('size', 0);\n                searchSource.setField('filter', function () {\n                  var filters = [];\n                  if (timeAware) {\n                    filters.push(_timefilter.timefilter.createFilter(indexPattern, searchFilters.timeFilters));\n                  }\n                  return filters;\n                });\n                searchSource.setField('query', searchFilters.query);\n\n                dsl = aggConfigs.toDsl();\n\n                searchSource.setField('aggs', dsl);\n                _context.next = 21;\n                return (0, _kibana_services.fetchSearchSourceAndRecordWithInspector)({\n                  searchSource: searchSource,\n                  requestName: this._descriptor.indexPatternTitle + '.' + this._descriptor.term,\n                  requestId: this._descriptor.id,\n                  requestDesc: this.getJoinDescription(leftSourceName, leftFieldName)\n                });\n\n              case 21:\n                rawEsData = _context.sent;\n                _context.next = 27;\n                break;\n\n              case 24:\n                _context.prev = 24;\n                _context.t0 = _context['catch'](11);\n                throw new Error(_i18n.i18n.translate('xpack.maps.source.esJoin.errorMessage', {\n                  defaultMessage: 'Elasticsearch search request failed, error: {message}',\n                  values: {\n                    message: _context.t0.message\n                  }\n                }));\n\n              case 27:\n                metricPropertyNames = configStates.filter(function (configState) {\n                  return configState.schema === 'metric' && configState.type !== 'count';\n                }).map(function (configState) {\n                  return configState.id;\n                });\n                countConfigState = configStates.find(function (configState) {\n                  return configState.type === 'count';\n                });\n                countPropertyName = _lodash2.default.get(countConfigState, 'id');\n                return _context.abrupt('return', {\n                  propertiesMap: extractPropertiesMap(rawEsData, metricPropertyNames, countPropertyName)\n                });\n\n              case 31:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[11, 24]]);\n      }));\n\n      function getPropertiesMap(_x, _x2, _x3) {\n        return _ref.apply(this, arguments);\n      }\n\n      return getPropertiesMap;\n    }()\n  }, {\n    key: 'isFilterByMapBounds',\n    value: function isFilterByMapBounds() {\n      return false;\n    }\n  }, {\n    key: 'getJoinDescription',\n    value: function getJoinDescription(leftSourceName, leftFieldName) {\n      var metrics = this._getValidMetrics().map(function (metric) {\n        return metric.type !== 'count' ? metric.type + ' ' + metric.field : 'count';\n      });\n      var joinStatement = [];\n      joinStatement.push(_i18n.i18n.translate('xpack.maps.source.esJoin.joinLeftDescription', {\n        defaultMessage: 'Join {leftSourceName}:{leftFieldName} with',\n        values: { leftSourceName: leftSourceName, leftFieldName: leftFieldName }\n      }));\n      joinStatement.push(this._descriptor.indexPatternTitle + ':' + this._descriptor.term);\n      joinStatement.push(_i18n.i18n.translate('xpack.maps.source.esJoin.joinMetricsDescription', {\n        defaultMessage: 'for metrics {metrics}',\n        values: { metrics: metrics.join(',') }\n      }));\n      return _i18n.i18n.translate('xpack.maps.source.esJoin.joinDescription', {\n        defaultMessage: 'Elasticsearch terms aggregation request for {description}',\n        values: {\n          description: joinStatement.join(' ')\n        }\n      });\n    }\n  }, {\n    key: '_makeAggConfigs',\n    value: function _makeAggConfigs() {\n      var metricAggConfigs = this.getMetricFields().map(function (metric) {\n        var metricAggConfig = {\n          id: metric.propertyKey,\n          enabled: true,\n          type: metric.type,\n          schema: 'metric',\n          params: {}\n        };\n        if (metric.type !== 'count') {\n          metricAggConfig.params = { field: metric.field };\n        }\n        return metricAggConfig;\n      });\n\n      return [].concat(_toConsumableArray(metricAggConfigs), [{\n        id: TERMS_AGG_NAME,\n        enabled: true,\n        type: 'terms',\n        schema: 'segment',\n        params: {\n          field: this._descriptor.term,\n          size: 10000\n        }\n      }]);\n    }\n  }, {\n    key: 'getDisplayName',\n    value: function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt('return', 'es_table ' + this._descriptor.indexPatternId);\n\n              case 1:\n              case 'end':\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getDisplayName() {\n        return _ref2.apply(this, arguments);\n      }\n\n      return getDisplayName;\n    }()\n  }], [{\n    key: 'renderEditor',\n    value: function renderEditor(_ref3) {\n      _objectDestructuringEmpty(_ref3);\n\n      //no need to localize. this editor is never rendered.\n      return '<div>editor details</div>';\n    }\n  }]);\n\n  return ESJoinSource;\n}(_es_source.AbstractESSource);\n\nESJoinSource.type = 'ES_JOIN_SOURCE';",null]}