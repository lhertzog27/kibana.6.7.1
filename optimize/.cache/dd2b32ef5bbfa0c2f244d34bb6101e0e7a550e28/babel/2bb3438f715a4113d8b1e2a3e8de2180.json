{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/ui/public/filters/comma_list.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/filters/comma_list.js","mtime":1567631711734},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nvar _modules = require('../modules');\n\nvar _utils = require('../../../utils');\n\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n_modules.uiModules.get('kibana').filter('commaList', function () {\n  /**\n   * Angular filter that accepts either an array or a comma-separated string\n   * and outputs a comma-separated string for presentation.\n   *\n   * @param {String|Array} input - The comma-separated list or array\n   * @param {Boolean} inclusive - Should the list be joined with an \"and\"?\n   * @return {String}\n   */\n  return function (input) {\n    var inclusive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    return (0, _utils.formatListAsProse)((0, _utils.parseCommaSeparatedList)(input), { inclusive: inclusive });\n  };\n});",null]}