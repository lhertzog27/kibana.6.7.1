{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/ui/public/doc_table/lib/get_sort.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/doc_table/lib/get_sort.js","mtime":1567631711720},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getSort = getSort;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Take a sorting array and make it into an object\n * @param {array} 2 item array [fieldToSort, directionToSort]\n * @param {object} indexPattern used for determining default sort\n * @returns {object} a sort object suitable for returning to elasticsearch\n */\nfunction getSort(sort, indexPattern) {\n  var defaultSortOrder = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'desc';\n\n  var sortObj = {};\n  var field = void 0;\n  var direction = void 0;\n\n  function isSortable(field) {\n    return indexPattern.fields.byName[field] && indexPattern.fields.byName[field].sortable;\n  }\n\n  if (Array.isArray(sort) && sort.length === 2 && isSortable(sort[0])) {\n    // At some point we need to refactor the sorting logic, this array sucks.\n    field = sort[0];\n    direction = sort[1];\n  } else if (indexPattern.timeFieldName && isSortable(indexPattern.timeFieldName)) {\n    field = indexPattern.timeFieldName;\n    direction = defaultSortOrder;\n  }\n\n  if (field) {\n    sortObj[field] = direction;\n  } else {\n    sortObj._score = 'desc';\n  }\n\n  return sortObj;\n} /*\n   * Licensed to Elasticsearch B.V. under one or more contributor\n   * license agreements. See the NOTICE file distributed with\n   * this work for additional information regarding copyright\n   * ownership. Elasticsearch B.V. licenses this file to you under\n   * the Apache License, Version 2.0 (the \"License\"); you may\n   * not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *    http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing,\n   * software distributed under the License is distributed on an\n   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n   * KIND, either express or implied.  See the License for the\n   * specific language governing permissions and limitations\n   * under the License.\n   */\n\ngetSort.array = function (sort, indexPattern, defaultSortOrder) {\n  return (0, _lodash2.default)(getSort(sort, indexPattern, defaultSortOrder)).pairs().pop();\n};",null]}