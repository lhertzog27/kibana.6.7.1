{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/monitoring/public/views/elasticsearch/overview/controller.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/monitoring/public/views/elasticsearch/overview/controller.js","mtime":1567631712102},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ElasticsearchOverviewController = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _lodash = require('lodash');\n\nvar _ = require('../../');\n\nvar _components = require('plugins/monitoring/components');\n\nvar _i18n = require('ui/i18n');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\nvar ElasticsearchOverviewController = exports.ElasticsearchOverviewController = function (_MonitoringViewBaseCo) {\n  _inherits(ElasticsearchOverviewController, _MonitoringViewBaseCo);\n\n  function ElasticsearchOverviewController($injector, $scope) {\n    _classCallCheck(this, ElasticsearchOverviewController);\n\n    // breadcrumbs + page title\n    var $route = $injector.get('$route');\n    var globalState = $injector.get('globalState');\n    $scope.cluster = (0, _lodash.find)($route.current.locals.clusters, {\n      cluster_uuid: globalState.cluster_uuid\n    });\n\n    var _this = _possibleConstructorReturn(this, (ElasticsearchOverviewController.__proto__ || Object.getPrototypeOf(ElasticsearchOverviewController)).call(this, {\n      title: 'Elasticsearch',\n      api: '../api/monitoring/v1/clusters/' + globalState.cluster_uuid + '/elasticsearch',\n      defaultData: {\n        clusterStatus: { status: '' },\n        metrics: null,\n        shardActivity: null\n      },\n      reactNodeId: 'elasticsearchOverviewReact',\n      $scope: $scope,\n      $injector: $injector\n    }));\n\n    _this.isCcrEnabled = $scope.cluster.isCcrEnabled;\n    _this.showShardActivityHistory = false;\n    _this.toggleShardActivityHistory = function () {\n      _this.showShardActivityHistory = !_this.showShardActivityHistory;\n      $scope.$evalAsync(function () {\n        _this.renderReact(_this.data);\n      });\n    };\n\n    _this.initScope($scope);\n    return _this;\n  }\n\n  _createClass(ElasticsearchOverviewController, [{\n    key: 'initScope',\n    value: function initScope($scope) {\n      var _this2 = this;\n\n      $scope.$watch(function () {\n        return _this2.data;\n      }, function (data) {\n        _this2.renderReact(data);\n      });\n\n      // HACK to force table to re-render even if data hasn't changed. This\n      // happens when the data remains empty after turning on showHistory. The\n      // button toggle needs to update the \"no data\" message based on the value of showHistory\n      $scope.$watch(function () {\n        return _this2.showShardActivityHistory;\n      }, function () {\n        var data = _this2.data;\n\n        var dataWithShardActivityLoading = _extends({}, data, { shardActivity: null });\n        // force shard activity to rerender by manipulating and then re-setting its data prop\n        _this2.renderReact(dataWithShardActivityLoading);\n        _this2.renderReact(data);\n      });\n    }\n  }, {\n    key: 'filterShardActivityData',\n    value: function filterShardActivityData(shardActivity) {\n      var _this3 = this;\n\n      return shardActivity.filter(function (row) {\n        return _this3.showShardActivityHistory || row.stage !== 'DONE';\n      });\n    }\n  }, {\n    key: 'renderReact',\n    value: function renderReact(data) {\n      // All data needs to originate in this view, and get passed as a prop to the components, for statelessness\n      var clusterStatus = data.clusterStatus,\n          metrics = data.metrics,\n          shardActivity = data.shardActivity;\n\n      var shardActivityData = shardActivity && this.filterShardActivityData(shardActivity); // no filter on data = null\n      var component = _react2.default.createElement(\n        _i18n.I18nContext,\n        null,\n        _react2.default.createElement(_components.ElasticsearchOverview, {\n          clusterStatus: clusterStatus,\n          metrics: metrics,\n          shardActivity: shardActivityData,\n          onBrush: this.onBrush,\n          showShardActivityHistory: this.showShardActivityHistory,\n          toggleShardActivityHistory: this.toggleShardActivityHistory\n        })\n      );\n\n      _get(ElasticsearchOverviewController.prototype.__proto__ || Object.getPrototypeOf(ElasticsearchOverviewController.prototype), 'renderReact', this).call(this, component);\n    }\n  }]);\n\n  return ElasticsearchOverviewController;\n}(_.MonitoringViewBaseController);",null]}