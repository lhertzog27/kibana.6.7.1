{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/file_datavisualizer/components/import_progress/import_progress.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/file_datavisualizer/components/import_progress/import_progress.js","mtime":1567631712044},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ImportProgress = exports.IMPORT_STATUS = undefined;\n\nvar _react = require('@kbn/i18n/react');\n\nvar _react2 = require('react');\n\nvar _react3 = _interopRequireDefault(_react2);\n\nvar _eui = require('@elastic/eui');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar IMPORT_STATUS = exports.IMPORT_STATUS = {\n  INCOMPLETE: 'incomplete',\n  COMPLETE: 'complete',\n  FAILED: 'danger'\n}; /*\n    * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n    * or more contributor license agreements. Licensed under the Elastic License;\n    * you may not use this file except in compliance with the Elastic License.\n    */\n\nvar ImportProgress = exports.ImportProgress = (0, _react.injectI18n)(function (_ref) {\n  var statuses = _ref.statuses,\n      intl = _ref.intl;\n  var reading = statuses.reading,\n      readStatus = statuses.readStatus,\n      parseJSONStatus = statuses.parseJSONStatus,\n      indexCreatedStatus = statuses.indexCreatedStatus,\n      ingestPipelineCreatedStatus = statuses.ingestPipelineCreatedStatus,\n      indexPatternCreatedStatus = statuses.indexPatternCreatedStatus,\n      uploadProgress = statuses.uploadProgress,\n      uploadStatus = statuses.uploadStatus,\n      createIndexPattern = statuses.createIndexPattern,\n      createPipeline = statuses.createPipeline;\n\n\n  var statusInfo = null;\n\n  var completedStep = 0;\n\n  if (reading === true && readStatus === IMPORT_STATUS.INCOMPLETE && parseJSONStatus === IMPORT_STATUS.INCOMPLETE) {\n    completedStep = 0;\n  }\n  if (readStatus === IMPORT_STATUS.COMPLETE && indexCreatedStatus === IMPORT_STATUS.INCOMPLETE && ingestPipelineCreatedStatus === IMPORT_STATUS.INCOMPLETE) {\n    completedStep = 1;\n  }\n  if (indexCreatedStatus === IMPORT_STATUS.COMPLETE) {\n    completedStep = 2;\n  }\n  if (ingestPipelineCreatedStatus === IMPORT_STATUS.COMPLETE || createPipeline === false && indexCreatedStatus === IMPORT_STATUS.COMPLETE) {\n    completedStep = 3;\n  }\n  if (uploadStatus === IMPORT_STATUS.COMPLETE) {\n    completedStep = 4;\n  }\n  if (indexPatternCreatedStatus === IMPORT_STATUS.COMPLETE) {\n    completedStep = 5;\n  }\n\n  var processFileTitle = intl.formatMessage({\n    id: 'xpack.ml.fileDatavisualizer.importProgress.processFileTitle',\n    defaultMessage: 'Process file'\n  });\n  var createIndexTitle = intl.formatMessage({\n    id: 'xpack.ml.fileDatavisualizer.importProgress.createIndexTitle',\n    defaultMessage: 'Create index'\n  });\n  var createIngestPipelineTitle = intl.formatMessage({\n    id: 'xpack.ml.fileDatavisualizer.importProgress.createIngestPipelineTitle',\n    defaultMessage: 'Create ingest pipeline'\n  });\n  var uploadingDataTitle = intl.formatMessage({\n    id: 'xpack.ml.fileDatavisualizer.importProgress.uploadDataTitle',\n    defaultMessage: 'Upload data'\n  });\n  var createIndexPatternTitle = intl.formatMessage({\n    id: 'xpack.ml.fileDatavisualizer.importProgress.createIndexPatternTitle',\n    defaultMessage: 'Create index pattern'\n  });\n\n  var creatingIndexStatus = _react3.default.createElement(\n    'p',\n    null,\n    _react3.default.createElement(_react.FormattedMessage, {\n      id: 'xpack.ml.fileDatavisualizer.importProgress.stepTwoCreatingIndexDescription',\n      defaultMessage: 'Creating index'\n    })\n  );\n\n  var creatingIndexAndIngestPipelineStatus = _react3.default.createElement(\n    'p',\n    null,\n    _react3.default.createElement(_react.FormattedMessage, {\n      id: 'xpack.ml.fileDatavisualizer.importProgress.stepTwoCreatingIndexIngestPipelineDescription',\n      defaultMessage: 'Creating index and ingest pipeline'\n    })\n  );\n\n  if (completedStep >= 0) {\n    processFileTitle = intl.formatMessage({\n      id: 'xpack.ml.fileDatavisualizer.importProgress.processingFileTitle',\n      defaultMessage: 'Processing file'\n    });\n    statusInfo = _react3.default.createElement(\n      'p',\n      null,\n      _react3.default.createElement(_react.FormattedMessage, {\n        id: 'xpack.ml.fileDatavisualizer.importProgress.processingImportedFileDescription',\n        defaultMessage: 'Processing file for import'\n      })\n    );\n  }\n  if (completedStep >= 1) {\n    processFileTitle = intl.formatMessage({\n      id: 'xpack.ml.fileDatavisualizer.importProgress.fileProcessedTitle',\n      defaultMessage: 'File processed'\n    });\n    createIndexTitle = intl.formatMessage({\n      id: 'xpack.ml.fileDatavisualizer.importProgress.creatingIndexTitle',\n      defaultMessage: 'Creating index'\n    });\n    statusInfo = createPipeline === true ? creatingIndexAndIngestPipelineStatus : creatingIndexStatus;\n  }\n  if (completedStep >= 2) {\n    createIndexTitle = intl.formatMessage({\n      id: 'xpack.ml.fileDatavisualizer.importProgress.indexCreatedTitle',\n      defaultMessage: 'Index created'\n    });\n    createIngestPipelineTitle = intl.formatMessage({\n      id: 'xpack.ml.fileDatavisualizer.importProgress.creatingIngestPipelineTitle',\n      defaultMessage: 'Creating ingest pipeline'\n    });\n    statusInfo = createPipeline === true ? creatingIndexAndIngestPipelineStatus : creatingIndexStatus;\n  }\n  if (completedStep >= 3) {\n    createIngestPipelineTitle = intl.formatMessage({\n      id: 'xpack.ml.fileDatavisualizer.importProgress.ingestPipelineCreatedTitle',\n      defaultMessage: 'Ingest pipeline created'\n    });\n    uploadingDataTitle = intl.formatMessage({\n      id: 'xpack.ml.fileDatavisualizer.importProgress.uploadingDataTitle',\n      defaultMessage: 'Uploading data'\n    });\n    statusInfo = _react3.default.createElement(UploadFunctionProgress, { progress: uploadProgress });\n  }\n  if (completedStep >= 4) {\n    uploadingDataTitle = intl.formatMessage({\n      id: 'xpack.ml.fileDatavisualizer.importProgress.dataUploadedTitle',\n      defaultMessage: 'Data uploaded'\n    });\n    if (createIndexPattern === true) {\n      createIndexPatternTitle = intl.formatMessage({\n        id: 'xpack.ml.fileDatavisualizer.importProgress.creatingIndexPatternTitle',\n        defaultMessage: 'Creating index pattern'\n      });\n      statusInfo = _react3.default.createElement(\n        'p',\n        null,\n        _react3.default.createElement(_react.FormattedMessage, {\n          id: 'xpack.ml.fileDatavisualizer.importProgress.creatingIndexPatternDescription',\n          defaultMessage: 'Creating index pattern'\n        })\n      );\n    } else {\n      statusInfo = null;\n    }\n  }\n  if (completedStep >= 5) {\n    createIndexPatternTitle = intl.formatMessage({\n      id: 'xpack.ml.fileDatavisualizer.importProgress.indexPatternCreatedTitle',\n      defaultMessage: 'Index pattern created'\n    });\n    statusInfo = null;\n  }\n\n  var steps = [{\n    title: processFileTitle,\n    isSelected: true,\n    isComplete: readStatus === IMPORT_STATUS.COMPLETE && parseJSONStatus === IMPORT_STATUS.COMPLETE,\n    status: parseJSONStatus === IMPORT_STATUS.FAILED ? parseJSONStatus : readStatus, // if JSON parsing failed, fail the first step\n    onClick: function onClick() {}\n  }, {\n    title: createIndexTitle,\n    isSelected: readStatus === IMPORT_STATUS.COMPLETE,\n    isComplete: indexCreatedStatus === IMPORT_STATUS.COMPLETE,\n    status: indexCreatedStatus,\n    onClick: function onClick() {}\n  }, {\n    title: uploadingDataTitle,\n    isSelected: indexCreatedStatus === IMPORT_STATUS.COMPLETE && (createPipeline === false || createPipeline === true && ingestPipelineCreatedStatus === IMPORT_STATUS.COMPLETE),\n    isComplete: uploadStatus === IMPORT_STATUS.COMPLETE,\n    status: uploadStatus,\n    onClick: function onClick() {}\n  }];\n\n  if (createPipeline === true) {\n    steps.splice(2, 0, {\n      title: createIngestPipelineTitle,\n      isSelected: indexCreatedStatus === IMPORT_STATUS.COMPLETE,\n      isComplete: ingestPipelineCreatedStatus === IMPORT_STATUS.COMPLETE,\n      status: ingestPipelineCreatedStatus,\n      onClick: function onClick() {}\n    });\n  }\n\n  if (createIndexPattern === true) {\n    steps.push({\n      title: createIndexPatternTitle,\n      isSelected: uploadStatus === IMPORT_STATUS.COMPLETE,\n      isComplete: indexPatternCreatedStatus === IMPORT_STATUS.COMPLETE,\n      status: indexPatternCreatedStatus,\n      onClick: function onClick() {}\n    });\n  }\n\n  return _react3.default.createElement(\n    _react3.default.Fragment,\n    null,\n    _react3.default.createElement(_eui.EuiStepsHorizontal, {\n      steps: steps,\n      style: { backgroundColor: 'transparent' }\n    }),\n    statusInfo && _react3.default.createElement(\n      _react3.default.Fragment,\n      null,\n      _react3.default.createElement(_eui.EuiSpacer, { size: 'm' }),\n      statusInfo\n    )\n  );\n});\n\nfunction UploadFunctionProgress(_ref2) {\n  var progress = _ref2.progress;\n\n  return _react3.default.createElement(\n    _react3.default.Fragment,\n    null,\n    _react3.default.createElement(\n      'p',\n      null,\n      _react3.default.createElement(_react.FormattedMessage, {\n        id: 'xpack.ml.fileDatavisualizer.importProgress.uploadingDataDescription',\n        defaultMessage: 'Uploading data'\n      })\n    ),\n    progress < 100 && _react3.default.createElement(\n      _react3.default.Fragment,\n      null,\n      _react3.default.createElement(_eui.EuiSpacer, { size: 's' }),\n      _react3.default.createElement(_eui.EuiProgress, { value: progress, max: 100, color: 'primary', size: 's' })\n    )\n  );\n}",null]}