{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/maps/public/index.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/maps/public/index.js","mtime":1567631712017},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nrequire('./kibana_services');\n\nrequire('./vendor/jquery_ui_sortable.js');\n\nrequire('./vendor/jquery_ui_sortable.css');\n\nrequire('uiExports/autocompleteProviders');\n\nrequire('uiExports/fieldFormats');\n\nrequire('uiExports/inspectorViews');\n\nrequire('uiExports/search');\n\nrequire('ui/agg_types');\n\nvar _chrome = require('ui/chrome');\n\nvar _chrome2 = _interopRequireDefault(_chrome);\n\nvar _routes = require('ui/routes');\n\nvar _routes2 = _interopRequireDefault(_routes);\n\nvar _modules = require('ui/modules');\n\nvar _doc_title = require('ui/doc_title');\n\nrequire('ui/autoload/styles');\n\nrequire('ui/autoload/all');\n\nrequire('react-vis/dist/style.css');\n\nrequire('mapbox-gl/dist/mapbox-gl.css');\n\nrequire('ui/vis/map/service_settings');\n\nrequire('./angular/services/gis_map_saved_object_loader');\n\nrequire('./angular/map_controller');\n\nvar _listing_ng_wrapper = require('./angular/listing_ng_wrapper.html');\n\nvar _listing_ng_wrapper2 = _interopRequireDefault(_listing_ng_wrapper);\n\nvar _map = require('./angular/map.html');\n\nvar _map2 = _interopRequireDefault(_map);\n\nvar _map_listing = require('./shared/components/map_listing');\n\nvar _persisted_log = require('ui/persisted_log');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// import the uiExports that we want to \"use\"\nvar app = _modules.uiModules.get('app/maps', ['ngRoute', 'react']); /*\n                                                                     * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                     * or more contributor license agreements. Licensed under the Elastic License;\n                                                                     * you may not use this file except in compliance with the Elastic License.\n                                                                     */\n\napp.directive('mapListing', function (reactDirective) {\n  return reactDirective(_map_listing.MapListing);\n});\n\n_routes2.default.enable();\n\n_routes2.default.when('/', {\n  template: _listing_ng_wrapper2.default,\n  controller: function controller($scope, gisMapSavedObjectLoader, config) {\n    $scope.listingLimit = config.get('savedObjects:listingLimit');\n    $scope.find = function (search) {\n      return gisMapSavedObjectLoader.find(search, $scope.listingLimit);\n    };\n    $scope.delete = function (ids) {\n      return gisMapSavedObjectLoader.delete(ids);\n    };\n  },\n\n  resolve: {\n    hasMaps: function hasMaps(kbnUrl) {\n      _chrome2.default.getSavedObjectsClient().find({ type: 'map', perPage: 1 }).then(function (resp) {\n        // Do not show empty listing page, just redirect to a new map\n        if (resp.savedObjects.length === 0) {\n          kbnUrl.redirect('/map');\n        }\n\n        return true;\n      });\n    }\n  }\n}).when('/map', {\n  template: _map2.default,\n  controller: 'GisMapController',\n  resolve: {\n    map: function map(gisMapSavedObjectLoader, redirectWhenMissing) {\n      return gisMapSavedObjectLoader.get().catch(redirectWhenMissing({\n        'map': '/'\n      }));\n    }\n  }\n}).when('/map/:id', {\n  template: _map2.default,\n  controller: 'GisMapController',\n  resolve: {\n    map: function map(gisMapSavedObjectLoader, redirectWhenMissing, $route, Private) {\n      var id = $route.current.params.id;\n      var docTitle = Private(_doc_title.DocTitleProvider);\n      return gisMapSavedObjectLoader.get(id).then(function (savedMap) {\n        _persisted_log.recentlyAccessed.add(savedMap.getFullPath(), savedMap.title, id);\n        docTitle.change(savedMap.title);\n        return savedMap;\n      }).catch(redirectWhenMissing({\n        'map': '/'\n      }));\n    }\n  }\n}).otherwise({\n  redirectTo: '/'\n});",null]}