{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/canvas_plugin_src/functions/common/seriesStyle.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/canvas_plugin_src/functions/common/seriesStyle.js","mtime":1567631711899},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nvar name = 'seriesStyle';\n\nvar seriesStyle = exports.seriesStyle = function seriesStyle() {\n  return {\n    name: name,\n    help: 'Creates an object used for describing the properties of a series on a chart.' + ' You would usually use this inside of a charting function',\n    context: {\n      types: ['null']\n    },\n    args: {\n      label: {\n        types: ['string'],\n        displayName: 'Series label',\n        help: 'The label of the line this style applies to, not the name you would like to give the line'\n      },\n      color: {\n        types: ['string', 'null'],\n        displayName: 'Color',\n        help: 'Color to assign the line'\n      },\n      lines: {\n        types: ['number'],\n        displayName: 'Line width',\n        help: 'Width of the line'\n      },\n      bars: {\n        types: ['number'],\n        displayName: 'Bar width',\n        help: 'Width of bars'\n      },\n      points: {\n        types: ['number'],\n        displayName: 'Show points',\n        help: 'Size of points on line'\n      },\n      fill: {\n        types: ['number', 'boolean'],\n        displayName: 'Fill points',\n        help: 'Should we fill points?',\n        default: false,\n        options: [true, false]\n      },\n      stack: {\n        types: ['number', 'null'],\n        displayName: 'Stack series',\n        help: 'Should we stack the series? This is the stack \"id\". Series with the same stack id will be stacked together'\n      },\n      horizontalBars: {\n        types: ['boolean'],\n        displayName: 'Horizontal bars orientation',\n        help: 'Sets the orientation of bars in the chart to horizontal',\n        options: [true, false]\n      }\n    },\n    fn: function fn(context, args) {\n      return _extends({ type: name }, args);\n    }\n  };\n};",null]}