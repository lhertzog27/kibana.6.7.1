{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/public/components/expression/index.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/public/components/expression/index.js","mtime":1567631711923},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Expression = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /*\n                                                                                                                                                                                                                                                                   * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                   * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                   * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                   */\n\nvar _storage = require('ui/storage');\n\nvar _reactRedux = require('react-redux');\n\nvar _recompose = require('recompose');\n\nvar _common = require('@kbn/interpreter/common');\n\nvar _workpad = require('../../state/selectors/workpad');\n\nvar _elements = require('../../state/actions/elements');\n\nvar _function_definitions = require('../../lib/function_definitions');\n\nvar _get_window = require('../../lib/get_window');\n\nvar _constants = require('../../../common/lib/constants');\n\nvar _element_not_selected = require('./element_not_selected');\n\nvar _expression = require('./expression');\n\nvar storage = new _storage.Storage((0, _get_window.getWindow)().localStorage);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    pageId: (0, _workpad.getSelectedPage)(state),\n    element: (0, _workpad.getSelectedElement)(state),\n    functionDefinitionsPromise: (0, _function_definitions.getFunctionDefinitions)(state)\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    setExpression: function setExpression(elementId, pageId) {\n      return function (expression) {\n        // destroy the context cache\n        dispatch((0, _elements.flushContext)(elementId));\n\n        // update the element's expression\n        dispatch((0, _elements.setExpression)(expression, elementId, pageId));\n      };\n    }\n  };\n};\n\nvar mergeProps = function mergeProps(stateProps, dispatchProps, ownProps) {\n  var element = stateProps.element,\n      pageId = stateProps.pageId;\n\n  var allProps = _extends({}, ownProps, stateProps, dispatchProps);\n\n  if (!element) {\n    return allProps;\n  }\n\n  var expression = element.expression;\n\n\n  return _extends({}, allProps, {\n    expression: expression,\n    setExpression: dispatchProps.setExpression(element.id, pageId)\n  });\n};\n\nvar expressionLifecycle = (0, _recompose.lifecycle)({\n  componentWillReceiveProps: function componentWillReceiveProps(_ref) {\n    var formState = _ref.formState,\n        setFormState = _ref.setFormState,\n        expression = _ref.expression;\n\n    if (this.props.expression !== expression && expression !== formState.expression) {\n      setFormState({\n        expression: expression,\n        dirty: false\n      });\n    }\n  },\n  componentDidMount: function componentDidMount() {\n    var _props = this.props,\n        functionDefinitionsPromise = _props.functionDefinitionsPromise,\n        setFunctionDefinitions = _props.setFunctionDefinitions;\n\n    functionDefinitionsPromise.then(function (defs) {\n      return setFunctionDefinitions(defs);\n    });\n  }\n});\n\nvar Expression = (0, _recompose.compose)((0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps, mergeProps), (0, _recompose.withState)('functionDefinitions', 'setFunctionDefinitions', []), (0, _recompose.withState)('formState', 'setFormState', function (_ref2) {\n  var expression = _ref2.expression;\n  return {\n    expression: expression,\n    dirty: false\n  };\n}), (0, _recompose.withState)('isAutocompleteEnabled', 'setIsAutocompleteEnabled', function () {\n  var setting = storage.get(_constants.LOCALSTORAGE_AUTOCOMPLETE_ENABLED);\n  return setting === null ? true : setting;\n}), (0, _recompose.withHandlers)({\n  toggleAutocompleteEnabled: function toggleAutocompleteEnabled(_ref3) {\n    var isAutocompleteEnabled = _ref3.isAutocompleteEnabled,\n        setIsAutocompleteEnabled = _ref3.setIsAutocompleteEnabled;\n    return function () {\n      storage.set(_constants.LOCALSTORAGE_AUTOCOMPLETE_ENABLED, !isAutocompleteEnabled);\n      setIsAutocompleteEnabled(!isAutocompleteEnabled);\n    };\n  },\n  updateValue: function updateValue(_ref4) {\n    var setFormState = _ref4.setFormState;\n    return function (expression) {\n      setFormState({\n        expression: expression,\n        dirty: true\n      });\n    };\n  },\n  setExpression: function setExpression(_ref5) {\n    var _setExpression2 = _ref5.setExpression,\n        setFormState = _ref5.setFormState;\n    return function (exp) {\n      setFormState(function (prev) {\n        return _extends({}, prev, {\n          dirty: false\n        });\n      });\n      _setExpression2(exp);\n    };\n  }\n}), expressionLifecycle, (0, _recompose.withPropsOnChange)(['formState'], function (_ref6) {\n  var formState = _ref6.formState;\n  return {\n    error: function () {\n      try {\n        // TODO: We should merge the advanced UI input and this into a single validated expression input.\n        (0, _common.fromExpression)(formState.expression);\n        return null;\n      } catch (e) {\n        return e.message;\n      }\n    }()\n  };\n}), (0, _recompose.branch)(function (props) {\n  return !props.element;\n}, (0, _recompose.renderComponent)(_element_not_selected.ElementNotSelected)))(_expression.Expression);\nexports.Expression = Expression;",null]}