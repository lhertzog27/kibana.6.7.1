{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/legacy/core_plugins/kbn_vislib_vis_types/public/controls/point_series/value_axes.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/legacy/core_plugins/kbn_vislib_vis_types/public/controls/point_series/value_axes.js","mtime":1567631711536},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _modules = require('ui/modules');\n\nvar _value_axes = require('./value_axes.html');\n\nvar _value_axes2 = _interopRequireDefault(_value_axes);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _module = _modules.uiModules.get('kibana'); /*\n                                                 * Licensed to Elasticsearch B.V. under one or more contributor\n                                                 * license agreements. See the NOTICE file distributed with\n                                                 * this work for additional information regarding copyright\n                                                 * ownership. Elasticsearch B.V. licenses this file to you under\n                                                 * the Apache License, Version 2.0 (the \"License\"); you may\n                                                 * not use this file except in compliance with the License.\n                                                 * You may obtain a copy of the License at\n                                                 *\n                                                 *    http://www.apache.org/licenses/LICENSE-2.0\n                                                 *\n                                                 * Unless required by applicable law or agreed to in writing,\n                                                 * software distributed under the License is distributed on an\n                                                 * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n                                                 * KIND, either express or implied.  See the License for the\n                                                 * specific language governing permissions and limitations\n                                                 * under the License.\n                                                 */\n\n_module.directive('vislibValueAxes', function () {\n  return {\n    restrict: 'E',\n    template: _value_axes2.default,\n    replace: true,\n    link: function link($scope) {\n      var isCategoryAxisHorizontal = true;\n\n      function mapPosition(position) {\n        switch (position) {\n          case 'bottom':\n            return 'left';\n          case 'top':\n            return 'right';\n          case 'left':\n            return 'bottom';\n          case 'right':\n            return 'top';\n        }\n      }\n\n      function mapPositionOpposite(position) {\n        switch (position) {\n          case 'bottom':\n            return 'top';\n          case 'top':\n            return 'bottom';\n          case 'left':\n            return 'right';\n          case 'right':\n            return 'left';\n        }\n      }\n\n      $scope.rotateOptions = [{ name: 'horizontal', value: 0 }, { name: 'vertical', value: 90 }, { name: 'angled', value: 75 }];\n\n      $scope.$watch('editorState.params.categoryAxes[0].position', function (position) {\n        isCategoryAxisHorizontal = ['top', 'bottom'].includes(position);\n        $scope.editorState.params.valueAxes.forEach(function (axis) {\n          var axisIsHorizontal = ['top', 'bottom'].includes(axis.position);\n          if (axisIsHorizontal === isCategoryAxisHorizontal) {\n            axis.position = mapPosition(axis.position);\n            $scope.updateAxisName(axis);\n          }\n        });\n      });\n\n      $scope.getSeries = function (axis) {\n        var isFirst = $scope.editorState.params.valueAxes[0] === axis;\n        var series = $scope.editorState.params.seriesParams.filter(function (series) {\n          return series.valueAxis === axis.id || isFirst && !series.valueAxis;\n        });\n        return series.map(function (series) {\n          return series.data.label;\n        }).join(', ');\n      };\n\n      $scope.getSeriesShort = function (axis) {\n        var maxStringLength = 30;\n        return $scope.getSeries(axis).substring(0, maxStringLength);\n      };\n\n      $scope.isPositionDisabled = function (position) {\n        if (isCategoryAxisHorizontal) {\n          return ['top', 'bottom'].includes(position);\n        }\n        return ['left', 'right'].includes(position);\n      };\n\n      $scope.addValueAxis = function () {\n        var firstAxis = $scope.editorState.params.valueAxes[0];\n        var newAxis = _lodash2.default.cloneDeep(firstAxis);\n        newAxis.id = 'ValueAxis-' + $scope.editorState.params.valueAxes.reduce(function (value, axis) {\n          if (axis.id.substr(0, 10) === 'ValueAxis-') {\n            var num = parseInt(axis.id.substr(10));\n            if (num >= value) value = num + 1;\n          }\n          return value;\n        }, 1);\n\n        newAxis.position = mapPositionOpposite(firstAxis.position);\n        var axisName = _lodash2.default.capitalize(newAxis.position) + 'Axis-';\n        newAxis.name = axisName + $scope.editorState.params.valueAxes.reduce(function (value, axis) {\n          if (axis.name.substr(0, axisName.length) === axisName) {\n            var num = parseInt(axis.name.substr(axisName.length));\n            if (num >= value) value = num + 1;\n          }\n          return value;\n        }, 1);\n\n        $scope.editorState.params.valueAxes.push(newAxis);\n        return newAxis;\n      };\n\n      $scope.removeValueAxis = function (axis) {\n        if ($scope.editorState.params.valueAxes.length > 1) {\n          _lodash2.default.remove($scope.editorState.params.valueAxes, function (valAxis) {\n            return valAxis.id === axis.id;\n          });\n        }\n      };\n\n      $scope.updateExtents = function (axis) {\n        if (!axis.scale.setYExtents) {\n          delete axis.scale.min;\n          delete axis.scale.max;\n        }\n      };\n\n      $scope.updateAxisName = function (axis) {\n        var axisName = _lodash2.default.capitalize(axis.position) + 'Axis-';\n        axis.name = axisName + $scope.editorState.params.valueAxes.reduce(function (value, axis) {\n          if (axis.name.substr(0, axisName.length) === axisName) {\n            var num = parseInt(axis.name.substr(axisName.length));\n            if (num >= value) value = num + 1;\n          }\n          return value;\n        }, 1);\n      };\n\n      var lastCustomLabels = {};\n      // We track these so we can know when the agg is changed\n      var lastMatchingSeriesAggType = '';\n      var lastMatchingSeriesAggField = '';\n      $scope.updateAxisTitle = function () {\n        $scope.editorState.params.valueAxes.forEach(function (axis, axisNumber) {\n          var newCustomLabel = '';\n          var isFirst = axisNumber === 0;\n          var matchingSeries = [];\n          $scope.editorState.params.seriesParams.forEach(function (series, i) {\n            var isMatchingSeries = isFirst && !series.valueAxis || series.valueAxis === axis.id;\n            if (isMatchingSeries) {\n              var seriesNumber = 0;\n              $scope.editorState.aggs.forEach(function (agg) {\n                if (agg.schema.name === 'metric') {\n                  if (seriesNumber === i) matchingSeries.push(agg);\n                  seriesNumber++;\n                }\n              });\n            }\n          });\n\n          if (matchingSeries.length === 1) {\n            newCustomLabel = matchingSeries[0].makeLabel();\n          }\n\n          var matchingSeriesAggType = _lodash2.default.get(matchingSeries, '[0]type.name', '');\n          var matchingSeriesAggField = _lodash2.default.get(matchingSeries, '[0]params.field.name', '');\n\n          if (lastCustomLabels[axis.id] !== newCustomLabel && newCustomLabel !== '') {\n            var isFirstRender = Object.keys(lastCustomLabels).length === 0;\n            var aggTypeIsChanged = lastMatchingSeriesAggType !== matchingSeriesAggType;\n            var aggFieldIsChanged = lastMatchingSeriesAggField !== matchingSeriesAggField;\n            var aggIsChanged = aggTypeIsChanged || aggFieldIsChanged;\n            var axisTitleIsEmpty = axis.title.text === '';\n            var lastCustomLabelMatchesAxisTitle = lastCustomLabels[axis.id] === axis.title.text;\n\n            if (!isFirstRender && (aggIsChanged || axisTitleIsEmpty || lastCustomLabelMatchesAxisTitle)) {\n              axis.title.text = newCustomLabel; // Override axis title with new custom label\n            }\n\n            lastCustomLabels[axis.id] = newCustomLabel;\n          }\n\n          lastMatchingSeriesAggType = matchingSeriesAggType;\n          lastMatchingSeriesAggField = matchingSeriesAggField;\n        });\n      };\n\n      $scope.$watch(function () {\n        return $scope.editorState.aggs.map(function (agg) {\n          return agg.makeLabel();\n        }).join();\n      }, function () {\n        $scope.updateAxisTitle();\n      });\n    }\n  };\n});",null]}