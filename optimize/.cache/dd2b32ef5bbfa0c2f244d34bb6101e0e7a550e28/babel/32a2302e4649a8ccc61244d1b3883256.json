{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/cross_cluster_replication/public/app/store/actions/api.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/cross_cluster_replication/public/app/store/actions/api.js","mtime":1567631711955},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sendApiRequest = exports.clearApiError = exports.setApiError = exports.apiRequestEnd = exports.apiRequestStart = undefined;\n\nvar _action_types = require('../action_types');\n\nvar t = _interopRequireWildcard(_action_types);\n\nvar _constants = require('../../constants');\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            */\n\nvar apiRequestStart = exports.apiRequestStart = function apiRequestStart(_ref) {\n  var label = _ref.label,\n      scope = _ref.scope,\n      _ref$status = _ref.status,\n      status = _ref$status === undefined ? _constants.API_STATUS.LOADING : _ref$status;\n  return {\n    type: t.API_REQUEST_START,\n    payload: { label: label, scope: scope, status: status }\n  };\n};\n\nvar apiRequestEnd = exports.apiRequestEnd = function apiRequestEnd(_ref2) {\n  var label = _ref2.label,\n      scope = _ref2.scope;\n  return { type: t.API_REQUEST_END, payload: { label: label, scope: scope } };\n};\n\nvar setApiError = exports.setApiError = function setApiError(_ref3) {\n  var error = _ref3.error,\n      scope = _ref3.scope;\n  return {\n    type: t.API_ERROR_SET,\n    payload: { error: error, scope: scope }\n  };\n};\n\nvar clearApiError = exports.clearApiError = function clearApiError(scope) {\n  return { type: t.API_ERROR_SET, payload: { error: null, scope: scope } };\n};\n\nvar sendApiRequest = exports.sendApiRequest = function sendApiRequest(_ref4) {\n  var label = _ref4.label,\n      scope = _ref4.scope,\n      status = _ref4.status,\n      handler = _ref4.handler,\n      _ref4$onSuccess = _ref4.onSuccess,\n      onSuccess = _ref4$onSuccess === undefined ? function () {\n    return undefined;\n  } : _ref4$onSuccess,\n      _ref4$onError = _ref4.onError,\n      onError = _ref4$onError === undefined ? function () {\n    return undefined;\n  } : _ref4$onError;\n  return function () {\n    var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(dispatch, getState) {\n      var response;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n\n              dispatch(clearApiError(scope));\n              dispatch(apiRequestStart({ label: label, scope: scope, status: status }));\n\n              _context.prev = 2;\n              _context.next = 5;\n              return handler(dispatch);\n\n            case 5:\n              response = _context.sent;\n\n\n              dispatch(apiRequestEnd({ label: label, scope: scope }));\n              dispatch({ type: label + '_SUCCESS', payload: response });\n\n              onSuccess(response, dispatch, getState);\n\n              _context.next = 17;\n              break;\n\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context['catch'](2);\n\n              dispatch(apiRequestEnd({ label: label, scope: scope }));\n              dispatch(setApiError({ error: _context.t0, scope: scope }));\n              dispatch({ type: label + '_FAILURE', payload: _context.t0 });\n\n              onError(_context.t0, dispatch, getState);\n\n            case 17:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, undefined, [[2, 11]]);\n    }));\n\n    return function (_x, _x2) {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n};",null]}