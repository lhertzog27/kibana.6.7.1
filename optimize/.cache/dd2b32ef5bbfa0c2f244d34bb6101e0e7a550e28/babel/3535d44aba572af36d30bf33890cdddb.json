{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/monitoring/public/lib/ajax_error_handler.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/monitoring/public/lib/ajax_error_handler.js","mtime":1567631712098},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.formatMonitoringError = formatMonitoringError;\nexports.ajaxErrorHandlersProvider = ajaxErrorHandlersProvider;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _lodash = require('lodash');\n\nvar _notify = require('ui/notify');\n\nvar _lib = require('ui/notify/lib');\n\nvar _eui = require('@elastic/eui');\n\nvar _react3 = require('@kbn/i18n/react');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nfunction formatMonitoringError(err) {\n  // TODO: We should stop using Boom for errors and instead write a custom handler to return richer error objects\n  // then we can do better messages, such as highlighting the Cluster UUID instead of requiring it be part of the message\n  if (err.status && err.status !== -1 && err.data) {\n    return _react2.default.createElement(\n      _eui.EuiText,\n      null,\n      _react2.default.createElement(\n        'p',\n        null,\n        err.data.message\n      ),\n      _react2.default.createElement(\n        _eui.EuiText,\n        { size: 'xs' },\n        _react2.default.createElement(_react3.FormattedMessage, {\n          id: 'xpack.monitoring.ajaxErrorHandler.httpErrorMessage',\n          defaultMessage: 'HTTP {errStatus}',\n          values: { errStatus: err.status }\n        })\n      )\n    );\n  }\n\n  return (0, _lib.formatMsg)(err);\n}\n\nfunction ajaxErrorHandlersProvider($injector) {\n  var kbnUrl = $injector.get('kbnUrl');\n  var $window = $injector.get('$window');\n\n  return function (err) {\n    if (err.status === 403) {\n      // redirect to error message view\n      kbnUrl.redirect('access-denied');\n    } else if (err.status === 404 && !(0, _lodash.contains)($window.location.hash, 'no-data')) {\n      // pass through if this is a 404 and we're already on the no-data page\n      _notify.toastNotifications.addDanger({\n        title: _react2.default.createElement(_react3.FormattedMessage, {\n          id: 'xpack.monitoring.ajaxErrorHandler.requestFailedNotificationTitle',\n          defaultMessage: 'Monitoring Request Failed'\n        }),\n        text: _react2.default.createElement(\n          'div',\n          null,\n          formatMonitoringError(err),\n          _react2.default.createElement(_eui.EuiSpacer, null),\n          _react2.default.createElement(\n            _eui.EuiButton,\n            {\n              size: 's',\n              color: 'danger',\n              onClick: function onClick() {\n                return $window.location.reload();\n              }\n            },\n            _react2.default.createElement(_react3.FormattedMessage, {\n              id: 'xpack.monitoring.ajaxErrorHandler.requestFailedNotification.retryButtonLabel',\n              defaultMessage: 'Retry'\n            })\n          )\n        )\n      });\n    } else {\n      _notify.toastNotifications.addDanger({\n        title: _react2.default.createElement(_react3.FormattedMessage, {\n          id: 'xpack.monitoring.ajaxErrorHandler.requestErrorNotificationTitle',\n          defaultMessage: 'Monitoring Request Error'\n        }),\n        text: formatMonitoringError(err)\n      });\n    }\n\n    return Promise.reject(err);\n  };\n}",null]}