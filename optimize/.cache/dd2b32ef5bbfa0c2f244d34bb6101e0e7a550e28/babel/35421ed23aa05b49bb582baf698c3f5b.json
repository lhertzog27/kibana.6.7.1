{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/cross_cluster_replication/common/services/utils.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/cross_cluster_replication/common/services/utils.js","mtime":1567631711950},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nvar arrify = exports.arrify = function arrify(val) {\n  return Array.isArray(val) ? val : [val];\n};\n\n/**\n * Utilty to add some latency in a Promise chain\n *\n * @param {number} time Time in millisecond to wait\n */\nvar wait = exports.wait = function wait() {\n  var time = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1000;\n  return function (data) {\n    return new Promise(function (resolve) {\n      setTimeout(function () {\n        return resolve(data);\n      }, time);\n    });\n  };\n};\n\n/**\n * Utility to remove empty fields (\"\") from a request body\n */\nvar removeEmptyFields = exports.removeEmptyFields = function removeEmptyFields(body) {\n  return Object.entries(body).reduce(function (acc, _ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        key = _ref2[0],\n        value = _ref2[1];\n\n    if (value !== '') {\n      acc[key] = value;\n    }\n    return acc;\n  }, {});\n};",null]}