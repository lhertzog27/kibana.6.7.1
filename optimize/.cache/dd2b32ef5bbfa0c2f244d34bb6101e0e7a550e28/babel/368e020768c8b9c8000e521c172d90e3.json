{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/monitoring/public/components/sparkline/index.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/monitoring/public/components/sparkline/index.js","mtime":1567631712095},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Sparkline = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _lodash = require('lodash');\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _sparkline_flot_chart = require('./sparkline_flot_chart');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\nvar Sparkline = exports.Sparkline = function (_React$Component) {\n  _inherits(Sparkline, _React$Component);\n\n  function Sparkline(props) {\n    _classCallCheck(this, Sparkline);\n\n    var _this = _possibleConstructorReturn(this, (Sparkline.__proto__ || Object.getPrototypeOf(Sparkline)).call(this, props));\n\n    _this.makeSparklineFlotChart = _this.makeSparklineFlotChart.bind(_this);\n    _this.onHover = _this.onHover.bind(_this);\n    _this.renderTooltip = _this.renderTooltip.bind(_this);\n    _this.handleSparklineRef = _this.handleSparklineRef.bind(_this);\n\n    _this.state = {\n      tooltip: undefined\n    };\n    return _this;\n  }\n\n  _createClass(Sparkline, [{\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(_ref) {\n      var series = _ref.series,\n          options = _ref.options;\n\n      if (!(0, _lodash.isEqual)(options, this.props.options)) {\n        this.sparklineFlotChart.shutdown();\n        this.makeSparklineFlotChart(options);\n      }\n\n      if (!(0, _lodash.isEqual)(series, this.props.series)) {\n        this.sparklineFlotChart.update(series);\n      }\n    }\n  }, {\n    key: 'makeSparklineFlotChart',\n    value: function makeSparklineFlotChart(overrideFlotOptions) {\n      this.sparklineFlotChart = new _sparkline_flot_chart.SparklineFlotChart(this.chartElem, this.props.series, this.props.onBrush, this.onHover, overrideFlotOptions);\n    }\n  }, {\n    key: 'onHover',\n    value: function onHover(dataPoint) {\n      this.setState({\n        tooltip: dataPoint\n      });\n    }\n  }, {\n    key: 'renderTooltip',\n    value: function renderTooltip() {\n      if (this.props.tooltip.enabled === false) {\n        return;\n      }\n\n      if (!this.state.tooltip) {\n        return;\n      }\n\n      var tooltipHeightInPx = 36;\n      var tooltipWidthInPx = 220;\n      var caretWidthInPx = 6;\n      var marginBetweenPointAndCaretInPx = 10;\n\n      var styles = {\n        tooltipContainer: {\n          top: this.state.tooltip.yPosition - tooltipHeightInPx / 2\n        },\n        tooltip: {\n          height: tooltipHeightInPx,\n          width: tooltipWidthInPx\n        },\n        leftCaret: {\n          width: caretWidthInPx\n        },\n        rightCaret: {\n          width: caretWidthInPx\n        }\n      };\n\n      var plotMiddleX = this.state.tooltip.plotLeft + this.state.tooltip.plotWidth / 2;\n      var tooltipContainerWidthInPx = tooltipWidthInPx + caretWidthInPx;\n      if (this.state.tooltip.xPosition > plotMiddleX) {\n        // The point is in the right half of the plot; position the tooltip\n        // to the left of the point\n        styles.rightCaret.display = 'block';\n        styles.tooltipContainer.left = this.state.tooltip.xPosition - tooltipContainerWidthInPx - marginBetweenPointAndCaretInPx;\n      } else {\n        // The point is in the left half of the plot; position the tooltip\n        // to the right of the point\n        styles.leftCaret.display = 'block';\n        styles.tooltipContainer.left = this.state.tooltip.xPosition + marginBetweenPointAndCaretInPx;\n      }\n\n      return _react2.default.createElement(\n        'div',\n        {\n          className: 'monSparklineTooltip__container',\n          style: styles.tooltipContainer\n        },\n        _react2.default.createElement('i', { className: 'fa fa-caret-left monSparklineTooltip__caret', style: styles.leftCaret }),\n        _react2.default.createElement(\n          'div',\n          {\n            className: 'monSparklineTooltip',\n            style: styles.tooltip\n          },\n          _react2.default.createElement(\n            'div',\n            { className: 'monSparklineTooltip__yValue' },\n            this.props.tooltip.yValueFormatter(this.state.tooltip.yValue)\n          ),\n          _react2.default.createElement(\n            'div',\n            { className: 'monSparklineTooltip__xValue' },\n            this.props.tooltip.xValueFormatter(this.state.tooltip.xValue)\n          )\n        ),\n        _react2.default.createElement('i', { className: 'fa fa-caret-right monSparklineTooltip__caret', style: styles.rightCaret })\n      );\n    }\n  }, {\n    key: 'handleSparklineRef',\n    value: function handleSparklineRef(elem) {\n      this.chartElem = elem;\n      if (this.chartElem) {\n        this.makeSparklineFlotChart(this.props.options);\n      } else if (this.sparklineFlotChart) {\n        this.sparklineFlotChart.shutdown();\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      return _react2.default.createElement(\n        'div',\n        null,\n        _react2.default.createElement('div', {\n          className: 'monSparkline',\n          ref: this.handleSparklineRef\n        }),\n        this.renderTooltip()\n      );\n    }\n  }]);\n\n  return Sparkline;\n}(_react2.default.Component);\n\nSparkline.propTypes = {\n  series: _propTypes2.default.arrayOf(_propTypes2.default.arrayOf(_propTypes2.default.number)).isRequired,\n  tooltip: _propTypes2.default.shape({\n    enabled: _propTypes2.default.bool,\n    xValueFormatter: _propTypes2.default.func,\n    yValueFormatter: _propTypes2.default.func\n  }),\n  options: _propTypes2.default.shape({\n    xaxis: _propTypes2.default.shape({\n      min: _propTypes2.default.number,\n      max: _propTypes2.default.number\n    })\n  })\n};",null]}