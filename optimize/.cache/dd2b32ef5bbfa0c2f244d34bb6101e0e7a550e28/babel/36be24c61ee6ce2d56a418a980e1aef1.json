{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/legacy/core_plugins/console/public/src/autocomplete/body_completer.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/legacy/core_plugins/console/public/src/autocomplete/body_completer.js","mtime":1567631691125},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nexports.globalsOnlyAutocompleteComponents = globalsOnlyAutocompleteComponents;\nexports.compileBodyDescription = compileBodyDescription;\n\nvar _engine = require('./engine');\n\nvar _components = require('./components');\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nvar _ = require('lodash');\n\n\nfunction CompilingContext(endpointId, parametrizedComponentFactories) {\n  this.parametrizedComponentFactories = parametrizedComponentFactories;\n  this.endpointId = endpointId;\n}\n\n/**\n * An object to resolve scope links (syntax endpoint.path1.path2)\n * @param link the link either string (endpoint.path1.path2, or .path1.path2) or a function (context,editor)\n * which returns a description to be compiled\n * @constructor\n * @param compilingContext\n *\n *\n * For this to work we expect the context to include a method context.endpointComponentResolver(endpoint)\n * which should return the top level components for the given endpoint\n */\n\nfunction resolvePathToComponents(tokenPath, context, editor, components) {\n  var walkStates = (0, _engine.walkTokenPath)(tokenPath, [new _engine.WalkingState('ROOT', components, [])], context, editor);\n  var result = [].concat.apply([], _.pluck(walkStates, 'components'));\n  return result;\n}\n\nvar ScopeResolver = function (_SharedComponent) {\n  _inherits(ScopeResolver, _SharedComponent);\n\n  function ScopeResolver(link, compilingContext) {\n    _classCallCheck(this, ScopeResolver);\n\n    var _this = _possibleConstructorReturn(this, (ScopeResolver.__proto__ || Object.getPrototypeOf(ScopeResolver)).call(this, '__scope_link'));\n\n    if (_.isString(link) && link[0] === '.') {\n      // relative link, inject current endpoint\n      if (link === '.') {\n        link = compilingContext.endpointId;\n      } else {\n        link = compilingContext.endpointId + link;\n      }\n    }\n    _this.link = link;\n    _this.compilingContext = compilingContext;\n    return _this;\n  }\n\n  _createClass(ScopeResolver, [{\n    key: 'resolveLinkToComponents',\n    value: function resolveLinkToComponents(context, editor) {\n      if (_.isFunction(this.link)) {\n        var desc = this.link(context, editor);\n        return compileDescription(desc, this.compilingContext);\n      }\n      if (!_.isString(this.link)) {\n        throw new Error('unsupported link format', this.link);\n      }\n\n      var path = this.link.replace(/\\./g, '{').split(/(\\{)/);\n      var endpoint = path[0];\n      var components = void 0;\n      try {\n        if (endpoint === 'GLOBAL') {\n          // global rules need an extra indirection\n          if (path.length < 3) {\n            throw new Error('missing term in global link: ' + this.link);\n          }\n          var term = path[2];\n          components = context.globalComponentResolver(term);\n          path = path.slice(3);\n        } else {\n          path = path.slice(1);\n          components = context.endpointComponentResolver(endpoint);\n        }\n      } catch (e) {\n        throw new Error('failed to resolve link [' + this.link + ']: ' + e);\n      }\n      return resolvePathToComponents(path, context, editor, components);\n    }\n  }, {\n    key: 'getTerms',\n    value: function getTerms(context, editor) {\n      var options = [];\n      var components = this.resolveLinkToComponents(context, editor);\n      _.each(components, function (component) {\n        options.push.apply(options, component.getTerms(context, editor));\n      });\n      return options;\n    }\n  }, {\n    key: 'match',\n    value: function match(token, context, editor) {\n      var result = {\n        next: []\n      };\n      var components = this.resolveLinkToComponents(context, editor);\n\n      _.each(components, function (component) {\n        var componentResult = component.match(token, context, editor);\n        if (componentResult && componentResult.next) {\n          result.next.push.apply(result.next, componentResult.next);\n        }\n      });\n\n      return result;\n    }\n  }]);\n\n  return ScopeResolver;\n}(_components.SharedComponent);\n\nfunction getTemplate(description) {\n  if (description.__template) {\n    return description.__template;\n  } else if (description.__one_of) {\n    return getTemplate(description.__one_of[0]);\n  } else if (description.__any_of) {\n    return [];\n  } else if (description.__scope_link) {\n    // assume an object for now.\n    return {};\n  } else if (Array.isArray(description)) {\n    if (description.length === 1) {\n      if (_.isObject(description[0])) {\n        // shortcut to save typing\n        var innerTemplate = getTemplate(description[0]);\n\n        return innerTemplate != null ? [innerTemplate] : [];\n      }\n    }\n    return [];\n  } else if (_.isObject(description)) {\n    return {};\n  } else if (_.isString(description) && !/^\\{.*\\}$/.test(description)) {\n    return description;\n  } else {\n    return description;\n  }\n}\n\nfunction getOptions(description) {\n  var options = {};\n  var template = getTemplate(description);\n\n  if (!_.isUndefined(template)) {\n    options.template = template;\n  }\n  return options;\n}\n\n/**\n * @param description a json dict describing the endpoint\n * @param compilingContext\n */\nfunction compileDescription(description, compilingContext) {\n  if (Array.isArray(description)) {\n    return [compileList(description, compilingContext)];\n  } else if (_.isObject(description)) {\n    // test for objects list as arrays are also objects\n    if (description.__scope_link) {\n      return [new ScopeResolver(description.__scope_link, compilingContext)];\n    }\n    if (description.__any_of) {\n      return [compileList(description.__any_of, compilingContext)];\n    }\n    if (description.__one_of) {\n      return _.flatten(_.map(description.__one_of, function (d) {\n        return compileDescription(d, compilingContext);\n      }));\n    }\n    var obj = compileObject(description, compilingContext);\n    if (description.__condition) {\n      return [compileCondition(description.__condition, obj, compilingContext)];\n    } else {\n      return [obj];\n    }\n  } else if (_.isString(description) && /^\\{.*\\}$/.test(description)) {\n    return [compileParametrizedValue(description, compilingContext)];\n  } else {\n    return [new _components.ConstantComponent(description)];\n  }\n}\n\nfunction compileParametrizedValue(value, compilingContext, template) {\n  value = value.substr(1, value.length - 2).toLowerCase();\n  var component = compilingContext.parametrizedComponentFactories.getComponent(value, true);\n  if (!component) {\n    throw new Error('no factory found for \\'' + value + '\\'');\n  }\n  component = component(value, null, template);\n  if (!_.isUndefined(template)) {\n    component = (0, _engine.wrapComponentWithDefaults)(component, { template: template });\n  }\n  return component;\n}\n\nfunction compileObject(objDescription, compilingContext) {\n  var objectC = new _components.ConstantComponent('{');\n  var constants = [];\n  var patterns = [];\n  _.each(objDescription, function (desc, key) {\n    if (key.indexOf('__') === 0) {\n      // meta key\n      return;\n    }\n\n    var options = getOptions(desc);\n    var component = void 0;\n    if (/^\\{.*\\}$/.test(key)) {\n      component = compileParametrizedValue(key, compilingContext, options.template);\n      patterns.push(component);\n    } else if (key === '*') {\n      component = new _components.SharedComponent(key);\n      patterns.push(component);\n    } else {\n      options.name = key;\n      component = new _components.ConstantComponent(key, null, [options]);\n      constants.push(component);\n    }\n    _.map(compileDescription(desc, compilingContext), function (subComponent) {\n      component.addComponent(subComponent);\n    });\n  });\n  objectC.addComponent(new _components.ObjectComponent('inner', constants, patterns));\n  return objectC;\n}\n\nfunction compileList(listRule, compilingContext) {\n  var listC = new _components.ConstantComponent('[');\n  _.each(listRule, function (desc) {\n    _.each(compileDescription(desc, compilingContext), function (component) {\n      listC.addComponent(component);\n    });\n  });\n  return listC;\n}\n\n/** takes a compiled object and wraps in a {@link ConditionalProxy }*/\nfunction compileCondition(description, compiledObject) {\n  if (description.lines_regex) {\n    return new _components.ConditionalProxy(function (context, editor) {\n      var lines = editor.getSession().getLines(context.requestStartRow, editor.getCursorPosition().row).join('\\n');\n      return new RegExp(description.lines_regex, 'm').test(lines);\n    }, compiledObject);\n  } else {\n    throw 'unknown condition type - got: ' + JSON.stringify(description);\n  }\n}\n\n// a list of component that match anything but give auto complete suggestions based on global API entries.\nfunction globalsOnlyAutocompleteComponents() {\n  return [new _components.GlobalOnlyComponent('__global__')];\n}\n\n/**\n * @param endpointId id of the endpoint being compiled.\n * @param description a json dict describing the endpoint\n * @param endpointComponentResolver a function (endpoint,context,editor) which should resolve an endpoint\n *        to it's list of compiled components.\n * @param parametrizedComponentFactories a dict of the following structure\n * that will be used as a fall back for pattern keys (i.e.: {type} ,resolved without the $s)\n * {\n *   TYPE: function (part, parent, endpoint) {\n *      return new SharedComponent(part, parent)\n *   }\n * }\n */\nfunction compileBodyDescription(endpointId, description, parametrizedComponentFactories) {\n  return compileDescription(description, new CompilingContext(endpointId, parametrizedComponentFactories));\n}",null]}