{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/timeseriesexplorer/components/forecasting_modal/run_controls.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/timeseriesexplorer/components/forecasting_modal/run_controls.js","mtime":1567631712069},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RunControls = RunControls;\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _eui = require('@elastic/eui');\n\nvar _states = require('../../../../common/constants/states');\n\nvar _forecast_progress = require('./forecast_progress');\n\nvar _check_ml_nodes = require('plugins/ml/ml_nodes_check/check_ml_nodes');\n\nvar _check_privilege = require('plugins/ml/privilege/check_privilege');\n\nvar _i18n = require('@kbn/i18n');\n\nvar _react3 = require('@kbn/i18n/react');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// don't use something like plugins/ml/../common\n// because it won't work with the jest tests\nfunction getRunInputDisabledState(job, isForecastRequested) {\n  // Disable the 'run forecast' text field and button if any of the conditions are met:\n  // - No ML nodes are available\n  // - No canForecastJob permission\n  // - Job is not in an OPENED or CLOSED state\n  // - A new forecast has been requested\n  if ((0, _check_ml_nodes.mlNodesAvailable)() === false) {\n    return {\n      isDisabled: true,\n      isDisabledToolTipText: _i18n.i18n.translate('xpack.ml.timeSeriesExplorer.runControls.noMLNodesAvailableTooltip', {\n        defaultMessage: 'There are no ML nodes available.'\n      })\n    };\n  }\n\n  // TODO - use simpler interface to permission checking once it has been refactored.\n  if ((0, _check_privilege.checkPermission)('canForecastJob') === false) {\n    return {\n      isDisabled: true,\n      isDisabledToolTipText: (0, _check_privilege.createPermissionFailureMessage)('canForecastJob')\n    };\n  }\n\n  if (job.state !== _states.JOB_STATE.OPENED && job.state !== _states.JOB_STATE.CLOSED) {\n    return {\n      isDisabled: true,\n      isDisabledToolTipText: _i18n.i18n.translate('xpack.ml.timeSeriesExplorer.runControls.forecastsCanNotBeRunOnJobsTooltip', {\n        defaultMessage: 'Forecasts cannot be run on {jobState} jobs',\n        values: { jobState: job.state }\n      })\n    };\n  }\n\n  return { isDisabled: isForecastRequested };\n} /*\n   * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n   * or more contributor license agreements. Licensed under the Elastic License;\n   * you may not use this file except in compliance with the Elastic License.\n   */\n\n/*\n * Renders the controls used for running a forecast.\n */\n\nfunction RunControls(_ref) {\n  var job = _ref.job,\n      newForecastDuration = _ref.newForecastDuration,\n      isNewForecastDurationValid = _ref.isNewForecastDurationValid,\n      newForecastDurationErrors = _ref.newForecastDurationErrors,\n      onNewForecastDurationChange = _ref.onNewForecastDurationChange,\n      runForecast = _ref.runForecast,\n      isForecastRequested = _ref.isForecastRequested,\n      forecastProgress = _ref.forecastProgress,\n      jobOpeningState = _ref.jobOpeningState,\n      jobClosingState = _ref.jobClosingState;\n\n\n  var disabledState = getRunInputDisabledState(job, isForecastRequested);\n\n  var durationInput = _react2.default.createElement(_eui.EuiFieldText, {\n    name: 'forecastDuration',\n    value: newForecastDuration,\n    disabled: disabledState.isDisabled,\n    isInvalid: !isNewForecastDurationValid,\n    onChange: onNewForecastDurationChange,\n    fullWidth: true\n  });\n\n  var runButton = _react2.default.createElement(\n    _eui.EuiButton,\n    {\n      onClick: runForecast,\n      isDisabled: disabledState.isDisabled || !isNewForecastDurationValid\n    },\n    _react2.default.createElement(_react3.FormattedMessage, {\n      id: 'xpack.ml.timeSeriesExplorer.runControls.runButtonLabel',\n      defaultMessage: 'Run'\n    })\n  );\n\n  return _react2.default.createElement(\n    'div',\n    null,\n    _react2.default.createElement(\n      _eui.EuiText,\n      null,\n      _react2.default.createElement(\n        'h3',\n        null,\n        _react2.default.createElement(_react3.FormattedMessage, {\n          id: 'xpack.ml.timeSeriesExplorer.runControls.runNewForecastTitle',\n          defaultMessage: 'Run a new forecast'\n        })\n      )\n    ),\n    _react2.default.createElement(_eui.EuiSpacer, { size: 's' }),\n    _react2.default.createElement(\n      _eui.EuiForm,\n      null,\n      _react2.default.createElement(\n        _eui.EuiFlexGroup,\n        null,\n        _react2.default.createElement(\n          _eui.EuiFlexItem,\n          null,\n          _react2.default.createElement(\n            _eui.EuiFormRow,\n            {\n              label: _react2.default.createElement(_react3.FormattedMessage, {\n                id: 'xpack.ml.timeSeriesExplorer.runControls.durationLabel',\n                defaultMessage: 'Duration'\n              }),\n              fullWidth: true,\n              isInvalid: !isNewForecastDurationValid,\n              error: newForecastDurationErrors,\n              helpText: _react2.default.createElement(_react3.FormattedMessage, {\n                id: 'xpack.ml.timeSeriesExplorer.runControls.forecastMaximumLengthHelpText',\n                defaultMessage: 'Length of forecast, up to a maximum of 8 weeks. Use s for seconds, m for minutes, h for hours, d for days, w for weeks.'\n              })\n            },\n            disabledState.isDisabledToolTipText === undefined ? durationInput : _react2.default.createElement(\n              _eui.EuiToolTip,\n              {\n                position: 'right',\n                content: disabledState.isDisabledToolTipText\n              },\n              durationInput\n            )\n          )\n        ),\n        _react2.default.createElement(\n          _eui.EuiFlexItem,\n          { grow: false },\n          _react2.default.createElement(\n            _eui.EuiFormRow,\n            { hasEmptyLabelSpace: true },\n            disabledState.isDisabledToolTipText === undefined ? runButton : _react2.default.createElement(\n              _eui.EuiToolTip,\n              {\n                position: 'left',\n                content: disabledState.isDisabledToolTipText\n              },\n              runButton\n            )\n          )\n        )\n      )\n    ),\n    _react2.default.createElement(_eui.EuiSpacer, { size: 's' }),\n    isForecastRequested === true && _react2.default.createElement(_forecast_progress.ForecastProgress, {\n      forecastProgress: forecastProgress,\n      jobOpeningState: jobOpeningState,\n      jobClosingState: jobClosingState\n    })\n  );\n}\n\nRunControls.propType = {\n  job: _propTypes2.default.object,\n  newForecastDuration: _propTypes2.default.string,\n  isNewForecastDurationValid: _propTypes2.default.bool,\n  newForecastDurationErrors: _propTypes2.default.array,\n  onNewForecastDurationChange: _propTypes2.default.func.isRequired,\n  runForecast: _propTypes2.default.func.isRequired,\n  isForecastRequested: _propTypes2.default.bool,\n  forecastProgress: _propTypes2.default.number,\n  jobOpeningState: _propTypes2.default.number,\n  jobClosingState: _propTypes2.default.number\n};",null]}