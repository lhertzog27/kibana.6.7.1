{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/monitoring/public/lib/route_init.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/monitoring/public/lib/route_init.js","mtime":1567631712099},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.routeInitProvider = routeInitProvider;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _ajax_error_handler = require('plugins/monitoring/lib/ajax_error_handler');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nfunction routeInitProvider(Private, monitoringClusters, globalState, license, kbnUrl) {\n  var ajaxErrorHandlers = Private(_ajax_error_handler.ajaxErrorHandlersProvider);\n\n  function isOnPage(hash) {\n    return _lodash2.default.contains(window.location.hash, hash);\n  }\n\n  /*\n   * returns true if:\n   * license is not basic or\n   * the data just has a single cluster or\n   * all the clusters are basic and this is the primary cluster\n   */\n  return function routeInit() {\n    return monitoringClusters()\n    // Set the clusters collection and current cluster in globalState\n    .then(function (clusters) {\n      var cluster = function () {\n        var existingCurrent = _lodash2.default.find(clusters, { cluster_uuid: globalState.cluster_uuid });\n        if (existingCurrent) {\n          return existingCurrent;\n        }\n\n        var firstCluster = _lodash2.default.first(clusters);\n        if (firstCluster && firstCluster.cluster_uuid) {\n          return firstCluster;\n        }\n\n        return null;\n      }();\n\n      if (cluster && cluster.license) {\n        globalState.cluster_uuid = cluster.cluster_uuid;\n        globalState.ccs = cluster.ccs;\n        globalState.save();\n      } else {\n        return kbnUrl.redirect('/no-data');\n      }\n\n      license.setLicense(cluster.license);\n\n      // check if we need to redirect because of license problems\n      if (!(isOnPage('license') || isOnPage('home')) && license.isExpired()) {\n        return kbnUrl.redirect('/license');\n      }\n\n      // check if we need to redirect because of attempt at unsupported multi-cluster monitoring\n      if (!isOnPage('home') && !cluster.isSupported) {\n        return kbnUrl.redirect('/home');\n      }\n\n      return clusters;\n    }).catch(ajaxErrorHandlers);\n  };\n}",null]}