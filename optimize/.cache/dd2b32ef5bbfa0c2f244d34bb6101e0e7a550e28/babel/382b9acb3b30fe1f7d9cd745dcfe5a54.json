{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/canvas_plugin_src/uis/arguments/datacolumn/get_form_object.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/canvas_plugin_src/uis/arguments/datacolumn/get_form_object.js","mtime":1567631711909},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; /*\n                                                                                                                                                                                                                                                                               * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                               * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                               * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                               */\n\nexports.getFormObject = getFormObject;\n\nvar _tinymath = require('tinymath');\n\nvar _unquote_string = require('../../../../common/lib/unquote_string');\n\n// break out into separate function, write unit tests first\nfunction getFormObject(argValue) {\n  if (argValue === '') {\n    return {\n      fn: '',\n      column: ''\n    };\n  }\n\n  // check if the value is a math expression, and set its type if it is\n  var mathObj = (0, _tinymath.parse)(argValue);\n  // A symbol node is a plain string, so we guess that they're looking for a column.\n  if (typeof mathObj === 'string') {\n    return {\n      fn: '',\n      column: (0, _unquote_string.unquoteString)(argValue)\n    };\n  }\n\n  // Check if its a simple function, eg a function wrapping a symbol node\n  // check for only one arg of type string\n  if ((typeof mathObj === 'undefined' ? 'undefined' : _typeof(mathObj)) === 'object' && mathObj.args.length === 1 && typeof mathObj.args[0] === 'string') {\n    return {\n      fn: mathObj.name,\n      column: (0, _unquote_string.unquoteString)(mathObj.args[0])\n    };\n  }\n\n  // Screw it, textarea for you my fancy.\n  throw new Error('Cannot render scalar values or complex math expressions');\n}",null]}