{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/index_management/public/store/reducers/row_status.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/index_management/public/store/reducers/row_status.js","mtime":1567631711974},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.rowStatus = undefined;\n\nvar _handleActions;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /*\n                                                                                                                                                                                                                                                                   * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                   * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                   * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                   */\n\nvar _reduxActions = require('redux-actions');\n\nvar _actions = require('../actions');\n\nvar _constants = require('../../../common/constants');\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar rowStatus = exports.rowStatus = (0, _reduxActions.handleActions)((_handleActions = {}, _defineProperty(_handleActions, _actions.clearRowStatus, function (state, action) {\n  var indexNames = action.payload.indexNames;\n\n  var newState = _extends({}, state);\n  indexNames.forEach(function (indexName) {\n    delete newState[indexName];\n  });\n  return newState;\n}), _defineProperty(_handleActions, _actions.closeIndicesStart, function (state, action) {\n  var indexNames = action.payload.indexNames;\n\n\n  var statuses = {};\n  indexNames.forEach(function (indexName) {\n    statuses[indexName] = _constants.INDEX_CLOSING;\n  });\n\n  return _extends({}, state, statuses);\n}), _defineProperty(_handleActions, _actions.openIndicesStart, function (state, action) {\n  var indexNames = action.payload.indexNames;\n\n\n  var statuses = {};\n  indexNames.forEach(function (indexName) {\n    statuses[indexName] = _constants.INDEX_OPENING;\n  });\n\n  return _extends({}, state, statuses);\n}), _defineProperty(_handleActions, _actions.refreshIndicesStart, function (state, action) {\n  var indexNames = action.payload.indexNames;\n\n\n  var statuses = {};\n  indexNames.forEach(function (indexName) {\n    statuses[indexName] = _constants.INDEX_REFRESHING;\n  });\n\n  return _extends({}, state, statuses);\n}), _defineProperty(_handleActions, _actions.flushIndicesStart, function (state, action) {\n  var indexNames = action.payload.indexNames;\n\n\n  var statuses = {};\n  indexNames.forEach(function (indexName) {\n    statuses[indexName] = _constants.INDEX_FLUSHING;\n  });\n\n  return _extends({}, state, statuses);\n}), _defineProperty(_handleActions, _actions.forcemergeIndicesStart, function (state, action) {\n  var indexNames = action.payload.indexNames;\n\n\n  var statuses = {};\n  indexNames.forEach(function (indexName) {\n    statuses[indexName] = _constants.INDEX_FORCEMERGING;\n  });\n\n  return _extends({}, state, statuses);\n}), _defineProperty(_handleActions, _actions.clearCacheIndicesStart, function (state, action) {\n  var indexNames = action.payload.indexNames;\n\n\n  var statuses = {};\n  indexNames.forEach(function (indexName) {\n    statuses[indexName] = _constants.INDEX_CLEARING_CACHE;\n  });\n\n  return _extends({}, state, statuses);\n}), _defineProperty(_handleActions, _actions.reloadIndicesSuccess, function (state, action) {\n  var indices = action.payload.indices;\n\n  var indicesByName = indices.reduce(function (acc, index) {\n    acc[index.name] = index;\n    return acc;\n  }, {});\n\n  var newState = _extends({}, state);\n  // eslint-disable-next-line guard-for-in\n  for (var indexName in state) {\n    if (state[indexName] === _constants.INDEX_CLOSING && indicesByName[indexName].status === _constants.INDEX_CLOSED) {\n      delete newState[indexName];\n    }\n    if (state[indexName] === _constants.INDEX_OPENING && indicesByName[indexName].status === _constants.INDEX_OPEN) {\n      delete newState[indexName];\n    }\n    if (state[indexName] === _constants.INDEX_REFRESHING && indicesByName[indexName].status === _constants.INDEX_OPEN) {\n      delete newState[indexName];\n    }\n    if (state[indexName] === _constants.INDEX_REFRESHING && indicesByName[indexName].status === _constants.INDEX_CLOSED) {\n      delete newState[indexName];\n    }\n    if (state[indexName] === _constants.INDEX_FLUSHING && indicesByName[indexName].status === _constants.INDEX_OPEN) {\n      delete newState[indexName];\n    }\n    if (state[indexName] === _constants.INDEX_FLUSHING && indicesByName[indexName].status === _constants.INDEX_CLOSED) {\n      delete newState[indexName];\n    }\n    if (state[indexName] === _constants.INDEX_FORCEMERGING && indicesByName[indexName].status === _constants.INDEX_OPEN) {\n      delete newState[indexName];\n    }\n    if (state[indexName] === _constants.INDEX_FORCEMERGING && indicesByName[indexName].status === _constants.INDEX_CLOSED) {\n      delete newState[indexName];\n    }\n    if (state[indexName] === _constants.INDEX_CLEARING_CACHE && indicesByName[indexName].status === _constants.INDEX_OPEN) {\n      delete newState[indexName];\n    }\n    if (state[indexName] === _constants.INDEX_CLEARING_CACHE && indicesByName[indexName].status === _constants.INDEX_CLOSED) {\n      delete newState[indexName];\n    }\n  }\n\n  return newState;\n}), _handleActions), {});",null]}