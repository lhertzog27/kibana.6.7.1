{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/license_management/public/lib/telemetry.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/license_management/public/lib/telemetry.js","mtime":1567631712002},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getTelemetryFetcher = exports.showTelemetryOptIn = exports.optInToTelemetry = exports.setTelemetryOptInService = exports.setHttpClient = exports.setTelemetryEnabled = exports.OptInExampleFlyout = exports.TelemetryOptInProvider = exports.PRIVACY_STATEMENT_URL = undefined;\n\nvar _constants = require('../../../xpack_main/common/constants');\n\nObject.defineProperty(exports, 'PRIVACY_STATEMENT_URL', {\n  enumerable: true,\n  get: function get() {\n    return _constants.PRIVACY_STATEMENT_URL;\n  }\n});\n\nvar _telemetry_opt_in = require('../../../xpack_main/public/services/telemetry_opt_in');\n\nObject.defineProperty(exports, 'TelemetryOptInProvider', {\n  enumerable: true,\n  get: function get() {\n    return _telemetry_opt_in.TelemetryOptInProvider;\n  }\n});\n\nvar _components = require('../../../xpack_main/public/components');\n\nObject.defineProperty(exports, 'OptInExampleFlyout', {\n  enumerable: true,\n  get: function get() {\n    return _components.OptInExampleFlyout;\n  }\n});\n\nvar _fetch_telemetry = require('../../../xpack_main/public/hacks/fetch_telemetry');\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            */\n\nvar telemetryEnabled = void 0;\nvar httpClient = void 0;\nvar telemetryOptInService = void 0;\nvar setTelemetryEnabled = exports.setTelemetryEnabled = function setTelemetryEnabled(isTelemetryEnabled) {\n  telemetryEnabled = isTelemetryEnabled;\n};\nvar setHttpClient = exports.setHttpClient = function setHttpClient(anHttpClient) {\n  httpClient = anHttpClient;\n};\nvar setTelemetryOptInService = exports.setTelemetryOptInService = function setTelemetryOptInService(aTelemetryOptInService) {\n  telemetryOptInService = aTelemetryOptInService;\n};\nvar optInToTelemetry = exports.optInToTelemetry = function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(enableTelemetry) {\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return telemetryOptInService.setOptIn(enableTelemetry);\n\n          case 2:\n          case 'end':\n            return _context.stop();\n        }\n      }\n    }, _callee, undefined);\n  }));\n\n  return function optInToTelemetry(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nvar showTelemetryOptIn = exports.showTelemetryOptIn = function showTelemetryOptIn() {\n  return telemetryEnabled && !telemetryOptInService.getOptIn();\n};\nvar getTelemetryFetcher = exports.getTelemetryFetcher = function getTelemetryFetcher() {\n  return (0, _fetch_telemetry.fetchTelemetry)(httpClient);\n};",null]}