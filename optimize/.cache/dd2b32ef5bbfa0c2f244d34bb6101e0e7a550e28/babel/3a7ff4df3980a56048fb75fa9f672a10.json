{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/legacy/core_plugins/kibana/public/visualize/editor/editor.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/legacy/core_plugins/kibana/public/visualize/editor/editor.js","mtime":1567631711601},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nrequire('../saved_visualizations/saved_visualizations');\n\nrequire('./visualization_editor');\n\nrequire('ui/vis/editors/default/sidebar');\n\nrequire('ui/visualize');\n\nrequire('ui/collapsible_sidebar');\n\nrequire('ui/query_bar');\n\nvar _chrome = require('ui/chrome');\n\nvar _chrome2 = _interopRequireDefault(_chrome);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _angular = require('angular');\n\nvar _angular2 = _interopRequireDefault(_angular);\n\nvar _notify = require('ui/notify');\n\nvar _vis_types = require('ui/registry/vis_types');\n\nvar _doc_title = require('ui/doc_title');\n\nvar _query_filter = require('ui/filter_bar/query_filter');\n\nvar _state_monitor_factory = require('ui/state_management/state_monitor_factory');\n\nvar _routes = require('ui/routes');\n\nvar _routes2 = _interopRequireDefault(_routes);\n\nvar _modules = require('ui/modules');\n\nvar _editor = require('./editor.html');\n\nvar _editor2 = _interopRequireDefault(_editor);\n\nvar _dashboard_constants = require('../../dashboard/dashboard_constants');\n\nvar _visualize_constants = require('../visualize_constants');\n\nvar _kibana_parsed_url = require('ui/url/kibana_parsed_url');\n\nvar _absolute_to_parsed_url = require('ui/url/absolute_to_parsed_url');\n\nvar _migrate_legacy_query = require('ui/utils/migrate_legacy_query');\n\nvar _persisted_log = require('ui/persisted_log');\n\nvar _timefilter = require('ui/timefilter');\n\nvar _loader = require('../../../../../../ui/public/visualize/loader');\n\nvar _share = require('ui/share');\n\nvar _state_hashing = require('ui/state_management/state_hashing');\n\nvar _show_saved_object_save_modal = require('ui/saved_objects/show_saved_object_save_modal');\n\nvar _saved_object_save_modal = require('ui/saved_objects/components/saved_object_save_modal');\n\nvar _documentation_links = require('ui/documentation_links');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * Licensed to Elasticsearch B.V. under one or more contributor\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * license agreements. See the NOTICE file distributed with\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * this work for additional information regarding copyright\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * ownership. Elasticsearch B.V. licenses this file to you under\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * the Apache License, Version 2.0 (the \"License\"); you may\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * not use this file except in compliance with the License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * You may obtain a copy of the License at\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            *    http://www.apache.org/licenses/LICENSE-2.0\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * Unless required by applicable law or agreed to in writing,\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * software distributed under the License is distributed on an\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * KIND, either express or implied.  See the License for the\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * specific language governing permissions and limitations\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * under the License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            */\n\n_routes2.default.when(_visualize_constants.VisualizeConstants.CREATE_PATH, {\n  template: _editor2.default,\n  resolve: {\n    savedVis: function savedVis(savedVisualizations, redirectWhenMissing, $route, Private, i18n) {\n      var visTypes = Private(_vis_types.VisTypesRegistryProvider);\n      var visType = _lodash2.default.find(visTypes, { name: $route.current.params.type });\n      var shouldHaveIndex = visType.requiresSearch && visType.options.showIndexSelection;\n      var hasIndex = $route.current.params.indexPattern || $route.current.params.savedSearchId;\n      if (shouldHaveIndex && !hasIndex) {\n        throw new Error(i18n('kbn.visualize.createVisualization.noIndexPatternOrSavedSearchIdErrorMessage', {\n          defaultMessage: 'You must provide either an indexPattern or a savedSearchId'\n        }));\n      }\n\n      return savedVisualizations.get($route.current.params).catch(redirectWhenMissing({\n        '*': '/visualize'\n      }));\n    }\n  }\n}).when(_visualize_constants.VisualizeConstants.EDIT_PATH + '/:id', {\n  template: _editor2.default,\n  resolve: {\n    savedVis: function savedVis(savedVisualizations, redirectWhenMissing, $route) {\n      return savedVisualizations.get($route.current.params.id).then(function (savedVis) {\n        _persisted_log.recentlyAccessed.add(savedVis.getFullPath(), savedVis.title, savedVis.id);\n        return savedVis;\n      }).catch(redirectWhenMissing({\n        'visualization': '/visualize',\n        'search': '/management/kibana/objects/savedVisualizations/' + $route.current.params.id,\n        'index-pattern': '/management/kibana/objects/savedVisualizations/' + $route.current.params.id,\n        'index-pattern-field': '/management/kibana/objects/savedVisualizations/' + $route.current.params.id\n      }));\n    }\n  }\n});\n\n_modules.uiModules.get('app/visualize', ['kibana/notify', 'kibana/url']).directive('visualizeApp', function () {\n  return {\n    restrict: 'E',\n    controllerAs: 'visualizeApp',\n    controller: VisEditor\n  };\n});\n\nfunction VisEditor($scope, $element, $route, AppState, $window, kbnUrl, redirectWhenMissing, Private, Promise, config, kbnBaseUrl, localStorage, i18n) {\n  var _this = this;\n\n  var docTitle = Private(_doc_title.DocTitleProvider);\n  var queryFilter = Private(_query_filter.FilterBarQueryFilterProvider);\n  var getUnhashableStates = Private(_state_hashing.getUnhashableStatesProvider);\n  var shareContextMenuExtensions = Private(_share.ShareContextMenuExtensionsRegistryProvider);\n\n  // Retrieve the resolved SavedVis instance.\n  var savedVis = $route.current.locals.savedVis;\n  // vis is instance of src/ui/public/vis/vis.js.\n  // SearchSource is a promise-based stream of search results that can inherit from other search sources.\n  var vis = savedVis.vis,\n      searchSource = savedVis.searchSource;\n\n\n  $scope.vis = vis;\n\n  var $appStatus = this.appStatus = {\n    dirty: !savedVis.id\n  };\n\n  $scope.topNavMenu = [{\n    key: i18n('kbn.topNavMenu.saveVisualizationButtonLabel', { defaultMessage: 'save' }),\n    description: i18n('kbn.visualize.topNavMenu.saveVisualizationButtonAriaLabel', {\n      defaultMessage: 'Save Visualization'\n    }),\n    testId: 'visualizeSaveButton',\n    disableButton: function disableButton() {\n      return Boolean(vis.dirty);\n    },\n    tooltip: function tooltip() {\n      if (vis.dirty) {\n        return i18n('kbn.visualize.topNavMenu.saveVisualizationDisabledButtonTooltip', {\n          defaultMessage: 'Apply or Discard your changes before saving'\n        });\n      }\n    },\n\n    run: function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var onSave, saveModal;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                onSave = function onSave(_ref2) {\n                  var newTitle = _ref2.newTitle,\n                      newCopyOnSave = _ref2.newCopyOnSave,\n                      isTitleDuplicateConfirmed = _ref2.isTitleDuplicateConfirmed,\n                      onTitleDuplicate = _ref2.onTitleDuplicate;\n\n                  var currentTitle = savedVis.title;\n                  savedVis.title = newTitle;\n                  savedVis.copyOnSave = newCopyOnSave;\n                  var saveOptions = {\n                    confirmOverwrite: false,\n                    isTitleDuplicateConfirmed: isTitleDuplicateConfirmed,\n                    onTitleDuplicate: onTitleDuplicate\n                  };\n                  return doSave(saveOptions).then(function (_ref3) {\n                    var id = _ref3.id,\n                        error = _ref3.error;\n\n                    // If the save wasn't successful, put the original values back.\n                    if (!id || error) {\n                      savedVis.title = currentTitle;\n                    }\n                    return { id: id, error: error };\n                  });\n                };\n\n                saveModal = _react2.default.createElement(_saved_object_save_modal.SavedObjectSaveModal, {\n                  onSave: onSave,\n                  onClose: function onClose() {},\n                  title: savedVis.title,\n                  showCopyOnSave: savedVis.id ? true : false,\n                  objectType: 'visualization'\n                });\n\n                (0, _show_saved_object_save_modal.showSaveModal)(saveModal);\n\n              case 3:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, _this);\n      }));\n\n      function run() {\n        return _ref.apply(this, arguments);\n      }\n\n      return run;\n    }()\n  }, {\n    key: i18n('kbn.topNavMenu.shareVisualizationButtonLabel', { defaultMessage: 'share' }),\n    description: i18n('kbn.visualize.topNavMenu.shareVisualizationButtonAriaLabel', {\n      defaultMessage: 'Share Visualization'\n    }),\n    testId: 'shareTopNavButton',\n    run: function run(menuItem, navController, anchorElement) {\n      var hasUnappliedChanges = vis.dirty;\n      var hasUnsavedChanges = $appStatus.dirty;\n      (0, _share.showShareContextMenu)({\n        anchorElement: anchorElement,\n        allowEmbed: true,\n        getUnhashableStates: getUnhashableStates,\n        objectId: savedVis.id,\n        objectType: 'visualization',\n        shareContextMenuExtensions: shareContextMenuExtensions,\n        sharingData: {\n          title: savedVis.title\n        },\n        isDirty: hasUnappliedChanges || hasUnsavedChanges\n      });\n    }\n  }, {\n    key: i18n('kbn.topNavMenu.openInspectorButtonLabel', { defaultMessage: 'inspect' }),\n    description: i18n('kbn.visualize.topNavMenu.openInspectorButtonAriaLabel', {\n      defaultMessage: 'Open Inspector for visualization'\n    }),\n    testId: 'openInspectorButton',\n    disableButton: function disableButton() {\n      return !vis.hasInspector || !vis.hasInspector();\n    },\n    run: function run() {\n      vis.openInspector().bindToAngularScope($scope);\n    },\n    tooltip: function tooltip() {\n      if (!vis.hasInspector || !vis.hasInspector()) {\n        return i18n('kbn.visualize.topNavMenu.openInspectorDisabledButtonTooltip', {\n          defaultMessage: 'This visualization doesn\\'t support any inspectors.'\n        });\n      }\n    }\n  }, {\n    key: i18n('kbn.topNavMenu.refreshButtonLabel', { defaultMessage: 'refresh' }),\n    description: i18n('kbn.visualize.topNavMenu.refreshButtonAriaLabel', {\n      defaultMessage: 'Refresh'\n    }),\n    run: function run() {\n      vis.forceReload();\n    },\n    testId: 'visualizeRefreshButton'\n  }, {\n    key: i18n('kbn.topNavManu.documentationLabel', { defaultMessage: 'documentation' }),\n    description: i18n('kbn.visualize.topNavMenu.documentationButtonDescription', {\n      defaultMessage: 'Documentation'\n    }),\n    run: function run() {\n      $window.open(_documentation_links.documentationLinks.kibana.visualize);\n    }\n  }];\n\n  var stateMonitor = void 0;\n\n  if (savedVis.id) {\n    docTitle.change(savedVis.title);\n  }\n\n  // Extract visualization state with filtered aggs. You can see these filtered aggs in the URL.\n  // Consists of things like aggs, params, listeners, title, type, etc.\n  var savedVisState = vis.getState();\n  var stateDefaults = {\n    uiState: savedVis.uiStateJSON ? JSON.parse(savedVis.uiStateJSON) : {},\n    linked: !!savedVis.savedSearchId,\n    query: searchSource.getOwnField('query') || {\n      query: '',\n      language: localStorage.get('kibana.userQueryLanguage') || config.get('search:queryLanguage')\n    },\n    filters: searchSource.getOwnField('filter') || [],\n    vis: savedVisState\n  };\n\n  // Instance of app_state.js.\n  var $state = function initState() {\n    // This is used to sync visualization state with the url when `appState.save()` is called.\n    var appState = new AppState(stateDefaults);\n\n    // The savedVis is pulled from elasticsearch, but the appState is pulled from the url, with the\n    // defaults applied. If the url was from a previous session which included modifications to the\n    // appState then they won't be equal.\n    if (!_angular2.default.equals(appState.vis, savedVisState)) {\n      Promise.try(function () {\n        vis.setState(appState.vis);\n      }).catch(redirectWhenMissing({\n        'index-pattern-field': '/visualize'\n      }));\n    }\n\n    return appState;\n  }();\n\n  function init() {\n    // export some objects\n    $scope.savedVis = savedVis;\n    $scope.indexPattern = vis.indexPattern;\n    $scope.searchSource = searchSource;\n    $scope.state = $state;\n\n    // Create a PersistedState instance.\n    $scope.uiState = $state.makeStateful('uiState');\n    $scope.appStatus = $appStatus;\n\n    var addToDashMode = $route.current.params[_dashboard_constants.DashboardConstants.ADD_VISUALIZATION_TO_DASHBOARD_MODE_PARAM];\n    kbnUrl.removeParam(_dashboard_constants.DashboardConstants.ADD_VISUALIZATION_TO_DASHBOARD_MODE_PARAM);\n\n    $scope.isAddToDashMode = function () {\n      return addToDashMode;\n    };\n\n    $scope.timeRange = _timefilter.timefilter.getTime();\n    $scope.opts = _lodash2.default.pick($scope, 'savedVis', 'isAddToDashMode');\n\n    stateMonitor = _state_monitor_factory.stateMonitorFactory.create($state, stateDefaults);\n    stateMonitor.ignoreProps(['vis.listeners']).onChange(function (status) {\n      $appStatus.dirty = status.dirty || !savedVis.id;\n    });\n\n    $scope.$watch('state.query', function (newQuery) {\n      var query = (0, _migrate_legacy_query.migrateLegacyQuery)(newQuery);\n      $scope.updateQueryAndFetch({ query: query });\n    });\n\n    $state.replace();\n\n    $scope.getVisualizationTitle = function getVisualizationTitle() {\n      return savedVis.lastSavedTitle || i18n('kbn.visualize.topNavMenu.unsavedVisualizationTitle', {\n        defaultMessage: '{visTitle} (unsaved)',\n        values: {\n          visTitle: savedVis.title\n        }\n      });\n    };\n\n    $scope.$watchMulti(['searchSource.getField(\"index\")', 'vis.type.options.showTimePicker'], function (_ref4) {\n      var _ref5 = _slicedToArray(_ref4, 2),\n          index = _ref5[0],\n          requiresTimePicker = _ref5[1];\n\n      var showTimeFilter = Boolean((!index || index.timeFieldName) && requiresTimePicker);\n\n      if (showTimeFilter) {\n        _timefilter.timefilter.enableTimeRangeSelector();\n      } else {\n        _timefilter.timefilter.disableTimeRangeSelector();\n      }\n    });\n\n    var updateTimeRange = function updateTimeRange() {\n      $scope.timeRange = _timefilter.timefilter.getTime();\n      // In case we are running in embedded mode (i.e. we used the visualize loader to embed)\n      // the visualization, we need to update the timeRange on the visualize handler.\n      if ($scope._handler) {\n        $scope._handler.update({\n          timeRange: $scope.timeRange\n        });\n      }\n    };\n\n    _timefilter.timefilter.enableAutoRefreshSelector();\n    $scope.$listenAndDigestAsync(_timefilter.timefilter, 'timeUpdate', updateTimeRange);\n\n    // update the searchSource when filters update\n    $scope.$listen(queryFilter, 'update', function () {\n      $scope.fetch();\n    });\n\n    // update the searchSource when query updates\n    $scope.fetch = function () {\n      $state.save();\n      savedVis.searchSource.setField('query', $state.query);\n      savedVis.searchSource.setField('filter', $state.filters);\n      $scope.globalFilters = queryFilter.getGlobalFilters();\n      $scope.vis.forceReload();\n    };\n\n    $scope.$on('$destroy', function () {\n      if ($scope._handler) {\n        $scope._handler.destroy();\n      }\n      savedVis.destroy();\n      stateMonitor.destroy();\n    });\n\n    if (!$scope.chrome.getVisible()) {\n      (0, _loader.getVisualizeLoader)().then(function (loader) {\n        $scope._handler = loader.embedVisualizationWithSavedObject($element.find('.visualize')[0], savedVis, {\n          timeRange: $scope.timeRange,\n          uiState: $scope.uiState,\n          appState: $state,\n          listenOnChange: false\n        });\n      });\n    }\n  }\n\n  $scope.updateQueryAndFetch = function (_ref6) {\n    var query = _ref6.query;\n\n    $state.query = query;\n    $scope.fetch();\n  };\n\n  /**\n   * Called when the user clicks \"Save\" button.\n   */\n  function doSave(saveOptions) {\n    // vis.title was not bound and it's needed to reflect title into visState\n    $state.vis.title = savedVis.title;\n    $state.vis.type = savedVis.type || $state.vis.type;\n    savedVis.visState = $state.vis;\n    savedVis.uiStateJSON = _angular2.default.toJson($scope.uiState.getChanges());\n\n    return savedVis.save(saveOptions).then(function (id) {\n      $scope.$evalAsync(function () {\n        stateMonitor.setInitialState($state.toJSON());\n\n        if (id) {\n          _notify.toastNotifications.addSuccess({\n            title: i18n('kbn.visualize.topNavMenu.saveVisualization.successNotificationText', {\n              defaultMessage: 'Saved \\'{visTitle}\\'',\n              values: {\n                visTitle: savedVis.title\n              }\n            }),\n            'data-test-subj': 'saveVisualizationSuccess'\n          });\n\n          if ($scope.isAddToDashMode()) {\n            var savedVisualizationParsedUrl = new _kibana_parsed_url.KibanaParsedUrl({\n              basePath: _chrome2.default.getBasePath(),\n              appId: kbnBaseUrl.slice('/app/'.length),\n              appPath: kbnUrl.eval(_visualize_constants.VisualizeConstants.EDIT_PATH + '/{{id}}', { id: savedVis.id })\n            });\n            // Manually insert a new url so the back button will open the saved visualization.\n            $window.history.pushState({}, '', savedVisualizationParsedUrl.getRootRelativePath());\n            // Since we aren't reloading the page, only inserting a new browser history item, we need to manually update\n            // the last url for this app, so directly clicking on the Visualize tab will also bring the user to the saved\n            // url, not the unsaved one.\n            _chrome2.default.trackSubUrlForApp('kibana:visualize', savedVisualizationParsedUrl);\n\n            var lastDashboardAbsoluteUrl = _chrome2.default.getNavLinkById('kibana:dashboard').lastSubUrl;\n            var dashboardParsedUrl = (0, _absolute_to_parsed_url.absoluteToParsedUrl)(lastDashboardAbsoluteUrl, _chrome2.default.getBasePath());\n            dashboardParsedUrl.addQueryParameter(_dashboard_constants.DashboardConstants.NEW_VISUALIZATION_ID_PARAM, savedVis.id);\n            kbnUrl.change(dashboardParsedUrl.appPath);\n          } else if (savedVis.id === $route.current.params.id) {\n            docTitle.change(savedVis.lastSavedTitle);\n          } else {\n            kbnUrl.change(_visualize_constants.VisualizeConstants.EDIT_PATH + '/{{id}}', { id: savedVis.id });\n          }\n        }\n      });\n      return { id: id };\n    }, function (error) {\n      // eslint-disable-next-line\n      console.error(error);\n      _notify.toastNotifications.addDanger({\n        title: i18n('kbn.visualize.topNavMenu.saveVisualization.failureNotificationText', {\n          defaultMessage: 'Error on saving \\'{visTitle}\\'',\n          values: {\n            visTitle: savedVis.title\n          }\n        }),\n        text: error.message,\n        'data-test-subj': 'saveVisualizationError'\n      });\n      return { error: error };\n    });\n  }\n\n  $scope.unlink = function () {\n    if (!$state.linked) return;\n\n    $state.linked = false;\n    var searchSourceParent = searchSource.getParent();\n    var searchSourceGrandparent = searchSourceParent.getParent();\n\n    delete savedVis.savedSearchId;\n    delete vis.savedSearchId;\n    searchSourceParent.setField('filter', _lodash2.default.union(searchSource.getOwnField('filter'), searchSourceParent.getOwnField('filter')));\n\n    $state.query = searchSourceParent.getField('query');\n    $state.filters = searchSourceParent.getField('filter');\n    searchSource.setField('index', searchSourceParent.getField('index'));\n    searchSource.setParent(searchSourceGrandparent);\n\n    _notify.toastNotifications.addSuccess(i18n('kbn.visualize.linkedToSearch.unlinkSuccessNotificationText', {\n      defaultMessage: 'Unlinked from saved search \\'{searchTitle}\\'',\n      values: {\n        searchTitle: savedVis.savedSearch.title\n      }\n    }));\n\n    $scope.fetch();\n  };\n\n  $scope.getAdditionalMessage = function () {\n    return '<i class=\"kuiIcon fa-flask\"></i>' + i18n('kbn.visualize.experimentalVisInfoText', { defaultMessage: 'This visualization is marked as experimental.' }) + ' ' + vis.type.feedbackMessage;\n  };\n\n  init();\n}",null]}