{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/legacy/core_plugins/vega/public/vega_view/vega_base_view.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/legacy/core_plugins/vega/public/vega_view/vega_base_view.js","mtime":1567631711657},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.VegaBaseView = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\nicensed to Elasticsearch B.V. under one or more contributor\nlicense agreements. See the NOTICE file distributed with\nthis work for additional information regarding copyright\nownership. Elasticsearch B.V. licenses this file to you under\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * the Apache License, Version 2.0 (the \"License\"); you may\nnot use this file except in compliance with the License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * You may obtain a copy of the License at\nnhttp://www.apache.org/licenses/LICENSE-2.0\nnnless required by applicable law or agreed to in writing,\nsoftware distributed under the License is distributed on an\nneither express or implied.  See the License for the\nspecific language governing permissions and limitations\nunder the License.\nn\nexports.bypassExternalUrlCheck = bypassExternalUrlCheck;\n\nvar _jquery = require('jquery');\n\nvar _jquery2 = _interopRequireDefault(_jquery);\n\nvar _moment = require('moment');\n\nvar _moment2 = _interopRequireDefault(_moment);\n\nvar _datemath = require('@elastic/datemath');\n\nvar _datemath2 = _interopRequireDefault(_datemath);\n\nvar _vegaLib = require('vega-lib');\n\nvar vega = _interopRequireWildcard(_vegaLib);\n\nvar _vegaLite = require('vega-lite');\n\nvar vegaLite = _interopRequireWildcard(_vegaLite);\n\nvar _utils = require('../data_model/utils');\n\nvar _eui = require('@elastic/eui');\n\nvar _i18n = require('@kbn/i18n');\n\nvar _vega_tooltip = require('./vega_tooltip');\n\nvar _esQuery = require('@kbn/es-query');\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvega.scheme('elastic', _eui.VISUALIZATION_COLORS);\n\n// Vega's extension functions are global. When called,\n// we forward execution to the instance-specific handler\n// This functions must be declared in the VegaBaseView class\nvar vegaFunctions = {\n  kibanaAddFilter: 'addFilterHandler',\n  kibanaRemoveFilter: 'removeFilterHandler',\n  kibanaRemoveAllFilters: 'removeAllFiltersHandler',\n  kibanaSetTimeFilter: 'setTimeFilterHandler'\n};\n\nvar _loop = function _loop(funcName) {\n  if (!vega.expressionFunction(funcName)) {\n    vega.expressionFunction(funcName, function handlerFwd() {\n      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      var view = this.context.dataflow;\n      view.runAfter(function () {\n        var _view$_kibanaView;\n\n        return (_view$_kibanaView = view._kibanaView).vegaFunctionsHandler.apply(_view$_kibanaView, [funcName].concat(args));\n      });\n    });\n  }\n};\n\nvar _iteratorNormalCompletion = true;\nvar _didIteratorError = false;\nvar _iteratorError = undefined;\n\ntry {\n  for (var _iterator = Object.keys(vegaFunctions)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n    var funcName = _step.value;\n\n    _loop(funcName);\n  }\n} catch (err) {\n  _didIteratorError = true;\n  _iteratorError = err;\n} finally {\n  try {\n    if (!_iteratorNormalCompletion && _iterator.return) {\n      _iterator.return();\n    }\n  } finally {\n    if (_didIteratorError) {\n      throw _iteratorError;\n    }\n  }\n}\n\nvar bypassToken = Symbol();\n\nfunction bypassExternalUrlCheck(url) {\n  // processed in the  loader.sanitize  below\n  return { url: url, bypassToken: bypassToken };\n}\n\nvar VegaBaseView = exports.VegaBaseView = function () {\n  function VegaBaseView(opts) {\n    _classCallCheck(this, VegaBaseView);\n\n    // $rootScope is a temp workaround, see usage below\n    this._$rootScope = opts.$rootScope;\n    this._vegaConfig = opts.vegaConfig;\n    this._$parentEl = (0, _jquery2.default)(opts.parentEl);\n    this._parser = opts.vegaParser;\n    this._serviceSettings = opts.serviceSettings;\n    this._queryfilter = opts.queryfilter;\n    this._timefilter = opts.timefilter;\n    this._findIndex = opts.findIndex;\n    this._view = null;\n    this._vegaViewConfig = null;\n    this._$messages = null;\n    this._destroyHandlers = [];\n    this._initialized = false;\n  }\n\n  _createClass(VegaBaseView, [{\n    key: 'init',\n    value: function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var _this = this;\n\n        var _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, warn;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!this._initialized) {\n                  _context.next = 2;\n                  break;\n                }\n\n                throw new Error();\n\n              case 2:\n                // safety\n                this._initialized = true;\n\n                _context.prev = 3;\n\n                this._$parentEl.empty().addClass('vgaVis').css('flex-direction', this._parser.containerDir);\n\n                // bypass the onWarn warning checks - in some cases warnings may still need to be shown despite being disabled\n                _iteratorNormalCompletion2 = true;\n                _didIteratorError2 = false;\n                _iteratorError2 = undefined;\n                _context.prev = 8;\n                for (_iterator2 = this._parser.warnings[Symbol.iterator](); !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                  warn = _step2.value;\n\n                  this._addMessage('warn', warn);\n                }\n\n                _context.next = 16;\n                break;\n\n              case 12:\n                _context.prev = 12;\n                _context.t0 = _context['catch'](8);\n                _didIteratorError2 = true;\n                _iteratorError2 = _context.t0;\n\n              case 16:\n                _context.prev = 16;\n                _context.prev = 17;\n\n                if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                  _iterator2.return();\n                }\n\n              case 19:\n                _context.prev = 19;\n\n                if (!_didIteratorError2) {\n                  _context.next = 22;\n                  break;\n                }\n\n                throw _iteratorError2;\n\n              case 22:\n                return _context.finish(19);\n\n              case 23:\n                return _context.finish(16);\n\n              case 24:\n                if (!this._parser.error) {\n                  _context.next = 27;\n                  break;\n                }\n\n                this._addMessage('err', this._parser.error);\n                return _context.abrupt('return');\n\n              case 27:\n\n                this._$container = (0, _jquery2.default)('<div class=\"vgaVis__view\">')\n                // Force a height here because css is not loaded in mocha test\n                .css('height', '100%').appendTo(this._$parentEl);\n                this._$controls = (0, _jquery2.default)('<div class=\"vgaVis__controls vgaVis__controls--' + this._parser.controlsDir + '\">').appendTo(this._$parentEl);\n\n                this._addDestroyHandler(function () {\n                  if (_this._$container) {\n                    _this._$container.remove();\n                    _this._$container = null;\n                  }\n                  if (_this._$controls) {\n                    _this._$controls.remove();\n                    _this._$controls = null;\n                  }\n                  if (_this._$messages) {\n                    _this._$messages.remove();\n                    _this._$messages = null;\n                  }\n                  if (_this._view) {\n                    _this._view.finalize();\n                  }\n                  _this._view = null;\n                });\n\n                this._vegaViewConfig = this.createViewConfig();\n\n                // The derived class should create this method\n                _context.next = 33;\n                return this._initViewCustomizations();\n\n              case 33:\n                _context.next = 38;\n                break;\n\n              case 35:\n                _context.prev = 35;\n                _context.t1 = _context['catch'](3);\n\n                this.onError(_context.t1);\n\n              case 38:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[3, 35], [8, 12, 16, 24], [17,, 19, 23]]);\n      }));\n\n      function init() {\n        return _ref.apply(this, arguments);\n      }\n\n      return init;\n    }()\n  }, {\n    key: 'createViewConfig',\n    value: function createViewConfig() {\n      var _this2 = this;\n\n      var config = {\n        logLevel: vega.Warn,\n        renderer: this._parser.renderer\n      };\n\n      // Override URL sanitizer to prevent external data loading (if disabled)\n      var loader = vega.loader();\n      var originalSanitize = loader.sanitize.bind(loader);\n      loader.sanitize = function (uri, options) {\n        if (uri.bypassToken === bypassToken) {\n          // If uri has a bypass token, the uri was encoded by bypassExternalUrlCheck() above.\n          // because user can only supply pure JSON data structure.\n          uri = uri.url;\n        } else if (!_this2._vegaConfig.enableExternalUrls) {\n          throw new Error(_i18n.i18n.translate('vega.vegaParser.baseView.externalUrlsAreNotEnabledErrorMessage', {\n            defaultMessage: 'External URLs are not enabled. Add   {enableExternalUrls}   to {kibanaConfigFileName}',\n            values: {\n              enableExternalUrls: 'vega.enableExternalUrls: true',\n              kibanaConfigFileName: 'kibana.yml'\n            }\n          }));\n        }\n        return originalSanitize(uri, options);\n      };\n      config.loader = loader;\n\n      return config;\n    }\n  }, {\n    key: 'onError',\n    value: function onError() {\n      this._addMessage('err', _utils.Utils.formatErrorToStr.apply(_utils.Utils, arguments));\n    }\n  }, {\n    key: 'onWarn',\n    value: function onWarn() {\n      if (!this._parser || !this._parser.hideWarnings) {\n        this._addMessage('warn', _utils.Utils.formatWarningToStr.apply(_utils.Utils, arguments));\n      }\n    }\n  }, {\n    key: '_addMessage',\n    value: function _addMessage(type, text) {\n      if (!this._$messages) {\n        this._$messages = (0, _jquery2.default)('<ul class=\"vgaVis__messages\">').appendTo(this._$parentEl);\n      }\n      this._$messages.append((0, _jquery2.default)('<li class=\"vgaVis__message vgaVis__message--' + type + '\">').append((0, _jquery2.default)('<pre class=\"vgaVis__messageCode\">').text(text)));\n    }\n  }, {\n    key: 'resize',\n    value: function resize() {\n      if (this._parser.useResize && this._view && this.updateVegaSize(this._view)) {\n        return this._view.runAsync();\n      }\n    }\n  }, {\n    key: 'updateVegaSize',\n    value: function updateVegaSize(view) {\n      // For some reason the object is slightly scrollable without the extra padding.\n      // This might be due to https://github.com/jquery/jquery/issues/3808\n      // Which is being fixed as part of jQuery 3.3.0\n      var heightExtraPadding = 6;\n      var width = Math.max(0, this._$container.width() - this._parser.paddingWidth);\n      var height = Math.max(0, this._$container.height() - this._parser.paddingHeight) - heightExtraPadding;\n      // Somehow the `height` signal in vega becomes zero if the height is set exactly to\n      // an even number. This is a dirty workaround for this.\n      // when vega itself is updated again, it should be checked whether this is still\n      // necessary.\n      var adjustedHeight = height + 0.00000001;\n      if (view.width() !== width || view.height() !== adjustedHeight) {\n        view.width(width).height(adjustedHeight);\n        return true;\n      }\n      return false;\n    }\n  }, {\n    key: 'setView',\n    value: function setView(view) {\n      if (this._view === view) return;\n\n      if (this._view) {\n        this._view.finalize();\n      }\n\n      this._view = view;\n\n      if (view) {\n\n        // Global vega expression handler uses it to call custom functions\n        view._kibanaView = this;\n\n        if (this._parser.tooltips) {\n          // position and padding can be specified with\n          // {config:{kibana:{tooltips: {position: 'top', padding: 15 } }}}\n          var tthandler = new _vega_tooltip.TooltipHandler(this._$container[0], view, this._parser.tooltips);\n\n          // Vega bug workaround - need to destroy tooltip by hand\n          this._addDestroyHandler(function () {\n            return tthandler.hideTooltip();\n          });\n        }\n\n        return view.runAsync(); // Allows callers to await rendering\n      }\n    }\n\n    /**\n     * Handle\n     * @param funcName\n     * @param args\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: 'vegaFunctionsHandler',\n    value: function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(funcName) {\n        var handlerFunc,\n            _len,\n            args,\n            _key,\n            _args2 = arguments;\n\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                handlerFunc = vegaFunctions[funcName];\n\n                if (!(!handlerFunc || !this[handlerFunc])) {\n                  _context2.next = 4;\n                  break;\n                }\n\n                throw new Error(_i18n.i18n.translate('vega.vegaParser.baseView.functionIsNotDefinedForGraphErrorMessage', {\n                  defaultMessage: '{funcName} is not defined for this graph',\n                  values: { funcName: funcName + '()' }\n                }));\n\n              case 4:\n                for (_len = _args2.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n                  args[_key - 1] = _args2[_key];\n                }\n\n                _context2.next = 7;\n                return this[handlerFunc].apply(this, _toConsumableArray(args));\n\n              case 7:\n                _context2.next = 12;\n                break;\n\n              case 9:\n                _context2.prev = 9;\n                _context2.t0 = _context2['catch'](0);\n\n                this.onError(_context2.t0);\n\n              case 12:\n              case 'end':\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[0, 9]]);\n      }));\n\n      function vegaFunctionsHandler(_x) {\n        return _ref2.apply(this, arguments);\n      }\n\n      return vegaFunctionsHandler;\n    }()\n\n    /**\n     * @param {object} query Elastic Query DSL snippet, as used in the query DSL editor\n     * @param {string} [index] as defined in Kibana, or default if missing\n     */\n\n  }, {\n    key: 'addFilterHandler',\n    value: function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(query, index) {\n        var indexId, filter;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this._findIndex(index);\n\n              case 2:\n                indexId = _context3.sent;\n                filter = (0, _esQuery.buildQueryFilter)(query, indexId);\n                _context3.next = 6;\n                return this._queryfilter.addFilters(filter);\n\n              case 6:\n              case 'end':\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function addFilterHandler(_x2, _x3) {\n        return _ref3.apply(this, arguments);\n      }\n\n      return addFilterHandler;\n    }()\n\n    /**\n     * @param {object} query Elastic Query DSL snippet, as used in the query DSL editor\n     * @param {string} [index] as defined in Kibana, or default if missing\n     */\n\n  }, {\n    key: 'removeFilterHandler',\n    value: function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(query, index) {\n        var _this3 = this;\n\n        var indexId, filter;\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this._findIndex(index);\n\n              case 2:\n                indexId = _context4.sent;\n                filter = (0, _esQuery.buildQueryFilter)(query, indexId);\n\n                // This is a workaround for the https://github.com/elastic/kibana/issues/18863\n                // Once fixed, replace with a direct call (no await is needed because its not async)\n                //    this._queryfilter.removeFilter(filter);\n\n                this._$rootScope.$evalAsync(function () {\n                  try {\n                    _this3._queryfilter.removeFilter(filter);\n                  } catch (err) {\n                    _this3.onError(err);\n                  }\n                });\n\n              case 5:\n              case 'end':\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function removeFilterHandler(_x4, _x5) {\n        return _ref4.apply(this, arguments);\n      }\n\n      return removeFilterHandler;\n    }()\n  }, {\n    key: 'removeAllFiltersHandler',\n    value: function removeAllFiltersHandler() {\n      this._queryfilter.removeAll();\n    }\n\n    /**\n     * Update dashboard time filter to the new values\n     * @param {number|string|Date} start\n     * @param {number|string|Date} end\n     */\n\n  }, {\n    key: 'setTimeFilterHandler',\n    value: function setTimeFilterHandler(start, end) {\n      this._timefilter.setTime(VegaBaseView._parseTimeRange(start, end));\n    }\n\n    /**\n     * Parse start and end values, determining the mode, and if order should be reversed\n     * @private\n     */\n\n  }, {\n    key: 'setDebugValues',\n\n\n    /**\n     * Set global debug variable to simplify vega debugging in console. Show info message first time\n     */\n    value: function setDebugValues(view, spec, vlspec) {\n      if (window) {\n        if (window.VEGA_DEBUG === undefined && console) {\n          console.log('%cWelcome to Kibana Vega Plugin!', 'font-size: 16px; font-weight: bold;');\n          console.log('You can access the Vega view with VEGA_DEBUG. ' + 'Learn more at https://vega.github.io/vega/docs/api/debugging/.');\n        }\n        var debugObj = {};\n        window.VEGA_DEBUG = debugObj;\n        window.VEGA_DEBUG.VEGA_VERSION = vega.version;\n        window.VEGA_DEBUG.VEGA_LITE_VERSION = vegaLite.version;\n        window.VEGA_DEBUG.view = view;\n        window.VEGA_DEBUG.vega_spec = spec;\n        window.VEGA_DEBUG.vegalite_spec = vlspec;\n\n        // On dispose, clean up, but don't use undefined to prevent repeated debug statements\n        this._addDestroyHandler(function () {\n          if (debugObj === window.VEGA_DEBUG) {\n            window.VEGA_DEBUG = null;\n          }\n        });\n      }\n    }\n  }, {\n    key: 'destroy',\n    value: function destroy() {\n      // properly handle multiple destroy() calls by converting this._destroyHandlers\n      // into the _ongoingDestroy promise, while handlers are being disposed\n      if (this._destroyHandlers) {\n        // If no destroy is yet running, execute all handlers and wait for all of them to resolve.\n        this._ongoingDestroy = Promise.all(this._destroyHandlers.map(function (v) {\n          return v();\n        }));\n        this._destroyHandlers = null;\n      }\n      return this._ongoingDestroy;\n    }\n  }, {\n    key: '_addDestroyHandler',\n    value: function _addDestroyHandler(handler) {\n      // If disposing hasn't started yet, enqueue it, otherwise dispose right away\n      // This creates a minor issue - if disposing has started but not yet finished,\n      // and we dispose the new handler right away, the destroy() does not wait for it.\n      // This behavior is no different from the case when disposing has already completed,\n      // so it shouldn't create any issues.\n      if (this._destroyHandlers) {\n        this._destroyHandlers.push(handler);\n      } else {\n        handler();\n      }\n    }\n  }], [{\n    key: '_parseTimeRange',\n    value: function _parseTimeRange(start, end) {\n      var absStart = (0, _moment2.default)(start);\n      var absEnd = (0, _moment2.default)(end);\n      var isValidAbsStart = absStart.isValid();\n      var isValidAbsEnd = absEnd.isValid();\n      var mode = 'absolute';\n      var from = void 0;\n      var to = void 0;\n      var reverse = void 0;\n\n      if (isValidAbsStart && isValidAbsEnd) {\n        // Both are valid absolute dates.\n        from = absStart;\n        to = absEnd;\n        reverse = absStart.isAfter(absEnd);\n      } else {\n        // Try to parse as relative dates too (absolute dates will also be accepted)\n        var startDate = _datemath2.default.parse(start);\n        var endDate = _datemath2.default.parse(end);\n        if (!startDate || !endDate || !startDate.isValid() || !endDate.isValid()) {\n          throw new Error(_i18n.i18n.translate('vega.vegaParser.baseView.timeValuesTypeErrorMessage', {\n            defaultMessage: 'Error setting time filter: both time values must be either relative or absolute dates. {start}, {end}',\n            values: {\n              start: 'start=' + JSON.stringify(start),\n              end: 'end=' + JSON.stringify(end)\n            }\n          }));\n        }\n        reverse = startDate.isAfter(endDate);\n        if (isValidAbsStart || isValidAbsEnd) {\n          // Mixing relative and absolute - treat them as absolute\n          from = startDate;\n          to = endDate;\n        } else {\n          // Both dates are relative\n          mode = 'relative';\n          from = start;\n          to = end;\n        }\n      }\n\n      if (reverse) {\n        var _ref5 = [to, from];\n        from = _ref5[0];\n        to = _ref5[1];\n      }\n\n      return { from: from, to: to, mode: mode };\n    }\n  }]);\n\n  return VegaBaseView;\n}();",null]}