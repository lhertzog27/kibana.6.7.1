{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/kuery_autocomplete/public/autocomplete_providers/field.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/kuery_autocomplete/public/autocomplete_providers/field.js","mtime":1567631712000},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getSuggestionsProvider = getSuggestionsProvider;\n\nvar _lodash = require('lodash');\n\nvar _escape_kuery = require('./escape_kuery');\n\nvar _sort_prefix_first = require('ui/utils/sort_prefix_first');\n\nvar _static_utils = require('ui/index_patterns/static_utils');\n\nvar _i18n = require('@kbn/i18n');\n\nvar type = 'field'; /*\n                     * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                     * or more contributor license agreements. Licensed under the Elastic License;\n                     * you may not use this file except in compliance with the Elastic License.\n                     */\n\nfunction getDescription(fieldName) {\n  return '<p>' + _i18n.i18n.translate('xpack.kueryAutocomplete.filterResultsDescription', {\n    defaultMessage: 'Filter results that contain {fieldName}',\n    values: { fieldName: '<span class=\"kbnSuggestionItem__callout\">' + (0, _lodash.escape)(fieldName) + '</span>' }\n  }) + '</p>';\n}\n\nfunction getSuggestionsProvider(_ref) {\n  var indexPatterns = _ref.indexPatterns;\n\n  var allFields = (0, _lodash.flatten)(indexPatterns.map(function (indexPattern) {\n    return indexPattern.fields;\n  }));\n  return function getFieldSuggestions(_ref2) {\n    var start = _ref2.start,\n        end = _ref2.end,\n        prefix = _ref2.prefix,\n        suffix = _ref2.suffix;\n\n    var search = ('' + prefix + suffix).toLowerCase();\n    var filterableFields = allFields.filter(_static_utils.isFilterable);\n    var fieldNames = filterableFields.map(function (field) {\n      return field.name;\n    });\n    var matchingFieldNames = fieldNames.filter(function (name) {\n      return name.toLowerCase().includes(search);\n    });\n    var sortedFieldNames = (0, _sort_prefix_first.sortPrefixFirst)(matchingFieldNames.sort(keywordComparator), search);\n    var suggestions = sortedFieldNames.map(function (fieldName) {\n      var text = (0, _escape_kuery.escapeKuery)(fieldName) + ' ';\n      var description = getDescription(fieldName);\n      return { type: type, text: text, description: description, start: start, end: end };\n    });\n    return suggestions;\n  };\n}\n\nfunction keywordComparator(first, second) {\n  var extensions = ['raw', 'keyword'];\n  if (extensions.map(function (ext) {\n    return first + '.' + ext;\n  }).includes(second)) {\n    return 1;\n  } else if (extensions.map(function (ext) {\n    return second + '.' + ext;\n  }).includes(first)) {\n    return -1;\n  }\n  return first.localeCompare(second);\n}",null]}