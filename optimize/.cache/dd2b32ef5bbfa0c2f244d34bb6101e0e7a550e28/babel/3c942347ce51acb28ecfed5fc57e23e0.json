{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/canvas_plugin_src/functions/common/columns.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/canvas_plugin_src/functions/common/columns.js","mtime":1567631711897},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.columns = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /*\n                                                                                                                                                                                                                                                                   * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                   * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                   * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                   */\n\nvar _lodash = require('lodash');\n\nvar columns = exports.columns = function columns() {\n  return {\n    name: 'columns',\n    type: 'datatable',\n    help: 'Include or exclude columns from a data table. If you specify both, this will exclude first',\n    context: {\n      types: ['datatable']\n    },\n    args: {\n      include: {\n        types: ['string'],\n        help: 'A comma separated list of column names to keep in the table',\n        default: null\n      },\n      exclude: {\n        types: ['string'],\n        help: 'A comma separated list of column names to remove from the table',\n        default: null\n      }\n    },\n    fn: function fn(context, args) {\n      var include = args.include,\n          exclude = args.exclude;\n\n\n      var result = _extends({}, context);\n\n      if (exclude) {\n        var fields = exclude.split(',').map(function (field) {\n          return field.trim();\n        });\n        var _columns = result.columns.filter(function (col) {\n          return !fields.includes(col.name);\n        });\n        var rows = _columns.length > 0 ? result.rows.map(function (row) {\n          return (0, _lodash.omit)(row, fields);\n        }) : [];\n\n        result = _extends({}, result, { rows: rows, columns: _columns });\n      }\n\n      if (include) {\n        var _fields = include.split(',').map(function (field) {\n          return field.trim();\n        });\n        //const columns = result.columns.filter(col => fields.includes(col.name));\n        // Include columns in the order the user specified\n        var _columns2 = [];\n        _fields.forEach(function (field) {\n          var column = (0, _lodash.find)(result.columns, { name: field });\n          if (column) {\n            _columns2.push(column);\n          }\n        });\n        var _rows = _columns2.length > 0 ? result.rows.map(function (row) {\n          return (0, _lodash.pick)(row, _fields);\n        }) : [];\n        result = _extends({}, result, { rows: _rows, columns: _columns2 });\n      }\n\n      return result;\n    }\n  };\n};",null]}