{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/maps/public/angular/map_controller.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/maps/public/angular/map_controller.js","mtime":1567631712013},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nvar _chrome = require('ui/chrome');\n\nvar _chrome2 = _interopRequireDefault(_chrome);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _react3 = require('@kbn/i18n/react');\n\nvar _i18n = require('@kbn/i18n');\n\nvar _reactDom = require('react-dom');\n\nvar _modules = require('ui/modules');\n\nvar _timefilter = require('ui/timefilter');\n\nvar _reactRedux = require('react-redux');\n\nvar _store = require('../store/store');\n\nvar _gis_map = require('../components/gis_map');\n\nvar _store_actions = require('../actions/store_actions');\n\nvar _ui = require('../store/ui');\n\nvar _map_selectors = require('../selectors/map_selectors');\n\nvar _inspector = require('ui/inspector');\n\nvar _doc_title = require('ui/doc_title');\n\nvar _kibana_services = require('../kibana_services');\n\nvar _saved_object_save_modal = require('ui/saved_objects/components/saved_object_save_modal');\n\nvar _show_saved_object_save_modal = require('ui/saved_objects/show_saved_object_save_modal');\n\nvar _notify = require('ui/notify');\n\nvar _get_initial_layers = require('./get_initial_layers');\n\nvar _get_initial_query = require('./get_initial_query');\n\nvar _get_initial_time_filters = require('./get_initial_time_filters');\n\nvar _get_initial_refresh_config = require('./get_initial_refresh_config');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            */\n\nvar REACT_ANCHOR_DOM_ELEMENT_ID = 'react-maps-root';\n\nvar app = _modules.uiModules.get('app/maps', []);\n\napp.controller('GisMapController', function ($scope, $route, config, kbnUrl, localStorage, AppState, globalState, Private) {\n  var updateIndexPatterns = function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(nextIndexPatternIds) {\n      var _this = this;\n\n      var indexPatterns, getIndexPatternPromises;\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              indexPatterns = [];\n              getIndexPatternPromises = nextIndexPatternIds.map(function () {\n                var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(indexPatternId) {\n                  var indexPattern;\n                  return regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          _context.prev = 0;\n                          _context.next = 3;\n                          return _kibana_services.indexPatternService.get(indexPatternId);\n\n                        case 3:\n                          indexPattern = _context.sent;\n\n                          indexPatterns.push(indexPattern);\n                          _context.next = 9;\n                          break;\n\n                        case 7:\n                          _context.prev = 7;\n                          _context.t0 = _context['catch'](0);\n\n                        case 9:\n                        case 'end':\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee, _this, [[0, 7]]);\n                }));\n\n                return function (_x2) {\n                  return _ref4.apply(this, arguments);\n                };\n              }()\n              // unable to fetch index pattern\n              );\n              _context2.next = 4;\n              return Promise.all(getIndexPatternPromises);\n\n            case 4:\n              if (!(prevIndexPatternIds !== nextIndexPatternIds)) {\n                _context2.next = 6;\n                break;\n              }\n\n              return _context2.abrupt('return');\n\n            case 6:\n              $scope.indexPatterns = indexPatterns;\n\n            case 7:\n            case 'end':\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    return function updateIndexPatterns(_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var doSave = function () {\n    var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(saveOptions) {\n      var store, docTitle, id;\n      return regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              store = (0, _store.getStore)();\n              _context3.next = 3;\n              return store.dispatch((0, _store_actions.clearTransientLayerStateAndCloseFlyout)());\n\n            case 3:\n              savedMap.syncWithStore(store.getState());\n              docTitle = Private(_doc_title.DocTitleProvider);\n              id = void 0;\n              _context3.prev = 6;\n              _context3.next = 9;\n              return savedMap.save(saveOptions);\n\n            case 9:\n              id = _context3.sent;\n\n              docTitle.change(savedMap.title);\n              _context3.next = 17;\n              break;\n\n            case 13:\n              _context3.prev = 13;\n              _context3.t0 = _context3['catch'](6);\n\n              _notify.toastNotifications.addDanger({\n                title: _i18n.i18n.translate('xpack.maps.mapController.saveErrorMessage', {\n                  defaultMessage: 'Error on saving \\'{title}\\'',\n                  values: { title: savedMap.title }\n                }),\n                text: _context3.t0.message,\n                'data-test-subj': 'saveMapError'\n              });\n              return _context3.abrupt('return', { error: _context3.t0 });\n\n            case 17:\n\n              if (id) {\n                _notify.toastNotifications.addSuccess({\n                  title: _i18n.i18n.translate('xpack.maps.mapController.saveSuccessMessage', {\n                    defaultMessage: 'Saved \\'{title}\\'',\n                    values: { title: savedMap.title }\n                  }),\n                  'data-test-subj': 'saveMapSuccess'\n                });\n\n                if (savedMap.id !== $route.current.params.id) {\n                  $scope.$evalAsync(function () {\n                    kbnUrl.change('map/{{id}}', { id: savedMap.id });\n                  });\n                }\n              }\n              return _context3.abrupt('return', { id: id });\n\n            case 19:\n            case 'end':\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this, [[6, 13]]);\n    }));\n\n    return function doSave(_x3) {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n\n  // Hide angular timepicer/refresh UI from top nav\n\n\n  var savedMap = $scope.map = $route.current.locals.map;\n  var unsubscribe = void 0;\n\n  _kibana_services.inspectorAdapters.requests.reset();\n\n  $scope.$listen(globalState, 'fetch_with_changes', function (diff) {\n    if (diff.includes('time')) {\n      $scope.updateQueryAndDispatch({ query: $scope.query, dateRange: globalState.time });\n    }\n    if (diff.includes('refreshInterval')) {\n      $scope.onRefreshChange({ isPaused: globalState.pause, refreshInterval: globalState.value });\n    }\n  });\n\n  var $state = new AppState();\n  $scope.$listen($state, 'fetch_with_changes', function (diff) {\n    if (diff.includes('query') && $state.query) {\n      $scope.updateQueryAndDispatch({ query: $state.query, dateRange: $scope.time });\n    }\n  });\n\n  function syncAppAndGlobalState() {\n    $scope.$evalAsync(function () {\n      $state.query = $scope.query;\n      $state.save();\n      globalState.time = $scope.time;\n      globalState.refreshInterval = {\n        pause: $scope.refreshConfig.isPaused,\n        value: $scope.refreshConfig.interval\n      };\n      globalState.save();\n    });\n  }\n\n  $scope.query = (0, _get_initial_query.getInitialQuery)({\n    mapStateJSON: savedMap.mapStateJSON,\n    appState: $state,\n    userQueryLanguage: localStorage.get('kibana.userQueryLanguage')\n  });\n  $scope.time = (0, _get_initial_time_filters.getInitialTimeFilters)({\n    mapStateJSON: savedMap.mapStateJSON,\n    globalState: globalState\n  });\n  $scope.refreshConfig = (0, _get_initial_refresh_config.getInitialRefreshConfig)({\n    mapStateJSON: savedMap.mapStateJSON,\n    globalState: globalState\n  });\n  syncAppAndGlobalState();\n\n  $scope.indexPatterns = [];\n  $scope.updateQueryAndDispatch = function (_ref) {\n    var dateRange = _ref.dateRange,\n        query = _ref.query;\n\n    $scope.query = query;\n    $scope.time = dateRange;\n    syncAppAndGlobalState();\n\n    (0, _store.getStore)().dispatch((0, _store_actions.setQuery)({ query: $scope.query, timeFilters: $scope.time }));\n  };\n  $scope.onRefreshChange = function (_ref2) {\n    var isPaused = _ref2.isPaused,\n        refreshInterval = _ref2.refreshInterval;\n\n    $scope.refreshConfig = {\n      isPaused: isPaused,\n      interval: refreshInterval ? refreshInterval : $scope.refreshConfig.interval\n    };\n    syncAppAndGlobalState();\n\n    (0, _store.getStore)().dispatch((0, _store_actions.setRefreshConfig)($scope.refreshConfig));\n  };\n\n  function renderMap() {\n    var store = (0, _store.getStore)();\n\n    // clear old UI state\n    store.dispatch((0, _store_actions.setSelectedLayer)(null));\n    store.dispatch((0, _ui.updateFlyout)(_ui.FLYOUT_STATE.NONE));\n\n    handleStoreChanges(store);\n    unsubscribe = store.subscribe(function () {\n      handleStoreChanges(store);\n    });\n\n    // sync store with savedMap mapState\n    if (savedMap.mapStateJSON) {\n      var mapState = JSON.parse(savedMap.mapStateJSON);\n      store.dispatch((0, _store_actions.setGotoWithCenter)({\n        lat: mapState.center.lat,\n        lon: mapState.center.lon,\n        zoom: mapState.zoom\n      }));\n    }\n\n    var layerList = (0, _get_initial_layers.getInitialLayers)(savedMap.layerListJSON);\n    store.dispatch((0, _store_actions.replaceLayerList)(layerList));\n\n    store.dispatch((0, _store_actions.setRefreshConfig)($scope.refreshConfig));\n    store.dispatch((0, _store_actions.setQuery)({ query: $scope.query, timeFilters: $scope.time }));\n\n    var root = document.getElementById(REACT_ANCHOR_DOM_ELEMENT_ID);\n    (0, _reactDom.render)(_react2.default.createElement(\n      _reactRedux.Provider,\n      { store: store },\n      _react2.default.createElement(\n        _react3.I18nProvider,\n        null,\n        _react2.default.createElement(_gis_map.GisMap, null)\n      )\n    ), root);\n  }\n  renderMap();\n\n  var prevIndexPatternIds = void 0;\n\n\n  $scope.isFullScreen = false;\n  function handleStoreChanges(store) {\n    var nextIsFullScreen = (0, _ui.getIsFullScreen)(store.getState());\n    if (nextIsFullScreen !== $scope.isFullScreen) {\n      // Must trigger digest cycle for angular top nav to redraw itself when isFullScreen changes\n      $scope.$evalAsync(function () {\n        $scope.isFullScreen = nextIsFullScreen;\n      });\n    }\n\n    var nextIndexPatternIds = (0, _map_selectors.getUniqueIndexPatternIds)(store.getState());\n    if (nextIndexPatternIds !== prevIndexPatternIds) {\n      prevIndexPatternIds = nextIndexPatternIds;\n      updateIndexPatterns(nextIndexPatternIds);\n    }\n  }\n\n  $scope.$on('$destroy', function () {\n    if (unsubscribe) {\n      unsubscribe();\n    }\n    var node = document.getElementById(REACT_ANCHOR_DOM_ELEMENT_ID);\n    if (node) {\n      (0, _reactDom.unmountComponentAtNode)(node);\n    }\n  });\n\n  $scope.getMapTitle = function () {\n    return $scope.map.title;\n  };\n  // k7design breadcrumbs\n  // TODO subscribe to store change and change when store updates title\n  _chrome2.default.breadcrumbs.set([{ text: _i18n.i18n.translate('xpack.maps.mapController.mapsBreadcrumbLabel', {\n      defaultMessage: 'Maps'\n    }), href: '#' }, { text: $scope.map.title }]);\n  config.watch('k7design', function (val) {\n    return $scope.showPluginBreadcrumbs = !val;\n  });\n\n  _timefilter.timefilter.disableTimeRangeSelector();\n  _timefilter.timefilter.disableAutoRefreshSelector();\n  $scope.showDatePicker = true; // used by query-bar directive to enable timepikcer in query bar\n  $scope.topNavMenu = [{\n    key: _i18n.i18n.translate('xpack.maps.mapController.fullScreenButtonLabel', {\n      defaultMessage: 'full screen'\n    }),\n    description: _i18n.i18n.translate('xpack.maps.mapController.fullScreenDescription', {\n      defaultMessage: 'full screen'\n    }),\n    testId: 'mapsFullScreenMode',\n    run: function run() {\n      (0, _store.getStore)().dispatch((0, _ui.enableFullScreen)());\n    }\n  }, {\n    key: _i18n.i18n.translate('xpack.maps.mapController.openInspectorButtonLabel', {\n      defaultMessage: 'inspect'\n    }),\n    description: _i18n.i18n.translate('xpack.maps.mapController.openInspectorDescription', {\n      defaultMessage: 'Open Inspector'\n    }),\n    testId: 'openInspectorButton',\n    run: function run() {\n      _inspector.Inspector.open(_kibana_services.inspectorAdapters, {});\n    }\n  }, {\n    key: _i18n.i18n.translate('xpack.maps.mapController.saveMapButtonLabel', {\n      defaultMessage: 'save'\n    }),\n    description: _i18n.i18n.translate('xpack.maps.mapController.saveMapDescription', {\n      defaultMessage: 'Save map'\n    }),\n    testId: 'mapSaveButton',\n    run: function () {\n      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {\n        var onSave, saveModal;\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                onSave = function onSave(_ref7) {\n                  var newTitle = _ref7.newTitle,\n                      newCopyOnSave = _ref7.newCopyOnSave,\n                      isTitleDuplicateConfirmed = _ref7.isTitleDuplicateConfirmed,\n                      onTitleDuplicate = _ref7.onTitleDuplicate;\n\n                  var currentTitle = savedMap.title;\n                  savedMap.title = newTitle;\n                  savedMap.copyOnSave = newCopyOnSave;\n                  var saveOptions = {\n                    confirmOverwrite: false,\n                    isTitleDuplicateConfirmed: isTitleDuplicateConfirmed,\n                    onTitleDuplicate: onTitleDuplicate\n                  };\n                  return doSave(saveOptions).then(function (_ref8) {\n                    var id = _ref8.id,\n                        error = _ref8.error;\n\n                    // If the save wasn't successful, put the original values back.\n                    if (!id || error) {\n                      savedMap.title = currentTitle;\n                    }\n                    return { id: id, error: error };\n                  });\n                };\n\n                saveModal = _react2.default.createElement(_saved_object_save_modal.SavedObjectSaveModal, {\n                  onSave: onSave,\n                  onClose: function onClose() {},\n                  title: savedMap.title,\n                  showCopyOnSave: savedMap.id ? true : false,\n                  objectType: 'map'\n                });\n\n                (0, _show_saved_object_save_modal.showSaveModal)(saveModal);\n\n              case 3:\n              case 'end':\n                return _context4.stop();\n            }\n          }\n        }, _callee4, undefined);\n      }));\n\n      function run() {\n        return _ref6.apply(this, arguments);\n      }\n\n      return run;\n    }()\n  }];\n});",null]}