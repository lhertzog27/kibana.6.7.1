{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/jobs/new_job/simple/components/fields_selection_population/fields_selection_directive.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/jobs/new_job/simple/components/fields_selection_population/fields_selection_directive.js","mtime":1567631712056},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /*\n                                                                                                                                                                                                                                                                   * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                   * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                   * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                   */\n\nvar _states = require('plugins/ml/jobs/new_job/simple/components/constants/states');\n\nvar _general = require('plugins/ml/jobs/new_job/simple/components/constants/general');\n\nvar _fields_selection = require('./fields_selection.html');\n\nvar _fields_selection2 = _interopRequireDefault(_fields_selection);\n\nvar _modules = require('ui/modules');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _module = _modules.uiModules.get('apps/ml');\n\n_module.directive('mlFieldsSelectionPopulation', function () {\n  return {\n    restrict: 'E',\n    replace: true,\n    template: _fields_selection2.default,\n    controller: function controller($scope) {\n      $scope.eventRateSelected = false;\n\n      // when a field is selected, temporarily store it.\n      // the addField function is then called which processes it.\n      $scope.tempSelectedField = {\n        field: undefined\n      };\n\n      $scope.selectField = function () {\n        $scope.addField();\n      };\n\n      $scope.addField = function () {\n        // only allow the event rate field to be added once\n        if ($scope.eventRateSelected === false || $scope.eventRateSelected === true && $scope.tempSelectedField.field.id !== _general.EVENT_RATE_COUNT_FIELD) {\n          // clone the object, but not a deep clone.\n          // we want field.agg to be unique but the reference to the inner agg.type object to be the original.\n          var field = _extends({}, $scope.tempSelectedField.field, {\n            agg: { type: $scope.tempSelectedField.field.agg.type }\n          });\n\n          $scope.formConfig.fields.push(field);\n          $scope.chartStates.fields[field.id] = _states.CHART_STATE.LOADING;\n\n          $scope.sortFields();\n          $scope.formChange(true);\n        }\n        $scope.tempSelectedField.field = undefined;\n      };\n\n      $scope.removeField = function (index, field) {\n        $scope.formConfig.fields.splice(index, 1);\n        delete $scope.chartStates.fields[field.id];\n        $scope.sortFields();\n        $scope.formChange(true);\n      };\n\n      // put the event rate field at the top\n      $scope.sortFields = function () {\n        $scope.eventRateSelected = false;\n        var eventRateIndex = -1;\n        $scope.formConfig.fields.forEach(function (f, i) {\n          if (f.id === _general.EVENT_RATE_COUNT_FIELD) {\n            eventRateIndex = i;\n            $scope.eventRateSelected = true;\n          }\n        });\n\n        if (eventRateIndex >= 0) {\n          $scope.formConfig.fields.splice(0, 0, $scope.formConfig.fields.splice(eventRateIndex, 1)[0]);\n        }\n      };\n    }\n  };\n});",null]}