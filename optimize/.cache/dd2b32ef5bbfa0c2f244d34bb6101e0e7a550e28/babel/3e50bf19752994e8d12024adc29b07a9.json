{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/xpack_main/public/hacks/welcome_banner/click_banner.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/xpack_main/public/hacks/welcome_banner/click_banner.js","mtime":1567631712359},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.clickBanner = undefined;\n\n/**\n * Handle clicks from the user on the opt-in banner.\n *\n * @param {String} bannerId Banner ID to close upon success.\n * @param {Object} telemetryOptInProvider the telemetry opt-in provider\n * @param {Boolean} optIn {@code true} to opt into telemetry.\n * @param {Object} _banners Singleton banners. Can be overridden for tests.\n * @param {Object} _toastNotifications Singleton toast notifications. Can be overridden for tests.\n */\nvar clickBanner = exports.clickBanner = function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(bannerId, telemetryOptInProvider, optIn) {\n    var _ref2 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},\n        _ref2$_banners = _ref2._banners,\n        _banners = _ref2$_banners === undefined ? _notify.banners : _ref2$_banners,\n        _ref2$_toastNotificat = _ref2._toastNotifications,\n        _toastNotifications = _ref2$_toastNotificat === undefined ? _notify.toastNotifications : _ref2$_toastNotificat;\n\n    var set;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            set = false;\n            _context.prev = 1;\n            _context.next = 4;\n            return telemetryOptInProvider.setOptIn(optIn);\n\n          case 4:\n            set = _context.sent;\n            _context.next = 10;\n            break;\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context['catch'](1);\n\n            // set is already false\n            console.log('Unexpected error while trying to save setting.', _context.t0);\n\n          case 10:\n\n            if (set) {\n              _banners.remove(bannerId);\n            } else {\n              _toastNotifications.addDanger({\n                title: _react2.default.createElement(_react3.FormattedMessage, {\n                  id: 'xpack.main.telemetry.telemetryErrorNotificationMessageTitle',\n                  defaultMessage: 'Telemetry Error'\n                }),\n                text: _react2.default.createElement(\n                  _eui.EuiText,\n                  null,\n                  _react2.default.createElement(\n                    'p',\n                    null,\n                    _react2.default.createElement(_react3.FormattedMessage, {\n                      id: 'xpack.main.telemetry.telemetryErrorNotificationMessageDescription.unableToSaveTelemetryPreferenceText',\n                      defaultMessage: 'Unable to save telemetry preference.'\n                    })\n                  ),\n                  _react2.default.createElement(\n                    _eui.EuiText,\n                    { size: 'xs' },\n                    _react2.default.createElement(_react3.FormattedMessage, {\n                      id: 'xpack.main.telemetry.telemetryErrorNotificationMessageDescription.tryAgainText',\n                      defaultMessage: 'Check that Kibana and Elasticsearch are still running, then try again.'\n                    })\n                  )\n                )\n              });\n            }\n\n          case 11:\n          case 'end':\n            return _context.stop();\n        }\n      }\n    }, _callee, this, [[1, 7]]);\n  }));\n\n  return function clickBanner(_x2, _x3, _x4) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _notify = require('ui/notify');\n\nvar _eui = require('@elastic/eui');\n\nvar _react3 = require('@kbn/i18n/react');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            */",null]}