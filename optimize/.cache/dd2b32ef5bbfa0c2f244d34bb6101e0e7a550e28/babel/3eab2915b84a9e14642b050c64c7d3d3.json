{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/kuery_autocomplete/public/autocomplete_providers/value.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/kuery_autocomplete/public/autocomplete_providers/value.js","mtime":1567631712000},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /*\n                                                                                                                                                                                                                                                                   * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                   * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                   * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                   */\n\nexports.getSuggestionsProvider = getSuggestionsProvider;\n\nvar _lodash = require('lodash');\n\nvar _escape_kuery = require('./escape_kuery');\n\nvar _kfetch = require('ui/kfetch');\n\nvar type = 'value';\n\nvar requestSuggestions = (0, _lodash.memoize)(function (query, field, boolFilter) {\n  return (0, _kfetch.kfetch)({\n    pathname: '/api/kibana/suggestions/values/' + field.indexPatternTitle,\n    method: 'POST',\n    body: JSON.stringify({ query: query, field: field.name, boolFilter: boolFilter })\n  });\n}, resolver);\n\nfunction getSuggestionsProvider(_ref) {\n  var config = _ref.config,\n      indexPatterns = _ref.indexPatterns,\n      boolFilter = _ref.boolFilter;\n\n  var allFields = (0, _lodash.flatten)(indexPatterns.map(function (indexPattern) {\n    return indexPattern.fields.map(function (field) {\n      return _extends({}, field, {\n        indexPatternTitle: indexPattern.title\n      });\n    });\n  }));\n  var shouldSuggestValues = config.get('filterEditor:suggestValues');\n\n  return function getValueSuggestions(_ref2) {\n    var start = _ref2.start,\n        end = _ref2.end,\n        prefix = _ref2.prefix,\n        suffix = _ref2.suffix,\n        fieldName = _ref2.fieldName;\n\n    var fields = allFields.filter(function (field) {\n      return field.name === fieldName;\n    });\n    var query = '' + prefix + suffix;\n\n    var suggestionsByField = fields.map(function (field) {\n      if (field.type === 'boolean') {\n        return wrapAsSuggestions(start, end, query, ['true', 'false']);\n      } else if (!shouldSuggestValues || !field.aggregatable || field.type !== 'string') {\n        return [];\n      }\n\n      return requestSuggestions(query, field, boolFilter).then(function (data) {\n        var quotedValues = data.map(function (value) {\n          return '\"' + (0, _escape_kuery.escapeQuotes)(value) + '\"';\n        });\n        return wrapAsSuggestions(start, end, query, quotedValues);\n      });\n    });\n\n    return Promise.all(suggestionsByField).then(function (suggestions) {\n      return (0, _lodash.flatten)(suggestions);\n    });\n  };\n}\n\nfunction wrapAsSuggestions(start, end, query, values) {\n  return values.filter(function (value) {\n    return value.toLowerCase().includes(query.toLowerCase());\n  }).map(function (value) {\n    var text = value + ' ';\n    return { type: type, text: text, start: start, end: end };\n  });\n}\n\nfunction resolver(query, field, boolFilter) {\n  // Only cache results for a minute\n  var ttl = Math.floor(Date.now() / 1000 / 60);\n  return [ttl, query, field.indexPatternTitle, field.name, JSON.stringify(boolFilter)].join('|');\n}",null]}