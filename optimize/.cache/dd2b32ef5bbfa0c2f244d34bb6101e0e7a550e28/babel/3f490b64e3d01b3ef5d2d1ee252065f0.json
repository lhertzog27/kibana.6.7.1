{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/remote_clusters/public/store/reducers/clusters.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/remote_clusters/public/store/reducers/clusters.js","mtime":1567631712124},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /*\n                                                                                                                                                                                                                                                                   * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                   * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                   * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                   */\n\nexports.clusters = clusters;\n\nvar _action_types = require('../action_types');\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nvar initialState = {\n  isLoading: false,\n  clusterLoadError: null,\n  asList: [],\n  byName: {},\n  allNames: []\n};\n\nfunction mapClustersToNames(clusters) {\n  var clustersByName = {};\n  clusters.forEach(function (cluster) {\n    clustersByName[cluster.name] = cluster;\n  });\n  return clustersByName;\n}\n\nfunction getClustersNames(clusters) {\n  return clusters.map(function (cluster) {\n    return cluster.name;\n  });\n}\n\nfunction clusters() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments[1];\n  var type = action.type,\n      payload = action.payload;\n\n\n  switch (type) {\n    case _action_types.LOAD_CLUSTERS_START:\n      return _extends({}, state, {\n        isLoading: true\n      });\n\n    case _action_types.LOAD_CLUSTERS_SUCCESS:\n      return {\n        asList: [].concat(_toConsumableArray(payload.clusters)),\n        byName: mapClustersToNames(payload.clusters),\n        allNames: getClustersNames(payload.clusters),\n        isLoading: false\n      };\n\n    case _action_types.REFRESH_CLUSTERS_SUCCESS:\n      return {\n        asList: [].concat(_toConsumableArray(payload.clusters)),\n        byName: mapClustersToNames(payload.clusters),\n        allNames: getClustersNames(payload.clusters)\n      };\n\n    case _action_types.LOAD_CLUSTERS_FAILURE:\n      return _extends({}, state, {\n        isLoading: false,\n        clusterLoadError: payload.error\n      });\n\n    default:\n      return state;\n  }\n}",null]}