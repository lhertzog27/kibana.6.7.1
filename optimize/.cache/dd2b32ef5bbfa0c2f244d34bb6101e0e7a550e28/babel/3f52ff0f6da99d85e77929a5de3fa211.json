{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/legacy/core_plugins/kibana/public/dashboard/lib/save_dashboard.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/legacy/core_plugins/kibana/public/dashboard/lib/save_dashboard.js","mtime":1567631711558},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.saveDashboard = saveDashboard;\n\nvar _update_saved_dashboard = require('./update_saved_dashboard');\n\n/**\n * Saves the dashboard.\n * @param toJson {function} A custom toJson function. Used because the previous code used\n * the angularized toJson version, and it was unclear whether there was a reason not to use\n * JSON.stringify\n * @param timeFilter\n * @param dashboardStateManager {DashboardStateManager}\n * @param {object} [saveOptions={}]\n * @property {boolean} [saveOptions.confirmOverwrite=false] - If true, attempts to create the source so it\n * can confirm an overwrite if a document with the id already exists.\n * @property {boolean} [saveOptions.isTitleDuplicateConfirmed=false] - If true, save allowed with duplicate title\n * @property {func} [saveOptions.onTitleDuplicate] - function called if duplicate title exists.\n * When not provided, confirm modal will be displayed asking user to confirm or cancel save.\n * @returns {Promise<string>} A promise that if resolved, will contain the id of the newly saved\n * dashboard.\n */\nfunction saveDashboard(toJson, timeFilter, dashboardStateManager, saveOptions) {\n  dashboardStateManager.saveState();\n\n  var savedDashboard = dashboardStateManager.savedDashboard;\n  var appState = dashboardStateManager.appState;\n\n  (0, _update_saved_dashboard.updateSavedDashboard)(savedDashboard, appState, timeFilter, toJson);\n\n  return savedDashboard.save(saveOptions).then(function (id) {\n    dashboardStateManager.lastSavedDashboardFilters = dashboardStateManager.getFilterState();\n    dashboardStateManager.resetState();\n    return id;\n  });\n} /*\n   * Licensed to Elasticsearch B.V. under one or more contributor\n   * license agreements. See the NOTICE file distributed with\n   * this work for additional information regarding copyright\n   * ownership. Elasticsearch B.V. licenses this file to you under\n   * the Apache License, Version 2.0 (the \"License\"); you may\n   * not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *    http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing,\n   * software distributed under the License is distributed on an\n   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n   * KIND, either express or implied.  See the License for the\n   * specific language governing permissions and limitations\n   * under the License.\n   */",null]}