{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/ui/public/vis/agg_config.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/vis/agg_config.js","mtime":1567631711768},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AggConfig = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\nicensed to Elasticsearch B.V. under one or more contributor\nlicense agreements. See the NOTICE file distributed with\nthis work for additional information regarding copyright\nownership. Elasticsearch B.V. licenses this file to you under\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * the Apache License, Version 2.0 (the \"License\"); you may\nnot use this file except in compliance with the License.\nou may obtain a copy of the License at\nnhttp://www.apache.org/licenses/LICENSE-2.0\nnnless required by applicable law or agreed to in writing,\nsoftware distributed under the License is distributed on an\nneither express or implied.  See the License for the\nspecific language governing permissions and limitations\nunder the License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      */\n\n/**\n * @name AggConfig\n *\n * @description This class represents an aggregation, which is displayed in the left-hand nav of\n * the Visualize app.\n */\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _field_formats = require('../registry/field_formats');\n\nvar _i18n = require('@kbn/i18n');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar AggConfig = function () {\n  _createClass(AggConfig, null, [{\n    key: 'ensureIds',\n\n\n    /**\n     * Ensure that all of the objects in the list have ids, the objects\n     * and list are modified by reference.\n     *\n     * @param  {array[object]} list - a list of objects, objects can be anything really\n     * @return {array} - the list that was passed in\n     */\n    value: function ensureIds(list) {\n      var have = [];\n      var haveNot = [];\n      list.forEach(function (obj) {\n        (obj.id ? have : haveNot).push(obj);\n      });\n\n      var nextId = AggConfig.nextId(have);\n      haveNot.forEach(function (obj) {\n        obj.id = String(nextId++);\n      });\n\n      return list;\n    }\n\n    /**\n     * Calculate the next id based on the ids in this list\n     *\n     * @return {array} list - a list of objects with id properties\n     */\n\n  }, {\n    key: 'nextId',\n    value: function nextId(list) {\n      return 1 + list.reduce(function (max, obj) {\n        return Math.max(max, +obj.id || 0);\n      }, 0);\n    }\n  }]);\n\n  function AggConfig(aggConfigs) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, AggConfig);\n\n    this.aggConfigs = aggConfigs;\n    this.id = String(opts.id || AggConfig.nextId(aggConfigs));\n    this._opts = opts;\n    this.enabled = typeof opts.enabled === 'boolean' ? opts.enabled : true;\n\n    // start with empty params so that checks in type/schema setters don't freak\n    // because this.params is undefined\n    this.params = {};\n\n    // setters\n    this.type = opts.type;\n    this.schema = opts.schema;\n\n    // set the params to the values from opts, or just to the defaults\n    this.setParams(opts.params || {});\n  }\n\n  /**\n   * Write the current values to this.params, filling in the defaults as we go\n   *\n   * @param  {object} [from] - optional object to read values from,\n   *                         used when initializing\n   * @return {undefined}\n   */\n\n\n  _createClass(AggConfig, [{\n    key: 'setParams',\n    value: function setParams(from) {\n      var _this = this;\n\n      from = from || this.params || {};\n      var to = this.params = {};\n\n      this.getAggParams().forEach(function (aggParam) {\n        var val = from[aggParam.name];\n\n        if (val == null) {\n          if (aggParam.default == null) return;\n\n          if (!_lodash2.default.isFunction(aggParam.default)) {\n            val = aggParam.default;\n          } else {\n            val = aggParam.default(_this);\n            if (val == null) return;\n          }\n        }\n\n        if (aggParam.deserialize) {\n          var isTyped = _lodash2.default.isFunction(aggParam.type);\n\n          var isType = isTyped && val instanceof aggParam.type;\n          var isObject = !isTyped && _lodash2.default.isObject(val);\n          var isDeserialized = isType || isObject;\n\n          if (!isDeserialized) {\n            val = aggParam.deserialize(val, _this);\n          }\n\n          to[aggParam.name] = val;\n          return;\n        }\n\n        to[aggParam.name] = _lodash2.default.cloneDeep(val);\n      });\n    }\n  }, {\n    key: 'write',\n    value: function write(aggs) {\n      return this.type.params.write(this, aggs);\n    }\n  }, {\n    key: 'isFilterable',\n    value: function isFilterable() {\n      return _lodash2.default.isFunction(this.type.createFilter);\n    }\n  }, {\n    key: 'createFilter',\n    value: function createFilter(key) {\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (!this.isFilterable()) {\n        throw new TypeError('The \"' + this.type.title + '\" aggregation does not support filtering.');\n      }\n\n      var field = this.getField();\n      var label = this.getFieldDisplayName();\n      if (field && !field.filterable) {\n        var message = 'The \"' + label + '\" field can not be used for filtering.';\n        if (field.scripted) {\n          message = 'The \"' + label + '\" field is scripted and can not be used for filtering.';\n        }\n        throw new TypeError(message);\n      }\n\n      return this.type.createFilter(this, key, params);\n    }\n\n    /**\n     *  Hook for pre-flight logic, see AggType#onSearchRequestStart\n     *  @param {Courier.SearchSource} searchSource\n     *  @param {Courier.SearchRequest} searchRequest\n     *  @return {Promise<undefined>}\n     */\n\n  }, {\n    key: 'onSearchRequestStart',\n    value: function onSearchRequestStart(searchSource, searchRequest) {\n      var _this2 = this;\n\n      if (!this.type) {\n        return Promise.resolve();\n      }\n\n      return Promise.all(this.type.params.map(function (param) {\n        return param.modifyAggConfigOnSearchRequestStart(_this2, searchSource, searchRequest);\n      }));\n    }\n\n    /**\n     * Convert this aggConfig to its dsl syntax.\n     *\n     * Adds params and adhoc subaggs to a pojo, then returns it\n     *\n     * @param  {AggConfigs} aggConfigs - the config object to convert\n     * @return {void|Object} - if the config has a dsl representation, it is\n     *                         returned, else undefined is returned\n     */\n\n  }, {\n    key: 'toDsl',\n    value: function toDsl(aggConfigs) {\n      if (this.type.hasNoDsl) return;\n      var output = this.write(aggConfigs);\n\n      var configDsl = {};\n      configDsl[this.type.dslName || this.type.name] = output.params;\n\n      // if the config requires subAggs, write them to the dsl as well\n      if (this.subAggs && !output.subAggs) output.subAggs = this.subAggs;\n      if (output.subAggs) {\n        var subDslLvl = configDsl.aggs || (configDsl.aggs = {});\n        output.subAggs.forEach(function nestAdhocSubAggs(subAggConfig) {\n          subDslLvl[subAggConfig.id] = subAggConfig.toDsl(aggConfigs);\n        });\n      }\n\n      if (output.parentAggs) {\n        var _subDslLvl = configDsl.parentAggs || (configDsl.parentAggs = {});\n        output.parentAggs.forEach(function nestAdhocSubAggs(subAggConfig) {\n          _subDslLvl[subAggConfig.id] = subAggConfig.toDsl(aggConfigs);\n        });\n      }\n\n      return configDsl;\n    }\n  }, {\n    key: 'toJSON',\n    value: function toJSON() {\n      var _this3 = this;\n\n      var params = this.params;\n\n      var outParams = _lodash2.default.transform(this.getAggParams(), function (out, aggParam) {\n        var val = params[aggParam.name];\n\n        // don't serialize undefined/null values\n        if (val == null) return;\n        if (aggParam.serialize) val = aggParam.serialize(val, _this3);\n        if (val == null) return;\n\n        // to prevent accidental leaking, we will clone all complex values\n        out[aggParam.name] = _lodash2.default.cloneDeep(val);\n      }, {});\n\n      return {\n        id: this.id,\n        enabled: this.enabled,\n        type: this.type && this.type.name,\n        schema: this.schema && this.schema.name,\n        params: outParams\n      };\n    }\n  }, {\n    key: 'getAggParams',\n    value: function getAggParams() {\n      return [].concat(_toConsumableArray(this.type ? this.type.params.raw : []), _toConsumableArray(_lodash2.default.has(this, 'schema.params') ? this.schema.params.raw : []));\n    }\n  }, {\n    key: 'getRequestAggs',\n    value: function getRequestAggs() {\n      if (!this.type) return;\n      return this.type.getRequestAggs(this) || [this];\n    }\n  }, {\n    key: 'getResponseAggs',\n    value: function getResponseAggs() {\n      if (!this.type) return;\n      return this.type.getResponseAggs(this) || [this];\n    }\n  }, {\n    key: 'getValue',\n    value: function getValue(bucket) {\n      return this.type.getValue(this, bucket);\n    }\n  }, {\n    key: 'getKey',\n    value: function getKey(bucket, key) {\n      return this.type.getKey(bucket, key, this);\n    }\n  }, {\n    key: 'getFieldDisplayName',\n    value: function getFieldDisplayName() {\n      var field = this.getField();\n      return field ? field.displayName || this.fieldName() : '';\n    }\n  }, {\n    key: 'getField',\n    value: function getField() {\n      return this.params.field;\n    }\n  }, {\n    key: 'makeLabel',\n    value: function makeLabel() {\n      var percentageMode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      if (this.params.customLabel) {\n        return this.params.customLabel;\n      }\n\n      if (!this.type) return '';\n      return percentageMode ? _i18n.i18n.translate('common.ui.vis.aggConfig.percentageOfLabel', {\n        defaultMessage: 'Percentage of {label}',\n        values: { label: this.type.makeLabel(this) }\n      }) : '' + this.type.makeLabel(this);\n    }\n  }, {\n    key: 'getIndexPattern',\n    value: function getIndexPattern() {\n      return _lodash2.default.get(this.aggConfigs, 'indexPattern', null);\n    }\n  }, {\n    key: 'getTimeRange',\n    value: function getTimeRange() {\n      return _lodash2.default.get(this.aggConfigs, 'timeRange', null);\n    }\n  }, {\n    key: 'fieldFormatter',\n    value: function fieldFormatter(contentType, defaultFormat) {\n      var format = this.type && this.type.getFormat(this);\n      if (format) return format.getConverterFor(contentType);\n      return this.fieldOwnFormatter(contentType, defaultFormat);\n    }\n  }, {\n    key: 'fieldOwnFormatter',\n    value: function fieldOwnFormatter(contentType, defaultFormat) {\n      var field = this.getField();\n      var format = field && field.format;\n      if (!format) format = defaultFormat;\n      if (!format) format = _field_formats.fieldFormats.getDefaultInstance('string');\n      return format.getConverterFor(contentType);\n    }\n  }, {\n    key: 'fieldName',\n    value: function fieldName() {\n      var field = this.getField();\n      return field ? field.name : '';\n    }\n  }, {\n    key: 'fieldIsTimeField',\n    value: function fieldIsTimeField() {\n      var timeFieldName = this.getIndexPattern().timeFieldName;\n      return timeFieldName && this.fieldName() === timeFieldName;\n    }\n  }, {\n    key: 'type',\n    get: function get() {\n      return this.__type;\n    },\n    set: function set(type) {\n      if (this.__typeDecorations) {\n        _lodash2.default.forOwn(this.__typeDecorations, function (prop, name) {\n          delete this[name];\n        }, this);\n      }\n\n      if (_lodash2.default.isString(type)) {\n        // We need to inline require here, since we're having a cyclic dependency\n        // from somewhere inside agg_types back to AggConfig.\n        type = require('../agg_types').aggTypes.byName[type];\n      }\n\n      if (type && _lodash2.default.isFunction(type.decorateAggConfig)) {\n        this.__typeDecorations = type.decorateAggConfig();\n        Object.defineProperties(this, this.__typeDecorations);\n      }\n\n      this.__type = type;\n\n      var fieldParam = _lodash2.default.get(this, 'type.params.byName.field');\n      var availableFields = fieldParam ? fieldParam.getAvailableFields(this.getIndexPattern().fields) : [];\n      // clear out the previous params except for a few special ones\n      this.setParams({\n        // split row/columns is \"outside\" of the agg, so don't reset it\n        row: this.params.row,\n\n        // almost every agg has fields, so we try to persist that when type changes\n        field: _lodash2.default.get(availableFields, ['byName', this.getField()])\n      });\n    }\n  }, {\n    key: 'schema',\n    get: function get() {\n      return this.__schema;\n    },\n    set: function set(schema) {\n      if (_lodash2.default.isString(schema) && this.aggConfigs.schemas) {\n        schema = this.aggConfigs.schemas.byName[schema];\n      }\n\n      this.__schema = schema;\n    }\n  }]);\n\n  return AggConfig;\n}();\n\nexports.AggConfig = AggConfig;",null]}