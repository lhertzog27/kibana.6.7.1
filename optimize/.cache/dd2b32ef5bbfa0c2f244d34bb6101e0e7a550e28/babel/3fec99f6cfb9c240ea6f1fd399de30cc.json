{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/components/annotations/annotations_table/annotations_table.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/components/annotations/annotations_table/annotations_table.js","mtime":1567631712026},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AnnotationsTable = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _class, _temp; /*\n                    * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                    * or more contributor license agreements. Licensed under the Elastic License;\n                    * you may not use this file except in compliance with the Elastic License.\n                    */\n\n/*\n * Table for displaying annotations. This is mostly a copy of the forecasts table.\n * This version supports both fetching the annotations by itself (used in the jobs list) and\n * getting the annotations via props (used in Anomaly Explorer and Single Series Viewer).\n */\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _risonNode = require('rison-node');\n\nvar _risonNode2 = _interopRequireDefault(_risonNode);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _eui = require('@elastic/eui');\n\nvar _services = require('@elastic/eui/lib/services');\n\nvar _format = require('@elastic/eui/lib/services/format');\n\nvar _chrome = require('ui/chrome');\n\nvar _chrome2 = _interopRequireDefault(_chrome);\n\nvar _recently_accessed = require('../../../util/recently_accessed');\n\nvar _ml_api_service = require('../../../services/ml_api_service');\n\nvar _job_service = require('../../../services/job_service');\n\nvar _table_service = require('../../../services/table_service');\n\nvar _search = require('../../../../common/constants/search');\n\nvar _job_utils = require('../../../../common/util/job_utils');\n\nvar _annotations_service = require('../../../services/annotations_service');\n\nvar _react3 = require('@kbn/i18n/react');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar TIME_FORMAT = 'YYYY-MM-DD HH:mm:ss';\n\n/**\n * Table component for rendering the lists of annotations for an ML job.\n */\nvar AnnotationsTable = (0, _react3.injectI18n)((_temp = _class = function (_Component) {\n  _inherits(AnnotationsTable, _Component);\n\n  function AnnotationsTable(props) {\n    _classCallCheck(this, AnnotationsTable);\n\n    var _this = _possibleConstructorReturn(this, (AnnotationsTable.__proto__ || Object.getPrototypeOf(AnnotationsTable)).call(this, props));\n\n    _this.annotationsRefreshSubscription = null;\n    _this.previousJobId = undefined;\n\n    _this.openSingleMetricView = function () {\n      var annotation = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      // Creates the link to the Single Metric Viewer.\n      // Set the total time range from the start to the end of the annotation.\n      var job = _this.getJob(annotation.job_id);\n      var dataCounts = job.data_counts;\n      var from = new Date(dataCounts.earliest_record_timestamp).toISOString();\n      var to = new Date(dataCounts.latest_record_timestamp).toISOString();\n\n      var globalSettings = {\n        ml: {\n          jobIds: [job.job_id]\n        },\n        refreshInterval: {\n          display: 'Off',\n          pause: false,\n          value: 0\n        },\n        time: {\n          from: from,\n          to: to,\n          mode: 'absolute'\n        }\n      };\n\n      var appState = {\n        filters: [],\n        query: {\n          query_string: {\n            analyze_wildcard: true,\n            query: '*'\n          }\n        }\n      };\n\n      if (annotation.timestamp !== undefined && annotation.end_timestamp !== undefined) {\n        appState.mlTimeSeriesExplorer = {\n          zoom: {\n            from: new Date(annotation.timestamp).toISOString(),\n            to: new Date(annotation.end_timestamp).toISOString()\n          }\n        };\n\n        if (annotation.timestamp < dataCounts.earliest_record_timestamp) {\n          globalSettings.time.from = new Date(annotation.timestamp).toISOString();\n        }\n\n        if (annotation.end_timestamp > dataCounts.latest_record_timestamp) {\n          globalSettings.time.to = new Date(annotation.end_timestamp).toISOString();\n        }\n      }\n\n      var _g = _risonNode2.default.encode(globalSettings);\n      var _a = _risonNode2.default.encode(appState);\n\n      var url = '?_g=' + _g + '&_a=' + _a;\n      (0, _recently_accessed.addItemToRecentlyAccessed)('timeseriesexplorer', job.job_id, url);\n      window.open(_chrome2.default.getBasePath() + '/app/ml#/timeseriesexplorer' + url, '_self');\n    };\n\n    _this.onMouseOverRow = function (record) {\n      if (_this.mouseOverRecord !== undefined) {\n        if (_this.mouseOverRecord.rowId !== record.rowId) {\n          // Mouse is over a different row, fire mouseleave on the previous record.\n          _table_service.mlTableService.rowMouseleave.changed(_this.mouseOverRecord, 'annotation');\n\n          // fire mouseenter on the new record.\n          _table_service.mlTableService.rowMouseenter.changed(record, 'annotation');\n        }\n      } else {\n        // Mouse is now over a row, fire mouseenter on the record.\n        _table_service.mlTableService.rowMouseenter.changed(record, 'annotation');\n      }\n\n      _this.mouseOverRecord = record;\n    };\n\n    _this.onMouseLeaveRow = function () {\n      if (_this.mouseOverRecord !== undefined) {\n        _table_service.mlTableService.rowMouseleave.changed(_this.mouseOverRecord, 'annotation');\n        _this.mouseOverRecord = undefined;\n      }\n    };\n\n    _this.state = {\n      annotations: [],\n      isLoading: false,\n      // Need to do a detailed check here because the angular wrapper could pass on something like `[undefined]`.\n      jobId: Array.isArray(_this.props.jobs) && _this.props.jobs.length > 0 && _this.props.jobs[0] !== undefined ? _this.props.jobs[0].job_id : undefined\n    };\n    return _this;\n  }\n\n  _createClass(AnnotationsTable, [{\n    key: 'getAnnotations',\n    value: function getAnnotations() {\n      var _this2 = this;\n\n      var job = this.props.jobs[0];\n      var dataCounts = job.data_counts;\n\n      this.setState({\n        isLoading: true\n      });\n\n      if (dataCounts.processed_record_count > 0) {\n        // Load annotations for the selected job.\n        _ml_api_service.ml.annotations.getAnnotations({\n          jobIds: [job.job_id],\n          earliestMs: null,\n          latestMs: null,\n          maxAnnotations: _search.ANNOTATIONS_TABLE_DEFAULT_QUERY_SIZE\n        }).then(function (resp) {\n          _this2.setState(function (prevState, props) {\n            return {\n              annotations: resp.annotations[props.jobs[0].job_id] || [],\n              errorMessage: undefined,\n              isLoading: false,\n              jobId: props.jobs[0].job_id\n            };\n          });\n        }).catch(function (resp) {\n          console.log('Error loading list of annotations for jobs list:', resp);\n          _this2.setState({\n            annotations: [],\n            errorMessage: 'Error loading the list of annotations for this job',\n            isLoading: false,\n            jobId: undefined\n          });\n        });\n      }\n    }\n  }, {\n    key: 'getJob',\n    value: function getJob(jobId) {\n      // check if the job was supplied via props and matches the supplied jobId\n      if (Array.isArray(this.props.jobs) && this.props.jobs.length > 0) {\n        var job = this.props.jobs[0];\n        if (jobId === undefined || job.job_id === jobId) {\n          return job;\n        }\n      }\n\n      return _job_service.mlJobService.getJob(jobId);\n    }\n  }, {\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var _this3 = this;\n\n      if (this.props.annotations === undefined && Array.isArray(this.props.jobs) && this.props.jobs.length > 0) {\n        this.annotationsRefreshSubscription = _annotations_service.annotationsRefresh$.subscribe(function () {\n          return _this3.getAnnotations();\n        });\n        _annotations_service.annotationsRefresh$.next();\n      }\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate() {\n      if (Array.isArray(this.props.jobs) && this.props.jobs.length > 0 && this.previousJobId !== this.props.jobs[0].job_id && this.props.annotations === undefined && this.state.isLoading === false && this.state.jobId !== this.props.jobs[0].job_id) {\n        _annotations_service.annotationsRefresh$.next();\n        this.previousJobId = this.props.jobs[0].job_id;\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      if (this.annotationsRefreshSubscription !== null) {\n        this.annotationsRefreshSubscription.unsubscribe();\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this4 = this;\n\n      var _props = this.props,\n          _props$isSingleMetric = _props.isSingleMetricViewerLinkVisible,\n          isSingleMetricViewerLinkVisible = _props$isSingleMetric === undefined ? true : _props$isSingleMetric,\n          _props$isNumberBadgeV = _props.isNumberBadgeVisible,\n          isNumberBadgeVisible = _props$isNumberBadgeV === undefined ? false : _props$isNumberBadgeV,\n          intl = _props.intl;\n\n\n      if (this.props.annotations === undefined) {\n        if (this.state.isLoading === true) {\n          return _react2.default.createElement(\n            _eui.EuiFlexGroup,\n            { justifyContent: 'spaceAround' },\n            _react2.default.createElement(\n              _eui.EuiFlexItem,\n              { grow: false },\n              _react2.default.createElement(_eui.EuiLoadingSpinner, { size: 'l' })\n            )\n          );\n        }\n\n        if (this.state.errorMessage !== undefined) {\n          return _react2.default.createElement(_eui.EuiCallOut, {\n            title: this.state.errorMessage,\n            color: 'danger',\n            iconType: 'cross'\n          });\n        }\n      }\n\n      var annotations = this.props.annotations || this.state.annotations;\n\n      if (annotations.length === 0) {\n        return _react2.default.createElement(\n          _eui.EuiCallOut,\n          {\n            title: _react2.default.createElement(_react3.FormattedMessage, {\n              id: 'xpack.ml.annotationsTable.annotationsNotCreatedTitle',\n              defaultMessage: 'No annotations created for this job'\n            }),\n            iconType: 'iInCircle'\n          },\n          this.state.jobId && (0, _job_utils.isTimeSeriesViewJob)(this.getJob(this.state.jobId)) && _react2.default.createElement(\n            'p',\n            null,\n            _react2.default.createElement(_react3.FormattedMessage, {\n              id: 'xpack.ml.annotationsTable.howToCreateAnnotationDescription',\n              defaultMessage: 'To create an annotation, open the {linkToSingleMetricView}',\n              values: {\n                linkToSingleMetricView: _react2.default.createElement(\n                  _eui.EuiLink,\n                  { onClick: function onClick() {\n                      return _this4.openSingleMetricView();\n                    } },\n                  _react2.default.createElement(_react3.FormattedMessage, {\n                    id: 'xpack.ml.annotationsTable.howToCreateAnnotationDescription.singleMetricViewerLinkText',\n                    defaultMessage: 'Single Metric Viewer'\n                  })\n                )\n              }\n            })\n          )\n        );\n      }\n\n      function renderDate(date) {\n        return (0, _format.formatDate)(date, TIME_FORMAT);\n      }\n\n      var columns = [{\n        field: 'annotation',\n        name: intl.formatMessage({\n          id: 'xpack.ml.annotationsTable.annotationColumnName',\n          defaultMessage: 'Annotation'\n        }),\n        sortable: true\n      }, {\n        field: 'timestamp',\n        name: intl.formatMessage({\n          id: 'xpack.ml.annotationsTable.fromColumnName',\n          defaultMessage: 'From'\n        }),\n        dataType: 'date',\n        render: renderDate,\n        sortable: true\n      }, {\n        field: 'end_timestamp',\n        name: intl.formatMessage({\n          id: 'xpack.ml.annotationsTable.toColumnName',\n          defaultMessage: 'To'\n        }),\n        dataType: 'date',\n        render: renderDate,\n        sortable: true\n      }, {\n        field: 'create_time',\n        name: intl.formatMessage({\n          id: 'xpack.ml.annotationsTable.creationDateColumnName',\n          defaultMessage: 'Creation date'\n        }),\n        dataType: 'date',\n        render: renderDate,\n        sortable: true\n      }, {\n        field: 'create_username',\n        name: intl.formatMessage({\n          id: 'xpack.ml.annotationsTable.createdByColumnName',\n          defaultMessage: 'Created by'\n        }),\n        sortable: true\n      }, {\n        field: 'modified_time',\n        name: intl.formatMessage({\n          id: 'xpack.ml.annotationsTable.lastModifiedDateColumnName',\n          defaultMessage: 'Last modified date'\n        }),\n        dataType: 'date',\n        render: renderDate,\n        sortable: true\n      }, {\n        field: 'modified_username',\n        name: intl.formatMessage({\n          id: 'xpack.ml.annotationsTable.lastModifiedByColumnName',\n          defaultMessage: 'Last modified by'\n        }),\n        sortable: true\n      }];\n\n      var jobIds = _lodash2.default.uniq(annotations.map(function (a) {\n        return a.job_id;\n      }));\n      if (jobIds.length > 1) {\n        columns.unshift({\n          field: 'job_id',\n          name: intl.formatMessage({\n            id: 'xpack.ml.annotationsTable.jobIdColumnName',\n            defaultMessage: 'job ID'\n          }),\n          sortable: true\n        });\n      }\n\n      if (isNumberBadgeVisible) {\n        columns.unshift({\n          field: 'key',\n          name: intl.formatMessage({\n            id: 'xpack.ml.annotationsTable.labelColumnName',\n            defaultMessage: 'Label'\n          }),\n          sortable: true,\n          width: '60px',\n          render: function render(key) {\n            return _react2.default.createElement(\n              _eui.EuiBadge,\n              { color: 'default' },\n              key\n            );\n          }\n        });\n      }\n\n      var actions = [];\n\n      actions.push({\n        render: function render(annotation) {\n          var editAnnotationsTooltipText = _react2.default.createElement(_react3.FormattedMessage, {\n            id: 'xpack.ml.annotationsTable.editAnnotationsTooltip',\n            defaultMessage: 'Edit annotation'\n          });\n          var editAnnotationsTooltipAriaLabelText = _react2.default.createElement(_react3.FormattedMessage, {\n            id: 'xpack.ml.annotationsTable.editAnnotationsTooltipAriaLabel',\n            defaultMessage: 'Edit annotation'\n          });\n          return _react2.default.createElement(\n            _eui.EuiToolTip,\n            {\n              position: 'bottom',\n              content: editAnnotationsTooltipText\n            },\n            _react2.default.createElement(_eui.EuiButtonIcon, {\n              onClick: function onClick() {\n                return _annotations_service.annotation$.next(annotation);\n              },\n              iconType: 'pencil',\n              'aria-label': editAnnotationsTooltipAriaLabelText\n            })\n          );\n        }\n      });\n\n      if (isSingleMetricViewerLinkVisible) {\n        actions.push({\n          render: function render(annotation) {\n            var isDrillDownAvailable = (0, _job_utils.isTimeSeriesViewJob)(_this4.getJob(annotation.job_id));\n            var openInSingleMetricViewerTooltipText = isDrillDownAvailable ? _react2.default.createElement(_react3.FormattedMessage, {\n              id: 'xpack.ml.annotationsTable.openInSingleMetricViewerTooltip',\n              defaultMessage: 'Open in Single Metric Viewer'\n            }) : _react2.default.createElement(_react3.FormattedMessage, {\n              id: 'xpack.ml.annotationsTable.jobConfigurationNotSupportedInSingleMetricViewerTooltip',\n              defaultMessage: 'Job configuration not supported in Single Metric Viewer'\n            });\n            var openInSingleMetricViewerAriaLabelText = isDrillDownAvailable ? _react2.default.createElement(_react3.FormattedMessage, {\n              id: 'xpack.ml.annotationsTable.openInSingleMetricViewerAriaLabel',\n              defaultMessage: 'Open in Single Metric Viewer'\n            }) : _react2.default.createElement(_react3.FormattedMessage, {\n              id: 'xpack.ml.annotationsTable.jobConfigurationNotSupportedInSingleMetricViewerAriaLabel',\n              defaultMessage: 'Job configuration not supported in Single Metric Viewer'\n            });\n\n            return _react2.default.createElement(\n              _eui.EuiToolTip,\n              {\n                position: 'bottom',\n                content: openInSingleMetricViewerTooltipText\n              },\n              _react2.default.createElement(_eui.EuiButtonIcon, {\n                onClick: function onClick() {\n                  return _this4.openSingleMetricView(annotation);\n                },\n                disabled: !isDrillDownAvailable,\n                iconType: 'stats',\n                'aria-label': openInSingleMetricViewerAriaLabelText\n              })\n            );\n          }\n        });\n      }\n\n      columns.push({\n        align: _services.RIGHT_ALIGNMENT,\n        width: '60px',\n        name: intl.formatMessage({\n          id: 'xpack.ml.annotationsTable.actionsColumnName',\n          defaultMessage: 'Actions'\n        }),\n        actions: actions\n      });\n\n      var getRowProps = function getRowProps(item) {\n        return {\n          onMouseOver: function onMouseOver() {\n            return _this4.onMouseOverRow(item);\n          },\n          onMouseLeave: function onMouseLeave() {\n            return _this4.onMouseLeaveRow();\n          }\n        };\n      };\n\n      return _react2.default.createElement(\n        _react.Fragment,\n        null,\n        _react2.default.createElement(_eui.EuiInMemoryTable, {\n          className: 'eui-textOverflowWrap',\n          compressed: true,\n          items: annotations,\n          columns: columns,\n          pagination: {\n            pageSizeOptions: [5, 10, 25]\n          },\n          sorting: {\n            sort: {\n              field: 'timestamp', direction: 'asc'\n            }\n          },\n          rowProps: getRowProps\n        })\n      );\n    }\n  }]);\n\n  return AnnotationsTable;\n}(_react.Component), _class.propTypes = {\n  annotations: _propTypes2.default.array,\n  jobs: _propTypes2.default.array,\n  isSingleMetricViewerLinkVisible: _propTypes2.default.bool,\n  isNumberBadgeVisible: _propTypes2.default.bool\n}, _temp));\n\nexports.AnnotationsTable = AnnotationsTable;",null]}