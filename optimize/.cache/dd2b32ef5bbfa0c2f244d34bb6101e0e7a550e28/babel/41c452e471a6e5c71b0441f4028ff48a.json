{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/canvas_plugin_src/uis/arguments/datacolumn/index.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/canvas_plugin_src/uis/arguments/datacolumn/index.js","mtime":1567631711909},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.datacolumn = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _recompose = require('recompose');\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _eui = require('@elastic/eui');\n\nvar _lodash = require('lodash');\n\nvar _common = require('@kbn/interpreter/common');\n\nvar _stateful_prop = require('../../../../public/components/enhance/stateful_prop');\n\nvar _template_from_react_component = require('../../../../public/lib/template_from_react_component');\n\nvar _simple_math_function = require('./simple_math_function');\n\nvar _get_form_object = require('./get_form_object');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\nvar maybeQuoteValue = function maybeQuoteValue(val) {\n  return val.match(/\\s/) ? '\\'' + val + '\\'' : val;\n};\n\n// TODO: Garbage, we could make a much nicer math form that can handle way more.\n\nvar DatacolumnArgInput = function (_Component) {\n  _inherits(DatacolumnArgInput, _Component);\n\n  function DatacolumnArgInput() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, DatacolumnArgInput);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = DatacolumnArgInput.__proto__ || Object.getPrototypeOf(DatacolumnArgInput)).call.apply(_ref, [this].concat(args))), _this), _this.inputRefs = {}, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(DatacolumnArgInput, [{\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var _props = this.props,\n          onValueChange = _props.onValueChange,\n          columns = _props.columns,\n          mathValue = _props.mathValue,\n          setMathFunction = _props.setMathFunction,\n          renderError = _props.renderError,\n          argId = _props.argId,\n          typeInstance = _props.typeInstance;\n\n\n      if (mathValue.error) {\n        renderError();\n        return null;\n      }\n\n      var allowedTypes = typeInstance.options.allowedTypes || false;\n      var onlyShowMathFunctions = typeInstance.options.onlyMath || false;\n      var valueNotSet = function valueNotSet(val) {\n        return !val || val.length === 0;\n      };\n\n      var updateFunctionValue = function updateFunctionValue() {\n        var fn = _this2.inputRefs.fn.value;\n        var column = _this2.inputRefs.column.value;\n\n        // if setting size, auto-select the first column if no column is already set\n        if (fn === 'size') {\n          var col = column || columns[0] && columns[0].name;\n          if (col) {\n            return onValueChange(fn + '(' + maybeQuoteValue(col) + ')');\n          }\n        }\n\n        // this.inputRefs.column is the column selection, if there is no value, do nothing\n        if (valueNotSet(column)) {\n          return setMathFunction(fn);\n        }\n\n        // this.inputRefs.fn is the math function to use, if it's not set, just use the value input\n        if (valueNotSet(fn)) {\n          return onValueChange(column);\n        }\n\n        // this.inputRefs.fn has a value, so use it as a math.js expression\n        onValueChange(fn + '(' + maybeQuoteValue(column) + ')');\n      };\n\n      var column = columns.map(function (col) {\n        return col.name;\n      }).find(function (colName) {\n        return colName === mathValue.column;\n      }) || '';\n\n      var options = [{ value: '', text: 'select column', disabled: true }];\n\n      (0, _lodash.sortBy)(columns, 'name').forEach(function (column) {\n        if (allowedTypes && !allowedTypes.includes(column.type)) {\n          return;\n        }\n        options.push({ value: column.name, text: column.name });\n      });\n\n      return _react2.default.createElement(\n        _eui.EuiFlexGroup,\n        { gutterSize: 's', id: argId },\n        _react2.default.createElement(\n          _eui.EuiFlexItem,\n          { grow: false },\n          _react2.default.createElement(_simple_math_function.SimpleMathFunction, {\n            id: argId,\n            value: mathValue.fn,\n            inputRef: function inputRef(ref) {\n              return _this2.inputRefs.fn = ref;\n            },\n            onlymath: onlyShowMathFunctions,\n            onChange: updateFunctionValue\n          })\n        ),\n        _react2.default.createElement(\n          _eui.EuiFlexItem,\n          null,\n          _react2.default.createElement(_eui.EuiSelect, {\n            compressed: true,\n            options: options,\n            value: column,\n            inputRef: function inputRef(ref) {\n              return _this2.inputRefs.column = ref;\n            },\n            onChange: updateFunctionValue\n          })\n        )\n      );\n    }\n  }]);\n\n  return DatacolumnArgInput;\n}(_react.Component);\n\nDatacolumnArgInput.propTypes = {\n  columns: _propTypes2.default.array.isRequired,\n  onValueChange: _propTypes2.default.func.isRequired,\n  mathValue: _propTypes2.default.object.isRequired,\n  setMathFunction: _propTypes2.default.func.isRequired,\n  typeInstance: _propTypes2.default.object.isRequired,\n  renderError: _propTypes2.default.func.isRequired,\n  argId: _propTypes2.default.string.isRequired\n};\n\n\nvar EnhancedDatacolumnArgInput = (0, _recompose.compose)((0, _recompose.withPropsOnChange)(['argValue', 'columns'], function (_ref2) {\n  var argValue = _ref2.argValue,\n      columns = _ref2.columns;\n  return {\n    mathValue: function (argValue) {\n      if ((0, _common.getType)(argValue) !== 'string') {\n        return { error: 'argValue is not a string type' };\n      }\n      try {\n        var matchedCol = columns.find(function (_ref3) {\n          var name = _ref3.name;\n          return argValue === name;\n        });\n        var val = matchedCol ? maybeQuoteValue(matchedCol.name) : argValue;\n        return (0, _get_form_object.getFormObject)(val);\n      } catch (e) {\n        return { error: e.message };\n      }\n    }(argValue)\n  };\n}), (0, _stateful_prop.createStatefulPropHoc)('mathValue', 'setMathValue'), (0, _recompose.withHandlers)({\n  setMathFunction: function setMathFunction(_ref4) {\n    var mathValue = _ref4.mathValue,\n        setMathValue = _ref4.setMathValue;\n    return function (fn) {\n      return setMathValue(_extends({}, mathValue, { fn: fn }));\n    };\n  }\n}))(DatacolumnArgInput);\n\nEnhancedDatacolumnArgInput.propTypes = {\n  argValue: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object]).isRequired,\n  columns: _propTypes2.default.array.isRequired\n};\n\nvar datacolumn = exports.datacolumn = function datacolumn() {\n  return {\n    name: 'datacolumn',\n    displayName: 'Column',\n    help: 'Select the data column',\n    default: '\"\"',\n    simpleTemplate: (0, _template_from_react_component.templateFromReactComponent)(EnhancedDatacolumnArgInput)\n  };\n};",null]}