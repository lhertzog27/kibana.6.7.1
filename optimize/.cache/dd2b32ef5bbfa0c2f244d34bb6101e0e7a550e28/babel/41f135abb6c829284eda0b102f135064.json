{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/packages/kbn-interpreter/target/common/registries.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/packages/kbn-interpreter/target/common/registries.js","mtime":1567666389752},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.addRegistries = addRegistries;\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/**\n * Add a new set of registries to an existing set of registries.\n *\n * @param {*} registries - The existing set of registries\n * @param {*} newRegistries - The new set of registries\n */\nfunction addRegistries(registries, newRegistries) {\n  Object.keys(newRegistries).forEach(function (registryName) {\n    if (registries[registryName]) {\n      throw new Error(\"There is already a registry named \\\"\" + registryName + \"\\\".\");\n    }\n    registries[registryName] = newRegistries[registryName];\n  });\n\n  return registries;\n}\n\n/**\n * Register a set of interpreter specs (functions, types, renderers, etc)\n *\n * @param {*} registries - The set of registries\n * @param {*} specs - The specs to be regsitered (e.g. { types: [], browserFunctions: [] })\n */\nfunction _register(registries, specs) {\n  Object.keys(specs).forEach(function (registryName) {\n    if (!registries[registryName]) {\n      throw new Error(\"There is no registry named \\\"\" + registryName + \"\\\".\");\n    }\n\n    if (!registries[registryName].register) {\n      throw new Error(\"Registry \\\"\" + registryName + \"\\\" must have a register function.\");\n    }\n    specs[registryName].forEach(function (f) {\n      return registries[registryName].register(f);\n    });\n  });\n\n  return registries;\n}\n\n/**\n * A convenience function for exposing registries and register in a plugin-friendly way\n * as a global in the browser, and as server.plugins.interpreter.register | registries\n * on the server.\n *\n * @param {*} registries - The registries to wrap.\n */\nexports.register = _register;\nfunction registryFactory(_registries) {\n  return {\n    // This is a getter function. We can't make it a property or a proper\n    // getter, because Kibana server will improperly clone it.\n    registries: function registries() {\n      return _registries;\n    },\n    register: function register(specs) {\n      return _register(_registries, specs);\n    }\n  };\n}\nexports.registryFactory = registryFactory;",null]}