{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/maps/public/shared/components/metrics_editor.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/maps/public/shared/components/metrics_editor.js","mtime":1567631712018},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nexports.MetricsEditor = MetricsEditor;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _i18n = require('@kbn/i18n');\n\nvar _eui = require('@elastic/eui');\n\nvar _metric_select = require('./metric_select');\n\nvar _single_field_select = require('./single_field_select');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } } /*\n                                                                                                                                                                                                     * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                     * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                     * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                     */\n\nfunction MetricsEditor(_ref) {\n  var fields = _ref.fields,\n      metrics = _ref.metrics,\n      onChange = _ref.onChange,\n      allowMultipleMetrics = _ref.allowMultipleMetrics,\n      metricsFilter = _ref.metricsFilter;\n\n\n  function onMetricChange(metric, index) {\n    onChange([].concat(_toConsumableArray(metrics.slice(0, index)), [metric], _toConsumableArray(metrics.slice(index + 1))));\n  }\n\n  function renderMetrics() {\n    return metrics.map(function (metric, index) {\n      var onAggChange = function onAggChange(metricAggregationType) {\n        var updatedMetric = _extends({}, metric, {\n          type: metricAggregationType\n        });\n        onMetricChange(updatedMetric, index);\n      };\n      var onFieldChange = function onFieldChange(fieldName) {\n        var updatedMetric = _extends({}, metric, {\n          field: fieldName\n        });\n        onMetricChange(updatedMetric, index);\n      };\n      var onRemove = function onRemove() {\n        onChange([].concat(_toConsumableArray(metrics.slice(0, index)), _toConsumableArray(metrics.slice(index + 1))));\n      };\n      var fieldSelect = void 0;\n      if (metric.type && metric.type !== 'count') {\n        var filterNumberFields = function filterNumberFields(field) {\n          return field.type === 'number';\n        };\n        fieldSelect = _react2.default.createElement(\n          _eui.EuiFlexItem,\n          null,\n          _react2.default.createElement(_single_field_select.SingleFieldSelect, {\n            placeholder: _i18n.i18n.translate('xpack.maps.metricsEditor.selectFieldPlaceholder', {\n              defaultMessage: 'Select field'\n            }),\n            value: metric.field,\n            onChange: onFieldChange,\n            filterField: filterNumberFields,\n            fields: fields,\n            isClearable: false\n          })\n        );\n      }\n      var removeButton = void 0;\n      if (index > 0) {\n        removeButton = _react2.default.createElement(\n          _eui.EuiFlexItem,\n          { grow: false },\n          _react2.default.createElement(_eui.EuiButtonIcon, {\n            iconType: 'trash',\n            color: 'danger',\n            'aria-label': _i18n.i18n.translate('xpack.maps.metricsEditor.deleteMetricAriaLabel', {\n              defaultMessage: 'Delete metric'\n            }),\n            title: _i18n.i18n.translate('xpack.maps.metricsEditor.deleteMetricButtonLabel', {\n              defaultMessage: 'Delete metric'\n            }),\n            onClick: onRemove\n          })\n        );\n      }\n      return _react2.default.createElement(\n        _eui.EuiFlexGroup,\n        { alignItems: 'center', key: index },\n        _react2.default.createElement(\n          _eui.EuiFlexItem,\n          null,\n          _react2.default.createElement(_metric_select.MetricSelect, {\n            onChange: onAggChange,\n            value: metric.type,\n            metricsFilter: metricsFilter\n          })\n        ),\n        fieldSelect,\n        removeButton\n      );\n    });\n  }\n\n  function addMetric() {\n    onChange([].concat(_toConsumableArray(metrics), [{}]));\n  }\n\n  function renderAddMetricButton() {\n\n    if (!allowMultipleMetrics) {\n      return null;\n    }\n\n    return _react2.default.createElement(_eui.EuiButtonIcon, {\n      iconType: 'plusInCircle',\n      onClick: addMetric,\n      'aria-label': _i18n.i18n.translate('xpack.maps.metricsEditor.addMetricAriaLabel', {\n        defaultMessage: 'Add metric'\n      }),\n      title: _i18n.i18n.translate('xpack.maps.metricsEditor.addMetricButtonLabel', {\n        defaultMessage: 'Add metric'\n      })\n    });\n  }\n\n  return _react2.default.createElement(\n    _react.Fragment,\n    null,\n    _react2.default.createElement(\n      _eui.EuiFlexGroup,\n      { alignItems: 'center' },\n      _react2.default.createElement(\n        _eui.EuiFlexItem,\n        { grow: true },\n        _react2.default.createElement(\n          _eui.EuiFormLabel,\n          { style: { marginBottom: 0 } },\n          'Metrics'\n        )\n      ),\n      _react2.default.createElement(\n        _eui.EuiFlexItem,\n        { grow: false },\n        renderAddMetricButton()\n      )\n    ),\n    renderMetrics()\n  );\n}\n\nMetricsEditor.propTypes = {\n  metrics: _propTypes2.default.arrayOf(_propTypes2.default.shape({\n    type: _propTypes2.default.oneOf(_metric_select.METRIC_AGGREGATION_VALUES),\n    field: _propTypes2.default.string\n  })),\n  fields: _propTypes2.default.object, // indexPattern.fields IndexedArray object\n  onChange: _propTypes2.default.func.isRequired,\n  allowMultipleMetrics: _propTypes2.default.bool,\n  metricsFilter: _propTypes2.default.func\n};\n\nMetricsEditor.defaultProps = {\n  metrics: [{ type: 'count' }],\n  allowMultipleMetrics: true\n};",null]}