{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/security/public/views/management/roles.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/security/public/views/management/roles.js","mtime":1567631712302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _routes = require('ui/routes');\n\nvar _routes2 = _interopRequireDefault(_routes);\n\nvar _notify = require('ui/notify');\n\nvar _util = require('plugins/security/lib/util');\n\nvar _role = require('plugins/security/lib/role');\n\nvar _roles = require('plugins/security/views/management/roles.html');\n\nvar _roles2 = _interopRequireDefault(_roles);\n\nrequire('plugins/security/services/shield_role');\n\nvar _check_license_error = require('plugins/security/lib/check_license_error');\n\nvar _gate_keeper = require('plugins/xpack_main/services/gate_keeper');\n\nvar _management_urls = require('./management_urls');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\n_routes2.default.when(_management_urls.ROLES_PATH, {\n  template: _roles2.default,\n  resolve: {\n    tribeRedirect: function tribeRedirect(Private) {\n      var gateKeeper = Private(_gate_keeper.GateKeeperProvider);\n      gateKeeper.redirectAndNotifyIfTribe();\n    },\n    roles: function roles(ShieldRole, kbnUrl, Promise, Private) {\n      // $promise is used here because the result is an ngResource, not a promise itself\n      return ShieldRole.query().$promise.catch((0, _check_license_error.checkLicenseError)(kbnUrl, Promise, Private)).catch(_lodash2.default.identity); // Return the error if there is one\n    }\n  },\n  controller: function controller($scope, $route, $q, confirmModal, i18n) {\n    $scope.roles = $route.current.locals.roles;\n    $scope.forbidden = !_lodash2.default.isArray($scope.roles);\n    $scope.selectedRoles = [];\n    $scope.sort = { orderBy: 'name', reverse: false };\n    $scope.editRolesHref = '#' + _management_urls.EDIT_ROLES_PATH;\n    $scope.getEditRoleHref = function (role) {\n      return '#' + _management_urls.EDIT_ROLES_PATH + '/' + role;\n    };\n\n    $scope.deleteRoles = function () {\n      var doDelete = function doDelete() {\n        $q.all($scope.selectedRoles.map(function (role) {\n          return role.$delete();\n        })).then(function () {\n          return _notify.toastNotifications.addSuccess(i18n('xpack.security.management.roles.deleteRoleTitle', {\n            defaultMessage: 'Deleted {value, plural, one {role} other {roles}}',\n            values: {\n              value: $scope.selectedRoles.length\n            }\n          }));\n        }).then(function () {\n          $scope.selectedRoles.map(function (role) {\n            var i = $scope.roles.indexOf(role);\n            $scope.roles.splice(i, 1);\n          });\n          $scope.selectedRoles.length = 0;\n        });\n      };\n      var confirmModalOptions = {\n        confirmButtonText: i18n('xpack.security.management.roles.deleteRoleConfirmButtonLabel', {\n          defaultMessage: 'Delete role(s)'\n        }),\n        onConfirm: doDelete\n      };\n      confirmModal(i18n('xpack.security.management.roles.deletingRolesWarningMessage', {\n        defaultMessage: 'Are you sure you want to delete the selected role(s)? This action is irreversible!'\n      }), confirmModalOptions);\n    };\n\n    $scope.getSortArrowClass = function (field) {\n      if ($scope.sort.orderBy === field) {\n        return $scope.sort.reverse ? 'fa-long-arrow-down' : 'fa-long-arrow-up';\n      }\n\n      // Sort ascending by default.\n      return 'fa-long-arrow-up';\n    };\n\n    $scope.toggleAll = function () {\n      if ($scope.allSelected()) {\n        $scope.selectedRoles.length = 0;\n      } else {\n        $scope.selectedRoles = getActionableRoles().slice();\n      }\n    };\n\n    $scope.allSelected = function () {\n      var roles = getActionableRoles();\n      return roles.length && roles.length === $scope.selectedRoles.length;\n    };\n\n    $scope.isRoleEnabled = _role.isRoleEnabled;\n\n    $scope.toggle = _util.toggle;\n    $scope.includes = _lodash2.default.includes;\n    $scope.toggleSort = _util.toggleSort;\n\n    function getActionableRoles() {\n      return $scope.roles.filter(function (role) {\n        return !role.metadata._reserved;\n      });\n    }\n\n    $scope.reversedTooltip = i18n('xpack.security.management.roles.reversedTooltip', {\n      defaultMessage: 'Reserved roles are built-in and cannot be removed or modified. Only the password may be changed.'\n    });\n\n    $scope.reversedAriaLabel = i18n('xpack.security.management.roles.reversedAriaLabel', {\n      defaultMessage: 'Reserved roles are built-in and cannot be removed or modified. Only the password may be changed.'\n    });\n  }\n});",null]}