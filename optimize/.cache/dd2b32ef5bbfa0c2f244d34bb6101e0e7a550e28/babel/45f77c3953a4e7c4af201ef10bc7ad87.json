{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/maps/public/shared/components/single_field_select.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/maps/public/shared/components/single_field_select.js","mtime":1567631712018},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getGroupedFieldOptions = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nexports.SingleFieldSelect = SingleFieldSelect;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _eui = require('@elastic/eui');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; } /*\n                                                                                                                                                                                                                              * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                              * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                              * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                              */\n\n// Creates grouped options by grouping fields by field type\nvar getGroupedFieldOptions = exports.getGroupedFieldOptions = function getGroupedFieldOptions(fields, filterField) {\n  if (!fields) {\n    return undefined;\n  }\n\n  var fieldsByTypeMap = new Map();\n  var groupedFieldOptions = [];\n\n  fields.filter(filterField).forEach(function (field) {\n    if (fieldsByTypeMap.has(field.type)) {\n      var fieldsList = fieldsByTypeMap.get(field.type);\n      fieldsList.push(field.name);\n      fieldsByTypeMap.set(field.type, fieldsList);\n    } else {\n      fieldsByTypeMap.set(field.type, [field.name]);\n    }\n  });\n\n  fieldsByTypeMap.forEach(function (fieldsList, fieldType) {\n    groupedFieldOptions.push({\n      label: fieldType,\n      options: fieldsList.sort().map(function (fieldName) {\n        return { value: fieldName, label: fieldName };\n      })\n    });\n  });\n\n  groupedFieldOptions.sort(function (a, b) {\n    if (a.label < b.label) return -1;\n    if (a.label > b.label) return 1;\n    return 0;\n  });\n\n  return groupedFieldOptions;\n};\n\nfunction SingleFieldSelect(_ref) {\n  var fields = _ref.fields,\n      filterField = _ref.filterField,\n      onChange = _ref.onChange,\n      value = _ref.value,\n      placeholder = _ref.placeholder,\n      rest = _objectWithoutProperties(_ref, ['fields', 'filterField', 'onChange', 'value', 'placeholder']);\n\n  var onSelection = function onSelection(selectedOptions) {\n    onChange(_lodash2.default.get(selectedOptions, '0.value'));\n  };\n\n  return _react2.default.createElement(_eui.EuiComboBox, _extends({\n    placeholder: placeholder,\n    singleSelection: true,\n    options: getGroupedFieldOptions(fields, filterField),\n    selectedOptions: value ? [{ value: value, label: value }] : [],\n    onChange: onSelection,\n    isDisabled: !fields\n  }, rest));\n}\n\nSingleFieldSelect.propTypes = {\n  placeholder: _propTypes2.default.string,\n  fields: _propTypes2.default.object, // IndexedArray object\n  onChange: _propTypes2.default.func.isRequired,\n  value: _propTypes2.default.string, // fieldName\n  filterField: _propTypes2.default.func\n};\n\nSingleFieldSelect.defaultProps = {\n  filterField: function filterField() {\n    return true;\n  }\n};",null]}