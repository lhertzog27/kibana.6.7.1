{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/packages/kbn-interpreter/target/common/lib/type.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/packages/kbn-interpreter/target/common/lib/type.js","mtime":1567666389725},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Type = Type;\n\nvar _lodash = require('lodash');\n\nvar _get_type = require('./get_type');\n\n// TODO: Currently all casting functions must be syncronous.\n\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n// All types must be universal and be castable on the client or on the server\nfunction Type(config) {\n  var _this = this;\n\n  // Required\n  this.name = config.name;\n\n  // Optional\n  this.help = config.help || ''; // A short help text\n\n  // Optional type validation, useful for checking function output\n  this.validate = config.validate || function validate() {};\n\n  // Optional\n  this.create = config.create;\n\n  // Optional serialization (used when passing context around client/server)\n  this.serialize = config.serialize;\n  this.deserialize = config.deserialize;\n\n  var getToFn = function getToFn(type) {\n    return (0, _lodash.get)(config, ['to', type]) || (0, _lodash.get)(config, ['to', '*']);\n  };\n  var getFromFn = function getFromFn(type) {\n    return (0, _lodash.get)(config, ['from', type]) || (0, _lodash.get)(config, ['from', '*']);\n  };\n\n  this.castsTo = function (type) {\n    return typeof getToFn(type) === 'function';\n  };\n  this.castsFrom = function (type) {\n    return typeof getFromFn(type) === 'function';\n  };\n\n  this.to = function (node, toTypeName, types) {\n    var typeName = (0, _get_type.getType)(node);\n    if (typeName !== _this.name) {\n      throw new Error('Can not cast object of type \\'' + typeName + '\\' using \\'' + _this.name + '\\'');\n    } else if (!_this.castsTo(toTypeName)) {\n      throw new Error('Can not cast \\'' + typeName + '\\' to \\'' + toTypeName + '\\'');\n    }\n\n    return getToFn(toTypeName)(node, types);\n  };\n\n  this.from = function (node, types) {\n    var typeName = (0, _get_type.getType)(node);\n    if (!_this.castsFrom(typeName)) throw new Error('Can not cast \\'' + _this.name + '\\' from ' + typeName);\n\n    return getFromFn(typeName)(node, types);\n  };\n}",null]}