{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/canvas_plugin_src/functions/common/plot/get_flot_axis_config.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/canvas_plugin_src/functions/common/plot/get_flot_axis_config.js","mtime":1567631711898},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getFlotAxisConfig = undefined;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; /*\n                                                                                                                                                                                                                                                                               * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                               * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                               * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                               */\n\nvar _lodash = require('lodash');\n\nvar _common = require('@kbn/interpreter/common');\n\nvar getFlotAxisConfig = exports.getFlotAxisConfig = function getFlotAxisConfig(axis, argValue) {\n  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n      columns = _ref.columns,\n      ticks = _ref.ticks,\n      font = _ref.font;\n\n  if (!argValue || argValue.show === false) {\n    return { show: false };\n  }\n\n  var config = { show: true };\n  var axisType = (0, _lodash.get)(columns, axis + '.type');\n\n  if ((0, _common.getType)(argValue) === 'axisConfig') {\n    var position = argValue.position,\n        min = argValue.min,\n        max = argValue.max,\n        tickSize = argValue.tickSize;\n    // first value is used as the default\n\n    var acceptedPositions = axis === 'x' ? ['bottom', 'top'] : ['left', 'right'];\n\n    config.position = acceptedPositions.includes(position) ? position : acceptedPositions[0];\n\n    if (axisType === 'number' || axisType === 'date') {\n      if (min) {\n        config.min = min;\n      }\n      if (max) {\n        config.max = max;\n      }\n    }\n\n    if (tickSize && axisType === 'number') {\n      config.tickSize = tickSize;\n    }\n  }\n\n  if (axisType === 'string') {\n    config.ticks = (0, _lodash.map)(ticks[axis].hash, function (position, name) {\n      return [position, name];\n    });\n  }\n\n  if (axisType === 'date') {\n    config.mode = 'time';\n  }\n\n  if ((typeof font === 'undefined' ? 'undefined' : _typeof(font)) === 'object') {\n    config.font = font;\n  }\n\n  return config;\n};",null]}