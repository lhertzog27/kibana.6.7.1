{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/xpack_main/public/hacks/check_xpack_info_change.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/xpack_main/public/hacks/check_xpack_info_change.js","mtime":1567631712359},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _lodash = require('lodash');\n\nvar _eui = require('@elastic/eui');\n\nvar _modules = require('ui/modules');\n\nvar _chrome = require('ui/chrome');\n\nvar _chrome2 = _interopRequireDefault(_chrome);\n\nvar _notify = require('ui/notify');\n\nvar _debounce = require('ui/debounce');\n\nvar _path = require('plugins/xpack_main/services/path');\n\nvar _xpack_info = require('plugins/xpack_main/services/xpack_info');\n\nvar _xpack_info_signature = require('plugins/xpack_main/services/xpack_info_signature');\n\nvar _react3 = require('@kbn/i18n/react');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _module = _modules.uiModules.get('xpack_main', []); /*\n                                                         * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                         * or more contributor license agreements. Licensed under the Elastic License;\n                                                         * you may not use this file except in compliance with the Elastic License.\n                                                         */\n\n_module.factory('checkXPackInfoChange', function ($q, Private) {\n  var xpackInfo = Private(_xpack_info.XPackInfoProvider);\n  var xpackInfoSignature = Private(_xpack_info_signature.XPackInfoSignatureProvider);\n  var debounce = Private(_debounce.DebounceProvider);\n  var isUnauthenticated = Private(_path.PathProvider).isUnauthenticated();\n  var isLicenseExpirationBannerShown = false;\n\n  var notifyIfLicenseIsExpired = debounce(function () {\n    var license = xpackInfo.get('license');\n    if (license.isActive) {\n      return;\n    }\n\n    var uploadLicensePath = _chrome2.default.getBasePath() + '/app/kibana#/management/elasticsearch/license_management/upload_license';\n\n    if (!isLicenseExpirationBannerShown) {\n      isLicenseExpirationBannerShown = true;\n      _notify.banners.add({\n        component: _react2.default.createElement(\n          _eui.EuiCallOut,\n          {\n            iconType: 'help',\n            color: 'warning',\n            title: _react2.default.createElement(_react3.FormattedMessage, {\n              id: 'xpack.main.welcomeBanner.licenseIsExpiredTitle',\n              defaultMessage: 'Your {licenseType} license is expired',\n              values: { licenseType: license.type }\n            })\n          },\n          _react2.default.createElement(_react3.FormattedMessage, {\n            id: 'xpack.main.welcomeBanner.licenseIsExpiredDescription',\n            defaultMessage: 'Contact your administrator or {updateYourLicenseLinkText} directly.',\n            values: {\n              updateYourLicenseLinkText: _react2.default.createElement(\n                'a',\n                { href: uploadLicensePath },\n                _react2.default.createElement(_react3.FormattedMessage, {\n                  id: 'xpack.main.welcomeBanner.licenseIsExpiredDescription.updateYourLicenseLinkText',\n                  defaultMessage: 'update your license'\n                })\n              )\n            }\n          })\n        )\n      });\n    }\n  });\n\n  /**\n   *  Intercept each network response to look for the kbn-xpack-sig header.\n   *  When that header is detected, compare its value with the value cached\n   *  in the browser storage. When the value is new, call `xpackInfo.refresh()`\n   *  so that it will pull down the latest x-pack info\n   *\n   *  @param  {object} response - the angular $http response object\n   *  @param  {function} handleResponse - callback, expects to receive the response\n   *  @return\n   */\n  function interceptor(response, handleResponse) {\n    if (isUnauthenticated) {\n      return handleResponse(response);\n    }\n\n    var currentSignature = response.headers('kbn-xpack-sig');\n    var cachedSignature = xpackInfoSignature.get();\n\n    if (currentSignature && cachedSignature !== currentSignature) {\n      // Signature from the server differ from the signature of our\n      // cached info, so we need to refresh it.\n      // Intentionally swallowing this error\n      // because nothing catches it and it's an ugly console error.\n      xpackInfo.refresh().then(function () {\n        return notifyIfLicenseIsExpired();\n      }, function () {});\n    }\n\n    return handleResponse(response);\n  }\n\n  return {\n    response: function response(_response) {\n      return interceptor(_response, _lodash.identity);\n    },\n    responseError: function responseError(response) {\n      return interceptor(response, $q.reject);\n    }\n  };\n});\n\n_module.config(function ($httpProvider) {\n  $httpProvider.interceptors.push('checkXPackInfoChange');\n});",null]}