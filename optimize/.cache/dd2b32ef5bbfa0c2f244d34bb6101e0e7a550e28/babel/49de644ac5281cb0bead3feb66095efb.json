{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/utils/streams/concat_stream_providers.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/utils/streams/concat_stream_providers.js","mtime":1567631711788},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.concatStreamProviders = concatStreamProviders;\n\nvar _stream = require('stream');\n\n/**\n *  Write the data and errors from a list of stream providers\n *  to a single stream in order. Stream providers are only\n *  called right before they will be consumed, and only one\n *  provider will be active at a time.\n *\n *  @param {Array<() => ReadableStream>} sourceProviders\n *  @param {PassThroughOptions} options options passed to the PassThrough constructor\n *  @return {WritableStream} combined stream\n */\nfunction concatStreamProviders(sourceProviders) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var destination = new _stream.PassThrough(options);\n  var queue = sourceProviders.slice();\n\n  (function pipeNext() {\n    var provider = queue.shift();\n\n    if (!provider) {\n      return;\n    }\n\n    var source = provider();\n    var isLast = !queue.length;\n\n    // if there are more sources to pipe, hook\n    // into the source completion\n    if (!isLast) {\n      source.once('end', pipeNext);\n    }\n\n    source\n    // proxy errors from the source to the destination\n    .once('error', function (error) {\n      return destination.emit('error', error);\n    })\n    // pipe the source to the destination but only proxy the\n    // end event if this is the last source\n    .pipe(destination, { end: isLast });\n  })();\n\n  return destination;\n} /*\n   * Licensed to Elasticsearch B.V. under one or more contributor\n   * license agreements. See the NOTICE file distributed with\n   * this work for additional information regarding copyright\n   * ownership. Elasticsearch B.V. licenses this file to you under\n   * the Apache License, Version 2.0 (the \"License\"); you may\n   * not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *    http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing,\n   * software distributed under the License is distributed on an\n   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n   * KIND, either express or implied.  See the License for the\n   * specific language governing permissions and limitations\n   * under the License.\n   */",null]}