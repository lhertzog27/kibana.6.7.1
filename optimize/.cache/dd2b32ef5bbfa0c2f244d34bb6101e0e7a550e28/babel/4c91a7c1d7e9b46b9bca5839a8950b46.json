{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/remote_clusters/public/sections/components/remote_cluster_form/remote_cluster_form.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/remote_clusters/public/sections/components/remote_cluster_form/remote_cluster_form.js","mtime":1567631712121},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RemoteClusterForm = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _class, _temp, _initialiseProps; /*\n                                      * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                      * or more contributor license agreements. Licensed under the Elastic License;\n                                      * you may not use this file except in compliance with the Elastic License.\n                                      */\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _lodash = require('lodash');\n\nvar _react3 = require('@kbn/i18n/react');\n\nvar _i18n = require('@kbn/i18n');\n\nvar _eui = require('@elastic/eui');\n\nvar _documentation_links = require('../../../services/documentation_links');\n\nvar _validators = require('./validators');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar defaultFields = {\n  name: '',\n  seeds: [],\n  skipUnavailable: false\n};\n\nvar RemoteClusterForm = exports.RemoteClusterForm = (0, _react3.injectI18n)((_temp = _class = function (_Component) {\n  _inherits(_class, _Component);\n\n  function _class(props) {\n    _classCallCheck(this, _class);\n\n    var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this, props));\n\n    _initialiseProps.call(_this);\n\n    var fields = props.fields,\n        disabledFields = props.disabledFields;\n\n    var fieldsState = (0, _lodash.merge)({}, defaultFields, fields);\n\n    _this.state = {\n      localSeedErrors: [],\n      seedInput: '',\n      fields: fieldsState,\n      disabledFields: disabledFields,\n      fieldsErrors: _this.getFieldsErrors(fieldsState),\n      areErrorsVisible: false\n    };\n    return _this;\n  }\n\n  _createClass(_class, [{\n    key: 'getFieldsErrors',\n    value: function getFieldsErrors(fields) {\n      var seedInput = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      var name = fields.name,\n          seeds = fields.seeds;\n\n      return {\n        name: (0, _validators.validateName)(name),\n        seeds: (0, _validators.validateSeeds)(seeds, seedInput)\n      };\n    }\n  }, {\n    key: 'getAllFields',\n    value: function getAllFields() {\n      var _state$fields = this.state.fields,\n          name = _state$fields.name,\n          seeds = _state$fields.seeds,\n          skipUnavailable = _state$fields.skipUnavailable;\n\n\n      return {\n        name: name,\n        seeds: seeds,\n        skipUnavailable: skipUnavailable\n      };\n    }\n  }, {\n    key: 'renderSeeds',\n    value: function renderSeeds() {\n      var _state = this.state,\n          areErrorsVisible = _state.areErrorsVisible,\n          seeds = _state.fields.seeds,\n          errorsSeeds = _state.fieldsErrors.seeds,\n          localSeedErrors = _state.localSeedErrors;\n      var intl = this.props.intl;\n\n      // Show errors if there is a general form error or local errors.\n\n      var areFormErrorsVisible = Boolean(areErrorsVisible && errorsSeeds);\n      var showErrors = areFormErrorsVisible || localSeedErrors.length !== 0;\n      var errors = areFormErrorsVisible ? localSeedErrors.concat(errorsSeeds) : localSeedErrors;\n\n      var formattedSeeds = seeds.map(function (seed) {\n        return { label: seed };\n      });\n\n      return _react2.default.createElement(\n        _eui.EuiDescribedFormGroup,\n        {\n          title: _react2.default.createElement(\n            _eui.EuiTitle,\n            { size: 's' },\n            _react2.default.createElement(\n              'h4',\n              null,\n              _react2.default.createElement(_react3.FormattedMessage, {\n                id: 'xpack.remoteClusters.remoteClusterForm.sectionSeedsTitle',\n                defaultMessage: 'Seed nodes for cluster discovery'\n              })\n            )\n          ),\n          description: _react2.default.createElement(\n            _react.Fragment,\n            null,\n            _react2.default.createElement(\n              'p',\n              null,\n              _react2.default.createElement(_react3.FormattedMessage, {\n                id: 'xpack.remoteClusters.remoteClusterForm.sectionSeedsDescription1',\n                defaultMessage: 'A list of remote cluster nodes to query for the cluster state. Specify multiple seed nodes so discovery doesn\\'t fail if a node is unavailable.'\n              })\n            )\n          ),\n          fullWidth: true\n        },\n        _react2.default.createElement(\n          _eui.EuiFormRow,\n          {\n            'data-test-subj': 'remoteClusterFormSeedNodesFormRow',\n            label: _react2.default.createElement(_react3.FormattedMessage, {\n              id: 'xpack.remoteClusters.remoteClusterForm.fieldSeedsLabel',\n              defaultMessage: 'Seed nodes'\n            }),\n            helpText: _react2.default.createElement(_react3.FormattedMessage, {\n              id: 'xpack.remoteClusters.remoteClusterForm.sectionSeedsHelpText',\n              defaultMessage: 'An IP address or host name, followed by the {transportPort} of the remote cluster.',\n              values: {\n                transportPort: _react2.default.createElement(\n                  _eui.EuiLink,\n                  { href: _documentation_links.transportPortUrl, target: '_blank' },\n                  _react2.default.createElement(_react3.FormattedMessage, {\n                    id: 'xpack.remoteClusters.remoteClusterForm.sectionSeedsHelpText.transportPortLinkText',\n                    defaultMessage: 'transport port'\n                  })\n                )\n              }\n            }),\n            isInvalid: showErrors,\n            error: errors,\n            fullWidth: true\n          },\n          _react2.default.createElement(_eui.EuiComboBox, {\n            noSuggestions: true,\n            placeholder: intl.formatMessage({\n              id: 'xpack.remoteClusters.remoteClusterForm.fieldSeedsPlaceholder',\n              defaultMessage: 'host:port'\n            }),\n            selectedOptions: formattedSeeds,\n            onCreateOption: this.onCreateSeed,\n            onChange: this.onSeedsChange,\n            onSearchChange: this.onSeedsInputChange,\n            isInvalid: showErrors,\n            fullWidth: true\n          })\n        )\n      );\n    }\n  }, {\n    key: 'renderSkipUnavailable',\n    value: function renderSkipUnavailable() {\n      var _this2 = this;\n\n      var skipUnavailable = this.state.fields.skipUnavailable;\n\n\n      return _react2.default.createElement(\n        _eui.EuiDescribedFormGroup,\n        {\n          title: _react2.default.createElement(\n            _eui.EuiTitle,\n            { size: 's' },\n            _react2.default.createElement(\n              'h4',\n              null,\n              _react2.default.createElement(_react3.FormattedMessage, {\n                id: 'xpack.remoteClusters.remoteClusterForm.sectionSkipUnavailableTitle',\n                defaultMessage: 'Make remote cluster optional'\n              })\n            )\n          ),\n          description: _react2.default.createElement(\n            _react.Fragment,\n            null,\n            _react2.default.createElement(\n              'p',\n              null,\n              _react2.default.createElement(_react3.FormattedMessage, {\n                id: 'xpack.remoteClusters.remoteClusterForm.sectionSkipUnavailableDescription',\n                defaultMessage: 'By default, a request fails if any of the queried remote clusters are unavailable. To continue sending a request to other remote clusters if this cluster is unavailable, enable {optionName}. {learnMoreLink}',\n                values: {\n                  optionName: _react2.default.createElement(\n                    'strong',\n                    null,\n                    _react2.default.createElement(_react3.FormattedMessage, {\n                      id: 'xpack.remoteClusters.remoteClusterForm.sectionSkipUnavailableDescription.optionNameLabel',\n                      defaultMessage: 'Skip if unavailable'\n                    })\n                  ),\n                  learnMoreLink: _react2.default.createElement(\n                    _eui.EuiLink,\n                    { href: _documentation_links.skippingDisconnectedClustersUrl, target: '_blank' },\n                    _react2.default.createElement(_react3.FormattedMessage, {\n                      id: 'xpack.remoteClusters.remoteClusterForm.sectionSkipUnavailableDescription.learnMoreLinkLabel',\n                      defaultMessage: 'Learn more.'\n                    })\n                  )\n                }\n              })\n            )\n          ),\n          fullWidth: true\n        },\n        _react2.default.createElement(\n          _eui.EuiFormRow,\n          {\n            'data-test-subj': 'remoteClusterFormSkipUnavailableFormRow',\n            className: 'remoteClusterSkipIfUnavailableSwitch',\n            hasEmptyLabelSpace: true,\n            fullWidth: true,\n            helpText: skipUnavailable !== defaultFields.skipUnavailable ? _react2.default.createElement(\n              _eui.EuiLink,\n              { onClick: function onClick() {\n                  _this2.resetToDefault('skipUnavailable');\n                } },\n              _react2.default.createElement(_react3.FormattedMessage, {\n                id: 'xpack.remoteClusters.remoteClusterForm.sectionSkipUnavailableResetLabel',\n                defaultMessage: 'Reset to default'\n              })\n            ) : null\n          },\n          _react2.default.createElement(_eui.EuiSwitch, {\n            label: _i18n.i18n.translate('xpack.remoteClusters.remoteClusterForm.sectionSkipUnavailableLabel', {\n              defaultMessage: 'Skip if unavailable'\n            }),\n            checked: skipUnavailable,\n            onChange: this.onSkipUnavailableChange\n          })\n        )\n      );\n    }\n  }, {\n    key: 'renderActions',\n    value: function renderActions() {\n      var _props = this.props,\n          isSaving = _props.isSaving,\n          cancel = _props.cancel;\n      var areErrorsVisible = this.state.areErrorsVisible;\n\n\n      if (isSaving) {\n        return _react2.default.createElement(\n          _eui.EuiFlexGroup,\n          { justifyContent: 'flexStart', gutterSize: 'm' },\n          _react2.default.createElement(\n            _eui.EuiFlexItem,\n            { grow: false },\n            _react2.default.createElement(_eui.EuiLoadingSpinner, { size: 'l' })\n          ),\n          _react2.default.createElement(\n            _eui.EuiFlexItem,\n            { grow: false },\n            _react2.default.createElement(\n              _eui.EuiText,\n              null,\n              _react2.default.createElement(_react3.FormattedMessage, {\n                id: 'xpack.remoteClusters.remoteClusterForm.actions.savingText',\n                defaultMessage: 'Saving'\n              })\n            )\n          )\n        );\n      }\n\n      var cancelButton = void 0;\n\n      if (cancel) {\n        cancelButton = _react2.default.createElement(\n          _eui.EuiFlexItem,\n          { grow: false },\n          _react2.default.createElement(\n            _eui.EuiButtonEmpty,\n            {\n              color: 'primary',\n              onClick: cancel\n            },\n            _react2.default.createElement(_react3.FormattedMessage, {\n              id: 'xpack.remoteClusters.remoteClusterForm.cancelButtonLabel',\n              defaultMessage: 'Cancel'\n            })\n          )\n        );\n      }\n\n      var isSaveDisabled = areErrorsVisible && this.hasErrors();\n\n      return _react2.default.createElement(\n        _eui.EuiFlexGroup,\n        { alignItems: 'center', gutterSize: 'm' },\n        _react2.default.createElement(\n          _eui.EuiFlexItem,\n          { grow: false },\n          _react2.default.createElement(\n            _eui.EuiButton,\n            {\n              'data-test-subj': 'remoteClusterFormSaveButton',\n              color: 'secondary',\n              iconType: 'check',\n              onClick: this.save,\n              fill: true,\n              disabled: isSaveDisabled\n            },\n            _react2.default.createElement(_react3.FormattedMessage, {\n              id: 'xpack.remoteClusters.remoteClusterForm.saveButtonLabel',\n              defaultMessage: 'Save'\n            })\n          )\n        ),\n        cancelButton\n      );\n    }\n  }, {\n    key: 'renderSavingFeedback',\n    value: function renderSavingFeedback() {\n      if (this.props.isSaving) {\n        return _react2.default.createElement(\n          _eui.EuiOverlayMask,\n          null,\n          _react2.default.createElement(_eui.EuiLoadingKibana, { size: 'xl' })\n        );\n      }\n\n      return null;\n    }\n  }, {\n    key: 'renderSaveErrorFeedback',\n    value: function renderSaveErrorFeedback() {\n      var saveError = this.props.saveError;\n\n\n      if (saveError) {\n        var message = saveError.message,\n            cause = saveError.cause;\n\n\n        var errorBody = void 0;\n\n        if (cause) {\n          if (cause.length === 1) {\n            errorBody = _react2.default.createElement(\n              'p',\n              null,\n              cause[0]\n            );\n          } else {\n            errorBody = _react2.default.createElement(\n              'ul',\n              null,\n              cause.map(function (causeValue) {\n                return _react2.default.createElement(\n                  'li',\n                  { key: causeValue },\n                  causeValue\n                );\n              })\n            );\n          }\n        }\n\n        return _react2.default.createElement(\n          _react.Fragment,\n          null,\n          _react2.default.createElement(\n            _eui.EuiCallOut,\n            {\n              title: message,\n              icon: 'cross',\n              color: 'danger'\n            },\n            errorBody\n          ),\n          _react2.default.createElement(_eui.EuiSpacer, null)\n        );\n      }\n\n      return null;\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this3 = this;\n\n      var disabledName = this.props.disabledFields.name;\n      var _state2 = this.state,\n          areErrorsVisible = _state2.areErrorsVisible,\n          name = _state2.fields.name,\n          errorClusterName = _state2.fieldsErrors.name;\n\n\n      return _react2.default.createElement(\n        _react.Fragment,\n        null,\n        this.renderSaveErrorFeedback(),\n        _react2.default.createElement(\n          _eui.EuiForm,\n          null,\n          _react2.default.createElement(\n            _eui.EuiDescribedFormGroup,\n            {\n              title: _react2.default.createElement(\n                _eui.EuiTitle,\n                { size: 's' },\n                _react2.default.createElement(\n                  'h4',\n                  null,\n                  _react2.default.createElement(_react3.FormattedMessage, {\n                    id: 'xpack.remoteClusters.remoteClusterForm.sectionNameTitle',\n                    defaultMessage: 'Name'\n                  })\n                )\n              ),\n              description: _react2.default.createElement(_react3.FormattedMessage, {\n                id: 'xpack.remoteClusters.remoteClusterForm.sectionNameDescription',\n                defaultMessage: 'A unique name for the remote cluster.'\n              }),\n              fullWidth: true\n            },\n            _react2.default.createElement(\n              _eui.EuiFormRow,\n              {\n                'data-test-subj': 'remoteClusterFormNameFormRow',\n                label: _react2.default.createElement(_react3.FormattedMessage, {\n                  id: 'xpack.remoteClusters.remoteClusterForm.fieldNameLabel',\n                  defaultMessage: 'Name'\n                }),\n                helpText: _react2.default.createElement(_react3.FormattedMessage, {\n                  id: 'xpack.remoteClusters.remoteClusterForm.fieldNameLabelHelpText',\n                  defaultMessage: 'Name can only contain letters, numbers, underscores, and dashes.'\n                }),\n                error: errorClusterName,\n                isInvalid: Boolean(areErrorsVisible && errorClusterName),\n                fullWidth: true\n              },\n              _react2.default.createElement(_eui.EuiFieldText, {\n                isInvalid: Boolean(areErrorsVisible && errorClusterName),\n                value: name,\n                onChange: function onChange(e) {\n                  return _this3.onFieldsChange({ name: e.target.value });\n                },\n                fullWidth: true,\n                disabled: disabledName\n              })\n            )\n          ),\n          this.renderSeeds(),\n          this.renderSkipUnavailable()\n        ),\n        this.renderErrors(),\n        _react2.default.createElement(_eui.EuiSpacer, { size: 'l' }),\n        this.renderActions(),\n        this.renderSavingFeedback()\n      );\n    }\n  }]);\n\n  return _class;\n}(_react.Component), _class.propTypes = {\n  save: _propTypes2.default.func.isRequired,\n  cancel: _propTypes2.default.func,\n  isSaving: _propTypes2.default.bool,\n  saveError: _propTypes2.default.object,\n  fields: _propTypes2.default.object,\n  disabledFields: _propTypes2.default.object\n}, _class.defaultProps = {\n  fields: (0, _lodash.merge)({}, defaultFields),\n  disabledFields: {}\n}, _initialiseProps = function _initialiseProps() {\n  var _this4 = this;\n\n  this.onFieldsChange = function (changedFields) {\n    _this4.setState(function (_ref) {\n      var prevFields = _ref.fields,\n          seedInput = _ref.seedInput;\n\n      var newFields = _extends({}, prevFields, changedFields);\n      return {\n        fields: newFields,\n        fieldsErrors: _this4.getFieldsErrors(newFields, seedInput)\n      };\n    });\n  };\n\n  this.save = function () {\n    var save = _this4.props.save;\n\n\n    if (_this4.hasErrors()) {\n      _this4.setState({\n        areErrorsVisible: true\n      });\n      return;\n    }\n\n    var cluster = _this4.getAllFields();\n    save(cluster);\n  };\n\n  this.onCreateSeed = function (newSeed) {\n    // If the user just hit enter without typing anything, treat it as a no-op.\n    if (!newSeed) {\n      return;\n    }\n\n    var localSeedErrors = (0, _validators.validateSeed)(newSeed);\n\n    if (localSeedErrors.length !== 0) {\n      _this4.setState({\n        localSeedErrors: localSeedErrors\n      });\n\n      // Return false to explicitly reject the user's input.\n      return false;\n    }\n\n    var seeds = _this4.state.fields.seeds;\n\n\n    var newSeeds = seeds.slice(0);\n    newSeeds.push(newSeed.toLowerCase());\n    _this4.onFieldsChange({ seeds: newSeeds });\n  };\n\n  this.onSeedsInputChange = function (seedInput) {\n    if (!seedInput) {\n      // If empty seedInput (\"\") don't do anything. This happens\n      // right after a seed is created.\n      return;\n    }\n\n    var intl = _this4.props.intl;\n\n\n    _this4.setState(function (_ref2) {\n      var fields = _ref2.fields,\n          localSeedErrors = _ref2.localSeedErrors;\n      var seeds = fields.seeds;\n\n      // Allow typing to clear the errors, but not to add new ones.\n\n      var errors = !seedInput || (0, _validators.validateSeed)(seedInput).length === 0 ? [] : localSeedErrors;\n\n      // EuiComboBox internally checks for duplicates and prevents calling onCreateOption if the\n      // input is a duplicate. So we need to surface this error here instead.\n      var isDuplicate = seeds.includes(seedInput);\n\n      if (isDuplicate) {\n        errors.push(intl.formatMessage({\n          id: 'xpack.remoteClusters.remoteClusterForm.localSeedError.duplicateMessage',\n          defaultMessage: 'Duplicate seed nodes aren\\'t allowed.'\n        }));\n      }\n\n      return {\n        localSeedErrors: errors,\n        fieldsErrors: _this4.getFieldsErrors(fields, seedInput),\n        seedInput: seedInput\n      };\n    });\n  };\n\n  this.onSeedsChange = function (seeds) {\n    _this4.onFieldsChange({ seeds: seeds.map(function (_ref3) {\n        var label = _ref3.label;\n        return label;\n      }) });\n  };\n\n  this.onSkipUnavailableChange = function (e) {\n    var skipUnavailable = e.target.checked;\n    _this4.onFieldsChange({ skipUnavailable: skipUnavailable });\n  };\n\n  this.resetToDefault = function (fieldName) {\n    _this4.onFieldsChange(_defineProperty({}, fieldName, defaultFields[fieldName]));\n  };\n\n  this.hasErrors = function () {\n    var _state3 = _this4.state,\n        fieldsErrors = _state3.fieldsErrors,\n        localSeedErrors = _state3.localSeedErrors;\n\n    var errorValues = Object.values(fieldsErrors);\n    var hasErrors = errorValues.some(function (error) {\n      return error != null;\n    }) || localSeedErrors.length;\n    return hasErrors;\n  };\n\n  this.renderErrors = function () {\n    var areErrorsVisible = _this4.state.areErrorsVisible;\n\n    var hasErrors = _this4.hasErrors();\n\n    if (!areErrorsVisible || !hasErrors) {\n      return null;\n    }\n\n    return _react2.default.createElement(\n      _react.Fragment,\n      null,\n      _react2.default.createElement(_eui.EuiSpacer, { size: 'm' }),\n      _react2.default.createElement(_eui.EuiCallOut, {\n        'data-test-subj': 'remoteClusterFormGlobalError',\n        title: _react2.default.createElement(_react3.FormattedMessage, {\n          id: 'xpack.remoteClusters.remoteClusterForm.errorTitle',\n          defaultMessage: 'Fix errors before continuing.'\n        }),\n        color: 'danger',\n        iconType: 'cross'\n      })\n    );\n  };\n}, _temp));",null]}