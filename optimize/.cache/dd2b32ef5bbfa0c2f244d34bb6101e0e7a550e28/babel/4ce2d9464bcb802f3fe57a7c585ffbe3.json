{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/monitoring/public/components/elasticsearch/shard_activity/parse_props.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/monitoring/public/components/elasticsearch/shard_activity/parse_props.js","mtime":1567631712086},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseProps = undefined;\n\nvar _lodash = require('lodash');\n\nvar _format_number = require('plugins/monitoring/lib/format_number');\n\nvar _formatting = require('../../../../common/formatting');\n\nvar getIpAndPort = function getIpAndPort(transport) {\n  if (transport !== undefined) {\n    var matches = transport.match(/([\\d\\.:]+)\\]$/);\n    if (matches) {\n      return matches[1];\n    }\n  }\n  return transport;\n}; /*\n    * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n    * or more contributor license agreements. Licensed under the Elastic License;\n    * you may not use this file except in compliance with the Elastic License.\n    */\n\nvar normalizeString = function normalizeString(text) {\n  return (0, _lodash.capitalize)(text.toLowerCase());\n};\n\nvar parseProps = exports.parseProps = function parseProps(props) {\n  var id = props.id,\n      stage = props.stage,\n      index = props.index,\n      indexName = props.index_name,\n      isPrimary = props.primary,\n      startTimeInMillis = props.start_time_in_millis,\n      totalTimeInMillis = props.total_time_in_millis,\n      source = props.source,\n      target = props.target,\n      translog = props.translog,\n      type = props.type;\n  var files = index.files,\n      size = index.size;\n\n\n  return {\n    name: indexName || index.name,\n    shard: id + ' / ' + (isPrimary ? 'Primary' : 'Replica'),\n    relocationType: type === 'PRIMARY_RELOCATION' ? 'Primary Relocation' : normalizeString(type),\n    stage: normalizeString(stage),\n    startTime: (0, _formatting.formatDateTimeLocal)(startTimeInMillis),\n    totalTime: (0, _format_number.formatMetric)(totalTimeInMillis / 1000, '00:00:00'),\n    isCopiedFromPrimary: !isPrimary || type === 'PRIMARY_RELOCATION',\n    sourceName: source.name === undefined ? 'n/a' : source.name,\n    targetName: target.name,\n    sourceTransportAddress: getIpAndPort(source.transport_address),\n    targetTransportAddress: getIpAndPort(target.transport_address),\n    isSnapshot: type === 'SNAPSHOT',\n    repo: source.repository,\n    snapshot: source.snapshot,\n    filesPercent: files.percent,\n    filesDone: files.reused ? files.reused : files.recovered,\n    filesTotal: files.total,\n    bytesPercent: size.percent,\n    bytesDone: (0, _format_number.formatMetric)(size.recovered_in_bytes + size.reused_in_bytes, 'byte'),\n    bytesTotal: (0, _format_number.formatMetric)(size.total_in_bytes, 'byte'),\n    hasTranslog: translog.total > 0,\n    translogPercent: translog.percent,\n    translogDone: translog.total,\n    translogTotal: translog.total_on_start\n  };\n};",null]}