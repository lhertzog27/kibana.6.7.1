{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/public/state/middleware/resolved_args.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/public/state/middleware/resolved_args.js","mtime":1567631711935},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.resolvedArgs = undefined;\n\nvar _workpad = require('../selectors/workpad');\n\nvar _resolved_args = require('../actions/resolved_args');\n\n/**\n * This middleware is responsible for keeping the resolved_args collection in transient state\n * synced with the elements represented by the workpad.\n */\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nvar resolvedArgs = exports.resolvedArgs = function resolvedArgs(_ref) {\n  var dispatch = _ref.dispatch,\n      getState = _ref.getState;\n  return function (next) {\n    return function (action) {\n      // Get the Element IDs that are present before the action.\n      var startElementIds = (0, _workpad.getAllElements)(getState()).map(function (element) {\n        return element.id;\n      });\n\n      // execute the action\n      next(action);\n\n      // Get the Element IDs after the action...\n      var resolvedElementIds = (0, _workpad.getAllElements)(getState()).map(function (element) {\n        return element.id;\n      });\n      // ...and get a list of IDs that are no longer present.\n      var deadIds = startElementIds.filter(function (id) {\n        return !resolvedElementIds.includes(id);\n      });\n\n      // If we have some dead elements, we need to clear them from resolved_args collection\n      // in transient state.\n      if (deadIds.length > 0) {\n        dispatch((0, _resolved_args.clearValues)(deadIds));\n      }\n    };\n  };\n};",null]}