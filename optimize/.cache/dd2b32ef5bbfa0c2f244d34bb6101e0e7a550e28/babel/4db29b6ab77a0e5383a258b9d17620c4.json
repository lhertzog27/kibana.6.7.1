{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/packages/kbn-es-query/target/kuery/functions/exists.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/packages/kbn-es-query/target/kuery/functions/exists.js","mtime":1567666388091},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];var _n = true;var _d = false;var _e = undefined;try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;_e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }return _arr;\n  }return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}(); /*\n      * Licensed to Elasticsearch B.V. under one or more contributor\n      * license agreements. See the NOTICE file distributed with\n      * this work for additional information regarding copyright\n      * ownership. Elasticsearch B.V. licenses this file to you under\n      * the Apache License, Version 2.0 (the \"License\"); you may\n      * not use this file except in compliance with the License.\n      * You may obtain a copy of the License at\n      *\n      *    http://www.apache.org/licenses/LICENSE-2.0\n      *\n      * Unless required by applicable law or agreed to in writing,\n      * software distributed under the License is distributed on an\n      * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n      * KIND, either express or implied.  See the License for the\n      * specific language governing permissions and limitations\n      * under the License.\n      */\n\nexports.buildNodeParams = buildNodeParams;\nexports.toElasticsearchQuery = toElasticsearchQuery;\n\nvar _lodash = require('lodash');\n\nvar _literal = require('../node_types/literal');\n\nvar literal = _interopRequireWildcard(_literal);\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }newObj.default = obj;return newObj;\n  }\n}\n\nfunction buildNodeParams(fieldName) {\n  return {\n    arguments: [literal.buildNode(fieldName)]\n  };\n}\n\nfunction toElasticsearchQuery(node, indexPattern) {\n  var _node$arguments = _slicedToArray(node.arguments, 1),\n      fieldNameArg = _node$arguments[0];\n\n  var fieldName = literal.toElasticsearchQuery(fieldNameArg);\n  var field = (0, _lodash.get)(indexPattern, 'fields', []).find(function (field) {\n    return field.name === fieldName;\n  });\n\n  if (field && field.scripted) {\n    throw new Error('Exists query does not support scripted fields');\n  }\n  return {\n    exists: { field: fieldName }\n  };\n}",null]}