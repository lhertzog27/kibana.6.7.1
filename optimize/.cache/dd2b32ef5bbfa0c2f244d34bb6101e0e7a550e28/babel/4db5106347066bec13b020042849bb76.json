{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/utils/streams/json_streams.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/utils/streams/json_streams.js","mtime":1567631711788},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createJsonParseStream = createJsonParseStream;\nexports.createJsonStringifyStream = createJsonStringifyStream;\n\nvar _stream = require('stream');\n\n/**\n *  Create a Transform stream that accepts strings (in\n *  object mode) and parsed those streams to provide their\n *  JavaScript value.\n *\n *  Parse errors are emitted with the \"error\" event, and\n *  if not caught will cause the process to crash. When caught\n *  the stream will continue to parse subsequent values.\n *\n *  @return {Transform}\n */\nfunction createJsonParseStream() {\n  return new _stream.Transform({\n    writableObjectMode: true,\n    readableObjectMode: true,\n    transform: function transform(json, enc, callback) {\n      var parsed = void 0;\n      var error = void 0;\n\n      try {\n        parsed = JSON.parse(json);\n      } catch (_error) {\n        error = _error;\n      }\n\n      callback(error, parsed);\n    }\n  });\n}\n\n/**\n *  Create a Transform stream that accepts arbitrary JavaScript\n *  values, stringifies them, and provides the output in object\n *  mode to consumers.\n *\n *  Serialization errors are emitted with the \"error\" event, and\n *  if not caught will cause the process to crash. When caught\n *  the stream will continue to stringify subsequent values.\n *\n *  @param  {Object} options\n *  @property {Boolean} options.pretty\n *  @return {Transform}\n */\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nfunction createJsonStringifyStream() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$pretty = _ref.pretty,\n      pretty = _ref$pretty === undefined ? false : _ref$pretty;\n\n  return new _stream.Transform({\n    writableObjectMode: true,\n    readableObjectMode: true,\n    transform: function transform(json, enc, callback) {\n      try {\n        callback(null, JSON.stringify(json, null, pretty ? 2 : 0));\n      } catch (err) {\n        callback(err);\n      }\n    }\n  });\n}",null]}