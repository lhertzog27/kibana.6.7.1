{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/explorer/explorer_charts/explorer_chart_config_builder.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/explorer/explorer_charts/explorer_chart_config_builder.js","mtime":1567631712040},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.buildConfig = buildConfig;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _parse_interval = require('ui/utils/parse_interval');\n\nvar _chart_config_builder = require('../../util/chart_config_builder');\n\nvar _job_service = require('../../services/job_service');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Builds the chart configuration for the provided anomaly record, returning\n// an object with properties used for the display (series function and field, aggregation interval etc),\n// and properties for the data feed used for the job (index pattern, time field etc).\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\n/*\n * Builds the configuration object used to plot a chart showing where the anomalies occur in\n * the raw data in the Explorer dashboard.\n */\n\nfunction buildConfig(record) {\n  var job = _job_service.mlJobService.getJob(record.job_id);\n  var detectorIndex = record.detector_index;\n  var config = (0, _chart_config_builder.buildConfigFromDetector)(job, detectorIndex);\n\n  // Add extra properties used by the explorer dashboard charts.\n  config.functionDescription = record.function_description;\n  config.bucketSpanSeconds = (0, _parse_interval.parseInterval)(job.analysis_config.bucket_span).asSeconds();\n\n  config.detectorLabel = record.function;\n  if (_lodash2.default.has(_job_service.mlJobService.detectorsByJob, record.job_id) && detectorIndex < _job_service.mlJobService.detectorsByJob[record.job_id].length) {\n    config.detectorLabel = _job_service.mlJobService.detectorsByJob[record.job_id][detectorIndex].detector_description;\n  } else {\n    if (record.field_name !== undefined) {\n      config.detectorLabel += ' ' + config.fieldName;\n    }\n  }\n\n  if (record.field_name !== undefined) {\n    config.fieldName = record.field_name;\n    config.metricFieldName = record.field_name;\n  }\n\n  // Add the 'entity_fields' i.e. the partition, by, over fields which\n  // define the metric series to be plotted.\n  config.entityFields = [];\n  if (_lodash2.default.has(record, 'partition_field_name')) {\n    config.entityFields.push({\n      fieldName: record.partition_field_name,\n      fieldValue: record.partition_field_value,\n      fieldType: 'partition'\n    });\n  }\n\n  if (_lodash2.default.has(record, 'over_field_name')) {\n    config.entityFields.push({\n      fieldName: record.over_field_name,\n      fieldValue: record.over_field_value,\n      fieldType: 'over'\n    });\n  }\n\n  // For jobs with by and over fields, don't add the 'by' field as this\n  // field will only be added to the top-level fields for record type results\n  // if it also an influencer over the bucket.\n  if (_lodash2.default.has(record, 'by_field_name') && !_lodash2.default.has(record, 'over_field_name')) {\n    config.entityFields.push({\n      fieldName: record.by_field_name,\n      fieldValue: record.by_field_value,\n      fieldType: 'by'\n    });\n  }\n\n  // Build the tooltip data for the chart info icon, showing further details on what is being plotted.\n  var functionLabel = config.metricFunction;\n  if (config.metricFieldName !== undefined) {\n    functionLabel += ' ' + config.metricFieldName;\n  }\n\n  config.infoTooltip = {\n    jobId: record.job_id,\n    aggregationInterval: config.interval,\n    chartFunction: functionLabel,\n    entityFields: config.entityFields.map(function (f) {\n      return {\n        fieldName: f.fieldName,\n        fieldValue: f.fieldValue\n      };\n    })\n  };\n\n  return config;\n}",null]}