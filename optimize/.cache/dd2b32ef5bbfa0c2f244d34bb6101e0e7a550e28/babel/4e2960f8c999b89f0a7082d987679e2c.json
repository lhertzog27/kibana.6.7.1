{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/public/expression_types/model.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/public/expression_types/model.js","mtime":1567631711931},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.modelRegistry = exports.Model = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _lodash = require('lodash');\n\nvar _common = require('@kbn/interpreter/common');\n\nvar _function_form = require('./function_form');\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\nvar NO_NEXT_EXP = 'no next expression';\nvar MISSING_MODEL_ARGS = 'missing model args';\n\nfunction getModelArgs(expressionType) {\n  if (!expressionType) {\n    return NO_NEXT_EXP;\n  }\n\n  if (!expressionType.modelArgs) {\n    return MISSING_MODEL_ARGS;\n  }\n\n  return expressionType.modelArgs.length > 0 ? expressionType.modelArgs : MISSING_MODEL_ARGS;\n}\n\nvar Model = exports.Model = function (_FunctionForm) {\n  _inherits(Model, _FunctionForm);\n\n  function Model(props) {\n    _classCallCheck(this, Model);\n\n    var _this = _possibleConstructorReturn(this, (Model.__proto__ || Object.getPrototypeOf(Model)).call(this, props));\n\n    var propNames = ['requiresContext'];\n    var defaultProps = {\n      requiresContext: true\n    };\n\n    Object.assign(_this, defaultProps, (0, _lodash.pick)(props, propNames));\n    return _this;\n  }\n\n  _createClass(Model, [{\n    key: 'resolveArg',\n    value: function resolveArg(dataArg, props) {\n      // custom argument resolver\n      // uses `modelArgs` from following expression to control which arguments get rendered\n      var nextExpressionType = props.nextExpressionType;\n\n      var modelArgs = getModelArgs(nextExpressionType);\n\n      // if there is no following expression, or no modelArgs, argument is shown by default\n      if (modelArgs === NO_NEXT_EXP || modelArgs === MISSING_MODEL_ARGS) {\n        return { skipRender: false };\n      }\n\n      // if argument is missing from modelArgs, mark it as skipped\n      var argName = (0, _lodash.get)(dataArg, 'arg.name');\n      var modelArg = modelArgs.find(function (modelArg) {\n        if (Array.isArray(modelArg)) {\n          return modelArg[0] === argName;\n        }\n        return modelArg === argName;\n      });\n\n      return {\n        label: Array.isArray(modelArg) ? (0, _lodash.get)(modelArg[1], 'label') : null,\n        skipRender: !modelArg\n      };\n    }\n  }]);\n\n  return Model;\n}(_function_form.FunctionForm);\n\nvar ModelRegistry = function (_Registry) {\n  _inherits(ModelRegistry, _Registry);\n\n  function ModelRegistry() {\n    _classCallCheck(this, ModelRegistry);\n\n    return _possibleConstructorReturn(this, (ModelRegistry.__proto__ || Object.getPrototypeOf(ModelRegistry)).apply(this, arguments));\n  }\n\n  _createClass(ModelRegistry, [{\n    key: 'wrapper',\n    value: function wrapper(obj) {\n      return new Model(obj);\n    }\n  }]);\n\n  return ModelRegistry;\n}(_common.Registry);\n\nvar modelRegistry = exports.modelRegistry = new ModelRegistry();",null]}