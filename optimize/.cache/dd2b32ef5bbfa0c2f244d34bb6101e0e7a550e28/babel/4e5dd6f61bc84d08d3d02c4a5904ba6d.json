{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/components/field_data_card/document_count_chart_directive.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/components/field_data_card/document_count_chart_directive.js","mtime":1567631712030},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _d = require('d3');\n\nvar _d2 = _interopRequireDefault(_d);\n\nvar _moment = require('moment');\n\nvar _moment2 = _interopRequireDefault(_moment);\n\nvar _parse_interval = require('ui/utils/parse_interval');\n\nvar _chart_utils = require('../../util/chart_utils');\n\nvar _string_utils = require('../../util/string_utils');\n\nvar _ml_time_buckets = require('../../util/ml_time_buckets');\n\nvar _chart_tooltip_service = require('../../components/chart_tooltip/chart_tooltip_service');\n\nvar _date_utils = require('../../util/date_utils');\n\nvar _modules = require('ui/modules');\n\nvar _timefilter = require('ui/timefilter');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _module = _modules.uiModules.get('apps/ml'); /*\n                                                  * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                  * or more contributor license agreements. Licensed under the Elastic License;\n                                                  * you may not use this file except in compliance with the Elastic License.\n                                                  */\n\n/*\n * AngularJS directive for rendering a chart showing\n * document count on the field data card.\n */\n\n_module.directive('mlDocumentCountChart', function (Private, i18n) {\n  function link(scope, element, attrs) {\n    var svgWidth = attrs.width ? +attrs.width : 400;\n    var svgHeight = scope.height = attrs.height ? +attrs.height : 400;\n\n    var margin = { top: 0, right: 5, bottom: 20, left: 15 };\n\n    var chartWidth = svgWidth - (margin.left + margin.right);\n    var chartHeight = svgHeight - (margin.top + margin.bottom);\n\n    var xScale = null;\n    var yScale = _d2.default.scale.linear().range([chartHeight, 0]);\n    var xAxisTickFormat = 'YYYY-MM-DD HH:mm';\n\n    var barChartGroup = void 0;\n    var barWidth = 5; // Adjusted according to data aggregation interval.\n\n    var MlTimeBuckets = Private(_ml_time_buckets.IntervalHelperProvider);\n\n    scope.chartData = [];\n\n    element.on('$destroy', function () {\n      scope.$destroy();\n    });\n\n    function processChartData() {\n      // Build the dataset in format used by the d3 chart i.e. array\n      // of Objects with keys time (epoch ms), date (JavaScript date) and value.\n      var bucketsData = _lodash2.default.get(scope, ['card', 'stats', 'documentCounts', 'buckets'], {});\n      var chartData = [];\n      _lodash2.default.each(bucketsData, function (value, time) {\n        chartData.push({\n          date: new Date(+time),\n          time: +time,\n          value: value\n        });\n      });\n\n      scope.chartData = chartData;\n    }\n\n    function render() {\n      // Clear any existing elements from the visualization,\n      // then build the svg elements for the bar chart.\n      var chartElement = _d2.default.select(element.get(0)).select('.content-wrapper');\n      chartElement.selectAll('*').remove();\n\n      if (scope.chartData === undefined) {\n        return;\n      }\n\n      var svg = chartElement.append('svg').attr('width', svgWidth).attr('height', svgHeight);\n\n      // Set the size of the left margin according to the width\n      // of the largest y axis tick label.\n      var maxYVal = _d2.default.max(scope.chartData, function (d) {\n        return d.value;\n      });\n      yScale = yScale.domain([0, maxYVal]);\n\n      var yAxis = _d2.default.svg.axis().scale(yScale).orient('left').outerTickSize(0);\n\n      // barChartGroup translate doesn't seem to be relative\n      // to parent svg, so have to add an extra 5px on.\n      var maxYAxisLabelWidth = (0, _string_utils.calculateTextWidth)(maxYVal, true, svg);\n      margin.left = Math.max(maxYAxisLabelWidth + yAxis.tickPadding() + 5, 25);\n      chartWidth = Math.max(svgWidth - margin.left - margin.right, 0);\n\n      var bounds = _timefilter.timefilter.getActiveBounds();\n      xScale = _d2.default.time.scale().domain([new Date(bounds.min.valueOf()), new Date(bounds.max.valueOf())]).range([0, chartWidth]);\n\n      if (scope.chartData.length > 0) {\n        // x axis tick format and bar width determined by data aggregation interval.\n        var buckets = new MlTimeBuckets();\n        var aggInterval = _lodash2.default.get(scope, ['card', 'stats', 'documentCounts', 'interval']);\n        buckets.setInterval(aggInterval);\n        buckets.setBounds(bounds);\n        xAxisTickFormat = buckets.getScaledDateFormat();\n\n        var intervalMs = (0, _parse_interval.parseInterval)(aggInterval).asMilliseconds();\n        barWidth = xScale(scope.chartData[0].time + intervalMs) - xScale(scope.chartData[0].time);\n      }\n\n      var xAxis = _d2.default.svg.axis().scale(xScale).orient('bottom').outerTickSize(0).ticks((0, _chart_utils.numTicksForDateFormat)(chartWidth, xAxisTickFormat)).tickFormat(function (d) {\n        return (0, _moment2.default)(d).format(xAxisTickFormat);\n      });\n\n      barChartGroup = svg.append('g').attr('class', 'bar-chart').attr('transform', 'translate(' + margin.left + ', ' + margin.top + ')');\n\n      drawBarChartAxes(xAxis, yAxis);\n      drawBarChartPaths();\n    }\n\n    function drawBarChartAxes(xAxis, yAxis) {\n      var axes = barChartGroup.append('g');\n\n      axes.append('g').attr('class', 'x axis').attr('transform', 'translate(0, ' + chartHeight + ')').call(xAxis);\n\n      axes.append('g').attr('class', 'y axis').call(yAxis);\n    }\n\n    function drawBarChartPaths() {\n      barChartGroup.selectAll('bar').data(scope.chartData).enter().append('rect').attr('class', 'bar').attr('x', function (d) {\n        return xScale(d.time);\n      }).attr('width', barWidth).attr('y', function (d) {\n        return yScale(d.value);\n      }).attr('height', function (d) {\n        return chartHeight - yScale(d.value);\n      }).on('mouseover', function (d) {\n        showChartTooltip(d, this);\n      }).on('mousemove', function (d) {\n        showChartTooltip(d, this);\n      }).on('mouseout', function () {\n        return _chart_tooltip_service.mlChartTooltipService.hide();\n      });\n\n      function showChartTooltip(data, rect) {\n        var formattedDate = (0, _date_utils.formatHumanReadableDateTime)(data.time);\n        var contents = i18n('xpack.ml.fieldDataCard.documentCountChart.chartTooltip', {\n          defaultMessage: '{formattedDate}{br}{hr}count: {dataValue}',\n          values: {\n            formattedDate: formattedDate,\n            dataValue: data.value,\n            br: '<br />',\n            hr: '<hr />'\n          }\n        });\n\n        // Calculate the y offset.\n        // rectY are mouseY are relative to top of the chart area.\n        var rectY = _d2.default.select(rect).attr('y');\n        var mouseY = +_d2.default.mouse(rect)[1];\n\n        _chart_tooltip_service.mlChartTooltipService.show(contents, rect, {\n          x: 5,\n          y: mouseY - rectY\n        });\n      }\n    }\n\n    // Process the data and then render the chart.\n    processChartData();\n    render();\n  }\n\n  return {\n    scope: false,\n    link: link\n  };\n});",null]}