{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/packages/kbn-es-query/target/es_query/from_filters.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/packages/kbn-es-query/target/es_query/from_filters.js","mtime":1567666387283},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.buildQueryFromFilters = buildQueryFromFilters;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _migrate_filter = require('./migrate_filter');\n\nvar _decorate_query = require('./decorate_query');\n\nvar _filter_matches_index = require('./filter_matches_index');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : { default: obj };\n}\n\n/**\n * Create a filter that can be reversed for filters with negate set\n * @param {boolean} reverse This will reverse the filter. If true then\n *                          anything where negate is set will come\n *                          through otherwise it will filter out\n * @returns {function}\n */\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nvar filterNegate = function filterNegate(reverse) {\n  return function (filter) {\n    if (_lodash2.default.isUndefined(filter.meta) || _lodash2.default.isUndefined(filter.meta.negate)) return !reverse;\n    return filter.meta && filter.meta.negate === reverse;\n  };\n};\n\n/**\n * Translate a filter into a query to support es 5+\n * @param  {Object} filter - The filter to translate\n * @return {Object} the query version of that filter\n */\nvar translateToQuery = function translateToQuery(filter) {\n  if (!filter) return;\n\n  if (filter.query) {\n    return filter.query;\n  }\n\n  return filter;\n};\n\n/**\n * Clean out any invalid attributes from the filters\n * @param {object} filter The filter to clean\n * @returns {object}\n */\nvar cleanFilter = function cleanFilter(filter) {\n  return _lodash2.default.omit(filter, ['meta', '$state']);\n};\n\nfunction buildQueryFromFilters() {\n  var filters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var indexPattern = arguments[1];\n\n  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n      queryStringOptions = _ref.queryStringOptions,\n      ignoreFilterIfFieldNotInIndex = _ref.ignoreFilterIfFieldNotInIndex;\n\n  _lodash2.default.each(filters, function (filter) {\n    if (filter.query) {\n      (0, _decorate_query.decorateQuery)(filter.query, queryStringOptions);\n    }\n  });\n\n  return {\n    must: filters.filter(filterNegate(false)).filter(function (filter) {\n      return !ignoreFilterIfFieldNotInIndex || (0, _filter_matches_index.filterMatchesIndex)(filter, indexPattern);\n    }).map(translateToQuery).map(cleanFilter).map(function (filter) {\n      return (0, _migrate_filter.migrateFilter)(filter, indexPattern);\n    }),\n    filter: [],\n    should: [],\n    must_not: filters.filter(filterNegate(true)).filter(function (filter) {\n      return !ignoreFilterIfFieldNotInIndex || (0, _filter_matches_index.filterMatchesIndex)(filter, indexPattern);\n    }).map(translateToQuery).map(cleanFilter).map(function (filter) {\n      return (0, _migrate_filter.migrateFilter)(filter, indexPattern);\n    })\n  };\n}",null]}