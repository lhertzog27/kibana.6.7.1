{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/watcher/public/sections/watch_edit/components/watch_action_mode_table/watch_action_mode_table.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/watcher/public/sections/watch_edit/components/watch_action_mode_table/watch_action_mode_table.js","mtime":1567631712347},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\nopyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\nor more contributor license agreements. Licensed under the Elastic License;\nyou may not use this file except in compliance with the Elastic License.\nn\nvar _lodash = require('lodash');\n\nvar _modules = require('ui/modules');\n\nvar _watch_action_mode_table = require('./watch_action_mode_table.html');\n\nvar _watch_action_mode_table2 = _interopRequireDefault(_watch_action_mode_table);\n\nvar _get_action_type = require('plugins/watcher/../common/lib/get_action_type');\n\nvar _constants = require('plugins/watcher/../common/constants');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar app = _modules.uiModules.get('xpack/watcher');\n\napp.directive('watchActionModeTable', function () {\n  return {\n    restrict: 'E',\n    replace: true,\n    template: _watch_action_mode_table2.default,\n    scope: {\n      watch: '=xpackWatch', // Property names differ due to https://git.io/vSWXV\n      onChange: '='\n    },\n    bindToController: true,\n    controllerAs: 'watchActionModeTable',\n    controller: function () {\n      function WatchActionModeTableController($scope) {\n        var _this = this;\n\n        _classCallCheck(this, WatchActionModeTableController);\n\n        $scope.$watch('watchActionModeTable.watch.watch', function () {\n          _this.populateActionCollection();\n          _this.onActionModeChange();\n        });\n\n        this.actionModes = (0, _lodash.values)(_constants.ACTION_MODES);\n      }\n\n      _createClass(WatchActionModeTableController, [{\n        key: 'populateActionCollection',\n        value: function populateActionCollection() {\n          var actions = (0, _lodash.get)(this.watch, 'watch.actions');\n\n          this.actionOptions = (0, _lodash.map)(actions, function (action, actionId) {\n            var type = (0, _get_action_type.getActionType)(action);\n            return {\n              actionId: actionId,\n              type: type,\n              actionMode: _constants.ACTION_MODES.SIMULATE\n            };\n          });\n        }\n      }, {\n        key: 'onActionModeChange',\n        value: function onActionModeChange() {\n          var result = {};\n          this.actionOptions.forEach(function (actionOption) {\n            (0, _lodash.set)(result, actionOption.actionId, actionOption.actionMode);\n          });\n          this.onChange(result);\n        }\n      }]);\n\n      return WatchActionModeTableController;\n    }()\n  };\n});",null]}