{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/searchprofiler/public/range.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/searchprofiler/public/range.js","mtime":1567631712295},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nexports.Range = Range;\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\n// Pulled from Ace because I can't for the life of me\n// figure out how to import it.  This needs to be fixed TODO\n\nvar comparePoints = function comparePoints(p1, p2) {\n  return p1.row - p2.row || p1.column - p2.column;\n};\n\nfunction Range(startRow, startColumn, endRow, endColumn) {\n  this.start = {\n    row: startRow,\n    column: startColumn\n  };\n\n  this.end = {\n    row: endRow,\n    column: endColumn\n  };\n}\n\n(function () {\n  this.isEqual = function (range) {\n    return this.start.row === range.start.row && this.end.row === range.end.row && this.start.column === range.start.column && this.end.column === range.end.column;\n  };\n  this.toString = function () {\n    return 'Range: [' + this.start.row + '/' + this.start.column + '] -> [' + this.end.row + '/' + this.end.column + ']';\n  };\n\n  this.contains = function (row, column) {\n    return this.compare(row, column) === 0;\n  };\n  this.compareRange = function (range) {\n    var cmp = void 0;\n    var end = range.end;\n    var start = range.start;\n\n    cmp = this.compare(end.row, end.column);\n    if (cmp === 1) {\n      cmp = this.compare(start.row, start.column);\n      if (cmp === 1) {\n        return 2;\n      } else if (cmp === 0) {\n        return 1;\n      } else {\n        return 0;\n      }\n    } else if (cmp === -1) {\n      return -2;\n    } else {\n      cmp = this.compare(start.row, start.column);\n      if (cmp === -1) {\n        return -1;\n      } else if (cmp === 1) {\n        return 42;\n      } else {\n        return 0;\n      }\n    }\n  };\n  this.comparePoint = function (p) {\n    return this.compare(p.row, p.column);\n  };\n  this.containsRange = function (range) {\n    return this.comparePoint(range.start) === 0 && this.comparePoint(range.end) === 0;\n  };\n  this.intersects = function (range) {\n    var cmp = this.compareRange(range);\n    return cmp === -1 || cmp === 0 || cmp === 1;\n  };\n  this.isEnd = function (row, column) {\n    return this.end.row === row && this.end.column === column;\n  };\n  this.isStart = function (row, column) {\n    return this.start.row === row && this.start.column === column;\n  };\n  this.setStart = function (row, column) {\n    if ((typeof row === 'undefined' ? 'undefined' : _typeof(row)) === 'object') {\n      this.start.column = row.column;\n      this.start.row = row.row;\n    } else {\n      this.start.row = row;\n      this.start.column = column;\n    }\n  };\n  this.setEnd = function (row, column) {\n    if ((typeof row === 'undefined' ? 'undefined' : _typeof(row)) === 'object') {\n      this.end.column = row.column;\n      this.end.row = row.row;\n    } else {\n      this.end.row = row;\n      this.end.column = column;\n    }\n  };\n  this.inside = function (row, column) {\n    if (this.compare(row, column) === 0) {\n      if (this.isEnd(row, column) || this.isStart(row, column)) {\n        return false;\n      } else {\n        return true;\n      }\n    }\n    return false;\n  };\n  this.insideStart = function (row, column) {\n    if (this.compare(row, column) === 0) {\n      if (this.isEnd(row, column)) {\n        return false;\n      } else {\n        return true;\n      }\n    }\n    return false;\n  };\n  this.insideEnd = function (row, column) {\n    if (this.compare(row, column) === 0) {\n      if (this.isStart(row, column)) {\n        return false;\n      } else {\n        return true;\n      }\n    }\n    return false;\n  };\n  this.compare = function (row, column) {\n    if (!this.isMultiLine()) {\n      if (row === this.start.row) {\n        if (column < this.start.column) {\n          return -1;\n        }\n        return column > this.end.column ? 1 : 0;\n      }\n    }\n\n    if (row < this.start.row) {\n      return -1;\n    }\n\n    if (row > this.end.row) {\n      return 1;\n    }\n\n    if (this.start.row === row) {\n      return column >= this.start.column ? 0 : -1;\n    }\n\n    if (this.end.row === row) {\n      return column <= this.end.column ? 0 : 1;\n    }\n\n    return 0;\n  };\n  this.compareStart = function (row, column) {\n    if (this.start.row === row && this.start.column === column) {\n      return -1;\n    } else {\n      return this.compare(row, column);\n    }\n  };\n  this.compareEnd = function (row, column) {\n    if (this.end.row === row && this.end.column === column) {\n      return 1;\n    } else {\n      return this.compare(row, column);\n    }\n  };\n  this.compareInside = function (row, column) {\n    if (this.end.row === row && this.end.column === column) {\n      return 1;\n    } else if (this.start.row === row && this.start.column === column) {\n      return -1;\n    } else {\n      return this.compare(row, column);\n    }\n  };\n  this.clipRows = function (firstRow, lastRow) {\n    var end = void 0;\n    var start = void 0;\n    if (this.end.row > lastRow) {\n      end = { row: lastRow + 1, column: 0 };\n    } else if (this.end.row < firstRow) {\n      end = { row: firstRow, column: 0 };\n    }\n\n    if (this.start.row > lastRow) {\n      start = { row: lastRow + 1, column: 0 };\n    } else if (this.start.row < firstRow) {\n      start = { row: firstRow, column: 0 };\n    }\n    return Range.fromPoints(start || this.start, end || this.end);\n  };\n  this.extend = function (row, column) {\n    var cmp = this.compare(row, column);\n\n    if (cmp === 0) {\n      return this;\n    }\n    var start = void 0;\n    var end = void 0;\n    if (cmp === -1) {\n      start = { row: row, column: column };\n    } else {\n      end = { row: row, column: column };\n    }\n    return Range.fromPoints(start || this.start, end || this.end);\n  };\n\n  this.isEmpty = function () {\n    return this.start.row === this.end.row && this.start.column === this.end.column;\n  };\n  this.isMultiLine = function () {\n    return this.start.row !== this.end.row;\n  };\n  this.clone = function () {\n    return Range.fromPoints(this.start, this.end);\n  };\n  this.collapseRows = function () {\n    if (this.end.column === 0) {\n      return new Range(this.start.row, 0, Math.max(this.start.row, this.end.row - 1), 0);\n    }\n    return new Range(this.start.row, 0, this.end.row, 0);\n  };\n  this.toScreenRange = function (session) {\n    var screenPosStart = session.documentToScreenPosition(this.start);\n    var screenPosEnd = session.documentToScreenPosition(this.end);\n\n    return new Range(screenPosStart.row, screenPosStart.column, screenPosEnd.row, screenPosEnd.column);\n  };\n  this.moveBy = function (row, column) {\n    this.start.row += row;\n    this.start.column += column;\n    this.end.row += row;\n    this.end.column += column;\n  };\n}).call(Range.prototype);\nRange.fromPoints = function (start, end) {\n  return new Range(start.row, start.column, end.row, end.column);\n};\nRange.comparePoints = comparePoints;\n\nRange.comparePoints = function (p1, p2) {\n  return p1.row - p2.row || p1.column - p2.column;\n};",null]}