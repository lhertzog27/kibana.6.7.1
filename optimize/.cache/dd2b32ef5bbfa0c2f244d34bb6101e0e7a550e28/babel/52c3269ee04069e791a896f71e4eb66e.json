{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/ui/public/agg_response/tabify/_response_writer.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/agg_response/tabify/_response_writer.js","mtime":1567631711693},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TabbedAggResponseWriter = undefined;\n\nvar _lodash = require('lodash');\n\nvar _get_columns = require('./_get_columns');\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } } /*\n                                                                                                                                                                                                     * Licensed to Elasticsearch B.V. under one or more contributor\n                                                                                                                                                                                                     * license agreements. See the NOTICE file distributed with\n                                                                                                                                                                                                     * this work for additional information regarding copyright\n                                                                                                                                                                                                     * ownership. Elasticsearch B.V. licenses this file to you under\n                                                                                                                                                                                                     * the Apache License, Version 2.0 (the \"License\"); you may\n                                                                                                                                                                                                     * not use this file except in compliance with the License.\n                                                                                                                                                                                                     * You may obtain a copy of the License at\n                                                                                                                                                                                                     *\n                                                                                                                                                                                                     *    http://www.apache.org/licenses/LICENSE-2.0\n                                                                                                                                                                                                     *\n                                                                                                                                                                                                     * Unless required by applicable law or agreed to in writing,\n                                                                                                                                                                                                     * software distributed under the License is distributed on an\n                                                                                                                                                                                                     * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n                                                                                                                                                                                                     * KIND, either express or implied.  See the License for the\n                                                                                                                                                                                                     * specific language governing permissions and limitations\n                                                                                                                                                                                                     * under the License.\n                                                                                                                                                                                                     */\n\n/**\n * Writer class that collects information about an aggregation response and\n * produces a table, or a series of tables.\n *\n * @param {AggConfigs} aggs - the agg configs object to which the aggregation response correlates\n * @param {boolean} minimalColumns - setting to true will only return a column for the last bucket/metric instead of one for each level\n * @param {boolean} partialRows - vis.params.showPartialRows: determines whether to return rows with incomplete data\n * @param {Object} timeRange - time range object, if provided\n */\nfunction TabbedAggResponseWriter(aggs) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$minimalColumns = _ref.minimalColumns,\n      minimalColumns = _ref$minimalColumns === undefined ? true : _ref$minimalColumns,\n      _ref$partialRows = _ref.partialRows,\n      partialRows = _ref$partialRows === undefined ? false : _ref$partialRows,\n      timeRange = _ref.timeRange;\n\n  // Private\n  this._removePartialRows = !partialRows;\n\n  // Public\n  this.rowBuffer = {};\n  this.bucketBuffer = [];\n  this.metricBuffer = [];\n  this.aggs = aggs;\n  this.partialRows = partialRows;\n  this.columns = (0, _get_columns.tabifyGetColumns)(aggs.getResponseAggs(), minimalColumns);\n  this.aggStack = [].concat(_toConsumableArray(this.columns));\n  this.rows = [];\n  // Extract the time range object if provided\n  if (timeRange) {\n    var timeRangeKey = Object.keys(timeRange)[0];\n    this.timeRange = timeRange[timeRangeKey];\n    if (this.timeRange) {\n      this.timeRange.name = timeRangeKey;\n    }\n  }\n}\n\nTabbedAggResponseWriter.prototype.isPartialRow = function (row) {\n  return !this.columns.map(function (column) {\n    return row.hasOwnProperty(column.id);\n  }).every(function (c) {\n    return c === true;\n  });\n};\n\n/**\n * Create a new row by reading the row buffer and bucketBuffer\n */\nTabbedAggResponseWriter.prototype.row = function () {\n  var _this = this;\n\n  this.bucketBuffer.forEach(function (bucket) {\n    _this.rowBuffer[bucket.id] = bucket.value;\n  });\n\n  this.metricBuffer.forEach(function (metric) {\n    _this.rowBuffer[metric.id] = metric.value;\n  });\n\n  if (!(0, _lodash.toArray)(this.rowBuffer).length || this._removePartialRows && this.isPartialRow(this.rowBuffer)) {\n    return;\n  }\n\n  this.rows.push(this.rowBuffer);\n  this.rowBuffer = {};\n};\n\n/**\n * Get the actual response\n *\n * @return {object} - the final table\n */\nTabbedAggResponseWriter.prototype.response = function () {\n  return {\n    columns: this.columns,\n    rows: this.rows\n  };\n};\n\nexports.TabbedAggResponseWriter = TabbedAggResponseWriter;",null]}