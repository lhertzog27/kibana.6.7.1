{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/packages/kbn-es-query/target/filters/phrase.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/packages/kbn-es-query/target/filters/phrase.js","mtime":1567666387451},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.buildPhraseFilter = buildPhraseFilter;\nexports.getPhraseScript = getPhraseScript;\nexports.getConvertedValueForField = getConvertedValueForField;\nexports.buildInlineScriptForPhraseFilter = buildInlineScriptForPhraseFilter;\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nfunction buildPhraseFilter(field, value, indexPattern) {\n  var filter = { meta: { index: indexPattern.id } };\n  var convertedValue = getConvertedValueForField(field, value);\n\n  if (field.scripted) {\n    filter.script = getPhraseScript(field, value);\n    filter.meta.field = field.name;\n  } else {\n    filter.query = { match: {} };\n    filter.query.match[field.name] = {\n      query: convertedValue,\n      type: 'phrase'\n    };\n  }\n  return filter;\n}\n\nfunction getPhraseScript(field, value) {\n  var convertedValue = getConvertedValueForField(field, value);\n  var script = buildInlineScriptForPhraseFilter(field);\n\n  return {\n    script: {\n      source: script,\n      lang: field.lang,\n      params: {\n        value: convertedValue\n      }\n    }\n  };\n}\n\n// See https://github.com/elastic/elasticsearch/issues/20941 and https://github.com/elastic/kibana/issues/8677\n// and https://github.com/elastic/elasticsearch/pull/22201\n// for the reason behind this change. Aggs now return boolean buckets with a key of 1 or 0.\nfunction getConvertedValueForField(field, value) {\n  if (typeof value !== 'boolean' && field.type === 'boolean') {\n    if ([1, 'true'].includes(value)) {\n      return true;\n    } else if ([0, 'false'].includes(value)) {\n      return false;\n    } else {\n      throw new Error(value + ' is not a valid boolean value for boolean field ' + field.name);\n    }\n  }\n  return value;\n}\n\n/**\n * Takes a scripted field and returns an inline script appropriate for use in a script query.\n * Handles lucene expression and Painless scripts. Other langs aren't guaranteed to generate valid\n * scripts.\n *\n * @param {object} scriptedField A Field object representing a scripted field\n * @returns {string} The inline script string\n */\nfunction buildInlineScriptForPhraseFilter(scriptedField) {\n  // We must wrap painless scripts in a lambda in case they're more than a simple expression\n  if (scriptedField.lang === 'painless') {\n    return 'boolean compare(Supplier s, def v) {return s.get() == v;}' + ('compare(() -> { ' + scriptedField.script + ' }, params.value);');\n  } else {\n    return '(' + scriptedField.script + ') == value';\n  }\n}",null]}