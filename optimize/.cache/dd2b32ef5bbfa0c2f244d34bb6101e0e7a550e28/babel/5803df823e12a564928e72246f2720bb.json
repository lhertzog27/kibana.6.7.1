{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/public/components/function_form/index.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/public/components/function_form/index.js","mtime":1567631711924},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FunctionForm = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _reactRedux = require('react-redux');\n\nvar _find_expression_type = require('../../lib/find_expression_type');\n\nvar _get_id = require('../../lib/get_id');\n\nvar _assets = require('../../state/actions/assets');\n\nvar _elements = require('../../state/actions/elements');\n\nvar _workpad = require('../../state/selectors/workpad');\n\nvar _assets2 = require('../../state/selectors/assets');\n\nvar _find_existing_asset = require('../../lib/find_existing_asset');\n\nvar _function_form = require('./function_form');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; } /*\n                                                                                                                                                                                                                              * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                              * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                              * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                              */\n\nvar mapStateToProps = function mapStateToProps(state, _ref) {\n  var expressionIndex = _ref.expressionIndex;\n  return {\n    context: (0, _workpad.getContextForIndex)(state, expressionIndex),\n    element: (0, _workpad.getSelectedElement)(state),\n    pageId: (0, _workpad.getSelectedPage)(state),\n    assets: (0, _assets2.getAssets)(state)\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch, _ref2) {\n  var expressionIndex = _ref2.expressionIndex;\n  return {\n    addArgument: function addArgument(element, pageId) {\n      return function (argName, argValue) {\n        return function () {\n          dispatch((0, _elements.addArgumentValueAtIndex)({ index: expressionIndex, element: element, pageId: pageId, argName: argName, value: argValue }));\n        };\n      };\n    },\n    updateContext: function updateContext(element) {\n      return function () {\n        return dispatch((0, _elements.fetchContext)(expressionIndex, element));\n      };\n    },\n    setArgument: function setArgument(element, pageId) {\n      return function (argName, valueIndex) {\n        return function (value) {\n          dispatch((0, _elements.setArgumentAtIndex)({\n            index: expressionIndex,\n            element: element,\n            pageId: pageId,\n            argName: argName,\n            value: value,\n            valueIndex: valueIndex\n          }));\n        };\n      };\n    },\n    deleteArgument: function deleteArgument(element, pageId) {\n      return function (argName, argIndex) {\n        return function () {\n          dispatch((0, _elements.deleteArgumentAtIndex)({\n            index: expressionIndex,\n            element: element,\n            pageId: pageId,\n            argName: argName,\n            argIndex: argIndex\n          }));\n        };\n      };\n    },\n    onAssetAdd: function onAssetAdd(type, content) {\n      // make the ID here and pass it into the action\n      var assetId = (0, _get_id.getId)('asset');\n      dispatch((0, _assets.createAsset)(type, content, assetId));\n\n      // then return the id, so the caller knows the id that will be created\n      return assetId;\n    }\n  };\n};\n\nvar mergeProps = function mergeProps(stateProps, dispatchProps, ownProps) {\n  var element = stateProps.element,\n      pageId = stateProps.pageId,\n      assets = stateProps.assets;\n  var argType = ownProps.argType,\n      nextArgType = ownProps.nextArgType;\n\n  var updateContext = dispatchProps.updateContext,\n      setArgument = dispatchProps.setArgument,\n      addArgument = dispatchProps.addArgument,\n      deleteArgument = dispatchProps.deleteArgument,\n      _onAssetAdd = dispatchProps.onAssetAdd,\n      dispatchers = _objectWithoutProperties(dispatchProps, ['updateContext', 'setArgument', 'addArgument', 'deleteArgument', 'onAssetAdd']);\n\n  return _extends({}, stateProps, dispatchers, ownProps, {\n    updateContext: updateContext(element),\n    expressionType: (0, _find_expression_type.findExpressionType)(argType),\n    nextExpressionType: nextArgType ? (0, _find_expression_type.findExpressionType)(nextArgType) : nextArgType,\n    onValueChange: setArgument(element, pageId),\n    onValueAdd: addArgument(element, pageId),\n    onValueRemove: deleteArgument(element, pageId),\n    onAssetAdd: function onAssetAdd(type, content) {\n      var existingId = (0, _find_existing_asset.findExistingAsset)(type, content, assets);\n      if (existingId) {\n        return existingId;\n      }\n      return _onAssetAdd(type, content);\n    }\n  });\n};\n\nvar FunctionForm = exports.FunctionForm = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps, mergeProps)(_function_form.FunctionForm);\n\nFunctionForm.propTypes = {\n  expressionIndex: _propTypes2.default.number,\n  argType: _propTypes2.default.string,\n  nextArgType: _propTypes2.default.string\n};",null]}