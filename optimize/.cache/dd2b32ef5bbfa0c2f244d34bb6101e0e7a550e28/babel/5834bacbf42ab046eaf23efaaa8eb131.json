{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/file_datavisualizer/components/utils/utils.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/file_datavisualizer/components/utils/utils.js","mtime":1567631712046},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hasImportPermission = undefined;\n\n// a check for the minimum privileges needed to create and ingest data into an index.\n// if called with no indexName, the check will just look for the minimum cluster privileges.\nvar hasImportPermission = exports.hasImportPermission = function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(indexName) {\n    var priv, resp;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            priv = {\n              cluster: ['cluster:monitor/nodes/info', 'cluster:admin/ingest/pipeline/put']\n            };\n\n\n            if (indexName !== undefined) {\n              priv.index = [{\n                names: [indexName],\n                privileges: ['indices:data/write/bulk', 'indices:data/write/index', 'indices:admin/create']\n              }];\n            }\n\n            _context.next = 4;\n            return _ml_api_service.ml.checkPrivilege(priv);\n\n          case 4:\n            resp = _context.sent;\n            return _context.abrupt('return', resp.securityDisabled === true || resp.has_all_requested === true);\n\n          case 6:\n          case 'end':\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n\n  return function hasImportPermission(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexports.readFile = readFile;\nexports.reduceData = reduceData;\nexports.createUrlOverrides = createUrlOverrides;\nexports.processResults = processResults;\n\nvar _overrides = require('./overrides');\n\nvar _lodash = require('lodash');\n\nvar _ml_api_service = require('../../../services/ml_api_service');\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            */\n\nfunction readFile(file) {\n  return new Promise(function (resolve, reject) {\n\n    if (file && file.size) {\n      var reader = new FileReader();\n      reader.readAsText(file);\n\n      reader.onload = function () {\n        return function () {\n          var data = reader.result;\n          if (data === '') {\n            reject();\n          } else {\n            resolve({ data: data });\n          }\n        };\n      }(file);\n    } else {\n      reject();\n    }\n  });\n}\n\nfunction reduceData(data, mb) {\n  // assuming ascii characters in the file where 1 char is 1 byte\n  // TODO -  change this when other non UTF-8 formats are\n  // supported for the read data\n  var size = mb * Math.pow(2, 20);\n  return data.length >= size ? data.slice(0, size) : data;\n}\n\nfunction createUrlOverrides(overrides, originalSettings) {\n  var formattedOverrides = {};\n  for (var o in _overrides.overrideDefaults) {\n    if (_overrides.overrideDefaults.hasOwnProperty(o)) {\n      var value = overrides[o];\n      if (Array.isArray(value) && (0, _lodash.isEqual)(value, originalSettings[o]) || value === undefined || value === originalSettings[o]) {\n        value = '';\n      }\n\n      var snakeCaseO = o.replace(/([A-Z])/g, function ($1) {\n        return '_' + $1.toLowerCase();\n      });\n      formattedOverrides[snakeCaseO] = value;\n    }\n  }\n\n  if (formattedOverrides.format === '' && originalSettings.format === 'delimited') {\n    if (formattedOverrides.should_trim_fields !== '' || formattedOverrides.has_header_row !== '' || formattedOverrides.delimiter !== '' || formattedOverrides.quote !== '' || formattedOverrides.column_names !== '') {\n      formattedOverrides.format = originalSettings.format;\n    }\n  }\n\n  if (formattedOverrides.format === '' && originalSettings.format === 'semi_structured_text') {\n    if (formattedOverrides.grok_pattern !== '') {\n      formattedOverrides.format = originalSettings.format;\n    }\n  }\n\n  if (formattedOverrides.format === 'ndjson' || originalSettings.format === 'ndjson') {\n    formattedOverrides.should_trim_fields = '';\n    formattedOverrides.has_header_row = '';\n    formattedOverrides.delimiter = '';\n    formattedOverrides.quote = '';\n    formattedOverrides.column_names = '';\n  }\n\n  // escape grok pattern as it can contain bad characters\n  if (formattedOverrides.grok_pattern !== '') {\n    formattedOverrides.grok_pattern = encodeURIComponent(formattedOverrides.grok_pattern);\n  }\n\n  if (formattedOverrides.lines_to_sample === '') {\n    formattedOverrides.lines_to_sample = overrides.linesToSample;\n  }\n\n  return formattedOverrides;\n}\n\nfunction processResults(results) {\n  var timestampFormat = results.java_timestamp_formats !== undefined && results.java_timestamp_formats.length ? results.java_timestamp_formats[0] : undefined;\n\n  var linesToSample = results.overrides !== undefined && results.overrides.lines_to_sample !== undefined ? results.overrides.lines_to_sample : _overrides.DEFAULT_LINES_TO_SAMPLE;\n\n  return {\n    format: results.format,\n    delimiter: results.delimiter,\n    timestampField: results.timestamp_field,\n    timestampFormat: timestampFormat,\n    quote: results.quote,\n    hasHeaderRow: results.has_header_row,\n    shouldTrimFields: results.should_trim_fields,\n    charset: results.charset,\n    columnNames: results.column_names,\n    grokPattern: results.grok_pattern,\n    linesToSample: linesToSample\n  };\n}",null]}