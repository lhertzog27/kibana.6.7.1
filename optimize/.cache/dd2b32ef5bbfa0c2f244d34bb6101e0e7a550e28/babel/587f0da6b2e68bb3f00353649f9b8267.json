{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/remote_clusters/public/store/actions/remove_clusters.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/remote_clusters/public/store/actions/remove_clusters.js","mtime":1567631712124},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.removeClusters = undefined;\n\nvar _i18n = require('@kbn/i18n');\n\nvar _notify = require('ui/notify');\n\nvar _services = require('../../services');\n\nvar _action_types = require('../action_types');\n\nvar _detail_panel = require('./detail_panel');\n\nvar _refresh_clusters = require('./refresh_clusters');\n\nvar _selectors = require('../selectors');\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            */\n\nvar removeClusters = exports.removeClusters = function removeClusters(names) {\n  return function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(dispatch, getState) {\n      var removalSuccesses, removalErrors, removeClusterRequests, detailPanelClusterName;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              dispatch({\n                type: _action_types.REMOVE_CLUSTERS_START\n              });\n\n              removalSuccesses = [];\n              removalErrors = [];\n              removeClusterRequests = names.map(function (name) {\n                (0, _services.removeClusterRequest)(name).then(function () {\n                  return removalSuccesses.push(name);\n                }).catch(function () {\n                  return removalErrors.push(name);\n                });\n              });\n              _context.next = 6;\n              return Promise.all([].concat(_toConsumableArray(removeClusterRequests), [\n              // Wait at least half a second to avoid a weird flicker of the saving feedback.\n              new Promise(function (resolve) {\n                return setTimeout(resolve, 500);\n              })]));\n\n            case 6:\n\n              if (removalErrors.length > 0) {\n                if (removalErrors.length === 1) {\n                  _notify.toastNotifications.addDanger(_i18n.i18n.translate('xpack.remoteClusters.removeAction.errorSingleNotificationTitle', {\n                    defaultMessage: 'Error removing remote cluster \\'{name}\\'',\n                    values: { name: removalErrors[0] }\n                  }));\n                } else {\n                  _notify.toastNotifications.addDanger(_i18n.i18n.translate('xpack.remoteClusters.removeAction.errorMultipleNotificationTitle', {\n                    defaultMessage: 'Error removing \\'{count}\\' remote clusters',\n                    values: { count: removalErrors.length }\n                  }));\n                }\n              }\n\n              if (removalSuccesses.length > 0) {\n                if (removalSuccesses.length === 1) {\n                  _notify.toastNotifications.addSuccess(_i18n.i18n.translate('xpack.remoteClusters.removeAction.successSingleNotificationTitle', {\n                    defaultMessage: 'Remote cluster \\'{name}\\' was removed',\n                    values: { name: removalSuccesses[0] }\n                  }));\n                } else {\n                  _notify.toastNotifications.addSuccess(_i18n.i18n.translate('xpack.remoteClusters.removeAction.successMultipleNotificationTitle', {\n                    defaultMessage: '{count} remote clusters were removed',\n                    values: { count: names.length }\n                  }));\n                }\n              }\n\n              // If we've just deleted a cluster we were looking at, we need to close the panel.\n              detailPanelClusterName = (0, _selectors.getDetailPanelClusterName)(getState());\n\n              if (detailPanelClusterName && names.includes(detailPanelClusterName)) {\n                dispatch((0, _detail_panel.closeDetailPanel)());\n              }\n\n              dispatch({\n                type: _action_types.REMOVE_CLUSTERS_FINISH\n              });\n\n              dispatch((0, _refresh_clusters.refreshClusters)());\n\n            case 12:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, undefined);\n    }));\n\n    return function (_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};",null]}