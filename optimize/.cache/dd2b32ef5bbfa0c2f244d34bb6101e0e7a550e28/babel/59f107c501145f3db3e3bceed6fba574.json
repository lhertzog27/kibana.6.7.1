{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/watcher/public/models/watch_status/watch_status.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/watcher/public/models/watch_status/watch_status.js","mtime":1567631712345},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WatchStatus = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\nopyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\nor more contributor license agreements. Licensed under the Elastic License;\nyou may not use this file except in compliance with the Elastic License.\nn\nvar _lodash = require('lodash');\n\nvar _get_moment = require('plugins/watcher/../common/lib/get_moment');\n\nvar _action_status = require('../action_status');\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar WatchStatus = exports.WatchStatus = function () {\n  function WatchStatus() {\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, WatchStatus);\n\n    this.id = (0, _lodash.get)(props, 'id');\n    this.state = (0, _lodash.get)(props, 'state');\n    this.comment = (0, _lodash.get)(props, 'comment');\n    this.isActive = (0, _lodash.get)(props, 'isActive');\n    this.lastFired = (0, _get_moment.getMoment)((0, _lodash.get)(props, 'lastFired'));\n    this.lastChecked = (0, _get_moment.getMoment)((0, _lodash.get)(props, 'lastChecked'));\n    this.lastMetCondition = (0, _get_moment.getMoment)(this.lastMetCondition);\n\n    if (this.lastFired) {\n      this.lastFiredHumanized = this.lastFired.fromNow();\n    }\n\n    if (this.lastChecked) {\n      this.lastCheckedHumanized = this.lastChecked.fromNow();\n    }\n\n    var actionStatuses = (0, _lodash.get)(props, 'actionStatuses', []);\n    this.actionStatuses = actionStatuses.map(function (actionStatus) {\n      return _action_status.ActionStatus.fromUpstreamJson(actionStatus);\n    });\n  }\n\n  _createClass(WatchStatus, null, [{\n    key: 'fromUpstreamJson',\n    value: function fromUpstreamJson(upstreamWatchStatus) {\n      return new WatchStatus(upstreamWatchStatus);\n    }\n  }]);\n\n  return WatchStatus;\n}();",null]}