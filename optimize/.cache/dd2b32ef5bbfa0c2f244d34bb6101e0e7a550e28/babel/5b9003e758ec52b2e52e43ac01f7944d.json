{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/remote_clusters/public/services/api.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/remote_clusters/public/services/api.js","mtime":1567631712123},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.editCluster = exports.addCluster = exports.loadClusters = exports.setHttpClient = undefined;\n\nvar loadClusters = exports.loadClusters = function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n    var response;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return httpClient.get('' + apiPrefix);\n\n          case 2:\n            response = _context.sent;\n            return _context.abrupt('return', response.data);\n\n          case 4:\n          case 'end':\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n\n  return function loadClusters() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar addCluster = exports.addCluster = function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(cluster) {\n    return regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return httpClient.post('' + apiPrefix, cluster);\n\n          case 2:\n            return _context2.abrupt('return', _context2.sent);\n\n          case 3:\n          case 'end':\n            return _context2.stop();\n        }\n      }\n    }, _callee2, this);\n  }));\n\n  return function addCluster(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nvar editCluster = exports.editCluster = function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(cluster) {\n    var name, rest;\n    return regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            name = cluster.name, rest = _objectWithoutProperties(cluster, ['name']);\n            _context3.next = 3;\n            return httpClient.put(apiPrefix + '/' + name, rest);\n\n          case 3:\n            return _context3.abrupt('return', _context3.sent);\n\n          case 4:\n          case 'end':\n            return _context3.stop();\n        }\n      }\n    }, _callee3, this);\n  }));\n\n  return function editCluster(_x2) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nexports.removeClusterRequest = removeClusterRequest;\n\nvar _chrome = require('ui/chrome');\n\nvar _chrome2 = _interopRequireDefault(_chrome);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            */\n\nvar httpClient = void 0;\nvar setHttpClient = exports.setHttpClient = function setHttpClient(client) {\n  httpClient = client;\n};\nvar apiPrefix = _chrome2.default.addBasePath('/api/remote_clusters');\n\nfunction removeClusterRequest(name) {\n  return httpClient.delete(apiPrefix + '/' + name);\n}",null]}