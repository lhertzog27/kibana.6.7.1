{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/packages/kbn-i18n/target/web/angular/directive.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/packages/kbn-i18n/target/web/angular/directive.js","mtime":1567666389630},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.i18nDirective = i18nDirective;\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];var _n = true;var _d = false;var _e = undefined;try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;_e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nvar HTML_KEY_PREFIX = 'html_';\nvar PLACEHOLDER_SEPARATOR = '@I18N@';\n\nfunction i18nDirective(i18n, $sanitize) {\n  return {\n    restrict: 'A',\n    scope: {\n      id: '@i18nId',\n      defaultMessage: '@i18nDefaultMessage',\n      values: '<?i18nValues'\n    },\n    link: function link($scope, $element) {\n      if ($scope.values) {\n        $scope.$watchCollection('values', function () {\n          setContent($element, $scope, $sanitize, i18n);\n        });\n      } else {\n        setContent($element, $scope, $sanitize, i18n);\n      }\n    }\n  };\n}\n\nfunction setContent($element, $scope, $sanitize, i18n) {\n  var originalValues = $scope.values;\n  var valuesWithPlaceholders = {};\n  var hasValuesWithPlaceholders = false; // If we have values with the keys that start with HTML_KEY_PREFIX we should replace\n  // them with special placeholders that later on will be inserted as HTML\n  // into the DOM, the rest of the content will be treated as text. We don't\n  // sanitize values at this stage as some of the values can be excluded from\n  // the translated string (e.g. not used by ICU conditional statements).\n\n  if (originalValues) {\n    var _arr = Object.entries(originalValues);\n\n    for (var _i = 0; _i < _arr.length; _i++) {\n      var _arr$_i = _slicedToArray(_arr[_i], 2),\n          key = _arr$_i[0],\n          value = _arr$_i[1];\n\n      if (key.startsWith(HTML_KEY_PREFIX)) {\n        valuesWithPlaceholders[key.slice(HTML_KEY_PREFIX.length)] = \"\".concat(PLACEHOLDER_SEPARATOR).concat(key).concat(PLACEHOLDER_SEPARATOR);\n        hasValuesWithPlaceholders = true;\n      } else {\n        valuesWithPlaceholders[key] = value;\n      }\n    }\n  }\n\n  var label = i18n($scope.id, {\n    values: valuesWithPlaceholders,\n    defaultMessage: $scope.defaultMessage\n  }); // If there are no placeholders to replace treat everything as text, otherwise\n  // insert label piece by piece replacing every placeholder with corresponding\n  // sanitized HTML content.\n\n  if (!hasValuesWithPlaceholders) {\n    $element.text(label);\n  } else {\n    $element.empty();\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = label.split(PLACEHOLDER_SEPARATOR)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var contentOrPlaceholder = _step.value;\n\n        if (!contentOrPlaceholder) {\n          continue;\n        }\n\n        $element.append(originalValues.hasOwnProperty(contentOrPlaceholder) ? $sanitize(originalValues[contentOrPlaceholder]) : document.createTextNode(contentOrPlaceholder));\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  }\n}",null]}