{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/packages/kbn-interpreter/target/common/lib/fn.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/packages/kbn-interpreter/target/common/lib/fn.js","mtime":1567666389540},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nexports.Fn = Fn;\n\nvar _lodash = require('lodash');\n\nvar _arg = require('./arg');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : { default: obj };\n}\n\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nfunction Fn(config) {\n  var _this = this;\n\n  // Required\n  this.name = config.name; // Name of function\n\n  // Return type of function.\n  // This SHOULD be supplied. We use it for UI and autocomplete hinting,\n  // We may also use it for optimizations in the future.\n  this.type = config.type;\n  this.aliases = config.aliases || [];\n\n  // Function to run function (context, args)\n  this.fn = function () {\n    return Promise.resolve(config.fn.apply(config, arguments));\n  };\n\n  // Optional\n  this.help = config.help || ''; // A short help text\n  this.args = (0, _lodash.mapValues)(config.args || {}, function (arg, name) {\n    return new _arg.Arg((0, _extends3.default)({ name: name }, arg));\n  });\n\n  this.context = config.context || {};\n\n  this.accepts = function (type) {\n    if (!_this.context.types) return true; // If you don't tell us about context, we'll assume you don't care what you get\n    return (0, _lodash.includes)(_this.context.types, type); // Otherwise, check it\n  };\n}",null]}