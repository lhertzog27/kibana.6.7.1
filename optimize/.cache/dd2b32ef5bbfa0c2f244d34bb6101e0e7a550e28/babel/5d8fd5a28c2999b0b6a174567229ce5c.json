{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/license_management/public/store/actions/upload_license.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/license_management/public/store/actions/upload_license.js","mtime":1567631712003},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.uploadLicense = exports.uploadLicenseStatus = undefined;\n\nvar _reduxActions = require('redux-actions');\n\nvar _add_license = require('../actions/add_license');\n\nvar _base_path = require('../../../common/constants/base_path');\n\nvar _es = require('../../lib/es');\n\nvar _add_error_message = require('./add_error_message');\n\nvar _i18n = require('@kbn/i18n');\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            */\n\nvar uploadLicenseStatus = exports.uploadLicenseStatus = (0, _reduxActions.createAction)('LICENSE_MANAGEMENT_UPLOAD_LICENSE_STATUS');\n\nvar genericUploadError = _i18n.i18n.translate('xpack.licenseMgmt.uploadLicense.genericUploadErrorMessage', {\n  defaultMessage: 'Error encountered uploading license:'\n});\n\nvar dispatchFromResponse = function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(response, dispatch, currentLicenseType, newLicenseType, _ref) {\n    var xPackInfo = _ref.xPackInfo,\n        kbnUrl = _ref.kbnUrl;\n    var error, acknowledged, licenseStatus, acknowledge, messages, first;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            error = response.error, acknowledged = response.acknowledged, licenseStatus = response.license_status, acknowledge = response.acknowledge;\n\n            if (!error) {\n              _context.next = 6;\n              break;\n            }\n\n            dispatch(uploadLicenseStatus({}));\n            dispatch((0, _add_error_message.addUploadErrorMessage)(genericUploadError + ' ' + error.reason));\n            _context.next = 28;\n            break;\n\n          case 6:\n            if (!acknowledged) {\n              _context.next = 25;\n              break;\n            }\n\n            if (!(licenseStatus === 'invalid')) {\n              _context.next = 12;\n              break;\n            }\n\n            dispatch(uploadLicenseStatus({}));\n            dispatch((0, _add_error_message.addUploadErrorMessage)(_i18n.i18n.translate('xpack.licenseMgmt.uploadLicense.invalidLicenseErrorMessage', {\n              defaultMessage: 'The supplied license is not valid for this product.'\n            })));\n            _context.next = 23;\n            break;\n\n          case 12:\n            if (!(licenseStatus === 'expired')) {\n              _context.next = 17;\n              break;\n            }\n\n            dispatch(uploadLicenseStatus({}));\n            dispatch((0, _add_error_message.addUploadErrorMessage)(_i18n.i18n.translate('xpack.licenseMgmt.uploadLicense.expiredLicenseErrorMessage', {\n              defaultMessage: 'The supplied license has expired.'\n            })));\n            _context.next = 23;\n            break;\n\n          case 17:\n            _context.next = 19;\n            return xPackInfo.refresh();\n\n          case 19:\n            dispatch((0, _add_license.addLicense)(xPackInfo.get('license')));\n            dispatch(uploadLicenseStatus({}));\n            kbnUrl.change(_base_path.BASE_PATH);\n            // reload necessary to get left nav to refresh with proper links\n            window.location.reload();\n\n          case 23:\n            _context.next = 28;\n            break;\n\n          case 25:\n            // first message relates to command line interface, so remove it\n            messages = Object.values(acknowledge).slice(1);\n            // messages can be in nested arrays\n\n            first = _i18n.i18n.translate('xpack.licenseMgmt.uploadLicense.problemWithUploadedLicenseDescription', {\n              // eslint-disable-next-line max-len\n              defaultMessage: 'Some functionality will be lost if you replace your {currentLicenseType} license with a {newLicenseType} license. Review the list of features below.',\n              values: {\n                currentLicenseType: currentLicenseType.toUpperCase(),\n                newLicenseType: newLicenseType.toUpperCase()\n              }\n            });\n\n            dispatch(uploadLicenseStatus({ acknowledge: true, messages: [first].concat(_toConsumableArray(messages)) }));\n\n          case 28:\n          case 'end':\n            return _context.stop();\n        }\n      }\n    }, _callee, undefined);\n  }));\n\n  return function dispatchFromResponse(_x, _x2, _x3, _x4, _x5) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nvar uploadLicense = exports.uploadLicense = function uploadLicense(licenseString, currentLicenseType, acknowledge) {\n  return function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(dispatch, getState, services) {\n      var newLicenseType, response, message;\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              dispatch(uploadLicenseStatus({ applying: true }));\n              newLicenseType = null;\n              _context2.prev = 2;\n              newLicenseType = JSON.parse(licenseString).license.type;\n              _context2.next = 10;\n              break;\n\n            case 6:\n              _context2.prev = 6;\n              _context2.t0 = _context2['catch'](2);\n\n              dispatch(uploadLicenseStatus({}));\n              return _context2.abrupt('return', dispatch((0, _add_error_message.addUploadErrorMessage)(_i18n.i18n.translate('xpack.licenseMgmt.uploadLicense.checkLicenseFileErrorMessage', {\n                defaultMessage: '{genericUploadError} Check your license file.',\n                values: {\n                  genericUploadError: genericUploadError\n                }\n              }))));\n\n            case 10:\n              _context2.prev = 10;\n              _context2.next = 13;\n              return (0, _es.putLicense)(licenseString, acknowledge);\n\n            case 13:\n              response = _context2.sent;\n              _context2.next = 16;\n              return dispatchFromResponse(response, dispatch, currentLicenseType, newLicenseType, services);\n\n            case 16:\n              _context2.next = 23;\n              break;\n\n            case 18:\n              _context2.prev = 18;\n              _context2.t1 = _context2['catch'](10);\n              message = _context2.t1.responseJSON && _context2.t1.responseJSON.error.reason ? _context2.t1.responseJSON.error.reason : _i18n.i18n.translate('xpack.licenseMgmt.uploadLicense.unknownErrorErrorMessage', {\n                defaultMessage: 'Unknown error.'\n              });\n\n              dispatch(uploadLicenseStatus({}));\n              dispatch((0, _add_error_message.addUploadErrorMessage)(genericUploadError + ' ' + message));\n\n            case 23:\n            case 'end':\n              return _context2.stop();\n          }\n        }\n      }, _callee2, undefined, [[2, 6], [10, 18]]);\n    }));\n\n    return function (_x6, _x7, _x8) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n};",null]}