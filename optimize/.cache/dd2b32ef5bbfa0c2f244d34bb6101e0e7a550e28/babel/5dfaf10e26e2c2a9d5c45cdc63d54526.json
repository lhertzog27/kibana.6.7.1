{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/ui/public/agg_types/buckets/geo_hash.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/agg_types/buckets/geo_hash.js","mtime":1567631711697},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.geoHashBucketAgg = undefined;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _chrome = require('ui/chrome');\n\nvar _chrome2 = _interopRequireDefault(_chrome);\n\nvar _bucket_agg_type = require('./_bucket_agg_type');\n\nvar _precision = require('../controls/precision.html');\n\nvar _precision2 = _interopRequireDefault(_precision);\n\nvar _decode_geo_hash = require('../../utils/decode_geo_hash');\n\nvar _geo_utils = require('../../utils/geo_utils');\n\nvar _i18n = require('@kbn/i18n');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; } /*\n                                                                                                                                                                                                                   * Licensed to Elasticsearch B.V. under one or more contributor\n                                                                                                                                                                                                                   * license agreements. See the NOTICE file distributed with\n                                                                                                                                                                                                                   * this work for additional information regarding copyright\n                                                                                                                                                                                                                   * ownership. Elasticsearch B.V. licenses this file to you under\n                                                                                                                                                                                                                   * the Apache License, Version 2.0 (the \"License\"); you may\n                                                                                                                                                                                                                   * not use this file except in compliance with the License.\n                                                                                                                                                                                                                   * You may obtain a copy of the License at\n                                                                                                                                                                                                                   *\n                                                                                                                                                                                                                   *    http://www.apache.org/licenses/LICENSE-2.0\n                                                                                                                                                                                                                   *\n                                                                                                                                                                                                                   * Unless required by applicable law or agreed to in writing,\n                                                                                                                                                                                                                   * software distributed under the License is distributed on an\n                                                                                                                                                                                                                   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n                                                                                                                                                                                                                   * KIND, either express or implied.  See the License for the\n                                                                                                                                                                                                                   * specific language governing permissions and limitations\n                                                                                                                                                                                                                   * under the License.\n                                                                                                                                                                                                                   */\n\nvar config = _chrome2.default.getUiSettingsClient();\n\nvar defaultPrecision = 2;\nvar maxPrecision = parseInt(config.get('visualization:tileMap:maxPrecision'), 10) || 12;\n/**\n * Map Leaflet zoom levels to geohash precision levels.\n * The size of a geohash column-width on the map should be at least `minGeohashPixels` pixels wide.\n */\nvar zoomPrecision = {};\nvar minGeohashPixels = 16;\nfor (var zoom = 0; zoom <= 21; zoom += 1) {\n  var worldPixels = 256 * Math.pow(2, zoom);\n  zoomPrecision[zoom] = 1;\n  for (var precision = 2; precision <= maxPrecision; precision += 1) {\n    var columns = (0, _decode_geo_hash.geohashColumns)(precision);\n    if (worldPixels / columns >= minGeohashPixels) {\n      zoomPrecision[zoom] = precision;\n    } else {\n      break;\n    }\n  }\n}\n\nfunction getPrecision(precision) {\n\n  precision = parseInt(precision, 10);\n\n  if (isNaN(precision)) {\n    precision = defaultPrecision;\n  }\n\n  if (precision > maxPrecision) {\n    return maxPrecision;\n  }\n\n  return precision;\n}\n\nfunction isOutsideCollar(bounds, collar) {\n  return bounds && collar && !(0, _geo_utils.geoContains)(collar, bounds);\n}\n\nvar geoHashBucketAgg = exports.geoHashBucketAgg = new _bucket_agg_type.BucketAggType({\n  name: 'geohash_grid',\n  title: _i18n.i18n.translate('common.ui.aggTypes.buckets.geohashGridTitle', {\n    defaultMessage: 'Geohash'\n  }),\n  params: [{\n    name: 'field',\n    type: 'field',\n    filterFieldTypes: 'geo_point'\n  }, {\n    name: 'autoPrecision',\n    default: true,\n    write: _lodash2.default.noop\n  }, {\n    name: 'isFilteredByCollar',\n    default: true,\n    write: _lodash2.default.noop\n  }, {\n    name: 'useGeocentroid',\n    default: true,\n    write: _lodash2.default.noop\n  }, {\n    name: 'mapZoom',\n    default: 2,\n    write: _lodash2.default.noop\n  }, {\n    name: 'mapCenter',\n    default: [0, 0],\n    write: _lodash2.default.noop\n  }, {\n    name: 'mapBounds',\n    default: null,\n    write: _lodash2.default.noop\n  }, {\n    name: 'precision',\n    editor: _precision2.default,\n    default: defaultPrecision,\n    deserialize: getPrecision,\n    controller: function controller() {},\n    write: function write(aggConfig, output) {\n      var currZoom = aggConfig.params.mapZoom;\n      var autoPrecisionVal = zoomPrecision[currZoom];\n      output.params.precision = aggConfig.params.autoPrecision ? autoPrecisionVal : getPrecision(aggConfig.params.precision);\n    }\n  }],\n  getRequestAggs: function getRequestAggs(agg) {\n    var aggs = [];\n    var params = agg.params;\n\n    if (params.isFilteredByCollar && agg.getField()) {\n      var mapBounds = params.mapBounds,\n          mapZoom = params.mapZoom;\n\n      if (mapBounds) {\n        var mapCollar = void 0;\n        if (!agg.lastMapCollar || agg.lastMapCollar.zoom !== mapZoom || isOutsideCollar(mapBounds, agg.lastMapCollar)) {\n          mapCollar = (0, _geo_utils.scaleBounds)(mapBounds);\n          mapCollar.zoom = mapZoom;\n          agg.lastMapCollar = mapCollar;\n        } else {\n          mapCollar = agg.lastMapCollar;\n        }\n        var boundingBox = _defineProperty({\n          ignore_unmapped: true\n        }, agg.getField().name, {\n          top_left: mapCollar.top_left,\n          bottom_right: mapCollar.bottom_right\n        });\n        aggs.push(agg.aggConfigs.createAggConfig({\n          type: 'filter',\n          id: 'filter_agg',\n          enabled: true,\n          params: {\n            geo_bounding_box: boundingBox\n          },\n          schema: {\n            group: 'buckets'\n          }\n        }, { addToAggConfigs: false }));\n      }\n    }\n\n    aggs.push(agg);\n\n    if (params.useGeocentroid) {\n      aggs.push(agg.aggConfigs.createAggConfig({\n        type: 'geo_centroid',\n        enabled: true,\n        params: {\n          field: agg.getField()\n        }\n      }, { addToAggConfigs: false }));\n    }\n\n    return aggs;\n  }\n});",null]}