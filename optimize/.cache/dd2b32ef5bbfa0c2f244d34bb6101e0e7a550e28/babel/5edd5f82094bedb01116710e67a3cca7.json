{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/public/state/middleware/workpad_update.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/public/state/middleware/workpad_update.js","mtime":1567631711935},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.workpadUpdate = undefined;\n\nvar _pages = require('../actions/pages');\n\nvar _elements = require('../actions/elements');\n\nvar _workpad = require('../actions/workpad');\n\nvar _workpad2 = require('../selectors/workpad');\n\nvar _get_window = require('../../lib/get_window');\n\nvar _doc_title = require('../../lib/doc_title');\n\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nvar workpadUpdate = exports.workpadUpdate = function workpadUpdate(_ref) {\n  var dispatch = _ref.dispatch,\n      getState = _ref.getState;\n  return function (next) {\n    return function (action) {\n      var oldIsWriteable = (0, _workpad2.isWriteable)(getState());\n      var oldName = (0, _workpad2.getWorkpadName)(getState());\n\n      next(action);\n\n      // This middleware updates the page title when the workpad name changes\n      if ((0, _workpad2.getWorkpadName)(getState()) !== oldName) {\n        (0, _doc_title.setDocTitle)((0, _workpad2.getWorkpadName)(getState()));\n      }\n\n      // This middleware fetches all of the renderable elements on new, duplicate page\n      if (action.type === _pages.duplicatePage.toString()) {\n        // When a page has been duplicated, it will be added as the last page, so fetch it\n        var pages = (0, _workpad2.getPages)(getState());\n        var newPage = pages[pages.length - 1];\n\n        // For each element on that page, dispatch the action to update it\n        newPage.elements.forEach(function (element) {\n          return dispatch((0, _elements.fetchRenderable)(element));\n        });\n      }\n\n      // This middleware clears any page selection when the writeable mode changes\n      if (action.type === _workpad.setWriteable.toString() && oldIsWriteable !== (0, _workpad2.isWriteable)(getState())) {\n        var win = (0, _get_window.getWindow)();\n\n        // check for browser feature before using it\n        if (typeof win.getSelection === 'function') {\n          win.getSelection().collapse(document.querySelector('body'), 0);\n        }\n      }\n    };\n  };\n};",null]}