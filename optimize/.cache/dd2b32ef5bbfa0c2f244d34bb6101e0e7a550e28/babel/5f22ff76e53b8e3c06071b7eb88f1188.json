{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/index_lifecycle_management/public/store/selectors/nodes.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/index_lifecycle_management/public/store/selectors/nodes.js","mtime":1567631711967},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getNodeDetails = exports.getNodesFromSelectedNodeAttrs = exports.getSelectedNodeAttrs = exports.getSelectedReplicaCount = exports.getSelectedPrimaryShardCount = exports.getNodeOptions = exports.getNodes = undefined;\n\nvar _reselect = require('reselect');\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } } /*\n                                                                                                                                                                                                     * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                     * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                     * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                     */\n\nvar getNodes = exports.getNodes = function getNodes(state) {\n  return state.nodes.nodes;\n};\nvar getNodeOptions = exports.getNodeOptions = (0, _reselect.createSelector)([function (state) {\n  return getNodes(state);\n}], function (nodes) {\n  if (!nodes) {\n    return null;\n  }\n\n  var options = Object.keys(nodes).map(function (attrs) {\n    return {\n      text: attrs + ' (' + nodes[attrs].length + ')',\n      value: attrs\n    };\n  });\n\n  options.sort(function (a, b) {\n    return a.value.localeCompare(b.value);\n  });\n  if (options.length) {\n    return [{ text: 'Default allocation (don\\'t use attributes)', value: '' }].concat(_toConsumableArray(options));\n  } else {\n    return options;\n  }\n});\n\nvar getSelectedPrimaryShardCount = exports.getSelectedPrimaryShardCount = function getSelectedPrimaryShardCount(state) {\n  return state.nodes.selectedPrimaryShardCount;\n};\nvar getSelectedReplicaCount = exports.getSelectedReplicaCount = function getSelectedReplicaCount(state) {\n  return state.nodes.selectedReplicaCount !== undefined ? state.nodes.selectedReplicaCount : 1;\n};\nvar getSelectedNodeAttrs = exports.getSelectedNodeAttrs = function getSelectedNodeAttrs(state) {\n  return state.nodes.selectedNodeAttrs;\n};\nvar getNodesFromSelectedNodeAttrs = exports.getNodesFromSelectedNodeAttrs = function getNodesFromSelectedNodeAttrs(state) {\n  var nodes = getNodes(state)[getSelectedNodeAttrs(state)];\n  if (nodes) {\n    return nodes.length;\n  }\n  return null;\n};\n\nvar getNodeDetails = exports.getNodeDetails = function getNodeDetails(state, selectedNodeAttrs) {\n  return state.nodes.details[selectedNodeAttrs];\n};",null]}