{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/components/rule_editor/rule_editor_flyout.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/components/rule_editor/rule_editor_flyout.js","mtime":1567631712035},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RuleEditorFlyout = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _class, _temp; /*\n                    * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                    * or more contributor license agreements. Licensed under the Elastic License;\n                    * you may not use this file except in compliance with the Elastic License.\n                    */\n\n/*\n * Flyout component for viewing and editing job detector rules.\n */\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _eui = require('@elastic/eui');\n\nvar _notify = require('ui/notify');\n\nvar _detector_description_list = require('./components/detector_description_list');\n\nvar _actions_section = require('./actions_section');\n\nvar _check_privilege = require('../../privilege/check_privilege');\n\nvar _conditions_section = require('./conditions_section');\n\nvar _scope_section = require('./scope_section');\n\nvar _select_rule_action = require('./select_rule_action');\n\nvar _utils = require('./utils');\n\nvar _detector_rule = require('../../../common/constants/detector_rule');\n\nvar _job_utils = require('../../../common/util/job_utils');\n\nvar _job_service = require('../../services/job_service');\n\nvar _ml_api_service = require('../../services/ml_api_service');\n\nvar _metadata = require('ui/metadata');\n\nvar _react3 = require('@kbn/i18n/react');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n// metadata.branch corresponds to the version used in documentation links.\nvar docsUrl = 'https://www.elastic.co/guide/en/elastic-stack-overview/' + _metadata.metadata.branch + '/ml-rules.html';\n\nvar RuleEditorFlyout = exports.RuleEditorFlyout = (0, _react3.injectI18n)((_temp = _class = function (_Component) {\n  _inherits(RuleEditorFlyout, _Component);\n\n  function RuleEditorFlyout(props) {\n    _classCallCheck(this, RuleEditorFlyout);\n\n    var _this = _possibleConstructorReturn(this, (RuleEditorFlyout.__proto__ || Object.getPrototypeOf(RuleEditorFlyout)).call(this, props));\n\n    _this.showFlyout = function (anomaly) {\n      var ruleIndex = -1;\n      var intl = _this.props.intl;\n\n      var job = _job_service.mlJobService.getJob(anomaly.jobId);\n      if (job === undefined) {\n        // No details found for this job, display an error and\n        // don't open the Flyout as no edits can be made without the job.\n        _notify.toastNotifications.addDanger(intl.formatMessage({\n          id: 'xpack.ml.ruleEditor.ruleEditorFlyout.unableToConfigureRulesNotificationMesssage',\n          defaultMessage: 'Unable to configure rules as an error occurred obtaining details for job ID {jobId}'\n        }, { jobId: anomaly.jobId }));\n        _this.setState({\n          job: job,\n          isFlyoutVisible: false\n        });\n\n        return;\n      }\n\n      _this.partitioningFieldNames = (0, _job_utils.getPartitioningFieldNames)(job, anomaly.detectorIndex);\n\n      // Check if any rules are configured for this detector.\n      var detectorIndex = anomaly.detectorIndex;\n      var detector = job.analysis_config.detectors[detectorIndex];\n      if (detector.custom_rules === undefined) {\n        ruleIndex = 0;\n      }\n\n      var isConditionsEnabled = false;\n      if (ruleIndex === 0) {\n        // Configuring the first rule for a detector.\n        isConditionsEnabled = _this.partitioningFieldNames.length === 0;\n      }\n\n      _this.setState({\n        anomaly: anomaly,\n        job: job,\n        ruleIndex: ruleIndex,\n        isConditionsEnabled: isConditionsEnabled,\n        isScopeEnabled: false,\n        isFlyoutVisible: true\n      });\n\n      if (_this.partitioningFieldNames.length > 0 && _this.canGetFilters) {\n        // Load the current list of filters. These are used for configuring rule scope.\n        _ml_api_service.ml.filters.filters().then(function (filters) {\n          var filterListIds = filters.map(function (filter) {\n            return filter.filter_id;\n          });\n          _this.setState({\n            filterListIds: filterListIds\n          });\n        }).catch(function (resp) {\n          console.log('Error loading list of filters:', resp);\n          _notify.toastNotifications.addDanger(intl.formatMessage({\n            id: 'xpack.ml.ruleEditor.ruleEditorFlyout.errorWithLoadingFilterListsNotificationMesssage',\n            defaultMessage: 'Error loading the filter lists used in the rule scope'\n          }));\n        });\n      }\n    };\n\n    _this.closeFlyout = function () {\n      _this.setState({ isFlyoutVisible: false });\n    };\n\n    _this.setEditRuleIndex = function (ruleIndex) {\n      var detectorIndex = _this.state.anomaly.detectorIndex;\n      var detector = _this.state.job.analysis_config.detectors[detectorIndex];\n      var rules = detector.custom_rules;\n      var rule = rules === undefined || ruleIndex >= rules.length ? (0, _utils.getNewRuleDefaults)() : rules[ruleIndex];\n\n      var isConditionsEnabled = _this.partitioningFieldNames.length === 0 || rule.conditions !== undefined && rule.conditions.length > 0;\n      var isScopeEnabled = rule.scope !== undefined && Object.keys(rule.scope).length > 0;\n      if (isScopeEnabled === true) {\n        // Add 'enabled:true' to mark them as selected in the UI.\n        Object.keys(rule.scope).forEach(function (field) {\n          rule.scope[field].enabled = true;\n        });\n      }\n\n      _this.setState({\n        ruleIndex: ruleIndex,\n        rule: rule,\n        isConditionsEnabled: isConditionsEnabled,\n        isScopeEnabled: isScopeEnabled\n      });\n    };\n\n    _this.onSkipResultChange = function (e) {\n      var checked = e.target.checked;\n      _this.setState(function (prevState) {\n        var actions = [].concat(_toConsumableArray(prevState.rule.actions));\n        var idx = actions.indexOf(_detector_rule.ACTION.SKIP_RESULT);\n        if (idx === -1 && checked) {\n          actions.push(_detector_rule.ACTION.SKIP_RESULT);\n        } else if (idx > -1 && !checked) {\n          actions.splice(idx, 1);\n        }\n\n        return {\n          rule: _extends({}, prevState.rule, { actions: actions })\n        };\n      });\n    };\n\n    _this.onSkipModelUpdateChange = function (e) {\n      var checked = e.target.checked;\n      _this.setState(function (prevState) {\n        var actions = [].concat(_toConsumableArray(prevState.rule.actions));\n        var idx = actions.indexOf(_detector_rule.ACTION.SKIP_MODEL_UPDATE);\n        if (idx === -1 && checked) {\n          actions.push(_detector_rule.ACTION.SKIP_MODEL_UPDATE);\n        } else if (idx > -1 && !checked) {\n          actions.splice(idx, 1);\n        }\n\n        return {\n          rule: _extends({}, prevState.rule, { actions: actions })\n        };\n      });\n    };\n\n    _this.onConditionsEnabledChange = function (e) {\n      var isConditionsEnabled = e.target.checked;\n      _this.setState(function (prevState) {\n        var conditions = void 0;\n        if (isConditionsEnabled === false) {\n          // Clear any conditions that have been added.\n          conditions = [];\n        } else {\n          // Add a default new condition.\n          conditions = [(0, _utils.getNewConditionDefaults)()];\n        }\n\n        return {\n          rule: _extends({}, prevState.rule, { conditions: conditions }),\n          isConditionsEnabled: isConditionsEnabled\n        };\n      });\n    };\n\n    _this.addCondition = function () {\n      _this.setState(function (prevState) {\n        var conditions = [].concat(_toConsumableArray(prevState.rule.conditions));\n        conditions.push((0, _utils.getNewConditionDefaults)());\n\n        return {\n          rule: _extends({}, prevState.rule, { conditions: conditions })\n        };\n      });\n    };\n\n    _this.updateCondition = function (index, appliesTo, operator, value) {\n      _this.setState(function (prevState) {\n        var conditions = [].concat(_toConsumableArray(prevState.rule.conditions));\n        if (index < conditions.length) {\n          conditions[index] = {\n            applies_to: appliesTo,\n            operator: operator,\n            value: value\n          };\n        }\n\n        return {\n          rule: _extends({}, prevState.rule, { conditions: conditions })\n        };\n      });\n    };\n\n    _this.deleteCondition = function (index) {\n      _this.setState(function (prevState) {\n        var conditions = [].concat(_toConsumableArray(prevState.rule.conditions));\n        if (index < conditions.length) {\n          conditions.splice(index, 1);\n        }\n\n        return {\n          rule: _extends({}, prevState.rule, { conditions: conditions })\n        };\n      });\n    };\n\n    _this.onScopeEnabledChange = function (e) {\n      var isScopeEnabled = e.target.checked;\n      _this.setState(function (prevState) {\n        var rule = _extends({}, prevState.rule);\n        if (isScopeEnabled === false) {\n          // Clear scope property.\n          delete rule.scope;\n        }\n\n        return {\n          rule: rule,\n          isScopeEnabled: isScopeEnabled\n        };\n      });\n    };\n\n    _this.updateScope = function (fieldName, filterId, filterType, enabled) {\n      _this.setState(function (prevState) {\n        var scope = _extends({}, prevState.rule.scope);\n        if (scope === undefined) {\n          scope = {};\n        }\n\n        scope[fieldName] = {\n          filter_id: filterId,\n          filter_type: filterType,\n          enabled: enabled\n        };\n\n        return {\n          rule: _extends({}, prevState.rule, { scope: scope })\n        };\n      });\n    };\n\n    _this.saveEdit = function () {\n      var _this$state = _this.state,\n          rule = _this$state.rule,\n          ruleIndex = _this$state.ruleIndex;\n\n\n      _this.updateRuleAtIndex(ruleIndex, rule);\n    };\n\n    _this.updateRuleAtIndex = function (ruleIndex, editedRule) {\n      var intl = _this.props.intl;\n      var _this$state2 = _this.state,\n          job = _this$state2.job,\n          anomaly = _this$state2.anomaly;\n\n\n      var jobId = job.job_id;\n      var detectorIndex = anomaly.detectorIndex;\n\n      (0, _utils.saveJobRule)(job, detectorIndex, ruleIndex, editedRule).then(function (resp) {\n        if (resp.success) {\n          _notify.toastNotifications.add({\n            title: intl.formatMessage({\n              id: 'xpack.ml.ruleEditor.ruleEditorFlyout.changesToJobDetectorRulesSavedNotificationMessageTitle',\n              defaultMessage: 'Changes to {jobId} detector rules saved'\n            }, { jobId: jobId }),\n            color: 'success',\n            iconType: 'check',\n            text: intl.formatMessage({\n              id: 'xpack.ml.ruleEditor.ruleEditorFlyout.changesToJobDetectorRulesSavedNotificationMessageDescription',\n              defaultMessage: 'Note that changes will take effect for new results only.'\n            })\n          });\n          _this.closeFlyout();\n        } else {\n          _notify.toastNotifications.addDanger(intl.formatMessage({\n            id: 'xpack.ml.ruleEditor.ruleEditorFlyout.errorWithSavingChangesToJobDetectorRulesNotificationMessage',\n            defaultMessage: 'Error saving changes to {jobId} detector rules'\n          }, { jobId: jobId }));\n        }\n      }).catch(function (error) {\n        console.error(error);\n        _notify.toastNotifications.addDanger(intl.formatMessage({\n          id: 'xpack.ml.ruleEditor.ruleEditorFlyout.errorWithSavingChangesToJobDetectorRulesNotificationMessage',\n          defaultMessage: 'Error saving changes to {jobId} detector rules'\n        }, { jobId: jobId }));\n      });\n    };\n\n    _this.deleteRuleAtIndex = function (index) {\n      var intl = _this.props.intl;\n      var _this$state3 = _this.state,\n          job = _this$state3.job,\n          anomaly = _this$state3.anomaly;\n\n      var jobId = job.job_id;\n      var detectorIndex = anomaly.detectorIndex;\n\n      (0, _utils.deleteJobRule)(job, detectorIndex, index).then(function (resp) {\n        if (resp.success) {\n          _notify.toastNotifications.addSuccess(intl.formatMessage({\n            id: 'xpack.ml.ruleEditor.ruleEditorFlyout.ruleDeletedFromJobDetectorNotificationMessage',\n            defaultMessage: 'Rule deleted from {jobId} detector'\n          }, { jobId: jobId }));\n          _this.closeFlyout();\n        } else {\n          _notify.toastNotifications.addDanger(intl.formatMessage({\n            id: 'xpack.ml.ruleEditor.ruleEditorFlyout.errorWithDeletingRuleFromJobDetectorNotificationMessage',\n            defaultMessage: 'Error deleting rule from {jobId} detector'\n          }, { jobId: jobId }));\n        }\n      }).catch(function (error) {\n        console.error(error);\n        var errorMessage = intl.formatMessage({\n          id: 'xpack.ml.ruleEditor.ruleEditorFlyout.errorWithDeletingRuleFromJobDetectorNotificationMessage',\n          defaultMessage: 'Error deleting rule from {jobId} detector'\n        }, { jobId: jobId });\n        if (error.message) {\n          errorMessage += ' : ' + error.message;\n        }\n        _notify.toastNotifications.addDanger(errorMessage);\n      });\n    };\n\n    _this.addItemToFilterList = function (item, filterId, closeFlyoutOnAdd) {\n      var intl = _this.props.intl;\n\n      (0, _utils.addItemToFilter)(item, filterId).then(function () {\n        if (closeFlyoutOnAdd === true) {\n          _notify.toastNotifications.add({\n            title: intl.formatMessage({\n              id: 'xpack.ml.ruleEditor.ruleEditorFlyout.addedItemToFilterListNotificationMessageTitle',\n              defaultMessage: 'Added {item} to {filterId}'\n            }, { item: item, filterId: filterId }),\n            color: 'success',\n            iconType: 'check',\n            text: intl.formatMessage({\n              id: 'xpack.ml.ruleEditor.ruleEditorFlyout.addedItemToFilterListNotificationMessageDescription',\n              defaultMessage: 'Note that changes will take effect for new results only.'\n            })\n          });\n          _this.closeFlyout();\n        }\n      }).catch(function (error) {\n        console.log('Error adding ' + item + ' to filter ' + filterId + ':', error);\n        _notify.toastNotifications.addDanger(intl.formatMessage({\n          id: 'xpack.ml.ruleEditor.ruleEditorFlyout.errorWithAddingItemToFilterListNotificationMessage',\n          defaultMessage: 'An error occurred adding {item} to filter {filterId}'\n        }, { item: item, filterId: filterId }));\n      });\n    };\n\n    _this.state = {\n      anomaly: {},\n      job: {},\n      ruleIndex: -1,\n      rule: (0, _utils.getNewRuleDefaults)(),\n      skipModelUpdate: false,\n      isConditionsEnabled: false,\n      isScopeEnabled: false,\n      filterListIds: [],\n      isFlyoutVisible: false\n    };\n\n    _this.partitioningFieldNames = [];\n    _this.canGetFilters = (0, _check_privilege.checkPermission)('canGetFilters');\n    return _this;\n  }\n\n  _createClass(RuleEditorFlyout, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      if (typeof this.props.setShowFunction === 'function') {\n        this.props.setShowFunction(this.showFlyout);\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      if (typeof this.props.unsetShowFunction === 'function') {\n        this.props.unsetShowFunction();\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var intl = this.props.intl;\n      var _state = this.state,\n          isFlyoutVisible = _state.isFlyoutVisible,\n          job = _state.job,\n          anomaly = _state.anomaly,\n          ruleIndex = _state.ruleIndex,\n          rule = _state.rule,\n          filterListIds = _state.filterListIds,\n          isConditionsEnabled = _state.isConditionsEnabled,\n          isScopeEnabled = _state.isScopeEnabled;\n\n\n      if (isFlyoutVisible === false) {\n        return null;\n      }\n\n      var flyout = void 0;\n\n      if (ruleIndex === -1) {\n        flyout = _react2.default.createElement(\n          _eui.EuiFlyout,\n          {\n            className: 'ml-rule-editor-flyout',\n            onClose: this.closeFlyout,\n            'aria-labelledby': 'flyoutTitle'\n          },\n          _react2.default.createElement(\n            _eui.EuiFlyoutHeader,\n            { hasBorder: true },\n            _react2.default.createElement(\n              _eui.EuiTitle,\n              { size: 'l' },\n              _react2.default.createElement(\n                'h1',\n                { id: 'flyoutTitle' },\n                _react2.default.createElement(_react3.FormattedMessage, {\n                  id: 'xpack.ml.ruleEditor.ruleEditorFlyout.editRulesTitle',\n                  defaultMessage: 'Edit Rules'\n                })\n              )\n            )\n          ),\n          _react2.default.createElement(\n            _eui.EuiFlyoutBody,\n            null,\n            _react2.default.createElement(_select_rule_action.SelectRuleAction, {\n              job: job,\n              anomaly: anomaly,\n              setEditRuleIndex: this.setEditRuleIndex,\n              updateRuleAtIndex: this.updateRuleAtIndex,\n              deleteRuleAtIndex: this.deleteRuleAtIndex,\n              addItemToFilterList: this.addItemToFilterList\n            })\n          ),\n          _react2.default.createElement(\n            _eui.EuiFlyoutFooter,\n            null,\n            _react2.default.createElement(\n              _eui.EuiFlexGroup,\n              { justifyContent: 'spaceBetween' },\n              _react2.default.createElement(\n                _eui.EuiFlexItem,\n                { grow: false },\n                _react2.default.createElement(\n                  _eui.EuiButtonEmpty,\n                  {\n                    iconType: 'cross',\n                    onClick: this.closeFlyout,\n                    flush: 'left'\n                  },\n                  _react2.default.createElement(_react3.FormattedMessage, {\n                    id: 'xpack.ml.ruleEditor.ruleEditorFlyout.closeButtonLabel',\n                    defaultMessage: 'Close'\n                  })\n                )\n              )\n            )\n          )\n        );\n      } else {\n        var detectorIndex = anomaly.detectorIndex;\n        var detector = job.analysis_config.detectors[detectorIndex];\n        var rules = detector.custom_rules;\n        var isCreate = rules === undefined || ruleIndex >= rules.length;\n\n        var hasPartitioningFields = this.partitioningFieldNames && this.partitioningFieldNames.length > 0;\n        var conditionSupported = _detector_rule.CONDITIONS_NOT_SUPPORTED_FUNCTIONS.indexOf(anomaly.source.function) === -1;\n        var conditionsText = intl.formatMessage({\n          id: 'xpack.ml.ruleEditor.ruleEditorFlyout.conditionsDescription',\n          defaultMessage: 'Add numeric conditions for when the rule applies. Multiple conditions are combined using AND.'\n        });\n\n        flyout = _react2.default.createElement(\n          _eui.EuiFlyout,\n          {\n            className: 'ml-rule-editor-flyout',\n            onClose: this.closeFlyout,\n            'aria-labelledby': 'flyoutTitle'\n          },\n          _react2.default.createElement(\n            _eui.EuiFlyoutHeader,\n            { hasBorder: true },\n            _react2.default.createElement(\n              _eui.EuiTitle,\n              { size: 'l' },\n              _react2.default.createElement(\n                'h1',\n                { id: 'flyoutTitle' },\n                isCreate === true ? _react2.default.createElement(_react3.FormattedMessage, {\n                  id: 'xpack.ml.ruleEditor.ruleEditorFlyout.createRuleTitle',\n                  defaultMessage: 'Create Rule'\n                }) : _react2.default.createElement(_react3.FormattedMessage, {\n                  id: 'xpack.ml.ruleEditor.ruleEditorFlyout.editRuleTitle',\n                  defaultMessage: 'Edit Rule'\n                })\n              )\n            )\n          ),\n          _react2.default.createElement(\n            _eui.EuiFlyoutBody,\n            null,\n            _react2.default.createElement(_detector_description_list.DetectorDescriptionList, {\n              job: job,\n              detector: detector,\n              anomaly: anomaly\n            }),\n            _react2.default.createElement(_eui.EuiSpacer, { size: 'm' }),\n            _react2.default.createElement(\n              _eui.EuiText,\n              null,\n              _react2.default.createElement(\n                'p',\n                null,\n                _react2.default.createElement(_react3.FormattedMessage, {\n                  id: 'xpack.ml.ruleEditor.ruleEditorFlyout.rulesDescription',\n                  defaultMessage: 'Rules instruct anomaly detectors to change their behavior based on domain-specific knowledge that you provide. When you create a rule, you can specify conditions, scope, and actions. When the conditions of a rule are satisfied, its actions are triggered. {learnMoreLink}',\n                  values: {\n                    learnMoreLink: _react2.default.createElement(\n                      _eui.EuiLink,\n                      { href: docsUrl, target: '_blank' },\n                      _react2.default.createElement(_react3.FormattedMessage, {\n                        id: 'xpack.ml.ruleEditor.ruleEditorFlyout.rulesDescription.learnMoreLinkText',\n                        defaultMessage: 'Learn more'\n                      })\n                    )\n                  }\n                })\n              )\n            ),\n            _react2.default.createElement(_eui.EuiSpacer, null),\n            _react2.default.createElement(\n              _eui.EuiTitle,\n              null,\n              _react2.default.createElement(\n                'h2',\n                null,\n                _react2.default.createElement(_react3.FormattedMessage, {\n                  id: 'xpack.ml.ruleEditor.ruleEditorFlyout.actionTitle',\n                  defaultMessage: 'Action'\n                })\n              )\n            ),\n            _react2.default.createElement(_actions_section.ActionsSection, {\n              actions: rule.actions,\n              onSkipResultChange: this.onSkipResultChange,\n              onSkipModelUpdateChange: this.onSkipModelUpdateChange\n            }),\n            _react2.default.createElement(_eui.EuiSpacer, { size: 'xl' }),\n            _react2.default.createElement(\n              _eui.EuiTitle,\n              null,\n              _react2.default.createElement(\n                'h2',\n                null,\n                _react2.default.createElement(_react3.FormattedMessage, {\n                  id: 'xpack.ml.ruleEditor.ruleEditorFlyout.conditionsTitle',\n                  defaultMessage: 'Conditions'\n                })\n              )\n            ),\n            _react2.default.createElement(_eui.EuiSpacer, { size: 's' }),\n            conditionSupported === true ? _react2.default.createElement(_eui.EuiCheckbox, {\n              id: 'enable_conditions_checkbox',\n              className: 'scope-enable-checkbox',\n              label: conditionsText,\n              checked: isConditionsEnabled,\n              onChange: this.onConditionsEnabledChange,\n              disabled: !conditionSupported || !hasPartitioningFields\n            }) : _react2.default.createElement(_eui.EuiCallOut, {\n              title: _react2.default.createElement(_react3.FormattedMessage, {\n                id: 'xpack.ml.ruleEditor.ruleEditorFlyout.conditionsNotSupportedTitle',\n                defaultMessage: 'Conditions are not supported for detectors using the {functionName} function',\n                values: { functionName: anomaly.source.function }\n              }),\n              iconType: 'iInCircle'\n            }),\n            _react2.default.createElement(_eui.EuiSpacer, { size: 's' }),\n            _react2.default.createElement(_conditions_section.ConditionsSection, {\n              isEnabled: isConditionsEnabled,\n              conditions: rule.conditions,\n              addCondition: this.addCondition,\n              updateCondition: this.updateCondition,\n              deleteCondition: this.deleteCondition\n            }),\n            _react2.default.createElement(_eui.EuiSpacer, { size: 'xl' }),\n            _react2.default.createElement(_scope_section.ScopeSection, {\n              isEnabled: isScopeEnabled,\n              onEnabledChange: this.onScopeEnabledChange,\n              partitioningFieldNames: this.partitioningFieldNames,\n              filterListIds: filterListIds,\n              scope: rule.scope,\n              updateScope: this.updateScope\n            }),\n            _react2.default.createElement(\n              _eui.EuiCallOut,\n              {\n                title: _react2.default.createElement(_react3.FormattedMessage, {\n                  id: 'xpack.ml.ruleEditor.ruleEditorFlyout.rerunJobTitle',\n                  defaultMessage: 'Rerun job'\n                }),\n                color: 'warning',\n                iconType: 'help'\n              },\n              _react2.default.createElement(\n                'p',\n                null,\n                _react2.default.createElement(_react3.FormattedMessage, {\n                  id: 'xpack.ml.ruleEditor.ruleEditorFlyout.whenChangesTakeEffectDescription',\n                  defaultMessage: 'Changes to rules take effect for new results only.'\n                })\n              ),\n              _react2.default.createElement(\n                'p',\n                null,\n                _react2.default.createElement(_react3.FormattedMessage, {\n                  id: 'xpack.ml.ruleEditor.ruleEditorFlyout.howToApplyChangesToExistingResultsDescription',\n                  defaultMessage: 'To apply these changes to existing results you must clone and rerun the job. Note rerunning the job may take some time and should only be done once you have completed all your changes to the rules for this job.'\n                })\n              )\n            )\n          ),\n          _react2.default.createElement(\n            _eui.EuiFlyoutFooter,\n            null,\n            _react2.default.createElement(\n              _eui.EuiFlexGroup,\n              { justifyContent: 'spaceBetween' },\n              _react2.default.createElement(\n                _eui.EuiFlexItem,\n                { grow: false },\n                _react2.default.createElement(\n                  _eui.EuiButtonEmpty,\n                  {\n                    iconType: 'cross',\n                    onClick: this.closeFlyout,\n                    flush: 'left'\n                  },\n                  _react2.default.createElement(_react3.FormattedMessage, {\n                    id: 'xpack.ml.ruleEditor.ruleEditorFlyout.closeButtonLabel',\n                    defaultMessage: 'Close'\n                  })\n                )\n              ),\n              _react2.default.createElement(\n                _eui.EuiFlexItem,\n                { grow: false },\n                _react2.default.createElement(\n                  _eui.EuiButton,\n                  {\n                    onClick: this.saveEdit,\n                    isDisabled: !(0, _utils.isValidRule)(rule),\n                    fill: true\n                  },\n                  _react2.default.createElement(_react3.FormattedMessage, {\n                    id: 'xpack.ml.ruleEditor.ruleEditorFlyout.saveButtonLabel',\n                    defaultMessage: 'Save'\n                  })\n                )\n              )\n            )\n          )\n        );\n      }\n\n      return _react2.default.createElement(\n        _react2.default.Fragment,\n        null,\n        flyout\n      );\n    }\n  }]);\n\n  return RuleEditorFlyout;\n}(_react.Component), _class.propTypes = {\n  setShowFunction: _propTypes2.default.func.isRequired,\n  unsetShowFunction: _propTypes2.default.func.isRequired\n}, _temp));",null]}