{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/public/lib/keymap.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/public/lib/keymap.js","mtime":1567631711933},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.keymap = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /*\n                                                                                                                                                                                                                                                                   * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                   * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                   * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                   */\n\nvar _lodash = require('lodash');\n\n// maps 'option' for mac and 'alt' for other OS\nvar getAltShortcuts = function getAltShortcuts(shortcuts) {\n  if (!Array.isArray(shortcuts)) {\n    shortcuts = [shortcuts];\n  }\n  var optionShortcuts = shortcuts.map(function (shortcut) {\n    return 'option+' + shortcut;\n  });\n  var altShortcuts = shortcuts.map(function (shortcut) {\n    return 'alt+' + shortcut;\n  });\n\n  return {\n    osx: optionShortcuts,\n    windows: altShortcuts,\n    linux: altShortcuts,\n    other: altShortcuts\n  };\n};\n\n// maps 'command' for mac and 'ctrl' for other OS\nvar getCtrlShortcuts = function getCtrlShortcuts(shortcuts) {\n  if (!Array.isArray(shortcuts)) {\n    shortcuts = [shortcuts];\n  }\n  var cmdShortcuts = shortcuts.map(function (shortcut) {\n    return 'command+' + shortcut;\n  });\n  var ctrlShortcuts = shortcuts.map(function (shortcut) {\n    return 'ctrl+' + shortcut;\n  });\n\n  return {\n    osx: cmdShortcuts,\n    windows: ctrlShortcuts,\n    linux: ctrlShortcuts,\n    other: ctrlShortcuts\n  };\n};\n\nvar refreshShortcut = _extends({}, getAltShortcuts('r'), { help: 'Refresh workpad' });\nvar previousPageShortcut = _extends({}, getAltShortcuts('['), { help: 'Go to previous page' });\nvar nextPageShortcut = _extends({}, getAltShortcuts(']'), { help: 'Go to next page' });\nvar deleteElementShortcuts = ['del', 'backspace'];\nvar groupShortcut = ['g'];\nvar ungroupShortcut = ['u'];\nvar fullscreentExitShortcut = ['esc'];\n\nvar keymap = exports.keymap = {\n  ELEMENT: {\n    displayName: 'Element controls',\n    COPY: _extends({}, getCtrlShortcuts('c'), { help: 'Copy' }),\n    CLONE: _extends({}, getCtrlShortcuts('d'), { help: 'Clone' }),\n    CUT: _extends({}, getCtrlShortcuts('x'), { help: 'Cut' }),\n    PASTE: _extends({}, getCtrlShortcuts('v'), { help: 'Paste' }),\n    DELETE: {\n      osx: deleteElementShortcuts,\n      windows: deleteElementShortcuts,\n      linux: deleteElementShortcuts,\n      other: deleteElementShortcuts,\n      help: 'Delete'\n    },\n    BRING_FORWARD: _extends({}, getCtrlShortcuts('up'), {\n      help: 'Send forward'\n    }),\n    BRING_TO_FRONT: _extends({}, getCtrlShortcuts('shift+up'), {\n      help: 'Send to front'\n    }),\n    SEND_BACKWARD: _extends({}, getCtrlShortcuts('down'), {\n      help: 'Send backward'\n    }),\n    SEND_TO_BACK: _extends({}, getCtrlShortcuts('shift+down'), {\n      help: 'Send to back'\n    }),\n    GROUP: {\n      osx: groupShortcut,\n      windows: groupShortcut,\n      linux: groupShortcut,\n      other: groupShortcut,\n      help: 'Group'\n    },\n    UNGROUP: {\n      osx: ungroupShortcut,\n      windows: ungroupShortcut,\n      linux: ungroupShortcut,\n      other: ungroupShortcut,\n      help: 'Ungroup'\n    }\n  },\n  EDITOR: {\n    displayName: 'Editor controls',\n    UNDO: _extends({}, getCtrlShortcuts('z'), { help: 'Undo last action' }),\n    REDO: _extends({}, getCtrlShortcuts('shift+z'), { help: 'Redo last action' }),\n    PREV: previousPageShortcut,\n    NEXT: nextPageShortcut,\n    EDITING: _extends({}, getAltShortcuts('e'), { help: 'Toggle edit mode' }),\n    GRID: _extends({}, getAltShortcuts('g'), { help: 'Show grid' }),\n    REFRESH: refreshShortcut\n  },\n  PRESENTATION: {\n    displayName: 'Presentation mode',\n    FULLSCREEN: _extends({}, getAltShortcuts(['p', 'f']), { help: 'Enter presentation mode' }),\n    FULLSCREEN_EXIT: {\n      osx: fullscreentExitShortcut,\n      windows: fullscreentExitShortcut,\n      linux: fullscreentExitShortcut,\n      other: fullscreentExitShortcut,\n      help: 'Exit presentation mode'\n    },\n    PREV: (0, _lodash.mapValues)(previousPageShortcut, function (osShortcuts, key) {\n      return key === 'help' ? osShortcuts : osShortcuts.concat(['backspace', 'left']);\n    }),\n    NEXT: (0, _lodash.mapValues)(nextPageShortcut, function (osShortcuts, key) {\n      return key === 'help' ? osShortcuts : osShortcuts.concat(['space', 'right']);\n    }),\n    REFRESH: refreshShortcut\n  }\n};",null]}