{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/services/ml_api_service/index.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/services/ml_api_service/index.js","mtime":1567631712062},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ml = undefined;\n\nvar _lodash = require('lodash');\n\nvar _chrome = require('ui/chrome');\n\nvar _chrome2 = _interopRequireDefault(_chrome);\n\nvar _http_service = require('../../services/http_service');\n\nvar _annotations = require('./annotations');\n\nvar _filters = require('./filters');\n\nvar _results = require('./results');\n\nvar _jobs = require('./jobs');\n\nvar _datavisualizer = require('./datavisualizer');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nvar basePath = _chrome2.default.addBasePath('/api/ml');\n\nvar ml = exports.ml = {\n  getJobs: function getJobs(obj) {\n    var jobId = obj && obj.jobId ? '/' + obj.jobId : '';\n    return (0, _http_service.http)({\n      url: basePath + '/anomaly_detectors' + jobId\n    });\n  },\n  getJobStats: function getJobStats(obj) {\n    var jobId = obj && obj.jobId ? '/' + obj.jobId : '';\n    return (0, _http_service.http)({\n      url: basePath + '/anomaly_detectors' + jobId + '/_stats'\n    });\n  },\n  addJob: function addJob(obj) {\n    return (0, _http_service.http)({\n      url: basePath + '/anomaly_detectors/' + obj.jobId,\n      method: 'PUT',\n      data: obj.job\n    });\n  },\n  openJob: function openJob(obj) {\n    return (0, _http_service.http)({\n      url: basePath + '/anomaly_detectors/' + obj.jobId + '/_open',\n      method: 'POST'\n    });\n  },\n  closeJob: function closeJob(obj) {\n    return (0, _http_service.http)({\n      url: basePath + '/anomaly_detectors/' + obj.jobId + '/_close',\n      method: 'POST'\n    });\n  },\n  deleteJob: function deleteJob(obj) {\n    return (0, _http_service.http)({\n      url: basePath + '/anomaly_detectors/' + obj.jobId,\n      method: 'DELETE'\n    });\n  },\n  forceDeleteJob: function forceDeleteJob(obj) {\n    return (0, _http_service.http)({\n      url: basePath + '/anomaly_detectors/' + obj.jobId + '?force=true',\n      method: 'DELETE'\n    });\n  },\n  updateJob: function updateJob(obj) {\n    return (0, _http_service.http)({\n      url: basePath + '/anomaly_detectors/' + obj.jobId + '/_update',\n      method: 'POST',\n      data: obj.job\n    });\n  },\n  estimateBucketSpan: function estimateBucketSpan(obj) {\n    return (0, _http_service.http)({\n      url: basePath + '/validate/estimate_bucket_span',\n      method: 'POST',\n      data: obj\n    });\n  },\n  validateJob: function validateJob(obj) {\n    return (0, _http_service.http)({\n      url: basePath + '/validate/job',\n      method: 'POST',\n      data: obj\n    });\n  },\n  validateCardinality: function validateCardinality(obj) {\n    return (0, _http_service.http)({\n      url: basePath + '/validate/cardinality',\n      method: 'POST',\n      data: obj\n    });\n  },\n  getDatafeeds: function getDatafeeds(obj) {\n    var datafeedId = obj && obj.datafeedId ? '/' + obj.datafeedId : '';\n    return (0, _http_service.http)({\n      url: basePath + '/datafeeds' + datafeedId\n    });\n  },\n  getDatafeedStats: function getDatafeedStats(obj) {\n    var datafeedId = obj && obj.datafeedId ? '/' + obj.datafeedId : '';\n    return (0, _http_service.http)({\n      url: basePath + '/datafeeds' + datafeedId + '/_stats'\n    });\n  },\n  addDatafeed: function addDatafeed(obj) {\n    return (0, _http_service.http)({\n      url: basePath + '/datafeeds/' + obj.datafeedId,\n      method: 'PUT',\n      data: obj.datafeedConfig\n    });\n  },\n  updateDatafeed: function updateDatafeed(obj) {\n    return (0, _http_service.http)({\n      url: basePath + '/datafeeds/' + obj.datafeedId + '/_update',\n      method: 'POST',\n      data: obj.datafeedConfig\n    });\n  },\n  deleteDatafeed: function deleteDatafeed(obj) {\n    return (0, _http_service.http)({\n      url: basePath + '/datafeeds/' + obj.datafeedId,\n      method: 'DELETE'\n    });\n  },\n  forceDeleteDatafeed: function forceDeleteDatafeed(obj) {\n    return (0, _http_service.http)({\n      url: basePath + '/datafeeds/' + obj.datafeedId + '?force=true',\n      method: 'DELETE'\n    });\n  },\n  startDatafeed: function startDatafeed(obj) {\n    var data = {};\n    if (obj.start !== undefined) {\n      data.start = obj.start;\n    }\n    if (obj.end !== undefined) {\n      data.end = obj.end;\n    }\n    return (0, _http_service.http)({\n      url: basePath + '/datafeeds/' + obj.datafeedId + '/_start',\n      method: 'POST',\n      data: data\n    });\n  },\n  stopDatafeed: function stopDatafeed(obj) {\n    return (0, _http_service.http)({\n      url: basePath + '/datafeeds/' + obj.datafeedId + '/_stop',\n      method: 'POST'\n    });\n  },\n  datafeedPreview: function datafeedPreview(obj) {\n    return (0, _http_service.http)({\n      url: basePath + '/datafeeds/' + obj.datafeedId + '/_preview',\n      method: 'GET'\n    });\n  },\n  validateDetector: function validateDetector(obj) {\n    return (0, _http_service.http)({\n      url: basePath + '/anomaly_detectors/_validate/detector',\n      method: 'POST',\n      data: obj.detector\n    });\n  },\n  forecast: function forecast(obj) {\n    var data = {};\n    if (obj.duration !== undefined) {\n      data.duration = obj.duration;\n    }\n\n    return (0, _http_service.http)({\n      url: basePath + '/anomaly_detectors/' + obj.jobId + '/_forecast',\n      method: 'POST',\n      data: data\n    });\n  },\n  overallBuckets: function overallBuckets(obj) {\n    var data = (0, _lodash.pick)(obj, ['topN', 'bucketSpan', 'start', 'end']);\n    return (0, _http_service.http)({\n      url: basePath + '/anomaly_detectors/' + obj.jobId + '/results/overall_buckets',\n      method: 'POST',\n      data: data\n    });\n  },\n  checkPrivilege: function checkPrivilege(obj) {\n    return (0, _http_service.http)({\n      url: basePath + '/_has_privileges',\n      method: 'POST',\n      data: obj\n    });\n  },\n  getNotificationSettings: function getNotificationSettings() {\n    return (0, _http_service.http)({\n      url: basePath + '/notification_settings',\n      method: 'GET'\n    });\n  },\n  getFieldCaps: function getFieldCaps(obj) {\n    var data = {};\n    if (obj.index !== undefined) {\n      data.index = obj.index;\n    }\n    if (obj.fields !== undefined) {\n      data.fields = obj.fields;\n    }\n    return (0, _http_service.http)({\n      url: basePath + '/indices/field_caps',\n      method: 'POST',\n      data: data\n    });\n  },\n  recognizeIndex: function recognizeIndex(obj) {\n    return (0, _http_service.http)({\n      url: basePath + '/modules/recognize/' + obj.indexPatternTitle,\n      method: 'GET'\n    });\n  },\n  getDataRecognizerModule: function getDataRecognizerModule(obj) {\n    return (0, _http_service.http)({\n      url: basePath + '/modules/get_module/' + obj.moduleId,\n      method: 'GET'\n    });\n  },\n  setupDataRecognizerConfig: function setupDataRecognizerConfig(obj) {\n    var data = (0, _lodash.pick)(obj, ['prefix', 'groups', 'indexPatternName', 'query', 'useDedicatedIndex']);\n\n    return (0, _http_service.http)({\n      url: basePath + '/modules/setup/' + obj.moduleId,\n      method: 'POST',\n      data: data\n    });\n  },\n  getVisualizerFieldStats: function getVisualizerFieldStats(obj) {\n    var data = (0, _lodash.pick)(obj, ['query', 'timeFieldName', 'earliest', 'latest', 'samplerShardSize', 'interval', 'fields', 'maxExamples']);\n\n    return (0, _http_service.http)({\n      url: basePath + '/data_visualizer/get_field_stats/' + obj.indexPatternTitle,\n      method: 'POST',\n      data: data\n    });\n  },\n  getVisualizerOverallStats: function getVisualizerOverallStats(obj) {\n    var data = (0, _lodash.pick)(obj, ['query', 'timeFieldName', 'earliest', 'latest', 'samplerShardSize', 'aggregatableFields', 'nonAggregatableFields']);\n\n    return (0, _http_service.http)({\n      url: basePath + '/data_visualizer/get_overall_stats/' + obj.indexPatternTitle,\n      method: 'POST',\n      data: data\n    });\n  },\n  calendars: function calendars(obj) {\n    var calendarId = obj && obj.calendarId ? '/' + obj.calendarId : '';\n    return (0, _http_service.http)({\n      url: basePath + '/calendars' + calendarId,\n      method: 'GET'\n    });\n  },\n  addCalendar: function addCalendar(obj) {\n    return (0, _http_service.http)({\n      url: basePath + '/calendars',\n      method: 'PUT',\n      data: obj\n    });\n  },\n  updateCalendar: function updateCalendar(obj) {\n    var calendarId = obj && obj.calendarId ? '/' + obj.calendarId : '';\n    return (0, _http_service.http)({\n      url: basePath + '/calendars' + calendarId,\n      method: 'PUT',\n      data: obj\n    });\n  },\n  deleteCalendar: function deleteCalendar(obj) {\n    return (0, _http_service.http)({\n      url: basePath + '/calendars/' + obj.calendarId,\n      method: 'DELETE'\n    });\n  },\n  mlNodeCount: function mlNodeCount() {\n    return (0, _http_service.http)({\n      url: basePath + '/ml_node_count',\n      method: 'GET'\n    });\n  },\n  mlInfo: function mlInfo() {\n    return (0, _http_service.http)({\n      url: basePath + '/info',\n      method: 'GET'\n    });\n  },\n  calculateModelMemoryLimit: function calculateModelMemoryLimit(obj) {\n    var data = (0, _lodash.pick)(obj, ['indexPattern', 'splitFieldName', 'query', 'fieldNames', 'influencerNames', 'timeFieldName', 'earliestMs', 'latestMs']);\n\n    return (0, _http_service.http)({\n      url: basePath + '/validate/calculate_model_memory_limit',\n      method: 'POST',\n      data: data\n    });\n  },\n  getCardinalityOfFields: function getCardinalityOfFields(obj) {\n    var data = (0, _lodash.pick)(obj, ['index', 'types', 'fieldNames', 'query', 'timeFieldName', 'earliestMs', 'latestMs']);\n\n    return (0, _http_service.http)({\n      url: basePath + '/fields_service/field_cardinality',\n      method: 'POST',\n      data: data\n    });\n  },\n  getTimeFieldRange: function getTimeFieldRange(obj) {\n    var data = (0, _lodash.pick)(obj, ['index', 'timeFieldName', 'query']);\n\n    return (0, _http_service.http)({\n      url: basePath + '/fields_service/time_field_range',\n      method: 'POST',\n      data: data\n    });\n  },\n  esSearch: function esSearch(obj) {\n    return (0, _http_service.http)({\n      url: basePath + '/es_search',\n      method: 'POST',\n      data: obj\n    });\n  },\n  getIndices: function getIndices() {\n    var tempBasePath = _chrome2.default.addBasePath('/api');\n    return (0, _http_service.http)({\n      url: tempBasePath + '/index_management/indices',\n      method: 'GET'\n    });\n  },\n\n\n  annotations: _annotations.annotations,\n  filters: _filters.filters,\n  results: _results.results,\n  jobs: _jobs.jobs,\n  fileDatavisualizer: _datavisualizer.fileDatavisualizer\n};",null]}