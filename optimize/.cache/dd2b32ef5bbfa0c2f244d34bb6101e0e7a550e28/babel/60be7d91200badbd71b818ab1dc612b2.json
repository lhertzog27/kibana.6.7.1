{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/watcher/public/sections/watch_edit/components/json_watch_edit/json_watch_edit.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/watcher/public/sections/watch_edit/components/json_watch_edit/json_watch_edit.js","mtime":1567631712347},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _modules = require('ui/modules');\n\nvar _compat = require('ui/compat');\n\nvar _notify = require('ui/notify');\n\nrequire('ui/dirty_prompt');\n\nvar _json_watch_edit = require('./json_watch_edit.html');\n\nvar _json_watch_edit2 = _interopRequireDefault(_json_watch_edit);\n\nrequire('plugins/watcher/components/kbn_tabs');\n\nrequire('plugins/watcher/components/watch_history_item_detail');\n\nrequire('../watch_edit_detail');\n\nrequire('../watch_edit_title_bar');\n\nrequire('../watch_edit_execute_info_panel');\n\nrequire('../watch_edit_execute_detail');\n\nrequire('../watch_edit_actions_execute_summary');\n\nrequire('../watch_edit_watch_execute_summary');\n\nrequire('plugins/watcher/services/license');\n\nvar _constants = require('../../../../../common/constants');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\nvar app = _modules.uiModules.get('xpack/watcher');\n\napp.directive('jsonWatchEdit', function ($injector, i18n) {\n  var watchService = $injector.get('xpackWatcherWatchService');\n  var licenseService = $injector.get('xpackWatcherLicenseService');\n  var kbnUrl = $injector.get('kbnUrl');\n  var confirmModal = $injector.get('confirmModal');\n  // const dirtyPrompt = $injector.get('dirtyPrompt');\n\n  return {\n    restrict: 'E',\n    template: _json_watch_edit2.default,\n    scope: {\n      watch: '=xpackWatch' // Property names differ due to https://git.io/vSWXV\n    },\n    bindToController: true,\n    controllerAs: 'jsonWatchEdit',\n    controller: function (_InitAfterBindingsWor) {\n      _inherits(JsonWatchEditController, _InitAfterBindingsWor);\n\n      function JsonWatchEditController() {\n        var _ref;\n\n        var _temp, _this, _ret;\n\n        _classCallCheck(this, JsonWatchEditController);\n\n        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = JsonWatchEditController.__proto__ || Object.getPrototypeOf(JsonWatchEditController)).call.apply(_ref, [this].concat(args))), _this), _this.onTabSelect = function (tabId) {\n          _this.selectedTabId = tabId;\n        }, _this.isTabSelected = function (tabId) {\n          return _this.selectedTabId === tabId;\n        }, _this.onWatchChange = function (watch) {\n          _this.watch = watch;\n        }, _this.onValid = function () {\n          _this.isValid = true;\n        }, _this.onInvalid = function () {\n          _this.isValid = false;\n        }, _this.executeDetailsChange = function (executeDetails) {\n          _this.executeDetails = executeDetails;\n        }, _this.onExecuteDetailsValid = function () {\n          _this.isExecuteValid = true;\n        }, _this.onExecuteDetailsInvalid = function () {\n          _this.isExecuteValid = false;\n        }, _this.onWatchExecute = function () {\n          return watchService.executeWatch(_this.executeDetails, _this.watch).then(function (watchHistoryItem) {\n            _this.simulateResults = watchHistoryItem;\n            _this.onTabSelect('simulate-results');\n          }).catch(function (e) {\n            _notify.toastNotifications.addDanger(e);\n          });\n        }, _this.onWatchSave = function () {\n          _this.createActionsForWatch(_this.watch);\n\n          if (!_this.watch.isNew) {\n            return _this.validateAndSaveWatch();\n          }\n\n          return _this.isExistingWatch().then(function (existingWatch) {\n            if (!existingWatch) {\n              return _this.validateAndSaveWatch();\n            }\n\n            var confirmModalOptions = {\n              onConfirm: _this.saveWatch,\n              confirmButtonText: i18n('xpack.watcher.sections.watchEdit.json.saveConfirmModal.overwriteWatchButtonLabel', {\n                defaultMessage: 'Overwrite Watch'\n              })\n            };\n\n            var message = i18n('xpack.watcher.sections.watchEdit.json.saveConfirmModal.description', {\n              defaultMessage: 'Watch with ID \"{watchId}\" {watchNameMessageFragment} already exists. Do you want to overwrite it?',\n              values: {\n                watchId: _this.watch.id,\n                watchNameMessageFragment: existingWatch.name ? i18n('xpack.watcher.sections.watchEdit.json.saveConfirmModal.descriptionFragmentText', {\n                  defaultMessage: '(name: \"{existingWatchName}\")',\n                  values: {\n                    existingWatchName: existingWatch.name\n                  }\n                }) : ''\n              }\n            });\n            return confirmModal(message, confirmModalOptions);\n          }).catch(function (err) {\n            return _notify.toastNotifications.addDanger(err);\n          });\n        }, _this.isExistingWatch = function () {\n          return watchService.loadWatch(_this.watch.id).then(function (existingWatch) {\n            return existingWatch;\n          }).catch(function (err) {\n            return licenseService.checkValidity().then(function () {\n              if (err.status === 404) {\n                return false;\n              }\n              throw err;\n            });\n          });\n        }, _this.validateAndSaveWatch = function () {\n          var _this$watch$validate = _this.watch.validate(),\n              warning = _this$watch$validate.warning;\n\n          if (warning) {\n            var confirmModalOptions = {\n              onConfirm: _this.saveWatch,\n              confirmButtonText: i18n('xpack.watcher.sections.watchEdit.json.watchErrorsWarning.confirmSaveWatch', {\n                defaultMessage: 'Save watch'\n              })\n            };\n\n            return confirmModal(warning.message, confirmModalOptions);\n          }\n\n          return _this.saveWatch();\n        }, _this.saveWatch = function () {\n          return watchService.saveWatch(_this.watch).then(function () {\n            _this.watch.isNew = false; // without this, the message displays 'New Watch'\n            _notify.toastNotifications.addSuccess(i18n('xpack.watcher.sections.watchEdit.json.saveSuccessNotificationText', {\n              defaultMessage: 'Saved \\'{watchDisplayName}\\'',\n              values: {\n                watchDisplayName: _this.watch.displayName\n              }\n            }));\n            _this.onClose();\n          }).catch(function (err) {\n            return licenseService.checkValidity().then(function () {\n              return _notify.toastNotifications.addDanger(err);\n            });\n          });\n        }, _this.onWatchDelete = function () {\n          var confirmModalOptions = {\n            onConfirm: _this.deleteWatch,\n            confirmButtonText: i18n('xpack.watcher.sections.watchEdit.json.deleteConfirmModal.overwriteWatchButtonLabel', {\n              defaultMessage: 'Delete Watch'\n            })\n          };\n\n          return confirmModal(i18n('xpack.watcher.sections.watchEdit.json.deleteConfirmModal.description', {\n            defaultMessage: 'This will permanently delete the watch. Are you sure?'\n          }), confirmModalOptions);\n        }, _this.deleteWatch = function () {\n          return watchService.deleteWatch(_this.watch.id).then(function () {\n            _notify.toastNotifications.addSuccess(i18n('xpack.watcher.sections.watchEdit.json.deleteSuccessNotificationText', {\n              defaultMessage: 'Deleted \\'{watchDisplayName}\\'',\n              values: {\n                watchDisplayName: _this.watch.displayName\n              }\n            }));\n            _this.onClose();\n          }).catch(function (err) {\n            return licenseService.checkValidity().then(function () {\n              return _notify.toastNotifications.addDanger(err);\n            });\n          });\n        }, _this.onClose = function () {\n          // dirtyPrompt.deregister();\n          kbnUrl.change('/management/elasticsearch/watcher/watches', {});\n        }, _temp), _possibleConstructorReturn(_this, _ret);\n      }\n\n      _createClass(JsonWatchEditController, [{\n        key: 'initAfterBindings',\n        value: function initAfterBindings() {\n          this.selectedTabId = 'edit-watch';\n          this.simulateResults = null;\n          this.originalWatch = _extends({}, this.watch);\n\n          this.omitBreadcrumbPages = ['new-watch', this.watch.id];\n          this.breadcrumb = this.watch.displayName;\n\n          // dirtyPrompt.register(() => !this.watch.isEqualTo(this.originalWatch));\n          // $scope.$on('$destroy', dirtyPrompt.deregister);\n\n          this.onExecuteDetailsValid();\n        }\n      }, {\n        key: 'createActionsForWatch',\n\n\n        /**\n         * Actions instances are not automatically added to the Watch _actions_ Array\n         * when we add them in the Json editor. This method takes takes care of it.\n         *\n         * @param watchModel Watch instance\n         * @return Watch instance\n         */\n        value: function createActionsForWatch(watchInstance) {\n          var _this2 = this;\n\n          watchInstance.resetActions();\n\n          var action = void 0;\n          var type = void 0;\n          var actionProps = void 0;\n\n          Object.keys(watchInstance.watch.actions).forEach(function (k) {\n            action = watchInstance.watch.actions[k];\n            type = _this2.getTypeFromAction(action);\n            actionProps = _this2.getPropsFromAction(type, action);\n\n            watchInstance.createAction(type, actionProps);\n          });\n\n          return watchInstance;\n        }\n\n        /**\n         * Get the type from an action where a key defines its type.\n         * eg: { email: { ... } } | { slack: { ... } }\n         *\n         * @param action A raw action object\n         * @return {string} The action type\n         */\n\n      }, {\n        key: 'getTypeFromAction',\n        value: function getTypeFromAction(action) {\n          var actionKeys = Object.keys(action);\n          var type = void 0;\n\n          Object.keys(_constants.ACTION_TYPES).forEach(function (k) {\n            if (actionKeys.includes(_constants.ACTION_TYPES[k])) {\n              type = _constants.ACTION_TYPES[k];\n            }\n          });\n\n          return type ? type : _constants.ACTION_TYPES.UNKNOWN;\n        }\n      }, {\n        key: 'getPropsFromAction',\n        value: function getPropsFromAction(type, action) {\n          if (type === _constants.ACTION_TYPES.SLACK) {\n            // Slack action has its props inside the \"message\" object\n            return action[type].message;\n          }\n          return action[type];\n        }\n      }]);\n\n      return JsonWatchEditController;\n    }(_compat.InitAfterBindingsWorkaround)\n  };\n});",null]}