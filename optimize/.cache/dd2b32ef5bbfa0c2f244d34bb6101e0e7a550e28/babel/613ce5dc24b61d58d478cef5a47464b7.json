{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/remote_clusters/public/index.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/remote_clusters/public/index.js","mtime":1567631712121},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = require('react-dom');\n\nvar _reactRedux = require('react-redux');\n\nvar _reactRouterDom = require('react-router-dom');\n\nvar _i18n = require('ui/i18n');\n\nvar _management = require('ui/management');\n\nvar _routes = require('ui/routes');\n\nvar _routes2 = _interopRequireDefault(_routes);\n\nvar _chrome = require('ui/chrome');\n\nvar _chrome2 = _interopRequireDefault(_chrome);\n\nvar _constants = require('./constants');\n\nvar _services = require('./services');\n\nvar _app = require('./app');\n\nvar _main = require('./main.html');\n\nvar _main2 = _interopRequireDefault(_main);\n\nvar _store = require('./store');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            */\n\nif (_chrome2.default.getInjected('remoteClustersUiEnabled')) {\n  var esSection = _management.management.getSection('elasticsearch');\n\n  esSection.register('remote_clusters', {\n    visible: true,\n    display: 'Remote Clusters',\n    order: 5,\n    url: '#' + _constants.CRUD_APP_BASE_PATH + '/list'\n  });\n\n  var appElement = void 0;\n\n  var renderReact = function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(elem) {\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              (0, _reactDom.render)(_react2.default.createElement(\n                _i18n.I18nContext,\n                null,\n                _react2.default.createElement(\n                  _reactRedux.Provider,\n                  { store: _store.remoteClustersStore },\n                  _react2.default.createElement(\n                    _reactRouterDom.HashRouter,\n                    null,\n                    _react2.default.createElement(_app.App, null)\n                  )\n                )\n              ), elem);\n\n            case 1:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, undefined);\n    }));\n\n    return function renderReact(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  _routes2.default.when(_constants.CRUD_APP_BASE_PATH + '/:view?/:id?', {\n    template: _main2.default,\n    controllerAs: 'remoteClusters',\n    controller: function RemoteClustersController($scope, $route, $http, kbnUrl) {\n      _classCallCheck(this, RemoteClustersController);\n\n      if (appElement) {\n        // React-router's <Redirect> will cause this controller to re-execute without the $destroy\n        // handler being called. This means the app will re-mount, so we need to unmount it first\n        // here.\n        (0, _reactDom.unmountComponentAtNode)(appElement);\n      }\n\n      // NOTE: We depend upon Angular's $http service because it's decorated with interceptors,\n      // e.g. to check license status per request.\n      (0, _services.setHttpClient)($http);\n\n      (0, _services.setRedirect)(function (path) {\n        $scope.$evalAsync(function () {\n          kbnUrl.redirect(path);\n        });\n      });\n\n      // If returning to the app, we'll need to reset this state.\n      (0, _services.setUserHasLeftApp)(false);\n\n      $scope.$$postDigest(function () {\n        appElement = document.getElementById('remoteClustersReactRoot');\n        renderReact(appElement);\n\n        var appRoute = $route.current;\n        var stopListeningForLocationChange = $scope.$on('$locationChangeSuccess', function () {\n          var currentRoute = $route.current;\n          var isNavigationInApp = currentRoute.$$route.template === appRoute.$$route.template;\n\n          // When we navigate within rollups, prevent Angular from re-matching the route and\n          // rebuilding the app.\n          if (isNavigationInApp) {\n            $route.current = appRoute;\n          } else {\n            // Set internal flag so we can prevent reacting to the route change internally.\n            (0, _services.setUserHasLeftApp)(true);\n          }\n        });\n\n        $scope.$on('$destroy', function () {\n          stopListeningForLocationChange();\n          (0, _reactDom.unmountComponentAtNode)(appElement);\n        });\n      });\n    }\n  });\n}",null]}