{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/public/state/middleware/workpad_refresh.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/public/state/middleware/workpad_refresh.js","mtime":1567631711935},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.workpadRefresh = undefined;\n\nvar _elements = require('../actions/elements');\n\nvar _workpad = require('../actions/workpad');\n\nvar _resolved_args = require('../actions/resolved_args');\n\nvar _resolved_args2 = require('../selectors/resolved_args');\n\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nvar workpadRefresh = exports.workpadRefresh = function workpadRefresh(_ref) {\n  var dispatch = _ref.dispatch,\n      getState = _ref.getState;\n  return function (next) {\n    var refreshTimeout = void 0;\n    var refreshInterval = 0;\n\n    function updateWorkpad() {\n      if (refreshInterval === 0) {\n        return;\n      }\n\n      // check the request in flight status\n      var inFlightActive = (0, _resolved_args2.getInFlight)(getState());\n      if (inFlightActive) {\n        // if requests are in-flight, start the refresh delay again\n        startDelayedUpdate();\n      } else {\n        // update the elements on the workpad\n        dispatch((0, _elements.fetchAllRenderables)());\n      }\n    }\n\n    function startDelayedUpdate() {\n      clearTimeout(refreshTimeout); // cancel any pending update requests\n      refreshTimeout = setTimeout(function () {\n        updateWorkpad();\n      }, refreshInterval);\n    }\n\n    return function (action) {\n      next(action);\n\n      // when in-flight requests are finished, update the workpad after a given delay\n      if (action.type === _resolved_args.inFlightComplete.toString() && refreshInterval > 0) {\n        startDelayedUpdate();\n      } // create new update request\n\n      // This middleware creates or destroys an interval that will cause workpad elements to update\n      if (action.type === _workpad.setRefreshInterval.toString()) {\n        // update the refresh interval\n        refreshInterval = action.payload;\n\n        // clear any pending timeout\n        clearTimeout(refreshTimeout);\n\n        // if interval is larger than 0, start the delayed update\n        if (refreshInterval > 0) {\n          startDelayedUpdate();\n        }\n      }\n    };\n  };\n};",null]}