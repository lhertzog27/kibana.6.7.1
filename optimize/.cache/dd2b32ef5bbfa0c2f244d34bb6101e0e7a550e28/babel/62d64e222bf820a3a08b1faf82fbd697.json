{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/index_management/public/services/sort_table.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/index_management/public/services/sort_table.js","mtime":1567631711973},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sortTable = undefined;\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }(); /*\nopyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\nor more contributor license agreements. Licensed under the Elastic License;\nyou may not use this file except in compliance with the Elastic License.\nn\nvar _lodash = require('lodash');\n\nvar stringSort = function stringSort(fieldName) {\n  return function (item) {\n    return item[fieldName];\n  };\n};\nvar numericSort = function numericSort(fieldName) {\n  return function (item) {\n    return +item[fieldName];\n  };\n};\nvar unitMagnitude = {\n  kb: 1,\n  mb: 2,\n  gb: 3,\n  tb: 4,\n  pb: 5\n};\nvar byteSort = function byteSort(fieldName) {\n  return function (item) {\n    var rawValue = item[fieldName];\n    // raw value can be missing if index is closed\n    if (!rawValue) {\n      return 0;\n    }\n    var matchResult = rawValue.match(/(.*)([kmgtp]b)/);\n    if (!matchResult) {\n      return 0;\n    }\n\n    var _matchResult = _slicedToArray(matchResult, 3),\n        number = _matchResult[1],\n        unit = _matchResult[2];\n\n    return +number * Math.pow(1024, unitMagnitude[unit]);\n  };\n};\n\nvar sorters = {\n  name: stringSort('name'),\n  status: stringSort('status'),\n  health: stringSort('health'),\n  primary: numericSort('primary'),\n  replica: numericSort('replica'),\n  documents: numericSort('documents'),\n  size: byteSort('size'),\n  primary_size: byteSort('primary_size')\n};\nvar sortTable = exports.sortTable = function sortTable() {\n  var array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var sortField = arguments[1];\n  var isSortAscending = arguments[2];\n\n  var sorted = (0, _lodash.sortBy)(array, sorters[sortField]);\n  return isSortAscending ? sorted : sorted.reverse();\n};",null]}