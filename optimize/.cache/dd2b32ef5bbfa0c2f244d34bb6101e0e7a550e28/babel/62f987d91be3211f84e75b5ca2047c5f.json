{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/watcher/public/components/expression_builder/components/expression_item/expression_item.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/watcher/public/components/expression_builder/components/expression_item/expression_item.js","mtime":1567631712337},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nvar _modules = require('ui/modules');\n\nvar _key_map = require('ui/utils/key_map');\n\nvar _expression_item = require('./expression_item.html');\n\nvar _expression_item2 = _interopRequireDefault(_expression_item);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } } /*\n                                                                                                                                                           * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                           * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                           * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                           */\n\nvar app = _modules.uiModules.get('xpack/watcher');\n\napp.directive('expressionItem', function ($injector) {\n  var $document = $injector.get('$document');\n  var $timeout = $injector.get('$timeout');\n\n  return {\n    restrict: 'E',\n    replace: true,\n    require: '^expressionBuilder',\n    transclude: true,\n    template: _expression_item2.default,\n    scope: {\n      itemId: '@',\n      description: '=',\n      value: '=',\n      isOpen: '=',\n      isVisible: '=',\n      onOpen: '=',\n      onClose: '=',\n      isValid: '=',\n      isDirty: '=',\n      form: '='\n    },\n    bindToController: true,\n    controllerAs: 'expressionItem',\n    link: function link($scope, $el) {\n      $scope.expressionItem.$firstInput = $el.find('[data-id=\"expressionItemPopoverContent\"]').find(':input:first');\n      var $button = $el.find('[data-id=\"expressionItemButton\"]');\n\n      var buttonFocusOrClick = function buttonFocusOrClick() {\n        $scope.$apply(function () {\n          $scope.expressionItem.onPopoverOpen();\n        });\n      };\n\n      var documentClick = function documentClick(event) {\n        if ($el.find(event.originalEvent.target).length === 0) {\n          $scope.$apply(function () {\n            $scope.expressionItem.onPopoverClose();\n          });\n        }\n      };\n\n      var documentKeydown = function documentKeydown(event) {\n        if ($scope.expressionItem.isOpen && _key_map.keyMap[event.keyCode] === 'escape') {\n          $scope.$apply(function () {\n            $scope.expressionItem.onPopoverClose();\n          });\n        }\n      };\n\n      $button.on('focus', buttonFocusOrClick);\n      $button.on('click', buttonFocusOrClick);\n      $document.on('click', documentClick);\n      $document.on('keydown', documentKeydown);\n      $scope.$on('$destroy', function () {\n        $button.off('focus', buttonFocusOrClick);\n        $button.off('click', buttonFocusOrClick);\n        $document.off('click', documentClick);\n        $document.off('keydown', documentKeydown);\n      });\n    },\n    controller: function ExpressionItemController($scope) {\n      var _this = this;\n\n      _classCallCheck(this, ExpressionItemController);\n\n      this.onPopoverClose = function () {\n        _this.onClose(_this.itemId);\n      };\n\n      this.onPopoverOpen = function () {\n        _this.onOpen(_this.itemId);\n      };\n\n      $scope.$watch('expressionItem.isOpen', function (isOpen, wasOpen) {\n        if (isOpen) {\n          $timeout(function () {\n            $scope.expressionItem.$firstInput.focus();\n          });\n        } else if (wasOpen) {\n          _this.form.$setTouched(true);\n          _this.form.$setDirty(true);\n        }\n      });\n    }\n  };\n});",null]}