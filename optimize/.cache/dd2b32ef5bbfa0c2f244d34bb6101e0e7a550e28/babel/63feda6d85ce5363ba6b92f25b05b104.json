{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/rollup/public/visualize/agg_type_filter.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/rollup/public/visualize/agg_type_filter.js","mtime":1567631712292},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.initAggTypeFilter = initAggTypeFilter;\n\nvar _filter = require('ui/agg_types/filter');\n\nfunction initAggTypeFilter() {\n  /**\n   * If rollup index pattern, check its capabilities\n   * and limit available aggregations based on that.\n   */\n  _filter.aggTypeFilters.addFilter(function (aggType, indexPattern) {\n    if (indexPattern.type !== 'rollup') {\n      return true;\n    }\n    var aggName = aggType.name;\n    var aggs = indexPattern.typeMeta && indexPattern.typeMeta.aggs;\n\n    // Return doc_count (which is collected by default for rollup date histogram, histogram, and terms)\n    // and the rest of the defined metrics from capabilities.\n    return aggName === 'count' || Object.keys(aggs).includes(aggName);\n  });\n} /*\n  * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n  * or more contributor license agreements. Licensed under the Elastic License;\n  * you may not use this file except in compliance with the Elastic License.\n  */",null]}