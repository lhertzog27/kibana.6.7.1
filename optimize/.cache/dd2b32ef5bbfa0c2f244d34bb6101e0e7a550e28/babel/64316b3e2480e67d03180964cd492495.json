{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/xpack_main/public/hacks/welcome_banner/should_show_banner.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/xpack_main/public/hacks/welcome_banner/should_show_banner.js","mtime":1567631712359},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.shouldShowBanner = undefined;\n\n/**\n * Determine if the banner should be displayed.\n *\n * This method can have side-effects related to deprecated config settings.\n *\n * @param {Object} config The advanced settings config object.\n * @param {Object} _handleOldSettings handleOldSettings function, but overridable for tests.\n * @return {Boolean} {@code true} if the banner should be displayed. {@code false} otherwise.\n */\nvar shouldShowBanner = exports.shouldShowBanner = function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(telemetryOptInProvider, config) {\n    var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n        _ref2$_handleOldSetti = _ref2._handleOldSettings,\n        _handleOldSettings = _ref2$_handleOldSetti === undefined ? _handle_old_settings.handleOldSettings : _ref2$_handleOldSetti;\n\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.t0 = telemetryOptInProvider.getOptIn() === null;\n\n            if (!_context.t0) {\n              _context.next = 5;\n              break;\n            }\n\n            _context.next = 4;\n            return _handleOldSettings(config, telemetryOptInProvider);\n\n          case 4:\n            _context.t0 = _context.sent;\n\n          case 5:\n            return _context.abrupt('return', _context.t0);\n\n          case 6:\n          case 'end':\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n\n  return function shouldShowBanner(_x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar _handle_old_settings = require('./handle_old_settings');\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            */",null]}