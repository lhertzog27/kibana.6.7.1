{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/watcher/public/sections/watch_edit/watch_edit_route.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/watcher/public/sections/watch_edit/watch_edit_route.js","mtime":1567631712349},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nvar _routes = require('ui/routes');\n\nvar _routes2 = _interopRequireDefault(_routes);\n\nrequire('ui/url');\n\nvar _notify = require('ui/notify');\n\nvar _watch_edit_route = require('./watch_edit_route.html');\n\nvar _watch_edit_route2 = _interopRequireDefault(_watch_edit_route);\n\nrequire('plugins/watcher/services/watch');\n\nrequire('./components/json_watch_edit');\n\nrequire('./components/threshold_watch_edit');\n\nvar _constants = require('plugins/watcher/../common/constants');\n\nvar _update_management_sections = require('plugins/watcher/lib/update_management_sections');\n\nrequire('plugins/watcher/services/license');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } } /*\n                                                                                                                                                           * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                           * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                           * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                           */\n\n_routes2.default.when('/management/elasticsearch/watcher/watches/watch/:id/edit').when('/management/elasticsearch/watcher/watches/new-watch/:watchType').defaults(/management\\/elasticsearch\\/watcher\\/watches\\/(new-watch\\/:watchType|watch\\/:id\\/edit)/, {\n  template: _watch_edit_route2.default,\n  controller: function WatchEditRouteController($injector) {\n    _classCallCheck(this, WatchEditRouteController);\n\n    var $route = $injector.get('$route');\n    this.watch = $route.current.locals.xpackWatch;\n    this.WATCH_TYPES = _constants.WATCH_TYPES;\n  },\n  controllerAs: 'watchEditRoute',\n  resolve: {\n    watchTabs: function watchTabs($injector) {\n      var $route = $injector.get('$route');\n      var watchId = $route.current.params.id;\n      (0, _update_management_sections.updateWatchSections)(watchId);\n    },\n    xpackWatch: function xpackWatch($injector) {\n      var $route = $injector.get('$route');\n      var watchService = $injector.get('xpackWatcherWatchService');\n      var licenseService = $injector.get('xpackWatcherLicenseService');\n      var kbnUrl = $injector.get('kbnUrl');\n\n      var watchId = $route.current.params.id;\n      var watchType = $route.current.params.watchType;\n\n      if (!watchId) {\n        return licenseService.refreshLicense().then(function () {\n          return watchService.newWatch(watchType);\n        }).catch(function (err) {\n          return licenseService.checkValidity().then(function () {\n            if (err.status !== 403) {\n              _notify.toastNotifications.addDanger(err.data.message);\n            }\n\n            kbnUrl.redirect('/management/elasticsearch/watcher/watches');\n            return Promise.reject();\n          });\n        });\n      }\n\n      return watchService.loadWatch(watchId).catch(function (err) {\n        return licenseService.checkValidity().then(function () {\n          if (err.status !== 403) {\n            _notify.toastNotifications.addDanger(err.data.message);\n          }\n\n          kbnUrl.redirect('/management/elasticsearch/watcher/watches');\n          return Promise.reject();\n        });\n      });\n    },\n    checkLicense: function checkLicense($injector) {\n      var licenseService = $injector.get('xpackWatcherLicenseService');\n      return licenseService.checkValidity();\n    }\n  }\n});",null]}