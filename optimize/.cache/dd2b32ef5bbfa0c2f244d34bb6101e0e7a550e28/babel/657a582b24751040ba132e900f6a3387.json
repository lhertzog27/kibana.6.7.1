{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/public/lib/find_expression_type.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/public/lib/find_expression_type.js","mtime":1567631711933},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.findExpressionType = findExpressionType;\n\nvar _datasource = require('../expression_types/datasource');\n\nvar _transform = require('../expression_types/transform');\n\nvar _model = require('../expression_types/model');\n\nvar _view = require('../expression_types/view');\n\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nvar expressionTypes = ['view', 'model', 'transform', 'datasource'];\n\nfunction findExpressionType(name, type) {\n  var checkTypes = expressionTypes.filter(function (expressionType) {\n    return type == null || expressionType === type;\n  });\n\n  var matches = checkTypes.reduce(function (acc, checkType) {\n    var expression = void 0;\n    switch (checkType) {\n      case 'view':\n        expression = _view.viewRegistry.get(name);\n        return !expression ? acc : acc.concat(expression);\n      case 'model':\n        expression = _model.modelRegistry.get(name);\n        return !expression ? acc : acc.concat(expression);\n      case 'transform':\n        expression = _transform.transformRegistry.get(name);\n        return !expression ? acc : acc.concat(expression);\n      case 'datasource':\n        expression = _datasource.datasourceRegistry.get(name);\n        return !expression ? acc : acc.concat(expression);\n      default:\n        return acc;\n    }\n  }, []);\n\n  if (matches.length > 1) {\n    throw new Error('Found multiple expressions with name \"' + name + '\"');\n  }\n  return matches[0] || null;\n}",null]}