{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/kuery_autocomplete/public/autocomplete_providers/operator.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/kuery_autocomplete/public/autocomplete_providers/operator.js","mtime":1567631712000},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getSuggestionsProvider = getSuggestionsProvider;\n\nvar _i18n = require('@kbn/i18n');\n\nvar _lodash = require('lodash');\n\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nvar type = 'operator';\n\nvar equalsText = _i18n.i18n.translate('xpack.kueryAutocomplete.equalOperatorDescription.equalsText', {\n  defaultMessage: 'equals',\n  description: 'Part of xpack.kueryAutocomplete.equalOperatorDescription. Full text: \"equals some value\"'\n});\nvar lessThanOrEqualToText = _i18n.i18n.translate('xpack.kueryAutocomplete.lessThanOrEqualOperatorDescription.lessThanOrEqualToText', {\n  defaultMessage: 'less than or equal to',\n  description: 'Part of xpack.kueryAutocomplete.lessThanOrEqualOperatorDescription. Full text: \"is less than or equal to some value\"'\n});\nvar greaterThanOrEqualToText = _i18n.i18n.translate('xpack.kueryAutocomplete.greaterThanOrEqualOperatorDescription.greaterThanOrEqualToText', {\n  defaultMessage: 'greater than or equal to',\n  description: 'Part of xpack.kueryAutocomplete.greaterThanOrEqualOperatorDescription. Full text: \"is greater than or equal to some value\"'\n});\nvar lessThanText = _i18n.i18n.translate('xpack.kueryAutocomplete.lessThanOperatorDescription.lessThanText', {\n  defaultMessage: 'less than',\n  description: 'Part of xpack.kueryAutocomplete.lessThanOperatorDescription. Full text: \"is less than some value\"'\n});\nvar greaterThanText = _i18n.i18n.translate('xpack.kueryAutocomplete.greaterThanOperatorDescription.greaterThanText', {\n  defaultMessage: 'greater than',\n  description: 'Part of xpack.kueryAutocomplete.greaterThanOperatorDescription. Full text: \"is greater than some value\"'\n});\nvar existsText = _i18n.i18n.translate('xpack.kueryAutocomplete.existOperatorDescription.existsText', {\n  defaultMessage: 'exists',\n  description: 'Part of xpack.kueryAutocomplete.existOperatorDescription. Full text: \"exists in any form\"'\n});\n\nvar operators = {\n  ':': {\n    description: _i18n.i18n.translate('xpack.kueryAutocomplete.equalOperatorDescription', {\n      defaultMessage: '{equals} some value',\n      values: { equals: '<span class=\"kbnSuggestionItem__callout\">' + equalsText + '</span>' },\n      description: 'Full text: \"equals some value\". See ' + 'xpack.kueryAutocomplete.equalOperatorDescription.equalsText for \"equals\" part.'\n    }),\n    fieldTypes: ['string', 'number', 'date', 'ip', 'geo_point', 'geo_shape', 'boolean']\n  },\n  '<=': {\n    description: _i18n.i18n.translate('xpack.kueryAutocomplete.lessThanOrEqualOperatorDescription', {\n      defaultMessage: 'is {lessThanOrEqualTo} some value',\n      values: { lessThanOrEqualTo: '<span class=\"kbnSuggestionItem__callout\">' + lessThanOrEqualToText + '</span>' },\n      description: 'Full text: \"is less than or equal to some value\". See ' + 'xpack.kueryAutocomplete.lessThanOrEqualOperatorDescription.lessThanOrEqualToText for \"less than or equal to\" part.'\n    }),\n    fieldTypes: ['number', 'date', 'ip']\n  },\n  '>=': {\n    description: _i18n.i18n.translate('xpack.kueryAutocomplete.greaterThanOrEqualOperatorDescription', {\n      defaultMessage: 'is {greaterThanOrEqualTo} some value',\n      values: { greaterThanOrEqualTo: '<span class=\"kbnSuggestionItem__callout\">' + greaterThanOrEqualToText + '</span>' },\n      description: 'Full text: \"is greater than or equal to some value\". See ' + 'xpack.kueryAutocomplete.greaterThanOrEqualOperatorDescription.greaterThanOrEqualToText for \"greater than or equal to\" part.'\n    }),\n    fieldTypes: ['number', 'date', 'ip']\n  },\n  '<': {\n    description: _i18n.i18n.translate('xpack.kueryAutocomplete.lessThanOperatorDescription', {\n      defaultMessage: 'is {lessThan} some value',\n      values: { lessThan: '<span class=\"kbnSuggestionItem__callout\">' + lessThanText + '</span>' },\n      description: 'Full text: \"is less than some value\". See ' + 'xpack.kueryAutocomplete.lessThanOperatorDescription.lessThanText for \"less than\" part.'\n    }),\n    fieldTypes: ['number', 'date', 'ip']\n  },\n  '>': {\n    description: _i18n.i18n.translate('xpack.kueryAutocomplete.greaterThanOperatorDescription', {\n      defaultMessage: 'is {greaterThan} some value',\n      values: { greaterThan: '<span class=\"kbnSuggestionItem__callout\">' + greaterThanText + '</span>' },\n      description: 'Full text: \"is greater than some value\". See ' + 'xpack.kueryAutocomplete.greaterThanOperatorDescription.greaterThanText for \"greater than\" part.'\n    }),\n    fieldTypes: ['number', 'date', 'ip']\n  },\n  ':*': {\n    description: _i18n.i18n.translate('xpack.kueryAutocomplete.existOperatorDescription', {\n      defaultMessage: '{exists} in any form',\n      values: { exists: '<span class=\"kbnSuggestionItem__callout\">' + existsText + '</span>' },\n      description: 'Full text: \"exists in any form\". See ' + 'xpack.kueryAutocomplete.existOperatorDescription.existsText for \"exists\" part.'\n    })\n  }\n};\n\nfunction getDescription(operator) {\n  var description = operators[operator].description;\n\n  return '<p>' + description + '</p>';\n}\n\nfunction getSuggestionsProvider(_ref) {\n  var indexPatterns = _ref.indexPatterns;\n\n  var allFields = (0, _lodash.flatten)(indexPatterns.map(function (indexPattern) {\n    return indexPattern.fields;\n  }));\n  return function getOperatorSuggestions(_ref2) {\n    var end = _ref2.end,\n        fieldName = _ref2.fieldName;\n\n    var fields = allFields.filter(function (field) {\n      return field.name === fieldName;\n    });\n    return (0, _lodash.flatten)(fields.map(function (field) {\n      var matchingOperators = Object.keys(operators).filter(function (operator) {\n        var fieldTypes = operators[operator].fieldTypes;\n\n        return !fieldTypes || fieldTypes.includes(field.type);\n      });\n      var suggestions = matchingOperators.map(function (operator) {\n        var text = operator + ' ';\n        var description = getDescription(operator);\n        return { type: type, text: text, description: description, start: end, end: end };\n      });\n      return suggestions;\n    }));\n  };\n}",null]}