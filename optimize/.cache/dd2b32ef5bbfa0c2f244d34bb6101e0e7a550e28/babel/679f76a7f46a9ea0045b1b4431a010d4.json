{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/jobs/new_job/utils/new_job_utils.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/jobs/new_job/utils/new_job_utils.js","mtime":1567631712060},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SearchItemsProvider = SearchItemsProvider;\nexports.createJobForSaving = createJobForSaving;\nexports.addNewJobToRecentlyAccessed = addNewJobToRecentlyAccessed;\nexports.moveToAdvancedJobCreationProvider = moveToAdvancedJobCreationProvider;\nexports.focusOnResultsLink = focusOnResultsLink;\nexports.checkCardinalitySuccess = checkCardinalitySuccess;\nexports.getMinimalValidJob = getMinimalValidJob;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _jquery = require('jquery');\n\nvar _jquery2 = _interopRequireDefault(_jquery);\n\nvar _esQuery = require('@kbn/es-query');\n\nvar _recently_accessed = require('plugins/ml/util/recently_accessed');\n\nvar _job_service = require('plugins/ml/services/job_service');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Provider for creating the items used for searching and job creation.\n// Uses the $route object to retrieve the indexPattern and savedSearch from the url\nfunction SearchItemsProvider(Private, $route, config) {\n\n  function createSearchItems() {\n    var indexPattern = $route.current.locals.indexPattern;\n\n    var query = {\n      query: '*',\n      language: 'lucene'\n    };\n\n    var combinedQuery = {\n      bool: {\n        must: [{\n          query_string: {\n            analyze_wildcard: true,\n            query: '*'\n          }\n        }]\n      }\n    };\n\n    var filters = [];\n\n    var savedSearch = $route.current.locals.savedSearch;\n    if (indexPattern.id === undefined && savedSearch.id !== undefined) {\n      var searchSource = savedSearch.searchSource;\n      indexPattern = searchSource.getField('index');\n\n      query = searchSource.getField('query');\n      var fs = searchSource.getField('filter');\n\n      if (fs.length) {\n        filters = fs;\n      }\n      var esQueryConfigs = (0, _esQuery.getEsQueryConfig)(config);\n      combinedQuery = (0, _esQuery.buildEsQuery)(indexPattern, [query], filters, esQueryConfigs);\n    }\n\n    return {\n      indexPattern: indexPattern,\n      savedSearch: savedSearch,\n      filters: filters,\n      query: query,\n      combinedQuery: combinedQuery\n    };\n  }\n\n  return createSearchItems;\n} /*\n   * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n   * or more contributor license agreements. Licensed under the Elastic License;\n   * you may not use this file except in compliance with the Elastic License.\n   */\n\nfunction createJobForSaving(job) {\n  var newJob = _lodash2.default.cloneDeep(job);\n  delete newJob.datafeed_config;\n  return newJob;\n}\n\nfunction addNewJobToRecentlyAccessed(jobId, resultsUrl) {\n  var urlParts = resultsUrl.match(/ml#\\/(.+?)(\\?.+)/);\n  (0, _recently_accessed.addItemToRecentlyAccessed)(urlParts[1], jobId, urlParts[2]);\n}\n\nfunction moveToAdvancedJobCreationProvider($location) {\n  return function moveToAdvancedJobCreation(job) {\n    _job_service.mlJobService.currentJob = job;\n    $location.path('jobs/new_job/advanced');\n  };\n}\n\nfunction focusOnResultsLink(linkId, $timeout) {\n  // Set focus to the View Results button, which also provides\n  // accessibility feedback that the job has finished.\n  // Run inside $timeout to ensure model has been updated with job state\n  $timeout(function () {\n    (0, _jquery2.default)('#' + linkId).focus();\n  }, 0);\n}\n\n// Only model plot cardinality relevant\n// format:[{id:\"cardinality_model_plot_high\",modelPlotCardinality:11405}, {id:\"cardinality_partition_field\",fieldName:\"clientip\"}]\nfunction checkCardinalitySuccess(data) {\n  var response = {\n    success: true\n  };\n  // There were no fields to run cardinality on.\n  if (Array.isArray(data) && data.length === 0) {\n    return response;\n  }\n\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].id === 'success_cardinality') {\n      break;\n    }\n\n    if (data[i].id === 'cardinality_model_plot_high') {\n      response.success = false;\n      response.highCardinality = data[i].modelPlotCardinality;\n      break;\n    }\n  }\n\n  return response;\n}\n\n// Ensure validation endpoints are given job with expected minimum fields\nfunction getMinimalValidJob() {\n  return {\n    analysis_config: {\n      bucket_span: '15m',\n      detectors: [],\n      influencers: []\n    },\n    data_description: { time_field: '@timestamp' },\n    datafeed_config: {\n      indices: []\n    }\n  };\n}",null]}