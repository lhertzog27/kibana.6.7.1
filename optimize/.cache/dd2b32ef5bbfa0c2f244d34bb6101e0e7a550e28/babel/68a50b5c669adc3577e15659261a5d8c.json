{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/timeseriesexplorer/components/timeseries_chart/timeseries_chart_directive.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/timeseriesexplorer/components/timeseries_chart/timeseries_chart_directive.js","mtime":1567631712069},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _timeseries_chart = require('./timeseries_chart');\n\nvar _angular = require('angular');\n\nvar _angular2 = _interopRequireDefault(_angular);\n\nvar _timefilter = require('ui/timefilter');\n\nvar _resize_checker = require('ui/resize_checker');\n\nvar _modules = require('ui/modules');\n\nvar _i18n = require('ui/i18n');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _module = _modules.uiModules.get('apps/ml'); /*\n                                                  * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                  * or more contributor license agreements. Licensed under the Elastic License;\n                                                  * you may not use this file except in compliance with the Elastic License.\n                                                  */\n\n/*\n * Chart plotting data from a single time series, with or without model plot enabled,\n * annotated with anomalies.\n */\n\n_module.directive('mlTimeseriesChart', function ($timeout) {\n\n  function link(scope, element) {\n    // Key dimensions for the viz and constituent charts.\n    var svgWidth = _angular2.default.element('.results-container').width();\n\n    function contextChartSelected(selection) {\n      scope.$root.$broadcast('contextChartSelected', selection);\n    }\n\n    function renderReactComponent() {\n      var renderFocusChartOnly = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      // Set the size of the components according to the width of the parent container at render time.\n      svgWidth = Math.max(_angular2.default.element('.results-container').width(), 0);\n\n      var props = {\n        annotationsEnabled: scope.annotationsEnabled,\n        autoZoomDuration: scope.autoZoomDuration,\n        contextAggregationInterval: scope.contextAggregationInterval,\n        contextChartData: scope.contextChartData,\n        contextForecastData: scope.contextForecastData,\n        contextChartSelected: contextChartSelected,\n        detectorIndex: scope.detectorIndex,\n        focusAnnotationData: scope.focusAnnotationData,\n        focusChartData: scope.focusChartData,\n        focusForecastData: scope.focusForecastData,\n        focusAggregationInterval: scope.focusAggregationInterval,\n        modelPlotEnabled: scope.modelPlotEnabled,\n        refresh: scope.refresh,\n        renderFocusChartOnly: renderFocusChartOnly,\n        selectedJob: scope.selectedJob,\n        showAnnotations: scope.showAnnotations,\n        showForecast: scope.showForecast,\n        showModelBounds: scope.showModelBounds,\n        svgWidth: svgWidth,\n        swimlaneData: scope.swimlaneData,\n        timefilter: _timefilter.timefilter,\n        zoomFrom: scope.zoomFrom,\n        zoomTo: scope.zoomTo\n      };\n\n      _reactDom2.default.render(_react2.default.createElement(\n        _i18n.I18nContext,\n        null,\n        _react2.default.createElement(_timeseries_chart.TimeseriesChart, props)\n      ), element[0]);\n    }\n\n    renderReactComponent();\n\n    scope.$on('render', function () {\n      $timeout(function () {\n        renderReactComponent();\n      });\n    });\n\n    function renderFocusChart() {\n      renderReactComponent(true);\n    }\n\n    scope.$watchCollection('focusForecastData', renderFocusChart);\n    scope.$watchCollection('focusChartData', renderFocusChart);\n    scope.$watchGroup(['showModelBounds', 'showForecast'], renderFocusChart);\n    scope.$watch('annotationsEnabled', renderReactComponent);\n    if (scope.annotationsEnabled) {\n      scope.$watchCollection('focusAnnotationData', renderFocusChart);\n      scope.$watch('showAnnotations', renderFocusChart);\n    }\n\n    // Redraw the charts when the container is resize.\n    var resizeChecker = new _resize_checker.ResizeChecker(_angular2.default.element('.ml-timeseries-chart'));\n    resizeChecker.on('resize', function () {\n      scope.$evalAsync(function () {\n        renderReactComponent();\n      });\n    });\n\n    element.on('$destroy', function () {\n      resizeChecker.destroy();\n      // unmountComponentAtNode() needs to be called so mlTableService listeners within\n      // the TimeseriesChart component get unwatched properly.\n      _reactDom2.default.unmountComponentAtNode(element[0]);\n      scope.$destroy();\n    });\n  }\n\n  return {\n    scope: {\n      annotationsEnabled: '=',\n      selectedJob: '=',\n      detectorIndex: '=',\n      modelPlotEnabled: '=',\n      contextChartData: '=',\n      contextForecastData: '=',\n      contextChartAnomalyData: '=',\n      focusChartData: '=',\n      swimlaneData: '=',\n      focusAnnotationData: '=',\n      focusForecastData: '=',\n      contextAggregationInterval: '=',\n      focusAggregationInterval: '=',\n      zoomFrom: '=',\n      zoomTo: '=',\n      autoZoomDuration: '=',\n      refresh: '=',\n      showAnnotations: '=',\n      showModelBounds: '=',\n      showForecast: '='\n    },\n    link: link\n  };\n});",null]}