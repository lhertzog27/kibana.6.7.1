{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/components/anomalies_table/anomalies_table_columns.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/components/anomalies_table/anomalies_table_columns.js","mtime":1567631712027},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getColumns = getColumns;\n\nvar _eui = require('@elastic/eui');\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _i18n = require('@kbn/i18n');\n\nvar _date_utils = require('../../util/date_utils');\n\nvar _description_cell = require('./description_cell');\n\nvar _detector_cell = require('./detector_cell');\n\nvar _entity_cell = require('./entity_cell');\n\nvar _influencers_cell = require('./influencers_cell');\n\nvar _links_menu = require('./links_menu');\n\nvar _check_privilege = require('../../privilege/check_privilege');\n\nvar _field_format_service = require('../../services/field_format_service');\n\nvar _anomaly_utils = require('../../../common/util/anomaly_utils');\n\nvar _format_value = require('../../formatters/format_value');\n\nvar _anomalies_table_constants = require('./anomalies_table_constants');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction renderTime(date, aggregationInterval) {\n  if (aggregationInterval === 'hour') {\n    return (0, _date_utils.formatHumanReadableDateTime)(date);\n  } else if (aggregationInterval === 'second') {\n    return (0, _date_utils.formatHumanReadableDateTimeSeconds)(date);\n  } else {\n    return (0, _date_utils.formatHumanReadableDate)(date);\n  }\n} /*\n   * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n   * or more contributor license agreements. Licensed under the Elastic License;\n   * you may not use this file except in compliance with the Elastic License.\n   */\n\nfunction showLinksMenuForItem(item) {\n  var canConfigureRules = (0, _anomaly_utils.isRuleSupported)(item) && (0, _check_privilege.checkPermission)('canUpdateJob');\n  return canConfigureRules || item.isTimeSeriesViewDetector || item.entityName === 'mlcategory' || item.customUrls !== undefined;\n}\n\nfunction getColumns(items, jobIds, examplesByJobId, isAggregatedData, interval, timefilter, showViewSeriesLink, showRuleEditorFlyout, itemIdToExpandedRowMap, toggleRow, filter) {\n\n  var columns = [{\n    name: '',\n    render: function render(item) {\n      return _react2.default.createElement(_eui.EuiButtonIcon, {\n        onClick: function onClick() {\n          return toggleRow(item);\n        },\n        iconType: itemIdToExpandedRowMap[item.rowId] ? 'arrowDown' : 'arrowRight',\n        'aria-label': itemIdToExpandedRowMap[item.rowId] ? _i18n.i18n.translate('xpack.ml.anomaliesTable.hideDetailsAriaLabel', {\n          defaultMessage: 'Hide details'\n        }) : _i18n.i18n.translate('xpack.ml.anomaliesTable.showDetailsAriaLabel', {\n          defaultMessage: 'Show details'\n        }),\n        'data-row-id': item.rowId\n      });\n    }\n  }, {\n    field: 'time',\n    name: _i18n.i18n.translate('xpack.ml.anomaliesTable.timeColumnName', {\n      defaultMessage: 'time'\n    }),\n    dataType: 'date',\n    render: function render(date) {\n      return renderTime(date, interval);\n    },\n    textOnly: true,\n    sortable: true\n  }, {\n    field: 'severity',\n    name: isAggregatedData === true ? _i18n.i18n.translate('xpack.ml.anomaliesTable.maxSeverityColumnName', {\n      defaultMessage: 'max severity'\n    }) : _i18n.i18n.translate('xpack.ml.anomaliesTable.severityColumnName', {\n      defaultMessage: 'severity'\n    }),\n    render: function render(score) {\n      return _react2.default.createElement(\n        _eui.EuiHealth,\n        { color: (0, _anomaly_utils.getSeverityColor)(score), compressed: 'true' },\n        score >= 1 ? Math.floor(score) : '< 1'\n      );\n    },\n    sortable: true\n  }, {\n    field: 'detector',\n    name: _i18n.i18n.translate('xpack.ml.anomaliesTable.detectorColumnName', {\n      defaultMessage: 'detector'\n    }),\n    render: function render(detectorDescription, item) {\n      return _react2.default.createElement(_detector_cell.DetectorCell, {\n        detectorDescription: detectorDescription,\n        numberOfRules: item.rulesLength\n      });\n    },\n    textOnly: true,\n    sortable: true\n  }];\n\n  if (items.some(function (item) {\n    return item.entityValue !== undefined;\n  })) {\n    columns.push({\n      field: 'entityValue',\n      name: _i18n.i18n.translate('xpack.ml.anomaliesTable.entityValueColumnName', {\n        defaultMessage: 'found for'\n      }),\n      render: function render(entityValue, item) {\n        return _react2.default.createElement(_entity_cell.EntityCell, {\n          entityName: item.entityName,\n          entityValue: entityValue,\n          filter: filter\n        });\n      },\n      textOnly: true,\n      sortable: true\n    });\n  }\n\n  if (items.some(function (item) {\n    return item.influencers !== undefined;\n  })) {\n    columns.push({\n      field: 'influencers',\n      name: _i18n.i18n.translate('xpack.ml.anomaliesTable.influencersColumnName', {\n        defaultMessage: 'influenced by'\n      }),\n      render: function render(influencers) {\n        return _react2.default.createElement(_influencers_cell.InfluencersCell, {\n          limit: _anomalies_table_constants.INFLUENCERS_LIMIT,\n          influencers: influencers\n        });\n      },\n      textOnly: true,\n      sortable: true\n    });\n  }\n\n  // Map the additional 'sort' fields to the actual, typical and description\n  // fields to ensure sorting is done correctly on the underlying metric value\n  // and not on e.g. the actual values array as a String.\n  if (items.some(function (item) {\n    return item.actual !== undefined;\n  })) {\n    columns.push({\n      field: 'actualSort',\n      name: _i18n.i18n.translate('xpack.ml.anomaliesTable.actualSortColumnName', {\n        defaultMessage: 'actual'\n      }),\n      render: function render(actual, item) {\n        var fieldFormat = _field_format_service.mlFieldFormatService.getFieldFormat(item.jobId, item.source.detector_index);\n        return (0, _format_value.formatValue)(item.actual, item.source.function, fieldFormat, item.source);\n      },\n      sortable: true\n    });\n  }\n\n  if (items.some(function (item) {\n    return item.typical !== undefined;\n  })) {\n    columns.push({\n      field: 'typicalSort',\n      name: _i18n.i18n.translate('xpack.ml.anomaliesTable.typicalSortColumnName', {\n        defaultMessage: 'typical'\n      }),\n      render: function render(typical, item) {\n        var fieldFormat = _field_format_service.mlFieldFormatService.getFieldFormat(item.jobId, item.source.detector_index);\n        return (0, _format_value.formatValue)(item.typical, item.source.function, fieldFormat, item.source);\n      },\n      sortable: true\n    });\n\n    // Assume that if we are showing typical, there will be an actual too,\n    // so we can add a column to describe how actual compares to typical.\n    var nonTimeOfDayOrWeek = items.some(function (item) {\n      var summaryRecFunc = item.source.function;\n      return summaryRecFunc !== 'time_of_day' && summaryRecFunc !== 'time_of_week';\n    });\n    if (nonTimeOfDayOrWeek === true) {\n      columns.push({\n        field: 'metricDescriptionSort',\n        name: _i18n.i18n.translate('xpack.ml.anomaliesTable.metricDescriptionSortColumnName', {\n          defaultMessage: 'description'\n        }),\n        render: function render(metricDescriptionSort, item) {\n          return _react2.default.createElement(_description_cell.DescriptionCell, {\n            actual: item.actual,\n            typical: item.typical\n          });\n        },\n        textOnly: true,\n        sortable: true\n      });\n    }\n  }\n\n  if (jobIds && jobIds.length > 1) {\n    columns.push({\n      field: 'jobId',\n      name: _i18n.i18n.translate('xpack.ml.anomaliesTable.jobIdColumnName', {\n        defaultMessage: 'job ID'\n      }),\n      sortable: true\n    });\n  }\n\n  var showExamples = items.some(function (item) {\n    return item.entityName === 'mlcategory';\n  });\n  if (showExamples === true) {\n    columns.push({\n      name: _i18n.i18n.translate('xpack.ml.anomaliesTable.categoryExamplesColumnName', {\n        defaultMessage: 'category examples'\n      }),\n      sortable: false,\n      truncateText: true,\n      render: function render(item) {\n        var examples = _lodash2.default.get(examplesByJobId, [item.jobId, item.entityValue], []);\n        return _react2.default.createElement(\n          _eui.EuiLink,\n          {\n            className: 'mlAnomalyCategoryExamples__link',\n            onClick: function onClick() {\n              return toggleRow(item, _anomalies_table_constants.ANOMALIES_TABLE_TABS.CATEGORY_EXAMPLES);\n            }\n          },\n          examples.map(function (example, i) {\n            return _react2.default.createElement(\n              'span',\n              { key: 'example' + i, className: 'category-example' },\n              example\n            );\n          })\n        );\n      },\n      textOnly: true,\n      width: '13%'\n    });\n  }\n\n  var showLinks = showViewSeriesLink === true || items.some(function (item) {\n    return showLinksMenuForItem(item);\n  });\n\n  if (showLinks === true) {\n    columns.push({\n      name: _i18n.i18n.translate('xpack.ml.anomaliesTable.actionsColumnName', {\n        defaultMessage: 'actions'\n      }),\n      render: function render(item) {\n        if (showLinksMenuForItem(item) === true) {\n          return _react2.default.createElement(_links_menu.LinksMenu, {\n            anomaly: item,\n            showViewSeriesLink: showViewSeriesLink,\n            isAggregatedData: isAggregatedData,\n            interval: interval,\n            timefilter: timefilter,\n            showRuleEditorFlyout: showRuleEditorFlyout\n          });\n        } else {\n          return null;\n        }\n      },\n      sortable: false\n    });\n  }\n\n  return columns;\n}",null]}