{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/security/public/views/management/management.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/security/public/views/management/management.js","mtime":1567631712302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nrequire('plugins/security/views/management/change_password_form/change_password_form');\n\nrequire('plugins/security/views/management/password_form/password_form');\n\nrequire('plugins/security/views/management/users');\n\nrequire('plugins/security/views/management/roles');\n\nrequire('plugins/security/views/management/edit_user');\n\nrequire('plugins/security/views/management/edit_role/index');\n\nvar _routes = require('ui/routes');\n\nvar _routes2 = _interopRequireDefault(_routes);\n\nvar _xpack_info = require('plugins/xpack_main/services/xpack_info');\n\nrequire('../../services/shield_user');\n\nvar _management_urls = require('./management_urls');\n\nvar _management = require('ui/management');\n\nvar _i18n = require('@kbn/i18n');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\n_routes2.default.defaults(/\\/management/, {\n  resolve: {\n    securityManagementSection: function securityManagementSection(ShieldUser, Private, esDataIsTribe) {\n      var xpackInfo = Private(_xpack_info.XPackInfoProvider);\n      var showSecurityLinks = xpackInfo.get('features.security.showLinks');\n      var tribeTooltip = 'Not available when using a tribe node.';\n\n      function deregisterSecurity() {\n        _management.management.deregister('security');\n      }\n\n      function ensureSecurityRegistered() {\n        var registerSecurity = function registerSecurity() {\n          return _management.management.register('security', {\n            display: _i18n.i18n.translate('xpack.security.management.securityTitle', {\n              defaultMessage: 'Security'\n            }),\n            order: 100,\n            icon: 'securityApp'\n          });\n        };\n        var getSecurity = function getSecurity() {\n          return _management.management.getSection('security');\n        };\n\n        var security = _management.management.hasItem('security') ? getSecurity() : registerSecurity();\n\n        if (!security.hasItem('users')) {\n          security.register('users', {\n            name: 'securityUsersLink',\n            order: 10,\n            display: _i18n.i18n.translate('xpack.security.management.usersTitle', {\n              defaultMessage: 'Users'\n            }),\n            url: esDataIsTribe ? undefined : '#' + _management_urls.USERS_PATH,\n            tooltip: esDataIsTribe ? tribeTooltip : undefined\n          });\n        }\n\n        if (!security.hasItem('roles')) {\n          security.register('roles', {\n            name: 'securityRolesLink',\n            order: 20,\n            display: _i18n.i18n.translate('xpack.security.management.rolesTitle', {\n              defaultMessage: 'Roles'\n            }),\n            url: esDataIsTribe ? undefined : '#' + _management_urls.ROLES_PATH,\n            tooltip: esDataIsTribe ? tribeTooltip : undefined\n          });\n        }\n      }\n\n      if (!showSecurityLinks) {\n        deregisterSecurity();\n      } else {\n        // getCurrent will reject if there is no authenticated user, so we prevent them from seeing the security\n        // management screens\n        //\n        // $promise is used here because the result is an ngResource, not a promise itself\n        return ShieldUser.getCurrent().$promise.then(ensureSecurityRegistered).catch(deregisterSecurity);\n      }\n    }\n  }\n});",null]}