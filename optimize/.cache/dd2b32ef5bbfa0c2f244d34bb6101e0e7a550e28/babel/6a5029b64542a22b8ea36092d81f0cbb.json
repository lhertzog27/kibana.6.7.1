{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/factories/listener_factory.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/factories/listener_factory.js","mtime":1567631712042},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.listenerFactoryProvider = listenerFactoryProvider;\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\n// A refactor of the original ML listener (three separate functions) into\n// an object providing them as methods.\n\nfunction listenerFactoryProvider() {\n  return function () {\n    var listeners = [];\n    return {\n      changed: function changed() {\n        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        listeners.forEach(function (listener) {\n          return listener.apply(undefined, _toConsumableArray(args));\n        });\n      },\n      watch: function watch(listener) {\n        listeners.push(listener);\n      },\n      unwatch: function unwatch(listener) {\n        var index = listeners.indexOf(listener);\n        if (index > -1) {\n          listeners.splice(index, 1);\n        }\n      },\n      unwatchAll: function unwatchAll() {\n        listeners.splice(0);\n      }\n    };\n  };\n}",null]}