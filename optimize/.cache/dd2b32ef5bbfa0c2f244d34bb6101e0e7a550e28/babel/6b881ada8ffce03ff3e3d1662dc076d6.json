{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/security/public/components/management/users/edit_user.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/security/public/components/management/users/edit_user.js","mtime":1567631712296},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EditUser = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _lodash = require('lodash');\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _eui = require('@elastic/eui');\n\nvar _notify = require('ui/notify');\n\nvar _management_urls = require('../../../views/management/management_urls');\n\nvar _confirm_delete = require('./confirm_delete');\n\nvar _react3 = require('@kbn/i18n/react');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n/* eslint camelcase: 0 */\n\n\nvar validEmailRegex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/; //eslint-disable-line max-len\nvar validUsernameRegex = /[a-zA-Z_][a-zA-Z0-9_@\\-\\$\\.]*/;\n\nvar EditUserUI = function (_Component) {\n  _inherits(EditUserUI, _Component);\n\n  function EditUserUI(props) {\n    var _this2 = this;\n\n    _classCallCheck(this, EditUserUI);\n\n    var _this = _possibleConstructorReturn(this, (EditUserUI.__proto__ || Object.getPrototypeOf(EditUserUI)).call(this, props));\n\n    _this.handleDelete = function (usernames, errors) {\n      if (errors.length === 0) {\n        var changeUrl = _this.props.changeUrl;\n\n        changeUrl(_management_urls.USERS_PATH);\n      }\n    };\n\n    _this.passwordError = function () {\n      var password = _this.state.password;\n\n      if (password !== null && password.length < 6) {\n        return _this.props.intl.formatMessage({\n          id: \"xpack.security.management.users.editUser.passwordLengthErrorMessage\",\n          defaultMessage: \"Password must be at least 6 characters\"\n        });\n      }\n    };\n\n    _this.currentPasswordError = function () {\n      var currentPasswordError = _this.state.currentPasswordError;\n\n      if (currentPasswordError) {\n        return _this.props.intl.formatMessage({\n          id: \"xpack.security.management.users.editUser.incorrectPasswordErrorMessage\",\n          defaultMessage: \"The current password you entered is incorrect\"\n        });\n      }\n    };\n\n    _this.confirmPasswordError = function () {\n      var _this$state = _this.state,\n          password = _this$state.password,\n          confirmPassword = _this$state.confirmPassword;\n\n      if (password && confirmPassword !== null && password !== confirmPassword) {\n        return _this.props.intl.formatMessage({\n          id: \"xpack.security.management.users.editUser.passwordDoNotMatchErrorMessage\",\n          defaultMessage: \"Passwords do not match\"\n        });\n      }\n    };\n\n    _this.usernameError = function () {\n      var username = _this.state.user.username;\n\n      if (username !== null && !username) {\n        return _this.props.intl.formatMessage({\n          id: \"xpack.security.management.users.editUser.requiredUsernameErrorMessage\",\n          defaultMessage: \"Username is required\"\n        });\n      } else if (username && !username.match(validUsernameRegex)) {\n        return _this.props.intl.formatMessage({\n          id: \"xpack.security.management.users.editUser.usernameAllowedCharactersErrorMessage\",\n          defaultMessage: \"Username must begin with a letter or underscore and contain only letters, underscores, and numbers\"\n        });\n      }\n    };\n\n    _this.emailError = function () {\n      var email = _this.state.user.email;\n\n      if (email !== null && email !== '' && !email.match(validEmailRegex)) {\n        return _this.props.intl.formatMessage({\n          id: \"xpack.security.management.users.editUser.validEmailRequiredErrorMessage\",\n          defaultMessage: \"Email address is invalid\"\n        });\n      }\n    };\n\n    _this.changePassword = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n      var apiClient, _this$state2, user, password, currentPassword;\n\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              apiClient = _this.props.apiClient;\n              _this$state2 = _this.state, user = _this$state2.user, password = _this$state2.password, currentPassword = _this$state2.currentPassword;\n              _context.prev = 2;\n              _context.next = 5;\n              return apiClient.changePassword(user.username, password, currentPassword);\n\n            case 5:\n              _notify.toastNotifications.addSuccess(_this.props.intl.formatMessage({\n                id: \"xpack.security.management.users.editUser.passwordSuccessfullyChangedNotificationMessage\",\n                defaultMessage: \"Password changed.\"\n              }));\n              _context.next = 15;\n              break;\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context['catch'](2);\n\n              if (!(_context.t0.status === 401)) {\n                _context.next = 14;\n                break;\n              }\n\n              return _context.abrupt('return', _this.setState({ currentPasswordError: true }));\n\n            case 14:\n              _notify.toastNotifications.addDanger(_this.props.intl.formatMessage({\n                id: \"xpack.security.management.users.editUser.settingPasswordErrorMessage\",\n                defaultMessage: \"Error setting password: {message}\"\n              }, { message: _context.t0.data.message }));\n\n            case 15:\n              _this.clearPasswordForm();\n\n            case 16:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, _this2, [[2, 8]]);\n    }));\n    _this.saveUser = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n      var _this$props, apiClient, changeUrl, _this$state3, user, password, selectedRoles, userToSave;\n\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _this$props = _this.props, apiClient = _this$props.apiClient, changeUrl = _this$props.changeUrl;\n              _this$state3 = _this.state, user = _this$state3.user, password = _this$state3.password, selectedRoles = _this$state3.selectedRoles;\n              userToSave = _extends({}, user);\n\n              userToSave.roles = selectedRoles.map(function (selectedRole) {\n                return selectedRole.label;\n              });\n              if (password) {\n                userToSave.password = password;\n              }\n              _context2.prev = 5;\n              _context2.next = 8;\n              return apiClient.saveUser(userToSave);\n\n            case 8:\n              _notify.toastNotifications.addSuccess(_this.props.intl.formatMessage({\n                id: \"xpack.security.management.users.editUser.userSuccessfullySavedNotificationMessage\",\n                defaultMessage: \"Saved user {message}\"\n              }, { message: user.username }));\n              changeUrl(_management_urls.USERS_PATH);\n              _context2.next = 15;\n              break;\n\n            case 12:\n              _context2.prev = 12;\n              _context2.t0 = _context2['catch'](5);\n\n              _notify.toastNotifications.addDanger(_this.props.intl.formatMessage({\n                id: \"xpack.security.management.users.editUser.savingUserErrorMessage\",\n                defaultMessage: \"Error saving user: {message}\"\n              }, { message: _context2.t0.data.message }));\n\n            case 15:\n            case 'end':\n              return _context2.stop();\n          }\n        }\n      }, _callee2, _this2, [[5, 12]]);\n    }));\n\n    _this.clearPasswordForm = function () {\n      _this.setState({\n        showChangePasswordForm: false,\n        password: null,\n        confirmPassword: null\n      });\n    };\n\n    _this.passwordFields = function () {\n      var _this$state4 = _this.state,\n          user = _this$state4.user,\n          currentUser = _this$state4.currentUser;\n\n      var userIsLoggedInUser = user.username && user.username === currentUser.username;\n      return _react2.default.createElement(\n        _react.Fragment,\n        null,\n        userIsLoggedInUser ? _react2.default.createElement(\n          _eui.EuiFormRow,\n          {\n            label: _this.props.intl.formatMessage({\n              id: \"xpack.security.management.users.editUser.currentPasswordFormRowLabel\",\n              defaultMessage: \"Current password\"\n            }),\n            isInvalid: !!_this.currentPasswordError(),\n            error: _this.currentPasswordError()\n          },\n          _react2.default.createElement(_eui.EuiFieldText, {\n            name: 'currentPassword',\n            type: 'password',\n            onChange: function onChange(event) {\n              return _this.setState({ currentPassword: event.target.value });\n            }\n          })\n        ) : null,\n        _react2.default.createElement(\n          _eui.EuiFormRow,\n          {\n            label: userIsLoggedInUser ? _this.props.intl.formatMessage({\n              id: \"xpack.security.management.users.editUser.newPasswordFormRowLabel\",\n              defaultMessage: \"New password\"\n            }) : _this.props.intl.formatMessage({\n              id: \"xpack.security.management.users.editUser.passwordFormRowLabel\",\n              defaultMessage: \"Password\"\n            }),\n            isInvalid: !!_this.passwordError(),\n            error: _this.passwordError()\n          },\n          _react2.default.createElement(_eui.EuiFieldText, {\n            'data-test-subj': 'passwordInput',\n            name: 'password',\n            type: 'password',\n            onChange: function onChange(event) {\n              return _this.setState({ password: event.target.value });\n            },\n            onBlur: function onBlur(event) {\n              return _this.setState({ password: event.target.value || '' });\n            }\n          })\n        ),\n        _react2.default.createElement(\n          _eui.EuiFormRow,\n          {\n            label: _this.props.intl.formatMessage({\n              id: \"xpack.security.management.users.editUser.confirmPasswordFormRowLabel\",\n              defaultMessage: \"Confirm password\"\n            }),\n            isInvalid: !!_this.confirmPasswordError(),\n            error: _this.confirmPasswordError()\n          },\n          _react2.default.createElement(_eui.EuiFieldText, {\n            'data-test-subj': 'passwordConfirmationInput',\n            onChange: function onChange(event) {\n              return _this.setState({ confirmPassword: event.target.value });\n            },\n            onBlur: function onBlur(event) {\n              return _this.setState({ confirmPassword: event.target.value || '' });\n            },\n            name: 'confirm_password',\n            type: 'password'\n          })\n        )\n      );\n    };\n\n    _this.changePasswordForm = function () {\n      var _this$state5 = _this.state,\n          showChangePasswordForm = _this$state5.showChangePasswordForm,\n          password = _this$state5.password,\n          confirmPassword = _this$state5.confirmPassword,\n          username = _this$state5.user.username;\n\n      if (!showChangePasswordForm) {\n        return null;\n      }\n      return _react2.default.createElement(\n        _react.Fragment,\n        null,\n        _react2.default.createElement(_eui.EuiHorizontalRule, null),\n        _this.passwordFields(),\n        username === 'kibana' ? _react2.default.createElement(\n          _react.Fragment,\n          null,\n          _react2.default.createElement(\n            _eui.EuiCallOut,\n            {\n              title: _this.props.intl.formatMessage({\n                id: \"xpack.security.management.users.editUser.changePasswordExtraStepTitle\",\n                defaultMessage: \"Extra step needed\"\n              }),\n              color: 'warning',\n              iconType: 'help'\n            },\n            _react2.default.createElement(\n              'p',\n              null,\n              _react2.default.createElement(_react3.FormattedMessage, {\n                id: 'xpack.security.management.users.editUser.changePasswordUpdateKibanaTitle',\n                defaultMessage: 'After you change the password for the kibana user, you must update the {kibana} file and restart Kibana.',\n                values: { kibana: 'kibana.yml' }\n              })\n            )\n          ),\n          _react2.default.createElement(_eui.EuiSpacer, null)\n        ) : null,\n        _react2.default.createElement(\n          _eui.EuiFlexGroup,\n          null,\n          _react2.default.createElement(\n            _eui.EuiFlexItem,\n            { grow: false },\n            _react2.default.createElement(\n              _eui.EuiButton,\n              {\n                size: 's',\n                fill: true,\n                disabled: !password || !confirmPassword || _this.passwordError() || _this.confirmPasswordError(),\n                onClick: function onClick() {\n                  _this.changePassword(password);\n                }\n              },\n              _react2.default.createElement(_react3.FormattedMessage, {\n                id: 'xpack.security.management.users.editUser.savePasswordButtonLabel',\n                defaultMessage: 'Save password'\n              })\n            )\n          ),\n          _react2.default.createElement(\n            _eui.EuiFlexItem,\n            { grow: false },\n            _react2.default.createElement(\n              _eui.EuiButtonEmpty,\n              {\n                size: 's',\n                onClick: function onClick() {\n                  _this.clearPasswordForm();\n                }\n              },\n              _react2.default.createElement(_react3.FormattedMessage, {\n                id: 'xpack.security.management.users.editUser.savePasswordCancelButtonLabel',\n                defaultMessage: 'Cancel'\n              })\n            )\n          )\n        )\n      );\n    };\n\n    _this.toggleChangePasswordForm = function () {\n      var showChangePasswordForm = _this.state.showChangePasswordForm;\n\n      _this.setState({ showChangePasswordForm: !showChangePasswordForm });\n    };\n\n    _this.onRolesChange = function (selectedRoles) {\n      _this.setState({\n        selectedRoles: selectedRoles\n      });\n    };\n\n    _this.cannotSaveUser = function () {\n      var _this$state6 = _this.state,\n          user = _this$state6.user,\n          isNewUser = _this$state6.isNewUser;\n\n      return !user.username || _this.emailError() || isNewUser && (_this.passwordError() || _this.confirmPasswordError());\n    };\n\n    _this.onCancelDelete = function () {\n      _this.setState({ showDeleteConfirmation: false });\n    };\n\n    _this.state = {\n      isLoaded: false,\n      isNewUser: true,\n      currentUser: {},\n      showDeleteConfirmation: false,\n      user: {\n        email: null,\n        username: null,\n        full_name: null,\n        roles: []\n      },\n      roles: [],\n      selectedRoles: [],\n      password: null,\n      confirmPassword: null\n    };\n    return _this;\n  }\n\n  _createClass(EditUserUI, [{\n    key: 'componentDidMount',\n    value: function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n        var _props, apiClient, username, _state, user, currentUser, roles;\n\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _props = this.props, apiClient = _props.apiClient, username = _props.username;\n                _state = this.state, user = _state.user, currentUser = _state.currentUser;\n\n                if (!username) {\n                  _context3.next = 16;\n                  break;\n                }\n\n                _context3.prev = 3;\n                _context3.next = 6;\n                return apiClient.getUser(username);\n\n              case 6:\n                user = _context3.sent;\n                _context3.next = 9;\n                return apiClient.getCurrentUser();\n\n              case 9:\n                currentUser = _context3.sent;\n                _context3.next = 16;\n                break;\n\n              case 12:\n                _context3.prev = 12;\n                _context3.t0 = _context3['catch'](3);\n\n                _notify.toastNotifications.addDanger({\n                  title: this.props.intl.formatMessage({\n                    id: \"xpack.security.management.users.editUser.errorLoadingUserTitle\",\n                    defaultMessage: \"Error loading user\"\n                  }),\n                  text: (0, _lodash.get)(_context3.t0, 'data.message') || _context3.t0.message\n                });\n                return _context3.abrupt('return');\n\n              case 16:\n                roles = void 0;\n                _context3.prev = 17;\n                _context3.next = 20;\n                return apiClient.getRoles();\n\n              case 20:\n                roles = _context3.sent;\n                _context3.next = 27;\n                break;\n\n              case 23:\n                _context3.prev = 23;\n                _context3.t1 = _context3['catch'](17);\n\n                _notify.toastNotifications.addDanger({\n                  title: this.props.intl.formatMessage({\n                    id: \"xpack.security.management.users.editUser.errorLoadingRolesTitle\",\n                    defaultMessage: \"Error loading roles\"\n                  }),\n                  text: (0, _lodash.get)(_context3.t1, 'data.message') || _context3.t1.message\n                });\n                return _context3.abrupt('return');\n\n              case 27:\n\n                this.setState({\n                  isLoaded: true,\n                  isNewUser: !username,\n                  currentUser: currentUser,\n                  user: user,\n                  roles: roles,\n                  selectedRoles: user.roles.map(function (role) {\n                    return { label: role };\n                  }) || []\n                });\n\n              case 28:\n              case 'end':\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[3, 12], [17, 23]]);\n      }));\n\n      function componentDidMount() {\n        return _ref3.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this3 = this;\n\n      var _props2 = this.props,\n          changeUrl = _props2.changeUrl,\n          apiClient = _props2.apiClient,\n          intl = _props2.intl;\n      var _state2 = this.state,\n          user = _state2.user,\n          roles = _state2.roles,\n          selectedRoles = _state2.selectedRoles,\n          showChangePasswordForm = _state2.showChangePasswordForm,\n          isNewUser = _state2.isNewUser,\n          showDeleteConfirmation = _state2.showDeleteConfirmation;\n\n      var reserved = user.metadata && user.metadata._reserved;\n      if (!user || !roles) {\n        return null;\n      }\n\n      if (!this.state.isLoaded) {\n        return null;\n      }\n\n      return _react2.default.createElement(\n        'div',\n        { className: 'mgtUsersEditPage' },\n        _react2.default.createElement(\n          _eui.EuiPageContent,\n          { className: 'mgtUsersEditPage__content' },\n          _react2.default.createElement(\n            _eui.EuiPageContentHeader,\n            null,\n            _react2.default.createElement(\n              _eui.EuiPageContentHeaderSection,\n              null,\n              _react2.default.createElement(\n                _eui.EuiTitle,\n                null,\n                _react2.default.createElement(\n                  'h2',\n                  null,\n                  isNewUser ? _react2.default.createElement(_react3.FormattedMessage, {\n                    id: 'xpack.security.management.users.editUser.newUserTitle',\n                    defaultMessage: 'New user'\n                  }) : _react2.default.createElement(_react3.FormattedMessage, {\n                    id: 'xpack.security.management.users.editUser.editUserTitle',\n                    defaultMessage: 'Edit {userName} user',\n                    values: { userName: user.username }\n                  })\n                )\n              )\n            ),\n            reserved && _react2.default.createElement(\n              _eui.EuiPageContentHeaderSection,\n              null,\n              _react2.default.createElement(_eui.EuiIcon, { type: 'lock', size: 'l', color: 'subdued' })\n            )\n          ),\n          _react2.default.createElement(\n            _eui.EuiPageContentBody,\n            null,\n            reserved && _react2.default.createElement(\n              _eui.EuiText,\n              { size: 's', color: 'subdued' },\n              _react2.default.createElement(\n                'p',\n                null,\n                _react2.default.createElement(_react3.FormattedMessage, {\n                  id: 'xpack.security.management.users.editUser.modifyingReservedUsersDescription',\n                  defaultMessage: 'Reserved users are built-in and cannot be removed or modified. Only the password may be changed.'\n                })\n              )\n            ),\n            showDeleteConfirmation ? _react2.default.createElement(_confirm_delete.ConfirmDelete, {\n              onCancel: this.onCancelDelete,\n              apiClient: apiClient,\n              usersToDelete: [user.username],\n              callback: this.handleDelete\n            }) : null,\n            _react2.default.createElement(\n              'form',\n              {\n                onSubmit: function onSubmit(event) {\n                  event.preventDefault();\n                }\n              },\n              _react2.default.createElement(\n                _eui.EuiForm,\n                null,\n                _react2.default.createElement(\n                  _eui.EuiFormRow,\n                  {\n                    isInvalid: !!this.usernameError(),\n                    error: this.usernameError(),\n                    helpText: !isNewUser && !reserved ? intl.formatMessage({\n                      id: \"xpack.security.management.users.editUser.changingUserNameAfterCreationDescription\",\n                      defaultMessage: \"Username's cannot be changed after creation.\"\n                    }) : null,\n                    label: intl.formatMessage({\n                      id: \"xpack.security.management.users.editUser.usernameFormRowLabel\",\n                      defaultMessage: \"Username\"\n                    })\n                  },\n                  _react2.default.createElement(_eui.EuiFieldText, {\n                    onBlur: function onBlur(event) {\n                      return _this3.setState({\n                        user: _extends({}, _this3.state.user, {\n                          username: event.target.value || ''\n                        })\n                      });\n                    },\n                    value: user.username || '',\n                    name: 'username',\n                    'data-test-subj': 'userFormUserNameInput',\n                    disabled: !isNewUser,\n                    onChange: function onChange(event) {\n                      _this3.setState({\n                        user: _extends({}, _this3.state.user, { username: event.target.value })\n                      });\n                    }\n                  })\n                ),\n                isNewUser ? this.passwordFields() : null,\n                reserved ? null : _react2.default.createElement(\n                  _react.Fragment,\n                  null,\n                  _react2.default.createElement(\n                    _eui.EuiFormRow,\n                    {\n                      label: intl.formatMessage({\n                        id: \"xpack.security.management.users.editUser.fullNameFormRowLabel\",\n                        defaultMessage: \"Full name\"\n                      })\n                    },\n                    _react2.default.createElement(_eui.EuiFieldText, {\n                      onBlur: function onBlur(event) {\n                        return _this3.setState({\n                          user: _extends({}, _this3.state.user, {\n                            full_name: event.target.value || ''\n                          })\n                        });\n                      },\n                      'data-test-subj': 'userFormFullNameInput',\n                      name: 'full_name',\n                      value: user.full_name || '',\n                      onChange: function onChange(event) {\n                        _this3.setState({\n                          user: _extends({}, _this3.state.user, {\n                            full_name: event.target.value\n                          })\n                        });\n                      }\n                    })\n                  ),\n                  _react2.default.createElement(\n                    _eui.EuiFormRow,\n                    {\n                      isInvalid: !!this.emailError(),\n                      error: this.emailError(),\n                      label: intl.formatMessage({\n                        id: \"xpack.security.management.users.editUser.emailAddressFormRowLabel\",\n                        defaultMessage: \"Email address\"\n                      })\n                    },\n                    _react2.default.createElement(_eui.EuiFieldText, {\n                      onBlur: function onBlur(event) {\n                        return _this3.setState({\n                          user: _extends({}, _this3.state.user, {\n                            email: event.target.value || ''\n                          })\n                        });\n                      },\n                      'data-test-subj': 'userFormEmailInput',\n                      name: 'email',\n                      value: user.email || '',\n                      onChange: function onChange(event) {\n                        _this3.setState({\n                          user: _extends({}, _this3.state.user, {\n                            email: event.target.value\n                          })\n                        });\n                      }\n                    })\n                  )\n                ),\n                _react2.default.createElement(\n                  _eui.EuiFormRow,\n                  {\n                    label: intl.formatMessage({\n                      id: \"xpack.security.management.users.editUser.rolesFormRowLabel\",\n                      defaultMessage: \"Roles\"\n                    })\n                  },\n                  _react2.default.createElement(_eui.EuiComboBox, {\n                    'data-test-subj': 'userFormRolesDropdown',\n                    placeholder: intl.formatMessage({\n                      id: \"xpack.security.management.users.editUser.addRolesPlaceholder\",\n                      defaultMessage: \"Add roles\"\n                    }),\n                    onChange: this.onRolesChange,\n                    isDisabled: reserved,\n                    name: 'roles',\n                    options: roles.map(function (role) {\n                      return { 'data-test-subj': 'roleOption-' + role.name, label: role.name };\n                    }),\n                    selectedOptions: selectedRoles\n                  })\n                ),\n                isNewUser || showChangePasswordForm ? null : _react2.default.createElement(\n                  _eui.EuiFormRow,\n                  { label: 'Password' },\n                  _react2.default.createElement(\n                    _eui.EuiLink,\n                    { onClick: this.toggleChangePasswordForm },\n                    _react2.default.createElement(_react3.FormattedMessage, {\n                      id: 'xpack.security.management.users.editUser.changePasswordButtonLabel',\n                      defaultMessage: 'Change password'\n                    })\n                  )\n                ),\n                this.changePasswordForm(),\n                _react2.default.createElement(_eui.EuiHorizontalRule, null),\n                reserved && _react2.default.createElement(\n                  _eui.EuiButton,\n                  { onClick: function onClick() {\n                      return changeUrl(_management_urls.USERS_PATH);\n                    } },\n                  _react2.default.createElement(_react3.FormattedMessage, {\n                    id: 'xpack.security.management.users.editUser.returnToUserListButtonLabel',\n                    defaultMessage: 'Return to user list'\n                  })\n                ),\n                reserved ? null : _react2.default.createElement(\n                  _eui.EuiFlexGroup,\n                  { responsive: false },\n                  _react2.default.createElement(\n                    _eui.EuiFlexItem,\n                    { grow: false },\n                    _react2.default.createElement(\n                      _eui.EuiButton,\n                      {\n                        disabled: this.cannotSaveUser(),\n                        fill: true,\n                        'data-test-subj': 'userFormSaveButton',\n                        onClick: function onClick() {\n                          return _this3.saveUser();\n                        }\n                      },\n                      isNewUser ? _react2.default.createElement(_react3.FormattedMessage, {\n                        id: 'xpack.security.management.users.editUser.createUserButtonLabel',\n                        defaultMessage: 'Create user'\n                      }) : _react2.default.createElement(_react3.FormattedMessage, {\n                        id: 'xpack.security.management.users.editUser.updateUserButtonLabel',\n                        defaultMessage: 'Update user'\n                      })\n                    )\n                  ),\n                  _react2.default.createElement(\n                    _eui.EuiFlexItem,\n                    { grow: false },\n                    _react2.default.createElement(\n                      _eui.EuiButtonEmpty,\n                      {\n                        'data-test-subj': 'userFormCancelButton',\n                        onClick: function onClick() {\n                          return changeUrl(_management_urls.USERS_PATH);\n                        }\n                      },\n                      _react2.default.createElement(_react3.FormattedMessage, {\n                        id: 'xpack.security.management.users.editUser.cancelButtonLabel',\n                        defaultMessage: 'Cancel'\n                      })\n                    )\n                  ),\n                  _react2.default.createElement(_eui.EuiFlexItem, { grow: true }),\n                  isNewUser || reserved ? null : _react2.default.createElement(\n                    _eui.EuiFlexItem,\n                    { grow: false },\n                    _react2.default.createElement(\n                      _eui.EuiButtonEmpty,\n                      {\n                        onClick: function onClick() {\n                          _this3.setState({ showDeleteConfirmation: true });\n                        },\n                        'data-test-subj': 'userFormDeleteButton',\n                        color: 'danger'\n                      },\n                      _react2.default.createElement(_react3.FormattedMessage, {\n                        id: 'xpack.security.management.users.editUser.deleteUserButtonLabel',\n                        defaultMessage: 'Delete user'\n                      })\n                    )\n                  )\n                )\n              )\n            )\n          )\n        )\n      );\n    }\n  }]);\n\n  return EditUserUI;\n}(_react.Component);\n\nvar EditUser = exports.EditUser = (0, _react3.injectI18n)(EditUserUI);",null]}