{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/canvas_plugin_src/functions/common/switch.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/canvas_plugin_src/functions/common/switch.js","mtime":1567631711899},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; }\n\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nvar switchFn = exports.switchFn = function switchFn() {\n  return {\n    name: 'switch',\n    help: 'Perform conditional logic with multiple conditions',\n    args: {\n      case: {\n        types: ['case'],\n        aliases: ['_'],\n        resolve: false,\n        multi: true,\n        help: 'The list of conditions to check'\n      },\n      default: {\n        aliases: ['finally'],\n        resolve: false,\n        help: 'The default case if no cases match'\n      }\n    },\n    fn: function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(context, args) {\n        var cases, i, _ref2, matches, result;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                cases = args.case || [];\n                i = 0;\n\n              case 2:\n                if (!(i < cases.length)) {\n                  _context.next = 13;\n                  break;\n                }\n\n                _context.next = 5;\n                return cases[i]();\n\n              case 5:\n                _ref2 = _context.sent;\n                matches = _ref2.matches;\n                result = _ref2.result;\n\n                if (!matches) {\n                  _context.next = 10;\n                  break;\n                }\n\n                return _context.abrupt('return', result);\n\n              case 10:\n                i++;\n                _context.next = 2;\n                break;\n\n              case 13:\n                if (!(typeof args.default !== 'undefined')) {\n                  _context.next = 17;\n                  break;\n                }\n\n                _context.next = 16;\n                return args.default();\n\n              case 16:\n                return _context.abrupt('return', _context.sent);\n\n              case 17:\n                return _context.abrupt('return', context);\n\n              case 18:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, undefined);\n      }));\n\n      function fn(_x, _x2) {\n        return _ref.apply(this, arguments);\n      }\n\n      return fn;\n    }()\n  };\n};",null]}