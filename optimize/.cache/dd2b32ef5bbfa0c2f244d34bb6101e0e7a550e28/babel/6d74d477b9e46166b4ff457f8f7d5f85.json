{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/apm/public/store/middleware/throttle.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/apm/public/store/middleware/throttle.js","mtime":1567631711871},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\n// Throttle middleware for redux\n// Should only be used during development\n//\n// tldr: While developing, it is easy to make minor mistakes that results in infinite dispatch loops.\n// Longer Motivation: Infinite dispatch loop occurs, if a component dispatches an action, that in turn re-renders the component, which then again dispatches.\n// Normally this is guarded, but if the condition is missing/erroneous an infinite loop happens.\n// The root cause is mostly very simple to fix (update an if statement) but the infinite loop causes the browser to be unresponsive\n// and only by killing and restarting the process can development continue.\n// Solution: Block actions if more than x dispatches happens within y seconds\n\nvar MAX_DISPATCHES = 50;\nvar INTERVAL_MS = 2000;\nvar IS_THROTTLED = false;\n\nvar count = 0;\nsetInterval(function () {\n  count = 0;\n}, INTERVAL_MS);\n\nfunction throttle() {\n  return function (next) {\n    return function (action) {\n      count += 1;\n\n      if (count > MAX_DISPATCHES || IS_THROTTLED) {\n        IS_THROTTLED = true;\n        console.error('Action was throttled', action);\n        return {};\n      }\n\n      return next(action);\n    };\n  };\n}\n\nexports.default = throttle;\nmodule.exports = exports['default'];",null]}