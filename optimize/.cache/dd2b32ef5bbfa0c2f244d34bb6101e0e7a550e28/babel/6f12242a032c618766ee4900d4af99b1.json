{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/monitoring/public/components/logstash/pipeline_viewer/models/graph/if_vertex.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/monitoring/public/components/logstash/pipeline_viewer/models/graph/if_vertex.js","mtime":1567631712090},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.IfVertex = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _lodash = require('lodash');\n\nvar _vertex = require('./vertex');\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\nvar IfVertex = exports.IfVertex = function (_Vertex) {\n  _inherits(IfVertex, _Vertex);\n\n  function IfVertex() {\n    _classCallCheck(this, IfVertex);\n\n    return _possibleConstructorReturn(this, (IfVertex.__proto__ || Object.getPrototypeOf(IfVertex)).apply(this, arguments));\n  }\n\n  _createClass(IfVertex, [{\n    key: 'typeString',\n    get: function get() {\n      return 'if';\n    }\n  }, {\n    key: 'name',\n    get: function get() {\n      return this.json.condition;\n    }\n  }, {\n    key: 'iconType',\n    get: function get() {\n      return 'logstashIf';\n    }\n  }, {\n    key: 'title',\n    get: function get() {\n      return 'if';\n    }\n  }, {\n    key: 'subtitle',\n    get: function get() {\n      return this.name;\n    }\n  }, {\n    key: 'trueEdge',\n    get: function get() {\n      return this.outgoingEdges.find(function (e) {\n        return e.when === true;\n      });\n    }\n  }, {\n    key: 'trueEdges',\n    get: function get() {\n      return this.outgoingEdges.filter(function (e) {\n        return e.when === true;\n      });\n    }\n  }, {\n    key: 'falseEdge',\n    get: function get() {\n      return this.outgoingEdges.find(function (e) {\n        return e.when === false;\n      });\n    }\n  }, {\n    key: 'falseEdges',\n    get: function get() {\n      return this.outgoingEdges.filter(function (e) {\n        return e.when === false;\n      });\n    }\n  }, {\n    key: 'trueOutgoingVertex',\n    get: function get() {\n      return this.trueEdge ? this.trueEdge.to : null;\n    }\n  }, {\n    key: 'trueOutgoingVertices',\n    get: function get() {\n      return this.trueEdges.map(function (e) {\n        return e.to;\n      });\n    }\n  }, {\n    key: 'falseOutgoingVertex',\n    get: function get() {\n      return this.falseEdge ? this.falseEdge.to : null;\n    }\n  }, {\n    key: 'falseOutgoingVertices',\n    get: function get() {\n      return this.falseEdges.map(function (e) {\n        return e.to;\n      });\n    }\n  }, {\n    key: 'next',\n    get: function get() {\n      var trueDescendants = this.trueOutgoingVertex ? this.trueOutgoingVertex.descendants().vertices : [];\n      var falseDescendants = this.falseOutgoingVertex ? this.falseOutgoingVertex.descendants().vertices : [];\n\n      trueDescendants.unshift(this.trueOutgoingVertex);\n      falseDescendants.unshift(this.falseOutgoingVertex);\n\n      return (0, _lodash.intersection)(trueDescendants, falseDescendants)[0];\n    }\n  }]);\n\n  return IfVertex;\n}(_vertex.Vertex);",null]}