{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/util/custom_url_utils.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/util/custom_url_utils.js","mtime":1567631712070},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.replaceTokensInUrlValue = replaceTokensInUrlValue;\nexports.getUrlForRecord = getUrlForRecord;\nexports.isValidLabel = isValidLabel;\nexports.isValidTimeRange = isValidTimeRange;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _moment = require('moment');\n\nvar _moment2 = _interopRequireDefault(_moment);\n\nvar _parse_interval = require('../../common/util/parse_interval');\n\nvar _string_utils = require('./string_utils');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Value of custom_url time_range property indicating drilldown time range is calculated automatically\n// depending on the context in which the URL is being opened.\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\n// utility functions for handling custom URLs\n\nvar TIME_RANGE_AUTO = 'auto';\n\n// Replaces the $ delimited tokens in the url_value of the custom URL configuration\n// with values from the supplied document.\nfunction replaceTokensInUrlValue(customUrlConfig, jobBucketSpanSecs, doc, timeFieldName) {\n  // If urlValue contains $earliest$ and $latest$ tokens, add in times to the test doc.\n  var urlValue = customUrlConfig.url_value;\n  var timestamp = doc[timeFieldName];\n  var timeRangeInterval = (0, _parse_interval.parseInterval)(customUrlConfig.time_range);\n  if (urlValue.includes('$earliest$')) {\n    var earliestMoment = (0, _moment2.default)(timestamp);\n    if (timeRangeInterval !== null) {\n      earliestMoment.subtract(timeRangeInterval);\n    } else {\n      earliestMoment.subtract(jobBucketSpanSecs, 's');\n    }\n    doc.earliest = earliestMoment.toISOString();\n  }\n\n  if (urlValue.includes('$latest$')) {\n    var latestMoment = (0, _moment2.default)(timestamp).add(jobBucketSpanSecs, 's');\n    if (timeRangeInterval !== null) {\n      latestMoment.add(timeRangeInterval);\n    } else {\n      latestMoment.add(jobBucketSpanSecs, 's');\n    }\n    doc.latest = latestMoment.toISOString();\n  }\n\n  return getUrlForRecord(customUrlConfig, doc);\n}\n\n// Returns the URL to open from the supplied config, with any dollar delimited tokens\n// substituted from the supplied anomaly record.\nfunction getUrlForRecord(urlConfig, record) {\n  if (isKibanaUrl(urlConfig) === true) {\n    return buildKibanaUrl(urlConfig, record);\n  } else {\n    var urlPath = (0, _string_utils.replaceStringTokens)(urlConfig.url_value, record, false);\n    return urlPath;\n  }\n}\n\n// Returns whether the url_value of the supplied config is for\n// a Kibana page running on the same server as this ML plugin.\nfunction isKibanaUrl(urlConfig) {\n  var urlValue = urlConfig.url_value;\n  return urlValue.startsWith('kibana#/discover') || urlValue.startsWith('kibana#/dashboard');\n}\n\n// Builds a Kibana dashboard or Discover URL from the supplied config, with any\n// dollar delimited tokens substituted from the supplied anomaly record.\nfunction buildKibanaUrl(urlConfig, record) {\n  var urlValue = urlConfig.url_value;\n\n  return String(urlValue).replace(/\\$([^?&$\\'\"]{1,40})\\$/g, function (match, name) {\n\n    // Use lodash get to allow nested JSON fields to be retrieved.\n    var tokenValue = _lodash2.default.get(record, name, null);\n\n    // If the token is an influencer, then the value in the record will be an array.\n    // For now just support passing the first influencer from the array.\n    // TODO - support passing multiple influencer values.\n    if (Array.isArray(tokenValue)) {\n      tokenValue = tokenValue[0];\n    }\n\n    if (tokenValue !== null && !(name === 'earliest' || name === 'latest')) {\n      // Escape the value for correct use in the query.\n      tokenValue = '' + (0, _string_utils.escapeForElasticsearchQuery)(tokenValue);\n\n      // Kibana URLs used rison encoding, so escape with ! any ! or ' characters\n      tokenValue = tokenValue.replace(/[!']/g, '!$&');\n\n      // URI encode in case of special characters in the value.\n      tokenValue = encodeURIComponent(tokenValue);\n    }\n\n    // If property not found string is not replaced.\n    return tokenValue !== null ? tokenValue : match;\n  });\n}\n\n// Returns whether the supplied label is valid for a custom URL.\nfunction isValidLabel(label, savedCustomUrls) {\n  var isValid = label !== undefined && label.trim().length > 0;\n  if (isValid === true && savedCustomUrls !== undefined) {\n    // Check the label is unique.\n    var existingLabels = savedCustomUrls.map(function (customUrl) {\n      return customUrl.url_name;\n    });\n    isValid = !existingLabels.includes(label);\n  }\n  return isValid;\n}\n\nfunction isValidTimeRange(timeRange) {\n  // Allow empty timeRange string, which gives the 'auto' behaviour.\n  if (timeRange === undefined || timeRange.length === 0 || timeRange === TIME_RANGE_AUTO) {\n    return true;\n  }\n\n  var interval = (0, _parse_interval.parseInterval)(timeRange);\n  return interval !== null;\n}",null]}