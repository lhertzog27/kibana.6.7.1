{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/canvas_plugin_src/uis/views/dropdownControl.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/canvas_plugin_src/uis/views/dropdownControl.js","mtime":1567631711910},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.dropdownControl = undefined;\n\nvar _lodash = require('lodash');\n\nvar _resolved_arg = require('../../../public/lib/resolved_arg');\n\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nvar dropdownControl = exports.dropdownControl = function dropdownControl() {\n  return {\n    name: 'dropdownControl',\n    displayName: 'Dropdown filter',\n    modelArgs: [],\n    args: [{\n      name: 'valueColumn',\n      displayName: 'Values column',\n      help: 'Column from which to extract values to make available in the dropdown',\n      argType: 'string',\n      options: {\n        confirm: 'Set'\n      }\n    }, {\n      name: 'filterColumn',\n      displayName: 'Filter column ',\n      help: 'Column to which the value selected from the dropdown is applied',\n      argType: 'string',\n      options: {\n        confirm: 'Set'\n      }\n    }],\n    resolve: function resolve(_ref) {\n      var context = _ref.context;\n\n      if ((0, _resolved_arg.getState)(context) !== 'ready') {\n        return { columns: [] };\n      }\n      return { columns: (0, _lodash.get)((0, _resolved_arg.getValue)(context), 'columns', []) };\n    }\n  };\n};",null]}