{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/xpack_main/public/hacks/welcome_banner/inject_banner.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/xpack_main/public/hacks/welcome_banner/inject_banner.js","mtime":1567631712359},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\n/**\n * Add the Telemetry opt-in banner if the user has not already made a decision.\n *\n * Note: this is an async function, but Angular fails to use it as one. Its usage does not need to be awaited,\n * and thus it can be wrapped in the run method to just be a normal, non-async function.\n *\n * @param {Object} $injector The Angular injector\n */\nvar asyncInjectBanner = function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee($injector) {\n    var telemetryEnabled, Private, telemetryOptInProvider, config, $http;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            telemetryEnabled = $injector.get('telemetryEnabled');\n            Private = $injector.get('Private');\n            telemetryOptInProvider = Private(_telemetry_opt_in.TelemetryOptInProvider);\n            config = $injector.get('config');\n\n            // no banner if the server config has telemetry disabled\n\n            if (telemetryEnabled) {\n              _context.next = 6;\n              break;\n            }\n\n            return _context.abrupt('return');\n\n          case 6:\n            if (!Private(_path.PathProvider).isUnauthenticated()) {\n              _context.next = 8;\n              break;\n            }\n\n            return _context.abrupt('return');\n\n          case 8:\n            if (!(_chrome2.default.getApp().id === 'status_page')) {\n              _context.next = 10;\n              break;\n            }\n\n            return _context.abrupt('return');\n\n          case 10:\n            _context.next = 12;\n            return (0, _should_show_banner.shouldShowBanner)(telemetryOptInProvider, config);\n\n          case 12:\n            if (!_context.sent) {\n              _context.next = 15;\n              break;\n            }\n\n            $http = $injector.get(\"$http\");\n\n\n            (0, _render_banner.renderBanner)(telemetryOptInProvider, function () {\n              return (0, _fetch_telemetry.fetchTelemetry)($http);\n            });\n\n          case 15:\n          case 'end':\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n\n  return function asyncInjectBanner(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\n/**\n * Add the Telemetry opt-in banner when appropriate.\n *\n * @param {Object} $injector The Angular injector\n */\n\n\nexports.injectBanner = injectBanner;\n\nvar _chrome = require('ui/chrome');\n\nvar _chrome2 = _interopRequireDefault(_chrome);\n\nvar _path = require('plugins/xpack_main/services/path');\n\nvar _fetch_telemetry = require('../fetch_telemetry');\n\nvar _render_banner = require('./render_banner');\n\nvar _should_show_banner = require('./should_show_banner');\n\nvar _telemetry_opt_in = require('../../services/telemetry_opt_in');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            */\n\nfunction injectBanner($injector) {\n  asyncInjectBanner($injector);\n}",null]}