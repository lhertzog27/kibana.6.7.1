{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/legacy/core_plugins/kibana/public/dashboard/saved_dashboard/saved_dashboard.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/legacy/core_plugins/kibana/public/dashboard/saved_dashboard/saved_dashboard.js","mtime":1567631711561},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nvar _angular = require('angular');\n\nvar _angular2 = _interopRequireDefault(_angular);\n\nvar _modules = require('ui/modules');\n\nvar _dashboard_constants = require('../dashboard_constants');\n\nvar _legacy_class = require('ui/utils/legacy_class');\n\nvar _courier = require('ui/courier');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _module = _modules.uiModules.get('app/dashboard');\n\n// Used only by the savedDashboards service, usually no reason to change this\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n_module.factory('SavedDashboard', function (Private, config, i18n) {\n  // SavedDashboard constructor. Usually you'd interact with an instance of this.\n  // ID is option, without it one will be generated on save.\n  var SavedObject = Private(_courier.SavedObjectProvider);\n  (0, _legacy_class.createLegacyClass)(SavedDashboard).inherits(SavedObject);\n  function SavedDashboard(id) {\n    // Gives our SavedDashboard the properties of a SavedObject\n    SavedDashboard.Super.call(this, {\n      type: SavedDashboard.type,\n      mapping: SavedDashboard.mapping,\n      searchSource: SavedDashboard.searchsource,\n\n      // if this is null/undefined then the SavedObject will be assigned the defaults\n      id: id,\n\n      // default values that will get assigned if the doc is new\n      defaults: {\n        title: i18n('kbn.dashboard.savedDashboard.newDashboardTitle', { defaultMessage: 'New Dashboard' }),\n        hits: 0,\n        description: '',\n        panelsJSON: '[]',\n        optionsJSON: _angular2.default.toJson({\n          darkTheme: config.get('dashboard:defaultDarkTheme'),\n          // for BWC reasons we can't default dashboards that already exist without this setting to true.\n          useMargins: id ? false : true,\n          hidePanelTitles: false\n        }),\n        version: 1,\n        timeRestore: false,\n        timeTo: undefined,\n        timeFrom: undefined,\n        refreshInterval: undefined\n      },\n\n      // if an indexPattern was saved with the searchsource of a SavedDashboard\n      // object, clear it. It was a mistake\n      clearSavedIndexPattern: true\n    });\n\n    this.showInRecentlyAccessed = true;\n  }\n\n  // save these objects with the 'dashboard' type\n  SavedDashboard.type = 'dashboard';\n\n  // if type:dashboard has no mapping, we push this mapping into ES\n  SavedDashboard.mapping = {\n    title: 'text',\n    hits: 'integer',\n    description: 'text',\n    panelsJSON: 'text',\n    optionsJSON: 'text',\n    // Note: this field is no longer used for dashboards created or saved in version 6.2 onward.  We keep it around\n    // due to BWC, until we can ensure a migration step for all old dashboards saved in an index, as well as\n    // migration steps for importing.  See https://github.com/elastic/kibana/issues/15204 for more info.\n    uiStateJSON: 'text',\n    version: 'integer',\n    timeRestore: 'boolean',\n    timeTo: 'keyword',\n    timeFrom: 'keyword',\n    refreshInterval: {\n      type: 'object',\n      properties: {\n        display: { type: 'keyword' },\n        pause: { type: 'boolean' },\n        section: { type: 'integer' },\n        value: { type: 'integer' }\n      }\n    }\n  };\n\n  // Order these fields to the top, the rest are alphabetical\n  SavedDashboard.fieldOrder = ['title', 'description'];\n\n  SavedDashboard.searchsource = true;\n\n  SavedDashboard.prototype.getFullPath = function () {\n    return '/app/kibana#' + (0, _dashboard_constants.createDashboardEditUrl)(this.id);\n  };\n\n  return SavedDashboard;\n});",null]}