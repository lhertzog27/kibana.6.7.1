{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/logstash/public/models/pipeline/pipeline.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/logstash/public/models/pipeline/pipeline.js","mtime":1567631712008},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Pipeline = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\nopyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\nor more contributor license agreements. Licensed under the Elastic License;\nyou may not use this file except in compliance with the Elastic License.\nn\nvar _lodash = require('lodash');\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// This config template is presented to the user for the 'new pipeline' workflow\nvar emptyPipeline = 'input {\\n' + '}\\n' + 'filter {\\n' + '}\\n' + 'output {\\n' + '}';\n\n// Should be consistent with https://www.elastic.co/guide/en/logstash/current/logstash-settings-file.html\nvar settingsDefaults = {\n  'pipeline.workers': null, // Defaults to number of CPU cores\n  'pipeline.batch.size': 125,\n  'pipeline.batch.delay': 50,\n  'queue.type': 'memory',\n  'queue.max_bytes.number': 1,\n  'queue.max_bytes.units': 'gb',\n  'queue.checkpoint.writes': 1024\n};\n\nvar Pipeline = exports.Pipeline = function () {\n  /**\n   * Represents the pipeline for the client side editing/creating workflow\n   * @param {object} props An object used to instantiate a pipeline instance\n   * @param {string} props.id Named Id of the pipeline\n   * @param {string} props.description Optional description for the pipeline\n   * @param {object} props.pipeline The actual LS configuration as a string blob\n   * @param {string} props.username User who created or updated the pipeline\n   */\n  function Pipeline(props) {\n    var _this = this;\n\n    _classCallCheck(this, Pipeline);\n\n    this.isEqualTo = function (otherPipeline) {\n      // We need to create a POJO copies because isEqual would return false\n      // because of property getters\n      var cleanPipeline = _extends({}, _this);\n      var cleanOtherPipeline = _extends({}, otherPipeline);\n\n      return (0, _lodash.isEqual)(cleanPipeline, cleanOtherPipeline);\n    };\n\n    this.id = (0, _lodash.get)(props, 'id');\n    this.description = (0, _lodash.get)(props, 'description', '');\n    this.pipeline = (0, _lodash.get)(props, 'pipeline', emptyPipeline);\n    this.username = (0, _lodash.get)(props, 'username');\n    this.settings = (0, _lodash.defaultsDeep)((0, _lodash.get)(props, 'settings', {}), settingsDefaults);\n  }\n\n  _createClass(Pipeline, [{\n    key: 'clone',\n    get: function get() {\n      return new Pipeline(_extends({}, (0, _lodash.omit)(this, ['id', 'username'])));\n    }\n  }, {\n    key: 'upstreamJSON',\n    get: function get() {\n      var settings = this.settings;\n      var maxBytesNumber = (0, _lodash.get)(settings, 'queue.max_bytes.number');\n      var maxBytesUnits = (0, _lodash.get)(settings, 'queue.max_bytes.units');\n\n      var upstreamSettings = _extends({}, settings);\n\n      if (maxBytesNumber && maxBytesUnits) {\n        delete upstreamSettings['queue.max_bytes.number'];\n        delete upstreamSettings['queue.max_bytes.units'];\n        upstreamSettings['queue.max_bytes'] = '' + maxBytesNumber + maxBytesUnits;\n      }\n\n      return {\n        description: this.description,\n        pipeline: this.pipeline,\n        username: this.username,\n        settings: upstreamSettings\n      };\n    }\n  }], [{\n    key: 'fromUpstreamJSON',\n    value: function fromUpstreamJSON(pipeline) {\n      var settings = pipeline.settings;\n\n      var maxBytesStr = (0, _lodash.get)(settings, 'queue.max_bytes', '');\n      var maxBytesParts = maxBytesStr.match(/(\\d+)(\\w+)/);\n      if (Array.isArray(maxBytesParts) && maxBytesParts.length === 3) {\n        var maxBytesNumber = maxBytesParts[1];\n        var maxBytesUnits = maxBytesParts[2];\n\n        if (maxBytesNumber && maxBytesUnits) {\n          delete settings['queue.max_bytes'];\n          settings['queue.max_bytes.number'] = parseInt(maxBytesNumber);\n          settings['queue.max_bytes.units'] = maxBytesUnits;\n        }\n      }\n\n      return new Pipeline({\n        id: pipeline.id,\n        description: pipeline.description,\n        pipeline: pipeline.pipeline,\n        username: pipeline.username,\n        settings: settings\n      });\n    }\n  }]);\n\n  return Pipeline;\n}();",null]}