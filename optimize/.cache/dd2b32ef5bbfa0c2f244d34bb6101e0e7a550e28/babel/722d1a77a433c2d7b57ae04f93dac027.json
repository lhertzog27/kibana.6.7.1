{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/canvas_plugin_src/renderers/reveal_image/index.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/canvas_plugin_src/renderers/reveal_image/index.js","mtime":1567631711905},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.revealImage = undefined;\n\nvar _elastic_outline = require('../../lib/elastic_outline');\n\nvar _url = require('../../../common/lib/url');\n\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nvar revealImage = exports.revealImage = function revealImage() {\n  return {\n    name: 'revealImage',\n    displayName: 'Image reveal',\n    help: 'Reveal a percentage of an image to make a custom gauge-style chart',\n    reuseDomNode: true,\n    render: function render(domNode, config, handlers) {\n      var aligner = document.createElement('div');\n      var img = new Image();\n\n      // modify the top-level container class\n      domNode.className = 'revealImage';\n\n      // set up the overlay image\n      img.onload = function () {\n        setSize();\n        finish();\n      };\n\n      img.className = 'revealImage__image';\n      img.style.clipPath = getClipPath(config.percent, config.origin);\n      img.style['-webkit-clip-path'] = getClipPath(config.percent, config.origin);\n      img.src = (0, _url.isValidUrl)(config.image) ? config.image : _elastic_outline.elasticOutline;\n      handlers.onResize(img.onload);\n\n      // set up the underlay, \"empty\" image\n      aligner.className = 'revealImageAligner';\n      aligner.appendChild(img);\n      if ((0, _url.isValidUrl)(config.emptyImage)) {\n        // only use empty image if one is provided\n        aligner.style.backgroundImage = 'url(' + config.emptyImage + ')';\n      }\n\n      function finish() {\n        var firstChild = domNode.firstChild;\n        if (firstChild) {\n          domNode.replaceChild(aligner, firstChild);\n        } else {\n          domNode.appendChild(aligner);\n        }\n        handlers.done();\n      }\n\n      function getClipPath(percent) {\n        var origin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'bottom';\n\n        var directions = { bottom: 0, left: 1, top: 2, right: 3 };\n        var values = [0, 0, 0, 0];\n        values[directions[origin]] = 100 - percent * 100 + '%';\n        return 'inset(' + values.join(' ') + ')';\n      }\n\n      function setSize() {\n        var imgDimensions = {\n          height: img.naturalHeight,\n          width: img.naturalWidth,\n          ratio: img.naturalHeight / img.naturalWidth\n        };\n\n        var domNodeDimensions = {\n          height: domNode.clientHeight,\n          width: domNode.clientWidth,\n          ratio: domNode.clientHeight / domNode.clientWidth\n        };\n\n        if (imgDimensions.ratio > domNodeDimensions.ratio) {\n          img.style.height = domNodeDimensions.height + 'px';\n          img.style.width = 'initial';\n        } else {\n          img.style.width = domNodeDimensions.width + 'px';\n          img.style.height = 'initial';\n        }\n      }\n    }\n  };\n};",null]}