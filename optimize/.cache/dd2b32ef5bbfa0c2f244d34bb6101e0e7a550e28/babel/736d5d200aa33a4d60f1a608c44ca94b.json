{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/index_management/public/sections/index_list/components/index_table/index_table.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/index_management/public/sections/index_list/components/index_table/index_table.js","mtime":1567631711972},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.IndexTable = exports.IndexTableUi = undefined;\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _i18n = require('@kbn/i18n');\n\nvar _react3 = require('@kbn/i18n/react');\n\nvar _reactRouterDom = require('react-router-dom');\n\nvar _no_match = require('../../../no_match');\n\nvar _services = require('../../../../services');\n\nvar _constants = require('../../../../constants');\n\nvar _eui = require('@elastic/eui');\n\nvar _components = require('../../components');\n\nvar _index_management_extensions = require('../../../../index_management_extensions');\n\nvar _render_badges = require('../../../../lib/render_badges');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\nvar HEADERS = {\n  name: _i18n.i18n.translate('xpack.idxMgmt.indexTable.headers.nameHeader', {\n    defaultMessage: 'Name'\n  }),\n  health: _i18n.i18n.translate('xpack.idxMgmt.indexTable.headers.healthHeader', {\n    defaultMessage: 'Health'\n  }),\n  status: _i18n.i18n.translate('xpack.idxMgmt.indexTable.headers.statusHeader', {\n    defaultMessage: 'Status'\n  }),\n  primary: _i18n.i18n.translate('xpack.idxMgmt.indexTable.headers.primaryHeader', {\n    defaultMessage: 'Primaries'\n  }),\n  replica: _i18n.i18n.translate('xpack.idxMgmt.indexTable.headers.replicaHeader', {\n    defaultMessage: 'Replicas'\n  }),\n  documents: _i18n.i18n.translate('xpack.idxMgmt.indexTable.headers.documentsHeader', {\n    defaultMessage: 'Docs count'\n  }),\n  size: _i18n.i18n.translate('xpack.idxMgmt.indexTable.headers.storageSizeHeader', {\n    defaultMessage: 'Storage size'\n  })\n};\n\nvar IndexTableUi = exports.IndexTableUi = function (_Component) {\n  _inherits(IndexTableUi, _Component);\n\n  _createClass(IndexTableUi, null, [{\n    key: 'getDerivedStateFromProps',\n    value: function getDerivedStateFromProps(props, state) {\n      // Deselct any indices which no longer exist, e.g. they've been deleted.\n      var selectedIndicesMap = state.selectedIndicesMap;\n\n      var indexNames = props.indices.map(function (index) {\n        return index.name;\n      });\n      var selectedIndexNames = Object.keys(selectedIndicesMap);\n      var missingIndexNames = selectedIndexNames.filter(function (selectedIndexName) {\n        return !indexNames.includes(selectedIndexName);\n      });\n\n      if (missingIndexNames.length) {\n        var newMap = _extends({}, selectedIndicesMap);\n        missingIndexNames.forEach(function (missingIndexName) {\n          return delete newMap[missingIndexName];\n        });\n        return { selectedIndicesMap: newMap };\n      }\n\n      return null;\n    }\n  }]);\n\n  function IndexTableUi(props) {\n    _classCallCheck(this, IndexTableUi);\n\n    var _this = _possibleConstructorReturn(this, (IndexTableUi.__proto__ || Object.getPrototypeOf(IndexTableUi)).call(this, props));\n\n    _this.onSort = function (column) {\n      var _this$props = _this.props,\n          sortField = _this$props.sortField,\n          isSortAscending = _this$props.isSortAscending,\n          sortChanged = _this$props.sortChanged;\n\n\n      var newIsSortAscending = sortField === column ? !isSortAscending : true;\n      sortChanged(column, newIsSortAscending);\n    };\n\n    _this.onFilterChanged = function (_ref) {\n      var query = _ref.query,\n          error = _ref.error;\n\n      if (error) {\n        _this.setState({ filterError: error });\n      } else {\n        _this.props.filterChanged(query);\n        _this.setState({ filterError: null });\n      }\n    };\n\n    _this.getFilters = function () {\n      var allIndices = _this.props.allIndices;\n\n      return (0, _index_management_extensions.getFilterExtensions)().reduce(function (accum, filterExtension) {\n        var filtersToAdd = filterExtension(allIndices);\n        return [].concat(_toConsumableArray(accum), _toConsumableArray(filtersToAdd));\n      }, []);\n    };\n\n    _this.toggleAll = function () {\n      var allSelected = _this.areAllItemsSelected();\n      if (allSelected) {\n        return _this.setState({ selectedIndicesMap: {} });\n      }\n      var indices = _this.props.indices;\n\n      var selectedIndicesMap = {};\n      indices.forEach(function (_ref2) {\n        var name = _ref2.name;\n\n        selectedIndicesMap[name] = true;\n      });\n      _this.setState({\n        selectedIndicesMap: selectedIndicesMap\n      });\n    };\n\n    _this.toggleItem = function (name) {\n      _this.setState(function (_ref3) {\n        var selectedIndicesMap = _ref3.selectedIndicesMap;\n\n        var newMap = _extends({}, selectedIndicesMap);\n        if (newMap[name]) {\n          delete newMap[name];\n        } else {\n          newMap[name] = true;\n        }\n        return {\n          selectedIndicesMap: newMap\n        };\n      });\n    };\n\n    _this.isItemSelected = function (name) {\n      return !!_this.state.selectedIndicesMap[name];\n    };\n\n    _this.areAllItemsSelected = function () {\n      var indices = _this.props.indices;\n\n      var indexOfUnselectedItem = indices.findIndex(function (index) {\n        return !_this.isItemSelected(index.name);\n      });\n      return indexOfUnselectedItem === -1;\n    };\n\n    _this.onItemSelectionChanged = function (selectedIndices) {\n      _this.setState({ selectedIndices: selectedIndices });\n    };\n\n    _this.state = {\n      selectedIndicesMap: {}\n    };\n    return _this;\n  }\n\n  _createClass(IndexTableUi, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.props.loadIndices();\n      this.interval = setInterval(this.props.reloadIndices, _constants.REFRESH_RATE_INDEX_LIST);\n      var _props = this.props,\n          filterChanged = _props.filterChanged,\n          filterFromURI = _props.filterFromURI;\n\n      if (filterFromURI) {\n        var decodedFilter = decodeURIComponent(filterFromURI);\n        filterChanged(_eui.EuiSearchBar.Query.parse(decodedFilter));\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      clearInterval(this.interval);\n    }\n  }, {\n    key: 'renderFilterError',\n    value: function renderFilterError() {\n      var intl = this.props.intl;\n      var filterError = this.state.filterError;\n\n      if (!filterError) {\n        return;\n      }\n      return _react2.default.createElement(\n        _react.Fragment,\n        null,\n        _react2.default.createElement(_eui.EuiCallOut, {\n          iconType: 'faceSad',\n          color: 'danger',\n          title: intl.formatMessage({\n            id: 'xpack.idxMgmt.indexTable.invalidSearchErrorMessage',\n            defaultMessage: 'Invalid search: {errorMessage}'\n          }, {\n            errorMessage: filterError.message\n          })\n        }),\n        _react2.default.createElement(_eui.EuiSpacer, { size: 'l' })\n      );\n    }\n  }, {\n    key: 'buildHeader',\n    value: function buildHeader() {\n      var _this2 = this;\n\n      var _props2 = this.props,\n          sortField = _props2.sortField,\n          isSortAscending = _props2.isSortAscending;\n\n      return Object.entries(HEADERS).map(function (_ref4) {\n        var _ref5 = _slicedToArray(_ref4, 2),\n            fieldName = _ref5[0],\n            label = _ref5[1];\n\n        var isSorted = sortField === fieldName;\n        return _react2.default.createElement(\n          _eui.EuiTableHeaderCell,\n          {\n            key: fieldName,\n            onSort: function onSort() {\n              return _this2.onSort(fieldName);\n            },\n            isSorted: isSorted,\n            isSortAscending: isSortAscending,\n            className: 'indTable__header--' + fieldName,\n            'data-test-subj': 'indexTableHeaderCell-' + fieldName\n          },\n          label\n        );\n      });\n    }\n  }, {\n    key: 'buildRowCell',\n    value: function buildRowCell(fieldName, value, index) {\n      var _props3 = this.props,\n          openDetailPanel = _props3.openDetailPanel,\n          filterChanged = _props3.filterChanged;\n\n      if (fieldName === 'health') {\n        return _react2.default.createElement(\n          _eui.EuiHealth,\n          { color: (0, _services.healthToColor)(value) },\n          value\n        );\n      } else if (fieldName === 'name') {\n        return _react2.default.createElement(\n          _react.Fragment,\n          null,\n          _react2.default.createElement(\n            _eui.EuiLink,\n            {\n              className: 'indTable__link',\n              'data-test-subj': 'indexTableIndexNameLink',\n              onClick: function onClick() {\n                openDetailPanel(value);\n              }\n            },\n            value\n          ),\n          (0, _render_badges.renderBadges)(index, filterChanged)\n        );\n      }\n      return value;\n    }\n  }, {\n    key: 'buildRowCells',\n    value: function buildRowCells(index) {\n      var _this3 = this;\n\n      return Object.keys(HEADERS).map(function (fieldName) {\n        var name = index.name;\n\n        var value = index[fieldName];\n        return _react2.default.createElement(\n          _eui.EuiTableRowCell,\n          {\n            key: fieldName + '-' + name,\n            truncateText: false,\n            'data-test-subj': 'indexTableCell-' + fieldName,\n            className: 'indTable__cell--' + fieldName,\n            header: fieldName\n          },\n          _this3.buildRowCell(fieldName, value, index)\n        );\n      });\n    }\n  }, {\n    key: 'renderBanners',\n    value: function renderBanners() {\n      var _props4 = this.props,\n          _props4$allIndices = _props4.allIndices,\n          allIndices = _props4$allIndices === undefined ? [] : _props4$allIndices,\n          filterChanged = _props4.filterChanged;\n\n      return (0, _index_management_extensions.getBannerExtensions)().map(function (bannerExtension, i) {\n        var bannerData = bannerExtension(allIndices);\n        if (!bannerData) {\n          return null;\n        }\n\n        var type = bannerData.type,\n            title = bannerData.title,\n            message = bannerData.message,\n            filter = bannerData.filter,\n            filterLabel = bannerData.filterLabel;\n\n\n        return _react2.default.createElement(\n          _react.Fragment,\n          { key: 'bannerExtension' + i },\n          _react2.default.createElement(\n            _eui.EuiCallOut,\n            { color: type, size: 'm', title: title },\n            _react2.default.createElement(\n              _eui.EuiText,\n              null,\n              message,\n              filter ? _react2.default.createElement(\n                _eui.EuiLink,\n                { onClick: function onClick() {\n                    return filterChanged(filter);\n                  } },\n                filterLabel\n              ) : null\n            )\n          ),\n          _react2.default.createElement(_eui.EuiSpacer, { size: 'm' })\n        );\n      });\n    }\n  }, {\n    key: 'buildRows',\n    value: function buildRows() {\n      var _this4 = this;\n\n      var _props5 = this.props,\n          _props5$indices = _props5.indices,\n          indices = _props5$indices === undefined ? [] : _props5$indices,\n          detailPanelIndexName = _props5.detailPanelIndexName;\n\n      return indices.map(function (index) {\n        var name = index.name;\n\n        return _react2.default.createElement(\n          _eui.EuiTableRow,\n          {\n            isSelected: _this4.isItemSelected(name) || name === detailPanelIndexName,\n            isSelectable: true,\n            key: name + '-row'\n          },\n          _react2.default.createElement(\n            _eui.EuiTableRowCellCheckbox,\n            { key: 'checkbox-' + name },\n            _react2.default.createElement(_eui.EuiCheckbox, {\n              type: 'inList',\n              id: 'checkboxSelectIndex-' + name,\n              checked: _this4.isItemSelected(name),\n              onChange: function onChange() {\n                _this4.toggleItem(name);\n              },\n              'data-test-subj': 'indexTableRowCheckbox'\n            })\n          ),\n          _this4.buildRowCells(index)\n        );\n      });\n    }\n  }, {\n    key: 'renderPager',\n    value: function renderPager() {\n      var _props6 = this.props,\n          pager = _props6.pager,\n          pageChanged = _props6.pageChanged,\n          pageSizeChanged = _props6.pageSizeChanged;\n\n      return _react2.default.createElement(_eui.EuiTablePagination, {\n        activePage: pager.getCurrentPageIndex(),\n        itemsPerPage: pager.itemsPerPage,\n        itemsPerPageOptions: [10, 50, 100],\n        pageCount: pager.getTotalPages(),\n        onChangeItemsPerPage: pageSizeChanged,\n        onChangePage: pageChanged\n      });\n    }\n  }, {\n    key: 'renderToggleControl',\n    value: function renderToggleControl(_ref6) {\n      var name = _ref6.name,\n          label = _ref6.label;\n      var _props7 = this.props,\n          toggleNameToVisibleMap = _props7.toggleNameToVisibleMap,\n          toggleChanged = _props7.toggleChanged;\n\n      return _react2.default.createElement(\n        _eui.EuiFlexItem,\n        { key: name, grow: false },\n        _react2.default.createElement(_eui.EuiSwitch, {\n          id: 'checkboxToggles-{name}',\n          checked: toggleNameToVisibleMap[name],\n          onChange: function onChange(event) {\n            return toggleChanged(name, event.target.checked);\n          },\n          label: label\n        })\n      );\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this5 = this;\n\n      var _props8 = this.props,\n          filter = _props8.filter,\n          showSystemIndices = _props8.showSystemIndices,\n          showSystemIndicesChanged = _props8.showSystemIndicesChanged,\n          indices = _props8.indices,\n          intl = _props8.intl,\n          loadIndices = _props8.loadIndices,\n          indicesLoading = _props8.indicesLoading,\n          allIndices = _props8.allIndices;\n\n      var emptyState = indicesLoading ? _react2.default.createElement(\n        _eui.EuiFlexGroup,\n        { justifyContent: 'spaceAround' },\n        _react2.default.createElement(\n          _eui.EuiFlexItem,\n          { grow: false },\n          _react2.default.createElement(_eui.EuiLoadingSpinner, { size: 'xl' })\n        )\n      ) : _react2.default.createElement(_no_match.NoMatch, null);\n      var selectedIndicesMap = this.state.selectedIndicesMap;\n\n      var atLeastOneItemSelected = Object.keys(selectedIndicesMap).length > 0;\n      return _react2.default.createElement(\n        _eui.EuiPageContent,\n        null,\n        _react2.default.createElement(\n          _eui.EuiFlexGroup,\n          { justifyContent: 'spaceBetween', alignItems: 'flexEnd' },\n          _react2.default.createElement(\n            _eui.EuiFlexItem,\n            { grow: false },\n            _react2.default.createElement(\n              _eui.EuiTitle,\n              { size: 'm' },\n              _react2.default.createElement(\n                'h1',\n                null,\n                _react2.default.createElement(_react3.FormattedMessage, {\n                  id: 'xpack.idxMgmt.indexTable.sectionHeading',\n                  defaultMessage: 'Index management'\n                })\n              )\n            ),\n            _react2.default.createElement(_eui.EuiSpacer, { size: 's' }),\n            _react2.default.createElement(\n              _eui.EuiText,\n              null,\n              _react2.default.createElement(\n                'p',\n                null,\n                _react2.default.createElement(_react3.FormattedMessage, {\n                  id: 'xpack.idxMgmt.indexTable.sectionDescription',\n                  defaultMessage: 'Update your Elasticsearch indices individually or in bulk.'\n                })\n              )\n            )\n          ),\n          _react2.default.createElement(\n            _eui.EuiFlexItem,\n            { grow: false },\n            indicesLoading && allIndices.length === 0 ? null : _react2.default.createElement(\n              _eui.EuiFlexGroup,\n              null,\n              (0, _index_management_extensions.getToggleExtensions)().map(function (toggle) {\n                return _this5.renderToggleControl(toggle);\n              }),\n              _react2.default.createElement(\n                _eui.EuiFlexItem,\n                { grow: false },\n                _react2.default.createElement(_eui.EuiSwitch, {\n                  id: 'checkboxShowSystemIndices',\n                  checked: showSystemIndices,\n                  onChange: function onChange(event) {\n                    return showSystemIndicesChanged(event.target.checked);\n                  },\n                  label: _react2.default.createElement(_react3.FormattedMessage, {\n                    id: 'xpack.idxMgmt.indexTable.systemIndicesSwitchLabel',\n                    defaultMessage: 'Include system indices'\n                  })\n                })\n              )\n            )\n          )\n        ),\n        _react2.default.createElement(_eui.EuiSpacer, null),\n        this.renderBanners(),\n        _react2.default.createElement(\n          _eui.EuiFlexGroup,\n          { gutterSize: 'l', alignItems: 'center' },\n          atLeastOneItemSelected ? _react2.default.createElement(\n            _eui.EuiFlexItem,\n            { grow: false },\n            _react2.default.createElement(_reactRouterDom.Route, {\n              key: 'menu',\n              render: function render() {\n                return _react2.default.createElement(_components.IndexActionsContextMenu, {\n                  indexNames: Object.keys(selectedIndicesMap),\n                  resetSelection: function resetSelection() {\n                    _this5.setState({ selectedIndicesMap: {} });\n                  }\n                });\n              }\n            })\n          ) : null,\n          indicesLoading && allIndices.length === 0 ? null : _react2.default.createElement(\n            _react.Fragment,\n            null,\n            _react2.default.createElement(\n              _eui.EuiFlexItem,\n              null,\n              _react2.default.createElement(_eui.EuiSearchBar, {\n                filters: this.getFilters().length > 0 ? this.getFilters() : null,\n                defaultQuery: filter,\n                query: filter,\n                box: {\n                  incremental: true,\n                  placeholder: intl.formatMessage({\n                    id: 'xpack.idxMgmt.indexTable.systemIndicesSearchInputPlaceholder',\n                    defaultMessage: 'Search'\n                  })\n                },\n                'aria-label': intl.formatMessage({\n                  id: 'xpack.idxMgmt.indexTable.systemIndicesSearchIndicesAriaLabel',\n                  defaultMessage: 'Search indices'\n                }),\n                'data-test-subj': 'indexTableFilterInput',\n                onChange: this.onFilterChanged\n              })\n            ),\n            _react2.default.createElement(\n              _eui.EuiFlexItem,\n              { grow: false },\n              _react2.default.createElement(\n                _eui.EuiButton,\n                {\n                  isLoading: indicesLoading,\n                  color: 'secondary',\n                  onClick: function onClick() {\n                    loadIndices();\n                  },\n                  iconType: 'refresh'\n                },\n                _react2.default.createElement(_react3.FormattedMessage, {\n                  id: 'xpack.idxMgmt.indexTable.reloadIndicesButton',\n                  defaultMessage: 'Reload indices'\n                })\n              )\n            )\n          )\n        ),\n        this.renderFilterError(),\n        _react2.default.createElement(_eui.EuiSpacer, { size: 'm' }),\n        indices.length > 0 ? _react2.default.createElement(\n          'div',\n          { style: { maxWidth: '100%', overflow: 'auto' } },\n          _react2.default.createElement(\n            _eui.EuiTable,\n            { className: 'indTable' },\n            _react2.default.createElement(\n              _eui.EuiTableHeader,\n              null,\n              _react2.default.createElement(\n                _eui.EuiTableHeaderCellCheckbox,\n                null,\n                _react2.default.createElement(_eui.EuiCheckbox, {\n                  id: 'selectAllIndexes',\n                  checked: this.areAllItemsSelected(),\n                  onChange: this.toggleAll,\n                  type: 'inList'\n                })\n              ),\n              this.buildHeader()\n            ),\n            _react2.default.createElement(\n              _eui.EuiTableBody,\n              null,\n              this.buildRows()\n            )\n          )\n        ) : emptyState,\n        _react2.default.createElement(_eui.EuiSpacer, { size: 'm' }),\n        indices.length > 0 ? this.renderPager() : null\n      );\n    }\n  }]);\n\n  return IndexTableUi;\n}(_react.Component);\n\nvar IndexTable = exports.IndexTable = (0, _react3.injectI18n)(IndexTableUi);",null]}