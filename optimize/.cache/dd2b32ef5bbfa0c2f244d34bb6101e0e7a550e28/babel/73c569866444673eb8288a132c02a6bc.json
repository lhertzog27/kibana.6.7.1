{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/xpack_main/public/services/telemetry_opt_in.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/xpack_main/public/services/telemetry_opt_in.js","mtime":1567631712360},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TelemetryOptInProvider = TelemetryOptInProvider;\n\nvar _moment = require('moment');\n\nvar _moment2 = _interopRequireDefault(_moment);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            */\n\nfunction TelemetryOptInProvider($injector, chrome) {\n  var _this = this;\n\n  var Notifier = $injector.get('Notifier');\n  var notify = new Notifier();\n  var currentOptInStatus = $injector.get('telemetryOptedIn');\n\n  return {\n    getOptIn: function getOptIn() {\n      return currentOptInStatus;\n    },\n    setOptIn: function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(enabled) {\n        var $http;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                $http = $injector.get('$http');\n                _context.prev = 1;\n                _context.next = 4;\n                return $http.post(chrome.addBasePath('/api/telemetry/v1/optIn'), { enabled: enabled });\n\n              case 4:\n                currentOptInStatus = enabled;\n                _context.next = 11;\n                break;\n\n              case 7:\n                _context.prev = 7;\n                _context.t0 = _context['catch'](1);\n\n                notify.error(_context.t0);\n                return _context.abrupt('return', false);\n\n              case 11:\n                return _context.abrupt('return', true);\n\n              case 12:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, _this, [[1, 7]]);\n      }));\n\n      function setOptIn(_x) {\n        return _ref.apply(this, arguments);\n      }\n\n      return setOptIn;\n    }(),\n    fetchExample: function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        var $http;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                $http = $injector.get('$http');\n                return _context2.abrupt('return', $http.post(chrome.addBasePath('/api/telemetry/v1/clusters/_stats'), {\n                  timeRange: {\n                    min: (0, _moment2.default)().subtract(20, 'minutes').toISOString(),\n                    max: (0, _moment2.default)().toISOString()\n                  }\n                }));\n\n              case 2:\n              case 'end':\n                return _context2.stop();\n            }\n          }\n        }, _callee2, _this);\n      }));\n\n      function fetchExample() {\n        return _ref2.apply(this, arguments);\n      }\n\n      return fetchExample;\n    }()\n  };\n}",null]}