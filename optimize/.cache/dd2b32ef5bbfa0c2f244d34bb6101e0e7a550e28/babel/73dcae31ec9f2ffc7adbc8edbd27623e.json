{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/index_lifecycle_management/public/extend_index_management/index.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/index_lifecycle_management/public/extend_index_management/index.js","mtime":1567631711964},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.addAllExtensions = exports.ilmFilterExtension = exports.ilmSummaryExtension = exports.ilmBannerExtension = exports.addLifecyclePolicyActionExtension = exports.removeLifecyclePolicyActionExtension = exports.retryLifecycleActionExtension = undefined;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _index_lifecycle_summary = require('./components/index_lifecycle_summary');\n\nvar _add_lifecycle_confirm_modal = require('./components/add_lifecycle_confirm_modal');\n\nvar _remove_lifecycle_confirm_modal = require('./components/remove_lifecycle_confirm_modal');\n\nvar _lodash = require('lodash');\n\nvar _i18n = require('@kbn/i18n');\n\nvar _index_management_extensions = require('../../../index_management/public/index_management_extensions');\n\nvar _api = require('../services/api');\n\nvar _eui = require('@elastic/eui');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar stepPath = 'ilm.step'; /*\n                            * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                            * or more contributor license agreements. Licensed under the Elastic License;\n                            * you may not use this file except in compliance with the Elastic License.\n                            */\nvar retryLifecycleActionExtension = exports.retryLifecycleActionExtension = function retryLifecycleActionExtension(indices) {\n  var allHaveErrors = (0, _lodash.every)(indices, function (index) {\n    return index.ilm && index.ilm.failed_step;\n  });\n  if (!allHaveErrors) {\n    return null;\n  }\n  var indexNames = indices.map(function (_ref) {\n    var name = _ref.name;\n    return name;\n  });\n  return {\n    requestMethod: _api.retryLifecycleForIndex,\n    icon: 'play',\n    indexNames: [indexNames],\n    buttonLabel: _i18n.i18n.translate('xpack.indexLifecycleMgmt.retryIndexLifecycleActionButtonLabel', {\n      defaultMessage: 'Retry lifecycle step'\n    }),\n    successMessage: _i18n.i18n.translate('xpack.indexLifecycleMgmt.retryIndexLifecycleAction.retriedLifecycleMessage', {\n      defaultMessage: 'Called retry lifecycle step for: {indexNames}',\n      values: { indexNames: indexNames.map(function (indexName) {\n          return '\"' + indexName + '\"';\n        }).join(', ') }\n    })\n  };\n};\n\nvar removeLifecyclePolicyActionExtension = exports.removeLifecyclePolicyActionExtension = function removeLifecyclePolicyActionExtension(indices, reloadIndices) {\n  var allHaveIlm = (0, _lodash.every)(indices, function (index) {\n    return index.ilm && index.ilm.managed;\n  });\n  if (!allHaveIlm) {\n    return null;\n  }\n  var indexNames = indices.map(function (_ref2) {\n    var name = _ref2.name;\n    return name;\n  });\n  return {\n    renderConfirmModal: function renderConfirmModal(closeModal, httpClient) {\n      return _react2.default.createElement(_remove_lifecycle_confirm_modal.RemoveLifecyclePolicyConfirmModal, {\n        indexNames: indexNames,\n        closeModal: closeModal,\n        httpClient: httpClient,\n        reloadIndices: reloadIndices\n      });\n    },\n    icon: 'stopFilled',\n    indexNames: [indexNames],\n    buttonLabel: _i18n.i18n.translate('xpack.indexLifecycleMgmt.removeIndexLifecycleActionButtonLabel', {\n      defaultMessage: 'Remove lifecycle policy'\n    })\n  };\n};\n\nvar addLifecyclePolicyActionExtension = exports.addLifecyclePolicyActionExtension = function addLifecyclePolicyActionExtension(indices, reloadIndices) {\n  if (indices.length !== 1) {\n    return null;\n  }\n  var index = indices[0];\n  var hasIlm = index.ilm && index.ilm.managed;\n\n  if (hasIlm) {\n    return null;\n  }\n  var indexName = index.name;\n  return {\n    renderConfirmModal: function renderConfirmModal(closeModal, httpClient) {\n      return _react2.default.createElement(_add_lifecycle_confirm_modal.AddLifecyclePolicyConfirmModal, {\n        indexName: indexName,\n        closeModal: closeModal,\n        httpClient: httpClient,\n        index: index,\n        reloadIndices: reloadIndices\n      });\n    },\n    icon: 'plusInCircle',\n    buttonLabel: _i18n.i18n.translate('xpack.indexLifecycleMgmt.addLifecyclePolicyActionButtonLabel', {\n      defaultMessage: 'Add lifecycle policy'\n    })\n  };\n};\n\nvar ilmBannerExtension = exports.ilmBannerExtension = function ilmBannerExtension(indices) {\n  var Query = _eui.EuiSearchBar.Query;\n\n  if (!indices.length) {\n    return null;\n  }\n  var indicesWithLifecycleErrors = indices.filter(function (index) {\n    return (0, _lodash.get)(index, stepPath) === 'ERROR';\n  });\n  var numIndicesWithLifecycleErrors = indicesWithLifecycleErrors.length;\n  if (!numIndicesWithLifecycleErrors) {\n    return null;\n  }\n  return {\n    type: 'warning',\n    filter: Query.parse(stepPath + ':ERROR'),\n    filterLabel: _i18n.i18n.translate('xpack.indexLifecycleMgmt.indexMgmtBanner.filterLabel', {\n      defaultMessage: 'Show errors'\n    }),\n    title: _i18n.i18n.translate('xpack.indexLifecycleMgmt.indexMgmtBanner.errorMessage', {\n      defaultMessage: '{ numIndicesWithLifecycleErrors, number}\\n          {numIndicesWithLifecycleErrors, plural, one {index has} other {indices have} }\\n          lifecycle errors',\n      values: { numIndicesWithLifecycleErrors: numIndicesWithLifecycleErrors }\n    })\n  };\n};\n\nvar ilmSummaryExtension = exports.ilmSummaryExtension = function ilmSummaryExtension(index) {\n  return _react2.default.createElement(_index_lifecycle_summary.IndexLifecycleSummary, { index: index });\n};\n\nvar ilmFilterExtension = exports.ilmFilterExtension = function ilmFilterExtension(indices) {\n  var hasIlm = (0, _lodash.any)(indices, function (index) {\n    return index.ilm && index.ilm.managed;\n  });\n  if (!hasIlm) {\n    return [];\n  } else {\n    return [{\n      type: 'field_value_selection',\n      name: _i18n.i18n.translate('xpack.indexLifecycleMgmt.indexMgmtFilter.lifecycleStatusLabel', {\n        defaultMessage: 'Lifecycle status'\n      }),\n      multiSelect: false,\n      field: 'ilm.managed',\n      options: [{\n        value: true,\n        view: _i18n.i18n.translate('xpack.indexLifecycleMgmt.indexMgmtFilter.managedLabel', {\n          defaultMessage: 'Managed'\n        })\n      }, {\n        value: false,\n        view: _i18n.i18n.translate('xpack.indexLifecycleMgmt.indexMgmtFilter.unmanagedLabel', {\n          defaultMessage: 'Unmanaged'\n        })\n      }]\n    }, {\n      type: 'field_value_selection',\n      field: 'ilm.phase',\n      name: _i18n.i18n.translate('xpack.indexLifecycleMgmt.indexMgmtFilter.lifecyclePhaseLabel', {\n        defaultMessage: 'Lifecycle phase'\n      }),\n      multiSelect: 'or',\n      options: [{\n        value: 'hot',\n        view: _i18n.i18n.translate('xpack.indexLifecycleMgmt.indexMgmtFilter.hotLabel', {\n          defaultMessage: 'Hot'\n        })\n      }, {\n        value: 'warm',\n        view: _i18n.i18n.translate('xpack.indexLifecycleMgmt.indexMgmtFilter.warmLabel', {\n          defaultMessage: 'Warm'\n        })\n      }, {\n        value: 'cold',\n        view: _i18n.i18n.translate('xpack.indexLifecycleMgmt.indexMgmtFilter.coldLabel', {\n          defaultMessage: 'Cold'\n        })\n      }, {\n        value: 'delete',\n        view: _i18n.i18n.translate('xpack.indexLifecycleMgmt.indexMgmtFilter.deleteLabel', {\n          defaultMessage: 'Delete'\n        })\n      }]\n    }];\n  }\n};\n\nvar addAllExtensions = exports.addAllExtensions = function addAllExtensions() {\n  (0, _index_management_extensions.addActionExtension)(retryLifecycleActionExtension);\n  (0, _index_management_extensions.addActionExtension)(removeLifecyclePolicyActionExtension);\n  (0, _index_management_extensions.addActionExtension)(addLifecyclePolicyActionExtension);\n\n  (0, _index_management_extensions.addBannerExtension)(ilmBannerExtension);\n  (0, _index_management_extensions.addSummaryExtension)(ilmSummaryExtension);\n  (0, _index_management_extensions.addFilterExtension)(ilmFilterExtension);\n};",null]}