{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/ui/public/agg_response/tabify/_get_columns.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/agg_response/tabify/_get_columns.js","mtime":1567631711693},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.tabifyGetColumns = tabifyGetColumns;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar getColumn = function getColumn(agg, i) {\n  return {\n    aggConfig: agg,\n    id: 'col-' + i + '-' + agg.id,\n    name: agg.makeLabel()\n  };\n};\n\n/**\n * Builds tabify columns.\n *\n * @param {AggConfigs} aggs - the agg configs object to which the aggregation response correlates\n * @param {boolean} minimalColumns - setting to true will only return a column for the last bucket/metric instead of one for each level\n */\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nfunction tabifyGetColumns(aggs, minimalColumns) {\n\n  // pick the columns\n  if (minimalColumns) {\n    return aggs.map(function (agg, i) {\n      return getColumn(agg, i);\n    });\n  }\n\n  // supposed to be bucket,...metrics,bucket,...metrics\n  var columns = [];\n\n  // separate the metrics\n  var grouped = _lodash2.default.groupBy(aggs, function (agg) {\n    return agg.type.type;\n  });\n\n  if (!grouped.buckets) {\n    // return just the metrics, in column format\n    return grouped.metrics.map(function (agg, i) {\n      return getColumn(agg, i);\n    });\n  }\n\n  var columnIndex = 0;\n  // return the buckets, and after each place all of the metrics\n  grouped.buckets.forEach(function (agg) {\n    columns.push(getColumn(agg, columnIndex++));\n    grouped.metrics.forEach(function (metric) {\n      columns.push(getColumn(metric, columnIndex++));\n    });\n  });\n\n  return columns;\n}",null]}