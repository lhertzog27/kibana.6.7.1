{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/security/public/views/account/account.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/security/public/views/account/account.js","mtime":1567631712298},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _notify = require('ui/notify');\n\nvar _routes = require('ui/routes');\n\nvar _routes2 = _interopRequireDefault(_routes);\n\nvar _account = require('./account.html');\n\nvar _account2 = _interopRequireDefault(_account);\n\nrequire('../management/change_password_form/change_password_form');\n\nrequire('../../services/shield_user');\n\nvar _gate_keeper = require('plugins/xpack_main/services/gate_keeper');\n\nvar _constants = require('../../../common/constants');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\n_routes2.default.when('/account', {\n  template: _account2.default,\n  resolve: {\n    tribeRedirect: function tribeRedirect(Private) {\n      var gateKeeper = Private(_gate_keeper.GateKeeperProvider);\n      gateKeeper.redirectAndNotifyIfTribe();\n    },\n    user: function user(ShieldUser) {\n      return ShieldUser.getCurrent().$promise;\n    }\n  },\n  controllerAs: 'accountController',\n  controller: function controller($scope, $route, Notifier, i18n) {\n    $scope.user = $route.current.locals.user;\n\n    var notifier = new Notifier();\n\n    var authenticationRealm = $scope.user.authentication_realm;\n\n    $scope.showChangePassword = _constants.REALMS_ELIGIBLE_FOR_PASSWORD_CHANGE.includes(authenticationRealm.type);\n\n    $scope.saveNewPassword = function (newPassword, currentPassword, onSuccess, onIncorrectPassword) {\n      $scope.user.newPassword = newPassword;\n      if (currentPassword) {\n        // If the currentPassword is null, we shouldn't send it.\n        $scope.user.password = currentPassword;\n      }\n\n      $scope.user.$changePassword().then(function () {\n        return _notify.toastNotifications.addSuccess({\n          title: i18n('xpack.security.account.updatedPasswordTitle', {\n            defaultMessage: 'Updated password'\n          })\n        });\n      }).then(onSuccess).catch(function (error) {\n        if (error.status === 401) {\n          onIncorrectPassword();\n        } else notifier.error(_lodash2.default.get(error, 'data.message'));\n      });\n    };\n\n    this.getEmail = function () {\n      if ($scope.user.email) return $scope.user.email;\n      return i18n('xpack.security.account.noEmailMessage', {\n        defaultMessage: '(No email)'\n      });\n    };\n  }\n});",null]}