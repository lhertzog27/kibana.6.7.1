{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/components/anomalies_table/links_menu.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/components/anomalies_table/links_menu.js","mtime":1567631712028},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LinksMenu = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _class, _temp; /*\n                    * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                    * or more contributor license agreements. Licensed under the Elastic License;\n                    * you may not use this file except in compliance with the Elastic License.\n                    */\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _moment = require('moment');\n\nvar _moment2 = _interopRequireDefault(_moment);\n\nvar _risonNode = require('rison-node');\n\nvar _risonNode2 = _interopRequireDefault(_risonNode);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _eui = require('@elastic/eui');\n\nvar _react3 = require('@kbn/i18n/react');\n\nvar _chrome = require('ui/chrome');\n\nvar _chrome2 = _interopRequireDefault(_chrome);\n\nvar _notify = require('ui/notify');\n\nvar _field_types = require('../../../common/constants/field_types');\n\nvar _check_privilege = require('../../privilege/check_privilege');\n\nvar _anomaly_utils = require('../../../common/util/anomaly_utils');\n\nvar _parse_interval = require('../../../common/util/parse_interval');\n\nvar _mapping_service = require('../../services/mapping_service');\n\nvar _ml_api_service = require('../../services/ml_api_service');\n\nvar _job_service = require('../../services/job_service');\n\nvar _custom_url_utils = require('../../util/custom_url_utils');\n\nvar _index_utils = require('../../util/index_utils');\n\nvar _string_utils = require('../../util/string_utils');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/*\n * Component for rendering the links menu inside a cell in the anomalies table.\n */\nvar LinksMenu = exports.LinksMenu = (0, _react3.injectI18n)((_temp = _class = function (_Component) {\n  _inherits(LinksMenu, _Component);\n\n  function LinksMenu(props) {\n    _classCallCheck(this, LinksMenu);\n\n    var _this = _possibleConstructorReturn(this, (LinksMenu.__proto__ || Object.getPrototypeOf(LinksMenu)).call(this, props));\n\n    _this.openCustomUrl = function (customUrl) {\n      var _this$props = _this.props,\n          anomaly = _this$props.anomaly,\n          interval = _this$props.interval,\n          isAggregatedData = _this$props.isAggregatedData,\n          intl = _this$props.intl;\n\n\n      console.log('Anomalies Table - open customUrl for record:', anomaly);\n\n      // If url_value contains $earliest$ and $latest$ tokens, add in times to the source record.\n      // Create a copy of the record as we are adding properties into it.\n      var record = _lodash2.default.cloneDeep(anomaly.source);\n      var timestamp = record.timestamp;\n      var configuredUrlValue = customUrl.url_value;\n      var timeRangeInterval = (0, _parse_interval.parseInterval)(customUrl.time_range);\n      if (configuredUrlValue.includes('$earliest$')) {\n        var earliestMoment = (0, _moment2.default)(timestamp);\n        if (timeRangeInterval !== null) {\n          earliestMoment.subtract(timeRangeInterval);\n        } else {\n          earliestMoment = (0, _moment2.default)(timestamp).startOf(interval);\n          if (interval === 'hour') {\n            // Start from the previous hour.\n            earliestMoment.subtract(1, 'h');\n          }\n        }\n        record.earliest = earliestMoment.toISOString(); // e.g. 2016-02-08T16:00:00.000Z\n      }\n\n      if (configuredUrlValue.includes('$latest$')) {\n        var latestMoment = (0, _moment2.default)(timestamp).add(record.bucket_span, 's');\n        if (timeRangeInterval !== null) {\n          latestMoment.add(timeRangeInterval);\n        } else {\n          if (isAggregatedData === true) {\n            latestMoment = (0, _moment2.default)(timestamp).endOf(interval);\n            if (interval === 'hour') {\n              // Show to the end of the next hour.\n              latestMoment.add(1, 'h'); // e.g. 2016-02-08T18:59:59.999Z\n            }\n          }\n        }\n        record.latest = latestMoment.toISOString();\n      }\n\n      // If url_value contains $mlcategoryterms$ or $mlcategoryregex$, add in the\n      // terms and regex for the selected categoryId to the source record.\n      if ((configuredUrlValue.includes('$mlcategoryterms$') || configuredUrlValue.includes('$mlcategoryregex$')) && _lodash2.default.has(record, 'mlcategory')) {\n        var jobId = record.job_id;\n\n        // mlcategory in the source record will be an array\n        // - use first value (will only ever be more than one if influenced by category other than by/partition/over).\n        var categoryId = record.mlcategory[0];\n\n        _ml_api_service.ml.results.getCategoryDefinition(jobId, categoryId).then(function (resp) {\n          // Prefix each of the terms with '+' so that the Elasticsearch Query String query\n          // run in a drilldown Kibana dashboard has to match on all terms.\n          var termsArray = resp.terms.split(' ').map(function (term) {\n            return '+' + term;\n          });\n          record.mlcategoryterms = termsArray.join(' ');\n          record.mlcategoryregex = resp.regex;\n\n          // Replace any tokens in the configured url_value with values from the source record,\n          // and then open link in a new tab/window.\n          var urlPath = (0, _string_utils.replaceStringTokens)(customUrl.url_value, record, true);\n          window.open(urlPath, '_blank');\n        }).catch(function (resp) {\n          console.log('openCustomUrl(): error loading categoryDefinition:', resp);\n          _notify.toastNotifications.addDanger(intl.formatMessage({\n            id: 'xpack.ml.anomaliesTable.linksMenu.unableToOpenLinkErrorMessage',\n            defaultMessage: 'Unable to open link as an error occurred loading details on category ID {categoryId}'\n          }, {\n            categoryId: categoryId\n          }));\n        });\n      } else {\n        // Replace any tokens in the configured url_value with values from the source record,\n        // and then open link in a new tab/window.\n        var urlPath = (0, _custom_url_utils.getUrlForRecord)(customUrl, record);\n        window.open(urlPath, '_blank');\n      }\n    };\n\n    _this.viewSeries = function () {\n      var record = _this.props.anomaly.source;\n      var bounds = _this.props.timefilter.getActiveBounds();\n      var from = bounds.min.toISOString(); // e.g. 2016-02-08T16:00:00.000Z\n      var to = bounds.max.toISOString();\n\n      // Zoom to show 50 buckets either side of the record.\n      var recordTime = (0, _moment2.default)(record.timestamp);\n      var zoomFrom = recordTime.subtract(50 * record.bucket_span, 's').toISOString();\n      var zoomTo = recordTime.add(100 * record.bucket_span, 's').toISOString();\n\n      // Extract the by, over and partition fields for the record.\n      var entityCondition = {};\n\n      if (_lodash2.default.has(record, 'partition_field_value')) {\n        entityCondition[record.partition_field_name] = record.partition_field_value;\n      }\n\n      if (_lodash2.default.has(record, 'over_field_value')) {\n        entityCondition[record.over_field_name] = record.over_field_value;\n      }\n\n      if (_lodash2.default.has(record, 'by_field_value')) {\n        // Note that analyses with by and over fields, will have a top-level by_field_name,\n        // but the by_field_value(s) will be in the nested causes array.\n        // TODO - drilldown from cause in expanded row only?\n        entityCondition[record.by_field_name] = record.by_field_value;\n      }\n\n      // Use rison to build the URL .\n      var _g = _risonNode2.default.encode({\n        ml: {\n          jobIds: [record.job_id]\n        },\n        refreshInterval: {\n          display: 'Off',\n          pause: false,\n          value: 0\n        },\n        time: {\n          from: from,\n          to: to,\n          mode: 'absolute'\n        }\n      });\n\n      var _a = _risonNode2.default.encode({\n        mlTimeSeriesExplorer: {\n          zoom: {\n            from: zoomFrom,\n            to: zoomTo\n          },\n          detectorIndex: record.detector_index,\n          entities: entityCondition\n        },\n        filters: [],\n        query: {\n          query_string: {\n            analyze_wildcard: true,\n            query: '*'\n          }\n        }\n      });\n\n      // Need to encode the _a parameter in case any entities contain unsafe characters such as '+'.\n      var path = _chrome2.default.getBasePath() + '/app/ml#/timeseriesexplorer';\n      path += '?_g=' + _g + '&_a=' + encodeURIComponent(_a);\n      window.open(path, '_blank');\n    };\n\n    _this.viewExamples = function () {\n      var intl = _this.props.intl;\n\n      var categoryId = _this.props.anomaly.entityValue;\n      var record = _this.props.anomaly.source;\n      var indexPatterns = (0, _index_utils.getIndexPatterns)();\n\n      var job = _job_service.mlJobService.getJob(_this.props.anomaly.jobId);\n      if (job === undefined) {\n        console.log('viewExamples(): no job found with ID: ' + _this.props.anomaly.jobId);\n        _notify.toastNotifications.addDanger(intl.formatMessage({\n          id: 'xpack.ml.anomaliesTable.linksMenu.unableToViewExamplesErrorMessage',\n          defaultMessage: 'Unable to view examples as no details could be found for job ID {jobId}'\n        }, {\n          jobId: _this.props.anomaly.jobId\n        }));\n        return;\n      }\n      var categorizationFieldName = job.analysis_config.categorization_field_name;\n      var datafeedIndices = job.datafeed_config.indices;\n      // Find the type of the categorization field i.e. text (preferred) or keyword.\n      // Uses the first matching field found in the list of indices in the datafeed_config.\n      // attempt to load the field type using each index. we have to do it this way as _field_caps\n      // doesn't specify which index a field came from unless there is a clash.\n      var i = 0;\n      findFieldType(datafeedIndices[i]);\n\n      function findFieldType(index) {\n        (0, _mapping_service.getFieldTypeFromMapping)(index, categorizationFieldName).then(function (resp) {\n          if (resp !== '') {\n            createAndOpenUrl(index, resp);\n          } else {\n            i++;\n            if (i < datafeedIndices.length) {\n              findFieldType(datafeedIndices[i]);\n            } else {\n              error();\n            }\n          }\n        }).catch(function () {\n          error();\n        });\n      }\n\n      function createAndOpenUrl(index, categorizationFieldType) {\n        // Find the ID of the index pattern with a title attribute which matches the\n        // index configured in the datafeed. If a Kibana index pattern has not been created\n        // for this index, then the user will see a warning message on the Discover tab advising\n        // them that no matching index pattern has been configured.\n        var indexPatternId = index;\n        for (var j = 0; j < indexPatterns.length; j++) {\n          if (indexPatterns[j].get('title') === index) {\n            indexPatternId = indexPatterns[j].id;\n            break;\n          }\n        }\n\n        // Get the definition of the category and use the terms or regex to view the\n        // matching events in the Kibana Discover tab depending on whether the\n        // categorization field is of mapping type text (preferred) or keyword.\n        _ml_api_service.ml.results.getCategoryDefinition(record.job_id, categoryId).then(function (resp) {\n          var query = null;\n          // Build query using categorization regex (if keyword type) or terms (if text type).\n          // Check for terms or regex in case categoryId represents an anomaly from the absence of the\n          // categorization field in documents (usually indicated by a categoryId of -1).\n          if (categorizationFieldType === _field_types.ES_FIELD_TYPES.KEYWORD) {\n            if (resp.regex) {\n              query = categorizationFieldName + ':/' + resp.regex + '/';\n            }\n          } else {\n            if (resp.terms) {\n              query = categorizationFieldName + ':' + resp.terms.split(' ').join(' AND ' + categorizationFieldName + ':');\n            }\n          }\n\n          var recordTime = (0, _moment2.default)(record.timestamp);\n          var from = recordTime.toISOString();\n          var to = recordTime.add(record.bucket_span, 's').toISOString();\n\n          // Use rison to build the URL .\n          var _g = _risonNode2.default.encode({\n            refreshInterval: {\n              display: 'Off',\n              pause: false,\n              value: 0\n            },\n            time: {\n              from: from,\n              to: to,\n              mode: 'absolute'\n            }\n          });\n\n          var appStateProps = {\n            index: indexPatternId,\n            filters: []\n          };\n          if (query !== null) {\n            appStateProps.query = {\n              query_string: {\n                analyze_wildcard: true,\n                query: query\n              }\n            };\n          }\n          var _a = _risonNode2.default.encode(appStateProps);\n\n          // Need to encode the _a parameter as it will contain characters such as '+' if using the regex.\n          var path = _chrome2.default.getBasePath();\n          path += '/app/kibana#/discover';\n          path += '?_g=' + _g;\n          path += '&_a=' + encodeURIComponent(_a);\n          window.open(path, '_blank');\n        }).catch(function (resp) {\n          console.log('viewExamples(): error loading categoryDefinition:', resp);\n          _notify.toastNotifications.addDanger(intl.formatMessage({\n            id: 'xpack.ml.anomaliesTable.linksMenu.loadingDetailsErrorMessage',\n            defaultMessage: 'Unable to view examples as an error occurred loading details on category ID {categoryId}'\n          }, {\n            categoryId: categoryId\n          }));\n        });\n      }\n\n      function error() {\n        console.log('viewExamples(): error finding type of field ' + categorizationFieldName + ' in indices:', datafeedIndices);\n        _notify.toastNotifications.addDanger(intl.formatMessage({\n          id: 'xpack.ml.anomaliesTable.linksMenu.noMappingCouldBeFoundErrorMessage',\n          defaultMessage: 'Unable to view examples of documents with mlcategory {categoryId} ' + 'as no mapping could be found for the categorization field {categorizationFieldName}'\n        }, {\n          categoryId: categoryId,\n          categorizationFieldName: categorizationFieldName\n        }));\n      }\n    };\n\n    _this.onButtonClick = function () {\n      _this.setState(function (prevState) {\n        return {\n          isPopoverOpen: !prevState.isPopoverOpen\n        };\n      });\n    };\n\n    _this.closePopover = function () {\n      _this.setState({\n        isPopoverOpen: false\n      });\n    };\n\n    _this.state = {\n      isPopoverOpen: false,\n      toasts: []\n    };\n    return _this;\n  }\n\n  _createClass(LinksMenu, [{\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var _props = this.props,\n          anomaly = _props.anomaly,\n          showViewSeriesLink = _props.showViewSeriesLink,\n          intl = _props.intl;\n\n      var canConfigureRules = (0, _anomaly_utils.isRuleSupported)(anomaly.source) && (0, _check_privilege.checkPermission)('canUpdateJob');\n\n      var button = _react2.default.createElement(_eui.EuiButtonIcon, {\n        size: 's',\n        color: 'text',\n        onClick: this.onButtonClick,\n        iconType: 'gear',\n        'aria-label': intl.formatMessage({\n          id: 'xpack.ml.anomaliesTable.linksMenu.selectActionAriaLabel',\n          defaultMessage: 'Select action'\n        })\n      });\n\n      var items = [];\n      if (anomaly.customUrls !== undefined) {\n        anomaly.customUrls.forEach(function (customUrl, index) {\n          items.push(_react2.default.createElement(\n            _eui.EuiContextMenuItem,\n            {\n              key: 'custom_url_' + index,\n              icon: 'popout',\n              onClick: function onClick() {\n                _this2.closePopover();_this2.openCustomUrl(customUrl);\n              }\n            },\n            customUrl.url_name\n          ));\n        });\n      }\n\n      if (showViewSeriesLink === true && anomaly.isTimeSeriesViewDetector === true) {\n        items.push(_react2.default.createElement(\n          _eui.EuiContextMenuItem,\n          {\n            key: 'view_series',\n            icon: 'popout',\n            onClick: function onClick() {\n              _this2.closePopover();_this2.viewSeries();\n            }\n          },\n          _react2.default.createElement(_react3.FormattedMessage, {\n            id: 'xpack.ml.anomaliesTable.linksMenu.viewSeriesLabel',\n            defaultMessage: 'View series'\n          })\n        ));\n      }\n\n      if (anomaly.entityName === 'mlcategory') {\n        items.push(_react2.default.createElement(\n          _eui.EuiContextMenuItem,\n          {\n            key: 'view_examples',\n            icon: 'popout',\n            onClick: function onClick() {\n              _this2.closePopover();_this2.viewExamples();\n            }\n          },\n          _react2.default.createElement(_react3.FormattedMessage, {\n            id: 'xpack.ml.anomaliesTable.linksMenu.viewExamplesLabel',\n            defaultMessage: 'View examples'\n          })\n        ));\n      }\n\n      if (canConfigureRules) {\n        items.push(_react2.default.createElement(\n          _eui.EuiContextMenuItem,\n          {\n            key: 'create_rule',\n            icon: 'controlsHorizontal',\n            onClick: function onClick() {\n              _this2.closePopover();_this2.props.showRuleEditorFlyout(anomaly);\n            }\n          },\n          _react2.default.createElement(_react3.FormattedMessage, {\n            id: 'xpack.ml.anomaliesTable.linksMenu.configureRulesLabel',\n            defaultMessage: 'Configure rules'\n          })\n        ));\n      }\n\n      return _react2.default.createElement(\n        _eui.EuiPopover,\n        {\n          id: 'singlePanel',\n          button: button,\n          isOpen: this.state.isPopoverOpen,\n          closePopover: this.closePopover,\n          panelPaddingSize: 'none',\n          anchorPosition: 'downLeft'\n        },\n        _react2.default.createElement(_eui.EuiContextMenuPanel, {\n          items: items\n        })\n      );\n    }\n  }]);\n\n  return LinksMenu;\n}(_react.Component), _class.propTypes = {\n  anomaly: _propTypes2.default.object.isRequired,\n  showViewSeriesLink: _propTypes2.default.bool,\n  isAggregatedData: _propTypes2.default.bool,\n  interval: _propTypes2.default.string,\n  timefilter: _propTypes2.default.object.isRequired,\n  showRuleEditorFlyout: _propTypes2.default.func\n}, _temp));",null]}