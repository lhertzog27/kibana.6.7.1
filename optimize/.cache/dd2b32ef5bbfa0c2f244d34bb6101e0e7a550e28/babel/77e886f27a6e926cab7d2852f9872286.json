{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/common/util/parse_interval.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/common/util/parse_interval.js","mtime":1567631712025},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseInterval = parseInterval;\n\nvar _moment = require('moment');\n\nvar _moment2 = _interopRequireDefault(_moment);\n\nvar _datemath = require('@elastic/datemath');\n\nvar _datemath2 = _interopRequireDefault(_datemath);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Assume interval is in the form (value)(unit), such as \"1h\"\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nvar INTERVAL_STRING_RE = new RegExp('^([0-9]*)\\\\s*(' + _datemath2.default.units.join('|') + ')$');\n\n// moment.js is only designed to allow fractional values between 0 and 1\n// for units of hour or less.\nvar SUPPORT_ZERO_DURATION_UNITS = ['ms', 's', 'm', 'h'];\n\n// Parses an interval String, such as 7d, 1h or 30m to a moment duration.\n// Differs from the Kibana ui/utils/parse_interval in the following ways:\n// 1. A value-less interval such as 'm' is not allowed - in line with the ML back-end\n// not accepting such interval Strings for the bucket span of a job.\n// 2.  Zero length durations 0ms, 0s, 0m and 0h are accepted as-is.\n// Note that when adding or subtracting fractional durations, moment is only designed\n// to work with units less than 'day'.\n// 3. Fractional intervals e.g. 1.5h or 4.5d are not allowed, in line with the behaviour\n// of the Elasticsearch date histogram aggregation.\nfunction parseInterval(interval) {\n  var matches = String(interval).trim().match(INTERVAL_STRING_RE);\n  if (!Array.isArray(matches)) return null;\n  if (matches.length < 3) return null;\n\n  try {\n    var value = parseInt(matches[1]);\n    var unit = matches[2];\n\n    // In line with moment.js, only allow zero value intervals when the unit is less than 'day'.\n    // And check for isNaN as e.g. valueless 'm' will pass the regex test.\n    if (isNaN(value) || value < 1 && SUPPORT_ZERO_DURATION_UNITS.indexOf(unit) === -1) {\n      return null;\n    }\n\n    return _moment2.default.duration(value, unit);\n  } catch (e) {\n    return null;\n  }\n}",null]}