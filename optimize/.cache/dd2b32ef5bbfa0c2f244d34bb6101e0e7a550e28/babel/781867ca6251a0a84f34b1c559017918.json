{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/xpack_main/public/hacks/welcome_banner/handle_old_settings.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/xpack_main/public/hacks/welcome_banner/handle_old_settings.js","mtime":1567631712359},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.handleOldSettings = undefined;\n\n/**\n * Clean up any old, deprecated settings and determine if we should continue.\n *\n * This <em>will</em> update the latest telemetry setting if necessary.\n *\n * @param {Object} config The advanced settings config object.\n * @return {Boolean} {@code true} if the banner should still be displayed. {@code false} if the banner should not be displayed.\n */\nvar handleOldSettings = exports.handleOldSettings = function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(config, telemetryOptInProvider) {\n    var CONFIG_ALLOW_REPORT, CONFIG_SHOW_BANNER, oldAllowReportSetting, oldTelemetrySetting, legacyOptInValue, oldShowSetting;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            CONFIG_ALLOW_REPORT = 'xPackMonitoring:allowReport';\n            CONFIG_SHOW_BANNER = 'xPackMonitoring:showBanner';\n            oldAllowReportSetting = config.get(CONFIG_ALLOW_REPORT, null);\n            oldTelemetrySetting = config.get(_constants.CONFIG_TELEMETRY, null);\n            legacyOptInValue = null;\n\n\n            if (typeof oldTelemetrySetting === 'boolean') {\n              legacyOptInValue = oldTelemetrySetting;\n            } else if (typeof oldAllowReportSetting === 'boolean') {\n              legacyOptInValue = oldAllowReportSetting;\n            }\n\n            if (!(legacyOptInValue !== null)) {\n              _context.next = 16;\n              break;\n            }\n\n            _context.prev = 7;\n            _context.next = 10;\n            return telemetryOptInProvider.setOptIn(legacyOptInValue);\n\n          case 10:\n\n            // delete old keys once we've successfully changed the setting (if it fails, we just wait until next time)\n            config.remove(CONFIG_ALLOW_REPORT);\n            config.remove(CONFIG_SHOW_BANNER);\n            config.remove(_constants.CONFIG_TELEMETRY);\n\n          case 13:\n            _context.prev = 13;\n            return _context.abrupt('return', false);\n\n          case 16:\n            oldShowSetting = config.get(CONFIG_SHOW_BANNER, null);\n\n\n            if (oldShowSetting !== null) {\n              config.remove(CONFIG_SHOW_BANNER);\n            }\n\n            return _context.abrupt('return', true);\n\n          case 19:\n          case 'end':\n            return _context.stop();\n        }\n      }\n    }, _callee, this, [[7,, 13, 16]]);\n  }));\n\n  return function handleOldSettings(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar _constants = require('../../../common/constants');\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            */",null]}