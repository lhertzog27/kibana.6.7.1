{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/monitoring/public/views/base_eui_table_controller.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/monitoring/public/views/base_eui_table_controller.js","mtime":1567631712100},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MonitoringViewBaseEuiTableController = undefined;\n\nvar _ = require('./');\n\nvar _table = require('plugins/monitoring/components/table');\n\nvar _constants = require('../../common/constants');\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\n/**\n * Class to manage common instantiation behaviors in a view controller\n * And add persistent state to a table:\n * - page index: in table pagination, which page are we looking at\n * - filter text: what filter was entered in the table's filter bar\n * - sortKey: which column field of table data is used for sorting\n * - sortOrder: is sorting ordered ascending or descending\n *\n * This is expected to be extended, and behavior enabled using super();\n */\nvar MonitoringViewBaseEuiTableController = exports.MonitoringViewBaseEuiTableController = function (_MonitoringViewBaseCo) {\n  _inherits(MonitoringViewBaseEuiTableController, _MonitoringViewBaseCo);\n\n  /**\n   * Create a table view controller\n   * - used by parent class:\n   * @param {String} title - Title of the page\n   * @param {Function} getPageData - Function to fetch page data\n   * @param {Service} $injector - Angular dependency injection service\n   * @param {Service} $scope - Angular view data binding service\n   * @param {Boolean} options.enableTimeFilter - Whether to show the time filter\n   * @param {Boolean} options.enableAutoRefresh - Whether to show the auto refresh control\n   * - specific to this class:\n   * @param {String} storageKey - the namespace that will be used to keep the state data in the Monitoring localStorage object\n   *\n   */\n  function MonitoringViewBaseEuiTableController(args) {\n    _classCallCheck(this, MonitoringViewBaseEuiTableController);\n\n    var _this = _possibleConstructorReturn(this, (MonitoringViewBaseEuiTableController.__proto__ || Object.getPrototypeOf(MonitoringViewBaseEuiTableController)).call(this, args));\n\n    var storageKey = args.storageKey,\n        $injector = args.$injector;\n\n    var storage = $injector.get('localStorage');\n\n    var getLocalStorageData = (0, _table.euiTableStorageGetter)(storageKey);\n    var setLocalStorageData = (0, _table.euiTableStorageSetter)(storageKey);\n\n    var _getLocalStorageData = getLocalStorageData(storage),\n        page = _getLocalStorageData.page,\n        sort = _getLocalStorageData.sort;\n\n    _this.pagination = page || {\n      initialPageSize: 20,\n      pageSizeOptions: [5, 10, 20, 50]\n    };\n\n    _this.sorting = sort || {\n      sort: {\n        field: 'name',\n        direction: _constants.EUI_SORT_ASCENDING\n      }\n    };\n\n    _this.onTableChange = function (_ref) {\n      var page = _ref.page,\n          sort = _ref.sort;\n\n      setLocalStorageData(storage, {\n        page: page,\n        sort: {\n          sort: sort\n        }\n      });\n    };\n    return _this;\n  }\n\n  return MonitoringViewBaseEuiTableController;\n}(_.MonitoringViewBaseController);",null]}