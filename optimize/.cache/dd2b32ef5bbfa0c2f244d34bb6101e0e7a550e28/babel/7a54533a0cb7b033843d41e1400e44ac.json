{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/jobs/new_job/simple/components/watcher/watch.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/jobs/new_job/simple/components/watcher/watch.js","mtime":1567631712058},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.watch = undefined;\n\nvar _index_patterns = require('plugins/ml/../common/constants/index_patterns');\n\nvar watch = exports.watch = {\n  trigger: {\n    schedule: {\n      interval: '60s'\n    }\n  },\n  input: {\n    search: {\n      request: {\n        search_type: 'query_then_fetch',\n        indices: [_index_patterns.ML_RESULTS_INDEX_PATTERN],\n        types: [],\n        body: {\n          size: 0,\n          query: {\n            bool: {\n              filter: [{\n                term: {\n                  job_id: null\n                }\n              }, {\n                range: {\n                  timestamp: {\n                    gte: null\n                  }\n                }\n              }, {\n                terms: {\n                  result_type: ['bucket', 'record', 'influencer']\n                }\n              }]\n            }\n          },\n          aggs: {\n            bucket_results: {\n              filter: {\n                range: {\n                  anomaly_score: {\n                    gte: null\n                  }\n                }\n              },\n              aggs: {\n                top_bucket_hits: {\n                  top_hits: {\n                    sort: [{\n                      anomaly_score: {\n                        order: 'desc'\n                      }\n                    }],\n                    _source: {\n                      includes: ['job_id', 'result_type', 'timestamp', 'anomaly_score', 'is_interim']\n                    },\n                    size: 1,\n                    script_fields: {\n                      start: {\n                        script: {\n                          lang: 'painless',\n                          source: 'LocalDateTime.ofEpochSecond((doc[\"timestamp\"].date.getMillis()-((doc[\"bucket_span\"].value * 1000)\\n * params.padding)) / 1000, 0, ZoneOffset.UTC).toString()+\":00.000Z\"',\n                          params: {\n                            'padding': 10\n                          }\n                        }\n                      },\n                      end: {\n                        script: {\n                          lang: 'painless',\n                          source: 'LocalDateTime.ofEpochSecond((doc[\"timestamp\"].date.getMillis()+((doc[\"bucket_span\"].value * 1000)\\n * params.padding)) / 1000, 0, ZoneOffset.UTC).toString()+\":00.000Z\"',\n                          params: {\n                            'padding': 10\n                          }\n                        }\n                      },\n                      timestamp_epoch: {\n                        script: {\n                          lang: 'painless',\n                          source: 'doc[\"timestamp\"].date.getMillis()/1000'\n                        }\n                      },\n                      timestamp_iso8601: {\n                        script: {\n                          lang: 'painless',\n                          source: 'doc[\"timestamp\"].date'\n                        }\n                      },\n                      score: {\n                        script: {\n                          lang: 'painless',\n                          source: 'Math.round(doc[\"anomaly_score\"].value)'\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            },\n            influencer_results: {\n              filter: {\n                range: {\n                  influencer_score: {\n                    gte: 3\n                  }\n                }\n              },\n              aggs: {\n                top_influencer_hits: {\n                  top_hits: {\n                    sort: [{\n                      influencer_score: {\n                        order: 'desc'\n                      }\n                    }],\n                    _source: {\n                      includes: ['result_type', 'timestamp', 'influencer_field_name', 'influencer_field_value', 'influencer_score', 'isInterim']\n                    },\n                    size: 3,\n                    script_fields: {\n                      score: {\n                        script: {\n                          lang: 'painless',\n                          source: 'Math.round(doc[\"influencer_score\"].value)'\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            },\n            record_results: {\n              filter: {\n                range: {\n                  record_score: {\n                    gte: 3\n                  }\n                }\n              },\n              aggs: {\n                top_record_hits: {\n                  top_hits: {\n                    sort: [{\n                      record_score: {\n                        order: 'desc'\n                      }\n                    }],\n                    _source: {\n                      includes: ['result_type', 'timestamp', 'record_score', 'is_interim', 'function', 'field_name', 'by_field_value', 'over_field_value', 'partition_field_value']\n                    },\n                    size: 3,\n                    script_fields: {\n                      score: {\n                        script: {\n                          lang: 'painless',\n                          source: 'Math.round(doc[\"record_score\"].value)'\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  condition: {\n    compare: {\n      'ctx.payload.aggregations.bucket_results.doc_count': {\n        gt: 0\n      }\n    }\n  },\n  actions: {\n    log: {\n      logging: {\n        level: 'info',\n        text: '' // this gets populated below.\n      }\n    }\n  }\n};\n\n// Add logging text. Broken over a few lines due to its length.\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nvar txt = 'Alert for job [{{ctx.payload.aggregations.bucket_results.top_bucket_hits.hits.hits.0._source.job_id}}] at ';\ntxt += '[{{ctx.payload.aggregations.bucket_results.top_bucket_hits.hits.hits.0.fields.timestamp_iso8601.0}}] score ';\ntxt += '[{{ctx.payload.aggregations.bucket_results.top_bucket_hits.hits.hits.0.fields.score.0}}]';\nwatch.actions.log.logging.text = txt;",null]}