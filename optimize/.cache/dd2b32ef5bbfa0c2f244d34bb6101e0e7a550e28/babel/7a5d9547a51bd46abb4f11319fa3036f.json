{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/ui/public/field_editor/lib/copy_field.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/field_editor/lib/copy_field.js","mtime":1567631711728},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.copyField = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /*\n                                                                                                                                                                                                                                                                   * Licensed to Elasticsearch B.V. under one or more contributor\n                                                                                                                                                                                                                                                                   * license agreements. See the NOTICE file distributed with\n                                                                                                                                                                                                                                                                   * this work for additional information regarding copyright\n                                                                                                                                                                                                                                                                   * ownership. Elasticsearch B.V. licenses this file to you under\n                                                                                                                                                                                                                                                                   * the Apache License, Version 2.0 (the \"License\"); you may\n                                                                                                                                                                                                                                                                   * not use this file except in compliance with the License.\n                                                                                                                                                                                                                                                                   * You may obtain a copy of the License at\n                                                                                                                                                                                                                                                                   *\n                                                                                                                                                                                                                                                                   *    http://www.apache.org/licenses/LICENSE-2.0\n                                                                                                                                                                                                                                                                   *\n                                                                                                                                                                                                                                                                   * Unless required by applicable law or agreed to in writing,\n                                                                                                                                                                                                                                                                   * software distributed under the License is distributed on an\n                                                                                                                                                                                                                                                                   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n                                                                                                                                                                                                                                                                   * KIND, either express or implied.  See the License for the\n                                                                                                                                                                                                                                                                   * specific language governing permissions and limitations\n                                                                                                                                                                                                                                                                   * under the License.\n                                                                                                                                                                                                                                                                   */\n\nvar _lodash = require('lodash');\n\n/**\n * Fully clones a Field object, so that modifications can be performed on\n * the copy without affecting original field. Field objects contain\n * enumerable and non-eumerable properties that may or may not be writable.\n * The function copies all properties as property descriptors into\n * `newFieldProps`, overrides getter and setter, and returns a new object\n * created from that.\n *\n * @param {object} field - Field object to copy\n * @param {object} indexPattern - index pattern object the field belongs to\n * @param {object} Field - Field object type\n * @return {object} the cloned object\n */\nvar copyField = exports.copyField = function copyField(field, indexPattern, Field) {\n  var changes = {};\n  var newFieldProps = {\n    // When we are ready to save the copied field back into the index pattern,\n    // we use `toActualField()` to retrieve an actual `Field` type object, using\n    // its original properties with our \"changes\" applied.\n    toActualField: {\n      value: function value() {\n        return new Field(indexPattern, _extends({}, field.$$spec, changes));\n      }\n    }\n  };\n\n  // Index pattern `Field` objects are created with custom property\n  // descriptors using `ObjDefine`.\n  //\n  // Each property of a `Field` type object could be enumerable/non-enumerable,\n  // writable/not writable, configurable/not configurable, and have custom\n  // getter and setter. We can't use the original `field` object directly for\n  // creating a new field or editing a new field, since we need all the\n  // properties to be editable.\n  //\n  // A normal copy of `field` (i.e. `const newField = { ...field }`) will only\n  // copy enumerable properties and copy each property's descriptors (not\n  // writable, etc).\n  //\n  // So we copy `field`'s **property descriptors** into `newFieldProps`\n  // and modify them so that they are \"writable\" with a getter/setter that\n  // stores and retrieves changes into/from another object (`changes`).\n  Object.getOwnPropertyNames(field).forEach(function (prop) {\n    var desc = Object.getOwnPropertyDescriptor(field, prop);\n\n    newFieldProps[prop] = {\n      enumerable: desc.enumerable,\n      get: function get() {\n        return (0, _lodash.has)(changes, prop) ? changes[prop] : field[prop];\n      },\n      set: function set(v) {\n        changes[prop] = v;\n      }\n    };\n  });\n\n  return Object.create(null, newFieldProps);\n};",null]}