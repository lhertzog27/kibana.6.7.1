{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/monitoring/public/directives/main/index.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/monitoring/public/directives/main/index.js","mtime":1567631712097},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MonitoringMainController = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\nopyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\nor more contributor license agreements. Licensed under the Elastic License;\nyou may not use this file except in compliance with the Elastic License.\nn\nvar _lodash = require('lodash');\n\nvar _modules = require('ui/modules');\n\nvar _index = require('./index.html');\n\nvar _index2 = _interopRequireDefault(_index);\n\nvar _formatting = require('../../../common/formatting');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/*\n * Manage data and provide helper methods for the \"main\" directive's template\n */\nvar MonitoringMainController = exports.MonitoringMainController = function () {\n  // called internally by Angular\n  function MonitoringMainController() {\n    _classCallCheck(this, MonitoringMainController);\n\n    this.inListing = false;\n    this.inAlerts = false;\n    this.inOverview = false;\n    this.inElasticsearch = false;\n    this.inKibana = false;\n    this.inLogstash = false;\n    this.inBeats = false;\n    this.inApm = false;\n  }\n\n  // kick things off from the directive link function\n\n\n  _createClass(MonitoringMainController, [{\n    key: 'setup',\n    value: function setup(options) {\n      var _this = this;\n\n      this._licenseService = options.licenseService;\n      this._breadcrumbsService = options.breadcrumbsService;\n      this._kbnUrlService = options.kbnUrlService;\n\n      Object.assign(this, options.attributes);\n\n      // set the section we're navigated in\n      if (this.product) {\n        this.inElasticsearch = this.product === 'elasticsearch';\n        this.inKibana = this.product === 'kibana';\n        this.inLogstash = this.product === 'logstash';\n        this.inBeats = this.product === 'beats';\n        this.inApm = this.product === 'apm';\n      } else {\n        this.inOverview = this.name === 'overview';\n        this.inAlerts = this.name === 'alerts';\n        this.inListing = this.name === 'listing' || this.name === 'no-data';\n      }\n\n      if (!this.inListing) {\n        // no breadcrumbs in cluster listing page\n        this.breadcrumbs = this._breadcrumbsService(options.clusterName, this);\n      }\n\n      if (this.pipelineHash) {\n        this.pipelineHashShort = (0, _formatting.shortenPipelineHash)(this.pipelineHash);\n        this.onChangePipelineHash = function () {\n          return _this._kbnUrlService.changePath('/logstash/pipelines/' + _this.pipelineId + '/' + _this.pipelineHash);\n        };\n      }\n    }\n\n    // check whether to \"highlight\" a tab\n\n  }, {\n    key: 'isActiveTab',\n    value: function isActiveTab(testPath) {\n      return this.name === testPath;\n    }\n\n    // check whether to show ML tab\n\n  }, {\n    key: 'isMlSupported',\n    value: function isMlSupported() {\n      return this._licenseService.mlIsSupported();\n    }\n  }]);\n\n  return MonitoringMainController;\n}();\n\nvar uiModule = _modules.uiModules.get('plugins/monitoring/directives', []);\nuiModule.directive('monitoringMain', function (breadcrumbs, license, kbnUrl, config, $injector) {\n  return {\n    restrict: 'E',\n    transclude: true,\n    template: _index2.default,\n    controller: MonitoringMainController,\n    controllerAs: 'monitoringMain',\n    bindToController: true,\n    link: function link(scope, _element, attributes, controller) {\n      config.watch('k7design', function (val) {\n        return scope.showPluginBreadcrumbs = !val;\n      });\n\n      if (!scope.cluster) {\n        var $route = $injector.get('$route');\n        var globalState = $injector.get('globalState');\n        scope.cluster = ($route.current.locals.clusters || []).find(function (cluster) {\n          return cluster.cluster_uuid === globalState.cluster_uuid;\n        });\n      }\n\n      function getSetupObj() {\n        return {\n          licenseService: license,\n          breadcrumbsService: breadcrumbs,\n          kbnUrlService: kbnUrl,\n          attributes: {\n            name: attributes.name,\n            product: attributes.product,\n            instance: attributes.instance,\n            resolver: attributes.resolver,\n            page: attributes.page,\n            tabIconClass: attributes.tabIconClass,\n            tabIconLabel: attributes.tabIconLabel,\n            pipelineId: attributes.pipelineId,\n            pipelineHash: attributes.pipelineHash,\n            pipelineVersions: (0, _lodash.get)(scope, 'pageData.versions'),\n            isCcrEnabled: attributes.isCcrEnabled\n          },\n          clusterName: (0, _lodash.get)(scope, 'cluster.cluster_name')\n        };\n      }\n\n      var setupObj = getSetupObj();\n      controller.setup(setupObj);\n      Object.keys(setupObj.attributes).forEach(function (key) {\n        attributes.$observe(key, function () {\n          return controller.setup(getSetupObj());\n        });\n      });\n      scope.$watch('pageData.versions', function (versions) {\n        controller.pipelineVersions = versions;\n      });\n    }\n  };\n});",null]}