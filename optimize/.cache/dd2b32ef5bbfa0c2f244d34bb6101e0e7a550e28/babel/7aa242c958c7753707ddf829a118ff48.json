{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/watcher/public/components/action_type_select/action_type_select.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/watcher/public/components/action_type_select/action_type_select.js","mtime":1567631712335},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\nopyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\nor more contributor license agreements. Licensed under the Elastic License;\nyou may not use this file except in compliance with the Elastic License.\nn\nvar _lodash = require('lodash');\n\nvar _modules = require('ui/modules');\n\nvar _action_type_select = require('./action_type_select.html');\n\nvar _action_type_select2 = _interopRequireDefault(_action_type_select);\n\nrequire('angular-ui-select');\n\nvar _action = require('plugins/watcher/models/action');\n\nrequire('plugins/watcher/services/settings');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar app = _modules.uiModules.get('xpack/watcher');\n\napp.directive('actionTypeSelect', function ($injector) {\n  var watcherSettingsService = $injector.get('xpackWatcherSettingsService');\n\n  return {\n    restrict: 'E',\n    template: _action_type_select2.default,\n    scope: {\n      onChange: '='\n    },\n    controllerAs: 'actionTypeSelect',\n    bindToController: true,\n    controller: function () {\n      function ActionTypeSelectController() {\n        var _this = this;\n\n        _classCallCheck(this, ActionTypeSelectController);\n\n        this.selectedItem = { value: null };\n\n        this.loadActionTypes().then(function (actionTypes) {\n          _this.actionTypes = actionTypes.filter(function (actionType) {\n            // 'Action' is the default action type. If an action has the default then it's\n            // not fully implemented and shouldn't be presented to the user.\n            return actionType.typeName !== 'Action';\n          });\n        });\n      }\n\n      _createClass(ActionTypeSelectController, [{\n        key: 'loadActionTypes',\n        value: function loadActionTypes() {\n          var allActionTypes = _action.Action.getActionTypes();\n\n          // load the configuration settings to determine which actions are enabled\n          return watcherSettingsService.getSettings().then(function (settings) {\n            var result = (0, _lodash.map)(allActionTypes, function (_ref, type) {\n              var typeName = _ref.typeName,\n                  iconClass = _ref.iconClass,\n                  selectMessage = _ref.selectMessage;\n\n              var isEnabled = settings.actionTypes[type].enabled;\n\n              return {\n                type: type,\n                typeName: typeName,\n                iconClass: iconClass,\n                selectMessage: selectMessage,\n                isEnabled: isEnabled\n              };\n            });\n\n            return result;\n          });\n        }\n      }, {\n        key: 'onSelect',\n        value: function onSelect(actionType) {\n          this.selectedItem = { value: null };\n\n          if (actionType.isEnabled) {\n            this.onChange(actionType.type);\n          }\n        }\n      }]);\n\n      return ActionTypeSelectController;\n    }()\n  };\n});",null]}