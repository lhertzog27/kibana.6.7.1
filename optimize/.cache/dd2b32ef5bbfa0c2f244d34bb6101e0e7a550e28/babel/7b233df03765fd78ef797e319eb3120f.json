{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/jobs/new_job/wizard/preconfigured_job_redirect.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/jobs/new_job/wizard/preconfigured_job_redirect.js","mtime":1567631712060},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.preConfiguredJobRedirect = preConfiguredJobRedirect;\n\nvar _chrome = require('ui/chrome');\n\nvar _chrome2 = _interopRequireDefault(_chrome);\n\nvar _lodash = require('lodash');\n\nvar _general = require('plugins/ml/jobs/new_job/simple/components/constants/general');\n\nvar _job_service = require('plugins/ml/services/job_service');\n\nvar _index_utils = require('plugins/ml/util/index_utils');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction preConfiguredJobRedirect(AppState, Private, courier) {\n  return new Promise(function (resolve, reject) {\n    var basePath = _chrome2.default.getBasePath() + '/app/ml#';\n\n    var stateDefaults = {\n      mlJobSettings: {}\n    };\n    var appState = new AppState(stateDefaults);\n\n    var redirectUrl = getWizardUrlFromAppState(appState);\n    if (redirectUrl === null) {\n      // no settings in appState\n      var job = _job_service.mlJobService.currentJob;\n      if (job) {\n        (0, _index_utils.loadIndexPatterns)(Private, courier).then(function () {\n          redirectUrl = getWizardUrlFromCloningJob(job);\n          if (redirectUrl === null) {\n            // no created_by setting in job, use advanced job creation\n            window.location.href = basePath + '/jobs/new_job/advanced';\n            reject();\n          } else {\n            window.location.href = basePath + '/' + redirectUrl;\n            reject();\n          }\n        }).catch(function (error) {\n          console.log(error);\n          resolve();\n        });\n      } else {\n        // no settings in appState or temp cloning job\n        // don't redirect\n        resolve();\n      }\n    } else {\n      // settings in appState\n      window.location.href = basePath + '/' + redirectUrl;\n      reject();\n    }\n  });\n} /*\n   * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n   * or more contributor license agreements. Licensed under the Elastic License;\n   * you may not use this file except in compliance with the Elastic License.\n   */\n\nfunction getWizardUrlFromAppState(appState) {\n  if (appState.mlJobSettings !== undefined && Object.keys(appState.mlJobSettings).length) {\n    var page = '';\n    var jobSettings = appState.mlJobSettings;\n    if (jobSettings.fields && jobSettings.fields.length) {\n      if (jobSettings.fields.length > 1 || jobSettings.split !== undefined) {\n        // multi-metric or population\n        if (jobSettings.population !== undefined) {\n          page = 'population';\n        } else {\n          page = 'multi_metric';\n        }\n      } else {\n        // single metric\n        page = 'single_metric';\n      }\n    }\n    return 'jobs/new_job/simple/' + page;\n  } else {\n    return null;\n  }\n}\n\nfunction getWizardUrlFromCloningJob(job) {\n  var created = (0, _lodash.get)(job, 'custom_settings.created_by');\n  var page = '';\n  if (created !== undefined) {\n\n    if (created === _general.WIZARD_TYPE.SINGLE_METRIC) {\n      page = 'single_metric';\n    } else if (created === _general.WIZARD_TYPE.MULTI_METRIC) {\n      page = 'multi_metric';\n    } else if (created === _general.WIZARD_TYPE.POPULATION) {\n      page = 'population';\n    } else {\n      return null;\n    }\n    var indexPatternId = (0, _index_utils.getIndexPatternIdFromName)(job.datafeed_config.indices[0]);\n\n    return 'jobs/new_job/simple/' + page + '?index=' + indexPatternId + '&_g=()';\n  } else {\n    return null;\n  }\n}",null]}