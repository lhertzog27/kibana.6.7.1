{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/packages/kbn-es-query/target/kuery/functions/geo_polygon.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/packages/kbn-es-query/target/kuery/functions/geo_polygon.js","mtime":1567666388115},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.buildNodeParams = buildNodeParams;\nexports.toElasticsearchQuery = toElasticsearchQuery;\n\nvar _lodash = require('lodash');\n\nvar _node_types = require('../node_types');\n\nvar _ast = require('../ast');\n\nvar ast = _interopRequireWildcard(_ast);\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }newObj.default = obj;return newObj;\n  }\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });\n  } else {\n    obj[key] = value;\n  }return obj;\n}\n\nfunction _toArray(arr) {\n  return Array.isArray(arr) ? arr : Array.from(arr);\n}\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }return arr2;\n  } else {\n    return Array.from(arr);\n  }\n} /*\n   * Licensed to Elasticsearch B.V. under one or more contributor\n   * license agreements. See the NOTICE file distributed with\n   * this work for additional information regarding copyright\n   * ownership. Elasticsearch B.V. licenses this file to you under\n   * the Apache License, Version 2.0 (the \"License\"); you may\n   * not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *    http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing,\n   * software distributed under the License is distributed on an\n   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n   * KIND, either express or implied.  See the License for the\n   * specific language governing permissions and limitations\n   * under the License.\n   */\n\nfunction buildNodeParams(fieldName, points) {\n  var fieldNameArg = _node_types.nodeTypes.literal.buildNode(fieldName);\n  var args = points.map(function (point) {\n    var latLon = point.lat + ', ' + point.lon;\n    return _node_types.nodeTypes.literal.buildNode(latLon);\n  });\n\n  return {\n    arguments: [fieldNameArg].concat(_toConsumableArray(args))\n  };\n}\n\nfunction toElasticsearchQuery(node, indexPattern) {\n  var _geo_polygon;\n\n  var _node$arguments = _toArray(node.arguments),\n      fieldNameArg = _node$arguments[0],\n      points = _node$arguments.slice(1);\n\n  var fieldName = _node_types.nodeTypes.literal.toElasticsearchQuery(fieldNameArg);\n  var field = (0, _lodash.get)(indexPattern, 'fields', []).find(function (field) {\n    return field.name === fieldName;\n  });\n  var queryParams = {\n    points: points.map(ast.toElasticsearchQuery)\n  };\n\n  if (field && field.scripted) {\n    throw new Error('Geo polygon query does not support scripted fields');\n  }\n\n  return {\n    geo_polygon: (_geo_polygon = {}, _defineProperty(_geo_polygon, fieldName, queryParams), _defineProperty(_geo_polygon, 'ignore_unmapped', true), _geo_polygon)\n  };\n}",null]}