{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/components/form_label/form_label.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/components/form_label/form_label.js","mtime":1567631712031},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FormLabel = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _json_tooltip = require('../json_tooltip/json_tooltip');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\n// Component for creating a form label including a hoverable icon\n// to provide additional information in a tooltip. Label and tooltip\n// text elements get unique ids based on label-id so they can be\n// referenced by attributes, for example:\n//\n// <FormLabel labelId=\"uid\">Label Text</FormLabel>\n// <input\n//   type=\"text\"\n//   aria-labelledby=\"ml_aria_label_uid\"\n//   aria-describedby=\"ml_aria_description_uid\"\n// />\n//\n// Writing this as a class based component because stateless components\n// cannot use ref(). Once angular is completely gone this can be rewritten\n// as a function stateless component.\nvar FormLabel = exports.FormLabel = function (_Component) {\n  _inherits(FormLabel, _Component);\n\n  function FormLabel(props) {\n    _classCallCheck(this, FormLabel);\n\n    var _this = _possibleConstructorReturn(this, (FormLabel.__proto__ || Object.getPrototypeOf(FormLabel)).call(this, props));\n\n    _this.labelRef = _react2.default.createRef();\n    return _this;\n  }\n\n  _createClass(FormLabel, [{\n    key: 'render',\n    value: function render() {\n      // labelClassName is used so we can override the class with 'kuiFormLabel'\n      // when used in an angular context. Once the component is no longer used from\n      // within angular, this prop can be removed and the className can be hardcoded.\n      var _props = this.props,\n          labelId = _props.labelId,\n          _props$labelClassName = _props.labelClassName,\n          labelClassName = _props$labelClassName === undefined ? 'euiFormLabel' : _props$labelClassName,\n          children = _props.children;\n\n      return _react2.default.createElement(\n        _react2.default.Fragment,\n        null,\n        _react2.default.createElement(\n          'label',\n          { className: labelClassName, id: 'ml_aria_label_' + labelId, ref: this.labelRef },\n          children\n        ),\n        _react2.default.createElement(_json_tooltip.JsonTooltip, { id: labelId, position: 'top' })\n      );\n    }\n  }]);\n\n  return FormLabel;\n}(_react.Component);\n\nFormLabel.propTypes = {\n  labelId: _propTypes2.default.string\n};",null]}