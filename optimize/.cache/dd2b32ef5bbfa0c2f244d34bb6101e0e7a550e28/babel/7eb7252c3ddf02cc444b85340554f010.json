{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/jobs/jobs_list/components/edit_job_flyout/edit_utils.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/jobs/jobs_list/components/edit_job_flyout/edit_utils.js","mtime":1567631712048},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /*\n                                                                                                                                                                                                                                                                   * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                   * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                   * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                   */\n\nexports.saveJob = saveJob;\nexports.loadSavedDashboards = loadSavedDashboards;\nexports.loadIndexPatterns = loadIndexPatterns;\n\nvar _lodash = require('lodash');\n\nvar _chrome = require('ui/chrome');\n\nvar _chrome2 = _interopRequireDefault(_chrome);\n\nvar _new_job_defaults = require('plugins/ml/jobs/new_job/utils/new_job_defaults');\n\nvar _job_service = require('plugins/ml/services/job_service');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction saveJob(job, newJobData, finish) {\n\n  return new Promise(function (resolve, reject) {\n\n    var jobData = _extends({}, extractDescription(job, newJobData), extractGroups(job, newJobData), extractMML(job, newJobData), extractDetectorDescriptions(job, newJobData), extractCustomSettings(job, newJobData));\n    var datafeedData = _extends({}, extractDatafeed(job, newJobData));\n\n    if (jobData.custom_settings !== undefined) {\n      jobData.custom_settings = processCustomSettings(jobData, datafeedData);\n    }\n\n    var saveDatafeedWrapper = function saveDatafeedWrapper() {\n      saveDatafeed(datafeedData, job, finish).then(function () {\n        resolve();\n      }).catch(function (error) {\n        reject(error);\n      });\n    };\n\n    // if anything has changed, post the changes\n    if (Object.keys(jobData).length) {\n      _job_service.mlJobService.updateJob(job.job_id, jobData).then(function (resp) {\n        if (resp.success) {\n          saveDatafeedWrapper();\n        } else {\n          reject(resp);\n        }\n      }).catch(function (error) {\n        reject(error);\n      });\n    } else {\n      saveDatafeedWrapper();\n    }\n  });\n}\n\nfunction saveDatafeed(datafeedData, job) {\n  return new Promise(function (resolve, reject) {\n    if (Object.keys(datafeedData).length) {\n      var datafeedId = job.datafeed_config.datafeed_id;\n      _job_service.mlJobService.updateDatafeed(datafeedId, datafeedData).then(function (resp) {\n        if (resp.success) {\n          resolve();\n        } else {\n          reject(resp);\n        }\n      });\n    } else {\n      resolve();\n    }\n  });\n}\n\nfunction loadSavedDashboards(maxNumber) {\n  // Loads the list of saved dashboards, as used in editing custom URLs.\n  return new Promise(function (resolve, reject) {\n\n    var savedObjectsClient = _chrome2.default.getSavedObjectsClient();\n    savedObjectsClient.find({\n      type: 'dashboard',\n      fields: ['title'],\n      perPage: maxNumber\n    }).then(function (resp) {\n      var savedObjects = resp.savedObjects;\n      if (savedObjects !== undefined) {\n        var dashboards = savedObjects.map(function (savedObj) {\n          return { id: savedObj.id, title: savedObj.attributes.title };\n        });\n\n        dashboards.sort(function (dash1, dash2) {\n          return dash1.title.localeCompare(dash2.title);\n        });\n\n        resolve(dashboards);\n      }\n    }).catch(function (resp) {\n      reject(resp);\n    });\n  });\n}\n\nfunction loadIndexPatterns(maxNumber) {\n  // Loads the list of Kibana index patterns, as used in editing custom URLs.\n  // TODO - amend loadIndexPatterns in index_utils.js to do the request,\n  // without needing an Angular Provider.\n  return new Promise(function (resolve, reject) {\n\n    var savedObjectsClient = _chrome2.default.getSavedObjectsClient();\n    savedObjectsClient.find({\n      type: 'index-pattern',\n      fields: ['title'],\n      perPage: maxNumber\n    }).then(function (resp) {\n      var savedObjects = resp.savedObjects;\n      if (savedObjects !== undefined) {\n        var indexPatterns = savedObjects.map(function (savedObj) {\n          return { id: savedObj.id, title: savedObj.attributes.title };\n        });\n\n        indexPatterns.sort(function (dash1, dash2) {\n          return dash1.title.localeCompare(dash2.title);\n        });\n\n        resolve(indexPatterns);\n      }\n    }).catch(function (resp) {\n      reject(resp);\n    });\n  });\n}\n\nfunction extractDescription(job, newJobData) {\n  var description = newJobData.description;\n  if (newJobData.description !== job.description) {\n    return { description: description };\n  }\n  return {};\n}\n\nfunction extractGroups(job, newJobData) {\n  var groups = newJobData.groups;\n  if (newJobData.groups !== undefined) {\n    var diffCount = (0, _lodash.difference)(job.groups, groups).length + (0, _lodash.difference)(groups, job.groups).length;\n    return diffCount === 0 ? {} : { groups: groups };\n  }\n  return {};\n}\n\nfunction extractMML(job, newJobData) {\n  var jobLimits = (0, _new_job_defaults.newJobLimits)();\n  var mmlData = {};\n  // if the job's model_memory_limit has changed, add it to the jobData json\n  if (job.analysis_limits.model_memory_limit !== undefined) {\n    var mml = newJobData.mml;\n    // if the user has wiped the mml, use the default value which is\n    // displayed greyed out in the field\n\n    if (mml === '') {\n      mml = jobLimits.max_model_memory_limit;\n    }\n\n    // has the data changed, did analysis_limits never exist for this job\n    if (mml !== job.analysis_limits.model_memory_limit) {\n      mmlData.analysis_limits = {\n        model_memory_limit: mml\n      };\n    }\n  }\n  return mmlData;\n}\n\nfunction extractDetectorDescriptions(job, newJobData) {\n  var detectors = [];\n  var descriptions = newJobData.detectorDescriptions.map(function (d, i) {\n    return { detector_index: i, description: d };\n  });\n\n  var originalDetectors = job.analysis_config.detectors;\n  originalDetectors.forEach(function (d) {\n    if (descriptions[d.detector_index].description !== d.detector_description) {\n      detectors.push(descriptions[d.detector_index]);\n    }\n  });\n\n  return detectors.length ? { detectors: detectors } : {};\n}\n\nfunction extractCustomSettings(job, newJobData) {\n  var settingsData = {};\n  if (newJobData && newJobData.customUrls) {\n    settingsData.custom_settings = job.custom_settings || {};\n    settingsData.custom_settings.custom_urls = newJobData.customUrls;\n  }\n  return settingsData;\n}\n\nfunction extractDatafeed(job, newDatafeedData) {\n  var datafeedData = {};\n  if (job.datafeed_config !== undefined) {\n    var origQueryString = JSON.stringify(job.datafeed_config.query);\n    var newQuery = JSON.parse(newDatafeedData.datafeedQuery);\n    var newQueryString = JSON.stringify(newQuery);\n\n    if (origQueryString !== newQueryString) {\n      datafeedData.query = newQuery;\n    }\n\n    if (job.datafeed_config.query_delay !== newDatafeedData.datafeedQueryDelay) {\n      datafeedData.query_delay = newDatafeedData.datafeedQueryDelay;\n    }\n\n    if (job.datafeed_config.frequency !== newDatafeedData.datafeedFrequency && newDatafeedData.datafeedFrequency !== '') {\n      datafeedData.frequency = newDatafeedData.datafeedFrequency;\n    }\n\n    if (job.datafeed_config.scroll_size !== newDatafeedData.datafeedScrollSize) {\n      datafeedData.scroll_size = newDatafeedData.datafeedScrollSize;\n    }\n  }\n\n  return datafeedData;\n}\n\nfunction processCustomSettings(jobData, datafeedData) {\n  // remove the created_by setting if parts of the job contain\n  // fields which won't be retained when cloned in a wizard\n  var customSettings = {};\n  if (jobData.custom_settings !== undefined) {\n    customSettings = _extends({}, jobData.custom_settings);\n\n    if (jobData.custom_settings.created_by !== undefined) {\n      if (jobData.detectors !== undefined || Object.keys(datafeedData).length || jobData.custom_settings.custom_urls !== undefined && jobData.custom_settings.custom_urls.length) {\n        delete customSettings.created_by;\n      }\n    }\n  }\n\n  return customSettings;\n}",null]}