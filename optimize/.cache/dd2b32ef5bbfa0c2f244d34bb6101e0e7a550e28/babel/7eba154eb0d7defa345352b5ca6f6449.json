{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/timeseriesexplorer/timeseries_search_service.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/timeseriesexplorer/timeseries_search_service.js","mtime":1567631712069},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.mlTimeSeriesSearchService = undefined;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _ml_api_service = require('plugins/ml/services/ml_api_service');\n\nvar _job_utils = require('plugins/ml/../common/util/job_utils');\n\nvar _chart_config_builder = require('plugins/ml/util/chart_config_builder');\n\nvar _results_service = require('plugins/ml/services/results_service');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction getMetricData(job, detectorIndex, entityFields, earliestMs, latestMs, interval) {\n  if ((0, _job_utils.isModelPlotEnabled)(job, detectorIndex, entityFields)) {\n    // Extract the partition, by, over fields on which to filter.\n    var criteriaFields = [];\n    var detector = job.analysis_config.detectors[detectorIndex];\n    if (_lodash2.default.has(detector, 'partition_field_name')) {\n      var partitionEntity = _lodash2.default.find(entityFields, { 'fieldName': detector.partition_field_name });\n      if (partitionEntity !== undefined) {\n        criteriaFields.push({ fieldName: 'partition_field_name', fieldValue: partitionEntity.fieldName }, { fieldName: 'partition_field_value', fieldValue: partitionEntity.fieldValue });\n      }\n    }\n\n    if (_lodash2.default.has(detector, 'over_field_name')) {\n      var overEntity = _lodash2.default.find(entityFields, { 'fieldName': detector.over_field_name });\n      if (overEntity !== undefined) {\n        criteriaFields.push({ fieldName: 'over_field_name', fieldValue: overEntity.fieldName }, { fieldName: 'over_field_value', fieldValue: overEntity.fieldValue });\n      }\n    }\n\n    if (_lodash2.default.has(detector, 'by_field_name')) {\n      var byEntity = _lodash2.default.find(entityFields, { 'fieldName': detector.by_field_name });\n      if (byEntity !== undefined) {\n        criteriaFields.push({ fieldName: 'by_field_name', fieldValue: byEntity.fieldName }, { fieldName: 'by_field_value', fieldValue: byEntity.fieldValue });\n      }\n    }\n\n    return _results_service.mlResultsService.getModelPlotOutput(job.job_id, detectorIndex, criteriaFields, earliestMs, latestMs, interval);\n  } else {\n    return new Promise(function (resolve, reject) {\n      var obj = {\n        success: true,\n        results: {}\n      };\n\n      var chartConfig = (0, _chart_config_builder.buildConfigFromDetector)(job, detectorIndex);\n\n      _results_service.mlResultsService.getMetricData(chartConfig.datafeedConfig.indices, chartConfig.datafeedConfig.types, entityFields, chartConfig.datafeedConfig.query, chartConfig.metricFunction, chartConfig.metricFieldName, chartConfig.timeField, earliestMs, latestMs, interval).then(function (resp) {\n        _lodash2.default.each(resp.results, function (value, time) {\n          obj.results[time] = {\n            'actual': value\n          };\n        });\n\n        resolve(obj);\n      }).catch(function (resp) {\n        reject(resp);\n      });\n    });\n  }\n}\n\n// Builds chart detail information (charting function description and entity counts) used\n// in the title area of the time series chart.\n// Queries Elasticsearch if necessary to obtain the distinct count of entities\n// for which data is being plotted.\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nfunction getChartDetails(job, detectorIndex, entityFields, earliestMs, latestMs) {\n  return new Promise(function (resolve, reject) {\n    var obj = { success: true, results: { functionLabel: '', entityData: { entities: [] } } };\n\n    var chartConfig = (0, _chart_config_builder.buildConfigFromDetector)(job, detectorIndex);\n    var functionLabel = chartConfig.metricFunction;\n    if (chartConfig.metricFieldName !== undefined) {\n      functionLabel += ' ';\n      functionLabel += chartConfig.metricFieldName;\n    }\n    obj.results.functionLabel = functionLabel;\n\n    var blankEntityFields = _lodash2.default.filter(entityFields, function (entity) {\n      return entity.fieldValue.length === 0;\n    });\n\n    // Look to see if any of the entity fields have defined values\n    // (i.e. blank input), and if so obtain the cardinality.\n    if (blankEntityFields.length === 0) {\n      obj.results.entityData.count = 1;\n      obj.results.entityData.entities = entityFields;\n      resolve(obj);\n    } else {\n      var entityFieldNames = _lodash2.default.map(blankEntityFields, 'fieldName');\n      _ml_api_service.ml.getCardinalityOfFields({\n        index: chartConfig.datafeedConfig.indices,\n        types: chartConfig.datafeedConfig.types,\n        fieldNames: entityFieldNames,\n        query: chartConfig.datafeedConfig.query,\n        timeFieldName: chartConfig.timeField,\n        earliestMs: earliestMs,\n        latestMs: latestMs\n      }).then(function (results) {\n        _lodash2.default.each(blankEntityFields, function (field) {\n          obj.results.entityData.entities.push({\n            fieldName: field.fieldName,\n            cardinality: _lodash2.default.get(results, field.fieldName, 0)\n          });\n        });\n\n        resolve(obj);\n      }).catch(function (resp) {\n        reject(resp);\n      });\n    }\n  });\n}\n\nvar mlTimeSeriesSearchService = exports.mlTimeSeriesSearchService = {\n  getMetricData: getMetricData,\n  getChartDetails: getChartDetails\n};",null]}