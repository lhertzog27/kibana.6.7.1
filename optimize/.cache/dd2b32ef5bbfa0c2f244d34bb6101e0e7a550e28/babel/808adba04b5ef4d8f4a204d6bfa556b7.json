{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/components/messagebar/messagebar_service.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/components/messagebar/messagebar_service.js","mtime":1567631712034},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.mlMessageBarService = undefined;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; /*\n                                                                                                                                                                                                                                                                               * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                               * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                               * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                               */\n\nvar _notify = require('ui/notify');\n\nvar _ml_error = require('../../util/ml_error');\n\nvar messages = [];\n\nvar MSG_STYLE = { INFO: 'ml-message-info', WARNING: 'ml-message-warning', ERROR: 'ml-message-error' };\n\nfunction getMessages() {\n  return messages;\n}\n\nfunction addMessage(msg) {\n  if (messages.find(function (m) {\n    return m.text === msg.text && m.style === msg.style;\n  }) === undefined) {\n    messages.push(msg);\n  }\n}\n\nfunction removeMessage(index) {\n  messages.splice(index, 1);\n}\n\nfunction clear() {\n  messages.length = 0;\n}\n\nfunction info(text) {\n  addMessage({ text: text, style: MSG_STYLE.INFO });\n}\n\nfunction warning(text) {\n  addMessage({ text: text, style: MSG_STYLE.WARNING });\n}\n\nfunction error(text, resp) {\n  text = text + ' ' + expandErrorMessageObj(resp);\n  addMessage({ text: text, style: MSG_STYLE.ERROR });\n}\n\nfunction expandErrorMessageObj(resp) {\n  var txt = '';\n  if (resp !== undefined && (typeof resp === 'undefined' ? 'undefined' : _typeof(resp)) === 'object') {\n    try {\n      var respObj = JSON.parse(resp.response);\n      if ((typeof respObj === 'undefined' ? 'undefined' : _typeof(respObj)) === 'object' && respObj.error !== undefined) {\n        txt = respObj.error.reason;\n      }\n    } catch (e) {\n      txt = resp.message;\n    }\n  }\n  return txt;\n}\n\nfunction errorNotify(text, resp) {\n  var err = null;\n  if ((typeof text === 'undefined' ? 'undefined' : _typeof(text)) === 'object' && text.response !== undefined) {\n    resp = text.response;\n  } else if ((typeof text === 'undefined' ? 'undefined' : _typeof(text)) === 'object' && text.message !== undefined) {\n    err = new Error(text.message);\n  } else {\n    err = new Error(text);\n  }\n  _notify.notify.error(new _ml_error.MLRequestFailure(err, resp));\n}\n\nvar mlMessageBarService = exports.mlMessageBarService = {\n  getMessages: getMessages,\n  addMessage: addMessage,\n  removeMessage: removeMessage,\n  clear: clear,\n  info: info,\n  warning: warning,\n  error: error,\n  notify: {\n    error: errorNotify\n  }\n};",null]}