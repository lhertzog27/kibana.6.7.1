{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/jobs/jobs_list/components/job_details/extract_job_details.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/jobs/jobs_list/components/job_details/extract_job_details.js","mtime":1567631712048},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.extractJobDetails = extractJobDetails;\n\nvar _string_utils = require('plugins/ml/util/string_utils');\n\nvar _format_values = require('./format_values');\n\nvar _i18n = require('@kbn/i18n');\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } } /*\n                                                                                                                                                                                                     * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                     * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                     * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                     */\n\nfunction extractJobDetails(job) {\n\n  if (Object.keys(job).length === 0) {\n    return {};\n  }\n\n  var general = {\n    title: _i18n.i18n.translate('xpack.ml.jobsList.jobDetails.generalTitle', {\n      defaultMessage: 'General'\n    }),\n    position: 'left',\n    items: (0, _format_values.filterObjects)(job, true).map(_format_values.formatValues)\n  };\n\n  var customUrl = {\n    title: _i18n.i18n.translate('xpack.ml.jobsList.jobDetails.customUrlsTitle', {\n      defaultMessage: 'Custom URLs'\n    }),\n    position: 'right',\n    items: []\n  };\n  if (job.custom_settings && job.custom_settings.custom_urls) {\n    var _customUrl$items;\n\n    (_customUrl$items = customUrl.items).push.apply(_customUrl$items, _toConsumableArray(job.custom_settings.custom_urls.map(function (cu) {\n      return [cu.url_name, cu.url_value, cu.time_range];\n    })));\n  }\n\n  var node = {\n    title: _i18n.i18n.translate('xpack.ml.jobsList.jobDetails.nodeTitle', {\n      defaultMessage: 'Node'\n    }),\n    position: 'right',\n    items: []\n  };\n  if (job.node) {\n    node.items.push(['name', job.node.name]);\n  }\n\n  var detectors = {\n    title: _i18n.i18n.translate('xpack.ml.jobsList.jobDetails.detectorsTitle', {\n      defaultMessage: 'Detectors'\n    }),\n    position: 'left',\n    items: []\n  };\n  if (job.analysis_config && job.analysis_config.detectors) {\n    var _detectors$items;\n\n    (_detectors$items = detectors.items).push.apply(_detectors$items, _toConsumableArray(job.analysis_config.detectors.map(function (d) {\n      var stringifiedDtr = (0, _string_utils.detectorToString)(d);\n      return [stringifiedDtr, stringifiedDtr !== d.detector_description ? d.detector_description : ''];\n    })));\n  }\n\n  var influencers = {\n    title: _i18n.i18n.translate('xpack.ml.jobsList.jobDetails.influencersTitle', {\n      defaultMessage: 'Influencers'\n    }),\n    position: 'left',\n    items: job.analysis_config.influencers.map(function (i) {\n      return ['', i];\n    })\n  };\n\n  var analysisConfig = {\n    title: _i18n.i18n.translate('xpack.ml.jobsList.jobDetails.analysisConfigTitle', {\n      defaultMessage: 'Analysis config'\n    }),\n    position: 'left',\n    items: (0, _format_values.filterObjects)(job.analysis_config)\n  };\n\n  var analysisLimits = {\n    title: _i18n.i18n.translate('xpack.ml.jobsList.jobDetails.analysisLimitsTitle', {\n      defaultMessage: 'Analysis limits'\n    }),\n    position: 'left',\n    items: (0, _format_values.filterObjects)(job.analysis_limits)\n  };\n\n  var dataDescription = {\n    title: _i18n.i18n.translate('xpack.ml.jobsList.jobDetails.dataDescriptionTitle', {\n      defaultMessage: 'Data description'\n    }),\n    position: 'right',\n    items: (0, _format_values.filterObjects)(job.data_description)\n  };\n\n  var datafeed = {\n    title: _i18n.i18n.translate('xpack.ml.jobsList.jobDetails.datafeedTitle', {\n      defaultMessage: 'Datafeed'\n    }),\n    position: 'left',\n    items: (0, _format_values.filterObjects)(job.datafeed_config, true, true)\n  };\n  if (job.node) {\n    datafeed.items.push(['node', JSON.stringify(job.node)]);\n  }\n\n  var counts = {\n    title: _i18n.i18n.translate('xpack.ml.jobsList.jobDetails.countsTitle', {\n      defaultMessage: 'Counts'\n    }),\n    position: 'left',\n    items: (0, _format_values.filterObjects)(job.data_counts).map(_format_values.formatValues)\n  };\n\n  var modelSizeStats = {\n    title: _i18n.i18n.translate('xpack.ml.jobsList.jobDetails.modelSizeStatsTitle', {\n      defaultMessage: 'Model size stats'\n    }),\n    position: 'right',\n    items: (0, _format_values.filterObjects)(job.model_size_stats).map(_format_values.formatValues)\n  };\n\n  return {\n    general: general,\n    customUrl: customUrl,\n    node: node,\n    detectors: detectors,\n    influencers: influencers,\n    analysisConfig: analysisConfig,\n    analysisLimits: analysisLimits,\n    dataDescription: dataDescription,\n    datafeed: datafeed,\n    counts: counts,\n    modelSizeStats: modelSizeStats\n  };\n}",null]}