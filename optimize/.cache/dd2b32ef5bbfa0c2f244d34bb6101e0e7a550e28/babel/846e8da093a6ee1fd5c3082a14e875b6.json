{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/index_lifecycle_management/public/store/actions/policies.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/index_lifecycle_management/public/store/actions/policies.js","mtime":1567631711967},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setPhaseData = exports.fetchPolicies = exports.policyFilterChanged = exports.policySortDirectionChanged = exports.policyPageChanged = exports.policyPageSizeChanged = exports.policySortChanged = exports.setSaveAsNewPolicy = exports.setSelectedPolicyName = exports.unsetSelectedPolicy = exports.setSelectedPolicy = exports.fetchedPolicies = undefined;\n\nvar _i18n = require('@kbn/i18n');\n\nvar _api_errors = require('../../services/api_errors');\n\nvar _reduxActions = require('redux-actions');\n\nvar _api = require('../../services/api');\n\nvar _constants = require('../constants');\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            */\n\nvar fetchedPolicies = exports.fetchedPolicies = (0, _reduxActions.createAction)('FETCHED_POLICIES');\nvar setSelectedPolicy = exports.setSelectedPolicy = (0, _reduxActions.createAction)('SET_SELECTED_POLICY');\nvar unsetSelectedPolicy = exports.unsetSelectedPolicy = (0, _reduxActions.createAction)('UNSET_SELECTED_POLICY');\nvar setSelectedPolicyName = exports.setSelectedPolicyName = (0, _reduxActions.createAction)('SET_SELECTED_POLICY_NAME');\nvar setSaveAsNewPolicy = exports.setSaveAsNewPolicy = (0, _reduxActions.createAction)('SET_SAVE_AS_NEW_POLICY');\nvar policySortChanged = exports.policySortChanged = (0, _reduxActions.createAction)('POLICY_SORT_CHANGED');\nvar policyPageSizeChanged = exports.policyPageSizeChanged = (0, _reduxActions.createAction)('POLICY_PAGE_SIZE_CHANGED');\nvar policyPageChanged = exports.policyPageChanged = (0, _reduxActions.createAction)('POLICY_PAGE_CHANGED');\nvar policySortDirectionChanged = exports.policySortDirectionChanged = (0, _reduxActions.createAction)('POLICY_SORT_DIRECTION_CHANGED');\nvar policyFilterChanged = exports.policyFilterChanged = (0, _reduxActions.createAction)('POLICY_FILTER_CHANGED');\n\nvar fetchPolicies = exports.fetchPolicies = function fetchPolicies(withIndices, callback) {\n  return function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(dispatch) {\n      var policies, title;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              policies = void 0;\n              _context.prev = 1;\n              _context.next = 4;\n              return (0, _api.loadPolicies)(withIndices);\n\n            case 4:\n              policies = _context.sent;\n              _context.next = 12;\n              break;\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context['catch'](1);\n              title = _i18n.i18n.translate('xpack.indexLifecycleMgmt.editPolicy.loadPolicyErrorMessage', {\n                defaultMessage: 'Error loading policies'\n              });\n\n              (0, _api_errors.showApiError)(_context.t0, title);\n              return _context.abrupt('return', false);\n\n            case 12:\n\n              dispatch(fetchedPolicies(policies));\n              if (policies.length === 0) {\n                dispatch(setSelectedPolicy());\n              }\n              callback && callback();\n              return _context.abrupt('return', policies);\n\n            case 16:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, undefined, [[1, 7]]);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\n\nvar setPhaseData = exports.setPhaseData = (0, _reduxActions.createAction)(_constants.SET_PHASE_DATA, function (phase, key, value) {\n  return { phase: phase, key: key, value: value };\n});",null]}