{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/maps/public/shared/utils/color_utils.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/maps/public/shared/utils/color_utils.js","mtime":1567631712022},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getRGBColorRangeStrings = getRGBColorRangeStrings;\nexports.getHexColorRangeStrings = getHexColorRangeStrings;\n\nvar _colormaps = require('ui/vislib/components/color/colormaps');\n\nvar _color_util = require('ui/vis/map/color_util');\n\nvar _chromaJs = require('chroma-js');\n\nvar _chromaJs2 = _interopRequireDefault(_chromaJs);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction getRGBColorRangeStrings(colorName, numberColors) {\n  var colorKeys = Object.keys(_colormaps.vislibColorMaps);\n  if (!colorKeys.includes(colorName)) {\n    //This is an internal error and should never occur. If it does, then it is a bug.\n    throw new Error(colorName + ' not found. Expected one of following values:       ' + colorKeys);\n  }\n  return (0, _color_util.getLegendColors)(_colormaps.vislibColorMaps[colorName].value, numberColors);\n} /*\n   * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n   * or more contributor license agreements. Licensed under the Elastic License;\n   * you may not use this file except in compliance with the Elastic License.\n   */\n\nfunction getHexColorRangeStrings(colorName, numberColors) {\n  return getRGBColorRangeStrings(colorName, numberColors).map(function (rgbColor) {\n    return (0, _chromaJs2.default)(rgbColor).hex();\n  });\n}",null]}