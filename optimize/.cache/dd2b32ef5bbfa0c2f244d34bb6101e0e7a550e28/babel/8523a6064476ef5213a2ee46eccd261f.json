{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/maps/public/components/map/mb/view.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/maps/public/components/map/mb/view.js","mtime":1567631712015},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MBMapContainer = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _resize_checker = require('ui/resize_checker');\n\nvar _utils = require('./utils');\n\nvar _kibana_services = require('../../../kibana_services');\n\nvar _constants = require('../../../../common/constants');\n\nvar _mapboxGl = require('mapbox-gl');\n\nvar _mapboxGl2 = _interopRequireDefault(_mapboxGl);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\nvar MBMapContainer = exports.MBMapContainer = function (_React$Component) {\n  _inherits(MBMapContainer, _React$Component);\n\n  function MBMapContainer() {\n    _classCallCheck(this, MBMapContainer);\n\n    var _this = _possibleConstructorReturn(this, (MBMapContainer.__proto__ || Object.getPrototypeOf(MBMapContainer)).call(this));\n\n    _this._debouncedSync = _lodash2.default.debounce(function () {\n      if (_this._isMounted) {\n        _this._syncMbMapWithLayerList();\n        _this._syncMbMapWithInspector();\n      }\n    }, 256);\n\n    _this._syncMbMapWithMapState = function () {\n      var _this$props = _this.props,\n          isMapReady = _this$props.isMapReady,\n          goto = _this$props.goto,\n          clearGoto = _this$props.clearGoto;\n\n\n      if (!isMapReady || !goto) {\n        return;\n      }\n\n      clearGoto();\n\n      if (goto.bounds) {\n        //clamping ot -89/89 latitudes since Mapboxgl does not seem to handle bounds that contain the poles (logs errors to the console when using -90/90)\n        var lnLatBounds = new _mapboxGl2.default.LngLatBounds(new _mapboxGl2.default.LngLat(clamp(goto.bounds.min_lon, -180, 180), clamp(goto.bounds.min_lat, -89, 89)), new _mapboxGl2.default.LngLat(clamp(goto.bounds.max_lon, -180, 180), clamp(goto.bounds.max_lat, -89, 89)));\n        //maxZoom ensure we're not zooming in too far on single points or small shapes\n        //the padding is to avoid too tight of a fit around edges\n        _this._mbMap.fitBounds(lnLatBounds, { maxZoom: 17, padding: 16 });\n      } else if (goto.center) {\n        _this._mbMap.setZoom(goto.center.zoom);\n        _this._mbMap.setCenter({\n          lng: goto.center.lon,\n          lat: goto.center.lat\n        });\n      }\n    };\n\n    _this._syncMbMapWithLayerList = function () {\n      var _this$props2 = _this.props,\n          isMapReady = _this$props2.isMapReady,\n          layerList = _this$props2.layerList;\n\n\n      if (!isMapReady) {\n        return;\n      }\n\n      (0, _utils.removeOrphanedSourcesAndLayers)(_this._mbMap, layerList);\n      layerList.forEach(function (layer) {\n        layer.syncLayerWithMB(_this._mbMap);\n      });\n      (0, _utils.syncLayerOrder)(_this._mbMap, layerList);\n    };\n\n    _this._syncMbMapWithInspector = function () {\n      if (!_this.props.isMapReady || !_kibana_services.inspectorAdapters.map) {\n        return;\n      }\n\n      var stats = {\n        center: _this._mbMap.getCenter().toArray(),\n        zoom: _this._mbMap.getZoom()\n\n      };\n      _kibana_services.inspectorAdapters.map.setMapState({\n        stats: stats,\n        style: _this._mbMap.getStyle()\n      });\n    };\n\n    _this._mbMap = null;\n    _this._listeners = new Map(); // key is mbLayerId, value eventHandlers map\n    return _this;\n  }\n\n  _createClass(MBMapContainer, [{\n    key: '_getMapState',\n    value: function _getMapState() {\n      var zoom = this._mbMap.getZoom();\n      var mbCenter = this._mbMap.getCenter();\n      var mbBounds = this._mbMap.getBounds();\n      return {\n        zoom: _lodash2.default.round(zoom, _constants.ZOOM_PRECISION),\n        center: {\n          lon: _lodash2.default.round(mbCenter.lng, _constants.DECIMAL_DEGREES_PRECISION),\n          lat: _lodash2.default.round(mbCenter.lat, _constants.DECIMAL_DEGREES_PRECISION)\n        },\n        extent: {\n          minLon: _lodash2.default.round(mbBounds.getWest(), _constants.DECIMAL_DEGREES_PRECISION),\n          minLat: _lodash2.default.round(mbBounds.getSouth(), _constants.DECIMAL_DEGREES_PRECISION),\n          maxLon: _lodash2.default.round(mbBounds.getEast(), _constants.DECIMAL_DEGREES_PRECISION),\n          maxLat: _lodash2.default.round(mbBounds.getNorth(), _constants.DECIMAL_DEGREES_PRECISION)\n        }\n      };\n    }\n  }, {\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this._initializeMap();\n      this._isMounted = true;\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this._isMounted = false;\n      if (this._checker) {\n        this._checker.destroy();\n      }\n      if (this._mbMap) {\n        this._mbMap.remove();\n        this._mbMap = null;\n      }\n      this.props.onMapDestroyed();\n    }\n  }, {\n    key: '_initializeMap',\n    value: function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var _this2 = this;\n\n        var originalMbBoxOnFunc, originalMbBoxRemoveLayerFunc, throttledSetMouseCoordinates;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return (0, _utils.createMbMapInstance)(this.refs.mapContainer, this.props.goto ? this.props.goto.center : null);\n\n              case 2:\n                this._mbMap = _context.sent;\n\n                if (this._isMounted) {\n                  _context.next = 5;\n                  break;\n                }\n\n                return _context.abrupt('return');\n\n              case 5:\n\n                // Override mapboxgl.Map \"on\" and \"removeLayer\" methods so we can track layer listeners\n                // Tracked layer listerners are used to clean up event handlers\n                originalMbBoxOnFunc = this._mbMap.on;\n                originalMbBoxRemoveLayerFunc = this._mbMap.removeLayer;\n\n                this._mbMap.on = function () {\n                  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n                    args[_key] = arguments[_key];\n                  }\n\n                  // args do not identify layer so there is nothing to track\n                  if (args.length <= 2) {\n                    originalMbBoxOnFunc.apply(_this2._mbMap, args);\n                    return;\n                  }\n\n                  var eventType = args[0];\n                  var mbLayerId = args[1];\n                  var handler = args[2];\n                  _this2._addListener(eventType, mbLayerId, handler);\n\n                  originalMbBoxOnFunc.apply(_this2._mbMap, args);\n                };\n                this._mbMap.removeLayer = function (id) {\n                  _this2._removeListeners(id);\n                  originalMbBoxRemoveLayerFunc.apply(_this2._mbMap, [id]);\n                };\n\n                this.assignSizeWatch();\n\n                // moveend callback is debounced to avoid updating map extent state while map extent is still changing\n                // moveend is fired while the map extent is still changing in the following scenarios\n                // 1) During opening/closing of layer details panel, the EUI animation results in 8 moveend events\n                // 2) Setting map zoom and center from goto is done in 2 API calls, resulting in 2 moveend events\n                this._mbMap.on('moveend', _lodash2.default.debounce(function () {\n                  _this2.props.extentChanged(_this2._getMapState());\n                }, 100));\n\n                throttledSetMouseCoordinates = _lodash2.default.throttle(function (e) {\n                  _this2.props.setMouseCoordinates({\n                    lat: e.lngLat.lat,\n                    lon: e.lngLat.lng\n                  });\n                }, 100);\n\n                this._mbMap.on('mousemove', throttledSetMouseCoordinates);\n                this._mbMap.on('mouseout', function () {\n                  throttledSetMouseCoordinates.cancel(); // cancel any delayed setMouseCoordinates invocations\n                  _this2.props.clearMouseCoordinates();\n                });\n\n                this.props.onMapReady(this._getMapState());\n\n              case 15:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function _initializeMap() {\n        return _ref.apply(this, arguments);\n      }\n\n      return _initializeMap;\n    }()\n  }, {\n    key: '_addListener',\n    value: function _addListener(eventType, mbLayerId, handler) {\n      this._removeListener(eventType, mbLayerId);\n\n      var eventHandlers = !this._listeners.has(mbLayerId) ? new Map() : this._listeners.get(mbLayerId);\n      eventHandlers.set(eventType, handler);\n      this._listeners.set(mbLayerId, eventHandlers);\n    }\n  }, {\n    key: '_removeListeners',\n    value: function _removeListeners(mbLayerId) {\n      var _this3 = this;\n\n      if (this._listeners.has(mbLayerId)) {\n        var eventHandlers = this._listeners.get(mbLayerId);\n        eventHandlers.forEach(function (value, eventType) {\n          _this3._removeListener(eventType, mbLayerId);\n        });\n        this._listeners.delete(mbLayerId);\n      }\n    }\n  }, {\n    key: '_removeListener',\n    value: function _removeListener(eventType, mbLayerId) {\n      if (this._listeners.has(mbLayerId)) {\n        var eventHandlers = this._listeners.get(mbLayerId);\n        if (eventHandlers.has(eventType)) {\n          this._mbMap.off(eventType, mbLayerId, eventHandlers.get(eventType));\n          eventHandlers.delete(eventType);\n        }\n      }\n    }\n  }, {\n    key: 'assignSizeWatch',\n    value: function assignSizeWatch() {\n      var _this4 = this;\n\n      this._checker = new _resize_checker.ResizeChecker(this.refs.mapContainer);\n      this._checker.on('resize', function () {\n        var lastWidth = window.innerWidth;\n        var lastHeight = window.innerHeight;\n        return function () {\n          if (lastWidth === window.innerWidth && lastHeight === window.innerHeight && _this4._mbMap) {\n            _this4._mbMap.resize();\n          }\n          lastWidth = window.innerWidth;\n          lastHeight = window.innerHeight;\n        };\n      }());\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      // do not debounce syncing zoom and center\n      this._syncMbMapWithMapState();\n      this._debouncedSync();\n      return _react2.default.createElement('div', { id: 'mapContainer', className: 'mapContainer', ref: 'mapContainer' });\n    }\n  }]);\n\n  return MBMapContainer;\n}(_react2.default.Component);\n\nfunction clamp(val, min, max) {\n  if (val > max) val = max;else if (val < min) val = min;\n  return val;\n}",null]}