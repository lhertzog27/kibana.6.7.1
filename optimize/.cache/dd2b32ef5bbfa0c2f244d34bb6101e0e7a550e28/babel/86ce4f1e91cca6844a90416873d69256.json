{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/util/chart_config_builder.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/util/chart_config_builder.js","mtime":1567631712070},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.buildConfigFromDetector = buildConfigFromDetector;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _job_utils = require('../../common/util/job_utils');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Builds the basic configuration to plot a chart of the source data\n// analyzed by the the detector at the given index from the specified ML job.\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\n/*\n * Builds the configuration object used to plot a chart showing anomalies\n * in the source metric data.\n */\n\nfunction buildConfigFromDetector(job, detectorIndex) {\n  var analysisConfig = job.analysis_config;\n  var detector = analysisConfig.detectors[detectorIndex];\n\n  var config = {\n    jobId: job.job_id,\n    detectorIndex: detectorIndex,\n    metricFunction: (0, _job_utils.mlFunctionToESAggregation)(detector.function),\n    timeField: job.data_description.time_field,\n    interval: job.analysis_config.bucket_span,\n    datafeedConfig: job.datafeed_config\n  };\n\n  if (detector.field_name !== undefined) {\n    config.metricFieldName = detector.field_name;\n  }\n\n  // Extra checks if the job config uses a summary count field.\n  var summaryCountFieldName = analysisConfig.summary_count_field_name;\n  if (config.metricFunction === 'count' && summaryCountFieldName !== undefined && summaryCountFieldName !== 'doc_count') {\n    // Check for a detector looking at cardinality (distinct count) using an aggregation.\n    // The cardinality field will be in:\n    // aggregations/<agg_name>/aggregations/<summaryCountFieldName>/cardinality/field\n    // or aggs/<agg_name>/aggs/<summaryCountFieldName>/cardinality/field\n    var cardinalityField = undefined;\n    var topAgg = _lodash2.default.get(job.datafeed_config, 'aggregations') || _lodash2.default.get(job.datafeed_config, 'aggs');\n    if (topAgg !== undefined && _lodash2.default.values(topAgg).length > 0) {\n      cardinalityField = _lodash2.default.get(_lodash2.default.values(topAgg)[0], ['aggregations', summaryCountFieldName, 'cardinality', 'field']) || _lodash2.default.get(_lodash2.default.values(topAgg)[0], ['aggs', summaryCountFieldName, 'cardinality', 'field']);\n    }\n\n    if (detector.function === 'non_zero_count' && cardinalityField !== undefined) {\n      config.metricFunction = 'cardinality';\n      config.metricFieldName = cardinalityField;\n    } else {\n      // For count detectors using summary_count_field, plot sum(summary_count_field_name)\n      config.metricFunction = 'sum';\n      config.metricFieldName = summaryCountFieldName;\n    }\n  }\n\n  return config;\n}",null]}