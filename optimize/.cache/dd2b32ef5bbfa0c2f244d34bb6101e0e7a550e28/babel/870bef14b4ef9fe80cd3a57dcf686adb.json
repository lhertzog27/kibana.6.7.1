{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/jobs/new_job/simple/components/post_save_options/post_save_service.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/jobs/new_job/simple/components/post_save_options/post_save_service.js","mtime":1567631712056},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.postSaveService = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\nopyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * or more contributor license agreements. Licensed under the Elastic License;\nyou may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      */\n\nvar _job_service = require('plugins/ml/services/job_service');\n\nvar _create_watch_service = require('plugins/ml/jobs/new_job/simple/components/watcher/create_watch_service');\n\nvar _messagebar_service = require('plugins/ml/components/messagebar/messagebar_service');\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar msgs = _messagebar_service.mlMessageBarService;\n\nvar PostSaveService = function () {\n  function PostSaveService() {\n    _classCallCheck(this, PostSaveService);\n\n    this.STATUS = {\n      SAVE_FAILED: -1,\n      SAVING: 0,\n      SAVED: 1\n    };\n\n    this.status = {\n      realtimeJob: null,\n      watch: null\n    };\n    _create_watch_service.mlCreateWatchService.status = this.status;\n\n    this.externalCreateWatch;\n  }\n\n  _createClass(PostSaveService, [{\n    key: 'startRealtimeJob',\n    value: function startRealtimeJob(jobId, i18n) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        _this.status.realtimeJob = _this.STATUS.SAVING;\n\n        var datafeedId = _job_service.mlJobService.getDatafeedId(jobId);\n\n        _job_service.mlJobService.openJob(jobId).catch(function () {}).then(function () {\n          _job_service.mlJobService.startDatafeed(datafeedId, jobId, 0, undefined).then(function () {\n            _this.status.realtimeJob = _this.STATUS.SAVED;\n            resolve();\n          }).catch(function (resp) {\n            msgs.error(i18n('xpack.ml.newJob.simple.postSaveOptions.couldNotStartDatafeedErrorMessage', {\n              defaultMessage: 'Could not start datafeed:'\n            }), resp);\n            _this.status.realtimeJob = _this.STATUS.SAVE_FAILED;\n            reject();\n          });\n        });\n      });\n    }\n  }, {\n    key: 'apply',\n    value: function apply(jobId, runInRealtime, createWatch, i18n) {\n      var _this2 = this;\n\n      return new Promise(function (resolve) {\n        if (runInRealtime) {\n          _this2.startRealtimeJob(jobId, i18n).then(function () {\n            if (createWatch) {\n              _create_watch_service.mlCreateWatchService.createNewWatch(jobId).catch(function () {}).then(function () {\n                resolve();\n              });\n            } else {\n              resolve();\n            }\n          });\n        } else {\n          resolve();\n        }\n      });\n    }\n  }]);\n\n  return PostSaveService;\n}();\n\nvar postSaveService = exports.postSaveService = new PostSaveService();",null]}