{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/maps/public/shared/layers/sources/ems_file_source/ems_file_source.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/maps/public/shared/layers/sources/ems_file_source/ems_file_source.js","mtime":1567631712019},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EMSFileSource = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _vector_source = require('../vector_source');\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _constants = require('../../../../../common/constants');\n\nvar _kibana_services = require('../../../../kibana_services');\n\nvar _meta = require('../../../../meta');\n\nvar _create_source_editor = require('./create_source_editor');\n\nvar _i18n = require('@kbn/i18n');\n\nvar _i18n_getters = require('../../../../../common/i18n_getters');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\nvar EMSFileSource = exports.EMSFileSource = function (_AbstractVectorSource) {\n  _inherits(EMSFileSource, _AbstractVectorSource);\n\n  _createClass(EMSFileSource, null, [{\n    key: 'createDescriptor',\n    value: function createDescriptor(id) {\n      return {\n        type: EMSFileSource.type,\n        id: id\n      };\n    }\n  }, {\n    key: 'renderEditor',\n    value: function renderEditor(_ref) {\n      var onPreviewSource = _ref.onPreviewSource;\n\n      var onChange = function onChange(selectedId) {\n        var emsFileSourceDescriptor = EMSFileSource.createDescriptor(selectedId);\n        var emsFileSource = new EMSFileSource(emsFileSourceDescriptor);\n        onPreviewSource(emsFileSource);\n      };\n      return _react2.default.createElement(_create_source_editor.EMSFileCreateSourceEditor, { onChange: onChange });\n    }\n  }]);\n\n  function EMSFileSource(descriptor) {\n    _classCallCheck(this, EMSFileSource);\n\n    return _possibleConstructorReturn(this, (EMSFileSource.__proto__ || Object.getPrototypeOf(EMSFileSource)).call(this, descriptor));\n  }\n\n  _createClass(EMSFileSource, [{\n    key: '_getEmsVectorFileMeta',\n    value: function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var _this2 = this;\n\n        var emsFiles, meta;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return (0, _meta.getEmsVectorFilesMeta)();\n\n              case 2:\n                emsFiles = _context.sent;\n                meta = emsFiles.find(function (source) {\n                  return source.id === _this2._descriptor.id;\n                });\n\n                if (meta) {\n                  _context.next = 6;\n                  break;\n                }\n\n                throw new Error(_i18n.i18n.translate('xpack.maps.source.emsFile.unableToFindIdErrorMessage', {\n                  defaultMessage: 'Unable to find EMS vector shapes for id: {id}',\n                  values: {\n                    id: this._descriptor.id\n                  }\n                }));\n\n              case 6:\n                return _context.abrupt('return', meta);\n\n              case 7:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function _getEmsVectorFileMeta() {\n        return _ref2.apply(this, arguments);\n      }\n\n      return _getEmsVectorFileMeta;\n    }()\n  }, {\n    key: 'getGeoJsonWithMeta',\n    value: function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        var emsVectorFileMeta, featureCollection;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this._getEmsVectorFileMeta();\n\n              case 2:\n                emsVectorFileMeta = _context2.sent;\n                _context2.next = 5;\n                return _vector_source.AbstractVectorSource.getGeoJson({\n                  format: emsVectorFileMeta.format,\n                  featureCollectionPath: 'data',\n                  fetchUrl: '../' + _constants.GIS_API_PATH + '/data/ems?id=' + encodeURIComponent(this._descriptor.id)\n                });\n\n              case 5:\n                featureCollection = _context2.sent;\n                return _context2.abrupt('return', {\n                  data: featureCollection,\n                  meta: {}\n                });\n\n              case 7:\n              case 'end':\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getGeoJsonWithMeta() {\n        return _ref3.apply(this, arguments);\n      }\n\n      return getGeoJsonWithMeta;\n    }()\n  }, {\n    key: 'getImmutableProperties',\n    value: function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n        var emsLink;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return _kibana_services.emsServiceSettings.getEMSHotLink({ id: this._descriptor.id });\n\n              case 2:\n                emsLink = _context3.sent;\n                return _context3.abrupt('return', [{\n                  label: (0, _i18n_getters.getDataSourceLabel)(),\n                  value: EMSFileSource.title\n                }, {\n                  label: _i18n.i18n.translate('xpack.maps.source.emsFile.layerLabel', {\n                    defaultMessage: 'Layer'\n                  }),\n                  value: this._descriptor.id,\n                  link: emsLink }]);\n\n              case 4:\n              case 'end':\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function getImmutableProperties() {\n        return _ref4.apply(this, arguments);\n      }\n\n      return getImmutableProperties;\n    }()\n  }, {\n    key: 'getDisplayName',\n    value: function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {\n        var emsVectorFileMeta;\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.prev = 0;\n                _context4.next = 3;\n                return this._getEmsVectorFileMeta();\n\n              case 3:\n                emsVectorFileMeta = _context4.sent;\n                return _context4.abrupt('return', emsVectorFileMeta.name);\n\n              case 7:\n                _context4.prev = 7;\n                _context4.t0 = _context4['catch'](0);\n                return _context4.abrupt('return', this._descriptor.id);\n\n              case 10:\n              case 'end':\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[0, 7]]);\n      }));\n\n      function getDisplayName() {\n        return _ref5.apply(this, arguments);\n      }\n\n      return getDisplayName;\n    }()\n  }, {\n    key: 'getAttributions',\n    value: function () {\n      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {\n        var emsVectorFileMeta;\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this._getEmsVectorFileMeta();\n\n              case 2:\n                emsVectorFileMeta = _context5.sent;\n                return _context5.abrupt('return', emsVectorFileMeta.attributions);\n\n              case 4:\n              case 'end':\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function getAttributions() {\n        return _ref6.apply(this, arguments);\n      }\n\n      return getAttributions;\n    }()\n  }, {\n    key: 'getStringFields',\n    value: function () {\n      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {\n        var emsVectorFileMeta;\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return this._getEmsVectorFileMeta();\n\n              case 2:\n                emsVectorFileMeta = _context6.sent;\n                return _context6.abrupt('return', emsVectorFileMeta.fields.map(function (f) {\n                  return { name: f.name, label: f.description };\n                }));\n\n              case 4:\n              case 'end':\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function getStringFields() {\n        return _ref7.apply(this, arguments);\n      }\n\n      return getStringFields;\n    }()\n  }, {\n    key: 'canFormatFeatureProperties',\n    value: function canFormatFeatureProperties() {\n      return true;\n    }\n  }]);\n\n  return EMSFileSource;\n}(_vector_source.AbstractVectorSource);\n\nEMSFileSource.type = _constants.EMS_FILE;\nEMSFileSource.title = _i18n.i18n.translate('xpack.maps.source.emsFileTitle', {\n  defaultMessage: 'Vector shapes'\n});\nEMSFileSource.description = _i18n.i18n.translate('xpack.maps.source.emsFileDescription', {\n  defaultMessage: 'Vector shapes of administrative boundaries from Elastic Maps Service'\n});\nEMSFileSource.icon = 'emsApp';",null]}