{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/watcher/public/components/xpack_aria_describes/xpack_aria_describes.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/watcher/public/components/xpack_aria_describes/xpack_aria_describes.js","mtime":1567631712342},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }(); /*\nopyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\nor more contributor license agreements. Licensed under the Elastic License;\nyou may not use this file except in compliance with the Elastic License.\nn\nvar _jquery = require('jquery');\n\nvar _jquery2 = _interopRequireDefault(_jquery);\n\nvar _modules = require('ui/modules');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar app = _modules.uiModules.get('xpack/watcher');\n\napp.directive('xpackAriaDescribes', function () {\n  return {\n    restrict: 'A',\n    link: function link($scope, $ele, attr) {\n      if (!Object.keys(attr).includes('id')) {\n        throw new Error('An element with xpack-aria-describes=\"' + attr.xpackAriaDescribes + '\" does not have an id attribute defined');\n      }\n\n      var selector = '';\n\n      function updateAriaDescribedBy(elementId, targetIdList, targetLength) {\n        var remove = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n        if (!elementId || !targetIdList || targetLength === 0) {\n          return;\n        }\n\n        var targetIds = targetIdList.split(' ');\n        targetIds.forEach(function (targetId) {\n          var $target = (0, _jquery2.default)('#' + targetId);\n\n          // Preserve any existing ids in the target's aria-describedby attribute\n          var describedby = $target.attr('aria-describedby');\n          var describedByParts = describedby ? describedby.split(' ') : [];\n          var targetIndex = describedByParts.indexOf(elementId);\n\n          if (remove) {\n            // remove this control's id from the list if it is there.\n            if (targetIndex !== -1) {\n              describedByParts.splice(targetIndex, 1);\n            }\n          } else {\n            // add this control's id to the list if it is not already there.\n            if (targetIndex === -1) {\n              describedByParts.push(elementId);\n            }\n          }\n\n          if (describedByParts.length === 0) {\n            $target.removeAttr('aria-describedby');\n          } else {\n            var newDescribedBy = describedByParts.join(' ');\n            $target.attr('aria-describedby', newDescribedBy);\n          }\n        });\n      }\n\n      $scope.$watch(function () {\n        return attr.xpackAriaDescribes;\n      }, function (xpackAriaDescribes) {\n        var ids = xpackAriaDescribes.split(' ');\n        selector = ids.map(function (id) {\n          return '#' + id;\n        }).join(',');\n\n        $scope.targetIdList = xpackAriaDescribes;\n      });\n\n      $scope.$watchMulti([function () {\n        return attr.id;\n      }, 'targetIdList', function () {\n        return (0, _jquery2.default)(selector).length;\n      }], function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 3),\n            elementId = _ref2[0],\n            targetIdList = _ref2[1],\n            targetLength = _ref2[2];\n\n        updateAriaDescribedBy(elementId, targetIdList, targetLength);\n      });\n\n      $scope.$on('$destroy', function () {\n        var elementId = attr.id;\n        var targetIdList = $scope.targetIdList;\n        var targetLength = (0, _jquery2.default)(selector).length;\n\n        updateAriaDescribedBy(elementId, targetIdList, targetLength, true);\n      });\n    }\n  };\n});",null]}