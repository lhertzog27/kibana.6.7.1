{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/public/components/workpad_export/utils.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/public/components/workpad_export/utils.js","mtime":1567631711929},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getPdfUrl = getPdfUrl;\nexports.createPdf = createPdf;\n\nvar _chrome = require('ui/chrome');\n\nvar _chrome2 = _interopRequireDefault(_chrome);\n\nvar _query_string = require('ui/utils/query_string');\n\nvar _risonNode = require('rison-node');\n\nvar _risonNode2 = _interopRequireDefault(_risonNode);\n\nvar _fetch = require('../../../common/lib/fetch');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// type of the desired pdf output (print or preserve_layout)\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nvar PDF_LAYOUT_TYPE = 'preserve_layout';\n\nfunction getPdfUrl(_ref, _ref2) {\n  var id = _ref.id,\n      title = _ref.name,\n      width = _ref.width,\n      height = _ref.height;\n  var pageCount = _ref2.pageCount;\n\n  var reportingEntry = _chrome2.default.addBasePath('/api/reporting/generate');\n  var canvasEntry = '/app/canvas#';\n\n  // The viewport in Reporting by specifying the dimensions. In order for things to work,\n  // we need a viewport that will include all of the pages in the workpad. The viewport\n  // also needs to include any offset values from the 0,0 position, otherwise the cropped\n  // screenshot that Reporting takes will be off the mark. Reporting will take a screenshot\n  // of the entire viewport and then crop it down to the element that was asked for.\n\n  // NOTE: while the above is true, the scaling seems to be broken. The export screen draws\n  // pages at the 0,0 point, so the offset isn't currently required to get the correct\n  // viewport size.\n\n  // build a list of all page urls for exporting, they are captured one at a time\n  var workpadUrls = [];\n  for (var i = 1; i <= pageCount; i++) {\n    workpadUrls.push(_risonNode2.default.encode(canvasEntry + '/export/workpad/pdf/' + id + '/page/' + i));\n  }\n\n  var jobParams = {\n    browserTimezone: 'America/Phoenix', // TODO: get browser timezone, or Kibana setting?\n    layout: {\n      dimensions: { width: width, height: height },\n      id: PDF_LAYOUT_TYPE\n    },\n    objectType: 'canvas workpad',\n    relativeUrls: workpadUrls,\n    title: title\n  };\n\n  return reportingEntry + '/printablePdf?' + _query_string.QueryString.param('jobParams', _risonNode2.default.encode(jobParams));\n}\n\nfunction createPdf() {\n  var createPdfUri = getPdfUrl.apply(undefined, arguments);\n  return _fetch.fetch.post(createPdfUri);\n}",null]}