{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/settings/calendars/list/delete_calendars.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/settings/calendars/list/delete_calendars.js","mtime":1567631712065},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.deleteCalendars = undefined;\n\nvar deleteCalendars = exports.deleteCalendars = function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(calendarsToDelete, callback) {\n    var messageId, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, calendar, calendarId, errorMessage;\n\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(calendarsToDelete === undefined || calendarsToDelete.length === 0)) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt('return');\n\n          case 2:\n\n            // Delete each of the specified calendars in turn, waiting for each response\n            // before deleting the next to minimize load on the cluster.\n            messageId = calendarsToDelete.length > 1 ? _i18n.i18n.translate('xpack.ml.calendarsList.deleteCalendars.calendarsLabel', {\n              defaultMessage: '{calendarsToDeleteCount} calendars',\n              values: { calendarsToDeleteCount: calendarsToDelete.length }\n            }) : '' + calendarsToDelete[0].calendar_id;\n\n            _notify.toastNotifications.add(_i18n.i18n.translate('xpack.ml.calendarsList.deleteCalendars.deletingCalendarsNotificationMessage', {\n              defaultMessage: 'Deleting {messageId}',\n              values: { messageId: messageId }\n            }));\n\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _iteratorError = undefined;\n            _context.prev = 7;\n            _iterator = calendarsToDelete[Symbol.iterator]();\n\n          case 9:\n            if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {\n              _context.next = 25;\n              break;\n            }\n\n            calendar = _step.value;\n            calendarId = calendar.calendar_id;\n            _context.prev = 12;\n            _context.next = 15;\n            return _ml_api_service.ml.deleteCalendar({ calendarId: calendarId });\n\n          case 15:\n            _context.next = 22;\n            break;\n\n          case 17:\n            _context.prev = 17;\n            _context.t0 = _context['catch'](12);\n\n            console.log('Error deleting calendar:', _context.t0);\n            errorMessage = _i18n.i18n.translate('xpack.ml.calendarsList.deleteCalendars.deletingCalendarErrorMessage', {\n              defaultMessage: 'An error occurred deleting calendar {calendarId}{errorMessage}',\n              values: {\n                calendarId: calendar.calendar_id,\n                errorMessage: _context.t0.message ? ' : ' + _context.t0.message : ''\n              }\n            });\n\n            _notify.toastNotifications.addDanger(errorMessage);\n\n          case 22:\n            _iteratorNormalCompletion = true;\n            _context.next = 9;\n            break;\n\n          case 25:\n            _context.next = 31;\n            break;\n\n          case 27:\n            _context.prev = 27;\n            _context.t1 = _context['catch'](7);\n            _didIteratorError = true;\n            _iteratorError = _context.t1;\n\n          case 31:\n            _context.prev = 31;\n            _context.prev = 32;\n\n            if (!_iteratorNormalCompletion && _iterator.return) {\n              _iterator.return();\n            }\n\n          case 34:\n            _context.prev = 34;\n\n            if (!_didIteratorError) {\n              _context.next = 37;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 37:\n            return _context.finish(34);\n\n          case 38:\n            return _context.finish(31);\n\n          case 39:\n\n            _notify.toastNotifications.addSuccess(_i18n.i18n.translate('xpack.ml.calendarsList.deleteCalendars.deletingCalendarSuccessNotificationMessage', {\n              defaultMessage: '{messageId} deleted',\n              values: { messageId: messageId }\n            }));\n            callback();\n\n          case 41:\n          case 'end':\n            return _context.stop();\n        }\n      }\n    }, _callee, this, [[7, 27, 31, 39], [12, 17], [32,, 34, 38]]);\n  }));\n\n  return function deleteCalendars(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar _notify = require('ui/notify');\n\nvar _ml_api_service = require('../../../services/ml_api_service');\n\nvar _i18n = require('@kbn/i18n');\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            */",null]}