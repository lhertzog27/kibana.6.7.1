{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/jobs/new_job/simple/components/utils/validate_job.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/jobs/new_job/simple/components/utils/validate_job.js","mtime":1567631712057},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateJob = validateJob;\nexports.populateValidationMessages = populateValidationMessages;\n\nvar _job_utils = require('plugins/ml/../common/util/job_utils');\n\nvar _new_job_defaults = require('plugins/ml/jobs/new_job/utils/new_job_defaults');\n\nvar _validation = require('plugins/ml/../common/constants/validation');\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _i18n = require('@kbn/i18n');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } } /*\n                                                                                                                                                                                                     * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                     * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                     * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                     */\n\nfunction validateJob(job, checks) {\n  var limits = (0, _new_job_defaults.newJobLimits)();\n  var validationResults = (0, _job_utils.basicJobValidation)(job, undefined, limits);\n\n  var valid = true;\n\n  _lodash2.default.each(checks, function (item) {\n    item.valid = true;\n  });\n\n  populateValidationMessages(validationResults, checks);\n\n  _lodash2.default.each(checks, function (item) {\n    if (item.valid === false) {\n      valid = false;\n    }\n  });\n\n  return valid;\n}\n\nfunction populateValidationMessages(validationResults, checks) {\n  var limits = (0, _new_job_defaults.newJobLimits)();\n\n  if (validationResults.contains('job_id_empty')) {\n    checks.jobId.valid = false;\n  } else if (validationResults.contains('job_id_invalid')) {\n    checks.jobId.valid = false;\n    var msg = _i18n.i18n.translate('xpack.ml.newJob.simple.validateJob.jobNameAllowedCharactersDescription', {\n      defaultMessage: 'Job name can contain lowercase alphanumeric (a-z and 0-9), hyphens or underscores; ' + 'must start and end with an alphanumeric character'\n    });\n    checks.jobId.message = msg;\n  }\n\n  if (validationResults.contains('job_group_id_invalid')) {\n    checks.groupIds.valid = false;\n    var _msg = _i18n.i18n.translate('xpack.ml.newJob.simple.validateJob.jobGroupAllowedCharactersDescription', {\n      defaultMessage: 'Job group names can contain lowercase alphanumeric (a-z and 0-9), hyphens or underscores; ' + 'must start and end with an alphanumeric character'\n    });\n    checks.groupIds.message = _msg;\n  }\n\n  if (validationResults.contains('model_memory_limit_units_invalid')) {\n    checks.modelMemoryLimit.valid = false;\n    var str = _validation.ALLOWED_DATA_UNITS.slice(0, _validation.ALLOWED_DATA_UNITS.length - 1).join(', ') + ' or ' + [].concat(_toConsumableArray(_validation.ALLOWED_DATA_UNITS)).pop();\n    var _msg2 = _i18n.i18n.translate('xpack.ml.newJob.simple.validateJob.modelMemoryLimitUnitsInvalidErrorMessage', {\n      defaultMessage: 'Model memory limit data unit unrecognized. It must be {str}',\n      values: { str: str }\n    });\n    checks.modelMemoryLimit.message = _msg2;\n  }\n\n  if (validationResults.contains('model_memory_limit_invalid')) {\n    checks.modelMemoryLimit.valid = false;\n    var _msg3 = _i18n.i18n.translate('xpack.ml.newJob.simple.validateJob.modelMemoryLimitRangeInvalidErrorMessage', {\n      defaultMessage: 'Model memory limit cannot be higher than the maximum value of {maxModelMemoryLimit}',\n      values: { maxModelMemoryLimit: limits.max_model_memory_limit.toUpperCase() }\n    });\n    checks.modelMemoryLimit.message = _msg3;\n  }\n\n  if (validationResults.contains('detectors_duplicates')) {\n    checks.duplicateDetectors.valid = false;\n    var _msg4 = _i18n.i18n.translate('xpack.ml.newJob.simple.validateJob.duplicatedDetectorsErrorMessage', {\n      defaultMessage: 'Duplicate detectors were found.'\n    });\n    checks.duplicateDetectors.message = _msg4;\n  }\n}",null]}