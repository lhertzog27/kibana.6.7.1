{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/jobs/new_job/advanced/detectors_list_directive.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/jobs/new_job/advanced/detectors_list_directive.js","mtime":1567631712053},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nvar _angular = require('angular');\n\nvar _angular2 = _interopRequireDefault(_angular);\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nrequire('plugins/ml/jobs/new_job/advanced/detector_modal');\n\nrequire('plugins/ml/jobs/new_job/advanced/detector_filter_modal');\n\nvar _string_utils = require('plugins/ml/util/string_utils');\n\nvar _detectors_list = require('./detectors_list.html');\n\nvar _detectors_list2 = _interopRequireDefault(_detectors_list);\n\nvar _detector_modal = require('plugins/ml/jobs/new_job/advanced/detector_modal/detector_modal.html');\n\nvar _detector_modal2 = _interopRequireDefault(_detector_modal);\n\nvar _detector_filter_modal = require('plugins/ml/jobs/new_job/advanced/detector_filter_modal/detector_filter_modal.html');\n\nvar _detector_filter_modal2 = _interopRequireDefault(_detector_filter_modal);\n\nvar _job_service = require('plugins/ml/services/job_service');\n\nvar _modules = require('ui/modules');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\n// directive for displaying detectors form list.\n\nvar _module = _modules.uiModules.get('apps/ml');\n\n_module.directive('mlJobDetectorsList', function ($modal, i18n) {\n  return {\n    restrict: 'AE',\n    replace: true,\n    scope: {\n      detectors: '=mlDetectors',\n      indices: '=mlIndices',\n      fields: '=mlFields',\n      catFieldNameSelected: '=mlCatFieldNameSelected',\n      editMode: '=mlEditMode',\n      onUpdate: '=mlOnDetectorsUpdate'\n    },\n    template: _detectors_list2.default,\n    controller: function controller($scope) {\n\n      $scope.addDetector = function (dtr, index) {\n        if (dtr !== undefined) {\n          if (index >= 0) {\n            $scope.detectors[index] = dtr;\n          } else {\n            $scope.detectors.push(dtr);\n          }\n\n          $scope.onUpdate();\n        }\n      };\n\n      $scope.removeDetector = function (index) {\n        $scope.detectors.splice(index, 1);\n        $scope.onUpdate();\n      };\n\n      $scope.editDetector = function (index) {\n        $scope.openNewWindow(index);\n      };\n\n      $scope.info = function () {};\n\n      // add a filter to the detector\n      // called from inside the filter modal\n      $scope.addFilter = function (dtr, filter, filterIndex) {\n        if (dtr.rules === undefined) {\n          dtr.rules = [];\n        }\n\n        if (filterIndex >= 0) {\n          dtr.rules[filterIndex] = filter;\n        } else {\n          dtr.rules.push(filter);\n        }\n      };\n\n      $scope.removeFilter = function (detector, filterIndex) {\n        detector.rules.splice(filterIndex, 1);\n      };\n\n      $scope.editFilter = function (detector, index) {\n        $scope.openFilterWindow(detector, index);\n      };\n\n      $scope.detectorToString = _string_utils.detectorToString;\n\n      function validateDetector(dtr) {\n\n        // locally check exclude_frequent as it can only be 'true', 'false', 'by' or 'over'\n        if (dtr.exclude_frequent !== undefined && dtr.exclude_frequent !== '') {\n          var exFrqs = ['all', 'none', 'by', 'over'];\n          if (_lodash2.default.indexOf(exFrqs, dtr.exclude_frequent.trim()) === -1) {\n            // return a pretend promise\n            return {\n              then: function then(callback) {\n                callback({\n                  success: false,\n                  message: i18n('xpack.ml.newJob.advanced.detectorsList.invalidExcludeFrequentParameterErrorMessage', {\n                    defaultMessage: '{excludeFrequentParam} value must be: {allValue}, {noneValue}, {byValue} or {overValue}',\n                    values: {\n                      excludeFrequentParam: 'exclude_frequent',\n                      allValue: '\"all\"',\n                      noneValue: '\"none\"',\n                      byValue: '\"by\"',\n                      overValue: '\"over\"'\n                    }\n                  })\n                });\n              }\n            };\n          }\n        }\n\n        // post detector to server for in depth validation\n        return _job_service.mlJobService.validateDetector(dtr).then(function (resp) {\n          return {\n            success: resp.acknowledged || false\n          };\n        }).catch(function (resp) {\n          return {\n            success: false,\n            message: resp.message || i18n('xpack.ml.newJob.advanced.detectorsList.validationFailedErrorMessage', {\n              defaultMessage: 'Validation failed'\n            })\n          };\n        });\n      }\n\n      $scope.openNewWindow = function (index) {\n        index = index !== undefined ? index : -1;\n        var dtr = void 0;\n        if (index >= 0) {\n          dtr = _angular2.default.copy($scope.detectors[index]);\n        }\n        $modal.open({\n          template: _detector_modal2.default,\n          controller: 'MlDetectorModal',\n          backdrop: 'static',\n          keyboard: false,\n          size: 'lg',\n          resolve: {\n            params: function params() {\n              return {\n                fields: $scope.fields,\n                validate: validateDetector,\n                detector: dtr,\n                index: index,\n                add: $scope.addDetector,\n                catFieldNameSelected: $scope.catFieldNameSelected\n              };\n            }\n          }\n        });\n      };\n\n      $scope.openFilterWindow = function (dtr, filterIndex) {\n        filterIndex = filterIndex !== undefined ? filterIndex : -1;\n        var filter = void 0;\n        if (filterIndex >= 0) {\n          filter = _angular2.default.copy(dtr.rules[filterIndex]);\n        }\n        $modal.open({\n          template: _detector_filter_modal2.default,\n          controller: 'MlDetectorFilterModal',\n          backdrop: 'static',\n          keyboard: false,\n          size: 'lg',\n          resolve: {\n            params: function params() {\n              return {\n                fields: $scope.fields,\n                validate: validateDetector,\n                detector: dtr,\n                filter: filter,\n                index: filterIndex,\n                add: $scope.addFilter\n              };\n            }\n          }\n        });\n      };\n    }\n  };\n});",null]}