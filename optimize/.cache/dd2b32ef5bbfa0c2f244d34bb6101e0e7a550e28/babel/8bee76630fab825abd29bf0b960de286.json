{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/ui/public/agg_types/agg_params.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/agg_types/agg_params.js","mtime":1567631711696},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AggParams = undefined;\n\nrequire('../filters/label');\n\nvar _indexed_array = require('../indexed_array');\n\nvar _field = require('./param_types/field');\n\nvar _optioned = require('./param_types/optioned');\n\nvar _regex = require('./param_types/regex');\n\nvar _string = require('./param_types/string');\n\nvar _json = require('./param_types/json');\n\nvar _base = require('./param_types/base');\n\nvar _legacy_class = require('../utils/legacy_class');\n\nvar paramTypeMap = {\n  field: _field.FieldParamType,\n  optioned: _optioned.OptionedParamType,\n  regex: _regex.RegexParamType,\n  string: _string.StringParamType,\n  json: _json.JsonParamType,\n  _default: _base.BaseParamType\n};\n\n/**\n * Wraps a list of {{#crossLink \"AggParam\"}}{{/crossLink}} objects; owned by an {{#crossLink \"AggType\"}}{{/crossLink}}\n *\n * used to create:\n *   - `FieldAggParam` – When the config has `name: \"field\"`\n *   - `*AggParam` – When the type matches something in the map above\n *   - `BaseAggParam` – All other params\n *\n * @class AggParams\n * @constructor\n * @extends IndexedArray\n * @param {object[]} params - array of params that get new-ed up as AggParam objects as described above\n */\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n(0, _legacy_class.createLegacyClass)(AggParams).inherits(_indexed_array.IndexedArray);\nfunction AggParams(params) {\n  AggParams.Super.call(this, {\n    index: ['name'],\n    initialSet: params.map(function (config) {\n      var Class = paramTypeMap[config.type] || paramTypeMap._default;\n      return new Class(config);\n    })\n  });\n}\n\n/**\n * Reads an aggConfigs\n *\n * @method write\n * @param  {AggConfig} aggConfig\n *         the AggConfig object who's type owns these aggParams and contains the param values for our param defs\n * @param  {object} [locals]\n *         an array of locals that will be available to the write function (can be used to enhance\n *         the quality of things like date_histogram's \"auto\" interval)\n * @return {object} output\n *         output of the write calls, reduced into a single object. A `params: {}` property is exposed on the\n *         output object which is used to create the agg dsl for the search request. All other properties\n *         are dependent on the AggParam#write methods which should be studied for each AggType.\n */\nAggParams.prototype.write = function (aggConfig, aggs, locals) {\n  var output = { params: {} };\n  locals = locals || {};\n\n  this.forEach(function (param) {\n    if (param.write) {\n      param.write(aggConfig, output, aggs, locals);\n    } else {\n      output.params[param.name] = aggConfig.params[param.name];\n    }\n  });\n\n  return output;\n};\n\nexports.AggParams = AggParams;",null]}