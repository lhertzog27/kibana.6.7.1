{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/jobs/new_job/simple/components/event_rate_chart/event_rate_chart_directive.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/jobs/new_job/simple/components/event_rate_chart/event_rate_chart_directive.js","mtime":1567631712055},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nvar _jquery = require('jquery');\n\nvar _jquery2 = _interopRequireDefault(_jquery);\n\nvar _d = require('d3');\n\nvar _d2 = _interopRequireDefault(_d);\n\nvar _angular = require('angular');\n\nvar _angular2 = _interopRequireDefault(_angular);\n\nvar _moment = require('moment');\n\nvar _moment2 = _interopRequireDefault(_moment);\n\nvar _time_buckets = require('ui/time_buckets');\n\nvar _chart_utils = require('plugins/ml/util/chart_utils');\n\nvar _modules = require('ui/modules');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _module = _modules.uiModules.get('apps/ml'); /*\n                                                  * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                  * or more contributor license agreements. Licensed under the Elastic License;\n                                                  * you may not use this file except in compliance with the Elastic License.\n                                                  */\n\n/*\n * Chart showing event rate data, plus a progress bar indicating the progress of\n * the creation of a job.\n */\n\n_module.directive('mlEventRateChart', function () {\n\n  function link(scope, element) {\n\n    var svgWidth = 0;\n    var barChartHeight = scope.eventRateChartHeight;\n    var marginTop = 5;\n    var progressBarMarginBottom = barChartHeight + marginTop - 15;\n    var margin = { top: marginTop, right: 1, bottom: 20, left: scope.chartTicksMargin.width };\n    var svgHeight = barChartHeight + margin.top + margin.bottom;\n    var vizWidth = svgWidth - margin.left - margin.right;\n    var chartLimits = { max: 0, min: 0 };\n\n    var barChartXScale = null;\n    var swimlaneXScale = null;\n    var barChartYScale = null;\n\n    var barChartGroup = void 0;\n    var swimlaneGroup = void 0;\n\n    var $progressBar = void 0;\n\n    scope.$on('render', function () {\n      init();\n      createSVGGroups();\n      drawBarChart();\n    });\n\n    scope.$on('render-results', function () {\n      drawResults();\n    });\n\n    element.on('$destroy', function () {\n      scope.$destroy();\n    });\n\n    function init() {\n      var $el = _angular2.default.element('.event-rate-container');\n\n      margin.left = scope.chartTicksMargin.width;\n\n      svgWidth = $el.width();\n      vizWidth = svgWidth - margin.left - margin.right;\n\n      barChartXScale = _d2.default.scale.linear().rangeRound([0, vizWidth], .05);\n      swimlaneXScale = _d2.default.time.scale().range([0, vizWidth]);\n      barChartYScale = _d2.default.scale.linear().range([barChartHeight, 0]);\n    }\n\n    function createSVGGroups() {\n      if (scope.chartData.bars === undefined) {\n        return;\n      }\n\n      // Clear any existing elements from the visualization,\n      // then build the svg elements for the bubble chart.\n      var chartElement = _d2.default.select(element.get(0));\n      chartElement.select('svg').remove();\n      chartElement.select('.progress').remove();\n\n      if (chartElement.select('.progress-bar')[0][0] === null) {\n        var style = 'width: ' + (+vizWidth + 2) + 'px;\\n          margin-bottom: -' + +progressBarMarginBottom + 'px;\\n          margin-left: ' + (+margin.left - 1) + 'px;\\'';\n\n        chartElement.append('div').attr('class', 'progress').attr('style', style).append('div').attr('class', 'progress-bar');\n      }\n      $progressBar = (0, _jquery2.default)('.progress-bar');\n\n      var svg = chartElement.append('svg').attr('width', svgWidth).attr('height', svgHeight);\n\n      barChartGroup = svg.append('g').attr('class', 'bar-chart').attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n      swimlaneGroup = svg.append('g').attr('class', 'swimlane').attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n    }\n\n    function drawBarChart() {\n      var data = scope.chartData.bars;\n\n      // The swimlane and x-axis labels should be aligned with the other line charts\n      // however, when this chart is first drawn, this data is not available.\n      // on first display use the bar data for the scale\n      var finerData = scope.chartData.bars;\n      if (scope.chartData.line.length > 0) {\n        finerData = scope.chartData.line;\n      }\n      swimlaneXScale.domain(_d2.default.extent(finerData, function (d) {\n        return d.date;\n      }));\n\n      // Extend the time range/domain at the end by 1 barsInterval,\n      // otherwise the last bar will start at the end of vizWidth\n      // and overflow the chart.\n      var timeExtent = _d2.default.extent(data, function (d) {\n        return d.date;\n      });\n      timeExtent[1] = new Date(timeExtent[1].getTime() + scope.chartData.barsInterval);\n      barChartXScale = _d2.default.time.scale().range([0, vizWidth]).domain(timeExtent);\n\n      chartLimits.max = _d2.default.max(data, function (d) {\n        return d.value;\n      });\n      chartLimits.min = 0;\n\n      // add padding of 10% of the difference between max and min\n      // to the upper and lower ends of the y-axis\n      var padding = (chartLimits.max - chartLimits.min) * 0.05;\n      chartLimits.max += padding;\n\n      barChartYScale = barChartYScale.domain([chartLimits.min, chartLimits.max]);\n\n      // Get the scaled date format to use for x axis tick labels.\n      var timeBuckets = new _time_buckets.TimeBuckets();\n      timeBuckets.setInterval('auto');\n      if (data.length > 0) {\n        var xDomain = barChartXScale.domain();\n        var bounds = { min: (0, _moment2.default)(xDomain[0]), max: (0, _moment2.default)(xDomain[1]) };\n        timeBuckets.setBounds(bounds);\n      }\n\n      var xAxisTickFormat = timeBuckets.getScaledDateFormat();\n\n      var xAxis = _d2.default.svg.axis().scale(swimlaneXScale).orient('bottom').innerTickSize(-barChartHeight).outerTickSize(0).tickPadding(10).ticks((0, _chart_utils.numTicksForDateFormat)(vizWidth, xAxisTickFormat)).tickFormat(function (d) {\n        return (0, _moment2.default)(d).format(xAxisTickFormat);\n      });\n      var yAxis = _d2.default.svg.axis().scale(barChartYScale).orient('left').innerTickSize(-vizWidth).outerTickSize(0).tickPadding(10);\n\n      // add a white background to the chart\n      barChartGroup.append('rect').attr('x', 0).attr('y', 0).attr('height', barChartHeight).attr('width', vizWidth).style('fill', '#FFFFFF');\n\n      // Add border round plot area.\n      barChartGroup.append('rect').attr('x', 0).attr('y', 0).attr('height', barChartHeight).attr('width', vizWidth).style('stroke', '#cccccc').style('fill', 'none').style('stroke-width', 1);\n\n      drawBarChartAxes(xAxis, yAxis);\n      drawBarChartPaths(data);\n    }\n\n    function drawBarChartAxes(xAxis, yAxis) {\n\n      var axes = barChartGroup.append('g');\n\n      axes.append('g').attr('class', 'x axis').attr('transform', 'translate(0,' + barChartHeight + ')').call(xAxis);\n\n      axes.append('g').attr('class', 'y axis').call(yAxis);\n    }\n\n    function drawBarChartPaths(data) {\n      var earliestTime = scope.chartData.earliestTime;\n      var cellWidth = 0;\n      if (data.length > 0) {\n        cellWidth = barChartXScale(earliestTime + scope.chartData.barsInterval) - barChartXScale(earliestTime);\n      }\n\n      barChartGroup.selectAll('bar').data(data).enter().append('rect').style('fill', '#32a7c2').attr('class', 'bar').attr('x', function (d) {\n        return barChartXScale(d.time);\n      }).attr('width', cellWidth).attr('y', function (d) {\n        return barChartYScale(d.value);\n      }).attr('height', function (d) {\n        return barChartHeight - barChartYScale(d.value);\n      });\n    }\n\n    function drawResults() {\n      updateProgressBar();\n      drawSwimlane(vizWidth, barChartHeight);\n    }\n\n    function drawSwimlane(swlWidth, swlHeight) {\n      var lineData = scope.chartData.line;\n      var data = scope.chartData.swimlane;\n      var earliestTime = scope.chartData.earliestTime;\n\n      var cellWidth = 0;\n      if (data.length > 0) {\n        cellWidth = barChartXScale(earliestTime + scope.chartData.swimlaneInterval) - barChartXScale(earliestTime);\n      }\n\n      _d2.default.time.scale().range([0, swlWidth]).domain(_d2.default.extent(lineData, function (d) {\n        return d.date;\n      }));\n\n      _d2.default.scale.linear().range([swlHeight, 0]).domain([0, swlHeight]);\n\n      // Set up the color scale to use for indicating score.\n      var color = _d2.default.scale.threshold().domain([3, 25, 50, 75, 100]).range(['#d2e9f7', '#8bc8fb', '#ffdd00', '#ff7e00', '#fe5050']);\n\n      swimlaneGroup.select('.swimlane-cells').remove();\n\n      var cells = swimlaneGroup.append('g').attr('class', 'swimlane-cells').selectAll('cells').data(data);\n\n      cells.enter().append('rect').attr('x', function (d) {\n        return swimlaneXScale(d.date);\n      }).attr('y', 0).attr('rx', 0).attr('ry', 0).attr('class', function (d) {\n        return d.value > 0 ? 'swimlane-cell' : 'swimlane-cell-hidden';\n      }).attr('width', cellWidth - 0).attr('height', swlHeight - 0).style('fill', function (d) {\n        return color(d.value);\n      });\n    }\n\n    function updateProgressBar() {\n      var pcnt = scope.chartData.percentComplete;\n      $progressBar.css('width', pcnt + '%');\n    }\n  }\n\n  return {\n    scope: {\n      chartData: '=',\n      eventRateChartHeight: '=',\n      chartTicksMargin: '='\n    },\n    link: link\n  };\n});",null]}