{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/index_management/public/store/reducers/indices.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/index_management/public/store/reducers/indices.js","mtime":1567631711974},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.indices = undefined;\n\nvar _handleActions, _handleActions2, _handleActions3;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /*\n                                                                                                                                                                                                                                                                   * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                   * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                   * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                   */\n\nvar _redux = require('redux');\n\nvar _reduxActions = require('redux-actions');\n\nvar _actions = require('../actions');\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar byId = (0, _reduxActions.handleActions)((_handleActions = {}, _defineProperty(_handleActions, _actions.deleteIndicesSuccess, function (state, action) {\n  var indexNames = action.payload.indexNames;\n\n\n  var newState = {};\n  Object.values(state).forEach(function (index) {\n    if (!indexNames.includes(index.name)) {\n      newState[index.name] = index;\n    }\n  });\n\n  return newState;\n}), _defineProperty(_handleActions, _actions.loadIndicesSuccess, function (state, action) {\n  var indices = action.payload.indices;\n\n  var newState = {};\n  indices.forEach(function (index) {\n    newState[index.name] = index;\n  });\n\n  return newState;\n}), _defineProperty(_handleActions, _actions.reloadIndicesSuccess, function (state, action) {\n  var indices = action.payload.indices;\n\n\n  var newState = {};\n  indices.forEach(function (index) {\n    newState[index.name] = index;\n  });\n\n  return _extends({}, state, newState);\n}), _handleActions), {});\n\nvar allIds = (0, _reduxActions.handleActions)((_handleActions2 = {}, _defineProperty(_handleActions2, _actions.deleteIndicesSuccess, function (state, action) {\n  var indexNames = action.payload.indexNames;\n\n  var newState = [];\n  state.forEach(function (indexName) {\n    if (!indexNames.includes(indexName)) {\n      newState.push(indexName);\n    }\n  });\n  return newState;\n}), _defineProperty(_handleActions2, _actions.loadIndicesSuccess, function (state, action) {\n  var indices = action.payload.indices;\n\n  return indices.map(function (index) {\n    return index.name;\n  });\n}), _defineProperty(_handleActions2, _actions.reloadIndicesSuccess, function (state) {\n  // the set of IDs should never change when refreshing indexes.\n  return state;\n}), _handleActions2), []);\nvar loading = (0, _reduxActions.handleActions)((_handleActions3 = {}, _defineProperty(_handleActions3, _actions.loadIndicesStart, function () {\n  return true;\n}), _defineProperty(_handleActions3, _actions.loadIndicesSuccess, function () {\n  return false;\n}), _handleActions3), true);\nvar indices = exports.indices = (0, _redux.combineReducers)({\n  loading: loading,\n  byId: byId,\n  allIds: allIds\n});",null]}