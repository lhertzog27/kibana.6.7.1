{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/rollup/public/crud_app/store/actions/delete_jobs.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/rollup/public/crud_app/store/actions/delete_jobs.js","mtime":1567631712290},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.deleteJobs = undefined;\n\nvar _i18n = require('@kbn/i18n');\n\nvar _notify = require('ui/notify');\n\nvar _services = require('../../services');\n\nvar _selectors = require('../selectors');\n\nvar _action_types = require('../action_types');\n\nvar _refresh_jobs = require('./refresh_jobs');\n\nvar _detail_panel = require('./detail_panel');\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            */\n\nvar deleteJobs = exports.deleteJobs = function deleteJobs(jobIds) {\n  return function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(dispatch, getState) {\n      var detailPanelJob;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              dispatch({\n                type: _action_types.UPDATE_JOB_START\n              });\n\n              _context.prev = 1;\n              _context.next = 4;\n              return (0, _services.createNoticeableDelay)((0, _services.deleteJobs)(jobIds));\n\n            case 4:\n              _context.next = 10;\n              break;\n\n            case 6:\n              _context.prev = 6;\n              _context.t0 = _context['catch'](1);\n\n              dispatch({\n                type: _action_types.UPDATE_JOB_FAILURE\n              });\n\n              return _context.abrupt('return', (0, _services.showApiError)(_context.t0, _i18n.i18n.translate('xpack.rollupJobs.deleteAction.errorTitle', {\n                defaultMessage: 'Error deleting rollup jobs'\n              })));\n\n            case 10:\n\n              if (jobIds.length === 1) {\n                _notify.toastNotifications.addSuccess(_i18n.i18n.translate('xpack.rollupJobs.deleteAction.successSingleNotificationTitle', {\n                  defaultMessage: 'Rollup job \\'{jobId}\\' was deleted',\n                  values: { jobId: jobIds[0] }\n                }));\n              } else {\n                _notify.toastNotifications.addSuccess(_i18n.i18n.translate('xpack.rollupJobs.deleteAction.successMultipleNotificationTitle', {\n                  defaultMessage: '{count} rollup jobs were deleted',\n                  values: { count: jobIds.length }\n                }));\n              }\n\n              // If we've just deleted a job we were looking at, we need to close the panel.\n              detailPanelJob = (0, _selectors.getDetailPanelJob)(getState());\n\n              if (detailPanelJob && jobIds.includes(detailPanelJob.id)) {\n                dispatch((0, _detail_panel.closeDetailPanel)());\n              }\n\n              dispatch({\n                type: _action_types.UPDATE_JOB_SUCCESS\n              });\n\n              dispatch((0, _refresh_jobs.refreshJobs)());\n\n            case 15:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, undefined, [[1, 6]]);\n    }));\n\n    return function (_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};",null]}