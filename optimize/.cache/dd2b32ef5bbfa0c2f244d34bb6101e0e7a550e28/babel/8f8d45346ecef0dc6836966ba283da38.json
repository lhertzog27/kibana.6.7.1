{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/remote_clusters/public/sections/remote_cluster_list/components/remove_cluster_button_provider/remove_cluster_button_provider.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/remote_clusters/public/sections/remote_cluster_list/components/remove_cluster_button_provider/remove_cluster_button_provider.js","mtime":1567631712122},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RemoveClusterButtonProvider = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _class, _temp2; /*\n                     * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                     * or more contributor license agreements. Licensed under the Elastic License;\n                     * you may not use this file except in compliance with the Elastic License.\n                     */\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _react3 = require('@kbn/i18n/react');\n\nvar _eui = require('@elastic/eui');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar RemoveClusterButtonProvider = exports.RemoveClusterButtonProvider = (0, _react3.injectI18n)((_temp2 = _class = function (_Component) {\n  _inherits(_class, _Component);\n\n  function _class() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, _class);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = _class.__proto__ || Object.getPrototypeOf(_class)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n      isModalOpen: false\n    }, _this.onMouseOverModal = function (event) {\n      // This component can sometimes be used inside of an EuiToolTip, in which case mousing over\n      // the modal can trigger the tooltip. Stopping propagation prevents this.\n      event.stopPropagation();\n    }, _this.showConfirmModal = function () {\n      _this.setState({\n        isModalOpen: true\n      });\n    }, _this.closeConfirmModal = function () {\n      _this.setState({\n        isModalOpen: false\n      });\n    }, _this.onConfirm = function () {\n      var _this$props = _this.props,\n          removeClusters = _this$props.removeClusters,\n          clusterNames = _this$props.clusterNames;\n\n      removeClusters(clusterNames);\n      _this.closeConfirmModal();\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(_class, [{\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          intl = _props.intl,\n          clusterNames = _props.clusterNames,\n          children = _props.children;\n      var isModalOpen = this.state.isModalOpen;\n\n      var isSingleCluster = clusterNames.length === 1;\n      var modal = void 0;\n\n      if (isModalOpen) {\n        var title = isSingleCluster ? intl.formatMessage({\n          id: 'xpack.remoteClusters.removeButton.confirmModal.deleteSingleClusterTitle',\n          defaultMessage: 'Remove remote cluster \\'{name}\\'?'\n        }, { name: clusterNames[0] }) : intl.formatMessage({\n          id: 'xpack.remoteClusters.removeButton.confirmModal.multipleDeletionTitle',\n          defaultMessage: 'Remove {count} remote clusters?'\n        }, { count: clusterNames.length });\n\n        var content = _react2.default.createElement(\n          _react.Fragment,\n          null,\n          _react2.default.createElement(\n            'p',\n            null,\n            _react2.default.createElement(_react3.FormattedMessage, {\n              id: 'xpack.remoteClusters.removeButton.confirmModal.multipleDeletionDescription',\n              defaultMessage: 'You are about to remove these remote clusters:'\n            })\n          ),\n          _react2.default.createElement(\n            'ul',\n            null,\n            clusterNames.map(function (name) {\n              return _react2.default.createElement(\n                'li',\n                { key: name },\n                name\n              );\n            })\n          )\n        );\n\n        modal = _react2.default.createElement(\n          _eui.EuiOverlayMask,\n          null,\n          _react2.default.createElement(\n            _eui.EuiConfirmModal,\n            {\n              'data-test-subj': 'remoteClustersDeleteConfirmModal',\n              title: title,\n              onCancel: this.closeConfirmModal,\n              onConfirm: this.onConfirm,\n              cancelButtonText: intl.formatMessage({\n                id: 'xpack.remoteClusters.removeButton.confirmModal.cancelButtonText',\n                defaultMessage: 'Cancel'\n              }),\n              buttonColor: 'danger',\n              confirmButtonText: intl.formatMessage({\n                id: 'xpack.remoteClusters.removeButton.confirmModal.confirmButtonText',\n                defaultMessage: 'Remove'\n              }),\n              onMouseOver: this.onMouseOverModal\n            },\n            !isSingleCluster && content\n          )\n        );\n      }\n\n      return _react2.default.createElement(\n        _react.Fragment,\n        null,\n        children(this.showConfirmModal),\n        modal\n      );\n    }\n  }]);\n\n  return _class;\n}(_react.Component), _class.propTypes = {\n  removeClusters: _propTypes2.default.func.isRequired,\n  clusterNames: _propTypes2.default.array.isRequired,\n  children: _propTypes2.default.func.isRequired\n}, _temp2));",null]}