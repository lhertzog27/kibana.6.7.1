{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/components/job_select_list/job_select_list_directive.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/components/job_select_list/job_select_list_directive.js","mtime":1567631712033},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _jquery = require('jquery');\n\nvar _jquery2 = _interopRequireDefault(_jquery);\n\nvar _moment = require('moment');\n\nvar _moment2 = _interopRequireDefault(_moment);\n\nvar _d = require('d3');\n\nvar _d2 = _interopRequireDefault(_d);\n\nvar _job_select_list = require('./job_select_list.html');\n\nvar _job_select_list2 = _interopRequireDefault(_job_select_list);\n\nvar _job_utils = require('plugins/ml/../common/util/job_utils');\n\nvar _job_service = require('plugins/ml/services/job_service');\n\nvar _job_select_service = require('plugins/ml/components/job_select_list/job_select_service');\n\nvar _timefilter = require('ui/timefilter');\n\nvar _modules = require('ui/modules');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } } /*\n                                                                                                                                                                                                     * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                     * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                     * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                     */\n\n/*\n * ml-job-select-list directive for rendering a multi-select control for selecting\n * one or more jobs from the list of configured jobs.\n */\n\nvar _module = _modules.uiModules.get('apps/ml');\n\n_module.directive('mlJobSelectList', function (Private) {\n  return {\n    restrict: 'AE',\n    replace: true,\n    transclude: true,\n    template: _job_select_list2.default,\n    controller: function controller($scope, i18n) {\n      var mlJobSelectService = Private(_job_select_service.JobSelectServiceProvider);\n      $scope.jobs = [];\n      $scope.groups = [];\n      $scope.homelessJobs = [];\n      $scope.singleSelection = false;\n      $scope.timeSeriesOnly = false;\n      $scope.noJobsCreated = undefined;\n      $scope.applyTimeRange = mlJobSelectService.jobSelectListState.applyTimeRange;\n      $scope.urlSelectedIds = {};\n      $scope.selected = {};\n      $scope.allGroupsSelected = false;\n      $scope.allJobsSelected = false;\n      $scope.selectedJobRadio = '';\n      $scope.selectedCount = 0;\n\n      _job_service.mlJobService.loadJobs().then(function (resp) {\n        if (resp.jobs.length > 0) {\n          $scope.noJobsCreated = false;\n          var jobs = [];\n          resp.jobs.forEach(function (job) {\n            if (job.groups && job.groups.length) {\n              job.groups.forEach(function (group) {\n                jobs.push(createJob(group + '.' + job.job_id, group, job));\n              });\n            } else {\n              jobs.push(createJob(job.job_id, null, job));\n            }\n          });\n          normalizeTimes(jobs);\n          $scope.jobs = jobs;\n\n          var _createGroups = createGroups($scope.jobs),\n              groups = _createGroups.groups,\n              homeless = _createGroups.homeless;\n\n          $scope.groups = groups;\n          $scope.homelessJobs = homeless;\n          $scope.selected = {\n            groups: [],\n            jobs: []\n          };\n\n          // count all jobs, including duplicates in groups.\n          // if it's the same as the number of ids passed in, tick all jobs\n          var jobCount = resp.jobs.reduce(function (sum, job) {\n            return sum + (job.groups === undefined ? 1 : job.groups.length);\n          }, 0);\n          var selectAll = jobCount === $scope.urlSelectedIds.jobs.length;\n\n          // create the groups and jobs which are used in the menu\n          groups.forEach(function (group) {\n            $scope.selected.groups.push({\n              id: group.id,\n              selected: group.selected,\n              // TODO: is the selectable property of a group still needed?\n              selectable: group.selectable,\n              timeRange: group.timeRange,\n              isGroup: true\n            });\n          });\n\n          jobs.forEach(function (job) {\n            if ($scope.selected.jobs.find(function (j) {\n              return j.id === job.name;\n            }) === undefined) {\n              $scope.selected.jobs.push({\n                id: job.name,\n                selected: selectAll || job.selected,\n                disabled: job.disabled,\n                timeRange: job.timeRange,\n                running: job.running,\n                isGroup: false\n              });\n            }\n          });\n\n          $scope.allJobsSelected = areAllJobsSelected();\n          $scope.allGroupsSelected = areAllGroupsSelected();\n          createSelectedCount();\n\n          // if in single selection mode, set the radio button controller ($scope.selectedJobRadio)\n          // to the selected job id\n          if ($scope.singleSelection === true) {\n            $scope.jobs.forEach(function (j) {\n              if (j.selected) {\n                $scope.selectedJobRadio = j.name;\n              }\n            });\n          }\n        } else {\n          $scope.noJobsCreated = true;\n        }\n        $scope.$applyAsync();\n      }).catch(function (resp) {\n        console.log('mlJobSelectList controller - error getting job info from ES:', resp);\n      });\n\n      function createJob(jobId, groupId, job) {\n        return {\n          id: jobId,\n          name: job.job_id,\n          group: groupId,\n          isGroup: false,\n          selected: _lodash2.default.includes($scope.urlSelectedIds.jobs, job.job_id),\n          disabled: !($scope.timeSeriesOnly === false || (0, _job_utils.isTimeSeriesViewJob)(job) === true),\n          running: job.datafeed_config && job.datafeed_config.state === 'started',\n          timeRange: {\n            to: job.data_counts.latest_record_timestamp,\n            from: job.data_counts.earliest_record_timestamp,\n            fromPx: 0,\n            toPx: 0,\n            widthPx: 0,\n            label: ''\n          }\n        };\n      }\n\n      function createGroups(jobsIn) {\n        var jobGroups = {};\n        var homeless = [];\n        // first pull all of the groups out of all of the jobs\n        // keeping homeless (groupless) jobs in a separate list\n        jobsIn.forEach(function (job) {\n          if (job.group !== null) {\n            if (jobGroups[job.group] === undefined) {\n              jobGroups[job.group] = [job];\n            } else {\n              jobGroups[job.group].push(job);\n            }\n          } else {\n            homeless.push(job);\n          }\n        });\n\n        var groups = _lodash2.default.map(jobGroups, function (jobs, id) {\n          var group = {\n            id: id,\n            selected: false,\n            selectable: true,\n            expanded: false,\n            isGroup: true,\n            jobs: jobs\n          };\n          // check to see whether all of the groups jobs have been selected,\n          // if they have, select the group\n          if ($scope.singleSelection === false) {\n            group.selected = _lodash2.default.includes($scope.urlSelectedIds.groups, id);\n          }\n\n          // create an over all time range for the group\n          var timeRange = {\n            to: null,\n            toMoment: null,\n            from: null,\n            fromMoment: null,\n            fromPx: null,\n            toPx: null,\n            widthPx: null\n          };\n\n          jobs.forEach(function (job) {\n            job.group = group;\n\n            if (timeRange.to === null || job.timeRange.to > timeRange.to) {\n              timeRange.to = job.timeRange.to;\n              timeRange.toMoment = job.timeRange.toMoment;\n            }\n            if (timeRange.from === null || job.timeRange.from < timeRange.from) {\n              timeRange.from = job.timeRange.from;\n              timeRange.fromMoment = job.timeRange.fromMoment;\n            }\n            if (timeRange.toPx === null || job.timeRange.toPx > timeRange.toPx) {\n              timeRange.toPx = job.timeRange.toPx;\n            }\n            if (timeRange.fromPx === null || job.timeRange.fromPx < timeRange.fromPx) {\n              timeRange.fromPx = job.timeRange.fromPx;\n            }\n          });\n          timeRange.widthPx = timeRange.toPx - timeRange.fromPx;\n          timeRange.toMoment = (0, _moment2.default)(timeRange.to);\n          timeRange.fromMoment = (0, _moment2.default)(timeRange.from);\n\n          var fromString = timeRange.fromMoment.format('MMM Do YYYY, HH:mm');\n          var toString = timeRange.toMoment.format('MMM Do YYYY, HH:mm');\n          timeRange.label = i18n('xpack.ml.jobSelectList.groupTimeRangeLabel', {\n            defaultMessage: '{fromString} to {toString}',\n            values: {\n              fromString: fromString,\n              toString: toString\n            }\n          });\n\n          group.timeRange = timeRange;\n          return group;\n        });\n\n        return {\n          groups: groups,\n          homeless: homeless\n        };\n      }\n\n      // apply the selected jobs\n      $scope.apply = function () {\n        // if in single selection mode, get the job id from $scope.selectedJobRadio\n        var selectedJobs = [];\n        if ($scope.singleSelection) {\n          selectedJobs.push.apply(selectedJobs, _toConsumableArray($scope.selected.jobs.filter(function (j) {\n            return j.id === $scope.selectedJobRadio;\n          })));\n        } else {\n          selectedJobs.push.apply(selectedJobs, _toConsumableArray($scope.selected.jobs.filter(function (j) {\n            return j.selected;\n          })));\n          selectedJobs.push.apply(selectedJobs, _toConsumableArray($scope.selected.groups.filter(function (g) {\n            return g.selected;\n          })));\n        }\n\n        if (areAllJobsSelected()) {\n          // if all jobs have been selected, just store '*' in the url\n          mlJobSelectService.setJobIds(['*']);\n        } else {\n          var jobIds = selectedJobs.map(function (j) {\n            return j.isGroup ? j.id + '.*' : j.id;\n          });\n          mlJobSelectService.setJobIds(jobIds);\n        }\n\n        // if the apply time range checkbox is ticked,\n        // find the min and max times for all selected jobs\n        // and apply them to the timefilter\n        if ($scope.applyTimeRange) {\n          var times = [];\n          selectedJobs.forEach(function (job) {\n            if (job.timeRange.from !== undefined) {\n              times.push(job.timeRange.from);\n            }\n            if (job.timeRange.to !== undefined) {\n              times.push(job.timeRange.to);\n            }\n          });\n          if (times.length) {\n            var min = _lodash2.default.min(times);\n            var max = _lodash2.default.max(times);\n            _timefilter.timefilter.setTime({\n              from: (0, _moment2.default)(min).toISOString(),\n              to: (0, _moment2.default)(max).toISOString()\n            });\n          }\n        }\n        mlJobSelectService.jobSelectListState.applyTimeRange = $scope.applyTimeRange;\n        $scope.closePopover();\n      };\n\n      // ticking a job\n      $scope.toggleSelection = function () {\n        // check to see if all jobs are now selected\n        $scope.allJobsSelected = areAllJobsSelected();\n        $scope.allGroupsSelected = areAllGroupsSelected();\n        createSelectedCount();\n      };\n\n      // ticking the all jobs checkbox\n      $scope.toggleAllJobsSelection = function () {\n        var allJobsSelected = areAllJobsSelected();\n        $scope.allJobsSelected = !allJobsSelected;\n\n        $scope.selected.jobs.forEach(function (job) {\n          job.selected = $scope.allJobsSelected;\n        });\n\n        createSelectedCount();\n      };\n\n      // ticking a group\n      $scope.toggleGroupSelection = function () {\n        $scope.allGroupsSelected = areAllGroupsSelected();\n        createSelectedCount();\n      };\n\n      // ticking the all jobs checkbox\n      $scope.toggleAllGroupsSelection = function () {\n        var allGroupsSelected = areAllGroupsSelected();\n        $scope.allGroupsSelected = !allGroupsSelected;\n\n        $scope.selected.groups.forEach(function (group) {\n          group.selected = $scope.allGroupsSelected;\n        });\n        createSelectedCount();\n      };\n\n      // check to see whether all jobs in the list have been selected\n      function areAllJobsSelected() {\n        var allSelected = true;\n        $scope.selected.jobs.forEach(function (job) {\n          if (job.selected === false) {\n            allSelected = false;\n          }\n        });\n        return allSelected;\n      }\n\n      // check to see whether all groups in the list have been selected\n      function areAllGroupsSelected() {\n        var allSelected = true;\n        $scope.selected.groups.forEach(function (group) {\n          if (group.selected === false) {\n            allSelected = false;\n          }\n        });\n        return allSelected;\n      }\n\n      function createSelectedCount() {\n        $scope.selectedCount = 0;\n        $scope.selected.jobs.forEach(function (job) {\n          if (job.selected) {\n            $scope.selectedCount++;\n          }\n        });\n        $scope.selected.groups.forEach(function (group) {\n          if (group.selected) {\n            $scope.selectedCount++;\n          }\n        });\n      }\n\n      // create the data used for the gant charts\n      function normalizeTimes(jobs) {\n        var min = _lodash2.default.min(jobs, function (job) {\n          return +job.timeRange.from;\n        });\n        var max = _lodash2.default.max(jobs, function (job) {\n          return +job.timeRange.to;\n        });\n\n        var gantScale = _d2.default.scale.linear().domain([min.timeRange.from, max.timeRange.to]).range([1, 299]);\n\n        jobs.forEach(function (job) {\n          if (job.timeRange.to !== undefined && job.timeRange.from !== undefined) {\n            job.timeRange.fromPx = gantScale(job.timeRange.from);\n            job.timeRange.toPx = gantScale(job.timeRange.to);\n            job.timeRange.widthPx = job.timeRange.toPx - job.timeRange.fromPx;\n\n            job.timeRange.toMoment = (0, _moment2.default)(job.timeRange.to);\n            job.timeRange.fromMoment = (0, _moment2.default)(job.timeRange.from);\n\n            var fromString = job.timeRange.fromMoment.format('MMM Do YYYY, HH:mm');\n            var _toString = job.timeRange.toMoment.format('MMM Do YYYY, HH:mm');\n            job.timeRange.label = i18n('xpack.ml.jobSelectList.jobTimeRangeLabel', {\n              defaultMessage: '{fromString} to {toString}',\n              values: {\n                fromString: fromString,\n                toString: _toString\n              }\n            });\n          }\n        });\n      }\n\n      $scope.useTimeRange = function (job) {\n        _timefilter.timefilter.setTime({\n          from: job.timeRange.fromMoment.toISOString(),\n          to: job.timeRange.toMoment.toISOString()\n        });\n      };\n    },\n    link: function link(scope, element, attrs) {\n      var mlJobSelectService = Private(_job_select_service.JobSelectServiceProvider);\n      scope.timeSeriesOnly = false;\n      if (attrs.timeseriesonly === 'true') {\n        scope.timeSeriesOnly = true;\n      }\n\n      if (attrs.singleSelection === 'true') {\n        scope.singleSelection = true;\n      }\n\n      // Make a copy of the list of jobs ids\n      // '*' is passed to indicate 'All jobs'.\n      scope.urlSelectedIds = {\n        groups: [].concat(_toConsumableArray(mlJobSelectService.groupIds)),\n        jobs: [].concat(_toConsumableArray(mlJobSelectService.jobIdsWithGroup))\n      };\n\n      // Giving the parent div focus fixes checkbox tick UI selection on IE.\n      (0, _jquery2.default)('.ml-select-list', element).focus();\n    }\n  };\n});",null]}