{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/ui/public/filters/_prop_filter.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/filters/_prop_filter.js","mtime":1567631711734},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.propFilter = propFilter;\n\nvar _lodash = require('lodash');\n\n/**\n * Filters out a list by a given filter. This is currently used to implement:\n *   - fieldType filters a list of fields by their type property\n *   - aggFilter filters a list of aggs by their name property\n *\n * @returns {function} - the filter function which can be registered with angular\n */\nfunction propFilter(prop) {\n  /**\n   * List filtering function which accepts an array or list of values that a property\n   * must contain\n   *\n   * @param  {array} list - array of items to filter\n   * @param  {function|array|string} filters - the values to match against the list\n   *   - if a function, it is expected to take the field property as argument and returns true to keep it.\n   *   - Can be also an array, a single value as a string, or a comma-separated list of items\n   * @return {array} - the filtered list\n   */\n  return function (list) {\n    var filters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n    if ((0, _lodash.isFunction)(filters)) {\n      return list.filter(function (item) {\n        return filters(item[prop]);\n      });\n    }\n\n    if (!Array.isArray(filters)) {\n      filters = filters.split(',');\n    }\n\n    if (filters.length === 0) {\n      return list;\n    }\n\n    if (filters.includes('*')) {\n      return list;\n    }\n\n    var options = filters.reduce(function (options, filter) {\n      var type = 'include';\n      var value = filter;\n\n      if (filter.charAt(0) === '!') {\n        type = 'exclude';\n        value = filter.substr(1);\n      }\n\n      if (!options[type]) options[type] = [];\n      options[type].push(value);\n      return options;\n    }, {});\n\n    return list.filter(function (item) {\n      var value = item[prop];\n\n      var excluded = options.exclude && options.exclude.includes(value);\n      if (excluded) {\n        return false;\n      }\n\n      var included = !options.include || options.include.includes(value);\n      if (included) {\n        return true;\n      }\n\n      return false;\n    });\n  };\n} /*\n   * Licensed to Elasticsearch B.V. under one or more contributor\n   * license agreements. See the NOTICE file distributed with\n   * this work for additional information regarding copyright\n   * ownership. Elasticsearch B.V. licenses this file to you under\n   * the Apache License, Version 2.0 (the \"License\"); you may\n   * not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *    http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing,\n   * software distributed under the License is distributed on an\n   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n   * KIND, either express or implied.  See the License for the\n   * specific language governing permissions and limitations\n   * under the License.\n   */",null]}