{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/optimize/create_ui_exports_module.js?{\"type\":\"hacks\",\"modules\":[\"plugins/xpack_main/hacks/check_xpack_info_change\",\"plugins/xpack_main/hacks/telemetry_opt_in\",\"plugins/xpack_main/hacks/telemetry_trigger\",\"plugins/graph/hacks/toggle_app_link_in_nav\",\"plugins/monitoring/hacks/toggle_app_link_in_nav\",\"plugins/security/hacks/on_session_timeout\",\"plugins/security/hacks/on_unauthorized_response\",\"plugins/searchprofiler/register\",\"plugins/ml/hacks/toggle_app_link_in_nav\",\"plugins/grokdebugger/sections/grokdebugger/register\",\"plugins/apm/hacks/toggle_app_link_in_nav\",\"plugins/canvas/lib/window_error_handler.js\",\"plugins/console/hacks/register\",\"plugins/kibana/dev_tools/hacks/hide_empty_tools\",\"plugins/testbed\",\"plugins/timelion/lib/panel_registry\",\"plugins/timelion/panels/timechart/timechart\",\"plugins/reporting/hacks/job_completion_notifier\"]}","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/optimize/create_ui_exports_module.js","mtime":1567631691446},{"path":"/home/anthony/git_workspaces/kibana/node_modules/val-loader/dist/cjs.js","mtime":1567666239625},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function () {\n  if (!module.id.includes('?')) {\n    throw new Error('create_ui_exports_module loaded without JSON args in module.id');\n  }\n\n  var _JSON$parse = JSON.parse(module.id.slice(module.id.indexOf('?') + 1)),\n      type = _JSON$parse.type,\n      modules = _JSON$parse.modules;\n\n  var comment = '// dynamically generated to load ' + type + ' uiExports from plugins';\n  var requires = modules.sort(function (a, b) {\n    return a.localeCompare(b);\n  }).map(function (m) {\n    return 'require(\\'' + normalizePath(m) + '\\')';\n  }).join('\\n        ');\n\n  return {\n    code: comment + '\\n' + requires + '\\n'\n  };\n};\n\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n// We normalize all path separators to `/` in generated files\nfunction normalizePath(path) {\n  return path.replace(/[\\\\\\/]+/g, '/');\n}\n\nmodule.exports = exports['default'];",null]}