{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/maps/public/shared/layers/joins/left_inner_join.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/maps/public/shared/layers/joins/left_inner_join.js","mtime":1567631712019},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LeftInnerJoin = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\nopyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\nor more contributor license agreements. Licensed under the Elastic License;\nyou may not use this file except in compliance with the Elastic License.\nn\nvar _es_join_source = require('../sources/es_join_source');\n\nvar _vector_style = require('../styles/vector_style');\n\nvar _util = require('../util');\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar LeftInnerJoin = exports.LeftInnerJoin = function () {\n  _createClass(LeftInnerJoin, null, [{\n    key: 'toHash',\n    value: function toHash(descriptor) {\n      return JSON.stringify(descriptor);\n    }\n  }]);\n\n  function LeftInnerJoin(joinDescriptor) {\n    _classCallCheck(this, LeftInnerJoin);\n\n    this._descriptor = joinDescriptor;\n    this._rightSource = new _es_join_source.ESJoinSource(joinDescriptor.right);\n  }\n\n  _createClass(LeftInnerJoin, [{\n    key: 'destroy',\n    value: function destroy() {\n      this._rightSource.destroy();\n    }\n  }, {\n    key: 'hasCompleteConfig',\n    value: function hasCompleteConfig() {\n      if (this._descriptor.leftField && this._rightSource) {\n        return this._rightSource.hasCompleteConfig();\n      }\n\n      return false;\n    }\n  }, {\n    key: 'getJoinFields',\n    value: function getJoinFields() {\n      return this._rightSource.getMetricFields().map(function (_ref) {\n        var name = _ref.propertyKey,\n            label = _ref.propertyLabel;\n\n        return { label: label, name: name };\n      });\n    }\n  }, {\n    key: 'getSourceId',\n    value: function getSourceId() {\n      return LeftInnerJoin.toHash(this._descriptor);\n    }\n  }, {\n    key: 'getLeftFieldName',\n    value: function getLeftFieldName() {\n      return this._descriptor.leftField;\n    }\n  }, {\n    key: 'joinPropertiesToFeatureCollection',\n    value: function joinPropertiesToFeatureCollection(featureCollection, propertiesMap) {\n      var _this = this;\n\n      var joinFields = this._rightSource.getMetricFields();\n      featureCollection.features.forEach(function (feature) {\n        // Clean up old join property values\n        joinFields.forEach(function (_ref2) {\n          var propertyKey = _ref2.propertyKey;\n\n          delete feature.properties[propertyKey];\n          var stylePropertyName = _vector_style.VectorStyle.getComputedFieldName(propertyKey);\n          delete feature.properties[stylePropertyName];\n        });\n\n        var joinKey = feature.properties[_this._descriptor.leftField];\n        if (propertiesMap.has(joinKey)) {\n          Object.assign(feature.properties, propertiesMap.get(joinKey));\n        }\n      });\n\n      //Create a new instance.\n      //We use a reference check to determine whether the feature collection has changed and needs to be updated on the mapbox-gl source.\n      //We need to update because mapbox creates copies of the property object, that it then dispatches on tooltip-events.\n      return _extends({}, featureCollection);\n    }\n  }, {\n    key: 'getJoinSource',\n    value: function getJoinSource() {\n      return this._rightSource;\n    }\n  }, {\n    key: 'getId',\n    value: function getId() {\n      return this._descriptor.id;\n    }\n  }, {\n    key: 'toDescriptor',\n    value: function toDescriptor() {\n      return this._descriptor;\n    }\n  }, {\n    key: 'filterAndFormatPropertiesForTooltip',\n    value: function filterAndFormatPropertiesForTooltip(properties) {\n      var metricFields = this._rightSource.getMetricFields();\n      return (0, _util.filterPropertiesForTooltip)(metricFields, properties);\n    }\n  }, {\n    key: 'getIndexPatternIds',\n    value: function getIndexPatternIds() {\n      return this._rightSource.getIndexPatternIds();\n    }\n  }]);\n\n  return LeftInnerJoin;\n}();",null]}