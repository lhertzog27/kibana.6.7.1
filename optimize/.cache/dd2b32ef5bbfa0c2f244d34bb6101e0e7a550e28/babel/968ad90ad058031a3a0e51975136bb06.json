{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/jobs/new_job/simple/recognize/create_job/create_job_controller.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/jobs/new_job/simple/recognize/create_job/create_job_controller.js","mtime":1567631712059},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _angular = require('angular');\n\nvar _angular2 = _interopRequireDefault(_angular);\n\nrequire('angular-ui-select');\n\nvar _datemath = require('@elastic/datemath');\n\nvar _datemath2 = _interopRequireDefault(_datemath);\n\nvar _job_utils = require('plugins/ml/../common/util/job_utils');\n\nvar _new_job_utils = require('plugins/ml/jobs/new_job/utils/new_job_utils');\n\nvar _routes = require('ui/routes');\n\nvar _routes2 = _interopRequireDefault(_routes);\n\nvar _check_license = require('plugins/ml/license/check_license');\n\nvar _check_privilege = require('plugins/ml/privilege/check_privilege');\n\nvar _index_utils = require('plugins/ml/util/index_utils');\n\nvar _check_ml_nodes = require('plugins/ml/ml_nodes_check/check_ml_nodes');\n\nvar _job_service = require('plugins/ml/services/job_service');\n\nvar _create_job_service = require('./create_job_service');\n\nvar _messagebar_service = require('plugins/ml/components/messagebar/messagebar_service');\n\nvar _ml_api_service = require('plugins/ml/services/ml_api_service');\n\nvar _create_job = require('./create_job.html');\n\nvar _create_job2 = _interopRequireDefault(_create_job);\n\nvar _timefilter = require('ui/timefilter');\n\nvar _modules = require('ui/modules');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_routes2.default.when('/jobs/new_job/simple/recognize', {\n  template: _create_job2.default,\n  resolve: {\n    CheckLicense: _check_license.checkLicenseExpired,\n    privileges: _check_privilege.checkCreateJobsPrivilege,\n    indexPattern: _index_utils.loadCurrentIndexPattern,\n    savedSearch: _index_utils.loadCurrentSavedSearch,\n    checkMlNodesAvailable: _check_ml_nodes.checkMlNodesAvailable\n  }\n}); /*\n     * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n     * or more contributor license agreements. Licensed under the Elastic License;\n     * you may not use this file except in compliance with the Elastic License.\n     */\n\nvar _module = _modules.uiModules.get('apps/ml');\n\n_module.controller('MlCreateRecognizerJobs', function ($scope, $window, $route, Private, i18n) {\n\n  var mlCreateRecognizerJobsService = Private(_create_job_service.CreateRecognizerJobsServiceProvider);\n  _timefilter.timefilter.disableTimeRangeSelector();\n  _timefilter.timefilter.disableAutoRefreshSelector();\n  var msgs = _messagebar_service.mlMessageBarService;\n\n  var SAVE_STATE = {\n    NOT_SAVED: 0,\n    SAVING: 1,\n    SAVED: 2,\n    FAILED: 3,\n    PARTIAL_FAILURE: 4\n  };\n\n  var DATAFEED_STATE = {\n    NOT_STARTED: 0,\n    STARTING: 1,\n    STARTED: 2,\n    FINISHED: 3,\n    STOPPING: 4,\n    FAILED: 5\n  };\n\n  $scope.addNewJobToRecentlyAccessed = _new_job_utils.addNewJobToRecentlyAccessed;\n\n  $scope.SAVE_STATE = SAVE_STATE;\n  $scope.DATAFEED_STATE = DATAFEED_STATE;\n\n  $scope.overallState = SAVE_STATE.NOT_SAVED;\n\n  var moduleId = $route.current.params.id;\n  $scope.moduleId = moduleId;\n\n  var createSearchItems = Private(_new_job_utils.SearchItemsProvider);\n\n  var _createSearchItems = createSearchItems(),\n      indexPattern = _createSearchItems.indexPattern,\n      savedSearch = _createSearchItems.savedSearch,\n      query = _createSearchItems.query,\n      combinedQuery = _createSearchItems.combinedQuery;\n\n  var pageTitle = savedSearch.id !== undefined ? i18n('xpack.ml.newJob.simple.recognize.savedSearchPageTitle', {\n    defaultMessage: 'saved search {savedSearchTitle}',\n    values: { savedSearchTitle: savedSearch.title }\n  }) : i18n('xpack.ml.newJob.simple.recognize.indexPatternPageTitle', {\n    defaultMessage: 'index pattern {indexPatternTitle}',\n    values: { indexPatternTitle: indexPattern.title }\n  });\n\n  $scope.displayQueryWarning = savedSearch.id !== undefined;\n\n  $scope.hideAdvancedButtonAriaLabel = i18n('xpack.ml.newJob.simple.recognize.hideAdvancedButtonAriaLabel', {\n    defaultMessage: 'Hide Advanced'\n  });\n  $scope.showAdvancedButtonAriaLabel = i18n('xpack.ml.newJob.simple.recognize.showAdvancedButtonAriaLabel', {\n    defaultMessage: 'Show Advanced'\n  });\n  $scope.showAdvancedAriaLabel = i18n('xpack.ml.newJob.simple.recognize.showAdvancedAriaLabel', {\n    defaultMessage: 'Show advanced'\n  });\n\n  $scope.ui = {\n    formValid: true,\n    indexPattern: indexPattern,\n    pageTitle: pageTitle,\n    showJobInput: true,\n    numberOfJobs: 0,\n    kibanaLabels: {\n      dashboard: i18n('xpack.ml.newJob.simple.recognize.dashboardsLabel', {\n        defaultMessage: 'Dashboards'\n      }),\n      search: i18n('xpack.ml.newJob.simple.recognize.searchesLabel', {\n        defaultMessage: 'Searches'\n      }),\n      visualization: i18n('xpack.ml.newJob.simple.recognize.visualizationsLabel', {\n        defaultMessage: 'Visualizations'\n      })\n    },\n    validation: {\n      checks: {\n        jobLabel: { valid: true },\n        groupIds: { valid: true }\n      }\n    }\n  };\n\n  $scope.formConfig = {\n    indexPattern: indexPattern,\n    jobLabel: '',\n    jobGroups: [],\n    jobs: [],\n    kibanaObjects: {},\n    start: 0,\n    end: 0,\n    query: query,\n    filters: [],\n    useFullIndexData: true,\n    startDatafeedAfterSave: true,\n    useDedicatedIndex: false\n  };\n\n  $scope.resultsUrl = '';\n\n  $scope.resetJob = function () {\n    $scope.overallState = SAVE_STATE.NOT_SAVED;\n    $scope.formConfig.jobs = [];\n    $scope.formConfig.filters = [];\n    $scope.formConfig.kibanaObjects = {};\n\n    loadJobConfigs();\n  };\n\n  function loadJobConfigs() {\n    // load the job and datafeed configs as well as the kibana saved objects\n    // from the recognizer endpoint\n    _ml_api_service.ml.getDataRecognizerModule({ moduleId: moduleId }).then(function (resp) {\n      // populate the jobs and datafeeds\n      if (resp.jobs && resp.jobs.length) {\n\n        var tempGroups = {};\n\n        resp.jobs.forEach(function (job) {\n          $scope.formConfig.jobs.push({\n            id: job.id,\n            jobConfig: job.config,\n            jobState: SAVE_STATE.NOT_SAVED,\n            datafeedId: null,\n            datafeedConfig: {},\n            datafeedState: SAVE_STATE.NOT_SAVED,\n            runningState: DATAFEED_STATE.NOT_STARTED,\n            errors: []\n          });\n          $scope.ui.numberOfJobs++;\n\n          // read the groups list from each job and create a deduplicated jobGroups list\n          if (job.config.groups && job.config.groups.length) {\n            job.config.groups.forEach(function (group) {\n              tempGroups[group] = null;\n            });\n          }\n        });\n        $scope.formConfig.jobGroups = Object.keys(tempGroups);\n\n        resp.datafeeds.forEach(function (datafeed) {\n          var job = _lodash2.default.find($scope.formConfig.jobs, { id: datafeed.config.job_id });\n          if (job !== undefined) {\n            var datafeedId = _job_service.mlJobService.getDatafeedId(job.id);\n            job.datafeedId = datafeedId;\n            job.datafeedConfig = datafeed.config;\n          }\n        });\n      }\n      // populate the kibana saved objects\n      if (resp.kibana) {\n        _lodash2.default.each(resp.kibana, function (obj, key) {\n          $scope.formConfig.kibanaObjects[key] = obj.map(function (o) {\n            return {\n              id: o.id,\n              title: o.title,\n              saveState: SAVE_STATE.NOT_SAVED,\n              config: o.config,\n              exists: false,\n              errors: []\n            };\n          });\n        });\n        // check to see if any of the saved objects already exist.\n        // if they do, they are marked as such and greyed out.\n        checkIfKibanaObjectsExist($scope.formConfig.kibanaObjects);\n      }\n      $scope.$applyAsync();\n    });\n  }\n\n  // toggle kibana's timepicker\n  $scope.changeUseFullIndexData = function () {\n    var shouldEnableTimeFilter = !$scope.formConfig.useFullIndexData;\n    if (shouldEnableTimeFilter) {\n      _timefilter.timefilter.enableTimeRangeSelector();\n    } else {\n      _timefilter.timefilter.disableTimeRangeSelector();\n    }\n    $scope.$applyAsync();\n  };\n\n  $scope.changeJobLabelCase = function () {\n    $scope.formConfig.jobLabel = $scope.formConfig.jobLabel.toLowerCase();\n  };\n\n  $scope.save = function () {\n    if (validateJobs()) {\n      msgs.clear();\n      $scope.overallState = SAVE_STATE.SAVING;\n      _angular2.default.element('.results').css('opacity', 1);\n      // wait 500ms for the results section to fade in.\n      window.setTimeout(function () {\n        // save jobs,datafeeds and kibana savedObjects\n        saveDataRecognizerItems().then(function () {\n          // open jobs and save start datafeeds\n          if ($scope.formConfig.startDatafeedAfterSave) {\n            startDatafeeds().then(function () {\n              // everything saved correctly and datafeeds have started.\n              $scope.setOverallState();\n            }).catch(function () {\n              $scope.setOverallState();\n            });\n          } else {\n            // datafeeds didn't need to be started so finish\n            $scope.setOverallState();\n          }\n        });\n      }, 500);\n    }\n  };\n\n  // call the the setupModuleConfigs endpoint to create the jobs, datafeeds and saved objects\n  function saveDataRecognizerItems() {\n    return new Promise(function (resolve) {\n      // set all jobs, datafeeds and saved objects to a SAVING state\n      // i.e. display spinners\n      setAllToSaving();\n\n      var prefix = $scope.formConfig.jobLabel;\n      var indexPatternName = $scope.formConfig.indexPattern.title;\n      var groups = $scope.formConfig.jobGroups;\n      var useDedicatedIndex = $scope.formConfig.useDedicatedIndex;\n      var tempQuery = savedSearch.id === undefined ? undefined : combinedQuery;\n\n      _ml_api_service.ml.setupDataRecognizerConfig({ moduleId: moduleId, prefix: prefix, groups: groups, query: tempQuery, indexPatternName: indexPatternName, useDedicatedIndex: useDedicatedIndex }).then(function (resp) {\n        if (resp.jobs) {\n          $scope.formConfig.jobs.forEach(function (job) {\n            // check results from saving the jobs\n            var jobId = '' + prefix + job.id;\n            var jobResult = resp.jobs.find(function (j) {\n              return j.id === jobId;\n            });\n            if (jobResult !== undefined) {\n              if (jobResult.success) {\n                job.jobState = SAVE_STATE.SAVED;\n              } else {\n                job.jobState = SAVE_STATE.FAILED;\n                if (jobResult.error && jobResult.error.msg) {\n                  job.errors.push(jobResult.error.msg);\n                }\n              }\n            } else {\n              job.jobState = SAVE_STATE.FAILED;\n              job.errors.push(i18n('xpack.ml.newJob.simple.recognize.job.couldNotSaveJobErrorMessage', {\n                defaultMessage: 'Could not save job {jobId}',\n                values: { jobId: jobId }\n              }));\n            }\n\n            // check results from saving the datafeeds\n            var datafeedId = (0, _job_utils.prefixDatafeedId)(job.datafeedId, prefix);\n            var datafeedResult = resp.datafeeds.find(function (d) {\n              return d.id === datafeedId;\n            });\n            if (datafeedResult !== undefined) {\n              if (datafeedResult.success) {\n                job.datafeedState = SAVE_STATE.SAVED;\n              } else {\n                job.datafeedState = SAVE_STATE.FAILED;\n                if (datafeedResult.error && datafeedResult.error.msg) {\n                  job.errors.push(datafeedResult.error.msg);\n                }\n              }\n            } else {\n              job.datafeedState = SAVE_STATE.FAILED;\n              job.errors.push(i18n('xpack.ml.newJob.simple.recognize.datafeed.couldNotSaveDatafeedErrorMessage', {\n                defaultMessage: 'Could not save datafeed {datafeedId}',\n                values: { datafeedId: datafeedId }\n              }));\n            }\n            $scope.$applyAsync();\n          });\n        }\n\n        if (resp.kibana) {\n          _lodash2.default.each($scope.formConfig.kibanaObjects, function (kibanaObject, objName) {\n            kibanaObject.forEach(function (obj) {\n              // check the results from saving the saved objects\n              var kibanaObjectResult = resp.kibana[objName].find(function (o) {\n                return o.id === obj.id;\n              });\n              if (kibanaObjectResult !== undefined) {\n                if (kibanaObjectResult.success || kibanaObjectResult.success === false && kibanaObjectResult.exists === true) {\n                  obj.saveState = SAVE_STATE.SAVED;\n                } else {\n                  obj.saveState = SAVE_STATE.FAILED;\n                  if (kibanaObjectResult.error && kibanaObjectResult.error.message) {\n                    obj.errors.push(kibanaObjectResult.error.message);\n                  }\n                }\n              } else {\n                obj.saveState = SAVE_STATE.FAILED;\n                obj.errors.push(i18n('xpack.ml.newJob.simple.recognize.kibanaObject.couldNotSaveErrorMessage', {\n                  defaultMessage: 'Could not save {objName} {objId}',\n                  values: { objName: objName, objId: obj.id }\n                }));\n              }\n              $scope.$applyAsync();\n            });\n          });\n        }\n        resolve();\n      });\n    });\n  }\n\n  // loop through all jobs, datafeeds and saved objects and set the save state to SAVING\n  function setAllToSaving() {\n    $scope.formConfig.jobs.forEach(function (j) {\n      j.jobState = SAVE_STATE.SAVING;\n      j.datafeedState = SAVE_STATE.SAVING;\n    });\n\n    _lodash2.default.each($scope.formConfig.kibanaObjects, function (kibanaObject) {\n      kibanaObject.forEach(function (obj) {\n        obj.saveState = SAVE_STATE.SAVING;\n      });\n    });\n    $scope.$applyAsync();\n  }\n\n  function startDatafeeds() {\n    return new Promise(function (resolve, reject) {\n\n      var jobs = $scope.formConfig.jobs;\n      var numberOfJobs = jobs.length;\n\n      mlCreateRecognizerJobsService.indexTimeRange($scope.formConfig.indexPattern, $scope.formConfig).then(function (resp) {\n        if ($scope.formConfig.useFullIndexData) {\n          $scope.formConfig.start = resp.start.epoch;\n          $scope.formConfig.end = resp.end.epoch;\n        } else {\n          $scope.formConfig.start = _datemath2.default.parse(_timefilter.timefilter.getTime().from).valueOf();\n          $scope.formConfig.end = _datemath2.default.parse(_timefilter.timefilter.getTime().to).valueOf();\n        }\n        var jobsCounter = 0;\n        var datafeedCounter = 0;\n\n        open(jobs[jobsCounter]);\n\n        function incrementAndOpen(job) {\n          jobsCounter++;\n          if (jobsCounter < numberOfJobs) {\n            open(jobs[jobsCounter]);\n          } else {\n            // if the last job failed, reject out of the function\n            // so it can be caught higher up\n            if (job.runningState === DATAFEED_STATE.FAILED) {\n              reject();\n            }\n          }\n        }\n\n        function open(job) {\n          if (job.jobState === SAVE_STATE.FAILED) {\n            // we're skipping over the datafeed, so bump the\n            // counter up manually so it all tallies at the end.\n            datafeedCounter++;\n            job.runningState = DATAFEED_STATE.FAILED;\n            incrementAndOpen(job);\n            return;\n          }\n          job.runningState = DATAFEED_STATE.STARTING;\n          var jobId = $scope.formConfig.jobLabel + job.id;\n          _job_service.mlJobService.openJob(jobId).then(function () {\n            incrementAndOpen(job);\n            start(job);\n          }).catch(function (err) {\n            console.log('Opening job failed', err);\n            start(job);\n            job.errors.push(err.message);\n            incrementAndOpen(job);\n          });\n        }\n\n        function start(job) {\n          var jobId = $scope.formConfig.jobLabel + job.id;\n          var datafeedId = (0, _job_utils.prefixDatafeedId)(job.datafeedId, $scope.formConfig.jobLabel);\n          mlCreateRecognizerJobsService.startDatafeed(datafeedId, jobId, $scope.formConfig.start, $scope.formConfig.end).then(function () {\n            job.runningState = DATAFEED_STATE.STARTED;\n            datafeedCounter++;\n            if (datafeedCounter === numberOfJobs) {\n              resolve();\n            }\n          }).catch(function (err) {\n            console.log('Starting datafeed failed', err);\n            job.errors.push(err.message);\n            job.runningState = DATAFEED_STATE.FAILED;\n            reject(err);\n          }).then(function () {\n            $scope.$applyAsync();\n          });\n        }\n      });\n    });\n  }\n\n  function checkIfKibanaObjectsExist(kibanaObjects) {\n    _lodash2.default.each(kibanaObjects, function (objects, type) {\n      objects.forEach(function (obj) {\n        checkForSavedObject(type, obj).then(function (result) {\n          if (result) {\n            obj.saveState = SAVE_STATE.SAVED;\n            obj.exists = true;\n          }\n        });\n      });\n    });\n  }\n\n  function checkForSavedObject(type, savedObject) {\n    return new Promise(function (resolve, reject) {\n      var exists = false;\n      mlCreateRecognizerJobsService.loadExistingSavedObjects(type).then(function (resp) {\n        var savedObjects = resp.savedObjects;\n        savedObjects.forEach(function (obj) {\n          if (savedObject.title === obj.attributes.title) {\n            exists = true;\n            savedObject.id = obj.id;\n          }\n        });\n        resolve(exists);\n      }).catch(function (resp) {\n        console.log('Could not load saved objects', resp);\n        reject(resp);\n      });\n    });\n  }\n\n  $scope.setOverallState = function () {\n    var jobIds = [];\n    var failedJobsCount = $scope.formConfig.jobs.reduce(function (count, job) {\n      if (job.jobState === SAVE_STATE.FAILED || job.datafeedState === SAVE_STATE.FAILED) {\n        return count + 1;\n      } else {\n        jobIds.push('' + $scope.formConfig.jobLabel + job.id);\n        return count;\n      }\n    }, 0);\n\n    if (failedJobsCount) {\n      if (failedJobsCount === $scope.formConfig.jobs.length) {\n        $scope.overallState = SAVE_STATE.FAILED;\n      } else {\n        $scope.overallState = SAVE_STATE.PARTIAL_FAILURE;\n      }\n    } else {\n      $scope.overallState = SAVE_STATE.SAVED;\n    }\n\n    $scope.resultsUrl = _job_service.mlJobService.createResultsUrl(jobIds, $scope.formConfig.start, $scope.formConfig.end, 'explorer');\n\n    $scope.$applyAsync();\n  };\n\n  function validateJobs() {\n    var valid = true;\n    var checks = $scope.ui.validation.checks;\n    _lodash2.default.each(checks, function (item) {\n      item.valid = true;\n    });\n\n    // add an extra bit to the job label to avoid hitting the rule which states\n    // you can't have an id ending in a - or _\n    // also to allow an empty label\n    var label = $scope.formConfig.jobLabel + 'extra';\n\n    if ((0, _job_utils.isJobIdValid)(label) === false) {\n      valid = false;\n      checks.jobLabel.valid = false;\n      var msg = i18n('xpack.ml.newJob.simple.recognize.jobLabelAllowedCharactersDescription', {\n        defaultMessage: 'Job label can contain lowercase alphanumeric (a-z and 0-9), hyphens or underscores; ' + 'must start and end with an alphanumeric character'\n      });\n      checks.jobLabel.message = msg;\n    }\n    $scope.formConfig.jobGroups.forEach(function (group) {\n      if ((0, _job_utils.isJobIdValid)(group) === false) {\n        valid = false;\n        checks.groupIds.valid = false;\n        var _msg = i18n('xpack.ml.newJob.simple.recognize.jobGroupAllowedCharactersDescription', {\n          defaultMessage: 'Job group names can contain lowercase alphanumeric (a-z and 0-9), hyphens or underscores; ' + 'must start and end with an alphanumeric character'\n        });\n        checks.groupIds.message = _msg;\n      }\n    });\n    return valid;\n  }\n\n  loadJobConfigs();\n});",null]}