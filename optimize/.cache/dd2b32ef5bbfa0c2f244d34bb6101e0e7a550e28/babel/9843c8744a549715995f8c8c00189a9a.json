{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/legacy/core_plugins/metric_vis/public/metric_vis.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/legacy/core_plugins/metric_vis/public/metric_vis.js","mtime":1567631711607},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nrequire('./metric_vis_params');\n\nvar _vis_factory = require('ui/vis/vis_factory');\n\nvar _schemas = require('ui/vis/editors/default/schemas');\n\nvar _vis_types = require('ui/registry/vis_types');\n\nvar _colormaps = require('ui/vislib/components/color/colormaps');\n\nvar _metric_vis_controller = require('./metric_vis_controller');\n\n// we need to load the css ourselves\n\n// we also need to load the controller and used by the template\n\n// register the provider with the visTypes registry\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n_vis_types.VisTypesRegistryProvider.register(MetricVisProvider);\n\nfunction MetricVisProvider(Private, i18n) {\n  var VisFactory = Private(_vis_factory.VisFactoryProvider);\n\n  // return the visType object, which kibana will use to display and configure new\n  // Vis object of this type.\n  return VisFactory.createReactVisualization({\n    name: 'metric',\n    title: i18n('metricVis.metricTitle', { defaultMessage: 'Metric' }),\n    icon: 'visMetric',\n    description: i18n('metricVis.metricDescription', { defaultMessage: 'Display a calculation as a single number' }),\n    visConfig: {\n      component: _metric_vis_controller.MetricVisComponent,\n      defaults: {\n        addTooltip: true,\n        addLegend: false,\n        type: 'metric',\n        metric: {\n          percentageMode: false,\n          useRanges: false,\n          colorSchema: 'Green to Red',\n          metricColorMode: 'None',\n          colorsRange: [{ from: 0, to: 10000 }],\n          labels: {\n            show: true\n          },\n          invertColors: false,\n          style: {\n            bgFill: '#000',\n            bgColor: false,\n            labelColor: false,\n            subText: '',\n            fontSize: 60\n          }\n        }\n      }\n    },\n    editorConfig: {\n      collections: {\n        metricColorMode: [{\n          id: 'None',\n          label: i18n('metricVis.colorModes.noneOptionLabel', { defaultMessage: 'None' })\n        }, {\n          id: 'Labels',\n          label: i18n('metricVis.colorModes.labelsOptionLabel', { defaultMessage: 'Labels' })\n        }, {\n          id: 'Background',\n          label: i18n('metricVis.colorModes.backgroundOptionLabel', { defaultMessage: 'Background' })\n        }],\n        colorSchemas: Object.values(_colormaps.vislibColorMaps).map(function (value) {\n          return { id: value.id, label: value.label };\n        })\n      },\n      optionsTemplate: '<metric-vis-params></metric-vis-params>',\n      schemas: new _schemas.Schemas([{\n        group: 'metrics',\n        name: 'metric',\n        title: i18n('metricVis.schemas.metricTitle', { defaultMessage: 'Metric' }),\n        min: 1,\n        aggFilter: ['!std_dev', '!geo_centroid', '!derivative', '!serial_diff', '!moving_avg', '!cumulative_sum', '!geo_bounds'],\n        defaults: [{ type: 'count', schema: 'metric' }]\n      }, {\n        group: 'buckets',\n        name: 'group',\n        title: i18n('metricVis.schemas.splitGroupTitle', { defaultMessage: 'Split Group' }),\n        min: 0,\n        max: 1,\n        aggFilter: ['!geohash_grid', '!filter']\n      }])\n    }\n  });\n}\n\n// export the provider so that the visType can be required with Private()\nexports.default = MetricVisProvider;\nmodule.exports = exports['default'];",null]}