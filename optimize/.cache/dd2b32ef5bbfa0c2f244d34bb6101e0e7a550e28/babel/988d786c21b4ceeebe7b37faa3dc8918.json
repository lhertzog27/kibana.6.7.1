{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/jobs/new_job/simple/multi_metric/create_job/create_job_service.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/jobs/new_job/simple/multi_metric/create_job/create_job_service.js","mtime":1567631712058},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\nor more contributor license agreements. Licensed under the Elastic License;\nyou may not use this file except in compliance with the Elastic License.\nn\nexports.MultiMetricJobServiceProvider = MultiMetricJobServiceProvider;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _general = require('plugins/ml/jobs/new_job/simple/components/constants/general');\n\nvar _job_utils = require('plugins/ml/../common/util/job_utils');\n\nvar _field_format_service = require('plugins/ml/services/field_format_service');\n\nvar _job_service = require('plugins/ml/services/job_service');\n\nvar _new_job_utils = require('plugins/ml/jobs/new_job/utils/new_job_utils');\n\nvar _ml_api_service = require('plugins/ml/services/ml_api_service');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction MultiMetricJobServiceProvider() {\n  var MultiMetricJobService = function () {\n    function MultiMetricJobService() {\n      _classCallCheck(this, MultiMetricJobService);\n\n      this.chartData = {\n        job: {\n          swimlane: [],\n          line: [],\n          bars: [],\n          earliestTime: Number.MAX_SAFE_INTEGER\n        },\n        detectors: {},\n        percentComplete: 0,\n        loadingDifference: 0,\n        lastLoadTimestamp: null,\n        eventRateHighestValue: 0,\n        chartTicksMargin: { width: 30 },\n        totalResults: 0\n      };\n      this.job = {};\n    }\n\n    _createClass(MultiMetricJobService, [{\n      key: 'clearChartData',\n      value: function clearChartData() {\n        this.chartData.job.swimlane = [];\n        this.chartData.job.line = [];\n        this.chartData.job.bars = [];\n        this.chartData.detectors = {};\n        this.chartData.percentComplete = 0;\n        this.chartData.loadingDifference = 0;\n        this.chartData.eventRateHighestValue = 0;\n        this.chartData.totalResults = 0;\n        this.job = {};\n      }\n    }, {\n      key: 'getLineChartResults',\n      value: function getLineChartResults(formConfig, thisLoadTimestamp) {\n        var _this = this;\n\n        return new Promise(function (resolve, reject) {\n\n          var fieldIds = Object.keys(formConfig.fields).sort();\n\n          _this.chartData.job.earliestTime = formConfig.start;\n\n          // move event rate field to the front of the list\n          var idx = _lodash2.default.findIndex(fieldIds, function (id) {\n            return id === _general.EVENT_RATE_COUNT_FIELD;\n          });\n          if (idx !== -1) {\n            fieldIds.splice(idx, 1);\n            fieldIds.splice(0, 0, _general.EVENT_RATE_COUNT_FIELD);\n          }\n\n          _lodash2.default.each(fieldIds, function (fieldId) {\n            _this.chartData.detectors[fieldId] = {\n              line: [],\n              swimlane: [],\n              highestValue: 0\n            };\n          });\n\n          var searchJson = getSearchJsonFromConfig(formConfig);\n\n          _ml_api_service.ml.esSearch(searchJson).then(function (resp) {\n            // if this is the last chart load, wipe all previous chart data\n            if (thisLoadTimestamp === _this.chartData.lastLoadTimestamp) {\n              _lodash2.default.each(fieldIds, function (fieldId) {\n                _this.chartData.detectors[fieldId] = {\n                  line: [],\n                  swimlane: [],\n                  highestValue: 0\n                };\n\n                if (fieldId !== _general.EVENT_RATE_COUNT_FIELD) {\n                  var field = formConfig.fields[fieldId];\n                  var aggType = field.agg.type.dslName;\n                  _this.chartData.detectors[fieldId].fieldFormat = _field_format_service.mlFieldFormatService.getFieldFormatFromIndexPattern(formConfig.indexPattern, fieldId, aggType);\n                }\n              });\n            } else {\n              resolve(_this.chartData);\n            }\n            var aggregationsByTime = _lodash2.default.get(resp, ['aggregations', 'times', 'buckets'], []);\n\n            _lodash2.default.each(aggregationsByTime, function (dataForTime) {\n              var time = +dataForTime.key;\n              var date = new Date(time);\n              var docCount = +dataForTime.doc_count;\n\n              _this.chartData.job.swimlane.push({\n                date: date,\n                time: time,\n                value: 0,\n                color: '',\n                percentComplete: 0\n              });\n              _this.chartData.job.earliestTime = time < _this.chartData.job.earliestTime ? time : _this.chartData.job.earliestTime;\n\n              // used to draw the x axis labels on first render\n              _this.chartData.job.line.push({\n                date: date,\n                time: time,\n                value: null\n              });\n\n              _lodash2.default.each(fieldIds, function (fieldId) {\n                var value = void 0;\n                if (fieldId === _general.EVENT_RATE_COUNT_FIELD) {\n                  value = docCount;\n                } else if (typeof dataForTime[fieldId].value !== 'undefined') {\n                  value = dataForTime[fieldId].value;\n                } else if (typeof dataForTime[fieldId].values !== 'undefined') {\n                  value = dataForTime[fieldId].values[_job_utils.ML_MEDIAN_PERCENTS];\n                }\n\n                if (!isFinite(value) || docCount === 0) {\n                  value = null;\n                }\n\n                if (_this.chartData.detectors[fieldId]) {\n                  _this.chartData.detectors[fieldId].line.push({\n                    date: date,\n                    time: time,\n                    value: value\n                  });\n\n                  // init swimlane\n                  _this.chartData.detectors[fieldId].swimlane.push({\n                    date: date,\n                    time: time,\n                    value: 0,\n                    color: '',\n                    percentComplete: 0\n                  });\n\n                  if (value !== null) {\n                    _this.chartData.detectors[fieldId].highestValue = Math.ceil(Math.max(_this.chartData.detectors[fieldId].highestValue, Math.abs(value)));\n                  }\n                }\n              });\n            });\n\n            resolve(_this.chartData);\n          }).catch(function (resp) {\n            reject(resp);\n          });\n        });\n      }\n    }, {\n      key: 'getJobFromConfig',\n      value: function getJobFromConfig(formConfig) {\n        var job = _job_service.mlJobService.getBlankJob();\n        job.data_description.time_field = formConfig.timeField;\n\n        if (formConfig.enableModelPlot === true) {\n          job.model_plot_config = {\n            enabled: true\n          };\n        } else if (formConfig.enableModelPlot === false) {\n          delete job.model_plot_config;\n        }\n\n        _lodash2.default.each(formConfig.fields, function (field, key) {\n          var func = field.agg.type.mlName;\n          if (formConfig.isSparseData) {\n            if (field.agg.type.dslName === 'count') {\n              func = func.replace(/count/, 'non_zero_count');\n            } else if (field.agg.type.dslName === 'sum') {\n              func = func.replace(/sum/, 'non_null_sum');\n            }\n          }\n          var dtr = {\n            function: func\n          };\n\n          dtr.detector_description = func;\n\n          if (key !== _general.EVENT_RATE_COUNT_FIELD) {\n            dtr.field_name = field.name;\n            dtr.detector_description += '(' + field.name + ')';\n          }\n\n          if (formConfig.splitField !== undefined) {\n            dtr.partition_field_name = formConfig.splitField.name;\n          }\n          job.analysis_config.detectors.push(dtr);\n        });\n\n        var influencerFields = formConfig.influencerFields.map(function (f) {\n          return f.name;\n        });\n        if (influencerFields && influencerFields.length) {\n          job.analysis_config.influencers = influencerFields;\n        }\n\n        var query = formConfig.combinedQuery;\n\n        job.analysis_config.bucket_span = formConfig.bucketSpan;\n\n        job.analysis_limits = {\n          model_memory_limit: formConfig.modelMemoryLimit\n        };\n\n        delete job.data_description.field_delimiter;\n        delete job.data_description.quote_character;\n        delete job.data_description.time_format;\n        delete job.data_description.format;\n\n        var indices = formConfig.indexPattern.title.split(',').map(function (i) {\n          return i.trim();\n        });\n        job.datafeed_config = {\n          query: query,\n          indices: indices\n        };\n        job.job_id = formConfig.jobId;\n        job.description = formConfig.description;\n        job.groups = formConfig.jobGroups;\n\n        if (formConfig.useDedicatedIndex) {\n          job.results_index_name = job.job_id;\n        }\n\n        if (formConfig.usesSavedSearch === false) {\n          // Jobs created from saved searches cannot be cloned in the wizard as the\n          // ML job config holds no reference to the saved search ID.\n          job.custom_settings = {\n            created_by: _general.WIZARD_TYPE.MULTI_METRIC\n          };\n        }\n\n        return job;\n      }\n    }, {\n      key: 'createJob',\n      value: function createJob(formConfig) {\n        var _this2 = this;\n\n        return new Promise(function (resolve, reject) {\n\n          _this2.job = _this2.getJobFromConfig(formConfig);\n          var job = (0, _new_job_utils.createJobForSaving)(_this2.job);\n\n          // DO THE SAVE\n          _job_service.mlJobService.saveNewJob(job).then(function (resp) {\n            if (resp.success) {\n              resolve(_this2.job);\n            } else {\n              reject(resp);\n            }\n          });\n        });\n      }\n    }, {\n      key: 'startDatafeed',\n      value: function startDatafeed(formConfig) {\n        var datafeedId = _job_service.mlJobService.getDatafeedId(formConfig.jobId);\n        return _job_service.mlJobService.startDatafeed(datafeedId, formConfig.jobId, formConfig.start, formConfig.end);\n      }\n    }, {\n      key: 'stopDatafeed',\n      value: function stopDatafeed(formConfig) {\n        var datafeedId = _job_service.mlJobService.getDatafeedId(formConfig.jobId);\n        return _job_service.mlJobService.stopDatafeed(datafeedId, formConfig.jobId);\n      }\n    }]);\n\n    return MultiMetricJobService;\n  }();\n\n  return new MultiMetricJobService();\n}\n\nfunction getSearchJsonFromConfig(formConfig) {\n  var interval = formConfig.chartInterval.getInterval().asMilliseconds() + 'ms';\n  // clone the query as we're modifying it\n  var query = _lodash2.default.cloneDeep(formConfig.combinedQuery);\n\n  var json = {\n    index: formConfig.indexPattern.title,\n    size: 0,\n    body: {\n      query: {},\n      aggs: {\n        times: {\n          date_histogram: {\n            field: formConfig.timeField,\n            interval: interval,\n            min_doc_count: 0,\n            extended_bounds: {\n              min: formConfig.start,\n              max: formConfig.end\n            }\n          }\n        }\n      }\n    }\n  };\n\n  query.bool.must.push({\n    range: _defineProperty({}, formConfig.timeField, {\n      gte: formConfig.start,\n      lte: formConfig.end,\n      format: formConfig.format\n    })\n  });\n\n  // if the data is partitioned, add an additional search term\n  if (formConfig.firstSplitFieldName !== undefined) {\n    query.bool.must.push({\n      term: _defineProperty({}, formConfig.splitField.name, formConfig.firstSplitFieldName)\n    });\n  }\n\n  json.body.query = query;\n\n  if (Object.keys(formConfig.fields).length) {\n    json.body.aggs.times.aggs = {};\n    _lodash2.default.each(formConfig.fields, function (field) {\n      if (field.id !== _general.EVENT_RATE_COUNT_FIELD) {\n        json.body.aggs.times.aggs[field.id] = _defineProperty({}, field.agg.type.dslName, { field: field.name });\n\n        if (field.agg.type.dslName === 'percentiles') {\n          json.body.aggs.times.aggs[field.id][field.agg.type.dslName].percents = [_job_utils.ML_MEDIAN_PERCENTS];\n        }\n      }\n    });\n  }\n\n  return json;\n}",null]}