{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/legacy/core_plugins/metrics/public/components/vis_types/metric/vis.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/legacy/core_plugins/metrics/public/components/vis_types/metric/vis.js","mtime":1567631711629},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _vis_with_splits = require('../../vis_with_splits');\n\nvar _tick_formatter = require('../../lib/tick_formatter');\n\nvar _tick_formatter2 = _interopRequireDefault(_tick_formatter);\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _metric = require('../../../visualizations/components/metric');\n\nvar _metric2 = _interopRequireDefault(_metric);\n\nvar _get_last_value = require('../../../../common/get_last_value');\n\nvar _get_last_value2 = _interopRequireDefault(_get_last_value);\n\nvar _color = require('color');\n\nvar _color2 = _interopRequireDefault(_color);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nfunction getColors(props) {\n  var model = props.model,\n      visData = props.visData;\n\n  var series = _lodash2.default.get(visData, model.id + '.series', []);\n  var color = void 0;\n  var background = void 0;\n  if (model.background_color_rules) {\n    model.background_color_rules.forEach(function (rule) {\n      if (rule.operator && rule.value != null) {\n        var value = series[0] && (0, _get_last_value2.default)(series[0].data) || 0;\n        if (_lodash2.default[rule.operator](value, rule.value)) {\n          background = rule.background_color;\n          color = rule.color;\n        }\n      }\n    });\n  }\n  return { color: color, background: background };\n}\n\nfunction MetricVisualization(props) {\n  var backgroundColor = props.backgroundColor,\n      model = props.model,\n      visData = props.visData;\n\n  var colors = getColors(props);\n  var series = _lodash2.default.get(visData, model.id + '.series', []).filter(function (row) {\n    return row;\n  }).map(function (row, i) {\n    var seriesDef = model.series.find(function (s) {\n      return _lodash2.default.includes(row.id, s.id);\n    });\n    var newProps = {};\n    if (seriesDef) {\n      newProps.formatter = (0, _tick_formatter2.default)(seriesDef.formatter, seriesDef.value_template, props.getConfig);\n    }\n    if (i === 0 && colors.color) newProps.color = colors.color;\n    return _lodash2.default.assign({}, _lodash2.default.pick(row, ['label', 'data']), newProps);\n  });\n  var params = {\n    metric: series[0],\n    reversed: props.reversed,\n    additionalLabel: props.additionalLabel\n  };\n  if (series[1]) {\n    params.secondary = series[1];\n  }\n\n  var panelBackgroundColor = colors.background || backgroundColor;\n\n  if (panelBackgroundColor && panelBackgroundColor !== 'inherit') {\n    params.reversed = (0, _color2.default)(panelBackgroundColor).luminosity() < 0.45;\n  }\n  var style = { backgroundColor: panelBackgroundColor };\n  params.backgroundColor = panelBackgroundColor;\n\n  return _react2.default.createElement(\n    'div',\n    { className: 'tvbVis', style: style },\n    _react2.default.createElement(_metric2.default, params)\n  );\n}\n\nMetricVisualization.propTypes = {\n  backgroundColor: _propTypes2.default.string,\n  className: _propTypes2.default.string,\n  additionalLabel: _propTypes2.default.string,\n  model: _propTypes2.default.object,\n  onBrush: _propTypes2.default.func,\n  onChange: _propTypes2.default.func,\n  reversed: _propTypes2.default.bool,\n  visData: _propTypes2.default.object,\n  getConfig: _propTypes2.default.func\n};\n\nexports.default = (0, _vis_with_splits.visWithSplits)(MetricVisualization);\nmodule.exports = exports['default'];",null]}