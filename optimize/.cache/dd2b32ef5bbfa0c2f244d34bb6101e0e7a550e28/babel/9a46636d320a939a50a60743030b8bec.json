{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/jobs/new_job/simple/components/influencers_selection/influencers_selection_directive.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/jobs/new_job/simple/components/influencers_selection/influencers_selection_directive.js","mtime":1567631712056},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nvar _influencers_selection = require('./influencers_selection.html');\n\nvar _influencers_selection2 = _interopRequireDefault(_influencers_selection);\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _modules = require('ui/modules');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _module = _modules.uiModules.get('apps/ml'); /*\n                                                  * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                  * or more contributor license agreements. Licensed under the Elastic License;\n                                                  * you may not use this file except in compliance with the Elastic License.\n                                                  */\n\n_module.directive('mlInfluencersSelection', function () {\n  return {\n    restrict: 'E',\n    replace: true,\n    template: _influencers_selection2.default,\n    controller: function controller($scope) {\n\n      // is the field passed in being used as a split field or the over field?\n      // called from html. default fields can't be removed from the influencer list\n      $scope.isDefaultInfluencer = function (field) {\n        var defaultFields = getDefaultFields();\n        return defaultFields.find(function (f) {\n          return f.name === field.name;\n        }) !== undefined;\n      };\n\n      $scope.toggleInfluencerChange = function () {\n        $scope.addDefaultFieldsToInfluencerList();\n      };\n\n      // force add the over field and split fields to the front of the influencer list.\n      // as we have no control over the ui-select remove \"x\" link on each pill, if\n      // the user removes a split field, this function will put it back in again.\n      $scope.addDefaultFieldsToInfluencerList = function () {\n        var defaultFields = getDefaultFields();\n        var nonDefaultFields = getNonDefaultFields(defaultFields);\n        $scope.formConfig.influencerFields = defaultFields.concat(nonDefaultFields);\n      };\n\n      // get a list of the default fields made up of the over field and the split fields\n      function getDefaultFields() {\n        var defaultFields = getSplitFields();\n        if ($scope.formConfig.hasOwnProperty('overField') === true) {\n          // only available for population jobs\n          // don't add duplicate influencers, check to see if the over field is already a default field\n          if (defaultFields.find(function (f) {\n            return f.name === $scope.formConfig.overField.name;\n          }) === undefined) {\n            defaultFields.push($scope.formConfig.overField);\n          }\n        }\n        return defaultFields;\n      }\n\n      function getNonDefaultFields(defaultFields) {\n        return $scope.formConfig.influencerFields.filter(function (f) {\n          return defaultFields.find(function (sp) {\n            return sp.name === f.name;\n          }) === undefined;\n        });\n      }\n\n      // get the split fields from either each selected field (for population jobs)\n      // or from the global split field (multi-metric jobs)\n      function getSplitFields() {\n        if ($scope.formConfig.hasOwnProperty('splitField') === false) {\n          var splitFields = $scope.formConfig.fields.map(function (f) {\n            return f.splitField;\n          })\n          // remove undefined fields\n          .filter(function (f) {\n            return f !== undefined && f !== '';\n          });\n          // deduplicate\n          splitFields = _lodash2.default.uniq(splitFields, 'name');\n          return splitFields;\n        } else {\n          if ($scope.formConfig.splitField === undefined) {\n            return [];\n          } else {\n            return [$scope.formConfig.splitField];\n          }\n        }\n      }\n    }\n  };\n});",null]}