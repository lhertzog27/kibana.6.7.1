{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/file_datavisualizer/components/import_view/import_view.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/file_datavisualizer/components/import_view/import_view.js","mtime":1567631712045},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ImportView = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar createKibanaIndexPattern = function () {\n  var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(indexPatternName, indexPatterns, timeFieldName, kibanaConfig) {\n    var emptyPattern, id;\n    return regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _context6.prev = 0;\n            _context6.next = 3;\n            return indexPatterns.get();\n\n          case 3:\n            emptyPattern = _context6.sent;\n\n\n            Object.assign(emptyPattern, {\n              id: '',\n              title: indexPatternName,\n              timeFieldName: timeFieldName\n            });\n\n            _context6.next = 7;\n            return emptyPattern.create();\n\n          case 7:\n            id = _context6.sent;\n\n            if (kibanaConfig.get('defaultIndex')) {\n              _context6.next = 11;\n              break;\n            }\n\n            _context6.next = 11;\n            return kibanaConfig.set('defaultIndex', id);\n\n          case 11:\n            return _context6.abrupt('return', {\n              success: true,\n              id: id\n            });\n\n          case 14:\n            _context6.prev = 14;\n            _context6.t0 = _context6['catch'](0);\n\n            console.error(_context6.t0);\n            return _context6.abrupt('return', {\n              success: false,\n              error: _context6.t0\n            });\n\n          case 18:\n          case 'end':\n            return _context6.stop();\n        }\n      }\n    }, _callee6, this, [[0, 14]]);\n  }));\n\n  return function createKibanaIndexPattern(_x, _x2, _x3, _x4) {\n    return _ref6.apply(this, arguments);\n  };\n}();\n\nvar _react = require('@kbn/i18n/react');\n\nvar _react2 = require('react');\n\nvar _react3 = _interopRequireDefault(_react2);\n\nvar _eui = require('@elastic/eui');\n\nvar _i18n = require('@kbn/i18n');\n\nvar _importer = require('./importer');\n\nvar _results_links = require('../results_links');\n\nvar _import_progress = require('../import_progress');\n\nvar _import_errors = require('../import_errors');\n\nvar _import_summary = require('../import_summary');\n\nvar _import_settings = require('../import_settings');\n\nvar _experimental_badge = require('../experimental_badge');\n\nvar _index_utils = require('../../../util/index_utils');\n\nvar _ml_api_service = require('../../../services/ml_api_service');\n\nvar _utils = require('../utils');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\nvar DEFAULT_TIME_FIELD = '@timestamp';\nvar DEFAULT_INDEX_SETTINGS = { number_of_shards: 1 };\nvar CONFIG_MODE = { SIMPLE: 0, ADVANCED: 1 };\n\nvar DEFAULT_STATE = {\n  index: '',\n  importing: false,\n  imported: false,\n  initialized: false,\n  reading: false,\n  readProgress: 0,\n  readStatus: _import_progress.IMPORT_STATUS.INCOMPLETE,\n  parseJSONStatus: _import_progress.IMPORT_STATUS.INCOMPLETE,\n  indexCreatedStatus: _import_progress.IMPORT_STATUS.INCOMPLETE,\n  indexPatternCreatedStatus: _import_progress.IMPORT_STATUS.INCOMPLETE,\n  ingestPipelineCreatedStatus: _import_progress.IMPORT_STATUS.INCOMPLETE,\n  permissionCheckStatus: _import_progress.IMPORT_STATUS.INCOMPLETE,\n  uploadProgress: 0,\n  uploadStatus: _import_progress.IMPORT_STATUS.INCOMPLETE,\n  createIndexPattern: true,\n  indexPattern: '',\n  indexPatternId: '',\n  ingestPipelineId: '',\n  errors: [],\n  importFailures: [],\n  docCount: 0,\n  configMode: CONFIG_MODE.SIMPLE,\n  indexSettingsString: '',\n  mappingsString: '',\n  pipelineString: '',\n  indexNames: [],\n  indexPatternNames: [],\n  indexNameError: '',\n  indexPatternNameError: '',\n  timeFieldName: undefined\n};\n\nvar ImportView = exports.ImportView = function (_Component) {\n  _inherits(ImportView, _Component);\n\n  function ImportView(props) {\n    _classCallCheck(this, ImportView);\n\n    var _this = _possibleConstructorReturn(this, (ImportView.__proto__ || Object.getPrototypeOf(ImportView)).call(this, props));\n\n    _this.clickReset = function () {\n      var state = getDefaultState(_this.state, _this.props.results);\n      _this.setState(state, function () {\n        _this.loadIndexNames();\n        _this.loadIndexPatternNames();\n      });\n    };\n\n    _this.clickImport = function () {\n      _this.import();\n    };\n\n    _this.onConfigModeChange = function (configMode) {\n      _this.setState({\n        configMode: configMode\n      });\n    };\n\n    _this.onIndexChange = function (e) {\n      var name = e.target.value;\n      _this.setState({\n        index: name,\n        indexNameError: isIndexNameValid(name, _this.state.indexNames)\n      });\n    };\n\n    _this.onIndexPatternChange = function (e) {\n      var name = e.target.value;\n      var _this$state = _this.state,\n          indexPatternNames = _this$state.indexPatternNames,\n          index = _this$state.index;\n\n      _this.setState({\n        indexPattern: name,\n        indexPatternNameError: isIndexPatternNameValid(name, indexPatternNames, index)\n      });\n    };\n\n    _this.onCreateIndexPatternChange = function (e) {\n      _this.setState({\n        createIndexPattern: e.target.checked\n      });\n    };\n\n    _this.onIndexSettingsStringChange = function (text) {\n      _this.setState({\n        indexSettingsString: text\n      });\n    };\n\n    _this.onMappingsStringChange = function (text) {\n      _this.setState({\n        mappingsString: text\n      });\n    };\n\n    _this.onPipelineStringChange = function (text) {\n      _this.setState({\n        pipelineString: text\n      });\n    };\n\n    _this.setImportProgress = function (progress) {\n      _this.setState({\n        uploadProgress: progress\n      });\n    };\n\n    _this.setReadProgress = function (progress) {\n      _this.setState({\n        readProgress: progress\n      });\n    };\n\n    _this.state = getDefaultState(DEFAULT_STATE, _this.props.results);\n    return _this;\n  }\n\n  _createClass(ImportView, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.loadIndexNames();\n      this.loadIndexPatternNames();\n    }\n  }, {\n    key: 'import',\n\n\n    // TODO - sort this function out. it's a mess\n    value: function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n        var _this2 = this;\n\n        var _props, fileContents, results, indexPatterns, kibanaConfig, showBottomBar, format, timeFieldName, _state, index, indexPattern, createIndexPattern, indexSettingsString, mappingsString, pipelineString, errors;\n\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _props = this.props, fileContents = _props.fileContents, results = _props.results, indexPatterns = _props.indexPatterns, kibanaConfig = _props.kibanaConfig, showBottomBar = _props.showBottomBar;\n                format = results.format;\n                timeFieldName = this.state.timeFieldName;\n                _state = this.state, index = _state.index, indexPattern = _state.indexPattern, createIndexPattern = _state.createIndexPattern, indexSettingsString = _state.indexSettingsString, mappingsString = _state.mappingsString, pipelineString = _state.pipelineString;\n                errors = [];\n\n\n                if (index !== '') {\n                  this.setState({\n                    importing: true,\n                    errors: errors\n                  }, _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n                    return regeneratorRuntime.wrap(function _callee2$(_context2) {\n                      while (1) {\n                        switch (_context2.prev = _context2.next) {\n                          case 0:\n                            _context2.next = 2;\n                            return (0, _utils.hasImportPermission)(index);\n\n                          case 2:\n                            _context2.t0 = _context2.sent;\n\n                            if (!(_context2.t0 === false)) {\n                              _context2.next = 7;\n                              break;\n                            }\n\n                            errors.push(_i18n.i18n.translate('xpack.ml.fileDatavisualizer.importView.importPermissionError', {\n                              defaultMessage: 'You do not have permission to create or import data into index {index}.',\n                              values: {\n                                index: index\n                              }\n                            }));\n                            _this2.setState({\n                              permissionCheckStatus: _import_progress.IMPORT_STATUS.FAILED,\n                              importing: false,\n                              imported: false,\n                              errors: errors\n                            });\n                            return _context2.abrupt('return');\n\n                          case 7:\n\n                            _this2.setState({\n                              importing: true,\n                              imported: false,\n                              reading: true,\n                              initialized: true,\n                              permissionCheckStatus: _import_progress.IMPORT_STATUS.COMPLETE\n                            }, function () {\n                              _this2.props.hideBottomBar();\n                              setTimeout(_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n                                var success, createPipeline, settings, mappings, pipeline, parseError, _parseError, indexCreationSettings, _parseError2, importer, readResp, initializeImportResp, indexCreated, pipelineCreated, importId, pipelineId, importResp, indexPatternName, indexPatternResp;\n\n                                return regeneratorRuntime.wrap(function _callee$(_context) {\n                                  while (1) {\n                                    switch (_context.prev = _context.next) {\n                                      case 0:\n                                        success = true;\n                                        createPipeline = pipelineString !== '';\n                                        settings = {};\n                                        mappings = {};\n                                        pipeline = {};\n\n\n                                        try {\n                                          settings = JSON.parse(indexSettingsString);\n                                        } catch (error) {\n                                          success = false;\n                                          parseError = _i18n.i18n.translate('xpack.ml.fileDatavisualizer.importView.parseSettingsError', {\n                                            defaultMessage: 'Error parsing settings:'\n                                          });\n\n                                          errors.push(parseError + ' ' + error.message);\n                                        }\n\n                                        try {\n                                          mappings = JSON.parse(mappingsString);\n                                        } catch (error) {\n                                          success = false;\n                                          _parseError = _i18n.i18n.translate('xpack.ml.fileDatavisualizer.importView.parseMappingsError', {\n                                            defaultMessage: 'Error parsing mappings:'\n                                          });\n\n                                          errors.push(_parseError + ' ' + error.message);\n                                        }\n\n                                        indexCreationSettings = {\n                                          settings: settings,\n                                          mappings: mappings\n                                        };\n\n\n                                        try {\n                                          if (createPipeline) {\n                                            pipeline = JSON.parse(pipelineString);\n                                            indexCreationSettings.pipeline = pipeline;\n                                          }\n                                        } catch (error) {\n                                          success = false;\n                                          _parseError2 = _i18n.i18n.translate('xpack.ml.fileDatavisualizer.importView.parsePipelineError', {\n                                            defaultMessage: 'Error parsing ingest pipeline:'\n                                          });\n\n                                          errors.push(_parseError2 + ' ' + error.message);\n                                        }\n\n                                        _this2.setState({\n                                          parseJSONStatus: success ? _import_progress.IMPORT_STATUS.COMPLETE : _import_progress.IMPORT_STATUS.FAILED\n                                        });\n\n                                        // if an @timestamp field has been added to the\n                                        // mappings, use this field as the time field.\n                                        // This relies on the field being populated by\n                                        // the ingest pipeline on ingest\n                                        if (mappings[DEFAULT_TIME_FIELD] !== undefined) {\n                                          timeFieldName = DEFAULT_TIME_FIELD;\n                                          _this2.setState({ timeFieldName: timeFieldName });\n                                        }\n\n                                        if (!success) {\n                                          _context.next = 50;\n                                          break;\n                                        }\n\n                                        importer = (0, _importer.importerFactory)(format, results, indexCreationSettings);\n\n                                        if (!(importer !== undefined)) {\n                                          _context.next = 50;\n                                          break;\n                                        }\n\n                                        _context.next = 16;\n                                        return importer.read(fileContents, _this2.setReadProgress);\n\n                                      case 16:\n                                        readResp = _context.sent;\n\n                                        success = readResp.success;\n                                        _this2.setState({\n                                          readStatus: success ? _import_progress.IMPORT_STATUS.COMPLETE : _import_progress.IMPORT_STATUS.FAILED,\n                                          reading: false\n                                        });\n\n                                        if (readResp.success === false) {\n                                          console.error(readResp.error);\n                                          errors.push(readResp.error);\n                                        }\n\n                                        if (!success) {\n                                          _context.next = 50;\n                                          break;\n                                        }\n\n                                        _context.next = 23;\n                                        return importer.initializeImport(index);\n\n                                      case 23:\n                                        initializeImportResp = _context.sent;\n                                        indexCreated = initializeImportResp.index !== undefined;\n\n                                        _this2.setState({\n                                          indexCreatedStatus: indexCreated ? _import_progress.IMPORT_STATUS.COMPLETE : _import_progress.IMPORT_STATUS.FAILED\n                                        });\n\n                                        if (createPipeline) {\n                                          pipelineCreated = initializeImportResp.pipelineId !== undefined;\n\n                                          if (indexCreated) {\n                                            _this2.setState({\n                                              ingestPipelineCreatedStatus: pipelineCreated ? _import_progress.IMPORT_STATUS.COMPLETE : _import_progress.IMPORT_STATUS.FAILED,\n                                              ingestPipelineId: pipelineCreated ? initializeImportResp.pipelineId : ''\n                                            });\n                                          }\n                                          success = indexCreated && pipelineCreated;\n                                        } else {\n                                          success = indexCreated;\n                                        }\n\n                                        if (!success) {\n                                          _context.next = 49;\n                                          break;\n                                        }\n\n                                        importId = initializeImportResp.id;\n                                        pipelineId = initializeImportResp.pipelineId;\n                                        _context.next = 32;\n                                        return importer.import(importId, index, pipelineId, _this2.setImportProgress);\n\n                                      case 32:\n                                        importResp = _context.sent;\n\n                                        success = importResp.success;\n                                        _this2.setState({\n                                          uploadStatus: importResp.success ? _import_progress.IMPORT_STATUS.COMPLETE : _import_progress.IMPORT_STATUS.FAILED,\n                                          importFailures: importResp.failures,\n                                          docCount: importResp.docCount\n                                        });\n\n                                        if (!success) {\n                                          _context.next = 46;\n                                          break;\n                                        }\n\n                                        if (!createIndexPattern) {\n                                          _context.next = 44;\n                                          break;\n                                        }\n\n                                        indexPatternName = indexPattern === '' ? index : indexPattern;\n                                        _context.next = 40;\n                                        return createKibanaIndexPattern(indexPatternName, indexPatterns, timeFieldName, kibanaConfig);\n\n                                      case 40:\n                                        indexPatternResp = _context.sent;\n\n                                        success = indexPatternResp.success;\n                                        _this2.setState({\n                                          indexPatternCreatedStatus: indexPatternResp.success ? _import_progress.IMPORT_STATUS.COMPLETE : _import_progress.IMPORT_STATUS.FAILED,\n                                          indexPatternId: indexPatternResp.id\n                                        });\n                                        if (indexPatternResp.success === false) {\n                                          errors.push(indexPatternResp.error);\n                                        }\n\n                                      case 44:\n                                        _context.next = 47;\n                                        break;\n\n                                      case 46:\n                                        errors.push(importResp.error);\n\n                                      case 47:\n                                        _context.next = 50;\n                                        break;\n\n                                      case 49:\n                                        errors.push(initializeImportResp.error);\n\n                                      case 50:\n\n                                        showBottomBar();\n\n                                        _this2.setState({\n                                          importing: false,\n                                          imported: success,\n                                          errors: errors\n                                        });\n\n                                      case 52:\n                                      case 'end':\n                                        return _context.stop();\n                                    }\n                                  }\n                                }, _callee, _this2);\n                              })), 500);\n                            });\n\n                          case 8:\n                          case 'end':\n                            return _context2.stop();\n                        }\n                      }\n                    }, _callee2, _this2);\n                  })));\n                }\n\n              case 6:\n              case 'end':\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function _import() {\n        return _ref.apply(this, arguments);\n      }\n\n      return _import;\n    }()\n  }, {\n    key: 'loadIndexNames',\n    value: function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {\n        var indices, indexNames;\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return _ml_api_service.ml.getIndices();\n\n              case 2:\n                indices = _context4.sent;\n                indexNames = indices.map(function (i) {\n                  return i.name;\n                });\n\n                this.setState({ indexNames: indexNames });\n\n              case 5:\n              case 'end':\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function loadIndexNames() {\n        return _ref4.apply(this, arguments);\n      }\n\n      return loadIndexNames;\n    }()\n  }, {\n    key: 'loadIndexPatternNames',\n    value: function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {\n        var indexPatternNames;\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return (0, _index_utils.refreshIndexPatterns)();\n\n              case 2:\n                indexPatternNames = (0, _index_utils.getIndexPatternNames)();\n\n                this.setState({ indexPatternNames: indexPatternNames });\n\n              case 4:\n              case 'end':\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function loadIndexPatternNames() {\n        return _ref5.apply(this, arguments);\n      }\n\n      return loadIndexPatternNames;\n    }()\n  }, {\n    key: 'render',\n    value: function render() {\n      var _state2 = this.state,\n          index = _state2.index,\n          indexPattern = _state2.indexPattern,\n          indexPatternId = _state2.indexPatternId,\n          ingestPipelineId = _state2.ingestPipelineId,\n          importing = _state2.importing,\n          imported = _state2.imported,\n          reading = _state2.reading,\n          initialized = _state2.initialized,\n          readStatus = _state2.readStatus,\n          parseJSONStatus = _state2.parseJSONStatus,\n          indexCreatedStatus = _state2.indexCreatedStatus,\n          ingestPipelineCreatedStatus = _state2.ingestPipelineCreatedStatus,\n          indexPatternCreatedStatus = _state2.indexPatternCreatedStatus,\n          permissionCheckStatus = _state2.permissionCheckStatus,\n          uploadProgress = _state2.uploadProgress,\n          uploadStatus = _state2.uploadStatus,\n          createIndexPattern = _state2.createIndexPattern,\n          errors = _state2.errors,\n          docCount = _state2.docCount,\n          importFailures = _state2.importFailures,\n          indexSettingsString = _state2.indexSettingsString,\n          mappingsString = _state2.mappingsString,\n          pipelineString = _state2.pipelineString,\n          indexNameError = _state2.indexNameError,\n          indexPatternNameError = _state2.indexPatternNameError,\n          timeFieldName = _state2.timeFieldName;\n\n\n      var createPipeline = pipelineString !== '';\n\n      var statuses = {\n        reading: reading,\n        readStatus: readStatus,\n        parseJSONStatus: parseJSONStatus,\n        indexCreatedStatus: indexCreatedStatus,\n        ingestPipelineCreatedStatus: ingestPipelineCreatedStatus,\n        indexPatternCreatedStatus: indexPatternCreatedStatus,\n        permissionCheckStatus: permissionCheckStatus,\n        uploadProgress: uploadProgress,\n        uploadStatus: uploadStatus,\n        createIndexPattern: createIndexPattern,\n        createPipeline: createPipeline\n      };\n\n      var disableImport = index === '' || indexNameError !== '' || createIndexPattern === true && indexPatternNameError !== '' || initialized === true;\n\n      return _react3.default.createElement(\n        _react3.default.Fragment,\n        null,\n        _react3.default.createElement(\n          _eui.EuiPanel,\n          null,\n          _react3.default.createElement(\n            _eui.EuiTitle,\n            { size: 's' },\n            _react3.default.createElement(\n              'h3',\n              null,\n              _react3.default.createElement(_react.FormattedMessage, {\n                id: 'xpack.ml.fileDatavisualizer.importView.importDataTitle',\n                defaultMessage: 'Import data'\n              }),\n              '\\xA0',\n              _react3.default.createElement(_experimental_badge.ExperimentalBadge, {\n                tooltipContent: _react3.default.createElement(_react.FormattedMessage, {\n                  id: 'xpack.ml.fileDatavisualizer.importView.experimentalFeatureTooltip',\n                  defaultMessage: 'Experimental feature. We\\'d love to hear your feedback.'\n                })\n              })\n            )\n          ),\n          _react3.default.createElement(_import_settings.ImportSettings, {\n            index: index,\n            indexPattern: indexPattern,\n            initialized: initialized,\n            onIndexChange: this.onIndexChange,\n            createIndexPattern: createIndexPattern,\n            onCreateIndexPatternChange: this.onCreateIndexPatternChange,\n            onIndexPatternChange: this.onIndexPatternChange,\n            indexSettingsString: indexSettingsString,\n            mappingsString: mappingsString,\n            pipelineString: pipelineString,\n            onIndexSettingsStringChange: this.onIndexSettingsStringChange,\n            onMappingsStringChange: this.onMappingsStringChange,\n            onPipelineStringChange: this.onPipelineStringChange,\n            indexNameError: indexNameError,\n            indexPatternNameError: indexPatternNameError\n          }),\n          _react3.default.createElement(_eui.EuiSpacer, { size: 'm' }),\n          (initialized === false || importing === true) && _react3.default.createElement(\n            _eui.EuiButton,\n            {\n              isDisabled: disableImport,\n              onClick: this.clickImport,\n              isLoading: importing,\n              iconSide: 'right',\n              fill: true\n            },\n            _react3.default.createElement(_react.FormattedMessage, {\n              id: 'xpack.ml.fileDatavisualizer.importView.importButtonLabel',\n              defaultMessage: 'Import'\n            })\n          ),\n          initialized === true && importing === false && _react3.default.createElement(\n            _eui.EuiButton,\n            {\n              onClick: this.clickReset\n            },\n            _react3.default.createElement(_react.FormattedMessage, {\n              id: 'xpack.ml.fileDatavisualizer.importView.resetButtonLabel',\n              defaultMessage: 'Reset'\n            })\n          )\n        ),\n        initialized === true && _react3.default.createElement(\n          _react3.default.Fragment,\n          null,\n          _react3.default.createElement(_eui.EuiSpacer, { size: 'm' }),\n          _react3.default.createElement(\n            _eui.EuiPanel,\n            null,\n            _react3.default.createElement(_import_progress.ImportProgress, { statuses: statuses }),\n            imported === true && _react3.default.createElement(\n              _react3.default.Fragment,\n              null,\n              _react3.default.createElement(_eui.EuiSpacer, { size: 'm' }),\n              _react3.default.createElement(_import_summary.ImportSummary, {\n                index: index,\n                indexPattern: indexPattern === '' ? index : indexPattern,\n                ingestPipelineId: ingestPipelineId,\n                docCount: docCount,\n                importFailures: importFailures,\n                createIndexPattern: createIndexPattern,\n                createPipeline: createPipeline\n              }),\n              _react3.default.createElement(_eui.EuiSpacer, { size: 'l' }),\n              _react3.default.createElement(_results_links.ResultsLinks, {\n                index: index,\n                indexPatternId: indexPatternId,\n                timeFieldName: timeFieldName,\n                createIndexPattern: createIndexPattern\n              })\n            )\n          )\n        ),\n        errors.length > 0 && _react3.default.createElement(\n          _react3.default.Fragment,\n          null,\n          _react3.default.createElement(_eui.EuiSpacer, { size: 'm' }),\n          _react3.default.createElement(_import_errors.ImportErrors, {\n            errors: errors,\n            statuses: statuses\n          })\n        )\n      );\n    }\n  }]);\n\n  return ImportView;\n}(_react2.Component);\n\nfunction getDefaultState(state, results) {\n  var indexSettingsString = state.indexSettingsString === '' ? JSON.stringify(DEFAULT_INDEX_SETTINGS, null, 2) : state.indexSettingsString;\n\n  var mappingsString = state.mappingsString === '' ? JSON.stringify(results.mappings, null, 2) : state.mappingsString;\n\n  var pipelineString = state.pipelineString === '' && results.ingest_pipeline !== undefined ? JSON.stringify(results.ingest_pipeline, null, 2) : state.pipelineString;\n\n  var timeFieldName = results.timestamp_field;\n\n  return _extends({}, DEFAULT_STATE, {\n    indexSettingsString: indexSettingsString,\n    mappingsString: mappingsString,\n    pipelineString: pipelineString,\n    timeFieldName: timeFieldName\n  });\n}\n\nfunction isIndexNameValid(name, indexNames) {\n  if (indexNames.find(function (i) {\n    return i === name;\n  })) {\n    return _react3.default.createElement(_react.FormattedMessage, {\n      id: 'xpack.ml.fileDatavisualizer.importView.indexNameAlreadyExistsErrorMessage',\n      defaultMessage: 'Index name already exists'\n    });\n  }\n\n  var reg = new RegExp('[\\\\\\\\/\\*\\?\\\"\\<\\>\\|\\\\s\\,\\#]+');\n  if (name !== name.toLowerCase() || // name should be lowercase\n  name === '.' || name === '..' || // name can't be . or ..\n  name.match(/^[-_+]/) !== null || // name can't start with these chars\n  name.match(reg) !== null // name can't contain these chars\n  ) {\n      return _react3.default.createElement(_react.FormattedMessage, {\n        id: 'xpack.ml.fileDatavisualizer.importView.indexNameContainsIllegalCharactersErrorMessage',\n        defaultMessage: 'Index name contains illegal characters'\n      });\n    }\n  return '';\n}\n\nfunction isIndexPatternNameValid(name, indexPatternNames, index) {\n  // if a blank name is entered, the index name will be used so avoid validation\n  if (name === '') {\n    return '';\n  }\n\n  if (indexPatternNames.find(function (i) {\n    return i === name;\n  })) {\n    return _react3.default.createElement(_react.FormattedMessage, {\n      id: 'xpack.ml.fileDatavisualizer.importView.indexPatternNameAlreadyExistsErrorMessage',\n      defaultMessage: 'Index pattern name already exists'\n    });\n  }\n\n  // escape . and + to stop the regex matching more than it should.\n  var newName = name.replace('.', '\\\\.');\n  newName = newName.replace('+', '\\\\+');\n  // replace * with .* to make the wildcard match work.\n  newName = newName.replace('*', '.*');\n  var reg = new RegExp('^' + newName + '$');\n  if (index.match(reg) === null) {\n    // name should match index\n    return _react3.default.createElement(_react.FormattedMessage, {\n      id: 'xpack.ml.fileDatavisualizer.importView.indexPatternDoesNotMatchIndexNameErrorMessage',\n      defaultMessage: 'Index pattern does not match index name'\n    });\n  }\n\n  return '';\n}",null]}