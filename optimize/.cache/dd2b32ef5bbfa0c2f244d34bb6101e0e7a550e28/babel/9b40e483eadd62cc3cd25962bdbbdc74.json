{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/ui/public/agg_response/point_series/_get_aspects.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/agg_response/point_series/_get_aspects.js","mtime":1567631711693},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getAspects = getAspects;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _fake_x_aspect = require('./_fake_x_aspect');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nvar map = {\n  segment: 'x',\n  metric: 'y',\n  radius: 'z',\n  width: 'width',\n  group: 'series'\n};\n\nfunction columnToAspect(aspects, col, i) {\n  var schema = col.aggConfig.schema.name;\n\n  var name = map[schema];\n  if (!name) throw new TypeError('unknown schema name \"' + schema + '\"');\n\n  var aspect = {\n    i: i,\n    title: col.title,\n    aggConfig: col.aggConfig\n  };\n\n  if (!aspects[name]) aspects[name] = [];\n  aspects[name].push(aspect);\n}\n\n/**\n * Identify and group the columns based on the aspect of the pointSeries\n * they represent.\n *\n * @param  {array} columns - the list of columns\n * @return {object} - an object with a key for each aspect (see map). The values\n *                    may be undefined, a single aspect, or an array of aspects.\n */\nfunction getAspects(table) {\n  var aspects = (0, _lodash2.default)(table.columns)\n  // write each column into the aspects under it's group\n  .transform(columnToAspect, {})\n  // unwrap groups that only have one value, and validate groups that have more\n  .transform(function (aspects, group, name) {\n    if (name !== 'y' && name !== 'series' && group.length > 1) {\n      throw new TypeError('Only multiple metrics and series are supported in point series');\n    }\n\n    aspects[name] = group.length > 1 ? group : group[0];\n  }).value();\n\n  if (!aspects.x) {\n    aspects.x = (0, _fake_x_aspect.makeFakeXAspect)();\n  }\n\n  return aspects;\n}",null]}