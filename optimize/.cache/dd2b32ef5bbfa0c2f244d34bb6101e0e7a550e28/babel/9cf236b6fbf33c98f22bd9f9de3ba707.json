{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/logstash/public/components/pipeline_list/pipeline_list.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/logstash/public/components/pipeline_list/pipeline_list.js","mtime":1567631712006},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PipelineList = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _react3 = require('@kbn/i18n/react');\n\nvar _eui = require('@elastic/eui');\n\nvar _info_alerts = require('./info_alerts');\n\nvar _pipelines_table = require('./pipelines_table');\n\nvar _confirm_delete_modal = require('./confirm_delete_modal');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\nvar PipelineListUi = function (_React$Component) {\n  _inherits(PipelineListUi, _React$Component);\n\n  function PipelineListUi(props) {\n    _classCallCheck(this, PipelineListUi);\n\n    var _this = _possibleConstructorReturn(this, (PipelineListUi.__proto__ || Object.getPrototypeOf(PipelineListUi)).call(this, props));\n\n    _this.componentDidMount = function () {\n      var _this$props = _this.props,\n          isReadOnly = _this$props.isReadOnly,\n          licenseService = _this$props.licenseService,\n          toastNotifications = _this$props.toastNotifications;\n\n\n      _this.loadPipelines().then(function () {\n        if (isReadOnly) {\n          toastNotifications.addWarning(licenseService.message);\n        }\n      });\n\n      _this.checkMonitoringAccess();\n    };\n\n    _this.getEmptyPrompt = function () {\n      return _react2.default.createElement(_eui.EuiEmptyPrompt, {\n        title: _react2.default.createElement(\n          'h2',\n          null,\n          _react2.default.createElement(_react3.FormattedMessage, {\n            id: 'xpack.logstash.pipelineList.noPipelinesTitle',\n            defaultMessage: 'No pipelines'\n          })\n        ),\n        titleSize: 'xs',\n        body: _react2.default.createElement(_react3.FormattedMessage, {\n          id: 'xpack.logstash.pipelineList.noPipelinesDescription',\n          defaultMessage: 'There are no pipelines defined.'\n        })\n      });\n    };\n\n    _this.getErrorPrompt = function () {\n      return _react2.default.createElement(_eui.EuiEmptyPrompt, {\n        title: _react2.default.createElement(\n          'h2',\n          null,\n          _react2.default.createElement(_react3.FormattedMessage, {\n            id: 'xpack.logstash.pipelineList.pipelinesLoadingErrorTitle',\n            defaultMessage: 'Error'\n          })\n        ),\n        titleSize: 'xs',\n        body: _react2.default.createElement(_react3.FormattedMessage, {\n          id: 'xpack.logstash.pipelineList.pipelinesLoadingErrorDescription',\n          defaultMessage: 'Error encountered while loading pipelines.'\n        })\n      });\n    };\n\n    _this.loadPipelines = function () {\n      var _this$props2 = _this.props,\n          isReadOnly = _this$props2.isReadOnly,\n          licenseService = _this$props2.licenseService,\n          pipelinesService = _this$props2.pipelinesService,\n          toastNotifications = _this$props2.toastNotifications,\n          intl = _this$props2.intl;\n\n\n      _this.setState({\n        message: _react2.default.createElement(\n          'div',\n          null,\n          _react2.default.createElement(_eui.EuiLoadingSpinner, { size: 'm' }),\n          '\\xA0 ',\n          _react2.default.createElement(_react3.FormattedMessage, {\n            id: 'xpack.logstash.pipelineList.pipelinesLoadingMessage',\n            defaultMessage: 'Loading pipelines\\u2026'\n          })\n        )\n      });\n\n      return pipelinesService.getPipelineList().then(function (pipelines) {\n        _this.setState({\n          isLoading: false,\n          isForbidden: false,\n          isSelectable: true,\n          pipelines: pipelines\n        });\n\n        if (!pipelines.length) {\n          _this.setState({\n            columns: [],\n            message: _this.getEmptyPrompt(),\n            isSelectable: false\n          });\n        }\n      }).catch(function (err) {\n        _this.setState({\n          isLoading: false,\n          message: _this.getErrorPrompt()\n        });\n        return licenseService.checkValidity().then(function () {\n          if (err.status === 403) {\n            _this.setState({ isLoading: false });\n\n            if (isReadOnly) {\n              _this.setState({ isForbidden: false });\n            } else {\n              _this.setState({ isForbidden: true });\n            }\n          } else {\n            _this.setState({ isForbidden: false });\n            toastNotifications.addDanger(intl.formatMessage({\n              id: 'xpack.logstash.pipelineList.pipelineLoadingErrorNotification',\n              defaultMessage: 'Couldn\\'t load pipeline. Error: \"{errStatusText}\".'\n            }, {\n              errStatusText: err.statusText\n            }));\n          }\n        });\n      });\n    };\n\n    _this.checkMonitoringAccess = function () {\n      var _this$props3 = _this.props,\n          clusterService = _this$props3.clusterService,\n          monitoringService = _this$props3.monitoringService;\n\n\n      clusterService.isClusterInfoAvailable().then(function (isAvailable) {\n        _this.setState({\n          showAddRoleAlert: !isAvailable,\n          showEnableMonitoringAlert: !monitoringService.isMonitoringEnabled()\n        });\n      });\n    };\n\n    _this.renderNoPermissionCallOut = function () {\n      var _this$state = _this.state,\n          isForbidden = _this$state.isForbidden,\n          isLoading = _this$state.isLoading;\n\n      return isForbidden && !isLoading ? _react2.default.createElement(\n        _eui.EuiCallOut,\n        {\n          color: 'danger',\n          iconType: 'cross',\n          title: _react2.default.createElement(_react3.FormattedMessage, {\n            id: 'xpack.logstash.pipelineList.noPermissionToManageTitle',\n            defaultMessage: 'You do not have permission to manage Logstash pipelines.'\n          })\n        },\n        _react2.default.createElement(\n          'p',\n          null,\n          _react2.default.createElement(_react3.FormattedMessage, {\n            id: 'xpack.logstash.pipelineList.noPermissionToManageDescription',\n            defaultMessage: 'Please contact your administrator.'\n          })\n        )\n      ) : null;\n    };\n\n    _this.hideDeletePipelinesModal = function () {\n      _this.setState({\n        showConfirmDeleteModal: false\n      });\n    };\n\n    _this.showDeletePipelinesModal = function () {\n      _this.setState({\n        showConfirmDeleteModal: true\n      });\n    };\n\n    _this.cancelDeletePipelines = function () {\n      _this.hideDeletePipelinesModal();\n    };\n\n    _this.deleteSelectedPipelines = function () {\n      _this.hideDeletePipelinesModal();\n      var _this$props4 = _this.props,\n          licenseService = _this$props4.licenseService,\n          pipelinesService = _this$props4.pipelinesService,\n          toastNotifications = _this$props4.toastNotifications,\n          intl = _this$props4.intl;\n      var selection = _this.state.selection;\n\n      var numPipelinesSelected = selection.length;\n\n      var pipelineIds = selection.map(function (_ref) {\n        var id = _ref.id;\n        return id;\n      });\n      return pipelinesService.deletePipelines(pipelineIds).then(function (results) {\n        var numSuccesses = results.numSuccesses,\n            numErrors = results.numErrors;\n\n\n        if (numSuccesses === 1 && numErrors === 0) {\n          toastNotifications.addSuccess(intl.formatMessage({\n            id: 'xpack.logstash.pipelineList.pipelinesSuccessfullyDeletedNotification',\n            defaultMessage: 'Deleted \"{id}\"'\n          }, {\n            id: selection[0].id\n          }));\n        } else if (numSuccesses) {\n          var text = void 0;\n          if (numErrors) {\n            text = intl.formatMessage({\n              id: 'xpack.logstash.pipelineList.pipelinesCouldNotBeDeletedDescription',\n              defaultMessage: 'But {numErrors, plural, one {# Pipeline} other {# Pipelines}} couldn\\'t be deleted.'\n            }, {\n              numErrors: numErrors\n            });\n          }\n\n          toastNotifications.addSuccess({\n            title: intl.formatMessage({\n              id: 'xpack.logstash.pipelineList.successfullyDeletedPipelinesNotification',\n              defaultMessage: 'Deleted {numSuccesses} out of {numPipelinesSelected, plural, one {# Pipeline} other {# Pipelines}}'\n            }, _defineProperty({\n              numSuccesses: numSuccesses,\n              numPipelinesSelected: numPipelinesSelected\n            }, 'numPipelinesSelected', numPipelinesSelected)),\n            text: text\n          });\n        } else if (numErrors) {\n          toastNotifications.addError(intl.formatMessage({\n            id: 'xpack.logstash.pipelineList.couldNotDeletePipelinesNotification',\n            defaultMessage: 'Failed to delete {numErrors, plural, one {# Pipeline} other {# Pipelines}}'\n          }, {\n            numErrors: numErrors\n          }));\n        }\n\n        _this.loadPipelines();\n      }).catch(function (err) {\n        return licenseService.checkValidity().then(function () {\n          return toastNotifications.addDanger(err);\n        });\n      });\n    };\n\n    _this.onDeleteSelectedPipelines = function () {\n      _this.showDeletePipelinesModal();\n    };\n\n    _this.onSelectionChange = function (selection) {\n      return _this.setState({ selection: selection });\n    };\n\n    _this.state = {\n      columns: [],\n      isForbidden: false,\n      isLoading: true,\n      isSelectable: false,\n      pipelines: [],\n      showAddRoleAlert: false,\n      showConfirmDeleteModal: false,\n      showEnableMonitoringAlert: false,\n      selection: []\n    };\n    return _this;\n  }\n\n  _createClass(PipelineListUi, [{\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          clonePipeline = _props.clonePipeline,\n          createPipeline = _props.createPipeline,\n          isReadOnly = _props.isReadOnly,\n          openPipeline = _props.openPipeline;\n      var _state = this.state,\n          isSelectable = _state.isSelectable,\n          message = _state.message,\n          pipelines = _state.pipelines,\n          selection = _state.selection,\n          showConfirmDeleteModal = _state.showConfirmDeleteModal;\n\n      return _react2.default.createElement(\n        'div',\n        { 'data-test-subj': 'pipelineList' },\n        _react2.default.createElement(\n          _eui.EuiPageContent,\n          { horizontalPosition: 'center' },\n          _react2.default.createElement(\n            _eui.EuiTitle,\n            { size: 'm' },\n            _react2.default.createElement(\n              'h1',\n              null,\n              _react2.default.createElement(_react3.FormattedMessage, { id: 'xpack.logstash.pipelineList.head', defaultMessage: 'Pipelines' })\n            )\n          ),\n          _react2.default.createElement(\n            _eui.EuiText,\n            { color: 'subdued' },\n            _react2.default.createElement(\n              'p',\n              null,\n              _react2.default.createElement(_react3.FormattedMessage, {\n                id: 'xpack.logstash.pipelineList.subhead',\n                defaultMessage: 'Manage logstash event processing and see the result visually'\n              })\n            )\n          ),\n          _react2.default.createElement(_eui.EuiSpacer, null),\n          this.renderNoPermissionCallOut(),\n          _react2.default.createElement(_pipelines_table.PipelinesTable, {\n            clonePipeline: clonePipeline,\n            createPipeline: createPipeline,\n            isReadOnly: isReadOnly,\n            isSelectable: isSelectable,\n            message: message,\n            pipelines: pipelines,\n            selection: selection,\n            onDeleteSelectedPipelines: this.onDeleteSelectedPipelines,\n            onSelectionChange: this.onSelectionChange,\n            openPipeline: openPipeline\n          })\n        ),\n        _react2.default.createElement(_confirm_delete_modal.ConfirmDeleteModal, {\n          cancelDeletePipelines: this.cancelDeletePipelines,\n          deleteSelectedPipelines: this.deleteSelectedPipelines,\n          selection: selection,\n          showConfirmDeleteModal: showConfirmDeleteModal\n        }),\n        _react2.default.createElement(_info_alerts.InfoAlerts, {\n          showAddRoleAlert: this.state.showAddRoleAlert,\n          showEnableMonitoringAlert: this.state.showEnableMonitoringAlert\n        })\n      );\n    }\n  }]);\n\n  return PipelineListUi;\n}(_react2.default.Component);\n\nvar PipelineList = exports.PipelineList = (0, _react3.injectI18n)(PipelineListUi);",null]}