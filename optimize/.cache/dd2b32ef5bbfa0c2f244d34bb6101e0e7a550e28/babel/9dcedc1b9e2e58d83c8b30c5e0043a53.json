{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/public/components/datasource/index.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/public/components/datasource/index.js","mtime":1567631711921},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Datasource = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /*\n                                                                                                                                                                                                                                                                   * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                   * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                   * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                   */\n\nvar _propTypes = require('prop-types');\n\nvar _reactRedux = require('react-redux');\n\nvar _recompose = require('recompose');\n\nvar _lodash = require('lodash');\n\nvar _expression_types = require('../../expression_types');\n\nvar _app = require('../../state/selectors/app');\n\nvar _workpad = require('../../state/selectors/workpad');\n\nvar _elements = require('../../state/actions/elements');\n\nvar _datasource = require('./datasource');\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    element: (0, _workpad.getSelectedElement)(state),\n    pageId: (0, _workpad.getSelectedPage)(state),\n    functionDefinitions: (0, _app.getServerFunctions)(state)\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    dispatchArgumentAtIndex: function dispatchArgumentAtIndex(props) {\n      return function (arg) {\n        return dispatch((0, _elements.setArgumentAtIndex)(_extends({}, props, { arg: arg })));\n      };\n    },\n    dispatchAstAtIndex: function dispatchAstAtIndex(_ref) {\n      var index = _ref.index,\n          element = _ref.element,\n          pageId = _ref.pageId;\n      return function (ast) {\n        dispatch((0, _elements.flushContext)(element.id));\n        dispatch((0, _elements.setAstAtIndex)(index, ast, element, pageId));\n      };\n    }\n  };\n};\n\nvar mergeProps = function mergeProps(stateProps, dispatchProps, ownProps) {\n  var element = stateProps.element,\n      pageId = stateProps.pageId,\n      functionDefinitions = stateProps.functionDefinitions;\n  var dispatchArgumentAtIndex = dispatchProps.dispatchArgumentAtIndex,\n      dispatchAstAtIndex = dispatchProps.dispatchAstAtIndex;\n\n\n  var getDataTableFunctionsByName = function getDataTableFunctionsByName(name) {\n    return functionDefinitions.find(function (fn) {\n      return fn.name === name && fn.type === 'datatable';\n    });\n  };\n\n  // find the matching datasource from the expression AST\n  var datasourceAst = (0, _lodash.get)(element, 'ast.chain', []).map(function (astDef, i) {\n    // if it's not a function, it's can't be a datasource\n    if (astDef.type !== 'function') {\n      return;\n    }\n    var args = astDef.arguments;\n\n    // if there's no matching datasource in the registry, we're done\n    var datasource = _expression_types.datasourceRegistry.get(astDef.function);\n    if (!datasource) {\n      return;\n    }\n\n    var datasourceDef = getDataTableFunctionsByName(datasource.name);\n\n    // keep track of the ast, the ast index2, and the datasource\n    return {\n      datasource: datasource,\n      datasourceDef: datasourceDef,\n      args: args,\n      expressionIndex: i\n    };\n  }).filter(Boolean)[0];\n\n  return _extends({}, ownProps, stateProps, dispatchProps, datasourceAst, {\n    datasources: _expression_types.datasourceRegistry.toArray(),\n    setDatasourceAst: dispatchAstAtIndex({\n      pageId: pageId,\n      element: element,\n      index: datasourceAst && datasourceAst.expressionIndex\n    }),\n    setDatasourceArgs: dispatchArgumentAtIndex({\n      pageId: pageId,\n      element: element,\n      index: datasourceAst && datasourceAst.expressionIndex\n    })\n  });\n};\n\nvar Datasource = exports.Datasource = (0, _recompose.compose)((0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps, mergeProps), (0, _recompose.withState)('stateArgs', 'updateArgs', function (_ref2) {\n  var args = _ref2.args;\n  return args;\n}), (0, _recompose.withState)('selecting', 'setSelecting', false), (0, _recompose.withState)('previewing', 'setPreviewing', false), (0, _recompose.withState)('isInvalid', 'setInvalid', false), (0, _recompose.withState)('stateDatasource', 'selectDatasource', function (_ref3) {\n  var datasource = _ref3.datasource;\n  return datasource;\n}), (0, _recompose.withHandlers)({\n  resetArgs: function resetArgs(_ref4) {\n    var updateArgs = _ref4.updateArgs,\n        args = _ref4.args;\n    return function () {\n      return updateArgs(args);\n    };\n  }\n}))(_datasource.Datasource);\n\nDatasource.propTypes = {\n  done: _propTypes.PropTypes.func\n};",null]}