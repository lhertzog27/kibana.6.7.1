{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/security/public/views/management/edit_role/index.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/security/public/views/management/edit_role/index.js","mtime":1567631712302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _chrome = require('ui/chrome');\n\nvar _chrome2 = _interopRequireDefault(_chrome);\n\nvar _routes = require('ui/routes');\n\nvar _routes2 = _interopRequireDefault(_routes);\n\nvar _notify = require('ui/notify');\n\nvar _edit_role = require('plugins/security/views/management/edit_role/edit_role.html');\n\nvar _edit_role2 = _interopRequireDefault(_edit_role);\n\nrequire('angular-ui-select');\n\nrequire('plugins/security/services/application_privilege');\n\nrequire('plugins/security/services/shield_user');\n\nrequire('plugins/security/services/shield_role');\n\nrequire('plugins/security/services/shield_privileges');\n\nrequire('plugins/security/services/shield_indices');\n\nvar _index_patterns = require('ui/index_patterns/index_patterns');\n\nvar _xpack_info = require('plugins/xpack_main/services/xpack_info');\n\nvar _lib = require('../../../../../spaces/public/lib');\n\nvar _user_profile = require('plugins/xpack_main/services/user_profile');\n\nvar _check_license_error = require('plugins/security/lib/check_license_error');\n\nvar _management_urls = require('../management_urls');\n\nvar _components = require('./components');\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = require('react-dom');\n\nvar _kibana_privilege = require('../../../../common/model/kibana_privilege');\n\nvar _i18n = require('ui/i18n');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\n_routes2.default.when(_management_urls.EDIT_ROLES_PATH + '/:name?', {\n  template: _edit_role2.default,\n  resolve: {\n    role: function role($route, ShieldRole, kbnUrl, Promise, Notifier) {\n      var name = $route.current.params.name;\n\n      var role = void 0;\n\n      if (name != null) {\n        role = ShieldRole.get({ name: name }).$promise.catch(function (response) {\n\n          if (response.status !== 404) {\n            return (0, _notify.fatalError)(response);\n          }\n\n          var notifier = new Notifier();\n          notifier.error('No \"' + name + '\" role found.');\n          kbnUrl.redirect(_management_urls.ROLES_PATH);\n          return Promise.halt();\n        });\n      } else {\n        role = Promise.resolve(new ShieldRole({\n          elasticsearch: {\n            cluster: [],\n            indices: [],\n            run_as: []\n          },\n          kibana: {\n            global: [],\n            space: {}\n          },\n          _unrecognized_applications: []\n        }));\n      }\n\n      return role.then(function (res) {\n        return res.toJSON();\n      });\n    },\n    users: function users(ShieldUser, kbnUrl, Promise, Private) {\n      // $promise is used here because the result is an ngResource, not a promise itself\n      return ShieldUser.query().$promise.then(function (users) {\n        return _lodash2.default.map(users, 'username');\n      }).catch((0, _check_license_error.checkLicenseError)(kbnUrl, Promise, Private));\n    },\n    indexPatterns: function indexPatterns(Private) {\n      var indexPatterns = Private(_index_patterns.IndexPatternsProvider);\n      return indexPatterns.getTitles();\n    },\n    spaces: function spaces($http, chrome, spacesEnabled) {\n      if (spacesEnabled) {\n        return new _lib.SpacesManager($http, chrome).getSpaces();\n      }\n      return [];\n    }\n  },\n  controllerAs: 'editRole',\n  controller: function controller($injector, $scope, $http, enableSpaceAwarePrivileges) {\n    var $route = $injector.get('$route');\n    var Private = $injector.get('Private');\n\n    var role = $route.current.locals.role;\n\n    var xpackInfo = Private(_xpack_info.XPackInfoProvider);\n    var userProfile = Private(_user_profile.UserProfileProvider);\n    var allowDocumentLevelSecurity = xpackInfo.get('features.security.allowRoleDocumentLevelSecurity');\n    var allowFieldLevelSecurity = xpackInfo.get('features.security.allowRoleFieldLevelSecurity');\n    var rbacApplication = _chrome2.default.getInjected('rbacApplication');\n\n    if (role.elasticsearch.indices.length === 0) {\n      var emptyOption = {\n        names: [],\n        privileges: []\n      };\n\n      if (allowFieldLevelSecurity) {\n        emptyOption.field_security = {\n          grant: ['*']\n        };\n      }\n\n      if (allowDocumentLevelSecurity) {\n        emptyOption.query = '';\n      }\n\n      role.elasticsearch.indices.push(emptyOption);\n    }\n\n    var _$route$current$local = $route.current.locals,\n        users = _$route$current$local.users,\n        indexPatterns = _$route$current$local.indexPatterns,\n        spaces = _$route$current$local.spaces;\n\n\n    $scope.$$postDigest(function () {\n      var domNode = document.getElementById('editRoleReactRoot');\n\n      (0, _reactDom.render)(_react2.default.createElement(\n        _i18n.I18nContext,\n        null,\n        _react2.default.createElement(_components.EditRolePage, {\n          runAsUsers: users,\n          role: role,\n          kibanaAppPrivileges: _kibana_privilege.KibanaAppPrivileges,\n          indexPatterns: indexPatterns,\n          rbacEnabled: true,\n          rbacApplication: rbacApplication,\n          httpClient: $http,\n          allowDocumentLevelSecurity: allowDocumentLevelSecurity,\n          allowFieldLevelSecurity: allowFieldLevelSecurity,\n          spaces: spaces,\n          spacesEnabled: enableSpaceAwarePrivileges,\n          userProfile: userProfile\n        })\n      ), domNode);\n\n      // unmount react on controller destroy\n      $scope.$on('$destroy', function () {\n        (0, _reactDom.unmountComponentAtNode)(domNode);\n      });\n    });\n  }\n});",null]}