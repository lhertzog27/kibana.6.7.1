{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/public/components/workpad_export/index.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/public/components/workpad_export/index.js","mtime":1567631711928},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WorkpadExport = undefined;\n\nvar _reactRedux = require('react-redux');\n\nvar _recompose = require('recompose');\n\nvar _job_completion_notifications = require('../../../../reporting/public/lib/job_completion_notifications');\n\nvar _workpad = require('../../state/selectors/workpad');\n\nvar _app = require('../../state/selectors/app');\n\nvar _notify = require('../../lib/notify');\n\nvar _get_window = require('../../lib/get_window');\n\nvar _download_workpad = require('../../lib/download_workpad');\n\nvar _workpad_export = require('./workpad_export');\n\nvar _utils = require('./utils');\n\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\n/* eslint import/no-unresolved: 1 */\n// TODO: remove eslint rule when updating to use the linked kibana resolve package\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    workpad: (0, _workpad.getWorkpad)(state),\n    pageCount: (0, _workpad.getPages)(state).length,\n    enabled: (0, _app.getReportingBrowserType)(state) === 'chromium'\n  };\n};\n\nvar getAbsoluteUrl = function getAbsoluteUrl(path) {\n  var _getWindow = (0, _get_window.getWindow)(),\n      location = _getWindow.location;\n\n  if (!location) {\n    return path;\n  } // fallback for mocked window object\n\n  var protocol = location.protocol,\n      hostname = location.hostname,\n      port = location.port;\n\n  return protocol + '//' + hostname + ':' + port + path;\n};\n\nvar WorkpadExport = exports.WorkpadExport = (0, _recompose.compose)((0, _reactRedux.connect)(mapStateToProps), (0, _recompose.withProps)(function (_ref) {\n  var workpad = _ref.workpad,\n      pageCount = _ref.pageCount;\n  return {\n    getExportUrl: function getExportUrl(type) {\n      if (type === 'pdf') {\n        return getAbsoluteUrl((0, _utils.getPdfUrl)(workpad, { pageCount: pageCount }));\n      }\n\n      throw new Error('Unknown export type: ' + type);\n    },\n    onCopy: function onCopy(type) {\n      switch (type) {\n        case 'pdf':\n          return _notify.notify.info('The PDF generation URL was copied to your clipboard.');\n        case 'reportingConfig':\n          return _notify.notify.info('Copied reporting configuration to clipboard');\n      }\n      throw new Error('Unknown export type: ' + type);\n    },\n    onExport: function onExport(type) {\n      switch (type) {\n        case 'pdf':\n          return (0, _utils.createPdf)(workpad, { pageCount: pageCount }).then(function (_ref2) {\n            var data = _ref2.data;\n\n            _notify.notify.info('Exporting PDF. You can track the progress in Management.', {\n              title: 'PDF export of workpad \\'' + workpad.name + '\\''\n            });\n\n            // register the job so a completion notification shows up when it's ready\n            _job_completion_notifications.jobCompletionNotifications.add(data.job.id);\n          }).catch(function (err) {\n            _notify.notify.error(err, { title: 'Failed to create PDF for \\'' + workpad.name + '\\'' });\n          });\n        case 'json':\n          return (0, _download_workpad.downloadWorkpad)(workpad.id);\n        default:\n          throw new Error('Unknown export type: ' + type);\n      }\n    }\n  };\n}))(_workpad_export.WorkpadExport);",null]}