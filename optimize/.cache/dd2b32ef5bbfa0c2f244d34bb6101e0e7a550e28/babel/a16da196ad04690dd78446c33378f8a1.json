{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/canvas_plugin_src/functions/common/math.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/canvas_plugin_src/functions/common/math.js","mtime":1567631711898},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.math = undefined;\n\nvar _tinymath = require('tinymath');\n\nvar _pivot_object_array = require('../../../common/lib/pivot_object_array');\n\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nvar math = exports.math = function math() {\n  return {\n    name: 'math',\n    type: 'number',\n    help: 'Interpret a math expression, with a number or datatable as context. Datatable columns are available by their column name. ' + 'If you pass in a number it is available as \"value\" (without the quotes)',\n    context: {\n      types: ['number', 'datatable']\n    },\n    args: {\n      expression: {\n        aliases: ['_'],\n        types: ['string'],\n        help: 'An evaluated TinyMath expression. (See [TinyMath Functions](https://www.elastic.co/guide/en/kibana/current/canvas-tinymath-functions.html))'\n      }\n    },\n    fn: function fn(context, args) {\n      if (!args.expression || args.expression.trim() === '') {\n        throw new Error('Empty expression');\n      }\n\n      var isDatatable = context && context.type === 'datatable';\n      var mathContext = isDatatable ? (0, _pivot_object_array.pivotObjectArray)(context.rows, context.columns.map(function (col) {\n        return col.name;\n      })) : { value: context };\n      try {\n        var result = (0, _tinymath.evaluate)(args.expression, mathContext);\n        if (Array.isArray(result)) {\n          if (result.length === 1) {\n            return result[0];\n          }\n          throw new Error('Expressions must return a single number. Try wrapping your expression in mean() or sum()');\n        }\n        if (isNaN(result)) {\n          throw new Error('Failed to execute math expression. Check your column names');\n        }\n        return result;\n      } catch (e) {\n        if (context.rows.length === 0) {\n          throw new Error('Empty datatable');\n        } else {\n          throw e;\n        }\n      }\n    }\n  };\n};",null]}