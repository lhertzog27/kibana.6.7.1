{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/rollup/public/crud_app/store/actions/change_job_status.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/rollup/public/crud_app/store/actions/change_job_status.js","mtime":1567631712290},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.stopJobs = exports.startJobs = undefined;\n\nvar _i18n = require('@kbn/i18n');\n\nvar _services = require('../../services');\n\nvar _action_types = require('../action_types');\n\nvar _refresh_jobs = require('./refresh_jobs');\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            */\n\nvar startJobs = exports.startJobs = function startJobs(jobIds) {\n  return function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(dispatch) {\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              dispatch({\n                type: _action_types.UPDATE_JOB_START\n              });\n\n              _context.prev = 1;\n              _context.next = 4;\n              return (0, _services.createNoticeableDelay)((0, _services.startJobs)(jobIds));\n\n            case 4:\n              _context.next = 10;\n              break;\n\n            case 6:\n              _context.prev = 6;\n              _context.t0 = _context['catch'](1);\n\n              dispatch({\n                type: _action_types.UPDATE_JOB_FAILURE\n              });\n\n              return _context.abrupt('return', (0, _services.showApiError)(_context.t0, _i18n.i18n.translate('xpack.rollupJobs.startJobsAction.errorTitle', {\n                defaultMessage: 'Error starting rollup jobs'\n              })));\n\n            case 10:\n\n              dispatch({\n                type: _action_types.UPDATE_JOB_SUCCESS\n              });\n\n              dispatch((0, _refresh_jobs.refreshJobs)());\n\n            case 12:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, undefined, [[1, 6]]);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\n\nvar stopJobs = exports.stopJobs = function stopJobs(jobIds) {\n  return function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(dispatch) {\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              dispatch({\n                type: _action_types.UPDATE_JOB_START\n              });\n\n              _context2.prev = 1;\n              _context2.next = 4;\n              return (0, _services.createNoticeableDelay)((0, _services.stopJobs)(jobIds));\n\n            case 4:\n              _context2.next = 10;\n              break;\n\n            case 6:\n              _context2.prev = 6;\n              _context2.t0 = _context2['catch'](1);\n\n              dispatch({\n                type: _action_types.UPDATE_JOB_FAILURE\n              });\n\n              return _context2.abrupt('return', (0, _services.showApiError)(_context2.t0, _i18n.i18n.translate('xpack.rollupJobs.stopJobsAction.errorTitle', {\n                defaultMessage: 'Error stopping rollup jobs'\n              })));\n\n            case 10:\n\n              dispatch({\n                type: _action_types.UPDATE_JOB_SUCCESS\n              });\n\n              dispatch((0, _refresh_jobs.refreshJobs)());\n\n            case 12:\n            case 'end':\n              return _context2.stop();\n          }\n        }\n      }, _callee2, undefined, [[1, 6]]);\n    }));\n\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n};",null]}