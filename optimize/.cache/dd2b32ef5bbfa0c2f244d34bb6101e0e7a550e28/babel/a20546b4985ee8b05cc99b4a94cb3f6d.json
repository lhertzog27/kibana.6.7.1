{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/canvas_plugin_src/functions/common/if.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/canvas_plugin_src/functions/common/if.js","mtime":1567631711898},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; }\n\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nvar ifFn = exports.ifFn = function ifFn() {\n  return {\n    name: 'if',\n    help: 'Perform conditional logic',\n    args: {\n      condition: {\n        types: ['boolean', 'null'],\n        aliases: ['_'],\n        help: 'A boolean true or false, usually returned by a subexpression. If this is not supplied then the input context will be used'\n      },\n      then: {\n        resolve: false,\n        help: 'The return value if true'\n      },\n      else: {\n        resolve: false,\n        help: 'The return value if false. If else is not specified, and the condition is false' + 'then the input context to the function will be returned'\n      }\n    },\n    fn: function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(context, args) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!args.condition) {\n                  _context.next = 8;\n                  break;\n                }\n\n                if (!(typeof args.then === 'undefined')) {\n                  _context.next = 3;\n                  break;\n                }\n\n                return _context.abrupt('return', context);\n\n              case 3:\n                _context.next = 5;\n                return args.then();\n\n              case 5:\n                return _context.abrupt('return', _context.sent);\n\n              case 8:\n                if (!(typeof args.else === 'undefined')) {\n                  _context.next = 10;\n                  break;\n                }\n\n                return _context.abrupt('return', context);\n\n              case 10:\n                _context.next = 12;\n                return args.else();\n\n              case 12:\n                return _context.abrupt('return', _context.sent);\n\n              case 13:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, undefined);\n      }));\n\n      function fn(_x, _x2) {\n        return _ref.apply(this, arguments);\n      }\n\n      return fn;\n    }()\n  };\n};",null]}