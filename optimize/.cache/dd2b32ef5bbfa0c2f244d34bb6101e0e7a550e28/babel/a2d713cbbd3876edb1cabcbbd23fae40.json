{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/packages/kbn-es-query/target/kuery/node_types/wildcard.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/packages/kbn-es-query/target/kuery/node_types/wildcard.js","mtime":1567666388267},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.wildcardSymbol = undefined;\nexports.buildNode = buildNode;\nexports.test = test;\nexports.toElasticsearchQuery = toElasticsearchQuery;\nexports.toQueryStringQuery = toQueryStringQuery;\nexports.hasLeadingWildcard = hasLeadingWildcard;\n\nvar _ast = require('../ast/ast');\n\nvar wildcardSymbol = exports.wildcardSymbol = '@kuery-wildcard@';\n\n// Copied from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nfunction escapeRegExp(string) {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n}\n\n// See https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-query-string-query.html#_reserved_characters\nfunction escapeQueryString(string) {\n  return string.replace(/[+-=&|><!(){}[\\]^\"~*?:\\\\/]/g, '\\\\$&'); // $& means the whole matched string\n}\n\nfunction buildNode(value) {\n  if (!value.includes(wildcardSymbol)) {\n    return (0, _ast.fromLiteralExpression)(value);\n  }\n\n  return {\n    type: 'wildcard',\n    value: value\n  };\n}\n\nfunction test(node, string) {\n  var value = node.value;\n\n  var regex = value.split(wildcardSymbol).map(escapeRegExp).join('[\\\\s\\\\S]*');\n  var regexp = new RegExp('^' + regex + '$');\n  return regexp.test(string);\n}\n\nfunction toElasticsearchQuery(node) {\n  var value = node.value;\n\n  return value.split(wildcardSymbol).join('*');\n}\n\nfunction toQueryStringQuery(node) {\n  var value = node.value;\n\n  return value.split(wildcardSymbol).map(escapeQueryString).join('*');\n}\n\nfunction hasLeadingWildcard(node) {\n  var value = node.value;\n  // A lone wildcard turns into an `exists` query, so we're only concerned with\n  // leading wildcards followed by additional characters.\n\n  return value.startsWith(wildcardSymbol) && value.replace(wildcardSymbol, '').length > 0;\n}",null]}