{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/logstash/public/services/pipelines/pipelines_service.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/logstash/public/services/pipelines/pipelines_service.js","mtime":1567631712009},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PipelinesService = undefined;\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\nopyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\nor more contributor license agreements. Licensed under the Elastic License;\nyou may not use this file except in compliance with the Elastic License.\nn\nvar _chrome = require('ui/chrome');\n\nvar _chrome2 = _interopRequireDefault(_chrome);\n\nvar _constants = require('../../../common/constants');\n\nvar _pipeline_list_item = require('plugins/logstash/models/pipeline_list_item');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar RECENTLY_DELETED_PIPELINE_IDS_STORAGE_KEY = 'xpack.logstash.recentlyDeletedPipelines';\n\nvar PipelinesService = exports.PipelinesService = function () {\n  function PipelinesService($http, $window, Promise, monitoringService) {\n    _classCallCheck(this, PipelinesService);\n\n    this.$http = $http;\n    this.$window = $window;\n    this.Promise = Promise;\n    this.monitoringService = monitoringService;\n    this.basePath = _chrome2.default.addBasePath(_constants.ROUTES.API_ROOT);\n  }\n\n  _createClass(PipelinesService, [{\n    key: 'getPipelineList',\n    value: function getPipelineList() {\n      var _this = this;\n\n      return this.Promise.all([this.getManagementPipelineList(), this.getMonitoringPipelineList()]).then(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            managementPipelines = _ref2[0],\n            monitoringPipelines = _ref2[1];\n\n        var now = Date.now();\n\n        // Monitoring will report centrally-managed pipelines as well, including recently-deleted centrally-managed ones.\n        // If there's a recently-deleted pipeline we're keeping track of BUT monitoring doesn't report it, that means\n        // it's not running in Logstash any more. So we can stop tracking it as a recently-deleted pipeline.\n        var monitoringPipelineIds = monitoringPipelines.map(function (pipeline) {\n          return pipeline.id;\n        });\n        _this.getRecentlyDeleted().forEach(function (recentlyDeletedPipeline) {\n          // We don't want to stop tracking the recently-deleted pipeline until Monitoring has had some\n          // time to report on it. Otherwise, if we stop tracking first, *then* Monitoring reports it, we'll\n          // still end up showing it in the list until Monitoring stops reporting it.\n          if (now - recentlyDeletedPipeline.deletedOn < _constants.MONITORING.ACTIVE_PIPELINE_RANGE_S * 1000) {\n            return;\n          }\n\n          // If Monitoring is still reporting the pipeline, don't stop tracking it yet\n          if (monitoringPipelineIds.includes(recentlyDeletedPipeline.id)) {\n            return;\n          }\n\n          _this.removeFromRecentlyDeleted(recentlyDeletedPipeline.id);\n        });\n\n        // Merge centrally-managed pipelines with pipelines reported by monitoring. Take care to dedupe\n        // while merging because monitoring will (rightly) report centrally-managed pipelines as well,\n        // including recently-deleted ones!\n        var managementPipelineIds = managementPipelines.map(function (pipeline) {\n          return pipeline.id;\n        });\n        return managementPipelines.concat(monitoringPipelines.filter(function (monitoringPipeline) {\n          return !managementPipelineIds.includes(monitoringPipeline.id) && !_this.isRecentlyDeleted(monitoringPipeline.id);\n        }));\n      });\n    }\n  }, {\n    key: 'getManagementPipelineList',\n    value: function getManagementPipelineList() {\n      return this.$http.get(this.basePath + '/pipelines').then(function (response) {\n        return response.data.pipelines.map(function (pipeline) {\n          return _pipeline_list_item.PipelineListItem.fromUpstreamJSON(pipeline);\n        });\n      });\n    }\n  }, {\n    key: 'getMonitoringPipelineList',\n    value: function getMonitoringPipelineList() {\n      return this.monitoringService.getPipelineList();\n    }\n\n    /**\n     * Delete a collection of pipelines\n     *\n     * @param pipelineIds Array of pipeline IDs\n     * @return Promise { numSuccesses, numErrors }\n     */\n\n  }, {\n    key: 'deletePipelines',\n    value: function deletePipelines(pipelineIds) {\n      var _this2 = this;\n\n      var body = {\n        pipelineIds: pipelineIds\n      };\n      return this.$http.post(this.basePath + '/pipelines/delete', body).then(function (response) {\n        _this2.addToRecentlyDeleted.apply(_this2, _toConsumableArray(pipelineIds));\n        return response.data.results;\n      });\n    }\n  }, {\n    key: 'addToRecentlyDeleted',\n    value: function addToRecentlyDeleted() {\n      var recentlyDeletedPipelines = this.getRecentlyDeleted();\n      var recentlyDeletedPipelineIds = recentlyDeletedPipelines.map(function (pipeline) {\n        return pipeline.id;\n      });\n\n      for (var _len = arguments.length, pipelineIds = Array(_len), _key = 0; _key < _len; _key++) {\n        pipelineIds[_key] = arguments[_key];\n      }\n\n      pipelineIds.forEach(function (pipelineId) {\n        if (!recentlyDeletedPipelineIds.includes(pipelineId)) {\n          recentlyDeletedPipelines.push({\n            id: pipelineId,\n            deletedOn: Date.now()\n          });\n        }\n      });\n      this.setRecentlyDeleted(recentlyDeletedPipelines);\n    }\n  }, {\n    key: 'removeFromRecentlyDeleted',\n    value: function removeFromRecentlyDeleted() {\n      for (var _len2 = arguments.length, pipelineIds = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        pipelineIds[_key2] = arguments[_key2];\n      }\n\n      var recentlyDeletedPipelinesToKeep = this.getRecentlyDeleted().filter(function (recentlyDeletedPipeline) {\n        return !pipelineIds.includes(recentlyDeletedPipeline.id);\n      });\n      this.setRecentlyDeleted(recentlyDeletedPipelinesToKeep);\n    }\n  }, {\n    key: 'isRecentlyDeleted',\n    value: function isRecentlyDeleted(pipelineId) {\n      return this.getRecentlyDeleted().map(function (pipeline) {\n        return pipeline.id;\n      }).includes(pipelineId);\n    }\n  }, {\n    key: 'getRecentlyDeleted',\n    value: function getRecentlyDeleted() {\n      var recentlyDeletedPipelines = this.$window.localStorage.getItem(RECENTLY_DELETED_PIPELINE_IDS_STORAGE_KEY);\n      if (!recentlyDeletedPipelines) {\n        return [];\n      }\n\n      return JSON.parse(recentlyDeletedPipelines);\n    }\n  }, {\n    key: 'setRecentlyDeleted',\n    value: function setRecentlyDeleted(recentlyDeletedPipelineIds) {\n      this.$window.localStorage.setItem(RECENTLY_DELETED_PIPELINE_IDS_STORAGE_KEY, JSON.stringify(recentlyDeletedPipelineIds));\n    }\n  }]);\n\n  return PipelinesService;\n}();",null]}