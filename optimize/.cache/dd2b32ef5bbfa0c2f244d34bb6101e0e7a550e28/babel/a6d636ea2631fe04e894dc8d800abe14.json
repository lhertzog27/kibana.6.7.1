{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/legacy/core_plugins/region_map/public/choropleth_layer.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/legacy/core_plugins/region_map/public/choropleth_layer.js","mtime":1567631711640},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _jquery = require('jquery');\n\nvar _jquery2 = _interopRequireDefault(_jquery);\n\nvar _leaflet = require('leaflet');\n\nvar _leaflet2 = _interopRequireDefault(_leaflet);\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _d = require('d3');\n\nvar _d2 = _interopRequireDefault(_d);\n\nvar _i18n = require('@kbn/i18n');\n\nvar _kibana_map_layer = require('ui/vis/map/kibana_map_layer');\n\nvar _truncated_colormaps = require('ui/vislib/components/color/truncated_colormaps');\n\nvar _modules = require('ui/modules');\n\nvar _topojsonClient = require('topojson-client');\n\nvar topojson = _interopRequireWildcard(_topojsonClient);\n\nvar _notify = require('ui/notify');\n\nvar _color_util = require('ui/vis/map/color_util');\n\nvar colorUtil = _interopRequireWildcard(_color_util);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Licensed to Elasticsearch B.V. under one or more contributor\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * license agreements. See the NOTICE file distributed with\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * this work for additional information regarding copyright\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * ownership. Elasticsearch B.V. licenses this file to you under\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * the Apache License, Version 2.0 (the \"License\"); you may\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * not use this file except in compliance with the License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * You may obtain a copy of the License at\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\nhttp://www.apache.org/licenses/LICENSE-2.0\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Unless required by applicable law or agreed to in writing,\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * software distributed under the License is distributed on an\nneither express or implied.  See the License for the\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * specific language governing permissions and limitations\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * under the License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\nvar EMPTY_STYLE = {\n  weight: 1,\n  opacity: 0.6,\n  color: 'rgb(200,200,200)',\n  fillOpacity: 0\n};\n\nvar emsServiceSettings = new Promise(function (resolve) {\n  _modules.uiModules.get('kibana').run(function ($injector) {\n    var serviceSttings = $injector.get('serviceSettings');\n    resolve(serviceSttings);\n  });\n});\n\nvar ChoroplethLayer = function (_KibanaMapLayer) {\n  _inherits(ChoroplethLayer, _KibanaMapLayer);\n\n  _createClass(ChoroplethLayer, null, [{\n    key: '_doInnerJoin',\n    value: function _doInnerJoin(sortedMetrics, sortedGeojsonFeatures, joinField) {\n      var j = 0;\n      for (var i = 0; i < sortedGeojsonFeatures.length; i++) {\n        var property = sortedGeojsonFeatures[i].properties[joinField];\n        sortedGeojsonFeatures[i].__kbnJoinedMetric = null;\n        var position = sortedMetrics.length ? compareLexicographically(property, sortedMetrics[j].term) : -1;\n        if (position === -1) {//just need to cycle on\n        } else if (position === 0) {\n          sortedGeojsonFeatures[i].__kbnJoinedMetric = sortedMetrics[j];\n        } else if (position === 1) {\n          //needs to catch up\n          while (j < sortedMetrics.length) {\n            var newTerm = sortedMetrics[j].term;\n            var newPosition = compareLexicographically(newTerm, property);\n            if (newPosition === -1) {//not far enough\n            } else if (newPosition === 0) {\n              sortedGeojsonFeatures[i].__kbnJoinedMetric = sortedMetrics[j];\n              break;\n            } else if (newPosition === 1) {\n              //too far!\n              break;\n            }\n            if (j === sortedMetrics.length - 1) {\n              //always keep a reference to the last metric\n              break;\n            } else {\n              j++;\n            }\n          }\n        }\n      }\n    }\n  }]);\n\n  function ChoroplethLayer(name, attribution, format, showAllShapes, meta, layerConfig) {\n    var _this2 = this;\n\n    _classCallCheck(this, ChoroplethLayer);\n\n    var _this = _possibleConstructorReturn(this, (ChoroplethLayer.__proto__ || Object.getPrototypeOf(ChoroplethLayer)).call(this));\n\n    _this._metrics = null;\n    _this._joinField = null;\n    _this._colorRamp = _truncated_colormaps.truncatedColorMaps[Object.keys(_truncated_colormaps.truncatedColorMaps)[0]].value;\n    _this._lineWeight = 1;\n    _this._tooltipFormatter = function () {\n      return '';\n    };\n    _this._attribution = attribution;\n    _this._boundsOfData = null;\n    _this._showAllShapes = showAllShapes;\n    _this._layerName = name;\n    _this._layerConfig = layerConfig;\n\n    _this._leafletLayer = _leaflet2.default.geoJson(null, {\n      onEachFeature: function onEachFeature(feature, layer) {\n        layer.on('click', function () {\n          _this.emit('select', feature.properties[_this._joinField]);\n        });\n        var location = null;\n        layer.on({\n          mouseover: function mouseover() {\n            var tooltipContents = _this._tooltipFormatter(feature);\n            if (!location) {\n              var leafletGeojson = _leaflet2.default.geoJson(feature);\n              location = leafletGeojson.getBounds().getCenter();\n            }\n            _this.emit('showTooltip', {\n              content: tooltipContents,\n              position: location\n            });\n          },\n          mouseout: function mouseout() {\n            _this.emit('hideTooltip');\n          }\n        });\n      },\n      style: _this._makeEmptyStyleFunction()\n    });\n\n    _this._loaded = false;\n    _this._error = false;\n    _this._isJoinValid = false;\n    _this._whenDataLoaded = new Promise(function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(resolve) {\n        var data, featureCollection, formatType, features, errorMessage;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return _this._makeJsonAjaxCall();\n\n              case 3:\n                data = _context.sent;\n                featureCollection = void 0;\n                formatType = void 0;\n\n                if (typeof format === 'string') {\n                  formatType = format;\n                } else if (format && format.type) {\n                  formatType = format.type;\n                } else {\n                  formatType = 'geojson';\n                }\n\n                if (!(formatType === 'geojson')) {\n                  _context.next = 11;\n                  break;\n                }\n\n                featureCollection = data;\n                _context.next = 17;\n                break;\n\n              case 11:\n                if (!(formatType === 'topojson')) {\n                  _context.next = 16;\n                  break;\n                }\n\n                features = _lodash2.default.get(data, 'objects.' + meta.feature_collection_path);\n\n                featureCollection = topojson.feature(data, features); //conversion to geojson\n                _context.next = 17;\n                break;\n\n              case 16:\n                throw new Error(_i18n.i18n.translate('regionMap.choroplethLayer.unrecognizedFormatErrorMessage', {\n                  defaultMessage: 'Unrecognized format {formatType}',\n                  values: { formatType: formatType }\n                }));\n\n              case 17:\n                _this._sortedFeatures = featureCollection.features.slice();\n                _this._sortFeatures();\n\n                if (showAllShapes) {\n                  _this._leafletLayer.addData(featureCollection);\n                } else {\n                  //we need to delay adding the data until we have performed the join and know which features\n                  //should be displayed\n                }\n                _this._loaded = true;\n                _this._setStyle();\n                resolve();\n                _context.next = 33;\n                break;\n\n              case 25:\n                _context.prev = 25;\n                _context.t0 = _context['catch'](0);\n\n                _this._loaded = true;\n                _this._error = true;\n\n                errorMessage = void 0;\n\n                if (_context.t0.status === 404) {\n                  errorMessage = _i18n.i18n.translate('regionMap.choroplethLayer.downloadingVectorData404ErrorMessage', {\n                    defaultMessage: 'Server responding with \\'404\\' when attempting to fetch {name}. \\\nMake sure the file exists at that location.',\n                    values: { name: name }\n                  });\n                } else {\n                  errorMessage = _i18n.i18n.translate('regionMap.choroplethLayer.downloadingVectorDataErrorMessage', {\n                    defaultMessage: 'Cannot download {name} file. Please ensure the \\\nCORS configuration of the server permits requests from the Kibana application on this host.',\n                    values: { name: name }\n                  });\n                }\n\n                _notify.toastNotifications.addDanger({\n                  title: _i18n.i18n.translate('regionMap.choroplethLayer.downloadingVectorDataErrorMessageTitle', {\n                    defaultMessage: 'Error downloading vector data'\n                  }),\n                  text: errorMessage\n                });\n\n                resolve();\n\n              case 33:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, _this2, [[0, 25]]);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n\n    return _this;\n  }\n\n  //This method is stubbed in the tests to avoid network request during unit tests.\n\n\n  _createClass(ChoroplethLayer, [{\n    key: '_makeJsonAjaxCall',\n    value: function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        var serviceSettings;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return emsServiceSettings;\n\n              case 2:\n                serviceSettings = _context2.sent;\n                return _context2.abrupt('return', serviceSettings.getJsonForRegionLayer(this._layerConfig));\n\n              case 4:\n              case 'end':\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function _makeJsonAjaxCall() {\n        return _ref2.apply(this, arguments);\n      }\n\n      return _makeJsonAjaxCall;\n    }()\n  }, {\n    key: '_invalidateJoin',\n    value: function _invalidateJoin() {\n      this._isJoinValid = false;\n    }\n  }, {\n    key: '_doInnerJoin',\n    value: function _doInnerJoin() {\n      ChoroplethLayer._doInnerJoin(this._metrics, this._sortedFeatures, this._joinField);\n      this._isJoinValid = true;\n    }\n  }, {\n    key: '_setStyle',\n    value: function _setStyle() {\n      if (this._error || !this._loaded || !this._metrics || !this._joinField) {\n        return;\n      }\n\n      if (!this._isJoinValid) {\n        this._doInnerJoin();\n        if (!this._showAllShapes) {\n          var featureCollection = {\n            type: 'FeatureCollection',\n            features: this._sortedFeatures.filter(function (feature) {\n              return feature.__kbnJoinedMetric;\n            })\n          };\n          this._leafletLayer.addData(featureCollection);\n        }\n      }\n\n      var styler = this._makeChoroplethStyler();\n      this._leafletLayer.setStyle(styler.leafletStyleFunction);\n\n      if (this._metrics && this._metrics.length > 0) {\n        var _getMinMax = getMinMax(this._metrics),\n            min = _getMinMax.min,\n            max = _getMinMax.max;\n\n        this._legendColors = colorUtil.getLegendColors(this._colorRamp);\n        var quantizeDomain = min !== max ? [min, max] : _d2.default.scale.quantize().domain();\n        this._legendQuantizer = _d2.default.scale.quantize().domain(quantizeDomain).range(this._legendColors);\n      }\n      this._boundsOfData = styler.getLeafletBounds();\n      this.emit('styleChanged', {\n        mismatches: styler.getMismatches()\n      });\n    }\n  }, {\n    key: 'getUrl',\n    value: function getUrl() {\n      return this._layerName;\n    }\n  }, {\n    key: 'setTooltipFormatter',\n    value: function setTooltipFormatter(tooltipFormatter, metricsAgg, fieldName) {\n      var _this3 = this;\n\n      this._tooltipFormatter = function (geojsonFeature) {\n        if (!_this3._metrics) {\n          return '';\n        }\n        var match = _this3._metrics.find(function (bucket) {\n          return compareLexicographically(bucket.term, geojsonFeature.properties[_this3._joinField]) === 0;\n        });\n        return tooltipFormatter(metricsAgg, match, fieldName);\n      };\n    }\n  }, {\n    key: 'setJoinField',\n    value: function setJoinField(joinfield) {\n      if (joinfield === this._joinField) {\n        return;\n      }\n      this._joinField = joinfield;\n      this._sortFeatures();\n      this._setStyle();\n    }\n  }, {\n    key: 'cloneChoroplethLayerForNewData',\n    value: function cloneChoroplethLayerForNewData(name, attribution, format, showAllData, meta, layerConfig) {\n      var clonedLayer = new ChoroplethLayer(name, attribution, format, showAllData, meta, layerConfig);\n      clonedLayer.setJoinField(this._joinField);\n      clonedLayer.setColorRamp(this._colorRamp);\n      clonedLayer.setLineWeight(this._lineWeight);\n      clonedLayer.setTooltipFormatter(this._tooltipFormatter);\n      if (this._metrics && this._metricsAgg) {\n        clonedLayer.setMetrics(this._metrics, this._metricsAgg);\n      }\n      return clonedLayer;\n    }\n  }, {\n    key: '_sortFeatures',\n    value: function _sortFeatures() {\n      var _this4 = this;\n\n      if (this._sortedFeatures && this._joinField) {\n        this._sortedFeatures.sort(function (a, b) {\n          var termA = a.properties[_this4._joinField];\n          var termB = b.properties[_this4._joinField];\n          return compareLexicographically(termA, termB);\n        });\n        this._invalidateJoin();\n      }\n    }\n  }, {\n    key: 'whenDataLoaded',\n    value: function whenDataLoaded() {\n      return this._whenDataLoaded;\n    }\n  }, {\n    key: 'setMetrics',\n    value: function setMetrics(metrics, metricsAgg) {\n      this._metrics = metrics.slice();\n\n      this._metricsAgg = metricsAgg;\n      this._valueFormatter = this._metricsAgg.fieldFormatter();\n\n      this._metrics.sort(function (a, b) {\n        return compareLexicographically(a.term, b.term);\n      });\n      this._invalidateJoin();\n      this._setStyle();\n    }\n  }, {\n    key: 'setColorRamp',\n    value: function setColorRamp(colorRamp) {\n      if (_lodash2.default.isEqual(colorRamp, this._colorRamp)) {\n        return;\n      }\n      this._colorRamp = colorRamp;\n      this._setStyle();\n    }\n  }, {\n    key: 'setLineWeight',\n    value: function setLineWeight(lineWeight) {\n      if (this._lineWeight === lineWeight) {\n        return;\n      }\n      this._lineWeight = lineWeight;\n      this._setStyle();\n    }\n  }, {\n    key: 'canReuseInstance',\n    value: function canReuseInstance(name, showAllShapes) {\n      return this._layerName === name && this._showAllShapes === showAllShapes;\n    }\n  }, {\n    key: 'canReuseInstanceForNewMetrics',\n    value: function canReuseInstanceForNewMetrics(name, showAllShapes, newMetrics) {\n      if (this._layerName !== name) {\n        return false;\n      }\n\n      if (showAllShapes) {\n        return this._showAllShapes === showAllShapes;\n      }\n\n      if (!this._metrics) {\n        return;\n      }\n\n      var currentKeys = Object.keys(this._metrics);\n      var newKeys = Object.keys(newMetrics);\n      return _lodash2.default.isEqual(currentKeys, newKeys);\n    }\n  }, {\n    key: 'getBounds',\n    value: function getBounds() {\n      var bounds = _get(ChoroplethLayer.prototype.__proto__ || Object.getPrototypeOf(ChoroplethLayer.prototype), 'getBounds', this).call(this);\n      return this._boundsOfData ? this._boundsOfData : bounds;\n    }\n  }, {\n    key: 'appendLegendContents',\n    value: function appendLegendContents(jqueryDiv) {\n      var _this5 = this;\n\n      if (!this._legendColors || !this._legendQuantizer || !this._metricsAgg) {\n        return;\n      }\n\n      var titleText = this._metricsAgg.makeLabel();\n      var $title = (0, _jquery2.default)('<div>').addClass('visMapLegend__title').text(titleText);\n      jqueryDiv.append($title);\n\n      this._legendColors.forEach(function (color) {\n\n        var labelText = _this5._legendQuantizer.invertExtent(color).map(_this5._valueFormatter).join(' – ');\n\n        var label = (0, _jquery2.default)('<div>');\n        var icon = (0, _jquery2.default)('<i>').css({\n          background: color,\n          'border-color': makeColorDarker(color)\n        });\n\n        var text = (0, _jquery2.default)('<span>').text(labelText);\n        label.append(icon);\n        label.append(text);\n\n        jqueryDiv.append(label);\n      });\n    }\n  }, {\n    key: '_makeEmptyStyleFunction',\n    value: function _makeEmptyStyleFunction() {\n\n      var emptyStyle = _lodash2.default.assign({}, EMPTY_STYLE, {\n        weight: this._lineWeight\n      });\n\n      return function () {\n        return emptyStyle;\n      };\n    }\n  }, {\n    key: '_makeChoroplethStyler',\n    value: function _makeChoroplethStyler() {\n      var _this6 = this;\n\n      var emptyStyle = this._makeEmptyStyleFunction();\n      if (this._metrics.length === 0) {\n        return {\n          leafletStyleFunction: function leafletStyleFunction() {\n            return emptyStyle();\n          },\n          getMismatches: function getMismatches() {\n            return [];\n          },\n          getLeafletBounds: function getLeafletBounds() {\n            return null;\n          }\n        };\n      }\n\n      var _getMinMax2 = getMinMax(this._metrics),\n          min = _getMinMax2.min,\n          max = _getMinMax2.max;\n\n      var boundsOfAllFeatures = new _leaflet2.default.LatLngBounds();\n      return {\n        leafletStyleFunction: function leafletStyleFunction(geojsonFeature) {\n          var match = geojsonFeature.__kbnJoinedMetric;\n          if (!match) {\n            return emptyStyle();\n          }\n          var boundsOfFeature = _leaflet2.default.geoJson(geojsonFeature).getBounds();\n          boundsOfAllFeatures.extend(boundsOfFeature);\n\n          return {\n            fillColor: getChoroplethColor(match.value, min, max, _this6._colorRamp),\n            weight: _this6._lineWeight,\n            opacity: 1,\n            color: 'white',\n            fillOpacity: 0.7\n          };\n        },\n        /**\n         * should not be called until getLeafletStyleFunction has been called\n         * @return {Array}\n         */\n        getMismatches: function getMismatches() {\n          var mismatches = _this6._metrics.slice();\n          _this6._sortedFeatures.forEach(function (feature) {\n            var index = mismatches.indexOf(feature.__kbnJoinedMetric);\n            if (index >= 0) {\n              mismatches.splice(index, 1);\n            }\n          });\n          return mismatches.map(function (b) {\n            return b.term;\n          });\n        },\n        getLeafletBounds: function getLeafletBounds() {\n          return boundsOfAllFeatures.isValid() ? boundsOfAllFeatures : null;\n        }\n      };\n    }\n  }]);\n\n  return ChoroplethLayer;\n}(_kibana_map_layer.KibanaMapLayer);\n\n//lexicographic compare\n\n\nexports.default = ChoroplethLayer;\nfunction compareLexicographically(termA, termB) {\n  termA = typeof termA === 'string' ? termA : termA.toString();\n  termB = typeof termB === 'string' ? termB : termB.toString();\n  return termA.localeCompare(termB);\n}\n\nfunction makeColorDarker(color) {\n  var amount = 1.3; //magic number, carry over from earlier\n  return _d2.default.hcl(color).darker(amount).toString();\n}\n\nfunction getMinMax(data) {\n  var min = data[0].value;\n  var max = data[0].value;\n  for (var i = 1; i < data.length; i += 1) {\n    min = Math.min(data[i].value, min);\n    max = Math.max(data[i].value, max);\n  }\n  return { min: min, max: max };\n}\n\nfunction getChoroplethColor(value, min, max, colorRamp) {\n  if (min === max) {\n    return colorUtil.getColor(colorRamp, colorRamp.length - 1);\n  }\n  var fraction = (value - min) / (max - min);\n  var index = Math.round(colorRamp.length * fraction) - 1;\n  var i = Math.max(Math.min(colorRamp.length - 1, index), 0);\n\n  return colorUtil.getColor(colorRamp, i);\n}\nmodule.exports = exports['default'];",null]}