{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/canvas_plugin_src/uis/arguments/image_upload/index.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/canvas_plugin_src/uis/arguments/image_upload/index.js","mtime":1567631711909},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.imageUpload = undefined;\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _eui = require('@elastic/eui');\n\nvar _lodash = require('lodash');\n\nvar _asset_picker = require('../../../../public/components/asset_picker');\n\nvar _elastic_outline = require('../../../lib/elastic_outline');\n\nvar _resolve_dataurl = require('../../../../common/lib/resolve_dataurl');\n\nvar _httpurl = require('../../../../common/lib/httpurl');\n\nvar _dataurl = require('../../../../common/lib/dataurl');\n\nvar _template_from_react_component = require('../../../../public/lib/template_from_react_component');\n\nvar _constants = require('../../../../common/lib/constants');\n\nvar _forms = require('./forms');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\nvar ImageUpload = function (_React$Component) {\n  _inherits(ImageUpload, _React$Component);\n\n  function ImageUpload(props) {\n    _classCallCheck(this, ImageUpload);\n\n    var _this = _possibleConstructorReturn(this, (ImageUpload.__proto__ || Object.getPrototypeOf(ImageUpload)).call(this, props));\n\n    _this.updateAST = function (assetId) {\n      _this.props.onValueChange({\n        type: 'expression',\n        chain: [{\n          type: 'function',\n          function: 'asset',\n          arguments: {\n            _: [assetId]\n          }\n        }]\n      });\n    };\n\n    _this.handleUpload = function (files) {\n      var onAssetAdd = _this.props.onAssetAdd;\n\n      var _files = _slicedToArray(files, 1),\n          file = _files[0];\n\n      var _get$split = (0, _lodash.get)(file, 'type', '').split('/'),\n          _get$split2 = _slicedToArray(_get$split, 2),\n          type = _get$split2[0],\n          subtype = _get$split2[1];\n\n      if (type === 'image' && _constants.VALID_IMAGE_TYPES.indexOf(subtype) >= 0) {\n        _this.setState({ loading: true }); // start loading indicator\n\n        (0, _dataurl.encode)(file).then(function (dataurl) {\n          return onAssetAdd('dataurl', dataurl);\n        }).then(function (assetId) {\n          _this.updateAST(assetId);\n\n          // this component can go away when onValueChange is called, check for _isMounted\n          _this._isMounted && _this.setState({ loading: false }); // set loading state back to false\n        });\n      }\n    };\n\n    _this.changeUrlType = function (optionId) {\n      _this.setState({ urlType: optionId });\n    };\n\n    _this.setSrcUrl = function () {\n      var srcUrl = _this.inputRefs.srcUrlText.value;\n\n      _this.setState({ url: srcUrl });\n\n      var onValueChange = _this.props.onValueChange;\n\n      onValueChange(srcUrl);\n    };\n\n    var url = props.resolvedArgValue || null;\n\n    var urlType = Object.keys(props.assets).length ? 'asset' : 'file';\n    // if not a valid base64 string, will show as missing asset icon\n    if ((0, _httpurl.isValidHttpUrl)(url)) {\n      urlType = 'link';\n    }\n\n    _this.inputRefs = {};\n\n    _this.state = {\n      loading: false,\n      url: url, // what to show in preview / paste url text input\n      urlType: urlType // what panel to show, fileupload or paste url\n    };\n    return _this;\n  }\n\n  _createClass(ImageUpload, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      // keep track of whether or not the component is mounted, to prevent rogue setState calls\n      this._isMounted = true;\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this._isMounted = false;\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var _state = this.state,\n          loading = _state.loading,\n          url = _state.url,\n          urlType = _state.urlType;\n\n      var assets = Object.values(this.props.assets);\n\n      var selectedAsset = {};\n\n      var urlTypeOptions = [{ id: 'file', label: 'Import' }, { id: 'link', label: 'Link' }];\n      if (assets.length) {\n        urlTypeOptions.unshift({ id: 'asset', label: 'Asset' });\n        selectedAsset = assets.find(function (_ref) {\n          var value = _ref.value;\n          return value === url;\n        }) || {};\n      }\n\n      var selectUrlType = _react2.default.createElement(_eui.EuiButtonGroup, {\n        buttonSize: 's',\n        options: urlTypeOptions,\n        idSelected: urlType,\n        onChange: this.changeUrlType,\n        isFullWidth: true\n      });\n\n      var forms = {\n        file: _react2.default.createElement(_forms.FileForm, { loading: loading, onChange: this.handleUpload }),\n        link: _react2.default.createElement(_forms.LinkForm, {\n          url: url,\n          inputRef: function inputRef(ref) {\n            return _this2.inputRefs.srcUrlText = ref;\n          },\n          onSubmit: this.setSrcUrl\n        }),\n        asset: _react2.default.createElement(_asset_picker.AssetPicker, {\n          assets: assets,\n          selected: selectedAsset.id,\n          onChange: function onChange(_ref2) {\n            var id = _ref2.id;\n            return _this2.updateAST(id);\n          }\n        })\n      };\n\n      return _react2.default.createElement(\n        'div',\n        { className: 'canvasSidebar__panel-noMinWidth', style: { position: 'relative' } },\n        selectUrlType,\n        _react2.default.createElement(_eui.EuiSpacer, { size: 's' }),\n        forms[urlType],\n        _react2.default.createElement(_eui.EuiSpacer, { size: 's' })\n      );\n    }\n  }]);\n\n  return ImageUpload;\n}(_react2.default.Component);\n\nImageUpload.propTypes = {\n  onAssetAdd: _propTypes2.default.func.isRequired,\n  onValueChange: _propTypes2.default.func.isRequired,\n  typeInstance: _propTypes2.default.object.isRequired,\n  resolvedArgValue: _propTypes2.default.string,\n  assets: _propTypes2.default.object.isRequired\n};\nvar imageUpload = exports.imageUpload = function imageUpload() {\n  return {\n    name: 'imageUpload',\n    displayName: 'Image upload',\n    help: 'Select or upload an image',\n    resolveArgValue: true,\n    template: (0, _template_from_react_component.templateFromReactComponent)(ImageUpload),\n    resolve: function resolve(_ref3) {\n      var args = _ref3.args;\n\n      return { dataurl: (0, _resolve_dataurl.resolveFromArgs)(args, _elastic_outline.elasticOutline) };\n    }\n  };\n};",null]}