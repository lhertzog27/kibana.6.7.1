{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/canvas_plugin_src/functions/common/axisConfig.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/canvas_plugin_src/functions/common/axisConfig.js","mtime":1567631711897},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.axisConfig = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /*\n                                                                                                                                                                                                                                                                   * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                   * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                   * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                   */\n\nvar _moment = require('moment');\n\nvar _moment2 = _interopRequireDefault(_moment);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar axisConfig = exports.axisConfig = function axisConfig() {\n  return {\n    name: 'axisConfig',\n    aliases: [],\n    type: 'axisConfig',\n    context: {\n      types: ['datatable']\n    },\n    help: 'Configure axis of a visualization',\n    args: {\n      show: {\n        types: ['boolean'],\n        help: 'Show the axis labels?',\n        default: true\n      },\n      position: {\n        types: ['string'],\n        help: 'Position of the axis labels - top, bottom, left, and right',\n        options: ['top', 'bottom', 'left', 'right'],\n        default: 'left'\n      },\n      min: {\n        types: ['number', 'date', 'string', 'null'],\n        help: 'Minimum value displayed in the axis. Must be a number or a date in ms or ISO8601 string'\n      },\n      max: {\n        types: ['number', 'date', 'string', 'null'],\n        help: 'Maximum value displayed in the axis. Must be a number or a date in ms or ISO8601 string'\n      },\n      tickSize: {\n        types: ['number', 'null'],\n        help: 'Increment size between each tick. Use for number axes only'\n      }\n    },\n    fn: function fn(context, args) {\n      var positions = ['top', 'bottom', 'left', 'right', ''];\n      if (!positions.includes(args.position)) {\n        throw new Error('Invalid position: \\'' + args.position + '\\'');\n      }\n\n      var min = typeof args.min === 'string' ? _moment2.default.utc(args.min).valueOf() : args.min;\n      var max = typeof args.max === 'string' ? _moment2.default.utc(args.max).valueOf() : args.max;\n\n      if (min != null && isNaN(min)) {\n        throw new Error('Invalid date string: \\'' + args.min + '\\'. \\'min\\' must be a number, date in ms, or ISO8601 date string');\n      }\n      if (max != null && isNaN(max)) {\n        throw new Error('Invalid date string: \\'' + args.max + '\\'. \\'max\\' must be a number, date in ms, or ISO8601 date string');\n      }\n\n      return _extends({\n        type: 'axisConfig'\n      }, args, {\n        min: min,\n        max: max\n      });\n    }\n  };\n};",null]}