{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/maps/public/components/map/mb/utils.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/maps/public/components/map/mb/utils.js","mtime":1567631712015},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createMbMapInstance = undefined;\n\nvar createMbMapInstance = exports.createMbMapInstance = function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(node, initialView) {\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt('return', new Promise(function (resolve) {\n              var options = {\n                attributionControl: false,\n                container: node,\n                style: {\n                  version: 8,\n                  sources: {},\n                  layers: []\n                }\n              };\n              if (initialView) {\n                options.zoom = initialView.zoom;\n                options.center = {\n                  lng: initialView.lon,\n                  lat: initialView.lat\n                };\n              }\n              var mbMap = new _mapboxGl2.default.Map(options);\n              mbMap.dragRotate.disable();\n              mbMap.touchZoomRotate.disableRotation();\n              mbMap.addControl(new _mapboxGl2.default.NavigationControl({ showCompass: false }), 'top-left');\n              mbMap.on('load', function () {\n                resolve(mbMap);\n              });\n            }));\n\n          case 1:\n          case 'end':\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n\n  return function createMbMapInstance(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexports.removeOrphanedSourcesAndLayers = removeOrphanedSourcesAndLayers;\nexports.syncLayerOrder = syncLayerOrder;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _mapboxGl = require('mapbox-gl');\n\nvar _mapboxGl2 = _interopRequireDefault(_mapboxGl);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            */\n\nfunction removeOrphanedSourcesAndLayers(mbMap, layerList) {\n  var layerIds = layerList.map(function (layer) {\n    return layer.getId();\n  });\n  var mbStyle = mbMap.getStyle();\n  var mbSourcesToRemove = [];\n  for (var sourceId in mbStyle.sources) {\n    if (layerIds.indexOf(sourceId) === -1) {\n      mbSourcesToRemove.push(sourceId);\n    }\n  }\n  var mbLayersToRemove = [];\n  mbStyle.layers.forEach(function (layer) {\n    if (mbSourcesToRemove.indexOf(layer.source) >= 0) {\n      mbLayersToRemove.push(layer.id);\n    }\n  });\n  mbLayersToRemove.forEach(function (layerId) {\n    mbMap.removeLayer(layerId);\n  });\n  mbSourcesToRemove.forEach(function (sourceId) {\n    mbMap.removeSource(sourceId);\n  });\n}\n\nfunction syncLayerOrder(mbMap, layerList) {\n  if (layerList && layerList.length) {\n    var mbLayers = mbMap.getStyle().layers.slice();\n    var currentLayerOrder = _lodash2.default.uniq( // Consolidate layers and remove suffix\n    mbLayers.map(function (_ref2) {\n      var id = _ref2.id;\n      return id.substring(0, id.lastIndexOf('_'));\n    }));\n    var newLayerOrder = layerList.map(function (l) {\n      return l.getId();\n    }).filter(function (layerId) {\n      return currentLayerOrder.includes(layerId);\n    });\n    var netPos = 0;\n    var netNeg = 0;\n    var movementArr = currentLayerOrder.reduce(function (accu, id, idx) {\n      var movement = newLayerOrder.findIndex(function (newOId) {\n        return newOId === id;\n      }) - idx;\n      movement > 0 ? netPos++ : movement < 0 && netNeg++;\n      accu.push({ id: id, movement: movement });\n      return accu;\n    }, []);\n    if (netPos === 0 && netNeg === 0) {\n      return;\n    }\n    var movedLayer = netPos >= netNeg && movementArr.find(function (l) {\n      return l.movement < 0;\n    }).id || netPos < netNeg && movementArr.find(function (l) {\n      return l.movement > 0;\n    }).id;\n    var nextLayerIdx = newLayerOrder.findIndex(function (layerId) {\n      return layerId === movedLayer;\n    }) + 1;\n    var nextLayerId = nextLayerIdx === newLayerOrder.length ? null : mbLayers.find(function (_ref3) {\n      var id = _ref3.id;\n      return id.startsWith(newLayerOrder[nextLayerIdx]);\n    }).id;\n\n    mbLayers.forEach(function (_ref4) {\n      var id = _ref4.id;\n\n      if (id.startsWith(movedLayer)) {\n        mbMap.moveLayer(id, nextLayerId);\n      }\n    });\n  }\n}",null]}