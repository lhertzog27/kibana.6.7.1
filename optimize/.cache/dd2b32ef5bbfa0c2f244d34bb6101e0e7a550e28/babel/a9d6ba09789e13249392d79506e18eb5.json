{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/jobs/jobs_list/components/multi_job_actions/group_selector/group_selector.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/jobs/jobs_list/components/multi_job_actions/group_selector/group_selector.js","mtime":1567631712051},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GroupSelector = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _class, _temp; /*\n                    * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                    * or more contributor license agreements. Licensed under the Elastic License;\n                    * you may not use this file except in compliance with the Elastic License.\n                    */\n\nvar _check_privilege = require('plugins/ml/privilege/check_privilege');\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _eui = require('@elastic/eui');\n\nvar _lodash = require('lodash');\n\nvar _ml_api_service = require('../../../../../services/ml_api_service');\n\nvar _group_list = require('./group_list');\n\nvar _new_group_input = require('./new_group_input');\n\nvar _messagebar_service = require('../../../../../components/messagebar/messagebar_service');\n\nvar _react3 = require('@kbn/i18n/react');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction createSelectedGroups(jobs, groups) {\n  var jobIds = jobs.map(function (j) {\n    return j.id;\n  });\n  var groupCounts = {};\n  jobs.forEach(function (j) {\n    j.groups.forEach(function (g) {\n      if (groupCounts[g] === undefined) {\n        groupCounts[g] = 0;\n      }\n      groupCounts[g]++;\n    });\n  });\n\n  var selectedGroups = groups.reduce(function (p, c) {\n    if (c.jobIds.some(function (j) {\n      return jobIds.includes(j);\n    })) {\n      p[c.id] = {\n        partial: groupCounts[c.id] !== jobIds.length\n      };\n    }\n    return p;\n  }, {});\n\n  return selectedGroups;\n}\n\nvar GroupSelector = exports.GroupSelector = (0, _react3.injectI18n)((_temp = _class = function (_Component) {\n  _inherits(GroupSelector, _Component);\n\n  function GroupSelector(props) {\n    _classCallCheck(this, GroupSelector);\n\n    var _this = _possibleConstructorReturn(this, (GroupSelector.__proto__ || Object.getPrototypeOf(GroupSelector)).call(this, props));\n\n    _this.togglePopover = function () {\n      if (_this.state.isPopoverOpen) {\n        _this.closePopover();\n      } else {\n        _ml_api_service.ml.jobs.groups().then(function (groups) {\n          var selectedGroups = createSelectedGroups(_this.props.jobs, groups);\n\n          _this.setState({\n            isPopoverOpen: true,\n            edited: false,\n            selectedGroups: selectedGroups,\n            groups: groups\n          });\n        }).catch(function (error) {\n          console.error(error);\n        });\n      }\n    };\n\n    _this.closePopover = function () {\n      _this.setState({\n        edited: false,\n        isPopoverOpen: false\n      });\n    };\n\n    _this.selectGroup = function (group) {\n      var newSelectedGroups = (0, _lodash.cloneDeep)(_this.state.selectedGroups);\n\n      if (newSelectedGroups[group.id] === undefined) {\n        newSelectedGroups[group.id] = {\n          partial: false\n        };\n      } else if (newSelectedGroups[group.id].partial === true) {\n        newSelectedGroups[group.id].partial = false;\n      } else {\n        delete newSelectedGroups[group.id];\n      }\n\n      _this.setState({\n        selectedGroups: newSelectedGroups,\n        edited: true\n      });\n    };\n\n    _this.applyChanges = function () {\n      var selectedGroups = _this.state.selectedGroups;\n      var jobs = _this.props.jobs;\n\n      var newJobs = jobs.map(function (j) {\n        return {\n          id: j.id,\n          oldGroups: j.groups,\n          newGroups: []\n        };\n      });\n\n      var _loop = function _loop(gId) {\n        if (selectedGroups.hasOwnProperty(gId)) {\n          var group = selectedGroups[gId];\n          newJobs.forEach(function (j) {\n            if (group.partial === false || group.partial === true && j.oldGroups.includes(gId)) {\n              j.newGroups.push(gId);\n            }\n          });\n        }\n      };\n\n      for (var gId in selectedGroups) {\n        _loop(gId);\n      }\n\n      var tempJobs = newJobs.map(function (j) {\n        return { job_id: j.id, groups: j.newGroups };\n      });\n      _ml_api_service.ml.jobs.updateGroups(tempJobs).then(function (resp) {\n        var success = true;\n        for (var jobId in resp) {\n          // check success of each job update\n          if (resp.hasOwnProperty(jobId)) {\n            if (resp[jobId].success === false) {\n              _messagebar_service.mlMessageBarService.notify.error(resp[jobId].error);\n              success = false;\n            }\n          }\n        }\n\n        if (success) {\n          // if all are successful refresh the job list\n          _this.refreshJobs();\n          _this.closePopover();\n        } else {\n          console.error(resp);\n        }\n      }).catch(function (error) {\n        _messagebar_service.mlMessageBarService.notify.error(error);\n        console.error(error);\n      });\n    };\n\n    _this.addNewGroup = function (id) {\n      var newGroup = {\n        id: id,\n        calendarIds: [],\n        jobIds: []\n      };\n\n      var groups = _this.state.groups;\n      if (groups.some(function (g) {\n        return g.id === newGroup.id;\n      }) === false) {\n        groups.push(newGroup);\n      }\n\n      _this.setState({\n        groups: groups\n      });\n    };\n\n    _this.state = {\n      isPopoverOpen: false,\n      groups: [],\n      selectedGroups: {},\n      edited: false\n    };\n\n    _this.refreshJobs = _this.props.refreshJobs;\n    _this.canUpdateJob = (0, _check_privilege.checkPermission)('canUpdateJob');\n    return _this;\n  }\n\n  _createClass(GroupSelector, [{\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var intl = this.props.intl;\n      var _state = this.state,\n          groups = _state.groups,\n          selectedGroups = _state.selectedGroups,\n          edited = _state.edited;\n\n      var button = _react2.default.createElement(\n        _eui.EuiToolTip,\n        {\n          position: 'bottom',\n          content: _react2.default.createElement(_react3.FormattedMessage, {\n            id: 'xpack.ml.jobsList.multiJobActions.groupSelector.editJobGroupsButtonTooltip',\n            defaultMessage: 'Edit job groups'\n          })\n        },\n        _react2.default.createElement(_eui.EuiButtonIcon, {\n          iconType: 'indexEdit',\n          'aria-label': intl.formatMessage({\n            id: 'xpack.ml.jobsList.multiJobActions.groupSelector.editJobGroupsButtonAriaLabel',\n            defaultMessage: 'Edit job groups'\n          }),\n          onClick: function onClick() {\n            return _this2.togglePopover();\n          },\n          disabled: this.canUpdateJob === false\n        })\n      );\n\n      return _react2.default.createElement(\n        _eui.EuiPopover,\n        {\n          id: 'trapFocus',\n          ownFocus: true,\n          button: button,\n          isOpen: this.state.isPopoverOpen,\n          closePopover: function closePopover() {\n            return _this2.closePopover();\n          }\n        },\n        _react2.default.createElement(\n          'div',\n          { className: 'group-selector' },\n          _react2.default.createElement(\n            _eui.EuiPopoverTitle,\n            null,\n            _react2.default.createElement(_react3.FormattedMessage, {\n              id: 'xpack.ml.jobsList.multiJobActions.groupSelector.applyGroupsToJobTitle',\n              defaultMessage: 'Apply groups to {jobsCount, plural, one {job} other {jobs}}',\n              values: { jobsCount: this.props.jobs.length }\n            })\n          ),\n          _react2.default.createElement(_group_list.GroupList, {\n            groups: groups,\n            selectedGroups: selectedGroups,\n            selectGroup: this.selectGroup\n          }),\n          _react2.default.createElement(_eui.EuiHorizontalRule, { margin: 'xs' }),\n          _react2.default.createElement(_eui.EuiSpacer, { size: 's' }),\n          _react2.default.createElement(_new_group_input.NewGroupInput, {\n            addNewGroup: this.addNewGroup,\n            allJobIds: this.props.allJobIds\n          }),\n          _react2.default.createElement(_eui.EuiHorizontalRule, { margin: 'm' }),\n          _react2.default.createElement(\n            'div',\n            null,\n            _react2.default.createElement(\n              _eui.EuiFlexGroup,\n              null,\n              _react2.default.createElement(\n                _eui.EuiFlexItem,\n                { grow: false },\n                _react2.default.createElement(\n                  _eui.EuiButton,\n                  {\n                    size: 's',\n                    onClick: this.applyChanges,\n                    isDisabled: edited === false\n                  },\n                  _react2.default.createElement(_react3.FormattedMessage, {\n                    id: 'xpack.ml.jobsList.multiJobActions.groupSelector.applyButtonLabel',\n                    defaultMessage: 'Apply'\n                  })\n                )\n              )\n            )\n          )\n        )\n      );\n    }\n  }], [{\n    key: 'getDerivedStateFromProps',\n    value: function getDerivedStateFromProps(props, state) {\n      if (state.edited === false) {\n        var selectedGroups = createSelectedGroups(props.jobs, state.groups);\n        return { selectedGroups: selectedGroups };\n      } else {\n        return {};\n      }\n    }\n  }]);\n\n  return GroupSelector;\n}(_react.Component), _class.propTypes = {\n  jobs: _propTypes2.default.array.isRequired,\n  allJobIds: _propTypes2.default.array.isRequired,\n  refreshJobs: _propTypes2.default.func.isRequired\n}, _temp));",null]}