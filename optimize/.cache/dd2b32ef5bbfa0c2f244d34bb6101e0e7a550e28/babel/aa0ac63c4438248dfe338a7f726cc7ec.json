{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/services/field_format_service.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/services/field_format_service.js","mtime":1567631712062},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.mlFieldFormatService = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\nopyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\nor more contributor license agreements. Licensed under the Elastic License;\nyou may not use this file except in compliance with the Elastic License.\nn\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _job_utils = require('../../common/util/job_utils');\n\nvar _index_utils = require('../util/index_utils');\n\nvar _job_service = require('../services/job_service');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// Service for accessing FieldFormat objects configured for a Kibana index pattern\n// for use in formatting the actual and typical values from anomalies.\nvar FieldFormatService = function () {\n  function FieldFormatService() {\n    _classCallCheck(this, FieldFormatService);\n\n    this.indexPatternIdsByJob = {};\n    this.formatsByJob = {};\n  }\n\n  // Populate the service with the FieldFormats for the list of jobs with the\n  // specified IDs. List of Kibana index patterns is passed, with a title\n  // attribute set in each pattern which will be compared to the index pattern\n  // configured in the datafeed of each job.\n  // Builds a map of Kibana FieldFormats (ui/field_formats/field_format.js)\n  // against detector index by job ID.\n\n\n  _createClass(FieldFormatService, [{\n    key: 'populateFormats',\n    value: function populateFormats(jobIds, indexPatterns) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        // Populate a map of index pattern IDs against job ID, by finding the ID of the index\n        // pattern with a title attribute which matches the index configured in the datafeed.\n        // If a Kibana index pattern has not been created\n        // for this index, then no custom field formatting will occur.\n        _lodash2.default.each(jobIds, function (jobId) {\n          var jobObj = _job_service.mlJobService.getJob(jobId);\n          var datafeedIndices = jobObj.datafeed_config.indices;\n          var indexPattern = _lodash2.default.find(indexPatterns, function (index) {\n            return _lodash2.default.find(datafeedIndices, function (datafeedIndex) {\n              return index.get('title') === datafeedIndex;\n            });\n          });\n\n          // Check if index pattern has been configured to match the index in datafeed.\n          if (indexPattern !== undefined) {\n            _this.indexPatternIdsByJob[jobId] = indexPattern.id;\n          }\n        });\n\n        var promises = jobIds.map(function (jobId) {\n          return Promise.all([_this.getFormatsForJob(jobId)]);\n        });\n\n        Promise.all(promises).then(function (fmtsByJobByDetector) {\n          _lodash2.default.each(fmtsByJobByDetector, function (formatsByDetector, index) {\n            _this.formatsByJob[jobIds[index]] = formatsByDetector[0];\n          });\n\n          resolve(_this.formatsByJob);\n        }).catch(function (err) {\n          console.log('fieldFormatService error populating formats:', err);\n          reject({ formats: {}, err: err });\n        });\n      });\n    }\n\n    // Return the FieldFormat to use for formatting values from\n    // the detector from the job with the specified ID.\n\n  }, {\n    key: 'getFieldFormat',\n    value: function getFieldFormat(jobId, detectorIndex) {\n      return _lodash2.default.get(this.formatsByJob, [jobId, detectorIndex]);\n    }\n\n    // Utility for returning the FieldFormat from a full populated Kibana index pattern object\n    // containing the list of fields by name with their formats.\n\n  }, {\n    key: 'getFieldFormatFromIndexPattern',\n    value: function getFieldFormatFromIndexPattern(fullIndexPattern, fieldName, esAggName) {\n      // Don't use the field formatter for distinct count detectors as\n      // e.g. distinct_count(clientip) should be formatted as a count, not as an IP address.\n      var fieldFormat = undefined;\n      if (esAggName !== 'cardinality') {\n        var indexPatternFields = _lodash2.default.get(fullIndexPattern, 'fields.byName', []);\n        fieldFormat = _lodash2.default.get(indexPatternFields, [fieldName, 'format']);\n      }\n\n      return fieldFormat;\n    }\n  }, {\n    key: 'getFormatsForJob',\n    value: function getFormatsForJob(jobId) {\n      var _this2 = this;\n\n      return new Promise(function (resolve, reject) {\n\n        var jobObj = _job_service.mlJobService.getJob(jobId);\n        var detectors = jobObj.analysis_config.detectors || [];\n        var formatsByDetector = {};\n\n        var indexPatternId = _this2.indexPatternIdsByJob[jobId];\n        if (indexPatternId !== undefined) {\n          // Load the full index pattern configuration to obtain the formats of each field.\n          (0, _index_utils.getIndexPatternById)(indexPatternId).then(function (indexPatternData) {\n            // Store the FieldFormat for each job by detector_index.\n            var fieldsByName = _lodash2.default.get(indexPatternData, 'fields.byName', []);\n            _lodash2.default.each(detectors, function (dtr) {\n              var esAgg = (0, _job_utils.mlFunctionToESAggregation)(dtr.function);\n              // distinct_count detectors should fall back to the default\n              // formatter as the values are just counts.\n              if (dtr.field_name !== undefined && esAgg !== 'cardinality') {\n                formatsByDetector[dtr.detector_index] = _lodash2.default.get(fieldsByName, [dtr.field_name, 'format']);\n              }\n            });\n\n            resolve(formatsByDetector);\n          }).catch(function (err) {\n            reject(err);\n          });\n        } else {\n          resolve(formatsByDetector);\n        }\n      });\n    }\n  }]);\n\n  return FieldFormatService;\n}();\n\nvar mlFieldFormatService = exports.mlFieldFormatService = new FieldFormatService();",null]}