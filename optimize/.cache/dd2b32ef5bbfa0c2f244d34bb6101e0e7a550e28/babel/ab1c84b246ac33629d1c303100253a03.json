{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/watcher/public/components/flot_chart/flot_chart.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/watcher/public/components/flot_chart/flot_chart.js","mtime":1567631712337},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _lodash = require('lodash');\n\nvar _modules = require('ui/modules');\n\nvar _flot_chart = require('./flot_chart.html');\n\nvar _flot_chart2 = _interopRequireDefault(_flot_chart);\n\nvar _jqueryFlot = require('jquery-flot');\n\nvar _jqueryFlot2 = _interopRequireDefault(_jqueryFlot);\n\nvar _constants = require('./constants');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } } /*\n                                                                                                                                                           * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                           * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                           * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                           */\n\n// webpackShim\n\n\nvar app = _modules.uiModules.get('xpack/watcher');\n\napp.directive('flotChart', function () {\n  return {\n    restrict: 'E',\n    replace: true,\n    template: _flot_chart2.default,\n    scope: {\n\n      // See https://github.com/flot/flot/blob/master/API.md#data-format\n      data: '=',\n\n      // See https://github.com/flot/flot/blob/master/API.md#plot-options\n      options: '=',\n\n      // Search for \"plothover\" in https://github.com/flot/flot/blob/master/API.md\n      onPlotHover: '='\n\n    },\n    controllerAs: 'flotChart',\n    bindToController: true,\n    link: function link($scope, element) {\n      $scope.flotChart.container = element;\n    },\n    controller: function FlotChartController($scope) {\n      var _this = this;\n\n      _classCallCheck(this, FlotChartController);\n\n      $scope.$watchMulti(['flotChart.data', 'flotChart.options'], function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            data = _ref2[0],\n            options = _ref2[1];\n\n        _this.plot = _jqueryFlot2.default.plot(_this.container, data, options);\n      });\n\n      $scope.$watch('flotChart.onPlotHover', function (onPlotHover) {\n        _this.container.unbind('plothover');\n\n        if ((0, _lodash.isFunction)(onPlotHover)) {\n          _this.container.bind('plothover', (0, _lodash.debounce)(function () {\n            for (var _len = arguments.length, params = Array(_len), _key = 0; _key < _len; _key++) {\n              params[_key] = arguments[_key];\n            }\n\n            // We use $scope.$apply to tell Angular to trigger a digest whenever\n            // the supplied event handler function is called\n            $scope.$apply(function () {\n              return onPlotHover.apply(undefined, params.concat([_this.plot]));\n            });\n          }, _constants.FLOT_EVENT_PLOT_HOVER_DEBOUNCE_MS));\n        }\n      });\n\n      $scope.$on('$destroy', function () {\n        _this.container.unbind('plothover');\n      });\n    }\n  };\n});",null]}