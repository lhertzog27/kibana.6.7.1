{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/canvas_plugin_src/functions/common/compare.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/canvas_plugin_src/functions/common/compare.js","mtime":1567631711897},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nvar compare = exports.compare = function compare() {\n  return {\n    name: 'compare',\n    help: 'Compare the input to something else to determine true or false. Usually used in combination with `{if}`. This only works with primitive types, such as number, string, and boolean.',\n    aliases: ['condition'],\n    example: 'math \"random()\" | compare gt this=0.5',\n    type: 'boolean',\n    context: {\n      types: ['null', 'string', 'number', 'boolean']\n    },\n    args: {\n      op: {\n        aliases: ['_'],\n        types: ['string'],\n        default: 'eq',\n        help: 'The operator to use in the comparison: ' + ' eq (equal), ne (not equal), lt (less than), gt (greater than), lte (less than equal), gte (greater than eq)',\n        options: ['eq', 'ne', 'lt', 'gt', 'lte', 'gte']\n      },\n      to: {\n        aliases: ['this', 'b'],\n        help: 'The value to compare the context to, usually returned by a subexpression'\n      }\n    },\n    fn: function fn(context, args) {\n      var a = context;\n      var b = args.to;\n      var op = args.op;\n      var typesMatch = (typeof a === 'undefined' ? 'undefined' : _typeof(a)) === (typeof b === 'undefined' ? 'undefined' : _typeof(b));\n\n      switch (op) {\n        case 'eq':\n          return a === b;\n        case 'ne':\n          return a !== b;\n        case 'lt':\n          if (typesMatch) {\n            return a < b;\n          }\n          return false;\n        case 'lte':\n          if (typesMatch) {\n            return a <= b;\n          }\n          return false;\n        case 'gt':\n          if (typesMatch) {\n            return a > b;\n          }\n          return false;\n        case 'gte':\n          if (typesMatch) {\n            return a >= b;\n          }\n          return false;\n        default:\n          throw new Error('Invalid compare operator: \\'' + op + '\\'. Use eq, ne, lt, gt, lte, or gte.');\n      }\n\n      return false;\n    }\n  };\n};",null]}