{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/jobs/new_job/advanced/detector_modal/detector_modal_controller.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/jobs/new_job/advanced/detector_modal/detector_modal_controller.js","mtime":1567631712053},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _angular = require('angular');\n\nvar _angular2 = _interopRequireDefault(_angular);\n\nvar _string_utils = require('plugins/ml/util/string_utils');\n\nvar _messagebar_service = require('plugins/ml/components/messagebar/messagebar_service');\n\nvar _modules = require('ui/modules');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _module = _modules.uiModules.get('apps/ml'); /*\n                                                  * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                  * or more contributor license agreements. Licensed under the Elastic License;\n                                                  * you may not use this file except in compliance with the Elastic License.\n                                                  */\n\n_module.controller('MlDetectorModal', function ($scope, $modalInstance, params, i18n) {\n  var msgs = _messagebar_service.mlMessageBarService;\n  msgs.clear();\n  $scope.title = i18n('xpack.ml.newJob.advanced.detectorModal.addNewDetectorTitle', {\n    defaultMessage: 'Add new detector'\n  });\n  $scope.detector = { 'function': '' };\n  $scope.saveLock = false;\n  $scope.editMode = false;\n  var index = -1;\n\n  $scope.updateButtonLabel = i18n('xpack.ml.newJob.advanced.detectorModal.updateButtonLabel', {\n    defaultMessage: 'Update'\n  });\n  $scope.addButtonLabel = i18n('xpack.ml.newJob.advanced.detectorModal.addButtonLabel', {\n    defaultMessage: 'Add'\n  });\n\n  $scope.functions = [{ id: 'count', uri: 'ml-count-functions.html#ml-count' }, { id: 'low_count', uri: 'ml-count-functions.html#ml-count' }, { id: 'high_count', uri: 'ml-count-functions.html#ml-count' }, { id: 'non_zero_count', uri: 'ml-count-functions.html#ml-nonzero-count' }, { id: 'low_non_zero_count', uri: 'ml-count-functions.html#ml-nonzero-count' }, { id: 'high_non_zero_count', uri: 'ml-count-functions.html#ml-nonzero-count' }, { id: 'distinct_count', uri: 'ml-count-functions.html#ml-distinct-count' }, { id: 'low_distinct_count', uri: 'ml-count-functions.html#ml-distinct-count' }, { id: 'high_distinct_count', uri: 'ml-count-functions.html#ml-distinct-count' }, { id: 'rare', uri: 'ml-rare-functions.html#ml-rare' }, { id: 'freq_rare', uri: 'ml-rare-functions.html#ml-freq-rare' }, { id: 'info_content', uri: 'ml-info-functions.html#ml-info-content' }, { id: 'low_info_content', uri: 'ml-info-functions.html#ml-info-content' }, { id: 'high_info_content', uri: 'ml-info-functions.html#ml-info-content' }, { id: 'metric', uri: 'ml-metric-functions.html#ml-metric-metric' }, { id: 'median', uri: 'ml-metric-functions.html#ml-metric-median' }, { id: 'low_median', uri: 'ml-metric-functions.html#ml-metric-median' }, { id: 'high_median', uri: 'ml-metric-functions.html#ml-metric-median' }, { id: 'mean', uri: 'ml-metric-functions.html#ml-metric-mean' }, { id: 'low_mean', uri: 'ml-metric-functions.html#ml-metric-mean' }, { id: 'high_mean', uri: 'ml-metric-functions.html#ml-metric-mean' }, { id: 'min', uri: 'ml-metric-functions.html#ml-metric-min' }, { id: 'max', uri: 'ml-metric-functions.html#ml-metric-max' }, { id: 'varp', uri: 'ml-metric-functions.html#ml-metric-varp' }, { id: 'low_varp', uri: 'ml-metric-functions.html#ml-metric-varp' }, { id: 'high_varp', uri: 'ml-metric-functions.html#ml-metric-varp' }, { id: 'sum', uri: 'ml-sum-functions.html#ml-sum' }, { id: 'low_sum', uri: 'ml-sum-functions.html#ml-sum' }, { id: 'high_sum', uri: 'ml-sum-functions.html#ml-sum' }, { id: 'non_null_sum', uri: 'ml-sum-functions.html#ml-nonnull-sum' }, { id: 'low_non_null_sum', uri: 'ml-sum-functions.html#ml-nonnull-sum' }, { id: 'high_non_null_sum', uri: 'ml-sum-functions.html#ml-nonnull-sum' }, { id: 'time_of_day', uri: 'ml-time-functions.html#ml-time-of-day' }, { id: 'time_of_week', uri: 'ml-time-functions.html#ml-time-of-week' }, { id: 'lat_long', uri: 'ml-geo-functions.html#ml-lat-long' }];\n\n  $scope.functionIds = {};\n  _lodash2.default.each($scope.functions, function (f) {\n    $scope.functionIds[f.id] = '';\n  });\n\n  $scope.fields = params.fields;\n\n  // fields list for by_field_name field only\n  $scope.fields_byFieldName = _angular2.default.copy($scope.fields);\n  // if data has been added to the categorizationFieldName,\n  // add the option mlcategory to the by_field_name datalist\n  if (params.catFieldNameSelected) {\n    $scope.fields_byFieldName.mlcategory = 'mlcategory';\n  }\n\n  var validate = params.validate;\n  var add = params.add;\n  if (params.detector) {\n    $scope.detector = params.detector;\n    index = params.index;\n    $scope.title = i18n('xpack.ml.newJob.advanced.detectorModal.editDetectorTitle', {\n      defaultMessage: 'Edit detector'\n    });\n    $scope.editMode = true;\n  }\n\n  $scope.detectorToString = _string_utils.detectorToString;\n\n  $scope.helpLink = {};\n\n  $scope.functionChange = function () {\n    var func = _lodash2.default.findWhere($scope.functions, { id: $scope.detector.function });\n    $scope.helpLink.label = i18n('xpack.ml.newJob.advanced.detectorModal.helpForAnalyticalFunctionsLabel', {\n      defaultMessage: 'Help for analytical functions'\n    });\n    $scope.helpLink.uri = 'ml-functions.html';\n\n    if (func) {\n      $scope.helpLink.uri = func.uri;\n      $scope.helpLink.label = i18n('xpack.ml.newJob.advanced.detectorModal.helpForAnalyticalFunctionLabel', {\n        defaultMessage: 'Help for {funcId}',\n        values: { funcId: func.id }\n      });\n    }\n  };\n\n  $scope.functionChange();\n\n  $scope.setDetectorProperty = function (value, field) {\n    if (value === '' || value === undefined) {\n      // remove the property from the detector JSON\n      delete $scope.detector[field];\n    } else {\n      $scope.detector[field] = value;\n    }\n\n    if (field === 'function') {\n      $scope.functionChange();\n    }\n  };\n\n  $scope.save = function () {\n    $scope.saveLock = true;\n    validate($scope.detector).then(function (resp) {\n      $scope.saveLock = false;\n      if (resp.success) {\n        if ($scope.detector.detector_description === '') {\n          // remove blank description so server generated one is used.\n          delete $scope.detector.detector_description;\n        }\n        add($scope.detector, index);\n        $modalInstance.close($scope.detector);\n        msgs.clear();\n      } else {\n        msgs.error(resp.message);\n      }\n    });\n  };\n\n  $scope.cancel = function () {\n    msgs.clear();\n    $modalInstance.close();\n  };\n});",null]}