{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/index_lifecycle_management/public/sections/policy_table/components/policy_table/add_policy_to_template_confirm_modal.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/index_lifecycle_management/public/sections/policy_table/components/policy_table/add_policy_to_template_confirm_modal.js","mtime":1567631711966},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AddPolicyToTemplateConfirmModal = exports.AddPolicyToTemplateConfirmModalUi = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _lodash = require('lodash');\n\nvar _i18n = require('@kbn/i18n');\n\nvar _react3 = require('@kbn/i18n/react');\n\nvar _learn_more_link = require('../../../components/learn_more_link');\n\nvar _eui = require('@elastic/eui');\n\nvar _notify = require('ui/notify');\n\nvar _api = require('../../../../services/api');\n\nvar _api_errors = require('../../../../services/api_errors');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\nvar AddPolicyToTemplateConfirmModalUi = exports.AddPolicyToTemplateConfirmModalUi = function (_Component) {\n  _inherits(AddPolicyToTemplateConfirmModalUi, _Component);\n\n  function AddPolicyToTemplateConfirmModalUi() {\n    var _ref,\n        _this2 = this;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, AddPolicyToTemplateConfirmModalUi);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = AddPolicyToTemplateConfirmModalUi.__proto__ || Object.getPrototypeOf(AddPolicyToTemplateConfirmModalUi)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n      templates: []\n    }, _this.addPolicyToTemplate = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n      var _this$props, intl, policy, callback, onCancel, _this$state, templateName, aliasName, policyName, message, title;\n\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _this$props = _this.props, intl = _this$props.intl, policy = _this$props.policy, callback = _this$props.callback, onCancel = _this$props.onCancel;\n              _this$state = _this.state, templateName = _this$state.templateName, aliasName = _this$state.aliasName;\n              policyName = policy.name;\n\n              if (templateName) {\n                _context.next = 6;\n                break;\n              }\n\n              _this.setState({ templateError: _i18n.i18n.translate('xpack.indexLifecycleMgmt.policyTable.addLifecyclePolicyToTemplateConfirmModal.noTemplateSelectedErrorMessage', { defaultMessage: 'You must select an index template.' }) });\n              return _context.abrupt('return');\n\n            case 6:\n              _context.prev = 6;\n              _context.next = 9;\n              return (0, _api.addLifecyclePolicyToTemplate)({\n                policyName: policyName,\n                templateName: templateName,\n                aliasName: aliasName\n              });\n\n            case 9:\n              message = intl.formatMessage({\n                id: 'xpack.indexLifecycleMgmt.policyTable.addLifecyclePolicyToTemplateConfirmModal.successMessage',\n                defaultMessage: 'Added policy {policyName} to index template {templateName}'\n              }, { policyName: policyName, templateName: templateName });\n\n              _notify.toastNotifications.addSuccess(message);\n              onCancel();\n              _context.next = 18;\n              break;\n\n            case 14:\n              _context.prev = 14;\n              _context.t0 = _context['catch'](6);\n              title = intl.formatMessage({\n                id: 'xpack.indexLifecycleMgmt.policyTable.addLifecyclePolicyToTemplateConfirmModal.errorMessage',\n                defaultMessage: 'Error adding policy \"{policyName}\" to index template {templateName}'\n              }, { policyName: policyName, templateName: templateName });\n\n              (0, _api_errors.showApiError)(_context.t0, title);\n\n            case 18:\n              if (callback) {\n                callback();\n              }\n\n            case 19:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, _this2, [[6, 14]]);\n    })), _this.renderAliasFormElement = function () {\n      var aliasName = _this.state.aliasName;\n      var policy = _this.props.policy;\n\n      var showAliasTextInput = policy && (0, _lodash.get)(policy, 'policy.phases.hot.actions.rollover');\n      if (!showAliasTextInput) {\n        return null;\n      }\n      return _react2.default.createElement(\n        _eui.EuiFormRow,\n        {\n          label: _react2.default.createElement(_react3.FormattedMessage, {\n            id: 'xpack.indexLifecycleMgmt.policyTable.addLifecyclePolicyToTemplateConfirmModal.rolloverAliasLabel',\n            defaultMessage: 'Alias for rollover index'\n          })\n        },\n        _react2.default.createElement(_eui.EuiFieldText, {\n          value: aliasName,\n          onChange: function onChange(e) {\n            _this.setState({ aliasName: e.target.value });\n          }\n        })\n      );\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(AddPolicyToTemplateConfirmModalUi, [{\n    key: 'componentDidMount',\n    value: function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        var templates;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return (0, _api.loadIndexTemplates)();\n\n              case 2:\n                templates = _context2.sent;\n\n                this.setState({ templates: templates });\n\n              case 4:\n              case 'end':\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function componentDidMount() {\n        return _ref3.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: 'renderTemplateHasPolicyWarning',\n    value: function renderTemplateHasPolicyWarning() {\n      var selectedTemplate = this.getSelectedTemplate();\n      var existingPolicyName = (0, _lodash.get)(selectedTemplate, 'settings.index.lifecycle.name');\n      if (!existingPolicyName) {\n        return;\n      }\n      return _react2.default.createElement(\n        _react.Fragment,\n        null,\n        _react2.default.createElement(\n          _eui.EuiCallOut,\n          {\n            style: { maxWidth: 400 },\n            title: _react2.default.createElement(_react3.FormattedMessage, {\n              id: 'xpack.indexLifecycleMgmt.policyTable.addLifecyclePolicyToTemplateConfirmModal.templateHasPolicyWarningTitle',\n              defaultMessage: 'Template already has policy'\n            }),\n            color: 'warning'\n          },\n          _react2.default.createElement(_react3.FormattedMessage, {\n            id: 'xpack.indexLifecycleMgmt.indexManagementTable.addLifecyclePolicyToTemplateConfirmModal.indexHasNoAliasesWarningMessage',\n            defaultMessage: 'This index template already has the policy {existingPolicyName} attached to it. Adding this policy will overwrite that configuration.',\n            values: {\n              existingPolicyName: existingPolicyName\n            }\n          })\n        ),\n        _react2.default.createElement(_eui.EuiSpacer, { size: 's' })\n      );\n    }\n  }, {\n    key: 'getSelectedTemplate',\n    value: function getSelectedTemplate() {\n      var _state = this.state,\n          templates = _state.templates,\n          templateName = _state.templateName;\n\n      return (0, _lodash.find)(templates, function (template) {\n        return template.name === templateName;\n      });\n    }\n  }, {\n    key: 'renderForm',\n    value: function renderForm() {\n      var _this3 = this;\n\n      var _state2 = this.state,\n          templates = _state2.templates,\n          templateName = _state2.templateName,\n          templateError = _state2.templateError;\n\n      var options = templates.map(function (_ref4) {\n        var name = _ref4.name;\n\n        return {\n          value: name,\n          text: name\n        };\n      });\n      options.unshift({\n        value: '',\n        text: _i18n.i18n.translate('xpack.indexLifecycleMgmt.policyTable.addLifecyclePolicyToTemplateConfirmModal.chooseTemplateMessage', {\n          defaultMessage: 'Select an index template'\n        })\n      });\n      return _react2.default.createElement(\n        _eui.EuiForm,\n        null,\n        this.renderTemplateHasPolicyWarning(),\n        _react2.default.createElement(\n          _eui.EuiFormRow,\n          {\n            isInvalid: !!templateError,\n            error: templateError,\n            label: _react2.default.createElement(_react3.FormattedMessage, {\n              id: 'xpack.indexLifecycleMgmt.policyTable.addLifecyclePolicyToTemplateConfirmModal.chooseTemplateLabel',\n              defaultMessage: 'Index template'\n            })\n          },\n          _react2.default.createElement(_eui.EuiSelect, {\n            options: options,\n            value: templateName,\n            onChange: function onChange(e) {\n              _this3.setState({ templateError: null, templateName: e.target.value });\n            }\n          })\n        ),\n        this.renderAliasFormElement()\n      );\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          intl = _props.intl,\n          policy = _props.policy,\n          onCancel = _props.onCancel;\n\n      var title = intl.formatMessage({\n        id: 'xpack.indexLifecycleMgmt.policyTable.addLifecyclePolicyToTemplateConfirmModal.title',\n        defaultMessage: 'Add policy \"{name}\" to index template'\n      }, { name: policy.name });\n      return _react2.default.createElement(\n        _eui.EuiOverlayMask,\n        null,\n        _react2.default.createElement(\n          _eui.EuiConfirmModal,\n          {\n            title: title,\n            onCancel: onCancel,\n            onConfirm: this.addPolicyToTemplate,\n            cancelButtonText: intl.formatMessage({\n              id: 'xpack.indexLifecycleMgmt.policyTable.addLifecyclePolicyToTemplateConfirmModal.cancelButton',\n              defaultMessage: 'Cancel'\n            }),\n            confirmButtonText: intl.formatMessage({\n              id: 'xpack.indexLifecycleMgmt.policyTable.addLifecyclePolicyToTemplateConfirmModal.confirmButton',\n              defaultMessage: 'Add policy'\n            }),\n            onClose: onCancel\n          },\n          _react2.default.createElement(\n            _eui.EuiText,\n            null,\n            _react2.default.createElement(\n              'p',\n              null,\n              _react2.default.createElement(_react3.FormattedMessage, {\n                id: 'xpack.indexLifecycleMgmt.policyTable.addLifecyclePolicyToTemplateConfirmModal.explanationText',\n                defaultMessage: 'This will apply the lifecycle policy to all indices which match the index template.'\n              }),\n              ' ',\n              _react2.default.createElement(_learn_more_link.LearnMoreLink, {\n                docPath: 'indices-templates.html',\n                text: _react2.default.createElement(_react3.FormattedMessage, {\n                  id: 'xpack.indexLifecycleMgmt.editPolicy.learnAboutIndexTemplatesLink',\n                  defaultMessage: 'Learn about index templates'\n                })\n              })\n            )\n          ),\n          _react2.default.createElement(_eui.EuiSpacer, { size: 'm' }),\n          this.renderForm()\n        )\n      );\n    }\n  }]);\n\n  return AddPolicyToTemplateConfirmModalUi;\n}(_react.Component);\n\nvar AddPolicyToTemplateConfirmModal = exports.AddPolicyToTemplateConfirmModal = (0, _react3.injectI18n)(AddPolicyToTemplateConfirmModalUi);",null]}