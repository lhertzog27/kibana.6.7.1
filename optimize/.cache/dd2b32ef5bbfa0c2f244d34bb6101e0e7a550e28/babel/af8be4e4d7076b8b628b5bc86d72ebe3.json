{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/index_lifecycle_management/public/store/reducers/nodes.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/index_lifecycle_management/public/store/reducers/nodes.js","mtime":1567631711967},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.nodes = undefined;\n\nvar _handleActions;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /*\n                                                                                                                                                                                                                                                                   * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                   * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                   * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                   */\n\nvar _reduxActions = require('redux-actions');\n\nvar _nodes = require('../actions/nodes');\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar defaultState = {\n  isLoading: false,\n  selectedNodeAttrs: '',\n  selectedPrimaryShardCount: 1,\n  selectedReplicaCount: 1,\n  nodes: undefined,\n  details: {}\n};\n\nvar nodes = exports.nodes = (0, _reduxActions.handleActions)((_handleActions = {}, _defineProperty(_handleActions, _nodes.fetchedNodes, function (state, _ref) {\n  var nodes = _ref.payload;\n\n  return _extends({}, state, {\n    isLoading: false,\n    nodes: nodes\n  });\n}), _defineProperty(_handleActions, _nodes.fetchedNodeDetails, function (state, _ref2) {\n  var payload = _ref2.payload;\n  var selectedNodeAttrs = payload.selectedNodeAttrs,\n      details = payload.details;\n\n  return _extends({}, state, {\n    details: _extends({}, state.details, _defineProperty({}, selectedNodeAttrs, details))\n  });\n}), _defineProperty(_handleActions, _nodes.setSelectedNodeAttrs, function (state, _ref3) {\n  var selectedNodeAttrs = _ref3.payload;\n\n  return _extends({}, state, {\n    selectedNodeAttrs: selectedNodeAttrs\n  });\n}), _defineProperty(_handleActions, _nodes.setSelectedPrimaryShardCount, function (state, _ref4) {\n  var payload = _ref4.payload;\n\n  var selectedPrimaryShardCount = parseInt(payload);\n  if (isNaN(selectedPrimaryShardCount)) {\n    selectedPrimaryShardCount = '';\n  }\n  return _extends({}, state, {\n    selectedPrimaryShardCount: selectedPrimaryShardCount\n  });\n}), _defineProperty(_handleActions, _nodes.setSelectedReplicaCount, function (state, _ref5) {\n  var payload = _ref5.payload;\n\n  var selectedReplicaCount = void 0;\n  if (payload != null) {\n    selectedReplicaCount = parseInt(payload);\n    if (isNaN(selectedReplicaCount)) {\n      selectedReplicaCount = '';\n    }\n  } else {\n    // default value for Elasticsearch\n    selectedReplicaCount = 1;\n  }\n\n  return _extends({}, state, {\n    selectedReplicaCount: selectedReplicaCount\n  });\n}), _handleActions), defaultState);",null]}