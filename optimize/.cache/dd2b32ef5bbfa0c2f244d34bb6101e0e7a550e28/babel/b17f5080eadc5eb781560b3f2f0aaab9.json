{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/logstash/public/components/pipeline_editor/pipeline_editor.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/logstash/public/components/pipeline_editor/pipeline_editor.js","mtime":1567631712006},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PipelineEditor = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _react3 = require('@kbn/i18n/react');\n\nrequire('brace/mode/plain_text');\n\nrequire('brace/theme/github');\n\nvar _lodash = require('lodash');\n\nvar _tooltips = require('../../../common/constants/tooltips');\n\nvar _eui = require('@elastic/eui');\n\nvar _confirm_delete_pipeline_modal = require('./confirm_delete_pipeline_modal');\n\nvar _flex_item_setting = require('./flex_item_setting');\n\nvar _form_label_with_icon_tip = require('./form_label_with_icon_tip');\n\nvar _constants = require('./constants');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\nvar PipelineEditorUi = function (_React$Component) {\n  _inherits(PipelineEditorUi, _React$Component);\n\n  function PipelineEditorUi(props) {\n    _classCallCheck(this, PipelineEditorUi);\n\n    var _this = _possibleConstructorReturn(this, (PipelineEditorUi.__proto__ || Object.getPrototypeOf(PipelineEditorUi)).call(this, props));\n\n    _initialiseProps.call(_this);\n\n    var _this$props = _this.props,\n        _this$props$pipeline = _this$props.pipeline,\n        id = _this$props$pipeline.id,\n        description = _this$props$pipeline.description,\n        pipeline = _this$props$pipeline.pipeline,\n        settings = _this$props$pipeline.settings,\n        username = _this$props.username;\n\n\n    var pipelineWorkersSet = typeof settings['pipeline.workers'] === 'number';\n    var pipelineWorkers = pipelineWorkersSet ? settings['pipeline.workers'] : 1;\n    _this.state = {\n      maxBytesNumber: settings['queue.max_bytes.number'],\n      maxBytesUnit: settings['queue.max_bytes.units'],\n      pipeline: {\n        id: id,\n        description: description,\n        pipeline: pipeline,\n        settings: {\n          'pipeline.batch.delay': settings['pipeline.batch.delay'],\n          'pipeline.batch.size': settings['pipeline.batch.size'],\n          'pipeline.workers': pipelineWorkers,\n          'queue.checkpoint.writes': settings['queue.checkpoint.writes'],\n          'queue.max_bytes': settings['queue.max_bytes.number'] + settings['queue.max_bytes.units'],\n          'queue.type': settings['queue.type']\n        },\n        username: username\n      },\n      pipelineIdErrors: [],\n      pipelineIdPattern: /^[A-Za-z\\_][A-Za-z0-9\\-\\_]*$/,\n      showConfirmDeleteModal: false,\n      showPipelineIdError: false\n    };\n    return _this;\n  }\n\n  _createClass(PipelineEditorUi, [{\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var intl = this.props.intl;\n\n\n      return _react2.default.createElement(\n        'div',\n        { 'data-test-subj': 'pipelineEdit pipelineEdit-' + this.state.pipeline.id },\n        _react2.default.createElement(\n          _eui.EuiPageContent,\n          {\n            style: {\n              width: 1100\n            },\n            verticalPosition: 'center',\n            horizontalPosition: 'center'\n          },\n          _react2.default.createElement(\n            _eui.EuiTitle,\n            { size: 'm' },\n            _react2.default.createElement(\n              'h2',\n              null,\n              this.getPipelineHeadingText()\n            )\n          ),\n          _react2.default.createElement(_eui.EuiSpacer, { size: 'm' }),\n          _react2.default.createElement(\n            _eui.EuiForm,\n            { isInvalid: this.state.showPipelineIdError, error: this.state.pipelineIdErrors },\n            this.props.isNewPipeline && _react2.default.createElement(\n              _eui.EuiFormRow,\n              {\n                fullWidth: true,\n                label: _react2.default.createElement(_react3.FormattedMessage, {\n                  id: 'xpack.logstash.pipelineEditor.pipelineIdFormRowLabel',\n                  defaultMessage: 'Pipeline ID'\n                })\n              },\n              _react2.default.createElement(_eui.EuiFieldText, {\n                fullWidth: true,\n                'data-test-subj': 'inputId',\n                isInvalid: this.state.showPipelineIdError,\n                name: 'pipelineId',\n                onBlur: this.onPipelineIdChange,\n                onChange: this.onPipelineIdChange,\n                value: this.state.pipeline.id || ''\n              })\n            ),\n            _react2.default.createElement(\n              _eui.EuiFormRow,\n              {\n                fullWidth: true,\n                label: _react2.default.createElement(_react3.FormattedMessage, {\n                  id: 'xpack.logstash.pipelineEditor.descriptionFormRowLabel',\n                  defaultMessage: 'Description'\n                })\n              },\n              _react2.default.createElement(_eui.EuiFieldText, {\n                'data-test-subj': 'inputDescription',\n                fullWidth: true,\n                name: 'pipelineDescription',\n                onChange: this.onPipelineDescriptionChange,\n                value: this.state.pipeline.description || ''\n              })\n            ),\n            _react2.default.createElement(\n              _eui.EuiFormRow,\n              {\n                fullWidth: true,\n                label: _react2.default.createElement(_react3.FormattedMessage, {\n                  id: 'xpack.logstash.pipelineEditor.pipelineFormRowLabel',\n                  defaultMessage: 'Pipeline'\n                })\n              },\n              _react2.default.createElement(\n                'div',\n                { 'data-test-subj': 'acePipeline' },\n                _react2.default.createElement(_eui.EuiCodeEditor, {\n                  mode: 'plain_text',\n                  onChange: this.onPipelineChange,\n                  setOptions: {\n                    minLines: 25,\n                    maxLines: Infinity,\n                    readOnly: this.props.licenseService.isReadOnly\n                  },\n                  theme: 'github',\n                  value: this.state.pipeline.pipeline,\n                  width: '1017'\n                })\n              )\n            ),\n            _react2.default.createElement(\n              _eui.EuiFormRow,\n              {\n                label: _react2.default.createElement(_form_label_with_icon_tip.FormLabelWithIconTip, {\n                  formRowLabelText: intl.formatMessage({\n                    id: 'xpack.logstash.pipelineEditor.pipelineWorkersFormRowLabel',\n                    defaultMessage: 'Pipeline workers'\n                  }),\n                  formRowTooltipText: _tooltips.TOOLTIPS.settings['pipeline.workers']\n                })\n              },\n              _react2.default.createElement(_eui.EuiFieldNumber, {\n                'data-test-subj': 'inputWorkers',\n                onChange: function onChange(e) {\n                  return _this2.handleNumberChange('pipeline.workers', e.target.value);\n                },\n                value: this.state.pipeline.settings['pipeline.workers']\n              })\n            ),\n            _react2.default.createElement(\n              _eui.EuiFlexGroup,\n              null,\n              _react2.default.createElement(\n                _flex_item_setting.FlexItemSetting,\n                {\n                  formRowLabelText: intl.formatMessage({\n                    id: 'xpack.logstash.pipelineEditor.pipelineBatchSizeFormRowLabel',\n                    defaultMessage: 'Pipeline batch size'\n                  }),\n                  formRowTooltipText: _tooltips.TOOLTIPS.settings['pipeline.batch.size']\n                },\n                _react2.default.createElement(_eui.EuiFieldNumber, {\n                  'data-test-subj': 'inputBatchSize',\n                  onChange: function onChange(e) {\n                    return _this2.handleNumberChange('pipeline.batch.size', e.target.value);\n                  },\n                  value: this.state.pipeline.settings['pipeline.batch.size']\n                })\n              ),\n              _react2.default.createElement(\n                _flex_item_setting.FlexItemSetting,\n                {\n                  formRowLabelText: intl.formatMessage({\n                    id: 'xpack.logstash.pipelineEditor.pipelineBatchDelayFormRowLabel',\n                    defaultMessage: 'Pipeline batch delay'\n                  }),\n                  formRowTooltipText: _tooltips.TOOLTIPS.settings['pipeline.batch.delay']\n                },\n                _react2.default.createElement(_eui.EuiFieldNumber, {\n                  'data-test-subj': 'inputBatchDelay',\n                  onChange: function onChange(e) {\n                    return _this2.handleNumberChange('pipeline.batch.delay', e.target.value);\n                  },\n                  value: this.state.pipeline.settings['pipeline.batch.delay']\n                })\n              )\n            ),\n            _react2.default.createElement(\n              _eui.EuiFlexGroup,\n              null,\n              _react2.default.createElement(\n                _flex_item_setting.FlexItemSetting,\n                {\n                  formRowLabelText: intl.formatMessage({\n                    id: 'xpack.logstash.pipelineEditor.queueTypeFormRowLabel',\n                    defaultMessage: 'Queue type'\n                  }),\n                  formRowTooltipText: _tooltips.TOOLTIPS.settings['queue.type']\n                },\n                _react2.default.createElement(_eui.EuiSelect, {\n                  'data-test-subj': 'selectQueueType',\n                  onChange: function onChange(e) {\n                    return _this2.handleSettingChange('queue.type', e.target.value);\n                  },\n                  options: _constants.PIPELINE_EDITOR.QUEUE_TYPES,\n                  value: this.state.pipeline.settings['queue.type']\n                })\n              ),\n              _react2.default.createElement(\n                _flex_item_setting.FlexItemSetting,\n                {\n                  formRowLabelText: intl.formatMessage({\n                    id: 'xpack.logstash.pipelineEditor.queueMaxBytesFormRowLabel',\n                    defaultMessage: 'Queue max bytes'\n                  }),\n                  formRowTooltipText: _tooltips.TOOLTIPS.settings['queue.max_bytes']\n                },\n                _react2.default.createElement(_eui.EuiFieldNumber, {\n                  'data-test-subj': 'inputQueueMaxBytesNumber',\n                  onChange: function onChange(e) {\n                    return _this2.handleMaxByteNumberChange(e.target.value);\n                  },\n                  value: this.state.maxBytesNumber\n                })\n              ),\n              _react2.default.createElement(\n                _flex_item_setting.FlexItemSetting,\n                null,\n                _react2.default.createElement(_eui.EuiSelect, {\n                  'data-test-subj': 'selectQueueMaxBytesUnits',\n                  onChange: function onChange(e) {\n                    return _this2.handleMaxByteUnitChange(e.target.value);\n                  },\n                  options: _constants.PIPELINE_EDITOR.UNITS,\n                  value: this.state.maxBytesUnit\n                })\n              ),\n              _react2.default.createElement(\n                _flex_item_setting.FlexItemSetting,\n                {\n                  formRowLabelText: intl.formatMessage({\n                    id: 'xpack.logstash.pipelineEditor.queueCheckpointWritesFormRowLabel',\n                    defaultMessage: 'Queue checkpoint writes'\n                  }),\n                  formRowTooltipText: _tooltips.TOOLTIPS.settings['queue.checkpoint.writes']\n                },\n                _react2.default.createElement(_eui.EuiFieldNumber, {\n                  'data-test-subj': 'inputQueueCheckpointWrites',\n                  onChange: function onChange(e) {\n                    return _this2.handleNumberChange('queue.checkpoint.writes', e.target.value);\n                  },\n                  value: this.state.pipeline.settings['queue.checkpoint.writes']\n                })\n              )\n            )\n          ),\n          _react2.default.createElement(_eui.EuiSpacer, { size: 'l' }),\n          _react2.default.createElement(\n            _eui.EuiFlexGroup,\n            { justifyContent: 'flexStart' },\n            _react2.default.createElement(\n              _eui.EuiFlexItem,\n              { grow: false },\n              _react2.default.createElement(\n                _eui.EuiButton,\n                {\n                  'data-test-subj': 'btnSavePipeline',\n                  fill: true,\n                  isDisabled: this.isSaveDisabled(),\n                  onClick: this.onPipelineSave\n                },\n                _react2.default.createElement(_react3.FormattedMessage, {\n                  id: 'xpack.logstash.pipelineEditor.createAndDeployButtonLabel',\n                  defaultMessage: 'Create and deploy'\n                })\n              )\n            ),\n            _react2.default.createElement(\n              _eui.EuiFlexItem,\n              { grow: false },\n              _react2.default.createElement(\n                _eui.EuiButton,\n                { 'data-test-subj': 'btnCancel', onClick: this.onClose },\n                _react2.default.createElement(_react3.FormattedMessage, {\n                  id: 'xpack.logstash.pipelineEditor.cancelButtonLabel',\n                  defaultMessage: 'Cancel'\n                })\n              )\n            ),\n            !this.props.isNewPipeline && _react2.default.createElement(\n              _eui.EuiFlexItem,\n              { grow: false },\n              _react2.default.createElement(\n                _eui.EuiButtonEmpty,\n                {\n                  color: 'danger',\n                  'data-test-subj': 'btnDeletePipeline',\n                  onClick: this.showConfirmDeleteModal\n                },\n                _react2.default.createElement(_react3.FormattedMessage, {\n                  id: 'xpack.logstash.pipelineEditor.deletePipelineButtonLabel',\n                  defaultMessage: 'Delete pipeline'\n                })\n              )\n            )\n          )\n        ),\n        this.state.showConfirmDeleteModal && _react2.default.createElement(_confirm_delete_pipeline_modal.ConfirmDeletePipelineModal, {\n          id: this.props.pipeline.id,\n          cancelDeleteModal: this.hideConfirmDeleteModal,\n          confirmDeletePipeline: this.deletePipeline\n        })\n      );\n    }\n  }]);\n\n  return PipelineEditorUi;\n}(_react2.default.Component);\n\nvar _initialiseProps = function _initialiseProps() {\n  var _this3 = this;\n\n  this.componentDidMount = function () {\n    var _props = _this3.props,\n        _props$licenseService = _props.licenseService,\n        isReadOnly = _props$licenseService.isReadOnly,\n        message = _props$licenseService.message,\n        toastNotifications = _props.toastNotifications;\n\n    if (isReadOnly) {\n      toastNotifications.addWarning(message);\n    }\n  };\n\n  this.hideConfirmDeleteModal = function () {\n    _this3.setState({\n      showConfirmDeleteModal: false\n    });\n  };\n\n  this.showConfirmDeleteModal = function () {\n    _this3.setState({\n      showConfirmDeleteModal: true\n    });\n  };\n\n  this.onPipelineIdChange = function (_ref) {\n    var value = _ref.target.value;\n\n    var pipelineIdErrors = [];\n    if (!value) {\n      pipelineIdErrors.push(_constants.PIPELINE_EDITOR.ID_REQUIRED_ERR_MSG);\n    }\n    if (!_this3.state.pipelineIdPattern.test(value)) {\n      pipelineIdErrors.push(_constants.PIPELINE_EDITOR.ID_FORMAT_ERR_MSG);\n    }\n\n    _this3.setState({\n      pipelineIdErrors: pipelineIdErrors,\n      showPipelineIdError: !!pipelineIdErrors.length,\n      pipeline: _extends({}, _this3.state.pipeline, {\n        id: value\n      })\n    });\n  };\n\n  this.isSaveDisabled = function () {\n    return _this3.state.showPipelineIdError || (0, _lodash.isEmpty)(_this3.state.pipeline.id);\n  };\n\n  this.onClose = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _this3.props.close();\n\n          case 2:\n          case 'end':\n            return _context.stop();\n        }\n      }\n    }, _callee, _this3);\n  }));\n  this.open = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n    var id;\n    return regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            id = _this3.state.pipeline.id;\n\n            if (!id) {\n              _context2.next = 4;\n              break;\n            }\n\n            _context2.next = 4;\n            return _this3.props.open(id);\n\n          case 4:\n          case 'end':\n            return _context2.stop();\n        }\n      }\n    }, _callee2, _this3);\n  }));\n\n  this.onPipelineSave = function () {\n    var _props2 = _this3.props,\n        pipelineService = _props2.pipelineService,\n        toastNotifications = _props2.toastNotifications,\n        intl = _props2.intl;\n    var id = _this3.state.pipeline.id;\n\n    return pipelineService.savePipeline({\n      id: id,\n      upstreamJSON: _this3.state.pipeline\n    }).then(function () {\n      toastNotifications.addSuccess(intl.formatMessage({\n        id: 'xpack.logstash.pipelineEditor.pipelineSuccessfullySavedMessage',\n        defaultMessage: 'Saved \"{id}\"'\n      }, {\n        id: id\n      }));\n      _this3.onClose();\n    }).catch(_this3.notifyOnError);\n  };\n\n  this.onPipelineDescriptionChange = function (_ref4) {\n    var value = _ref4.target.value;\n\n    _this3.setState({\n      pipeline: _extends({}, _this3.state.pipeline, {\n        description: value\n      })\n    });\n  };\n\n  this.onPipelineChange = function (e) {\n    _this3.setState({\n      pipeline: _extends({}, _this3.state.pipeline, {\n        pipeline: e\n      })\n    });\n  };\n\n  this.handleNumberChange = function (settingName, value) {\n    var numberValue = parseInt(value, 10);\n    _this3.handleSettingChange(settingName, isNaN(numberValue) ? value : numberValue);\n  };\n\n  this.handleMaxByteNumberChange = function (value) {\n    _this3.setState({ maxBytesNumber: parseInt(value, 10) });\n    _this3.handleSettingChange('queue.max_bytes', value + _this3.state.maxBytesUnit);\n  };\n\n  this.handleMaxByteUnitChange = function (value) {\n    _this3.setState({ maxBytesUnit: value });\n    _this3.handleSettingChange('queue.max_bytes', _this3.state.maxBytesNumber + value);\n  };\n\n  this.handleSettingChange = function (settingName, value) {\n    var settings = _extends({}, _this3.state.pipeline.settings);\n    settings[settingName] = value;\n    _this3.setState({\n      pipeline: _extends({}, _this3.state.pipeline, {\n        settings: settings\n      })\n    });\n  };\n\n  this.notifyOnError = function (err) {\n    var _props3 = _this3.props,\n        notifier = _props3.notifier,\n        licenseService = _props3.licenseService;\n\n\n    return licenseService.checkValidity().then(function () {\n      return notifier.error(err);\n    });\n  };\n\n  this.deletePipeline = function () {\n    var _props4 = _this3.props,\n        id = _props4.pipeline.id,\n        pipelineService = _props4.pipelineService,\n        toastNotifications = _props4.toastNotifications,\n        intl = _props4.intl;\n\n\n    _this3.hideConfirmDeleteModal();\n\n    return pipelineService.deletePipeline(id).then(function () {\n      toastNotifications.addSuccess(intl.formatMessage({\n        id: 'xpack.logstash.pipelineEditor.pipelineSuccessfullyDeletedMessage',\n        defaultMessage: 'Deleted \"{id}\"'\n      }, {\n        id: id\n      }));\n      _this3.onClose();\n    }).catch(_this3.notifyOnError);\n  };\n\n  this.getPipelineHeadingText = function () {\n    var _props5 = _this3.props,\n        _props5$routeService$ = _props5.routeService.current.params,\n        clone = _props5$routeService$.clone,\n        id = _props5$routeService$.id,\n        isNewPipeline = _props5.isNewPipeline,\n        intl = _props5.intl;\n\n\n    if (!!clone && id) {\n      return intl.formatMessage({\n        id: 'xpack.logstash.pipelineEditor.clonePipelineTitle',\n        defaultMessage: 'Clone Pipeline \"{id}\"'\n      }, {\n        id: id\n      });\n    }\n    if (!isNewPipeline) {\n      return intl.formatMessage({\n        id: 'xpack.logstash.pipelineEditor.editPipelineTitle',\n        defaultMessage: 'Edit Pipeline \"{id}\"'\n      }, {\n        id: _this3.state.pipeline.id\n      });\n    }\n    return intl.formatMessage({\n      id: 'xpack.logstash.pipelineEditor.createPipelineTitle',\n      defaultMessage: 'Create Pipeline'\n    });\n  };\n};\n\nPipelineEditorUi.propTypes = {\n  close: _propTypes.PropTypes.func.isRequired,\n  isNewPipeline: _propTypes.PropTypes.bool.isRequired,\n  licenseService: _propTypes.PropTypes.shape({\n    checkValidity: _propTypes.PropTypes.func.isRequired,\n    isReadOnly: _propTypes.PropTypes.bool.isRequired,\n    message: _propTypes.PropTypes.string\n  }).isRequired,\n  notifier: _propTypes.PropTypes.shape({\n    error: _propTypes.PropTypes.func.isRequired\n  }).isRequired,\n  open: _propTypes.PropTypes.func.isRequired,\n  pipeline: _propTypes.PropTypes.shape({\n    id: _propTypes.PropTypes.string,\n    description: _propTypes.PropTypes.string,\n    pipeline: _propTypes.PropTypes.any,\n    settings: _propTypes.PropTypes.shape({\n      'pipeline.batch.delay': _propTypes.PropTypes.number.isRequired,\n      'pipeline.batch.size': _propTypes.PropTypes.number.isRequired,\n      'pipeline.workers': _propTypes.PropTypes.number,\n      'queue.checkpoint.writes': _propTypes.PropTypes.number.isRequired,\n      'queue.max_bytes': _propTypes.PropTypes.number,\n      'queue.type': _propTypes.PropTypes.string.isRequired\n    })\n  }).isRequired,\n  pipelineService: _propTypes.PropTypes.shape({\n    deletePipeline: _propTypes.PropTypes.func.isRequired,\n    savePipeline: _propTypes.PropTypes.func.isRequired\n  }).isRequired,\n  routeService: _propTypes.PropTypes.shape({\n    current: _propTypes.PropTypes.shape({\n      params: _propTypes.PropTypes.shape({\n        clone: _propTypes.PropTypes.oneOf([true, undefined]),\n        id: _propTypes.PropTypes.string\n      })\n    })\n  }).isRequired,\n  toastNotifications: _propTypes.PropTypes.shape({\n    addWarning: _propTypes.PropTypes.func.isRequired,\n    addSuccess: _propTypes.PropTypes.func.isRequired\n  }).isRequired,\n  username: _propTypes.PropTypes.string\n};\n\nvar PipelineEditor = exports.PipelineEditor = (0, _react3.injectI18n)(PipelineEditorUi);",null]}