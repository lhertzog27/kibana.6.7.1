{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/public/functions/timelion.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/public/functions/timelion.js","mtime":1567631711931},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.timelion = undefined;\n\nvar _chrome = require('ui/chrome');\n\nvar _chrome2 = _interopRequireDefault(_chrome);\n\nvar _lodash = require('lodash');\n\nvar _fetch = require('../../common/lib/fetch');\n\nvar _build_bool_array = require('../../server/lib/build_bool_array');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nvar timelion = exports.timelion = function timelion() {\n  return {\n    name: 'timelion',\n    context: {\n      types: ['filter']\n    },\n    args: {\n      query: {\n        types: ['string'],\n        aliases: ['_', 'q'],\n        help: 'A timelion query',\n        default: '\".es(*)\"'\n      },\n      interval: {\n        types: ['string'],\n        help: 'Bucket interval for the time series',\n        default: 'auto'\n      },\n      from: {\n        type: ['string'],\n        help: 'Elasticsearch date math string for the start of the time range',\n        default: 'now-1y'\n      },\n      to: {\n        type: ['string'],\n        help: 'Elasticsearch date math string for the end of the time range',\n        default: 'now'\n      },\n      timezone: {\n        type: ['string'],\n        help: 'Timezone for the time range',\n        default: 'UTC'\n      }\n    },\n    type: 'datatable',\n    help: 'Use timelion to extract one or more timeseries from many sources',\n    fn: function fn(context, args) {\n      // Timelion requires a time range. Use the time range from the timefilter element in the\n      // workpad, if it exists. Otherwise fall back on the function args.\n      var timeFilter = context.and.find(function (and) {\n        return and.type === 'time';\n      });\n      var range = timeFilter ? { from: timeFilter.from, to: timeFilter.to } : { from: args.from, to: args.to };\n\n      var body = {\n        extended: {\n          es: {\n            filter: {\n              bool: {\n                must: (0, _build_bool_array.buildBoolArray)(context.and)\n              }\n            }\n          }\n        },\n        sheet: [args.query],\n        time: {\n          from: range.from,\n          to: range.to,\n          interval: args.interval,\n          timezone: args.timezone\n        }\n      };\n\n      return (0, _fetch.fetch)(_chrome2.default.addBasePath('/api/timelion/run'), {\n        method: 'POST',\n        responseType: 'json',\n        data: body\n      }).then(function (resp) {\n        var seriesList = resp.data.sheet[0].list;\n\n        var rows = (0, _lodash.flatten)(seriesList.map(function (series) {\n          return series.data.map(function (row) {\n            return { '@timestamp': row[0], value: row[1], label: series.label };\n          });\n        }));\n\n        return {\n          type: 'datatable',\n          columns: [{ name: '@timestamp', type: 'date' }, { name: 'value', type: 'number' }, { name: 'label', type: 'string' }],\n          rows: rows\n        };\n      });\n    }\n  };\n};",null]}