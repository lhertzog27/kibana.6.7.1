{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/index_management/public/sections/index_list/components/index_actions_context_menu/index_actions_context_menu.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/index_management/public/sections/index_list/components/index_actions_context_menu/index_actions_context_menu.js","mtime":1567631711972},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.IndexActionsContextMenu = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _react3 = require('@kbn/i18n/react');\n\nvar _lodash = require('lodash');\n\nvar _eui = require('@elastic/eui');\n\nvar _flatten_panel_tree = require('../../../../lib/flatten_panel_tree');\n\nvar _constants = require('../../../../../common/constants');\n\nvar _index_management_extensions = require('../../../../index_management_extensions');\n\nvar _api = require('../../../../services/api');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\nvar IndexActionsContextMenuUi = function (_Component) {\n  _inherits(IndexActionsContextMenuUi, _Component);\n\n  function IndexActionsContextMenuUi(props) {\n    _classCallCheck(this, IndexActionsContextMenuUi);\n\n    var _this = _possibleConstructorReturn(this, (IndexActionsContextMenuUi.__proto__ || Object.getPrototypeOf(IndexActionsContextMenuUi)).call(this, props));\n\n    _this.closeConfirmModal = function () {\n      _this.setState({\n        renderConfirmModal: null\n      });\n      _this.props.resetSelection && _this.props.resetSelection();\n    };\n\n    _this.onButtonClick = function () {\n      _this.setState(function (prevState) {\n        return {\n          isPopoverOpen: !prevState.isPopoverOpen\n        };\n      });\n    };\n\n    _this.closePopoverAndExecute = function (func) {\n      _this.setState({\n        isPopoverOpen: false,\n        renderConfirmModal: false\n      });\n      func();\n      _this.props.resetSelection && _this.props.resetSelection();\n    };\n\n    _this.closePopover = function () {\n      _this.setState({\n        isPopoverOpen: false\n      });\n    };\n\n    _this.forcemergeSegmentsError = function () {\n      var forcemergeSegments = _this.state.forcemergeSegments;\n      var intl = _this.props.intl;\n\n      if (!forcemergeSegments || forcemergeSegments.match(/^([1-9][0-9]*)?$/)) {\n        return;\n      } else {\n        return intl.formatMessage({\n          id: 'xpack.idxMgmt.indexActionsMenu.segmentsNumberErrorMessage',\n          defaultMessage: 'The number of segments must be greater than zero.'\n        });\n      }\n    };\n\n    _this.renderForcemergeSegmentsModal = function () {\n      var _this$props = _this.props,\n          forcemergeIndices = _this$props.forcemergeIndices,\n          indexNames = _this$props.indexNames,\n          intl = _this$props.intl;\n\n      var helpText = intl.formatMessage({\n        id: 'xpack.idxMgmt.indexActionsMenu.forceMerge.forceMergeSegmentsHelpText',\n        defaultMessage: 'Merge the segments in an index until the number is reduced to this or fewer segments. The default is 1.'\n      });\n      var selectedIndexCount = indexNames.length;\n\n      return _react2.default.createElement(\n        _eui.EuiOverlayMask,\n        null,\n        _react2.default.createElement(\n          _eui.EuiConfirmModal,\n          {\n            title: intl.formatMessage({\n              id: 'xpack.idxMgmt.indexActionsMenu.forceMerge.confirmModal.modalTitle',\n              defaultMessage: 'Force merge'\n            }),\n            onCancel: _this.closeConfirmModal,\n            onConfirm: function onConfirm() {\n              if (!_this.forcemergeSegmentsError()) {\n                _this.closePopoverAndExecute(function () {\n                  forcemergeIndices(_this.state.forcemergeSegments);\n                  _this.setState({\n                    forcemergeSegments: null,\n                    showForcemergeSegmentsModal: null\n                  });\n                });\n              }\n            },\n            cancelButtonText: intl.formatMessage({\n              id: 'xpack.idxMgmt.indexActionsMenu.forceMerge.confirmModal.cancelButtonText',\n              defaultMessage: 'Cancel'\n            }),\n            confirmButtonText: intl.formatMessage({\n              id: 'xpack.idxMgmt.indexActionsMenu.forceMerge.confirmModal.confirmButtonText',\n              defaultMessage: 'Force merge'\n            })\n          },\n          _react2.default.createElement(\n            'div',\n            null,\n            _react2.default.createElement(\n              'p',\n              null,\n              _react2.default.createElement(_react3.FormattedMessage, {\n                id: 'xpack.idxMgmt.indexActionsMenu.forceMerge.forceMergeDescription',\n                defaultMessage: 'You are about to force merge {selectedIndexCount, plural, one {this index} other {these indices} }:',\n                values: { selectedIndexCount: selectedIndexCount }\n              })\n            ),\n            _react2.default.createElement(\n              'ul',\n              null,\n              indexNames.map(function (indexName) {\n                return _react2.default.createElement(\n                  'li',\n                  { key: indexName },\n                  indexName\n                );\n              })\n            ),\n            _react2.default.createElement(\n              _eui.EuiCallOut,\n              {\n                title: intl.formatMessage({\n                  id: 'xpack.idxMgmt.indexActionsMenu.forceMerge.proceedWithCautionCallOutTitle',\n                  defaultMessage: 'Proceed with caution!'\n                }),\n                color: 'warning',\n                iconType: 'help'\n              },\n              _react2.default.createElement(\n                'p',\n                null,\n                _react2.default.createElement(_react3.FormattedMessage, {\n                  id: 'xpack.idxMgmt.indexActionsMenu.forceMerge.forceMergeWarningDescription',\n                  defaultMessage: ' Force merging a large index or an index that is not read-only can potentially cause performance and stability issues in the cluster if it is not run properly (run against non-read-only indices) or run during peak hours. '\n                })\n              )\n            ),\n            _react2.default.createElement(_eui.EuiSpacer, { size: 'm' }),\n            _react2.default.createElement(\n              _eui.EuiForm,\n              {\n                isInvalid: _this.forcemergeSegmentsError(),\n                error: _this.forcemergeSegmentsError()\n              },\n              _react2.default.createElement(\n                _eui.EuiFormRow,\n                {\n                  label: intl.formatMessage({\n                    id: 'xpack.idxMgmt.indexActionsMenu.forceMerge.maximumNumberOfSegmentsFormRowLabel',\n                    defaultMessage: 'Maximum number of segments per shard'\n                  }),\n                  helpText: helpText\n                },\n                _react2.default.createElement(_eui.EuiFieldText, {\n                  onChange: function onChange(event) {\n                    _this.setState({ forcemergeSegments: event.target.value });\n                  },\n                  name: 'maxNumberSegments'\n                })\n              )\n            )\n          )\n        )\n      );\n    };\n\n    _this.renderConfirmDeleteModal = function () {\n      var _this$props2 = _this.props,\n          deleteIndices = _this$props2.deleteIndices,\n          indexNames = _this$props2.indexNames,\n          intl = _this$props2.intl;\n\n      var selectedIndexCount = indexNames.length;\n      return _react2.default.createElement(\n        _eui.EuiOverlayMask,\n        null,\n        _react2.default.createElement(\n          _eui.EuiConfirmModal,\n          {\n            title: intl.formatMessage({\n              id: 'xpack.idxMgmt.indexActionsMenu.deleteIndex.confirmModal.modalTitle',\n              defaultMessage: 'Confirm delete {selectedIndexCount, plural, one {index} other {indices} }'\n            }, { selectedIndexCount: selectedIndexCount }),\n            onCancel: _this.closeConfirmModal,\n            onConfirm: function onConfirm() {\n              return _this.closePopoverAndExecute(deleteIndices);\n            },\n            cancelButtonText: intl.formatMessage({\n              id: 'xpack.idxMgmt.indexActionsMenu.deleteIndex.confirmModal.cancelButtonText',\n              defaultMessage: 'Cancel'\n            }),\n            confirmButtonText: intl.formatMessage({\n              id: 'xpack.idxMgmt.indexActionsMenu.deleteIndex.confirmModal.confirmButtonText',\n              defaultMessage: 'Confirm'\n            })\n          },\n          _react2.default.createElement(\n            'div',\n            null,\n            _react2.default.createElement(\n              'p',\n              null,\n              _react2.default.createElement(_react3.FormattedMessage, {\n                id: 'xpack.idxMgmt.indexActionsMenu.deleteIndex.deleteDescription',\n                defaultMessage: 'You are about to delete {selectedIndexCount, plural, one {this index} other {these indices} }:',\n                values: { selectedIndexCount: selectedIndexCount }\n              })\n            ),\n            _react2.default.createElement(\n              'ul',\n              null,\n              indexNames.map(function (indexName) {\n                return _react2.default.createElement(\n                  'li',\n                  { key: indexName },\n                  indexName\n                );\n              })\n            ),\n            _react2.default.createElement(\n              _eui.EuiCallOut,\n              {\n                title: intl.formatMessage({\n                  id: 'xpack.idxMgmt.indexActionsMenu.deleteIndex.proceedWithCautionCallOutTitle',\n                  defaultMessage: 'Proceed with caution!'\n                }),\n                color: 'warning',\n                iconType: 'help'\n              },\n              _react2.default.createElement(\n                'p',\n                null,\n                _react2.default.createElement(_react3.FormattedMessage, {\n                  id: 'xpack.idxMgmt.indexActionsMenu.deleteIndex.deleteWarningDescription',\n                  defaultMessage: 'This operation cannot be undone. Make sure you have appropriate backups.'\n                })\n              )\n            )\n          )\n        )\n      );\n    };\n\n    _this.renderConfirmFreezeModal = function () {\n      var oneIndexSelected = _this.oneIndexSelected();\n      var entity = _this.getEntity(oneIndexSelected);\n      var _this$props3 = _this.props,\n          freezeIndices = _this$props3.freezeIndices,\n          indexNames = _this$props3.indexNames,\n          intl = _this$props3.intl;\n\n      return _react2.default.createElement(\n        _eui.EuiOverlayMask,\n        null,\n        _react2.default.createElement(\n          _eui.EuiConfirmModal,\n          {\n            title: intl.formatMessage({\n              id: 'xpack.idxMgmt.indexActionsMenu.freezeEntity.confirmModal.modalTitle',\n              defaultMessage: 'Confirm Freeze {entity}'\n            }, { entity: entity }),\n            onCancel: _this.closeConfirmModal,\n            onConfirm: function onConfirm() {\n              return _this.closePopoverAndExecute(freezeIndices);\n            },\n            cancelButtonText: intl.formatMessage({\n              id: 'xpack.idxMgmt.indexActionsMenu.freezeEntity.confirmModal.cancelButtonText',\n              defaultMessage: 'Cancel'\n            }),\n            confirmButtonText: intl.formatMessage({\n              id: 'xpack.idxMgmt.indexActionsMenu.freezeEntity.confirmModal.confirmButtonText',\n              defaultMessage: 'Freeze {entity}'\n            }, { entity: entity })\n          },\n          _react2.default.createElement(\n            'div',\n            null,\n            _react2.default.createElement(\n              'p',\n              null,\n              _react2.default.createElement(_react3.FormattedMessage, {\n                id: 'xpack.idxMgmt.indexActionsMenu.freezeEntity.freezeDescription',\n                defaultMessage: 'You are about to freeze  {oneIndexSelected, plural, one {this} other {these}}',\n                values: { oneIndexSelected: oneIndexSelected ? 1 : 0 }\n              }),\n              ' ',\n              entity,\n              ':'\n            ),\n            _react2.default.createElement(\n              'ul',\n              null,\n              indexNames.map(function (indexName) {\n                return _react2.default.createElement(\n                  'li',\n                  { key: indexName },\n                  indexName\n                );\n              })\n            ),\n            _react2.default.createElement(\n              _eui.EuiCallOut,\n              {\n                title: intl.formatMessage({\n                  id: 'xpack.idxMgmt.indexActionsMenu.freezeEntity.proceedWithCautionCallOutTitle',\n                  defaultMessage: 'Proceed with caution'\n                }),\n                color: 'warning',\n                iconType: 'help'\n              },\n              _react2.default.createElement(\n                'p',\n                null,\n                _react2.default.createElement(_react3.FormattedMessage, {\n                  id: 'xpack.idxMgmt.indexActionsMenu.freezeEntity.freezeEntityWarningDescription',\n                  defaultMessage: ' A frozen index has little overhead on the cluster and is blocked for write operations. You can search a frozen index, but expect queries to be slower. '\n                })\n              )\n            )\n          )\n        )\n      );\n    };\n\n    _this.oneIndexSelected = function () {\n      return _this.props.indexNames.length === 1;\n    };\n\n    _this.getEntity = function (oneIndexSelected) {\n      var intl = _this.props.intl;\n\n      return oneIndexSelected ? intl.formatMessage({\n        id: 'xpack.idxMgmt.indexActionsMenu.indexMessage',\n        defaultMessage: 'index'\n      }) : intl.formatMessage({\n        id: 'xpack.idxMgmt.indexActionsMenu.indicesMessage',\n        defaultMessage: 'indices'\n      });\n    };\n\n    _this.state = {\n      isPopoverOpen: false,\n      renderConfirmModal: null\n    };\n    return _this;\n  }\n\n  _createClass(IndexActionsContextMenuUi, [{\n    key: 'panels',\n    value: function panels() {\n      var _this2 = this;\n\n      var _props = this.props,\n          closeIndices = _props.closeIndices,\n          openIndices = _props.openIndices,\n          flushIndices = _props.flushIndices,\n          refreshIndices = _props.refreshIndices,\n          clearCacheIndices = _props.clearCacheIndices,\n          editIndex = _props.editIndex,\n          showMapping = _props.showMapping,\n          showStats = _props.showStats,\n          showSettings = _props.showSettings,\n          detailPanel = _props.detailPanel,\n          indexNames = _props.indexNames,\n          indexStatusByName = _props.indexStatusByName,\n          performExtensionAction = _props.performExtensionAction,\n          indices = _props.indices,\n          intl = _props.intl,\n          reloadIndices = _props.reloadIndices,\n          unfreezeIndices = _props.unfreezeIndices;\n\n      var allOpen = (0, _lodash.all)(indexNames, function (indexName) {\n        return indexStatusByName[indexName] === _constants.INDEX_OPEN;\n      });\n      var allFrozen = (0, _lodash.all)(indices, function (index) {\n        return index.isFrozen;\n      });\n      var allUnfrozen = (0, _lodash.all)(indices, function (index) {\n        return !index.isFrozen;\n      });\n      var selectedIndexCount = indexNames.length;\n      var items = [];\n      if (!detailPanel && selectedIndexCount === 1) {\n        items.push({\n          name: intl.formatMessage({\n            id: 'xpack.idxMgmt.indexActionsMenu.showIndexSettingsLabel',\n            defaultMessage: 'Show {selectedIndexCount, plural, one {index} other {indices} } settings'\n          }, { selectedIndexCount: selectedIndexCount }),\n          onClick: function onClick() {\n            _this2.closePopoverAndExecute(showSettings);\n          }\n        });\n        items.push({\n          name: intl.formatMessage({\n            id: 'xpack.idxMgmt.indexActionsMenu.showIndexMappingLabel',\n            defaultMessage: 'Show {selectedIndexCount, plural, one {index} other {indices} } mapping'\n          }, { selectedIndexCount: selectedIndexCount }),\n          onClick: function onClick() {\n            _this2.closePopoverAndExecute(showMapping);\n          }\n        });\n        if (allOpen) {\n          items.push({\n            name: intl.formatMessage({\n              id: 'xpack.idxMgmt.indexActionsMenu.showIndexStatsLabel',\n              defaultMessage: 'Show {selectedIndexCount, plural, one {index} other {indices} } stats'\n            }, { selectedIndexCount: selectedIndexCount }),\n            onClick: function onClick() {\n              _this2.closePopoverAndExecute(showStats);\n            }\n          });\n        }\n        items.push({\n          name: intl.formatMessage({\n            id: 'xpack.idxMgmt.indexActionsMenu.editIndexSettingsLabel',\n            defaultMessage: 'Edit {selectedIndexCount, plural, one {index} other {indices} } settings'\n          }, { selectedIndexCount: selectedIndexCount }),\n          onClick: function onClick() {\n            _this2.closePopoverAndExecute(editIndex);\n          }\n        });\n      }\n      if (allOpen) {\n        items.push({\n          name: intl.formatMessage({\n            id: 'xpack.idxMgmt.indexActionsMenu.closeIndexLabel',\n            defaultMessage: 'Close {selectedIndexCount, plural, one {index} other {indices} }'\n          }, { selectedIndexCount: selectedIndexCount }),\n          onClick: function onClick() {\n            _this2.closePopoverAndExecute(closeIndices);\n          }\n        });\n        items.push({\n          name: intl.formatMessage({\n            id: 'xpack.idxMgmt.indexActionsMenu.forceMergeIndexLabel',\n            defaultMessage: 'Force merge {selectedIndexCount, plural, one {index} other {indices} }'\n          }, { selectedIndexCount: selectedIndexCount }),\n          onClick: function onClick() {\n            _this2.closePopover();\n            _this2.setState({ renderConfirmModal: _this2.renderForcemergeSegmentsModal });\n          }\n        });\n        items.push({\n          name: intl.formatMessage({\n            id: 'xpack.idxMgmt.indexActionsMenu.refreshIndexLabel',\n            defaultMessage: 'Refresh {selectedIndexCount, plural, one {index} other {indices} }'\n          }, { selectedIndexCount: selectedIndexCount }),\n          onClick: function onClick() {\n            _this2.closePopoverAndExecute(refreshIndices);\n          }\n        });\n        items.push({\n          name: intl.formatMessage({\n            id: 'xpack.idxMgmt.indexActionsMenu.clearIndexCacheLabel',\n            defaultMessage: 'Clear {selectedIndexCount, plural, one {index} other {indices} } cache'\n          }, { selectedIndexCount: selectedIndexCount }),\n          onClick: function onClick() {\n            _this2.closePopoverAndExecute(clearCacheIndices);\n          }\n        });\n        items.push({\n          name: intl.formatMessage({\n            id: 'xpack.idxMgmt.indexActionsMenu.flushIndexLabel',\n            defaultMessage: 'Flush {selectedIndexCount, plural, one {index} other {indices} }'\n          }, { selectedIndexCount: selectedIndexCount }),\n          onClick: function onClick() {\n            _this2.closePopoverAndExecute(flushIndices);\n          }\n        });\n        if (allFrozen) {\n          items.push({\n            name: intl.formatMessage({\n              id: 'xpack.idxMgmt.indexActionsMenu.unfreezeIndexLabel',\n              defaultMessage: 'Unfreeze {selectedIndexCount, plural, one {index} other {indices} }'\n            }, { selectedIndexCount: selectedIndexCount }),\n            onClick: function onClick() {\n              _this2.closePopoverAndExecute(unfreezeIndices);\n            }\n          });\n        } else if (allUnfrozen) {\n          items.push({\n            name: intl.formatMessage({\n              id: 'xpack.idxMgmt.indexActionsMenu.freezeIndexLabel',\n              defaultMessage: 'Freeze {selectedIndexCount, plural, one {index} other {indices} }'\n            }, { selectedIndexCount: selectedIndexCount }),\n            onClick: function onClick() {\n              _this2.closePopover();\n              _this2.setState({ renderConfirmModal: _this2.renderConfirmFreezeModal });\n            }\n          });\n        }\n      } else {\n        items.push({\n          name: intl.formatMessage({\n            id: 'xpack.idxMgmt.indexActionsMenu.openIndexLabel',\n            defaultMessage: 'Open {selectedIndexCount, plural, one {index} other {indices} }'\n          }, { selectedIndexCount: selectedIndexCount }),\n          onClick: function onClick() {\n            _this2.closePopoverAndExecute(openIndices);\n          }\n        });\n      }\n      items.push({\n        name: intl.formatMessage({\n          id: 'xpack.idxMgmt.indexActionsMenu.deleteIndexLabel',\n          defaultMessage: 'Delete {selectedIndexCount, plural, one {index} other {indices} }'\n        }, { selectedIndexCount: selectedIndexCount }),\n        onClick: function onClick() {\n          _this2.closePopover();\n          _this2.setState({ renderConfirmModal: _this2.renderConfirmDeleteModal });\n        }\n      });\n      (0, _index_management_extensions.getActionExtensions)().forEach(function (actionExtension) {\n        var actionExtensionDefinition = actionExtension(indices, reloadIndices);\n        if (actionExtensionDefinition) {\n          var buttonLabel = actionExtensionDefinition.buttonLabel,\n              requestMethod = actionExtensionDefinition.requestMethod,\n              successMessage = actionExtensionDefinition.successMessage,\n              renderConfirmModal = actionExtensionDefinition.renderConfirmModal;\n\n          if (requestMethod) {\n            items.push({\n              name: buttonLabel,\n              onClick: function onClick() {\n                _this2.closePopoverAndExecute(_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n                  return regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          _context.next = 2;\n                          return performExtensionAction(requestMethod, successMessage);\n\n                        case 2:\n                        case 'end':\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee, _this2);\n                })));\n              }\n            });\n          } else {\n            items.push({\n              name: buttonLabel,\n              onClick: function onClick() {\n                _this2.closePopover();\n                _this2.setState({ renderConfirmModal: renderConfirmModal });\n              }\n            });\n          }\n        }\n      });\n      items.forEach(function (item) {\n        item['data-test-subj'] = 'indexTableContextMenuButton';\n      });\n      var panelTree = {\n        id: 0,\n        title: intl.formatMessage({\n          id: 'xpack.idxMgmt.indexActionsMenu.panelTitle',\n          defaultMessage: '{selectedIndexCount, plural, one {Index} other {Indices} } options'\n        }, { selectedIndexCount: selectedIndexCount }),\n        items: items\n      };\n      return (0, _flatten_panel_tree.flattenPanelTree)(panelTree);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props2 = this.props,\n          indexNames = _props2.indexNames,\n          intl = _props2.intl;\n\n      var selectedIndexCount = indexNames.length;\n      var _props3 = this.props,\n          _props3$iconSide = _props3.iconSide,\n          iconSide = _props3$iconSide === undefined ? 'right' : _props3$iconSide,\n          _props3$anchorPositio = _props3.anchorPosition,\n          anchorPosition = _props3$anchorPositio === undefined ? 'rightUp' : _props3$anchorPositio,\n          _props3$label = _props3.label,\n          label = _props3$label === undefined ? intl.formatMessage({\n        id: 'xpack.idxMgmt.indexActionsMenu.manageButtonLabel',\n        defaultMessage: 'Manage {selectedIndexCount, plural, one {index} other {indices}}'\n      }, { selectedIndexCount: selectedIndexCount }) : _props3$label,\n          _props3$iconType = _props3.iconType,\n          iconType = _props3$iconType === undefined ? 'arrowDown' : _props3$iconType;\n\n      var panels = this.panels();\n      var button = _react2.default.createElement(\n        _eui.EuiButton,\n        {\n          'data-test-subj': 'indexActionsContextMenuButton',\n          iconSide: iconSide,\n          'aria-label': intl.formatMessage({\n            id: 'xpack.idxMgmt.indexActionsMenu.manageButtonAriaLabel',\n            defaultMessage: '{selectedIndexCount, plural, one {index} other {indices} } options'\n          }, { selectedIndexCount: selectedIndexCount }),\n          onClick: this.onButtonClick,\n          iconType: iconType,\n          fill: true\n        },\n        label\n      );\n\n      return _react2.default.createElement(\n        'div',\n        null,\n        this.state.renderConfirmModal ? this.state.renderConfirmModal(this.closeConfirmModal, (0, _api.getHttpClient)()) : null,\n        _react2.default.createElement(\n          _eui.EuiPopover,\n          {\n            id: 'contextMenuIndices',\n            button: button,\n            isOpen: this.state.isPopoverOpen,\n            closePopover: this.closePopover,\n            panelPaddingSize: 'none',\n            withTitle: true,\n            anchorPosition: anchorPosition,\n            repositionOnScroll: true\n          },\n          _react2.default.createElement(_eui.EuiContextMenu, { initialPanelId: 0, panels: panels })\n        )\n      );\n    }\n  }]);\n\n  return IndexActionsContextMenuUi;\n}(_react.Component);\n\nvar IndexActionsContextMenu = exports.IndexActionsContextMenu = (0, _react3.injectI18n)(IndexActionsContextMenuUi);",null]}