{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/monitoring/public/components/elasticsearch/shard_allocation/components/cluster_view.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/monitoring/public/components/elasticsearch/shard_allocation/components/cluster_view.js","mtime":1567631712087},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ClusterView = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _table_head = require('./table_head');\n\nvar _table_body = require('./table_body');\n\nvar _i18n = require('@kbn/i18n');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\nvar ClusterView = exports.ClusterView = function (_React$Component) {\n  _inherits(ClusterView, _React$Component);\n\n  function ClusterView(props) {\n    _classCallCheck(this, ClusterView);\n\n    var _this = _possibleConstructorReturn(this, (ClusterView.__proto__ || Object.getPrototypeOf(ClusterView)).call(this, props));\n\n    _this.setShowing = function (data) {\n      if (data) {\n        _this.setState({ showing: data });\n      }\n    };\n\n    _this.setShardStats = function (stats) {\n      _this.setState({ shardStats: stats });\n    };\n\n    _this.hasUnassigned = function () {\n      return _this.state.showing.length && _this.state.showing[0].unassigned && _this.state.showing[0].unassigned.length;\n    };\n\n    var scope = props.scope;\n    var kbnChangePath = props.kbnUrl.changePath;\n\n    _this.state = {\n      labels: props.scope.labels || [],\n      showing: props.scope.showing || [],\n      shardStats: props.scope.pageData.shardStats,\n      showSystemIndices: props.showSystemIndices,\n      toggleShowSystemIndices: props.toggleShowSystemIndices,\n      angularChangeUrl: function angularChangeUrl(url) {\n        scope.$evalAsync(function () {\n          return kbnChangePath(url);\n        });\n      }\n    };\n    return _this;\n  }\n\n  _createClass(ClusterView, [{\n    key: 'componentWillMount',\n    value: function componentWillMount() {\n      var _this2 = this;\n\n      this.props.scope.$watch('showing', this.setShowing);\n      this.props.scope.$watch(function () {\n        return _this2.props.scope.pageData.shardStats;\n      }, this.setShardStats);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      return _react2.default.createElement(\n        'table',\n        { cellPadding: '0', cellSpacing: '0', className: 'table' },\n        _react2.default.createElement(_table_head.TableHead, {\n          hasUnassigned: this.hasUnassigned(),\n          scope: this.props.scope,\n          toggleShowSystemIndices: this.state.toggleShowSystemIndices\n        }),\n        _react2.default.createElement(_table_body.TableBody, {\n          filter: this.props.scope.filter,\n          totalCount: this.props.scope.totalCount,\n          rows: this.state.showing,\n          cols: this.state.labels.length,\n          shardStats: this.state.shardStats,\n          changeUrl: this.state.angularChangeUrl\n        })\n      );\n    }\n  }]);\n\n  return ClusterView;\n}(_react2.default.Component);\n\nClusterView.displayName = _i18n.i18n.translate('xpack.monitoring.elasticsearch.shardAllocation.clusterViewDisplayName', {\n  defaultMessage: 'ClusterView'\n});",null]}