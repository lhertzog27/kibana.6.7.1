{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/packages/kbn-es-query/target/filters/phrases.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/packages/kbn-es-query/target/filters/phrases.js","mtime":1567666387460},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.buildPhrasesFilter = buildPhrasesFilter;\n\nvar _phrase = require('./phrase');\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });\n  } else {\n    obj[key] = value;\n  }return obj;\n} /*\n   * Licensed to Elasticsearch B.V. under one or more contributor\n   * license agreements. See the NOTICE file distributed with\n   * this work for additional information regarding copyright\n   * ownership. Elasticsearch B.V. licenses this file to you under\n   * the Apache License, Version 2.0 (the \"License\"); you may\n   * not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *    http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing,\n   * software distributed under the License is distributed on an\n   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n   * KIND, either express or implied.  See the License for the\n   * specific language governing permissions and limitations\n   * under the License.\n   */\n\nfunction buildPhrasesFilter(field, params, indexPattern) {\n  var index = indexPattern.id;\n  var type = 'phrases';\n  var key = field.name;\n  var value = params.map(function (value) {\n    return format(field, value);\n  }).join(', ');\n\n  var filter = {\n    meta: { index: index, type: type, key: key, value: value, params: params }\n  };\n\n  var should = void 0;\n  if (field.scripted) {\n    should = params.map(function (value) {\n      return {\n        script: (0, _phrase.getPhraseScript)(field, value)\n      };\n    });\n  } else {\n    should = params.map(function (value) {\n      return {\n        match_phrase: _defineProperty({}, field.name, value)\n      };\n    });\n  }\n\n  filter.query = {\n    bool: {\n      should: should,\n      minimum_should_match: 1\n    }\n  };\n\n  return filter;\n}\n\nfunction format(field, value) {\n  return field && field.format && field.format.convert ? field.format.convert(value) : value;\n}",null]}