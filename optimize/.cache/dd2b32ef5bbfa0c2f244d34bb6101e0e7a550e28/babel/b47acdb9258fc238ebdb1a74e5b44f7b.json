{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/public/components/refresh_control/refresh_control.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/public/components/refresh_control/refresh_control.js","mtime":1567631711926},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RefreshControl = undefined;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _eui = require('@elastic/eui');\n\nvar _popover = require('../popover');\n\nvar _loading_indicator = require('../../lib/loading_indicator');\n\nvar _auto_refresh_controls = require('./auto_refresh_controls');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nvar getRefreshInterval = function getRefreshInterval() {\n  var val = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n  // if it's a number, just use it directly\n  if (!isNaN(Number(val))) {\n    return val;\n  }\n\n  // if it's a string, try to parse out the shorthand duration value\n  var match = String(val).match(/^([0-9]{1,})([hmsd])$/);\n\n  // TODO: do something better with improper input, like show an error...\n  if (!match) {\n    return;\n  }\n\n  switch (match[2]) {\n    case 's':\n      return match[1] * 1000;\n    case 'm':\n      return match[1] * 1000 * 60;\n    case 'h':\n      return match[1] * 1000 * 60 * 60;\n    case 'd':\n      return match[1] * 1000 * 60 * 60 * 24;\n  }\n};\n\nvar RefreshControl = exports.RefreshControl = function RefreshControl(_ref) {\n  var inFlight = _ref.inFlight,\n      elementStats = _ref.elementStats,\n      setRefreshInterval = _ref.setRefreshInterval,\n      refreshInterval = _ref.refreshInterval,\n      doRefresh = _ref.doRefresh;\n  var pending = elementStats.pending;\n\n\n  if (inFlight || pending > 0) {\n    _loading_indicator.loadingIndicator.show();\n  } else {\n    _loading_indicator.loadingIndicator.hide();\n  }\n\n  var _setRefresh = function _setRefresh(val) {\n    return setRefreshInterval(getRefreshInterval(val));\n  };\n\n  var popoverButton = function popoverButton(handleClick) {\n    return _react2.default.createElement(\n      _eui.EuiButtonEmpty,\n      { size: 's', onClick: handleClick },\n      _react2.default.createElement(\n        'div',\n        { style: { display: 'flex', alignItems: 'center' } },\n        'Refresh'\n      )\n    );\n  };\n\n  var autoRefreshControls = _react2.default.createElement(\n    _popover.Popover,\n    {\n      id: 'auto-refresh-popover',\n      button: popoverButton,\n      panelClassName: 'canvasRefreshControl__popover'\n    },\n    function (_ref2) {\n      var closePopover = _ref2.closePopover;\n      return _react2.default.createElement(\n        'div',\n        null,\n        _react2.default.createElement(_auto_refresh_controls.AutoRefreshControls, {\n          inFlight: inFlight,\n          refreshInterval: refreshInterval,\n          setRefresh: function setRefresh(val) {\n            _setRefresh(val);\n            closePopover();\n          },\n          doRefresh: doRefresh,\n          disableInterval: function disableInterval() {\n            _setRefresh(0);\n            closePopover();\n          }\n        })\n      );\n    }\n  );\n\n  return autoRefreshControls;\n};\n\nRefreshControl.propTypes = {\n  inFlight: _propTypes2.default.bool.isRequired,\n  doRefresh: _propTypes2.default.func.isRequired,\n  refreshInterval: _propTypes2.default.number,\n  setRefreshInterval: _propTypes2.default.func.isRequired\n};",null]}