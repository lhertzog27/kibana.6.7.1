{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/maps/public/shared/layers/sources/es_geo_grid_source/es_geo_grid_source.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/maps/public/shared/layers/sources/es_geo_grid_source/es_geo_grid_source.js","mtime":1567631712020},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ESGeoGridSource = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _v = require('uuid/v4');\n\nvar _v2 = _interopRequireDefault(_v);\n\nvar _es_source = require('../es_source');\n\nvar _heatmap_layer = require('../../heatmap_layer');\n\nvar _vector_layer = require('../../vector_layer');\n\nvar _schemas = require('ui/vis/editors/default/schemas');\n\nvar _elasticsearch_geo_utils = require('../../../../elasticsearch_geo_utils');\n\nvar _agg_configs = require('ui/vis/agg_configs');\n\nvar _tabify = require('ui/agg_response/tabify');\n\nvar _convert_to_geojson = require('./convert_to_geojson');\n\nvar _vector_style = require('../../styles/vector_style');\n\nvar _render_as = require('./render_as');\n\nvar _create_source_editor = require('./create_source_editor');\n\nvar _update_source_editor = require('./update_source_editor');\n\nvar _grid_resolution = require('../../grid_resolution');\n\nvar _zoom_to_precision = require('./zoom_to_precision');\n\nvar _constants = require('../../../../../common/constants');\n\nvar _util = require('../../util');\n\nvar _i18n = require('@kbn/i18n');\n\nvar _i18n_getters = require('../../../../../common/i18n_getters');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\nvar COUNT_PROP_LABEL = 'count';\nvar COUNT_PROP_NAME = 'doc_count';\n\nvar aggSchemas = new _schemas.Schemas([{\n  group: 'metrics',\n  name: 'metric',\n  title: 'Value',\n  min: 1,\n  max: Infinity,\n  aggFilter: ['avg', 'count', 'max', 'min', 'sum'],\n  defaults: [{ schema: 'metric', type: 'count' }]\n}, {\n  group: 'buckets',\n  name: 'segment',\n  title: 'Geo Coordinates',\n  aggFilter: 'geohash_grid',\n  min: 1,\n  max: 1\n}]);\n\nvar ESGeoGridSource = exports.ESGeoGridSource = function (_AbstractESSource) {\n  _inherits(ESGeoGridSource, _AbstractESSource);\n\n  function ESGeoGridSource() {\n    _classCallCheck(this, ESGeoGridSource);\n\n    return _possibleConstructorReturn(this, (ESGeoGridSource.__proto__ || Object.getPrototypeOf(ESGeoGridSource)).apply(this, arguments));\n  }\n\n  _createClass(ESGeoGridSource, [{\n    key: 'renderSourceSettingsEditor',\n    value: function renderSourceSettingsEditor(_ref) {\n      var onChange = _ref.onChange;\n\n      return _react2.default.createElement(_update_source_editor.UpdateSourceEditor, {\n        indexPatternId: this._descriptor.indexPatternId,\n        onChange: onChange,\n        metrics: this._descriptor.metrics,\n        renderAs: this._descriptor.requestType,\n        resolution: this._descriptor.resolution\n      });\n    }\n  }, {\n    key: 'getImmutableProperties',\n    value: function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var indexPatternTitle, indexPattern;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                indexPatternTitle = this._descriptor.indexPatternId;\n                _context.prev = 1;\n                _context.next = 4;\n                return this._getIndexPattern();\n\n              case 4:\n                indexPattern = _context.sent;\n\n                indexPatternTitle = indexPattern.title;\n                _context.next = 10;\n                break;\n\n              case 8:\n                _context.prev = 8;\n                _context.t0 = _context['catch'](1);\n\n              case 10:\n                return _context.abrupt('return', [{\n                  label: (0, _i18n_getters.getDataSourceLabel)(),\n                  value: ESGeoGridSource.title\n                }, {\n                  label: _i18n.i18n.translate('xpack.maps.source.esGrid.indexPatternLabel', {\n                    defaultMessage: 'Index pattern'\n                  }),\n                  value: indexPatternTitle }, {\n                  label: _i18n.i18n.translate('xpack.maps.source.esGrid.geospatialFieldLabel', {\n                    defaultMessage: 'Geospatial field'\n                  }),\n                  value: this._descriptor.geoField\n                }, {\n                  label: _i18n.i18n.translate('xpack.maps.source.esGrid.showasFieldLabel', {\n                    defaultMessage: 'Show as'\n                  }),\n                  value: this._descriptor.requestType\n                }]);\n\n              case 11:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[1, 8]]);\n      }));\n\n      function getImmutableProperties() {\n        return _ref2.apply(this, arguments);\n      }\n\n      return getImmutableProperties;\n    }()\n  }, {\n    key: 'getFieldNames',\n    value: function getFieldNames() {\n      return this.getMetricFields().map(function (_ref3) {\n        var propertyKey = _ref3.propertyKey;\n\n        return propertyKey;\n      });\n    }\n  }, {\n    key: 'isGeoGridPrecisionAware',\n    value: function isGeoGridPrecisionAware() {\n      return true;\n    }\n  }, {\n    key: 'isJoinable',\n    value: function isJoinable() {\n      return false;\n    }\n  }, {\n    key: 'getGridResolution',\n    value: function getGridResolution() {\n      return this._descriptor.resolution;\n    }\n  }, {\n    key: 'getGeoGridPrecision',\n    value: function getGeoGridPrecision(zoom) {\n      return (0, _zoom_to_precision.getGeohashPrecisionForZoom)(zoom) + this._getGeoGridPrecisionResolutionDelta();\n    }\n  }, {\n    key: '_getGeoGridPrecisionResolutionDelta',\n    value: function _getGeoGridPrecisionResolutionDelta() {\n      if (this._descriptor.resolution === _grid_resolution.GRID_RESOLUTION.COARSE) {\n        return 0;\n      }\n\n      if (this._descriptor.resolution === _grid_resolution.GRID_RESOLUTION.FINE) {\n        return 1;\n      }\n\n      if (this._descriptor.resolution === _grid_resolution.GRID_RESOLUTION.MOST_FINE) {\n        return 2;\n      }\n\n      throw new Error(_i18n.i18n.translate('xpack.maps.source.esGrid.resolutionParamErrorMessage', {\n        defaultMessage: 'Grid resolution param not recognized: {resolution}',\n        values: {\n          resolution: this._descriptor.resolution\n        }\n      }));\n    }\n  }, {\n    key: 'getGeoJsonWithMeta',\n    value: function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(_ref4, searchFilters) {\n        var layerName = _ref4.layerName;\n        var featureCollection;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.getGeoJsonPoints({ layerName: layerName }, {\n                  geogridPrecision: searchFilters.geogridPrecision,\n                  buffer: searchFilters.buffer,\n                  timeFilters: searchFilters.timeFilters,\n                  query: searchFilters.query\n                });\n\n              case 2:\n                featureCollection = _context2.sent;\n\n\n                if (this._descriptor.requestType === _render_as.RENDER_AS.GRID) {\n                  featureCollection.features.forEach(function (feature) {\n                    //replace geometries with the polygon\n                    feature.geometry = (0, _elasticsearch_geo_utils.makeGeohashGridPolygon)(feature);\n                  });\n                }\n\n                return _context2.abrupt('return', {\n                  data: featureCollection,\n                  meta: {\n                    areResultsTrimmed: false\n                  }\n                });\n\n              case 5:\n              case 'end':\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getGeoJsonWithMeta(_x, _x2) {\n        return _ref5.apply(this, arguments);\n      }\n\n      return getGeoJsonWithMeta;\n    }()\n  }, {\n    key: 'getNumberFields',\n    value: function () {\n      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                return _context3.abrupt('return', this.getMetricFields().map(function (_ref7) {\n                  var name = _ref7.propertyKey,\n                      label = _ref7.propertyLabel;\n\n                  return { label: label, name: name };\n                }));\n\n              case 1:\n              case 'end':\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function getNumberFields() {\n        return _ref6.apply(this, arguments);\n      }\n\n      return getNumberFields;\n    }()\n  }, {\n    key: 'getGeoJsonPoints',\n    value: function () {\n      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(_ref8, _ref9) {\n        var layerName = _ref8.layerName;\n        var geogridPrecision = _ref9.geogridPrecision,\n            buffer = _ref9.buffer,\n            timeFilters = _ref9.timeFilters,\n            query = _ref9.query;\n\n        var indexPattern, searchSource, aggConfigs, esResponse, tabifiedResp, _convertToGeoJson, featureCollection;\n\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this._getIndexPattern();\n\n              case 2:\n                indexPattern = _context4.sent;\n                _context4.next = 5;\n                return this._makeSearchSource({ buffer: buffer, timeFilters: timeFilters, query: query }, 0);\n\n              case 5:\n                searchSource = _context4.sent;\n                aggConfigs = new _agg_configs.AggConfigs(indexPattern, this._makeAggConfigs(geogridPrecision), aggSchemas.all);\n\n                searchSource.setField('aggs', aggConfigs.toDsl());\n                _context4.next = 10;\n                return this._runEsQuery(layerName, searchSource, _i18n.i18n.translate('xpack.maps.source.esGrid.inspectorDescription', {\n                  defaultMessage: 'Elasticsearch geo grid aggregation request'\n                }));\n\n              case 10:\n                esResponse = _context4.sent;\n                tabifiedResp = (0, _tabify.tabifyAggResponse)(aggConfigs, esResponse);\n                _convertToGeoJson = (0, _convert_to_geojson.convertToGeoJson)(tabifiedResp), featureCollection = _convertToGeoJson.featureCollection;\n                return _context4.abrupt('return', featureCollection);\n\n              case 14:\n              case 'end':\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function getGeoJsonPoints(_x3, _x4) {\n        return _ref10.apply(this, arguments);\n      }\n\n      return getGeoJsonPoints;\n    }()\n  }, {\n    key: 'isFilterByMapBounds',\n    value: function isFilterByMapBounds() {\n      return true;\n    }\n  }, {\n    key: '_formatMetricKey',\n    value: function _formatMetricKey(metric) {\n      return metric.type !== 'count' ? metric.type + '_of_' + metric.field : COUNT_PROP_NAME;\n    }\n  }, {\n    key: '_formatMetricLabel',\n    value: function _formatMetricLabel(metric) {\n      return metric.type !== 'count' ? metric.type + ' of ' + metric.field : COUNT_PROP_LABEL;\n    }\n  }, {\n    key: '_makeAggConfigs',\n    value: function _makeAggConfigs(precision) {\n      var metricAggConfigs = this.getMetricFields().map(function (metric) {\n        var metricAggConfig = {\n          id: metric.propertyKey,\n          enabled: true,\n          type: metric.type,\n          schema: 'metric',\n          params: {}\n        };\n        if (metric.type !== 'count') {\n          metricAggConfig.params = { field: metric.field };\n        }\n        return metricAggConfig;\n      });\n\n      return [].concat(_toConsumableArray(metricAggConfigs), [{\n        id: 'grid',\n        enabled: true,\n        type: 'geohash_grid',\n        schema: 'segment',\n        params: {\n          field: this._descriptor.geoField,\n          isFilteredByCollar: false, // map extent filter is in query so no need to filter in aggregation\n          useGeocentroid: true, // TODO make configurable\n          autoPrecision: false, // false so we can define our own precision levels based on styling\n          precision: precision\n        }\n      }]);\n    }\n  }, {\n    key: '_createDefaultLayerDescriptor',\n    value: function _createDefaultLayerDescriptor(options) {\n      if (this._descriptor.requestType === _render_as.RENDER_AS.HEATMAP) {\n        return _heatmap_layer.HeatmapLayer.createDescriptor(_extends({\n          sourceDescriptor: this._descriptor\n        }, options));\n      }\n\n      var descriptor = _vector_layer.VectorLayer.createDescriptor(_extends({\n        sourceDescriptor: this._descriptor\n      }, options));\n      descriptor.style = _vector_style.VectorStyle.createDescriptor({\n        fillColor: {\n          type: _vector_style.VectorStyle.STYLE_TYPE.DYNAMIC,\n          options: {\n            field: {\n              label: COUNT_PROP_LABEL,\n              name: COUNT_PROP_NAME,\n              origin: _constants.SOURCE_DATA_ID_ORIGIN\n            },\n            color: 'Blues'\n          }\n        },\n        iconSize: {\n          type: _vector_style.VectorStyle.STYLE_TYPE.DYNAMIC,\n          options: {\n            field: {\n              label: COUNT_PROP_LABEL,\n              name: COUNT_PROP_NAME,\n              origin: _constants.SOURCE_DATA_ID_ORIGIN\n            },\n            minSize: 4,\n            maxSize: 32\n          }\n        }\n      });\n      return descriptor;\n    }\n  }, {\n    key: 'createDefaultLayer',\n    value: function createDefaultLayer(options) {\n      if (this._descriptor.requestType === _render_as.RENDER_AS.HEATMAP) {\n        return new _heatmap_layer.HeatmapLayer({\n          layerDescriptor: this._createDefaultLayerDescriptor(options),\n          source: this\n        });\n      }\n\n      var layerDescriptor = this._createDefaultLayerDescriptor(options);\n      var style = new _vector_style.VectorStyle(layerDescriptor.style);\n      return new _vector_layer.VectorLayer({\n        layerDescriptor: layerDescriptor,\n        source: this,\n        style: style\n      });\n    }\n  }, {\n    key: 'canFormatFeatureProperties',\n    value: function canFormatFeatureProperties() {\n      return true;\n    }\n  }, {\n    key: 'filterAndFormatProperties',\n    value: function () {\n      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(properties) {\n        var metricFields;\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                metricFields = this.getMetricFields();\n                return _context5.abrupt('return', (0, _util.filterPropertiesForTooltip)(metricFields, properties));\n\n              case 2:\n              case 'end':\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function filterAndFormatProperties(_x5) {\n        return _ref11.apply(this, arguments);\n      }\n\n      return filterAndFormatProperties;\n    }()\n  }], [{\n    key: 'createDescriptor',\n    value: function createDescriptor(_ref12) {\n      var indexPatternId = _ref12.indexPatternId,\n          geoField = _ref12.geoField,\n          requestType = _ref12.requestType,\n          resolution = _ref12.resolution;\n\n      return {\n        type: ESGeoGridSource.type,\n        id: (0, _v2.default)(),\n        indexPatternId: indexPatternId,\n        geoField: geoField,\n        requestType: requestType,\n        resolution: resolution ? resolution : _grid_resolution.GRID_RESOLUTION.COARSE\n      };\n    }\n  }, {\n    key: 'renderEditor',\n    value: function renderEditor(_ref13) {\n      var onPreviewSource = _ref13.onPreviewSource;\n\n      var onSelect = function onSelect(sourceConfig) {\n        if (!sourceConfig) {\n          onPreviewSource(null);\n          return;\n        }\n\n        var sourceDescriptor = ESGeoGridSource.createDescriptor(sourceConfig);\n        var source = new ESGeoGridSource(sourceDescriptor);\n        onPreviewSource(source);\n      };\n\n      return _react2.default.createElement(_create_source_editor.CreateSourceEditor, { onSelect: onSelect });\n    }\n  }]);\n\n  return ESGeoGridSource;\n}(_es_source.AbstractESSource);\n\nESGeoGridSource.type = 'ES_GEO_GRID';\nESGeoGridSource.title = _i18n.i18n.translate('xpack.maps.source.esGridTitle', {\n  defaultMessage: 'Grid aggregation'\n});\nESGeoGridSource.description = _i18n.i18n.translate('xpack.maps.source.esGridDescription', {\n  defaultMessage: 'Geospatial data grouped in grids with metrics for each gridded cell'\n});",null]}