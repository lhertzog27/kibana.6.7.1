{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/file_datavisualizer/components/import_view/importer/sst_importer.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/file_datavisualizer/components/import_view/importer/sst_importer.js","mtime":1567631712045},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SstImporter = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _importer = require('./importer');\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\nvar SstImporter = exports.SstImporter = function (_Importer) {\n  _inherits(SstImporter, _Importer);\n\n  function SstImporter(results, settings) {\n    _classCallCheck(this, SstImporter);\n\n    var _this = _possibleConstructorReturn(this, (SstImporter.__proto__ || Object.getPrototypeOf(SstImporter)).call(this, settings));\n\n    _this.format = results.format;\n    _this.multilineStartPattern = results.multiline_start_pattern;\n    _this.grokPattern = results.grok_pattern;\n    return _this;\n  }\n\n  // convert the semi structured text string into an array of lines\n  // by looking over each char, looking for newlines.\n  // if one is found, check the next line to see if it starts with the\n  // multiline_start_pattern regex\n  // if it does, it is a legitimate end of line and can be pushed into the list,\n  // if not, it must be a new line char inside a field value, so keep looking.\n\n\n  _createClass(SstImporter, [{\n    key: 'read',\n    value: function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(text) {\n        var data, message, line, i, char;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                data = [];\n                message = '';\n                line = '';\n\n                for (i = 0; i < text.length; i++) {\n                  char = text[i];\n\n                  if (char === '\\n') {\n                    if (line.match(this.multilineStartPattern) !== null) {\n                      data.push({ message: message });\n                      message = '';\n                    } else {\n                      message += char;\n                    }\n                    message += line;\n                    line = '';\n                  } else {\n                    line += char;\n                  }\n                }\n\n                // add the last line of the file to the list\n                if (message !== '') {\n                  data.push({ message: message });\n                }\n\n                // remove first line if it is blank\n                if (data[0] && data[0].message === '') {\n                  data.shift();\n                }\n\n                this.data = data;\n                this.docArray = this.data;\n\n                return _context.abrupt('return', {\n                  success: true\n                });\n\n              case 12:\n                _context.prev = 12;\n                _context.t0 = _context['catch'](0);\n\n                console.error(_context.t0);\n                return _context.abrupt('return', {\n                  success: false,\n                  error: _context.t0\n                });\n\n              case 16:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 12]]);\n      }));\n\n      function read(_x) {\n        return _ref.apply(this, arguments);\n      }\n\n      return read;\n    }()\n  }]);\n\n  return SstImporter;\n}(_importer.Importer);",null]}