{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/logstash/public/components/pipeline_list/pipelines_table.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/logstash/public/components/pipeline_list/pipelines_table.js","mtime":1567631712006},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PipelinesTable = undefined;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _eui = require('@elastic/eui');\n\nvar _react3 = require('@kbn/i18n/react');\n\nvar _constants = require('./constants');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nfunction getColumns(openPipeline, clonePipeline) {\n  return [{\n    field: 'id',\n    name: _react2.default.createElement(_react3.FormattedMessage, {\n      id: 'xpack.logstash.pipelinesTable.idColumnLabel',\n      defaultMessage: 'Id'\n    }),\n    sortable: true,\n    render: function render(id, _ref) {\n      var isCentrallyManaged = _ref.isCentrallyManaged;\n\n      var openPipelineClicked = function openPipelineClicked() {\n        return openPipeline(id);\n      };\n      return isCentrallyManaged ? _react2.default.createElement(\n        _eui.EuiLink,\n        { onClick: openPipelineClicked, 'data-test-subj': 'cellId' },\n        id\n      ) : _react2.default.createElement(\n        'span',\n        null,\n        id,\n        ' \\xA0',\n        _react2.default.createElement(_eui.EuiIconTip, {\n          content: _constants.PIPELINE_LIST.PIPELINE_NOT_CENTRALLY_MANAGED_TOOLTIP_TEXT,\n          type: 'questionInCircle'\n        })\n      );\n    }\n  }, {\n    field: 'description',\n    name: _react2.default.createElement(_react3.FormattedMessage, {\n      id: 'xpack.logstash.pipelinesTable.descriptionColumnLabel',\n      defaultMessage: 'Description'\n    }),\n    render: function render(description) {\n      return _react2.default.createElement(\n        'span',\n        { 'data-test-subj': 'cellDescription' },\n        description\n      );\n    },\n    sortable: true,\n    truncateText: true\n  }, {\n    field: 'lastModifiedHumanized',\n    name: _react2.default.createElement(_react3.FormattedMessage, {\n      id: 'xpack.logstash.pipelinesTable.lastModifiedColumnLabel',\n      defaultMessage: 'Last Modified'\n    }),\n    render: function render(lastModified) {\n      return _react2.default.createElement(\n        'span',\n        { 'data-test-subj': 'cellLastModified' },\n        lastModified\n      );\n    },\n    sortable: true\n  }, {\n    field: 'username',\n    name: _react2.default.createElement(_react3.FormattedMessage, {\n      id: 'xpack.logstash.pipelinesTable.modifiedByColumnLabel',\n      defaultMessage: 'Modified By'\n    }),\n    render: function render(username) {\n      return _react2.default.createElement(\n        'span',\n        { 'data-test-subj': 'cellUsername' },\n        username\n      );\n    },\n    sortable: true\n  }, {\n    field: 'id',\n    name: '',\n    render: function render(id, _ref2) {\n      var isCentrallyManaged = _ref2.isCentrallyManaged;\n\n      var cloneClicked = function cloneClicked() {\n        clonePipeline(id);\n      };\n      return isCentrallyManaged ? _react2.default.createElement(\n        _eui.EuiButtonEmpty,\n        {\n          'data-test-subj': 'lnkPipelineClone-' + id,\n          iconType: 'copy',\n          onClick: cloneClicked,\n          size: 'xs'\n        },\n        _react2.default.createElement(_react3.FormattedMessage, {\n          id: 'xpack.logstash.pipelinesTable.cloneButtonLabel',\n          defaultMessage: 'Clone'\n        })\n      ) : null;\n    },\n    sortable: false,\n    width: '100px'\n  }];\n}\n\nfunction PipelinesTableUi(_ref3) {\n  var clonePipeline = _ref3.clonePipeline,\n      createPipeline = _ref3.createPipeline,\n      isReadOnly = _ref3.isReadOnly,\n      isSelectable = _ref3.isSelectable,\n      message = _ref3.message,\n      onDeleteSelectedPipelines = _ref3.onDeleteSelectedPipelines,\n      onSelectionChange = _ref3.onSelectionChange,\n      openPipeline = _ref3.openPipeline,\n      pipelines = _ref3.pipelines,\n      selection = _ref3.selection,\n      pageIndex = _ref3.pageIndex,\n      intl = _ref3.intl;\n\n  var pagination = {\n    pageIndex: pageIndex,\n    initialPageSize: _constants.PIPELINE_LIST.INITIAL_PAGE_SIZE,\n    totalItemCount: pipelines.length,\n    pageSizeOptions: _constants.PIPELINE_LIST.PAGE_SIZE_OPTIONS\n  };\n\n  var selectableMessage = function selectableMessage(selectable, _ref4) {\n    var id = _ref4.id;\n    return selectable ? intl.formatMessage({\n      id: 'xpack.logstash.pipelinesTable.selectablePipelineMessage',\n      defaultMessage: 'Select pipeline \"{id}\"'\n    }, {\n      id: id\n    }) : _constants.PIPELINE_LIST.PIPELINE_NOT_CENTRALLY_MANAGED_TOOLTIP_TEXT;\n  };\n\n  var selectionOptions = isSelectable ? {\n    selectable: function selectable(_ref5) {\n      var isCentrallyManaged = _ref5.isCentrallyManaged;\n      return isCentrallyManaged;\n    },\n    selectableMessage: selectableMessage,\n    onSelectionChange: onSelectionChange\n  } : null;\n\n  // display when > 0 selected and user has write permission\n  var deleteButton = selection.length && !isReadOnly ? _react2.default.createElement(\n    _eui.EuiButton,\n    {\n      key: 'btnDeletePipelines',\n      color: 'danger',\n      onClick: onDeleteSelectedPipelines,\n      'data-test-subj': 'btnDeletePipeline'\n    },\n    _react2.default.createElement(_react3.FormattedMessage, {\n      id: 'xpack.logstash.pipelinesTable.deleteButtonLabel',\n      defaultMessage: 'Delete'\n    })\n  ) : null;\n\n  var search = {\n    box: { incremental: true, 'data-test-subj': 'filter' },\n    filters: [{\n      type: 'field_value_selection',\n      field: 'id',\n      name: _react2.default.createElement(_react3.FormattedMessage, {\n        id: 'xpack.logstash.pipelinesTable.filterByIdLabel',\n        defaultMessage: 'Filter by ID'\n      }),\n      multiSelect: false,\n      options: pipelines.map(function (_ref6) {\n        var id = _ref6.id;\n\n        return {\n          value: id,\n          name: id,\n          view: id\n        };\n      })\n    }],\n    toolsLeft: deleteButton,\n    toolsRight: _react2.default.createElement(\n      _eui.EuiButton,\n      {\n        isDisabled: isReadOnly,\n        key: 'btnAdd',\n        fill: true,\n        onClick: createPipeline,\n        'data-test-subj': 'btnAdd'\n      },\n      _react2.default.createElement(_react3.FormattedMessage, {\n        id: 'xpack.logstash.pipelinesTable.createPipelineButtonLabel',\n        defaultMessage: 'Create pipeline'\n      })\n    )\n  };\n\n  var columns = getColumns(openPipeline, clonePipeline);\n\n  return _react2.default.createElement(_eui.EuiInMemoryTable, {\n    columns: columns,\n    'data-test-subj': 'pipelineTable',\n    isSelectable: isSelectable,\n    itemId: 'id',\n    items: pipelines,\n    message: message,\n    pagination: pagination,\n    search: search,\n    selection: selectionOptions,\n    sorting: true\n  });\n}\n\nvar PipelinesTable = exports.PipelinesTable = (0, _react3.injectI18n)(PipelinesTableUi);",null]}