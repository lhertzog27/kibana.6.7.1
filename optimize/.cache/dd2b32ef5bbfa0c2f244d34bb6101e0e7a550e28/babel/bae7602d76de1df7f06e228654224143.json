{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/apm/public/utils/timepicker/index.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/apm/public/utils/timepicker/index.js","mtime":1567631711873},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.initTimepicker = initTimepicker;\n\nvar _modules = require('ui/modules');\n\nvar _chrome = require('ui/chrome');\n\nvar _chrome2 = _interopRequireDefault(_chrome);\n\nrequire('ui/autoload/all');\n\nvar _urlParams = require('../../store/urlParams');\n\nvar _timefilter = require('ui/timefilter');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar currentInterval = void 0;\n\n// hack to wait for angular template to be ready\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nvar waitForAngularReady = new Promise(function (resolve) {\n  var checkInterval = setInterval(function () {\n    var hasElm = !!document.querySelector('#react-apm-breadcrumbs');\n    if (hasElm) {\n      clearInterval(checkInterval);\n      resolve();\n    }\n  }, 10);\n});\n\nfunction initTimepicker(history, dispatch) {\n  return new Promise(function (resolve) {\n    // default the timepicker to the last 24 hours\n    _chrome2.default.getUiSettingsClient().overrideLocalDefault('timepicker:timeDefaults', JSON.stringify({\n      from: 'now-24h',\n      to: 'now',\n      mode: 'quick'\n    }));\n\n    _modules.uiModules.get('app/apm', []).controller('TimePickerController', function ($scope, globalState, $rootScope, i18n) {\n      // Add APM feedback menu\n      // TODO: move this somewhere else\n      $scope.topNavMenu = [];\n      $scope.topNavMenu.push({\n        key: 'APM feedback',\n        label: i18n('xpack.apm.topNav.apmFeedbackLabel', {\n          defaultMessage: 'APM feedback'\n        }),\n        description: i18n('xpack.apm.topNav.apmFeedbackDescription', {\n          defaultMessage: 'APM feedback'\n        }),\n        tooltip: i18n('xpack.apm.topNav.apmFeedbackTooltip', {\n          defaultMessage: 'Provide feedback on APM'\n        }),\n        template: require('../../templates/feedback_menu.html')\n      });\n\n      history.listen(function () {\n        updateRefreshRate(dispatch);\n        globalState.fetch(); // ensure global state is updated when url changes\n      });\n\n      // ensure that redux is notified after timefilter has updated\n      $scope.$listen(_timefilter.timefilter, 'timeUpdate', function () {\n        return dispatch(updateTimePickerAction());\n      });\n\n      // ensure that timepicker updates when global state changes\n      (0, _timefilter.registerTimefilterWithGlobalState)(globalState, $rootScope);\n\n      _timefilter.timefilter.enableTimeRangeSelector();\n      _timefilter.timefilter.enableAutoRefreshSelector();\n\n      dispatch(updateTimePickerAction());\n      updateRefreshRate(dispatch);\n\n      Promise.all([waitForAngularReady]).then(resolve);\n    });\n  });\n}\n\nfunction updateTimePickerAction() {\n  return (0, _urlParams.updateTimePicker)({\n    min: _timefilter.timefilter.getBounds().min.toISOString(),\n    max: _timefilter.timefilter.getBounds().max.toISOString()\n  });\n}\n\nfunction updateRefreshRate(dispatch) {\n  var refreshInterval = _timefilter.timefilter.getRefreshInterval().value;\n  if (currentInterval) {\n    clearInterval(currentInterval);\n  }\n\n  if (refreshInterval > 0 && !_timefilter.timefilter.getRefreshInterval().pause) {\n    currentInterval = setInterval(function () {\n      return dispatch(updateTimePickerAction());\n    }, refreshInterval);\n  }\n}",null]}