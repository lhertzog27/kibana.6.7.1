{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/jobs/new_job/simple/components/utils/search_service.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/jobs/new_job/simple/components/utils/search_service.js","mtime":1567631712057},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.mlSimpleJobSearchService = undefined;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _index_patterns = require('plugins/ml/../common/constants/index_patterns');\n\nvar _string_utils = require('plugins/ml/util/string_utils');\n\nvar _ml_api_service = require('plugins/ml/services/ml_api_service');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// detector swimlane search\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nfunction getScoresByRecord(jobId, earliestMs, latestMs, interval, firstSplitField) {\n  return new Promise(function (resolve, reject) {\n    var obj = {\n      success: true,\n      results: {}\n    };\n\n    var jobIdFilterStr = 'job_id: ' + jobId;\n    if (firstSplitField && firstSplitField.value !== undefined) {\n      // Escape any reserved characters for the query_string query,\n      // wrapping the value in quotes to do a phrase match.\n      // Backslash is a special character in JSON strings, so doubly escape\n      // any backslash characters which exist in the field value.\n      jobIdFilterStr += ' AND ' + (0, _string_utils.escapeForElasticsearchQuery)(firstSplitField.name) + ':';\n      jobIdFilterStr += '\"' + String(firstSplitField.value).replace(/\\\\/g, '\\\\\\\\') + '\"';\n    }\n\n    _ml_api_service.ml.esSearch({\n      index: _index_patterns.ML_RESULTS_INDEX_PATTERN,\n      size: 0,\n      body: {\n        query: {\n          bool: {\n            filter: [{\n              query_string: {\n                query: 'result_type:record'\n              }\n            }, {\n              bool: {\n                must: [{\n                  range: {\n                    timestamp: {\n                      gte: earliestMs,\n                      lte: latestMs,\n                      format: 'epoch_millis'\n                    }\n                  }\n                }, {\n                  query_string: {\n                    query: jobIdFilterStr\n                  }\n                }]\n              }\n            }]\n          }\n        },\n        aggs: {\n          detector_index: {\n            terms: {\n              field: 'detector_index',\n              order: {\n                recordScore: 'desc'\n              }\n            },\n            aggs: {\n              recordScore: {\n                max: {\n                  field: 'record_score'\n                }\n              },\n              byTime: {\n                date_histogram: {\n                  field: 'timestamp',\n                  interval: interval,\n                  min_doc_count: 1,\n                  extended_bounds: {\n                    min: earliestMs,\n                    max: latestMs\n                  }\n                },\n                aggs: {\n                  recordScore: {\n                    max: {\n                      field: 'record_score'\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }).then(function (resp) {\n      var detectorsByIndex = _lodash2.default.get(resp, ['aggregations', 'detector_index', 'buckets'], []);\n      _lodash2.default.each(detectorsByIndex, function (dtr) {\n        var dtrResults = {};\n        var dtrIndex = +dtr.key;\n\n        var buckets = _lodash2.default.get(dtr, ['byTime', 'buckets'], []);\n        for (var j = 0; j < buckets.length; j++) {\n          var bkt = buckets[j];\n          var time = bkt.key;\n          dtrResults[time] = {\n            recordScore: _lodash2.default.get(bkt, ['recordScore', 'value'])\n          };\n        }\n        obj.results[dtrIndex] = dtrResults;\n      });\n\n      resolve(obj);\n    }).catch(function (resp) {\n      reject(resp);\n    });\n  });\n}\n\nfunction getCategoryFields(index, field, size, query) {\n  return new Promise(function (resolve, reject) {\n    var obj = {\n      success: true,\n      results: {}\n    };\n\n    _ml_api_service.ml.esSearch({\n      index: index,\n      size: 0,\n      body: {\n        query: query,\n        aggs: {\n          catFields: {\n            terms: {\n              field: field,\n              size: size\n            }\n          }\n        }\n      }\n    }).then(function (resp) {\n      obj.results.values = [];\n      var catFields = _lodash2.default.get(resp, ['aggregations', 'catFields', 'buckets'], []);\n      _lodash2.default.each(catFields, function (f) {\n        obj.results.values.push(f.key);\n      });\n\n      resolve(obj);\n    }).catch(function (resp) {\n      reject(resp);\n    });\n  });\n}\n\nvar mlSimpleJobSearchService = exports.mlSimpleJobSearchService = {\n  getScoresByRecord: getScoresByRecord,\n  getCategoryFields: getCategoryFields\n};",null]}