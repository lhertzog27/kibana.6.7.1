{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/index_management/public/services/api.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/index_management/public/services/api.js","mtime":1567631711972},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.loadIndexData = exports.loadIndexMapping = exports.loadIndexStats = exports.updateIndexSettings = exports.loadIndexSettings = exports.unfreezeIndices = exports.freezeIndices = exports.clearCacheIndices = exports.forcemergeIndices = exports.flushIndices = exports.refreshIndices = exports.openIndices = exports.deleteIndices = exports.closeIndices = exports.reloadIndices = exports.loadIndices = exports.getHttpClient = exports.setHttpClient = undefined;\n\nvar loadIndices = exports.loadIndices = function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n    var response;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return httpClient.get(apiPrefix + '/indices');\n\n          case 2:\n            response = _context.sent;\n            return _context.abrupt('return', response.data);\n\n          case 4:\n          case 'end':\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n\n  return function loadIndices() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar reloadIndices = exports.reloadIndices = function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(indexNames) {\n    var body, response;\n    return regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            body = {\n              indexNames: indexNames\n            };\n            _context2.next = 3;\n            return httpClient.post(apiPrefix + '/indices/reload', body);\n\n          case 3:\n            response = _context2.sent;\n            return _context2.abrupt('return', response.data);\n\n          case 5:\n          case 'end':\n            return _context2.stop();\n        }\n      }\n    }, _callee2, this);\n  }));\n\n  return function reloadIndices(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nvar closeIndices = exports.closeIndices = function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(indices) {\n    var body, response;\n    return regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            body = {\n              indices: indices\n            };\n            _context3.next = 3;\n            return httpClient.post(apiPrefix + '/indices/close', body);\n\n          case 3:\n            response = _context3.sent;\n            return _context3.abrupt('return', response.data);\n\n          case 5:\n          case 'end':\n            return _context3.stop();\n        }\n      }\n    }, _callee3, this);\n  }));\n\n  return function closeIndices(_x2) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nvar deleteIndices = exports.deleteIndices = function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(indices) {\n    var body, response;\n    return regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            body = {\n              indices: indices\n            };\n            _context4.next = 3;\n            return httpClient.post(apiPrefix + '/indices/delete', body);\n\n          case 3:\n            response = _context4.sent;\n            return _context4.abrupt('return', response.data);\n\n          case 5:\n          case 'end':\n            return _context4.stop();\n        }\n      }\n    }, _callee4, this);\n  }));\n\n  return function deleteIndices(_x3) {\n    return _ref4.apply(this, arguments);\n  };\n}();\n\nvar openIndices = exports.openIndices = function () {\n  var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(indices) {\n    var body, response;\n    return regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            body = {\n              indices: indices\n            };\n            _context5.next = 3;\n            return httpClient.post(apiPrefix + '/indices/open', body);\n\n          case 3:\n            response = _context5.sent;\n            return _context5.abrupt('return', response.data);\n\n          case 5:\n          case 'end':\n            return _context5.stop();\n        }\n      }\n    }, _callee5, this);\n  }));\n\n  return function openIndices(_x4) {\n    return _ref5.apply(this, arguments);\n  };\n}();\n\nvar refreshIndices = exports.refreshIndices = function () {\n  var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(indices) {\n    var body, response;\n    return regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            body = {\n              indices: indices\n            };\n            _context6.next = 3;\n            return httpClient.post(apiPrefix + '/indices/refresh', body);\n\n          case 3:\n            response = _context6.sent;\n            return _context6.abrupt('return', response.data);\n\n          case 5:\n          case 'end':\n            return _context6.stop();\n        }\n      }\n    }, _callee6, this);\n  }));\n\n  return function refreshIndices(_x5) {\n    return _ref6.apply(this, arguments);\n  };\n}();\n\nvar flushIndices = exports.flushIndices = function () {\n  var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(indices) {\n    var body, response;\n    return regeneratorRuntime.wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            body = {\n              indices: indices\n            };\n            _context7.next = 3;\n            return httpClient.post(apiPrefix + '/indices/flush', body);\n\n          case 3:\n            response = _context7.sent;\n            return _context7.abrupt('return', response.data);\n\n          case 5:\n          case 'end':\n            return _context7.stop();\n        }\n      }\n    }, _callee7, this);\n  }));\n\n  return function flushIndices(_x6) {\n    return _ref7.apply(this, arguments);\n  };\n}();\n\nvar forcemergeIndices = exports.forcemergeIndices = function () {\n  var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(indices, maxNumSegments) {\n    var body, response;\n    return regeneratorRuntime.wrap(function _callee8$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            body = {\n              indices: indices,\n              maxNumSegments: maxNumSegments\n            };\n            _context8.next = 3;\n            return httpClient.post(apiPrefix + '/indices/forcemerge', body);\n\n          case 3:\n            response = _context8.sent;\n            return _context8.abrupt('return', response.data);\n\n          case 5:\n          case 'end':\n            return _context8.stop();\n        }\n      }\n    }, _callee8, this);\n  }));\n\n  return function forcemergeIndices(_x7, _x8) {\n    return _ref8.apply(this, arguments);\n  };\n}();\n\nvar clearCacheIndices = exports.clearCacheIndices = function () {\n  var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(indices) {\n    var body, response;\n    return regeneratorRuntime.wrap(function _callee9$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            body = {\n              indices: indices\n            };\n            _context9.next = 3;\n            return httpClient.post(apiPrefix + '/indices/clear_cache', body);\n\n          case 3:\n            response = _context9.sent;\n            return _context9.abrupt('return', response.data);\n\n          case 5:\n          case 'end':\n            return _context9.stop();\n        }\n      }\n    }, _callee9, this);\n  }));\n\n  return function clearCacheIndices(_x9) {\n    return _ref9.apply(this, arguments);\n  };\n}();\n\nvar freezeIndices = exports.freezeIndices = function () {\n  var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(indices) {\n    var body, response;\n    return regeneratorRuntime.wrap(function _callee10$(_context10) {\n      while (1) {\n        switch (_context10.prev = _context10.next) {\n          case 0:\n            body = {\n              indices: indices\n            };\n            _context10.next = 3;\n            return httpClient.post(apiPrefix + '/indices/freeze', body);\n\n          case 3:\n            response = _context10.sent;\n            return _context10.abrupt('return', response.data);\n\n          case 5:\n          case 'end':\n            return _context10.stop();\n        }\n      }\n    }, _callee10, this);\n  }));\n\n  return function freezeIndices(_x10) {\n    return _ref10.apply(this, arguments);\n  };\n}();\n\nvar unfreezeIndices = exports.unfreezeIndices = function () {\n  var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(indices) {\n    var body, response;\n    return regeneratorRuntime.wrap(function _callee11$(_context11) {\n      while (1) {\n        switch (_context11.prev = _context11.next) {\n          case 0:\n            body = {\n              indices: indices\n            };\n            _context11.next = 3;\n            return httpClient.post(apiPrefix + '/indices/unfreeze', body);\n\n          case 3:\n            response = _context11.sent;\n            return _context11.abrupt('return', response.data);\n\n          case 5:\n          case 'end':\n            return _context11.stop();\n        }\n      }\n    }, _callee11, this);\n  }));\n\n  return function unfreezeIndices(_x11) {\n    return _ref11.apply(this, arguments);\n  };\n}();\n\nvar loadIndexSettings = exports.loadIndexSettings = function () {\n  var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(indexName) {\n    var response;\n    return regeneratorRuntime.wrap(function _callee12$(_context12) {\n      while (1) {\n        switch (_context12.prev = _context12.next) {\n          case 0:\n            _context12.next = 2;\n            return httpClient.get(apiPrefix + '/settings/' + indexName);\n\n          case 2:\n            response = _context12.sent;\n            return _context12.abrupt('return', response.data);\n\n          case 4:\n          case 'end':\n            return _context12.stop();\n        }\n      }\n    }, _callee12, this);\n  }));\n\n  return function loadIndexSettings(_x12) {\n    return _ref12.apply(this, arguments);\n  };\n}();\n\nvar updateIndexSettings = exports.updateIndexSettings = function () {\n  var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(indexName, settings) {\n    return regeneratorRuntime.wrap(function _callee13$(_context13) {\n      while (1) {\n        switch (_context13.prev = _context13.next) {\n          case 0:\n            _context13.next = 2;\n            return httpClient.put(apiPrefix + '/settings/' + indexName, settings);\n\n          case 2:\n            return _context13.abrupt('return', _context13.sent);\n\n          case 3:\n          case 'end':\n            return _context13.stop();\n        }\n      }\n    }, _callee13, this);\n  }));\n\n  return function updateIndexSettings(_x13, _x14) {\n    return _ref13.apply(this, arguments);\n  };\n}();\n\nvar loadIndexStats = exports.loadIndexStats = function () {\n  var _ref14 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14(indexName) {\n    var response;\n    return regeneratorRuntime.wrap(function _callee14$(_context14) {\n      while (1) {\n        switch (_context14.prev = _context14.next) {\n          case 0:\n            _context14.next = 2;\n            return httpClient.get(apiPrefix + '/stats/' + indexName);\n\n          case 2:\n            response = _context14.sent;\n            return _context14.abrupt('return', response.data);\n\n          case 4:\n          case 'end':\n            return _context14.stop();\n        }\n      }\n    }, _callee14, this);\n  }));\n\n  return function loadIndexStats(_x15) {\n    return _ref14.apply(this, arguments);\n  };\n}();\n\nvar loadIndexMapping = exports.loadIndexMapping = function () {\n  var _ref15 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15(indexName) {\n    var response;\n    return regeneratorRuntime.wrap(function _callee15$(_context15) {\n      while (1) {\n        switch (_context15.prev = _context15.next) {\n          case 0:\n            _context15.next = 2;\n            return httpClient.get(apiPrefix + '/mapping/' + indexName);\n\n          case 2:\n            response = _context15.sent;\n            return _context15.abrupt('return', response.data);\n\n          case 4:\n          case 'end':\n            return _context15.stop();\n        }\n      }\n    }, _callee15, this);\n  }));\n\n  return function loadIndexMapping(_x16) {\n    return _ref15.apply(this, arguments);\n  };\n}();\n\nvar loadIndexData = exports.loadIndexData = function () {\n  var _ref16 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16(type, indexName) {\n    return regeneratorRuntime.wrap(function _callee16$(_context16) {\n      while (1) {\n        switch (_context16.prev = _context16.next) {\n          case 0:\n            _context16.t0 = type;\n            _context16.next = _context16.t0 === 'Mapping' ? 3 : _context16.t0 === 'Settings' ? 4 : _context16.t0 === 'Stats' ? 5 : 6;\n            break;\n\n          case 3:\n            return _context16.abrupt('return', loadIndexMapping(indexName));\n\n          case 4:\n            return _context16.abrupt('return', loadIndexSettings(indexName));\n\n          case 5:\n            return _context16.abrupt('return', loadIndexStats(indexName));\n\n          case 6:\n          case 'end':\n            return _context16.stop();\n        }\n      }\n    }, _callee16, this);\n  }));\n\n  return function loadIndexData(_x17, _x18) {\n    return _ref16.apply(this, arguments);\n  };\n}();\n\nvar _chrome = require('ui/chrome');\n\nvar _chrome2 = _interopRequireDefault(_chrome);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            */\n\nvar httpClient = void 0;\nvar setHttpClient = exports.setHttpClient = function setHttpClient(client) {\n  httpClient = client;\n};\nvar getHttpClient = exports.getHttpClient = function getHttpClient() {\n  return httpClient;\n};\nvar apiPrefix = _chrome2.default.addBasePath('/api/index_management');",null]}