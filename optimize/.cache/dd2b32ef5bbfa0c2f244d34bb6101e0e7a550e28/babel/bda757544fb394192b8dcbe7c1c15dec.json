{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/packages/kbn-interpreter/target/common/lib/ast.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/packages/kbn-interpreter/target/common/lib/ast.js","mtime":1567666389526},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof2 = require('babel-runtime/helpers/typeof');\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nexports.fromExpression = fromExpression;\nexports.safeElementFromExpression = safeElementFromExpression;\nexports.toExpression = toExpression;\n\nvar _get_type = require('./get_type');\n\nvar _grammar = require('./grammar');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : { default: obj };\n}\n\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nfunction getArgumentString(arg, argKey) {\n  var level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n  var type = (0, _get_type.getType)(arg);\n\n  function maybeArgKey(argKey, argString) {\n    return argKey == null || argKey === '_' ? argString : argKey + '=' + argString;\n  }\n\n  if (type === 'string') {\n    // correctly (re)escape double quotes\n    var escapedArg = arg.replace(/[\\\\\"]/g, '\\\\$&'); // $& means the whole matched string\n    return maybeArgKey(argKey, '\"' + escapedArg + '\"');\n  }\n\n  if (type === 'boolean' || type === 'null' || type === 'number') {\n    // use values directly\n    return maybeArgKey(argKey, '' + arg);\n  }\n\n  if (type === 'expression') {\n    // build subexpressions\n    return maybeArgKey(argKey, '{' + getExpression(arg.chain, level + 1) + '}');\n  }\n\n  // unknown type, throw with type value\n  throw new Error('Invalid argument type in AST: ' + type);\n}\n\nfunction getExpressionArgs(block) {\n  var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n  var args = block.arguments;\n  var hasValidArgs = (typeof args === 'undefined' ? 'undefined' : (0, _typeof3.default)(args)) === 'object' && args != null && !Array.isArray(args);\n\n  if (!hasValidArgs) throw new Error('Arguments can only be an object');\n\n  var argKeys = Object.keys(args);\n  var MAX_LINE_LENGTH = 80; // length before wrapping arguments\n  return argKeys.map(function (argKey) {\n    return args[argKey].reduce(function (acc, arg) {\n      var argString = getArgumentString(arg, argKey, level);\n      var lineLength = acc.split('\\n').pop().length;\n\n      // if arg values are too long, move it to the next line\n      if (level === 0 && lineLength + argString.length > MAX_LINE_LENGTH) {\n        return acc + '\\n  ' + argString;\n      }\n\n      // append arg values to existing arg values\n      if (lineLength > 0) return acc + ' ' + argString;\n\n      // start the accumulator with the first arg value\n      return argString;\n    }, '');\n  });\n}\n\nfunction fnWithArgs(fnName, args) {\n  if (!args || args.length === 0) return fnName;\n  return fnName + ' ' + args.join(' ');\n}\n\nfunction getExpression(chain) {\n  var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n  if (!chain) throw new Error('Expressions must contain a chain');\n\n  // break new functions onto new lines if we're not in a nested/sub-expression\n  var separator = level > 0 ? ' | ' : '\\n| ';\n\n  return chain.map(function (chainObj) {\n    var type = (0, _get_type.getType)(chainObj);\n\n    if (type === 'function') {\n      var fn = chainObj.function;\n      if (!fn || fn.length === 0) throw new Error('Functions must have a function name');\n\n      var expArgs = getExpressionArgs(chainObj, level);\n\n      return fnWithArgs(fn, expArgs);\n    }\n  }, []).join(separator);\n}\n\nfunction fromExpression(expression) {\n  var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'expression';\n\n  try {\n    return (0, _grammar.parse)(String(expression), { startRule: type });\n  } catch (e) {\n    throw new Error('Unable to parse expression: ' + e.message);\n  }\n}\n\n// TODO: OMG This is so bad, we need to talk about the right way to handle bad expressions since some are element based and others not\nfunction safeElementFromExpression(expression) {\n  try {\n    return fromExpression(expression);\n  } catch (e) {\n    return fromExpression('markdown\\n\"## Crud.\\nCanvas could not parse this element\\'s expression. I am so sorry this error isn\\'t more useful. I promise it will be soon.\\n\\nThanks for understanding,\\n#### Management\\n\"');\n  }\n}\n\n// TODO: Respect the user's existing formatting\nfunction toExpression(astObj) {\n  var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'expression';\n\n  if (type === 'argument') return getArgumentString(astObj);\n\n  var validType = ['expression', 'function'].includes((0, _get_type.getType)(astObj));\n  if (!validType) throw new Error('Expression must be an expression or argument function');\n\n  if ((0, _get_type.getType)(astObj) === 'expression') {\n    if (!Array.isArray(astObj.chain)) throw new Error('Expressions must contain a chain');\n\n    return getExpression(astObj.chain);\n  }\n\n  var expArgs = getExpressionArgs(astObj);\n  return fnWithArgs(astObj.function, expArgs);\n}",null]}