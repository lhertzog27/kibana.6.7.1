{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/monitoring/public/services/license.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/monitoring/public/services/license.js","mtime":1567631712099},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\nopyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\nor more contributor license agreements. Licensed under the Elastic License;\nyou may not use this file except in compliance with the Elastic License.\nn\nvar _lodash = require('lodash');\n\nvar _modules = require('ui/modules');\n\nvar _constants = require('../../common/constants');\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar uiModule = _modules.uiModules.get('monitoring/license', []);\nuiModule.service('license', function () {\n  return new (function () {\n    function LicenseService() {\n      _classCallCheck(this, LicenseService);\n\n      // do not initialize with usable state\n      this.license = {\n        type: null,\n        expiry_date_in_millis: -Infinity\n      };\n    }\n\n    // we're required to call this initially\n\n\n    _createClass(LicenseService, [{\n      key: 'setLicense',\n      value: function setLicense(license) {\n        this.license = license;\n      }\n    }, {\n      key: 'isBasic',\n      value: function isBasic() {\n        return this.license.type === 'basic';\n      }\n    }, {\n      key: 'mlIsSupported',\n      value: function mlIsSupported() {\n        return (0, _lodash.contains)(_constants.ML_SUPPORTED_LICENSES, this.license.type);\n      }\n    }, {\n      key: 'doesExpire',\n      value: function doesExpire() {\n        var expiryDateInMillis = this.license.expiry_date_in_millis;\n\n        return expiryDateInMillis !== undefined;\n      }\n    }, {\n      key: 'isActive',\n      value: function isActive() {\n        var expiryDateInMillis = this.license.expiry_date_in_millis;\n\n        return new Date().getTime() < expiryDateInMillis;\n      }\n    }, {\n      key: 'isExpired',\n      value: function isExpired() {\n        if (this.doesExpire()) {\n          var expiryDateInMillis = this.license.expiry_date_in_millis;\n\n          return new Date().getTime() >= expiryDateInMillis;\n        }\n        return false;\n      }\n    }]);\n\n    return LicenseService;\n  }())();\n});",null]}