{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/canvas_plugin_src/functions/common/csv.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/canvas_plugin_src/functions/common/csv.js","mtime":1567631711897},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.csv = undefined;\n\nvar _papaparse = require('papaparse');\n\nvar _papaparse2 = _interopRequireDefault(_papaparse);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar csv = exports.csv = function csv() {\n  return {\n    name: 'csv',\n    type: 'datatable',\n    context: {\n      types: ['null']\n    },\n    args: {\n      data: {\n        aliases: ['_'],\n        types: ['string'],\n        help: 'CSV data to use'\n      },\n      delimiter: {\n        types: ['string'],\n        help: 'Data separation character'\n      },\n      newline: {\n        types: ['string'],\n        help: 'Row separation character'\n      }\n    },\n    help: 'Create datatable from csv input',\n    fn: function fn(context, args) {\n      var csvString = args.data,\n          delimiter = args.delimiter,\n          newline = args.newline;\n\n\n      var config = {\n        transform: function transform(val) {\n          if (val.indexOf('\"') >= 0) {\n            var trimmed = val.trim();\n            return trimmed.replace(/(^\\\"|\\\"$)/g, '');\n          }\n          return val;\n        }\n      };\n\n      if (delimiter != null) {\n        config.delimiter = delimiter;\n      }\n      if (newline != null) {\n        config.newline = newline;\n      }\n\n      // TODO: handle errors, check output.errors\n      var output = _papaparse2.default.parse(csvString, config);\n\n      // output.data is an array of arrays, rows and values in each row\n      return output.data.reduce(function (acc, row, i) {\n        if (i === 0) {\n          // first row, assume header values\n          row.forEach(function (colName) {\n            return acc.columns.push({ name: colName.trim(), type: 'string' });\n          });\n        } else {\n          // any other row is a data row\n          var rowObj = row.reduce(function (rowAcc, colValue, j) {\n            var colName = acc.columns[j].name;\n            rowAcc[colName] = colValue;\n            return rowAcc;\n          }, {});\n\n          acc.rows.push(rowObj);\n        }\n\n        return acc;\n      }, {\n        type: 'datatable',\n        columns: [],\n        rows: []\n      });\n    }\n  };\n}; /*\n    * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n    * or more contributor license agreements. Licensed under the Elastic License;\n    * you may not use this file except in compliance with the Elastic License.\n    */",null]}