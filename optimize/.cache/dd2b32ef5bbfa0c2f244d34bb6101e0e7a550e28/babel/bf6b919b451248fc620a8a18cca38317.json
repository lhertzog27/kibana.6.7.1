{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/ui/public/vis/request_handlers/courier.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/vis/request_handlers/courier.js","mtime":1567631711772},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CourierRequestHandlerProvider = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _lodash = require('lodash');\n\nvar _i18n = require('@kbn/i18n');\n\nvar _vis_request_handlers = require('../../registry/vis_request_handlers');\n\nvar _calculate_object_hash = require('../lib/calculate_object_hash');\n\nvar _courier_inspector_utils = require('../../courier/utils/courier_inspector_utils');\n\nvar _tabify = require('../../agg_response/tabify/tabify');\n\nvar _build_tabular_inspector_data = require('../../inspector/build_tabular_inspector_data');\n\nvar _get_time = require('../../timefilter/get_time');\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * Licensed to Elasticsearch B.V. under one or more contributor\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * license agreements. See the NOTICE file distributed with\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * this work for additional information regarding copyright\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * ownership. Elasticsearch B.V. licenses this file to you under\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * the Apache License, Version 2.0 (the \"License\"); you may\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * not use this file except in compliance with the License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * You may obtain a copy of the License at\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            *    http://www.apache.org/licenses/LICENSE-2.0\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * Unless required by applicable law or agreed to in writing,\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * software distributed under the License is distributed on an\nn                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * KIND, either express or implied.  See the License for the\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * specific language governing permissions and limitations\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * under the License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            */\n\nvar CourierRequestHandlerProvider = function CourierRequestHandlerProvider() {\n\n  return {\n    name: 'courier',\n    handler: function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_ref) {\n        var searchSource = _ref.searchSource,\n            aggs = _ref.aggs,\n            timeRange = _ref.timeRange,\n            query = _ref.query,\n            filters = _ref.filters,\n            forceFetch = _ref.forceFetch,\n            partialRows = _ref.partialRows,\n            metricsAtAllLevels = _ref.metricsAtAllLevels,\n            inspectorAdapters = _ref.inspectorAdapters,\n            minimalColumns = _ref.minimalColumns,\n            queryFilter = _ref.queryFilter;\n\n        var timeFilterSearchSource, requestSearchSource, reqBody, queryHash, shouldQuery, request, response, resp, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, agg, parsedTimeRange, tabifyParams, tabifyCacheHash, shouldCalculateNewTabify;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n\n                // Create a new search source that inherits the original search source\n                // but has the appropriate timeRange applied via a filter.\n                // This is a temporary solution until we properly pass down all required\n                // information for the request to the request handler (https://github.com/elastic/kibana/issues/16641).\n                // Using callParentStartHandlers: true we make sure, that the parent searchSource\n                // onSearchRequestStart will be called properly even though we use an inherited\n                // search source.\n                timeFilterSearchSource = searchSource.createChild({ callParentStartHandlers: true });\n                requestSearchSource = timeFilterSearchSource.createChild({ callParentStartHandlers: true });\n\n\n                aggs.setTimeRange(timeRange);\n\n                // For now we need to mirror the history of the passed search source, since\n                // the request inspector wouldn't work otherwise.\n                Object.defineProperty(requestSearchSource, 'history', {\n                  get: function get() {\n                    return searchSource.history;\n                  },\n                  set: function set(history) {\n                    return searchSource.history = history;\n                  }\n                });\n\n                requestSearchSource.setField('aggs', function () {\n                  return aggs.toDsl(metricsAtAllLevels);\n                });\n\n                requestSearchSource.onRequestStart(function (searchSource, searchRequest) {\n                  return aggs.onSearchRequestStart(searchSource, searchRequest);\n                });\n\n                if (timeRange) {\n                  timeFilterSearchSource.setField('filter', function () {\n                    return (0, _get_time.getTime)(searchSource.getField('index'), timeRange);\n                  });\n                }\n\n                requestSearchSource.setField('filter', filters);\n                requestSearchSource.setField('query', query);\n\n                _context.next = 11;\n                return requestSearchSource.getSearchRequestBody();\n\n              case 11:\n                reqBody = _context.sent;\n                queryHash = (0, _calculate_object_hash.calculateObjectHash)(reqBody);\n                // We only need to reexecute the query, if forceFetch was true or the hash of the request body has changed\n                // since the last request\n\n                shouldQuery = forceFetch || searchSource.lastQuery !== queryHash;\n\n                if (!shouldQuery) {\n                  _context.next = 34;\n                  break;\n                }\n\n                inspectorAdapters.requests.reset();\n                request = inspectorAdapters.requests.start(_i18n.i18n.translate('common.ui.vis.courier.inspector.dataRequest.title', { defaultMessage: 'Data' }), {\n                  description: _i18n.i18n.translate('common.ui.vis.courier.inspector.dataRequest.description', { defaultMessage: 'This request queries Elasticsearch to fetch the data for the visualization.' })\n                });\n\n                request.stats((0, _courier_inspector_utils.getRequestInspectorStats)(requestSearchSource));\n\n                _context.prev = 18;\n                _context.next = 21;\n                return requestSearchSource.fetch();\n\n              case 21:\n                response = _context.sent;\n\n\n                searchSource.lastQuery = queryHash;\n\n                request.stats((0, _courier_inspector_utils.getResponseInspectorStats)(searchSource, response)).ok({ json: response });\n\n                searchSource.rawResponse = response;\n                _context.next = 31;\n                break;\n\n              case 27:\n                _context.prev = 27;\n                _context.t0 = _context['catch'](18);\n\n                // Log any error during request to the inspector\n                request.error({ json: _context.t0 });\n                throw _context.t0;\n\n              case 31:\n                _context.prev = 31;\n\n                // Add the request body no matter if things went fine or not\n                requestSearchSource.getSearchRequestBody().then(function (req) {\n                  request.json(req);\n                });\n                return _context.finish(31);\n\n              case 34:\n                resp = (0, _lodash.cloneDeep)(searchSource.rawResponse);\n                _iteratorNormalCompletion = true;\n                _didIteratorError = false;\n                _iteratorError = undefined;\n                _context.prev = 38;\n                _iterator = aggs[Symbol.iterator]();\n\n              case 40:\n                if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {\n                  _context.next = 49;\n                  break;\n                }\n\n                agg = _step.value;\n\n                if (!(0, _lodash.has)(agg, 'type.postFlightRequest')) {\n                  _context.next = 46;\n                  break;\n                }\n\n                _context.next = 45;\n                return agg.type.postFlightRequest(resp, aggs, agg, requestSearchSource, inspectorAdapters);\n\n              case 45:\n                resp = _context.sent;\n\n              case 46:\n                _iteratorNormalCompletion = true;\n                _context.next = 40;\n                break;\n\n              case 49:\n                _context.next = 55;\n                break;\n\n              case 51:\n                _context.prev = 51;\n                _context.t1 = _context['catch'](38);\n                _didIteratorError = true;\n                _iteratorError = _context.t1;\n\n              case 55:\n                _context.prev = 55;\n                _context.prev = 56;\n\n                if (!_iteratorNormalCompletion && _iterator.return) {\n                  _iterator.return();\n                }\n\n              case 58:\n                _context.prev = 58;\n\n                if (!_didIteratorError) {\n                  _context.next = 61;\n                  break;\n                }\n\n                throw _iteratorError;\n\n              case 61:\n                return _context.finish(58);\n\n              case 62:\n                return _context.finish(55);\n\n              case 63:\n\n                searchSource.finalResponse = resp;\n\n                parsedTimeRange = timeRange ? (0, _get_time.getTime)(aggs.indexPattern, timeRange) : null;\n                tabifyParams = {\n                  minimalColumns: minimalColumns,\n                  partialRows: partialRows,\n                  timeRange: parsedTimeRange ? parsedTimeRange.range : undefined\n                };\n                tabifyCacheHash = (0, _calculate_object_hash.calculateObjectHash)(_extends({ tabifyAggs: aggs }, tabifyParams));\n                // We only need to reexecute tabify, if either we did a new request or some input params to tabify changed\n\n                shouldCalculateNewTabify = shouldQuery || searchSource.lastTabifyHash !== tabifyCacheHash;\n\n\n                if (shouldCalculateNewTabify) {\n                  searchSource.lastTabifyHash = tabifyCacheHash;\n                  searchSource.tabifiedResponse = (0, _tabify.tabifyAggResponse)(aggs, searchSource.finalResponse, tabifyParams);\n                }\n\n                inspectorAdapters.data.setTabularLoader(function () {\n                  return (0, _build_tabular_inspector_data.buildTabularInspectorData)(searchSource.tabifiedResponse, queryFilter);\n                }, { returnsFormattedValues: true });\n\n                return _context.abrupt('return', searchSource.tabifiedResponse);\n\n              case 71:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[18, 27, 31, 34], [38, 51, 55, 63], [56,, 58, 62]]);\n      }));\n\n      function handler(_x) {\n        return _ref2.apply(this, arguments);\n      }\n\n      return handler;\n    }()\n  };\n};\n\n_vis_request_handlers.VisRequestHandlersRegistryProvider.register(CourierRequestHandlerProvider);\n\nexports.CourierRequestHandlerProvider = CourierRequestHandlerProvider;",null]}