{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/canvas_plugin_src/functions/common/font.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/canvas_plugin_src/functions/common/font.js","mtime":1567631711897},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.font = undefined;\n\nvar _inlineStyle = require('inline-style');\n\nvar _inlineStyle2 = _interopRequireDefault(_inlineStyle);\n\nvar _fonts = require('../../../common/lib/fonts');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nvar weights = ['normal', 'bold', 'bolder', 'lighter', '100', '200', '300', '400', '500', '600', '700', '800', '900'];\nvar alignments = ['center', 'left', 'right', 'justify'];\n\nvar font = exports.font = function font() {\n  return {\n    name: 'font',\n    aliases: [],\n    type: 'style',\n    help: 'Create a font style',\n    context: {\n      types: ['null']\n    },\n    args: {\n      size: {\n        types: ['number'],\n        help: 'Font size (px)',\n        default: 14\n      },\n      lHeight: {\n        types: ['number'],\n        aliases: ['lineHeight'],\n        help: 'Line height (px)'\n      },\n      family: {\n        types: ['string'],\n        default: '\"' + _fonts.openSans.value + '\"',\n        help: 'An acceptable CSS web font string'\n      },\n      color: {\n        types: ['string', 'null'],\n        help: 'Text color'\n      },\n      weight: {\n        types: ['string'],\n        help: 'Set the font weight, e.g. normal, bold, bolder, lighter, 100, 200, 300, 400, 500, 600, 700, 800, 900',\n        default: 'normal',\n        options: weights\n      },\n      underline: {\n        types: ['boolean'],\n        default: false,\n        help: 'Underline the text, true or false',\n        options: [true, false]\n      },\n      italic: {\n        types: ['boolean'],\n        default: false,\n        help: 'Italicize, true or false',\n        options: [true, false]\n      },\n      align: {\n        types: ['string'],\n        help: 'Horizontal text alignment',\n        default: 'left',\n        options: alignments\n      }\n    },\n    fn: function fn(context, args) {\n      if (!weights.includes(args.weight)) {\n        throw new Error('Invalid font weight: \\'' + args.weight + '\\'');\n      }\n      if (!alignments.includes(args.align)) {\n        throw new Error('Invalid text alignment: \\'' + args.align + '\\'');\n      }\n\n      // the line height shouldn't ever be lower than the size\n      var lineHeight = args.lHeight ? args.lHeight + 'px' : 1;\n\n      var spec = {\n        fontFamily: args.family,\n        fontWeight: args.weight,\n        fontStyle: args.italic ? 'italic' : 'normal',\n        textDecoration: args.underline ? 'underline' : 'none',\n        textAlign: args.align,\n        fontSize: args.size + 'px', // apply font size as a pixel setting\n        lineHeight: lineHeight // apply line height as a pixel setting\n      };\n\n      // conditionally apply styles based on input\n      if (args.color) {\n        spec.color = args.color;\n      }\n\n      return {\n        type: 'style',\n        spec: spec,\n        css: (0, _inlineStyle2.default)(spec)\n      };\n    }\n  };\n};",null]}