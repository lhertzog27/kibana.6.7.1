{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/cross_cluster_replication/public/register_routes.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/cross_cluster_replication/public/register_routes.js","mtime":1567631711955},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nvar _reactDom = require('react-dom');\n\nvar _chrome = require('ui/chrome');\n\nvar _chrome2 = _interopRequireDefault(_chrome);\n\nvar _management = require('ui/management');\n\nvar _routes = require('ui/routes');\n\nvar _routes2 = _interopRequireDefault(_routes);\n\nvar _xpack_info = require('plugins/xpack_main/services/xpack_info');\n\nvar _i18n = require('@kbn/i18n');\n\nvar _main = require('./main.html');\n\nvar _main2 = _interopRequireDefault(_main);\n\nvar _constants = require('../common/constants');\n\nvar _app = require('./app');\n\nvar _api = require('./app/services/api');\n\nvar _license = require('./app/services/license');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } } /*\n                                                                                                                                                           * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                           * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                           * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                           */\n\nif (_chrome2.default.getInjected('ccrUiEnabled')) {\n  var esSection = _management.management.getSection('elasticsearch');\n\n  esSection.register('ccr', {\n    visible: true,\n    display: _i18n.i18n.translate('xpack.crossClusterReplication.appTitle', { defaultMessage: 'Cross Cluster Replication' }),\n    order: 4,\n    url: '#' + _constants.BASE_PATH\n  });\n\n  var elem = void 0;\n\n  var CCR_REACT_ROOT = 'ccrReactRoot';\n\n  var unmountReactApp = function unmountReactApp() {\n    return elem && (0, _reactDom.unmountComponentAtNode)(elem);\n  };\n\n  _routes2.default.when(_constants.BASE_PATH + '/:section?/:subsection?/:view?/:id?', {\n    template: _main2.default,\n    resolve: {\n      license: function license(Private) {\n        var xpackInfo = Private(_xpack_info.XPackInfoProvider);\n        return {\n          isAvailable: function isAvailable() {\n            return xpackInfo.get('features.crossClusterReplication.isAvailable');\n          },\n          isActive: function isActive() {\n            return xpackInfo.get('features.crossClusterReplication.isActive');\n          },\n          getReason: function getReason() {\n            return xpackInfo.get('features.crossClusterReplication.message');\n          }\n        };\n      }\n    },\n    controllerAs: 'ccr',\n    controller: function CrossClusterReplicationController($scope, $route, $http, $q) {\n      _classCallCheck(this, CrossClusterReplicationController);\n\n      var _$route$current$local = $route.current.locals.license,\n          isAvailable = _$route$current$local.isAvailable,\n          isActive = _$route$current$local.isActive,\n          getReason = _$route$current$local.getReason;\n\n      (0, _license.setLicense)(isAvailable, isActive, getReason);\n\n      // React-router's <Redirect> does not play well with the angular router. It will cause this controller\n      // to re-execute without the $destroy handler being called. This means that the app will be mounted twice\n      // creating a memory leak when leaving (only 1 app will be unmounted).\n      // To avoid this, we unmount the React app each time we enter the controller.\n      unmountReactApp();\n\n      // NOTE: We depend upon Angular's $http service because it's decorated with interceptors,\n      // e.g. to check license status per request.\n      (0, _api.setHttpClient)($http, $q);\n\n      $scope.$$postDigest(function () {\n        elem = document.getElementById(CCR_REACT_ROOT);\n        (0, _app.renderReact)(elem);\n\n        // Angular Lifecycle\n        var appRoute = $route.current;\n        var stopListeningForLocationChange = $scope.$on('$locationChangeSuccess', function () {\n          var currentRoute = $route.current;\n          var isNavigationInApp = currentRoute.$$route.template === appRoute.$$route.template;\n\n          // When we navigate within CCR, prevent Angular from re-matching the route and rebuild the app\n          if (isNavigationInApp) {\n            $route.current = appRoute;\n          } else {\n            // Any clean up when User leaves the CCR\n          }\n\n          $scope.$on('$destroy', function () {\n            stopListeningForLocationChange && stopListeningForLocationChange();\n            unmountReactApp();\n          });\n        });\n      });\n    }\n  });\n}",null]}