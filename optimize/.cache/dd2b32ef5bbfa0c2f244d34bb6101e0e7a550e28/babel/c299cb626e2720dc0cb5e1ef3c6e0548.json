{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/public/expression_types/view.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/public/expression_types/view.js","mtime":1567631711931},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.viewRegistry = exports.View = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _lodash = require('lodash');\n\nvar _common = require('@kbn/interpreter/common');\n\nvar _function_form = require('./function_form');\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\nvar View = exports.View = function (_FunctionForm) {\n  _inherits(View, _FunctionForm);\n\n  function View(props) {\n    _classCallCheck(this, View);\n\n    var _this = _possibleConstructorReturn(this, (View.__proto__ || Object.getPrototypeOf(View)).call(this, props));\n\n    var propNames = ['help', 'modelArgs', 'requiresContext'];\n    var defaultProps = {\n      help: 'Element: ' + props.name,\n      requiresContext: true\n    };\n\n    Object.assign(_this, defaultProps, (0, _lodash.pick)(props, propNames));\n\n    _this.modelArgs = _this.modelArgs || [];\n\n    if (!Array.isArray(_this.modelArgs)) {\n      throw new Error(_this.name + ' element is invalid, modelArgs must be an array');\n    }\n    return _this;\n  }\n\n  return View;\n}(_function_form.FunctionForm);\n\nvar ViewRegistry = function (_Registry) {\n  _inherits(ViewRegistry, _Registry);\n\n  function ViewRegistry() {\n    _classCallCheck(this, ViewRegistry);\n\n    return _possibleConstructorReturn(this, (ViewRegistry.__proto__ || Object.getPrototypeOf(ViewRegistry)).apply(this, arguments));\n  }\n\n  _createClass(ViewRegistry, [{\n    key: 'wrapper',\n    value: function wrapper(obj) {\n      return new View(obj);\n    }\n  }]);\n\n  return ViewRegistry;\n}(_common.Registry);\n\nvar viewRegistry = exports.viewRegistry = new ViewRegistry();",null]}