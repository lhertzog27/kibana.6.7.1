{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/monitoring/public/components/logstash/pipeline_viewer/models/graph/vertex.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/monitoring/public/components/logstash/pipeline_viewer/models/graph/vertex.js","mtime":1567631712090},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nvar Vertex = exports.Vertex = function () {\n  function Vertex(graph, json) {\n    _classCallCheck(this, Vertex);\n\n    this.graph = graph;\n    this.update(json);\n  }\n\n  _createClass(Vertex, [{\n    key: \"update\",\n    value: function update(json) {\n      this.json = json;\n    }\n  }, {\n    key: \"descendants\",\n    value: function descendants() {\n      var vertices = [];\n      var edges = [];\n      var pending = [this];\n      var seen = {};\n      while (pending.length > 0) {\n        var vertex = pending.pop();\n        vertex.outgoingEdges.forEach(function (edge) {\n          edges.push(edge);\n          var to = edge.to;\n          if (seen[to.id] !== true) {\n            vertices.push(to);\n            seen[to.id] = true;\n            pending.push(to);\n          }\n        });\n      }\n      return { vertices: vertices, edges: edges };\n    }\n  }, {\n    key: \"name\",\n    get: function get() {\n      return this.json.config_name;\n    }\n  }, {\n    key: \"id\",\n    get: function get() {\n      return this.json.id;\n    }\n  }, {\n    key: \"subtitle\",\n    get: function get() {\n      return this.id;\n    }\n  }, {\n    key: \"incomingEdges\",\n    get: function get() {\n      return this.graph.edgesByTo[this.json.id] || [];\n    }\n  }, {\n    key: \"incomingVertices\",\n    get: function get() {\n      return this.incomingEdges.map(function (e) {\n        return e.from;\n      });\n    }\n  }, {\n    key: \"outgoingEdges\",\n    get: function get() {\n      return this.graph.edgesByFrom[this.json.id] || [];\n    }\n  }, {\n    key: \"outgoingVertices\",\n    get: function get() {\n      return this.outgoingEdges.map(function (e) {\n        return e.to;\n      });\n    }\n  }, {\n    key: \"meta\",\n    get: function get() {\n      return this.json.meta;\n    }\n  }, {\n    key: \"stats\",\n    get: function get() {\n      return this.json.stats || {};\n    }\n  }, {\n    key: \"hasExplicitId\",\n    get: function get() {\n      return Boolean(this.json.explicit_id);\n    }\n  }]);\n\n  return Vertex;\n}();",null]}