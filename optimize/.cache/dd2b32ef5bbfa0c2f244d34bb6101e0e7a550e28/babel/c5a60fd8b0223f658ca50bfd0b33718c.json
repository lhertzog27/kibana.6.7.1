{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/monitoring/public/components/logstash/pipeline_viewer/models/pipeline/if_statement.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/monitoring/public/components/logstash/pipeline_viewer/models/pipeline/if_statement.js","mtime":1567631712091},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.IfStatement = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _statement = require('./statement');\n\nvar _make_statement = require('./make_statement');\n\nvar _utils = require('./utils');\n\nvar _if_element = require('../list/if_element');\n\nvar _else_element = require('../list/else_element');\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } } /*\n                                                                                                                                                                                                     * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                     * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                     * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                     */\n\nfunction makeStatementsForOutgoingVertices(outgoingVertices, statements, next, pipelineStage) {\n  outgoingVertices.forEach(function (vertex) {\n    var currentVertex = vertex;\n    while ((0, _utils.isVertexPipelineStage)(currentVertex, pipelineStage) && currentVertex !== next) {\n      statements.push((0, _make_statement.makeStatement)(currentVertex, pipelineStage));\n      currentVertex = currentVertex.next;\n    }\n  });\n}\n\nfunction addStatementsToList(list, statements, depth, id) {\n  statements.forEach(function (statement) {\n    list.push.apply(list, _toConsumableArray(statement.toList(depth, id)));\n  });\n}\n\nvar IfStatement = exports.IfStatement = function (_Statement) {\n  _inherits(IfStatement, _Statement);\n\n  function IfStatement(vertex, trueStatements, elseStatements) {\n    _classCallCheck(this, IfStatement);\n\n    var _this = _possibleConstructorReturn(this, (IfStatement.__proto__ || Object.getPrototypeOf(IfStatement)).call(this, vertex));\n\n    var name = vertex.name;\n\n\n    _this.condition = name;\n    _this.trueStatements = trueStatements;\n    _this.elseStatements = elseStatements;\n    return _this;\n  }\n\n  _createClass(IfStatement, [{\n    key: 'toList',\n    value: function toList(depth, parentId) {\n      var list = [];\n\n      var ifElement = new _if_element.IfElement(this, depth, parentId);\n      list.push(ifElement);\n\n      var nestedElementDepth = depth + 1;\n      addStatementsToList(list, this.trueStatements, nestedElementDepth, ifElement.id);\n\n      if (this.elseStatements.length) {\n        var elseElement = new _else_element.ElseElement(this, depth, parentId);\n        list.push(elseElement);\n\n        addStatementsToList(list, this.elseStatements, nestedElementDepth, elseElement.id);\n      }\n\n      return list;\n    }\n  }], [{\n    key: 'fromPipelineGraphVertex',\n    value: function fromPipelineGraphVertex(ifVertex, pipelineStage) {\n      var trueStatements = [];\n      var elseStatements = [];\n      var trueOutgoingVertices = ifVertex.trueOutgoingVertices,\n          falseOutgoingVertices = ifVertex.falseOutgoingVertices;\n\n\n      var next = ifVertex.next;\n\n      makeStatementsForOutgoingVertices(trueOutgoingVertices, trueStatements, next, pipelineStage);\n      makeStatementsForOutgoingVertices(falseOutgoingVertices, elseStatements, next, pipelineStage);\n\n      return new IfStatement(ifVertex, trueStatements, elseStatements);\n    }\n  }]);\n\n  return IfStatement;\n}(_statement.Statement);",null]}