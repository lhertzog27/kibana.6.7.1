{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/watcher/public/components/threshold_preview_chart/threshold_preview_chart.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/watcher/public/components/threshold_preview_chart/threshold_preview_chart.js","mtime":1567631712338},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\nopyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\nor more contributor license agreements. Licensed under the Elastic License;\nyou may not use this file except in compliance with the Elastic License.\nn\nvar _moment = require('moment');\n\nvar _moment2 = _interopRequireDefault(_moment);\n\nrequire('ui/filters/moment');\n\nvar _lodash = require('lodash');\n\nvar _modules = require('ui/modules');\n\nvar _time_buckets = require('ui/time_buckets');\n\nrequire('plugins/watcher/components/flot_chart');\n\nrequire('plugins/watcher/components/chart_tooltip');\n\nvar _threshold_preview_chart = require('./threshold_preview_chart.html');\n\nvar _threshold_preview_chart2 = _interopRequireDefault(_threshold_preview_chart);\n\nvar _constants = require('./constants');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar app = _modules.uiModules.get('xpack/watcher');\n\napp.directive('thresholdPreviewChart', function ($injector) {\n  var config = $injector.get('config');\n\n  _moment2.default.tz.setDefault(config.get('dateFormat:tz'));\n\n  return {\n    restrict: 'E',\n    replace: true,\n    template: _threshold_preview_chart2.default,\n    scope: {\n      // A single series (array) of (x, y) points\n      // - Format: [ [ xTimestamp1, yValue1 ], [ xTimestamp2, yValue2 ], ... ]\n      // - Units for timestamp values (xTimestamp1, xTimestamp2, etc.) are ms-since-epoch\n      // - Timestamp values are assumed to be in UTC timezone\n      // - Series array must be sorted in ascending order of timestamp values\n      series: '=',\n\n      startDate: '=',\n      endDate: '=',\n\n      // A single y-axis value\n      thresholdValue: '='\n    },\n    controllerAs: 'thresholdPreviewChart',\n    bindToController: true,\n    controller: function () {\n      function ThresholdPreviewChartController($scope) {\n        var _this = this;\n\n        _classCallCheck(this, ThresholdPreviewChartController);\n\n        this.updateOptions = function (options) {\n          var yAxisRange = _this.buildYAxisRange();\n          _this.options = (0, _lodash.merge)({}, _this.options, options, yAxisRange);\n        };\n\n        this.buildYAxisRange = function () {\n          var parsedThreshold = Number.parseFloat(_this.thresholdValue);\n          var series = _this.data[0];\n\n          if (!series || !(0, _lodash.isNumber)(parsedThreshold)) {\n            return {\n              yaxis: {\n                min: null,\n                max: null\n              }\n            };\n          }\n\n          var VALUE_INDEX = 1;\n          var options = {\n            yaxis: {\n              min: Number.POSITIVE_INFINITY,\n              max: Number.NEGATIVE_INFINITY\n            }\n          };\n\n          (0, _lodash.forEach)(series, function (seriesItem) {\n            var itemValue = seriesItem[VALUE_INDEX];\n\n            if (itemValue !== null) {\n              options.yaxis.min = Math.min(options.yaxis.min, itemValue, parsedThreshold);\n              options.yaxis.max = Math.max(options.yaxis.max, itemValue, parsedThreshold);\n            }\n          });\n\n          return options;\n        };\n\n        this.onPlotHover = function (event, pos, item, plot) {\n          if (!Boolean(item)) {\n            _this.dataPointTooltip = undefined;\n            return;\n          }\n\n          var plotLeft = plot.offset().left - window.pageXOffset;\n          var plotTop = plot.offset().top - window.pageYOffset;\n\n          _this.dataPointTooltip = {\n            plotPosition: {\n              left: plotLeft,\n              top: plotTop,\n              right: plotLeft + plot.width(),\n              bottom: plotTop + plot.height()\n            },\n            pointPosition: {\n              left: item.pageX - window.pageXOffset,\n              top: item.pageY - window.pageYOffset\n            },\n            xValue: item.datapoint[0],\n            yValue: item.datapoint[1]\n          };\n        };\n\n        this.formatAsMoment = function (msSinceEpoch) {\n          return (0, _moment2.default)(msSinceEpoch);\n        };\n\n        this.options = {\n          colors: [_constants.COLORS.SERIES_LINE],\n          grid: {\n            aboveData: true,\n            borderColor: _constants.COLORS.CHART_BORDER,\n            borderWidth: { top: 0, right: 0, bottom: 2, left: 2 },\n            hoverable: true,\n            labelMargin: _constants.MARGINS.AXES_LABELS\n          },\n          series: {\n            lines: {\n              show: true,\n              fill: true,\n              fillColor: _constants.COLORS.AREA_FILL\n            }\n          },\n          yaxis: {\n            tickLength: 0\n          }\n        };\n\n        $scope.$watch('thresholdPreviewChart.series', function (series) {\n          _this.data = [series];\n\n          var timeBuckets = new _time_buckets.TimeBuckets();\n          timeBuckets.setBounds({\n            min: _this.startDate,\n            max: _this.endDate\n          });\n          var momentFormat = timeBuckets.getScaledDateFormat();\n\n          var options = {\n            xaxis: {\n              mode: 'time',\n              min: _this.startDate,\n              max: _this.endDate,\n              tickFormatter: function tickFormatter(val) {\n                return (0, _moment2.default)(val).format(momentFormat);\n              }\n            }\n          };\n\n          _this.updateOptions(options);\n        });\n\n        $scope.$watch('thresholdPreviewChart.thresholdValue', function (thresholdValue) {\n          var parsedThreshold = Number.parseFloat(thresholdValue);\n\n          var options = {\n            grid: {\n              markings: []\n            }\n          };\n\n          if ((0, _lodash.isNumber)(parsedThreshold)) {\n            var thresholdLine = {\n              yaxis: {\n                from: parsedThreshold,\n                to: parsedThreshold\n              },\n              color: _constants.COLORS.THRESHOLD_LINE,\n              lineWidth: _constants.LINE_WIDTHS.THRESHOLD_LINE\n            };\n\n            options.grid.markings.push(thresholdLine);\n          }\n\n          _this.updateOptions(options);\n        });\n      }\n\n      _createClass(ThresholdPreviewChartController, [{\n        key: 'isDataExists',\n        get: function get() {\n          return Boolean(this.series);\n        }\n      }]);\n\n      return ThresholdPreviewChartController;\n    }()\n  };\n});",null]}