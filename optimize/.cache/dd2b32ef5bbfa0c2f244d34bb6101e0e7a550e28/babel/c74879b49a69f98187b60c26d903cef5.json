{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/explorer/select_limit/select_limit.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/explorer/select_limit/select_limit.js","mtime":1567631712042},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SelectLimit = exports.mlSelectLimitService = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _lodash = require('lodash');\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _eui = require('@elastic/eui');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\n/*\n * React component for rendering a select element with limit options.\n */\n\n\nvar optionsMap = {\n  '5': 5,\n  '10': 10,\n  '25': 25,\n  '50': 50\n};\n\nvar LIMIT_OPTIONS = [{ val: 5, display: '5' }, { val: 10, display: '10' }, { val: 25, display: '25' }, { val: 50, display: '50' }];\n\nfunction optionValueToLimit(value) {\n  // Get corresponding limit object with required display and val properties from the specified value.\n  var limit = LIMIT_OPTIONS.find(function (opt) {\n    return opt.val === value;\n  });\n\n  // Default to 10 if supplied value doesn't map to one of the options.\n  if (limit === undefined) {\n    limit = LIMIT_OPTIONS[1];\n  }\n\n  return limit;\n}\n\n// This service will be populated by the corresponding angularjs based one.\nvar mlSelectLimitService = exports.mlSelectLimitService = {\n  initialized: false,\n  state: null\n};\n\nvar SelectLimit = function (_Component) {\n  _inherits(SelectLimit, _Component);\n\n  function SelectLimit(props) {\n    _classCallCheck(this, SelectLimit);\n\n    // Restore the limit from the state, or default to 10.\n    var _this = _possibleConstructorReturn(this, (SelectLimit.__proto__ || Object.getPrototypeOf(SelectLimit)).call(this, props));\n\n    _this.onChange = function (e) {\n      var valueDisplay = e.target.value;\n      _this.setState({ valueDisplay: valueDisplay });\n      var limit = optionValueToLimit(optionsMap[valueDisplay]);\n\n      if (_this.mlSelectLimitService !== undefined) {\n        _this.mlSelectLimitService.state.set('limit', limit).changed();\n      } else {\n        _this.props.onChangeHandler(limit);\n      }\n    };\n\n    _this.getOptions = function () {\n      return LIMIT_OPTIONS.map(function (_ref) {\n        var display = _ref.display,\n            val = _ref.val;\n        return {\n          value: display,\n          text: val\n        };\n      });\n    };\n\n    if (mlSelectLimitService.initialized) {\n      _this.mlSelectLimitService = mlSelectLimitService;\n    }\n\n    _this.state = {\n      valueDisplay: LIMIT_OPTIONS[1].display\n    };\n    return _this;\n  }\n\n  _createClass(SelectLimit, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      // set initial state from service if available\n      if (this.mlSelectLimitService !== undefined) {\n        var limitState = this.mlSelectLimitService.state.get('limit');\n        var limitValue = (0, _lodash.get)(limitState, 'val', 10);\n        var limit = optionValueToLimit(limitValue);\n        // set initial selected option equal to limit value\n        var selectedOption = LIMIT_OPTIONS.find(function (opt) {\n          return opt.val === limit.val;\n        });\n        this.mlSelectLimitService.state.set('limit', limit);\n        this.setState({ valueDisplay: selectedOption.display });\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      return _react2.default.createElement(_eui.EuiSelect, {\n        options: this.getOptions(),\n        onChange: this.onChange,\n        value: this.state.valueDisplay\n      });\n    }\n  }]);\n\n  return SelectLimit;\n}(_react.Component);\n\nSelectLimit.propTypes = {\n  onChangeHandler: _propTypes2.default.func\n};\n\nSelectLimit.defaultProps = {\n  onChangeHandler: function onChangeHandler() {}\n};\n\nexports.SelectLimit = SelectLimit;",null]}