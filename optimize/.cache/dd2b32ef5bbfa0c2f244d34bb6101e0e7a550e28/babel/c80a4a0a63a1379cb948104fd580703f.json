{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/rollup/public/crud_app/services/jobs.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/rollup/public/crud_app/services/jobs.js","mtime":1567631712290},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.serializeJob = serializeJob;\nexports.deserializeJob = deserializeJob;\nexports.deserializeJobs = deserializeJobs;\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nfunction removeEmptyValues(object) {\n  Object.keys(object).forEach(function (key) {\n    if (object[key] == null || object[key].trim() === '') {\n      delete object[key];\n    }\n  });\n\n  return object;\n}\n\nfunction serializeJob(jobConfig) {\n  var id = jobConfig.id,\n      indexPattern = jobConfig.indexPattern,\n      rollupIndex = jobConfig.rollupIndex,\n      rollupCron = jobConfig.rollupCron,\n      dateHistogramInterval = jobConfig.dateHistogramInterval,\n      rollupDelay = jobConfig.rollupDelay,\n      rollupPageSize = jobConfig.rollupPageSize,\n      dateHistogramTimeZone = jobConfig.dateHistogramTimeZone,\n      dateHistogramField = jobConfig.dateHistogramField,\n      metrics = jobConfig.metrics,\n      terms = jobConfig.terms,\n      histogram = jobConfig.histogram,\n      histogramInterval = jobConfig.histogramInterval;\n\n\n  var serializedJob = {\n    id: id,\n    index_pattern: indexPattern,\n    rollup_index: rollupIndex,\n    cron: rollupCron,\n    page_size: rollupPageSize,\n    groups: {\n      date_histogram: removeEmptyValues({\n        interval: dateHistogramInterval,\n        delay: rollupDelay,\n        time_zone: dateHistogramTimeZone,\n        field: dateHistogramField\n      })\n    }\n  };\n\n  if (terms.length) {\n    serializedJob.groups.terms = {\n      fields: terms.map(function (_ref) {\n        var name = _ref.name;\n        return name;\n      })\n    };\n  }\n\n  if (histogram.length) {\n    serializedJob.groups.histogram = {\n      interval: histogramInterval,\n      fields: histogram.map(function (_ref2) {\n        var name = _ref2.name;\n        return name;\n      })\n    };\n  }\n\n  if (metrics.length) {\n    serializedJob.metrics = [];\n    metrics.forEach(function (_ref3) {\n      var name = _ref3.name,\n          types = _ref3.types;\n\n      // Exclude any metrics which have been selected but not configured with any types.\n      if (types.length) {\n        serializedJob.metrics.push({\n          field: name,\n          metrics: types\n        });\n      }\n    });\n  }\n\n  return serializedJob;\n}\n\nfunction deserializeJob(job) {\n  var _job$config = job.config,\n      id = _job$config.id,\n      indexPattern = _job$config.index_pattern,\n      rollupIndex = _job$config.rollup_index,\n      rollupCron = _job$config.cron,\n      metrics = _job$config.metrics,\n      _job$config$groups = _job$config.groups,\n      _job$config$groups$da = _job$config$groups.date_histogram,\n      dateHistogramInterval = _job$config$groups$da.interval,\n      rollupDelay = _job$config$groups$da.delay,\n      dateHistogramTimeZone = _job$config$groups$da.time_zone,\n      dateHistogramField = _job$config$groups$da.field,\n      terms = _job$config$groups.terms,\n      histogram = _job$config$groups.histogram,\n      status = job.status.job_state,\n      _job$stats = job.stats,\n      documentsProcessed = _job$stats.documents_processed,\n      pagesProcessed = _job$stats.pages_processed,\n      rollupsIndexed = _job$stats.rollups_indexed,\n      triggerCount = _job$stats.trigger_count;\n\n\n  var json = job;\n\n  var deserializedJob = {\n    id: id,\n    indexPattern: indexPattern,\n    rollupIndex: rollupIndex,\n    rollupCron: rollupCron,\n    dateHistogramInterval: dateHistogramInterval,\n    rollupDelay: rollupDelay,\n    dateHistogramTimeZone: dateHistogramTimeZone,\n    dateHistogramField: dateHistogramField,\n    status: status,\n    metrics: [],\n    terms: [],\n    histogram: [],\n    documentsProcessed: documentsProcessed,\n    pagesProcessed: pagesProcessed,\n    rollupsIndexed: rollupsIndexed,\n    triggerCount: triggerCount,\n    json: json\n  };\n\n  if (metrics) {\n    metrics.forEach(function (_ref4) {\n      var field = _ref4.field,\n          metrics = _ref4.metrics;\n\n      deserializedJob.metrics.push({\n        name: field,\n        types: metrics\n      });\n    });\n  }\n\n  if (terms) {\n    deserializedJob.terms = terms.fields.map(function (name) {\n      return { name: name };\n    });\n  }\n\n  if (histogram) {\n    deserializedJob.histogram = histogram.fields.map(function (name) {\n      return { name: name };\n    });\n    deserializedJob.histogramInterval = histogram.interval;\n  }\n\n  return deserializedJob;\n}\n\nfunction deserializeJobs(jobs) {\n  return jobs.map(deserializeJob);\n}",null]}