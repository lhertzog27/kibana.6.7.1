{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/common/util/validation_utils.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/common/util/validation_utils.js","mtime":1567631712025},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getMostSevereMessageStatus = getMostSevereMessageStatus;\nexports.addJobValidationMethods = addJobValidationMethods;\n\nvar _validation = require('../constants/validation');\n\n// get the most severe status level from a list of messages\nvar contains = function contains(arr, str) {\n  return arr.findIndex(function (v) {\n    return v === str;\n  }) >= 0;\n}; /*\n    * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n    * or more contributor license agreements. Licensed under the Elastic License;\n    * you may not use this file except in compliance with the Elastic License.\n    */\n\nfunction getMostSevereMessageStatus(messages) {\n  var statuses = messages.map(function (m) {\n    return m.status;\n  });\n  return [_validation.VALIDATION_STATUS.INFO, _validation.VALIDATION_STATUS.WARNING, _validation.VALIDATION_STATUS.ERROR].reduce(function (previous, current) {\n    return contains(statuses, current) ? current : previous;\n  }, _validation.VALIDATION_STATUS.SUCCESS);\n}\n\n// extends an angular directive's scope with the necessary methods\n// needed to embed the job validation button\nfunction addJobValidationMethods($scope, service) {\n  $scope.getDuration = function () {\n    return {\n      start: $scope.formConfig.start,\n      end: $scope.formConfig.end\n    };\n  };\n\n  // isCurrentJobConfig is used to track if the form configuration\n  // changed since the last job validation was done\n  $scope.isCurrentJobConfig = false;\n  // need to pass true as third argument here to track granular changes\n  $scope.$watch('formConfig', function () {\n    $scope.isCurrentJobConfig = false;\n  }, true);\n  $scope.getJobConfig = function () {\n    $scope.isCurrentJobConfig = true;\n    return service.getJobFromConfig($scope.formConfig);\n  };\n}",null]}