{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/explorer/explorer_controller.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/explorer/explorer_controller.js","mtime":1567631712041},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nvar _jquery = require('jquery');\n\nvar _jquery2 = _interopRequireDefault(_jquery);\n\nvar _momentTimezone = require('moment-timezone');\n\nvar _momentTimezone2 = _interopRequireDefault(_momentTimezone);\n\nrequire('../components/annotations/annotations_table');\n\nrequire('../components/anomalies_table');\n\nrequire('../components/controls');\n\nrequire('../components/job_select_list');\n\nvar _query_filter = require('ui/filter_bar/query_filter');\n\nvar _explorer = require('./explorer.html');\n\nvar _explorer2 = _interopRequireDefault(_explorer);\n\nvar _routes = require('ui/routes');\n\nvar _routes2 = _interopRequireDefault(_routes);\n\nvar _explorer_utils = require('./explorer_utils');\n\nvar _check_license = require('../license/check_license');\n\nvar _check_privilege = require('../privilege/check_privilege');\n\nvar _index_utils = require('../util/index_utils');\n\nvar _ml_time_buckets = require('plugins/ml/util/ml_time_buckets');\n\nvar _job_select_service = require('../components/job_select_list/job_select_service');\n\nvar _explorer_dashboard_service = require('./explorer_dashboard_service');\n\nvar _field_format_service = require('plugins/ml/services/field_format_service');\n\nvar _job_service = require('../services/job_service');\n\nvar _refresh_interval_watcher = require('../util/refresh_interval_watcher');\n\nvar _timefilter = require('ui/timefilter');\n\nvar _explorer_constants = require('./explorer_constants');\n\nvar _modules = require('ui/modules');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            */\n\n/*\n * Angular controller for the Machine Learning Explorer dashboard. The controller makes\n * multiple queries to Elasticsearch to obtain the data to populate all the components\n * in the view.\n */\n\n_routes2.default.when('/explorer/?', {\n  template: _explorer2.default,\n  resolve: {\n    CheckLicense: _check_license.checkFullLicense,\n    privileges: _check_privilege.checkGetJobsPrivilege,\n    indexPatterns: _index_utils.loadIndexPatterns\n  }\n});\n\nvar _module = _modules.uiModules.get('apps/ml');\n\n_module.controller('MlExplorerController', function ($injector, $scope, $timeout, AppState, Private, config) {\n  var _this = this;\n\n  // Even if they are not used directly anymore in this controller but via imports\n  // in React components, because of the use of AppState and its dependency on angularjs\n  // these services still need to be required here to properly initialize.\n  $injector.get('mlCheckboxShowChartsService');\n  $injector.get('mlSelectIntervalService');\n  $injector.get('mlSelectLimitService');\n  $injector.get('mlSelectSeverityService');\n\n  // $scope should only contain what's actually still necessary for the angular part.\n  // For the moment that's the job selector and the (hidden) filter bar.\n  $scope.jobs = [];\n  $scope.queryFilters = [];\n  _timefilter.timefilter.enableTimeRangeSelector();\n  _timefilter.timefilter.enableAutoRefreshSelector();\n\n  // Pass the timezone to the server for use when aggregating anomalies (by day / hour) for the table.\n  var tzConfig = config.get('dateFormat:tz');\n  $scope.dateFormatTz = tzConfig !== 'Browser' ? tzConfig : _momentTimezone2.default.tz.guess();\n\n  var queryFilter = Private(_query_filter.FilterBarQueryFilterProvider);\n  $scope.mlJobSelectService = Private(_job_select_service.JobSelectServiceProvider);\n  $scope.MlTimeBuckets = Private(_ml_time_buckets.IntervalHelperProvider);\n\n  var resizeTimeout = null;\n\n  _explorer_dashboard_service.mlExplorerDashboardService.init();\n\n  function jobSelectionUpdate(action, _ref) {\n    var fullJobs = _ref.fullJobs,\n        selectedCells = _ref.selectedCells,\n        selectedJobIds = _ref.selectedJobIds;\n\n    var jobs = (0, _explorer_utils.createJobs)(fullJobs).map(function (job) {\n      job.selected = selectedJobIds.some(function (id) {\n        return job.id === id;\n      });\n      return job;\n    });\n\n    var selectedJobs = jobs.filter(function (job) {\n      return job.selected;\n    });\n\n    function fieldFormatServiceCallback() {\n      $scope.jobs = jobs;\n      $scope.$applyAsync();\n\n      var noJobsFound = $scope.jobs.length === 0;\n\n      _explorer_dashboard_service.mlExplorerDashboardService.explorer.changed(action, {\n        loading: false,\n        noJobsFound: noJobsFound,\n        selectedCells: selectedCells,\n        selectedJobs: selectedJobs\n      });\n    }\n\n    // Populate the map of jobs / detectors / field formatters for the selected IDs.\n    _field_format_service.mlFieldFormatService.populateFormats(selectedJobIds, (0, _index_utils.getIndexPatterns)()).catch(function (err) {\n      console.log('Error populating field formats:', err);\n    }).then(function () {\n      fieldFormatServiceCallback();\n    });\n  }\n\n  // Initialize the AppState in which to store filters and swimlane settings.\n  // AppState is used to store state in the URL.\n  $scope.appState = new AppState({\n    filters: [],\n    mlExplorerSwimlane: {}\n  });\n\n  // Load the job info needed by the dashboard, then do the first load.\n  // Calling loadJobs() ensures the full datafeed config is available for building the charts.\n  // Using this listener ensures the jobs will only be loaded and passed on after\n  // <ml-explorer-react-wrapper /> and <Explorer /> have been initialized.\n  function loadJobsListener(action) {\n    if (action === _explorer_constants.EXPLORER_ACTION.LOAD_JOBS) {\n      _job_service.mlJobService.loadJobs().then(function (resp) {\n        if (resp.jobs.length > 0) {\n          // Select any jobs set in the global state (i.e. passed in the URL).\n          var selectedJobIds = $scope.mlJobSelectService.getSelectedJobIds(true);\n          var selectedCells = void 0;\n\n          // keep swimlane selection, restore selectedCells from AppState\n          if ($scope.appState.mlExplorerSwimlane.selectedType !== undefined) {\n            selectedCells = {\n              type: $scope.appState.mlExplorerSwimlane.selectedType,\n              lanes: $scope.appState.mlExplorerSwimlane.selectedLanes,\n              times: $scope.appState.mlExplorerSwimlane.selectedTimes,\n              showTopFieldValues: $scope.appState.mlExplorerSwimlane.showTopFieldValues,\n              viewByFieldName: $scope.appState.mlExplorerSwimlane.viewByFieldName\n            };\n          }\n\n          jobSelectionUpdate(_explorer_constants.EXPLORER_ACTION.INITIALIZE, {\n            fullJobs: resp.jobs,\n            selectedCells: selectedCells,\n            selectedJobIds: selectedJobIds,\n            swimlaneViewByFieldName: $scope.appState.mlExplorerSwimlane.viewByFieldName\n          });\n        } else {\n          _explorer_dashboard_service.mlExplorerDashboardService.explorer.changed(_explorer_constants.EXPLORER_ACTION.RELOAD, {\n            loading: false,\n            noJobsFound: true\n          });\n        }\n      }).catch(function (resp) {\n        console.log('Explorer - error getting job info from elasticsearch:', resp);\n      });\n    }\n  }\n  _explorer_dashboard_service.mlExplorerDashboardService.explorer.watch(loadJobsListener);\n\n  // Listen for changes to job selection.\n  $scope.mlJobSelectService.listenJobSelectionChange($scope, function (event, selectedJobIds) {\n    jobSelectionUpdate(_explorer_constants.EXPLORER_ACTION.JOB_SELECTION_CHANGE, { fullJobs: _job_service.mlJobService.jobs, selectedJobIds: selectedJobIds });\n  });\n\n  // Refresh all the data when the time range is altered.\n  $scope.$listenAndDigestAsync(_timefilter.timefilter, 'fetch', function () {\n    _explorer_dashboard_service.mlExplorerDashboardService.explorer.changed(_explorer_constants.EXPLORER_ACTION.RELOAD);\n  });\n\n  // Add a watcher for auto-refresh of the time filter to refresh all the data.\n  var refreshWatcher = Private(_refresh_interval_watcher.refreshIntervalWatcher);\n  refreshWatcher.init(_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _explorer_dashboard_service.mlExplorerDashboardService.explorer.changed(_explorer_constants.EXPLORER_ACTION.RELOAD);\n\n          case 1:\n          case 'end':\n            return _context.stop();\n        }\n      }\n    }, _callee, _this);\n  })));\n\n  // Redraw the swimlane when the window resizes or the global nav is toggled.\n  function jqueryRedrawOnResize() {\n    if (resizeTimeout !== null) {\n      $timeout.cancel(resizeTimeout);\n    }\n    // Only redraw 100ms after last resize event.\n    resizeTimeout = $timeout(redrawOnResize, 100);\n  }\n  (0, _jquery2.default)(window).resize(jqueryRedrawOnResize);\n\n  var navListener = $scope.$on('globalNav:update', function () {\n    // Run in timeout so that content pane has resized after global nav has updated.\n    $timeout(function () {\n      redrawOnResize();\n    }, 300);\n  });\n\n  function redrawOnResize() {\n    _explorer_dashboard_service.mlExplorerDashboardService.explorer.changed(_explorer_constants.EXPLORER_ACTION.REDRAW);\n  }\n\n  $scope.appStateHandler = function (action, payload) {\n    $scope.appState.fetch();\n\n    if (action === _explorer_constants.APP_STATE_ACTION.CLEAR_SELECTION) {\n      delete $scope.appState.mlExplorerSwimlane.selectedType;\n      delete $scope.appState.mlExplorerSwimlane.selectedLanes;\n      delete $scope.appState.mlExplorerSwimlane.selectedTimes;\n      delete $scope.appState.mlExplorerSwimlane.showTopFieldValues;\n    }\n\n    if (action === _explorer_constants.APP_STATE_ACTION.SAVE_SELECTION) {\n      var swimlaneSelectedCells = payload.swimlaneSelectedCells;\n      $scope.appState.mlExplorerSwimlane.selectedType = swimlaneSelectedCells.type;\n      $scope.appState.mlExplorerSwimlane.selectedLanes = swimlaneSelectedCells.lanes;\n      $scope.appState.mlExplorerSwimlane.selectedTimes = swimlaneSelectedCells.times;\n      $scope.appState.mlExplorerSwimlane.showTopFieldValues = swimlaneSelectedCells.showTopFieldValues;\n      $scope.appState.mlExplorerSwimlane.viewByFieldName = swimlaneSelectedCells.viewByFieldName;\n    }\n\n    if (action === _explorer_constants.APP_STATE_ACTION.SAVE_SWIMLANE_VIEW_BY_FIELD_NAME) {\n      $scope.appState.mlExplorerSwimlane.viewByFieldName = payload.swimlaneViewByFieldName;\n    }\n\n    $scope.appState.save();\n    $scope.$applyAsync();\n  };\n\n  // Refresh the data when the dashboard filters are updated.\n  $scope.$listen(queryFilter, 'update', function () {\n    // TODO - add in filtering functionality.\n    $scope.queryFilters = queryFilter.getFilters();\n    console.log('explorer_controller queryFilter update, filters:', $scope.queryFilters);\n  });\n\n  $scope.$on('$destroy', function () {\n    _explorer_dashboard_service.mlExplorerDashboardService.explorer.unwatch(loadJobsListener);\n    refreshWatcher.cancel();\n    (0, _jquery2.default)(window).off('resize', jqueryRedrawOnResize);\n    // Cancel listening for updates to the global nav state.\n    navListener();\n  });\n});",null]}