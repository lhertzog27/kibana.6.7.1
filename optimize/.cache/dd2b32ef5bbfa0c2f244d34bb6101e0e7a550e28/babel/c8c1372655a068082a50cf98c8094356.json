{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/jobs/jobs_list/components/validate_job.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/jobs/jobs_list/components/validate_job.js","mtime":1567631712052},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateModelMemoryLimit = validateModelMemoryLimit;\nexports.validateGroupNames = validateGroupNames;\nexports.isValidCustomUrls = isValidCustomUrls;\n\nvar _new_job_defaults = require('../../new_job/utils/new_job_defaults');\n\nvar _validate_job = require('../../new_job/simple/components/utils/validate_job');\n\nvar _job_utils = require('../../../../common/util/job_utils');\n\nvar _custom_url_utils = require('../../../util/custom_url_utils');\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } } /*\n                                                                                                                                                                                                     * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                     * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                     * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                     */\n\nfunction validateModelMemoryLimit(mml) {\n  var limits = (0, _new_job_defaults.newJobLimits)();\n  var tempJob = {\n    analysis_limits: {\n      model_memory_limit: mml\n    }\n  };\n\n  var validationResults = (0, _job_utils.validateModelMemoryLimitUnits)(tempJob);\n  var _validationResults = validationResults,\n      valid = _validationResults.valid;\n\n\n  if (valid) {\n    validationResults = (0, _job_utils.validateModelMemoryLimit)(tempJob, limits);\n    valid = validationResults.valid;\n  }\n\n  var modelMemoryLimit = {\n    valid: valid,\n    message: ''\n  };\n\n  (0, _validate_job.populateValidationMessages)(validationResults, { modelMemoryLimit: modelMemoryLimit });\n\n  return modelMemoryLimit;\n}\n\nfunction validateGroupNames(groups) {\n  var tempJob = {\n    groups: groups\n  };\n\n  var validationResults = (0, _job_utils.validateGroupNames)(tempJob);\n  var valid = validationResults.valid;\n\n\n  var groupIds = {\n    valid: valid,\n    message: ''\n  };\n\n  (0, _validate_job.populateValidationMessages)(validationResults, { groupIds: groupIds });\n\n  return groupIds;\n}\n\nfunction isValidCustomUrls(customUrls) {\n  if (customUrls === undefined || customUrls.length === 0) {\n    return true;\n  }\n\n  // Check all the custom URLs have unique labels and the time range is valid.\n  var isInvalidItem = customUrls.some(function (customUrl, index) {\n\n    // Validate the label.\n    var label = customUrl.url_name;\n    var otherUrls = [].concat(_toConsumableArray(customUrls));\n    otherUrls.splice(index, 1); // Don't compare label with itself.\n    var itemValid = (0, _custom_url_utils.isValidLabel)(label, otherUrls);\n    if (itemValid === true) {\n      // Validate the time range.\n      var timeRange = customUrl.time_range;\n      itemValid = (0, _custom_url_utils.isValidTimeRange)(timeRange);\n    }\n\n    return !itemValid;\n  });\n\n  return !isInvalidItem;\n}",null]}