{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/rollup/public/crud_app/services/api_errors.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/rollup/public/crud_app/services/api_errors.js","mtime":1567631712290},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.showApiWarning = showApiWarning;\nexports.showApiError = showApiError;\n\nvar _notify = require('ui/notify');\n\nfunction createToastConfig(error, errorTitle) {\n  // Expect an error in the shape provided by Angular's $http service.\n  if (error && error.data) {\n    var _error$data = error.data,\n        errorString = _error$data.error,\n        statusCode = _error$data.statusCode,\n        message = _error$data.message;\n\n    return {\n      title: errorTitle,\n      text: statusCode + ': ' + errorString + '. ' + message\n    };\n  }\n} /*\n   * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n   * or more contributor license agreements. Licensed under the Elastic License;\n   * you may not use this file except in compliance with the Elastic License.\n   */\n\nfunction showApiWarning(error, errorTitle) {\n  var toastConfig = createToastConfig(error, errorTitle);\n\n  if (toastConfig) {\n    return _notify.toastNotifications.addWarning(toastConfig);\n  }\n\n  // This error isn't an HTTP error, so let the fatal error screen tell the user something\n  // unexpected happened.\n  return (0, _notify.fatalError)(error, errorTitle);\n}\n\nfunction showApiError(error, errorTitle) {\n  var toastConfig = createToastConfig(error, errorTitle);\n\n  if (toastConfig) {\n    return _notify.toastNotifications.addDanger(toastConfig);\n  }\n\n  // This error isn't an HTTP error, so let the fatal error screen tell the user something\n  // unexpected happened.\n  (0, _notify.fatalError)(error, errorTitle);\n}",null]}