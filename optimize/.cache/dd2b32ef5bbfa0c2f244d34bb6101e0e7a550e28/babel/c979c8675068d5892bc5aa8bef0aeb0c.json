{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/monitoring/public/services/clusters.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/monitoring/public/services/clusters.js","mtime":1567631712099},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nvar _modules = require('ui/modules');\n\nvar _ajax_error_handler = require('plugins/monitoring/lib/ajax_error_handler');\n\nvar _timefilter = require('ui/timefilter');\n\nvar _constants = require('../../common/constants');\n\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nfunction formatClusters(clusters) {\n  return clusters.map(formatCluster);\n}\n\nfunction formatCluster(cluster) {\n  if (cluster.cluster_uuid === _constants.STANDALONE_CLUSTER_CLUSTER_UUID) {\n    cluster.cluster_name = 'Standalone Cluster';\n  }\n  return cluster;\n}\n\nvar uiModule = _modules.uiModules.get('monitoring/clusters');\nuiModule.service('monitoringClusters', function ($injector) {\n  return function (clusterUuid, ccs) {\n    var _timefilter$getBounds = _timefilter.timefilter.getBounds(),\n        min = _timefilter$getBounds.min,\n        max = _timefilter$getBounds.max;\n\n    // append clusterUuid if the parameter is given\n\n\n    var url = '../api/monitoring/v1/clusters';\n    if (clusterUuid) {\n      url += '/' + clusterUuid;\n    }\n\n    var $http = $injector.get('$http');\n    return $http.post(url, {\n      ccs: ccs,\n      timeRange: {\n        min: min.toISOString(),\n        max: max.toISOString()\n      }\n    }).then(function (response) {\n      return response.data;\n    }).then(function (data) {\n      if (clusterUuid) {\n        return formatCluster(data[0]); // return single cluster\n      }\n      return formatClusters(data); // return set of clusters\n    }).catch(function (err) {\n      var Private = $injector.get('Private');\n      var ajaxErrorHandlers = Private(_ajax_error_handler.ajaxErrorHandlersProvider);\n      return ajaxErrorHandlers(err);\n    });\n  };\n});",null]}