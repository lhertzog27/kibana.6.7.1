{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/ui/public/vis/response_handlers/legacy.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/vis/response_handlers/legacy.js","mtime":1567631711772},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LegacyResponseHandlerProvider = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /*\n                                                                                                                                                                                                                                                                   * Licensed to Elasticsearch B.V. under one or more contributor\n                                                                                                                                                                                                                                                                   * license agreements. See the NOTICE file distributed with\n                                                                                                                                                                                                                                                                   * this work for additional information regarding copyright\n                                                                                                                                                                                                                                                                   * ownership. Elasticsearch B.V. licenses this file to you under\n                                                                                                                                                                                                                                                                   * the Apache License, Version 2.0 (the \"License\"); you may\n                                                                                                                                                                                                                                                                   * not use this file except in compliance with the License.\n                                                                                                                                                                                                                                                                   * You may obtain a copy of the License at\n                                                                                                                                                                                                                                                                   *\n                                                                                                                                                                                                                                                                   *    http://www.apache.org/licenses/LICENSE-2.0\n                                                                                                                                                                                                                                                                   *\n                                                                                                                                                                                                                                                                   * Unless required by applicable law or agreed to in writing,\n                                                                                                                                                                                                                                                                   * software distributed under the License is distributed on an\n                                                                                                                                                                                                                                                                   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n                                                                                                                                                                                                                                                                   * KIND, either express or implied.  See the License for the\n                                                                                                                                                                                                                                                                   * specific language governing permissions and limitations\n                                                                                                                                                                                                                                                                   * under the License.\n                                                                                                                                                                                                                                                                   */\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _agg_config_result = require('../../vis/agg_config_result');\n\nvar _agg_config_result2 = _interopRequireDefault(_agg_config_result);\n\nvar _vis_response_handlers = require('../../registry/vis_response_handlers');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar LegacyResponseHandlerProvider = function LegacyResponseHandlerProvider() {\n\n  return {\n    name: 'legacy',\n    handler: function handler(table) {\n      return new Promise(function (resolve) {\n        var converted = { tables: [] };\n\n        // check if there are buckets after the first metric\n        var metricsAtAllLevels = table.columns.findIndex(function (column) {\n          return _lodash2.default.get(column, 'aggConfig.type.type') === 'metrics';\n        }) < _lodash2.default.findLastIndex(table.columns, function (column) {\n          return _lodash2.default.get(column, 'aggConfig.type.type') === 'buckets';\n        });\n\n        var splitColumn = table.columns.find(function (column) {\n          return _lodash2.default.get(column, 'aggConfig.schema.name') === 'split';\n        });\n        var numberOfMetrics = table.columns.filter(function (column) {\n          return _lodash2.default.get(column, 'aggConfig.type.type') === 'metrics';\n        }).length;\n        var numberOfBuckets = table.columns.filter(function (column) {\n          return _lodash2.default.get(column, 'aggConfig.type.type') === 'buckets';\n        }).length;\n        var metricsPerBucket = numberOfMetrics / numberOfBuckets;\n\n        if (splitColumn) {\n          var splitAgg = splitColumn.aggConfig;\n          var splitColumnFormatter = splitAgg.fieldFormatter('text');\n          var splitMap = {};\n          var splitIndex = 0;\n\n          table.rows.forEach(function (row, rowIndex) {\n            var splitValue = row[splitColumn.id];\n            var splitColumnIndex = table.columns.findIndex(function (column) {\n              return column === splitColumn;\n            });\n\n            if (!splitMap.hasOwnProperty(splitValue)) {\n              splitMap[splitValue] = splitIndex++;\n              var tableGroup = {\n                $parent: converted,\n                aggConfig: splitAgg,\n                title: splitColumnFormatter(splitValue) + ': ' + splitAgg.makeLabel(),\n                key: splitValue,\n                tables: []\n              };\n              tableGroup.tables.push({\n                $parent: tableGroup,\n                columns: table.columns.filter(function (column, i) {\n                  var isSplitColumn = i === splitColumnIndex;\n                  var isSplitMetric = metricsAtAllLevels && i > splitColumnIndex && i <= splitColumnIndex + metricsPerBucket;\n                  return !isSplitColumn && !isSplitMetric;\n                }).map(function (column) {\n                  return _extends({ title: column.name }, column);\n                }),\n                rows: []\n              });\n\n              converted.tables.push(tableGroup);\n            }\n\n            var previousSplitAgg = new _agg_config_result2.default(splitAgg, null, splitValue, splitValue);\n            previousSplitAgg.rawData = {\n              table: table,\n              column: splitColumnIndex,\n              row: rowIndex\n            };\n            var tableIndex = splitMap[splitValue];\n            var newRow = _lodash2.default.map(converted.tables[tableIndex].tables[0].columns, function (column) {\n              var value = row[column.id];\n              var aggConfigResult = new _agg_config_result2.default(column.aggConfig, previousSplitAgg, value, value);\n              aggConfigResult.rawData = {\n                table: table,\n                column: table.columns.findIndex(function (c) {\n                  return c.id === column.id;\n                }),\n                row: rowIndex\n              };\n              if (column.aggConfig.type.type === 'buckets') {\n                previousSplitAgg = aggConfigResult;\n              }\n              return aggConfigResult;\n            });\n\n            converted.tables[tableIndex].tables[0].rows.push(newRow);\n          });\n        } else {\n\n          converted.tables.push({\n            columns: table.columns.map(function (column) {\n              return _extends({ title: column.name }, column);\n            }),\n            rows: table.rows.map(function (row, rowIndex) {\n              var previousSplitAgg = void 0;\n              return table.columns.map(function (column, columnIndex) {\n                var value = row[column.id];\n                var aggConfigResult = new _agg_config_result2.default(column.aggConfig, previousSplitAgg, value, value);\n                aggConfigResult.rawData = {\n                  table: table,\n                  column: columnIndex,\n                  row: rowIndex\n                };\n                if (column.aggConfig.type.type === 'buckets') {\n                  previousSplitAgg = aggConfigResult;\n                }\n                return aggConfigResult;\n              });\n            }),\n            aggConfig: function aggConfig(column) {\n              return column.aggConfig;\n            }\n          });\n        }\n\n        resolve(converted);\n      });\n    }\n  };\n};\n\n_vis_response_handlers.VisResponseHandlersRegistryProvider.register(LegacyResponseHandlerProvider);\n\nexports.LegacyResponseHandlerProvider = LegacyResponseHandlerProvider;",null]}