{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/ui/public/agg_types/index.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/agg_types/index.js","mtime":1567631711699},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.aggTypes = undefined;\n\nrequire('../directives/validate_agg');\n\nrequire('./agg_params');\n\nvar _indexed_array = require('../indexed_array');\n\nvar _count = require('./metrics/count');\n\nvar _avg = require('./metrics/avg');\n\nvar _sum = require('./metrics/sum');\n\nvar _median = require('./metrics/median');\n\nvar _min = require('./metrics/min');\n\nvar _max = require('./metrics/max');\n\nvar _top_hit = require('./metrics/top_hit');\n\nvar _std_deviation = require('./metrics/std_deviation');\n\nvar _cardinality = require('./metrics/cardinality');\n\nvar _percentiles = require('./metrics/percentiles');\n\nvar _geo_bounds = require('./metrics/geo_bounds');\n\nvar _geo_centroid = require('./metrics/geo_centroid');\n\nvar _percentile_ranks = require('./metrics/percentile_ranks');\n\nvar _derivative = require('./metrics/derivative');\n\nvar _cumulative_sum = require('./metrics/cumulative_sum');\n\nvar _moving_avg = require('./metrics/moving_avg');\n\nvar _serial_diff = require('./metrics/serial_diff');\n\nvar _date_histogram = require('./buckets/date_histogram');\n\nvar _histogram = require('./buckets/histogram');\n\nvar _range = require('./buckets/range');\n\nvar _date_range = require('./buckets/date_range');\n\nvar _ip_range = require('./buckets/ip_range');\n\nvar _terms = require('./buckets/terms');\n\nvar _filter = require('./buckets/filter');\n\nvar _filters = require('./buckets/filters');\n\nvar _significant_terms = require('./buckets/significant_terms');\n\nvar _geo_hash = require('./buckets/geo_hash');\n\nvar _bucket_sum = require('./metrics/bucket_sum');\n\nvar _bucket_avg = require('./metrics/bucket_avg');\n\nvar _bucket_min = require('./metrics/bucket_min');\n\nvar _bucket_max = require('./metrics/bucket_max');\n\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nvar aggs = {\n  metrics: [_count.countMetricAgg, _avg.avgMetricAgg, _sum.sumMetricAgg, _median.medianMetricAgg, _min.minMetricAgg, _max.maxMetricAgg, _std_deviation.stdDeviationMetricAgg, _cardinality.cardinalityMetricAgg, _percentiles.percentilesMetricAgg, _percentile_ranks.percentileRanksMetricAgg, _top_hit.topHitMetricAgg, _derivative.derivativeMetricAgg, _cumulative_sum.cumulativeSumMetricAgg, _moving_avg.movingAvgMetricAgg, _serial_diff.serialDiffMetricAgg, _bucket_avg.bucketAvgMetricAgg, _bucket_sum.bucketSumMetricAgg, _bucket_min.bucketMinMetricAgg, _bucket_max.bucketMaxMetricAgg, _geo_bounds.geoBoundsMetricAgg, _geo_centroid.geoCentroidMetricAgg],\n  buckets: [_date_histogram.dateHistogramBucketAgg, _histogram.histogramBucketAgg, _range.rangeBucketAgg, _date_range.dateRangeBucketAgg, _ip_range.ipRangeBucketAgg, _terms.termsBucketAgg, _filter.filterBucketAgg, _filters.filtersBucketAgg, _significant_terms.significantTermsBucketAgg, _geo_hash.geoHashBucketAgg]\n};\n\nObject.keys(aggs).forEach(function (type) {\n  aggs[type].forEach(function (agg) {\n    agg.type = type;\n  });\n});\n\n/**\n * IndexedArray of Aggregation Types.\n *\n * These types form two groups, metric and buckets.\n *\n * @module agg_types\n * @type {IndexedArray}\n */\nvar aggTypes = exports.aggTypes = new _indexed_array.IndexedArray({\n\n  /**\n   * @type {Array}\n   */\n  index: ['name'],\n\n  /**\n   * [group description]\n   * @type {Array}\n   */\n  group: ['type'],\n  initialSet: aggs.metrics.concat(aggs.buckets)\n});",null]}