{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/license_management/public/store/reducers/licenseManagement.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/license_management/public/store/reducers/licenseManagement.js","mtime":1567631712004},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getStartBasicMessages = exports.startBasicLicenseNeedsAcknowledgement = exports.startTrialError = exports.shouldShowRequestTrialExtension = exports.shouldShowStartTrial = exports.getUploadErrorMessage = exports.isInvalid = exports.uploadMessages = exports.isApplying = exports.uploadNeedsAcknowledgement = exports.shouldShowRevertToBasicLicense = exports.isImminentExpiration = exports.isExpired = exports.getExpirationDateFormatted = exports.getExpirationDate = exports.getExpirationMillis = exports.getLicenseType = exports.getLicense = exports.licenseManagement = exports.WARNING_THRESHOLD_IN_DAYS = undefined;\n\nvar _redux = require('redux');\n\nvar _license = require('./license');\n\nvar _upload_status = require('./upload_status');\n\nvar _start_basic_license_status = require('./start_basic_license_status');\n\nvar _upload_error_message = require('./upload_error_message');\n\nvar _trial_status = require('./trial_status');\n\nvar _momentTimezone = require('moment-timezone');\n\nvar _momentTimezone2 = _interopRequireDefault(_momentTimezone);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar WARNING_THRESHOLD_IN_DAYS = exports.WARNING_THRESHOLD_IN_DAYS = 25; /*\n                                                                         * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                         * or more contributor license agreements. Licensed under the Elastic License;\n                                                                         * you may not use this file except in compliance with the Elastic License.\n                                                                         */\n\nvar licenseManagement = exports.licenseManagement = (0, _redux.combineReducers)({\n  license: _license.license,\n  uploadStatus: _upload_status.uploadStatus,\n  uploadErrorMessage: _upload_error_message.uploadErrorMessage,\n  trialStatus: _trial_status.trialStatus,\n  startBasicStatus: _start_basic_license_status.startBasicStatus\n});\n\nvar getLicense = exports.getLicense = function getLicense(state) {\n  return state.license;\n};\n\nvar getLicenseType = exports.getLicenseType = function getLicenseType(state) {\n  return getLicense(state).type;\n};\n\nvar getExpirationMillis = exports.getExpirationMillis = function getExpirationMillis(state) {\n  return getLicense(state).expiryDateInMillis;\n};\n\nvar getExpirationDate = exports.getExpirationDate = function getExpirationDate(state) {\n  //basic licenses do not expire\n  if (getLicenseType(state) === 'basic') {\n    return null;\n  }\n  var expirationMillis = getExpirationMillis(state);\n  if (expirationMillis) {\n    return _momentTimezone2.default.tz(getExpirationMillis(state), _momentTimezone2.default.tz.guess());\n  } else {\n    return null;\n  }\n};\n\nvar getExpirationDateFormatted = exports.getExpirationDateFormatted = function getExpirationDateFormatted(state) {\n  var expirationDate = getExpirationDate(state);\n  return expirationDate ? expirationDate.format('LLL z') : null;\n};\n\nvar isExpired = exports.isExpired = function isExpired(state) {\n  return new Date().getTime() > getExpirationMillis(state);\n};\n\nvar isImminentExpiration = exports.isImminentExpiration = function isImminentExpiration(state) {\n  var now = new Date();\n  var expirationDate = getExpirationDate(state);\n  return expirationDate && expirationDate.isAfter(now) && expirationDate.diff(now, 'days') <= WARNING_THRESHOLD_IN_DAYS;\n};\n\nvar shouldShowRevertToBasicLicense = exports.shouldShowRevertToBasicLicense = function shouldShowRevertToBasicLicense(state) {\n  var _getLicense = getLicense(state),\n      type = _getLicense.type;\n\n  return type === 'trial' || isImminentExpiration(state) || isExpired(state);\n};\n\nvar uploadNeedsAcknowledgement = exports.uploadNeedsAcknowledgement = function uploadNeedsAcknowledgement(state) {\n  return !!state.uploadStatus.acknowledge;\n};\n\nvar isApplying = exports.isApplying = function isApplying(state) {\n  return !!state.uploadStatus.applying;\n};\n\nvar uploadMessages = exports.uploadMessages = function uploadMessages(state) {\n  return state.uploadStatus.messages;\n};\n\nvar isInvalid = exports.isInvalid = function isInvalid(state) {\n  return !!state.uploadStatus.invalid;\n};\n\nvar getUploadErrorMessage = exports.getUploadErrorMessage = function getUploadErrorMessage(state) {\n  return state.uploadErrorMessage;\n};\n\nvar shouldShowStartTrial = exports.shouldShowStartTrial = function shouldShowStartTrial(state) {\n  var licenseType = getLicenseType(state);\n  return state.trialStatus.canStartTrial && licenseType !== 'trial' && (\n  //don't show for platinum unless it is expired\n  licenseType !== 'platinum' || isExpired(state));\n};\n\nvar shouldShowRequestTrialExtension = exports.shouldShowRequestTrialExtension = function shouldShowRequestTrialExtension(state) {\n  if (state.trialStatus.canStartTrial) {\n    return false;\n  }\n\n  var _getLicense2 = getLicense(state),\n      type = _getLicense2.type;\n\n  return type !== 'platinum' || isExpired(state);\n};\n\nvar startTrialError = exports.startTrialError = function startTrialError(state) {\n  return state.trialStatus.startTrialError;\n};\n\nvar startBasicLicenseNeedsAcknowledgement = exports.startBasicLicenseNeedsAcknowledgement = function startBasicLicenseNeedsAcknowledgement(state) {\n  return !!state.startBasicStatus.acknowledge;\n};\n\nvar getStartBasicMessages = exports.getStartBasicMessages = function getStartBasicMessages(state) {\n  return state.startBasicStatus.messages;\n};",null]}