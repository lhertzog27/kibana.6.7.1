{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/ui/public/directives/field_name.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/directives/field_name.js","mtime":1567631711717},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nvar _jquery = require('jquery');\n\nvar _jquery2 = _interopRequireDefault(_jquery);\n\nvar _lodash = require('lodash');\n\nrequire('../filters/short_dots');\n\nvar _boolean_field_name_icon = require('./field_name_icons/boolean_field_name_icon.html');\n\nvar _boolean_field_name_icon2 = _interopRequireDefault(_boolean_field_name_icon);\n\nvar _conflict_field_name_icon = require('./field_name_icons/conflict_field_name_icon.html');\n\nvar _conflict_field_name_icon2 = _interopRequireDefault(_conflict_field_name_icon);\n\nvar _date_field_name_icon = require('./field_name_icons/date_field_name_icon.html');\n\nvar _date_field_name_icon2 = _interopRequireDefault(_date_field_name_icon);\n\nvar _geo_point_field_name_icon = require('./field_name_icons/geo_point_field_name_icon.html');\n\nvar _geo_point_field_name_icon2 = _interopRequireDefault(_geo_point_field_name_icon);\n\nvar _ip_field_name_icon = require('./field_name_icons/ip_field_name_icon.html');\n\nvar _ip_field_name_icon2 = _interopRequireDefault(_ip_field_name_icon);\n\nvar _murmur3_field_name_icon = require('./field_name_icons/murmur3_field_name_icon.html');\n\nvar _murmur3_field_name_icon2 = _interopRequireDefault(_murmur3_field_name_icon);\n\nvar _number_field_name_icon = require('./field_name_icons/number_field_name_icon.html');\n\nvar _number_field_name_icon2 = _interopRequireDefault(_number_field_name_icon);\n\nvar _source_field_name_icon = require('./field_name_icons/source_field_name_icon.html');\n\nvar _source_field_name_icon2 = _interopRequireDefault(_source_field_name_icon);\n\nvar _string_field_name_icon = require('./field_name_icons/string_field_name_icon.html');\n\nvar _string_field_name_icon2 = _interopRequireDefault(_string_field_name_icon);\n\nvar _unknown_field_name_icon = require('./field_name_icons/unknown_field_name_icon.html');\n\nvar _unknown_field_name_icon2 = _interopRequireDefault(_unknown_field_name_icon);\n\nvar _modules = require('../modules');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nvar _module = _modules.uiModules.get('kibana');\n\nvar compiledBooleanFieldNameIcon = (0, _lodash.template)(_boolean_field_name_icon2.default);\nvar compiledConflictFieldNameIcon = (0, _lodash.template)(_conflict_field_name_icon2.default);\nvar compiledDateFieldNameIcon = (0, _lodash.template)(_date_field_name_icon2.default);\nvar compiledGeoPointFieldNameIcon = (0, _lodash.template)(_geo_point_field_name_icon2.default);\nvar compiledIpFieldNameIcon = (0, _lodash.template)(_ip_field_name_icon2.default);\nvar compiledMurmur3FieldNameIcon = (0, _lodash.template)(_murmur3_field_name_icon2.default);\nvar compiledNumberFieldNameIcon = (0, _lodash.template)(_number_field_name_icon2.default);\nvar compiledSourceFieldNameIcon = (0, _lodash.template)(_source_field_name_icon2.default);\nvar compiledStringFieldNameIcon = (0, _lodash.template)(_string_field_name_icon2.default);\nvar compiledUnknownFieldNameIcon = (0, _lodash.template)(_unknown_field_name_icon2.default);\n\n_module.directive('fieldName', function ($compile, $rootScope, $filter, i18n) {\n  return {\n    restrict: 'AE',\n    scope: {\n      'field': '=',\n      'fieldName': '=',\n      'fieldType': '='\n    },\n    link: function link($scope, $el) {\n      var typeToIconMap = {\n        boolean: compiledBooleanFieldNameIcon({\n          booleanFieldAriaLabel: i18n('common.ui.directives.fieldNameIcons.booleanAriaLabel', {\n            defaultMessage: 'Boolean field'\n          })\n        }),\n        conflict: compiledConflictFieldNameIcon({\n          conflictingFieldAriaLabel: i18n('common.ui.directives.fieldNameIcons.conflictFieldAriaLabel', {\n            defaultMessage: 'Conflicting field'\n          })\n        }),\n        date: compiledDateFieldNameIcon({\n          dateFieldAriaLabel: i18n('common.ui.directives.fieldNameIcons.dateFieldAriaLabel', {\n            defaultMessage: 'Date field'\n          })\n        }),\n        geo_point: compiledGeoPointFieldNameIcon({\n          geoPointFieldAriaLabel: i18n('common.ui.directives.fieldNameIcons.geoPointFieldAriaLabel', {\n            defaultMessage: 'Date field'\n          })\n        }),\n        ip: compiledIpFieldNameIcon({\n          ipAddressFieldAriaLabel: i18n('common.ui.directives.fieldNameIcons.ipAddressFieldAriaLabel', {\n            defaultMessage: 'IP address field'\n          })\n        }),\n        murmur3: compiledMurmur3FieldNameIcon({\n          murmur3FieldAriaLabel: i18n('common.ui.directives.fieldNameIcons.murmur3FieldAriaLabel', {\n            defaultMessage: 'Murmur3 field'\n          })\n        }),\n        number: compiledNumberFieldNameIcon({\n          numberFieldAriaLabel: i18n('common.ui.directives.fieldNameIcons.numberFieldAriaLabel', {\n            defaultMessage: 'Number field'\n          })\n        }),\n        source: compiledSourceFieldNameIcon({\n          sourceFieldAriaLabel: i18n('common.ui.directives.fieldNameIcons.sourceFieldAriaLabel', {\n            defaultMessage: 'Source field'\n          })\n        }),\n        string: compiledStringFieldNameIcon({\n          stringFieldAriaLabel: i18n('common.ui.directives.fieldNameIcons.stringFieldAriaLabel', {\n            defaultMessage: 'String field'\n          })\n        })\n      };\n\n      function typeIcon(fieldType) {\n        if (typeToIconMap.hasOwnProperty(fieldType)) {\n          return typeToIconMap[fieldType];\n        }\n\n        return compiledUnknownFieldNameIcon({\n          unknownFieldAriaLabel: i18n('common.ui.directives.fieldNameIcons.unknownFieldAriaLabel', {\n            defaultMessage: 'Unknown field'\n          })\n        });\n      }\n\n      $rootScope.$watchMulti.call($scope, ['field', 'fieldName', 'fieldType', 'field.rowCount'], function () {\n\n        var type = $scope.field ? $scope.field.type : $scope.fieldType;\n        var name = $scope.field ? $scope.field.name : $scope.fieldName;\n        var results = $scope.field ? !$scope.field.rowCount && !$scope.field.scripted : false;\n        var scripted = $scope.field ? $scope.field.scripted : false;\n\n        var displayName = $filter('shortDots')(name);\n\n        $el.attr('title', name).toggleClass('dscField--noResults', results).toggleClass('scripted', scripted).prepend(typeIcon(type)).append((0, _jquery2.default)('<span>').text(displayName).addClass('dscFieldName'));\n      });\n    }\n  };\n});",null]}