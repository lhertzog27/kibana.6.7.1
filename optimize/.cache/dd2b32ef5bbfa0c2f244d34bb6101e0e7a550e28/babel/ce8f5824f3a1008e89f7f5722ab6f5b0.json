{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/factories/state_factory.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/factories/state_factory.js","mtime":1567631712042},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.stateFactoryProvider = stateFactoryProvider;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _listener_factory = require('./listener_factory');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// A data store to be able to share persistent state across directives\n// in services more conveniently when the structure of angular directives\n// doesn't allow the use of controllers to share state.\n\n// Offers set()/get() to store and fetch automatically persisted data\n// Includes watch()/unwatch()/changed() to be able to subscribe to data changes\n// Have a look at the unit tests which demonstrate basic usage.\n\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nfunction stateFactoryProvider(AppState) {\n  function initializeAppState(stateName, defaultState) {\n    var appState = new AppState();\n    appState.fetch();\n\n    // Store the state to the AppState so that it's\n    // restored on page refresh.\n    if (appState[stateName] === undefined) {\n      appState[stateName] = _lodash2.default.cloneDeep(defaultState) || {};\n      appState.save();\n    }\n\n    // If defaultState is defined, check if the keys of the defaultState\n    // match the one from appState, if not, fall back to the defaultState.\n    // If we didn't do this, the structure of an out-of-date appState\n    // might break some follow up code. Note that this will not catch any\n    // deeper nested inconsistencies.\n    if (typeof defaultState !== 'undefined' && appState[stateName] !== defaultState) {\n      if (!_lodash2.default.isEqual(Object.keys(defaultState).sort(), Object.keys(appState[stateName]).sort())) {\n        appState[stateName] = _lodash2.default.cloneDeep(defaultState);\n        appState.save();\n      }\n    }\n\n    return appState;\n  }\n\n  return function (stateName, defaultState) {\n    if (typeof stateName !== 'string') {\n      throw 'stateName needs to be of type `string`';\n    }\n\n    var appState = initializeAppState(stateName, defaultState);\n\n    // () two times here, because the Provider first returns\n    // the Factory, which then returns the actual listener\n    var listener = (0, _listener_factory.listenerFactoryProvider)()();\n\n    var _changed = false;\n\n    // the state's API: a getter/setter/resetter as well as the methods\n    // watch/unwatch/changed to be able to create and use listeners\n    // on the state.\n    var state = {\n      get: function get(name) {\n        updateAppState();\n        return appState[stateName][name];\n      },\n\n      // only if value doesn't match the existing one, the state gets updated\n      // and saved.\n      set: function set(name, value) {\n        updateAppState();\n        if (!_lodash2.default.isEqual(appState[stateName][name], value)) {\n          appState[stateName][name] = value;\n          appState.save();\n          _changed = true;\n        }\n        return state;\n      },\n      reset: function reset() {\n        updateAppState();\n        if (!_lodash2.default.isEqual(appState[stateName], defaultState)) {\n          appState[stateName] = _lodash2.default.cloneDeep(defaultState);\n          appState.save();\n          _changed = true;\n        }\n        return state;\n      },\n\n      watch: listener.watch,\n      unwatch: listener.unwatch,\n      // wrap the listener's changed() method to only fire it\n      // if the state changed.\n      changed: function changed() {\n        if (_changed) {\n          listener.changed.apply(listener, arguments);\n          _changed = false;\n        }\n      }\n    };\n\n    // gets the current state of AppState, if for whatever reason this custom\n    // state isn't part of AppState anymore, reinitialize it\n    function updateAppState() {\n      appState.fetch();\n      if (typeof appState[stateName] === 'undefined') {\n        appState = initializeAppState(stateName, defaultState);\n        _changed = true;\n      }\n    }\n\n    return state;\n  };\n}",null]}