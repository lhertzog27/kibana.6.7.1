{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/license_management/public/register_route.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/license_management/public/register_route.js","mtime":1567631712002},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = require('react-dom');\n\nvar _reactRedux = require('react-redux');\n\nvar _reactRouterDom = require('react-router-dom');\n\nvar _telemetry = require('./lib/telemetry');\n\nvar _i18n = require('ui/i18n');\n\nvar _app = require('./app');\n\nvar _app2 = _interopRequireDefault(_app);\n\nvar _base_path = require('../common/constants/base_path');\n\nvar _routes = require('ui/routes');\n\nvar _routes2 = _interopRequireDefault(_routes);\n\nvar _xpack_info = require('plugins/xpack_main/services/xpack_info');\n\nvar _main = require('./main.html');\n\nvar _main2 = _interopRequireDefault(_main);\n\nvar _store = require('./store');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } } /*\n                                                                                                                                                           * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                           * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                           * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                           */\n\nvar renderReact = function renderReact(elem, store) {\n  (0, _reactDom.render)(_react2.default.createElement(\n    _i18n.I18nContext,\n    null,\n    _react2.default.createElement(\n      _reactRedux.Provider,\n      { store: store },\n      _react2.default.createElement(\n        _reactRouterDom.HashRouter,\n        null,\n        _react2.default.createElement(_app2.default, null)\n      )\n    )\n  ), elem);\n};\n\n/*\n  This method handles the cleanup needed when route is scope is destroyed.  It also prevents Angular\n  from destroying scope when route changes and both old route and new route are this same route.\n*/\nvar manageAngularLifecycle = function manageAngularLifecycle($scope, $route, elem) {\n  var lastRoute = $route.current;\n  var deregister = $scope.$on('$locationChangeSuccess', function () {\n    var currentRoute = $route.current;\n    // if templates are the same we are on the same route\n    if (lastRoute.$$route.template === currentRoute.$$route.template) {\n      // this prevents angular from destroying scope\n      $route.current = lastRoute;\n    }\n  });\n  $scope.$on('$destroy', function () {\n    deregister && deregister();\n    // manually unmount component when scope is destroyed\n    elem && (0, _reactDom.unmountComponentAtNode)(elem);\n  });\n};\nvar initializeTelemetry = function initializeTelemetry($injector) {\n  var telemetryEnabled = $injector.get('telemetryEnabled');\n  var Private = $injector.get('Private');\n  var telemetryOptInProvider = Private(_telemetry.TelemetryOptInProvider);\n  (0, _telemetry.setTelemetryOptInService)(telemetryOptInProvider);\n  (0, _telemetry.setTelemetryEnabled)(telemetryEnabled);\n  (0, _telemetry.setHttpClient)($injector.get('$http'));\n};\n_routes2.default.when(_base_path.BASE_PATH + ':view?', {\n  template: _main2.default,\n  controllerAs: 'licenseManagement',\n  controller: function LicenseManagementController($injector, $window, $rootScope, $scope, $route, kbnUrl) {\n    _classCallCheck(this, LicenseManagementController);\n\n    initializeTelemetry($injector);\n    var autoLogout = null;\n    /* if security is disabled, there will be no autoLogout service,\n     so just substitute noop function in that case */\n    try {\n      autoLogout = $injector.get('autoLogout');\n    } catch (e) {\n      autoLogout = function autoLogout() {};\n    }\n\n    $scope.$$postDigest(function () {\n      var elem = document.getElementById('licenseReactRoot');\n      var xPackInfo = (0, _xpack_info.XPackInfoProvider)($window, $injector, $injector.get('Private'));\n      var initialState = { license: xPackInfo.get('license') };\n      var kbnUrlWrapper = {\n        change: function change(url) {\n          kbnUrl.change(url);\n          $rootScope.$digest();\n        }\n      };\n      var services = { autoLogout: autoLogout, xPackInfo: xPackInfo, kbnUrl: kbnUrlWrapper };\n      var store = (0, _store.licenseManagementStore)(initialState, services);\n      renderReact(elem, store);\n      manageAngularLifecycle($scope, $route, elem);\n    });\n  }\n});",null]}