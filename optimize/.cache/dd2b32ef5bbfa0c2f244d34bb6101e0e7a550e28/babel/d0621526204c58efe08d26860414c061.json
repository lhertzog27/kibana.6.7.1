{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/jobs/jobs_list/components/jobs_list_view/jobs_list_view.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/jobs/jobs_list/components/jobs_list_view/jobs_list_view.js","mtime":1567631712050},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.JobsListView = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _timefilter = require('ui/timefilter');\n\nvar _ml_api_service = require('plugins/ml/services/ml_api_service');\n\nvar _utils = require('../utils');\n\nvar _jobs_list = require('../jobs_list');\n\nvar _job_details = require('../job_details');\n\nvar _job_filter_bar = require('../job_filter_bar');\n\nvar _edit_job_flyout = require('../edit_job_flyout');\n\nvar _delete_job_modal = require('../delete_job_modal');\n\nvar _start_datafeed_modal = require('../start_datafeed_modal');\n\nvar _create_watch_flyout = require('../create_watch_flyout');\n\nvar _multi_job_actions = require('../multi_job_actions');\n\nvar _new_job_button = require('../new_job_button');\n\nvar _jobs_stats_bar = require('../jobs_stats_bar');\n\nvar _node_available_warning = require('../node_available_warning');\n\nvar _upgrade = require('../../../../components/upgrade');\n\nvar _refresh_jobs_list_button = require('../refresh_jobs_list_button');\n\nvar _lodash = require('lodash');\n\nvar _jobs_list2 = require('../../../../../common/constants/jobs_list');\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _eui = require('@elastic/eui');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\nvar jobsRefreshInterval = null;\nvar deletingJobsRefreshTimeout = null;\n\nvar JobsListView = exports.JobsListView = function (_Component) {\n  _inherits(JobsListView, _Component);\n\n  function JobsListView(props) {\n    _classCallCheck(this, JobsListView);\n\n    var _this = _possibleConstructorReturn(this, (JobsListView.__proto__ || Object.getPrototypeOf(JobsListView)).call(this, props));\n\n    _this.toggleRow = function (jobId) {\n      if (_this.state.itemIdToExpandedRowMap[jobId]) {\n        var itemIdToExpandedRowMap = _extends({}, _this.state.itemIdToExpandedRowMap);\n        delete itemIdToExpandedRowMap[jobId];\n        _this.setState({ itemIdToExpandedRowMap: itemIdToExpandedRowMap });\n      } else {\n\n        var _itemIdToExpandedRowMap = _extends({}, _this.state.itemIdToExpandedRowMap);\n\n        if (_this.state.fullJobsList[jobId] !== undefined) {\n          _itemIdToExpandedRowMap[jobId] = _react2.default.createElement(_job_details.JobDetails, {\n            jobId: jobId,\n            job: _this.state.fullJobsList[jobId],\n            addYourself: _this.addUpdateFunction,\n            removeYourself: _this.removeUpdateFunction\n          });\n        } else {\n          _itemIdToExpandedRowMap[jobId] = _react2.default.createElement(_job_details.JobDetails, {\n            jobId: jobId,\n            addYourself: _this.addUpdateFunction,\n            removeYourself: _this.removeUpdateFunction\n          });\n        }\n\n        _this.setState({ itemIdToExpandedRowMap: _itemIdToExpandedRowMap }, function () {\n          (0, _utils.loadFullJob)(jobId).then(function (job) {\n            var fullJobsList = _extends({}, _this.state.fullJobsList);\n            fullJobsList[jobId] = job;\n            _this.setState({ fullJobsList: fullJobsList }, function () {\n              // take a fresh copy of the itemIdToExpandedRowMap object\n              _itemIdToExpandedRowMap = _extends({}, _this.state.itemIdToExpandedRowMap);\n              if (_itemIdToExpandedRowMap[jobId] !== undefined) {\n                // wrap in a check, in case the user closes the expansion before the\n                // loading has finished\n                _itemIdToExpandedRowMap[jobId] = _react2.default.createElement(_job_details.JobDetails, {\n                  jobId: jobId,\n                  job: job,\n                  addYourself: _this.addUpdateFunction,\n                  removeYourself: _this.removeUpdateFunction\n                });\n              }\n              _this.setState({ itemIdToExpandedRowMap: _itemIdToExpandedRowMap });\n            });\n          }).catch(function (error) {\n            console.error(error);\n          });\n        });\n      }\n    };\n\n    _this.addUpdateFunction = function (id, f) {\n      _this.updateFunctions[id] = f;\n    };\n\n    _this.removeUpdateFunction = function (id) {\n      delete _this.updateFunctions[id];\n    };\n\n    _this.setShowEditJobFlyoutFunction = function (func) {\n      _this.showEditJobFlyout = func;\n    };\n\n    _this.unsetShowEditJobFlyoutFunction = function () {\n      _this.showEditJobFlyout = function () {};\n    };\n\n    _this.setShowDeleteJobModalFunction = function (func) {\n      _this.showDeleteJobModal = func;\n    };\n\n    _this.unsetShowDeleteJobModalFunction = function () {\n      _this.showDeleteJobModal = function () {};\n    };\n\n    _this.setShowStartDatafeedModalFunction = function (func) {\n      _this.showStartDatafeedModal = func;\n    };\n\n    _this.unsetShowStartDatafeedModalFunction = function () {\n      _this.showStartDatafeedModal = function () {};\n    };\n\n    _this.setShowCreateWatchFlyoutFunction = function (func) {\n      _this.showCreateWatchFlyout = func;\n    };\n\n    _this.unsetShowCreateWatchFlyoutFunction = function () {\n      _this.showCreateWatchFlyout = function () {};\n    };\n\n    _this.getShowCreateWatchFlyoutFunction = function () {\n      return _this.showCreateWatchFlyout;\n    };\n\n    _this.selectJobChange = function (selectedJobs) {\n      _this.setState({ selectedJobs: selectedJobs });\n    };\n\n    _this.setFilters = function (filterClauses) {\n      var filteredJobsSummaryList = (0, _utils.filterJobs)(_this.state.jobsSummaryList, filterClauses);\n      _this.setState({ filteredJobsSummaryList: filteredJobsSummaryList, filterClauses: filterClauses }, function () {\n        _this.refreshSelectedJobs();\n      });\n    };\n\n    _this.onRefreshClick = function () {\n      _this.setState({ isRefreshing: true });\n      _this.refreshJobSummaryList(true);\n    };\n\n    _this.isDoneRefreshing = function () {\n      _this.setState({ isRefreshing: false });\n    };\n\n    _this.state = {\n      isRefreshing: false,\n      loading: null,\n      jobsSummaryList: [],\n      filteredJobsSummaryList: [],\n      fullJobsList: {},\n      selectedJobs: [],\n      itemIdToExpandedRowMap: {},\n      filterClauses: [],\n      deletingJobIds: []\n    };\n\n    _this.updateFunctions = {};\n\n    _this.showEditJobFlyout = function () {};\n    _this.showDeleteJobModal = function () {};\n    _this.showStartDatafeedModal = function () {};\n    _this.showCreateWatchFlyout = function () {};\n\n    _this.blockRefresh = false;\n    return _this;\n  }\n\n  _createClass(JobsListView, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      // The advanced job wizard is still angularjs based and triggers\n      // broadcast events which it expects the jobs list to be subscribed to.\n      this.props.angularWrapperScope.$on('jobsUpdated', function () {\n        _this2.refreshJobSummaryList(true);\n      });\n      this.props.angularWrapperScope.$on('openCreateWatchWindow', function (e, job) {\n        _this2.showCreateWatchFlyout(job.job_id);\n      });\n\n      _timefilter.timefilter.disableTimeRangeSelector();\n      _timefilter.timefilter.enableAutoRefreshSelector();\n\n      this.initAutoRefresh();\n      this.initAutoRefreshUpdate();\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      _timefilter.timefilter.off('refreshIntervalUpdate');\n      this.clearRefreshInterval();\n    }\n  }, {\n    key: 'initAutoRefresh',\n    value: function initAutoRefresh() {\n      var _timefilter$getRefres = _timefilter.timefilter.getRefreshInterval(),\n          value = _timefilter$getRefres.value;\n\n      if (value === 0) {\n        // the auto refresher starts in an off state\n        // so switch it on and set the interval to 30s\n        _timefilter.timefilter.setRefreshInterval({\n          pause: false,\n          value: _jobs_list2.DEFAULT_REFRESH_INTERVAL_MS\n        });\n      }\n\n      this.setAutoRefresh();\n    }\n  }, {\n    key: 'initAutoRefreshUpdate',\n    value: function initAutoRefreshUpdate() {\n      var _this3 = this;\n\n      // update the interval if it changes\n      _timefilter.timefilter.on('refreshIntervalUpdate', function () {\n        _this3.setAutoRefresh();\n      });\n    }\n  }, {\n    key: 'setAutoRefresh',\n    value: function setAutoRefresh() {\n      var _timefilter$getRefres2 = _timefilter.timefilter.getRefreshInterval(),\n          value = _timefilter$getRefres2.value,\n          pause = _timefilter$getRefres2.pause;\n\n      if (pause) {\n        this.clearRefreshInterval();\n      } else {\n        this.setRefreshInterval(value);\n      }\n      this.refreshJobSummaryList(true);\n    }\n  }, {\n    key: 'setRefreshInterval',\n    value: function setRefreshInterval(interval) {\n      var _this4 = this;\n\n      this.clearRefreshInterval();\n      if (interval >= _jobs_list2.MINIMUM_REFRESH_INTERVAL_MS) {\n        this.blockRefresh = false;\n        jobsRefreshInterval = setInterval(function () {\n          return _this4.refreshJobSummaryList();\n        }, interval);\n      }\n    }\n  }, {\n    key: 'clearRefreshInterval',\n    value: function clearRefreshInterval() {\n      this.blockRefresh = true;\n      clearInterval(jobsRefreshInterval);\n    }\n  }, {\n    key: 'refreshSelectedJobs',\n    value: function refreshSelectedJobs() {\n      var selectedJobsIds = this.state.selectedJobs.map(function (j) {\n        return j.id;\n      });\n      var filteredJobIds = this.state.filteredJobsSummaryList.map(function (j) {\n        return j.id;\n      });\n\n      // refresh the jobs stored as selected\n      // only select those which are also in the filtered list\n      var selectedJobs = this.state.jobsSummaryList.filter(function (j) {\n        return selectedJobsIds.find(function (id) {\n          return id === j.id;\n        });\n      }).filter(function (j) {\n        return filteredJobIds.find(function (id) {\n          return id === j.id;\n        });\n      });\n\n      this.setState({ selectedJobs: selectedJobs });\n    }\n  }, {\n    key: 'refreshJobSummaryList',\n    value: function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var _this5 = this;\n\n        var forceRefresh = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n        var expandedJobsIds, jobs, fullJobsList, jobsSummaryList, filteredJobsSummaryList;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(forceRefresh === true || this.blockRefresh === false)) {\n                  _context.next = 21;\n                  break;\n                }\n\n                // Set loading to true for jobs_list table for initial job loading\n                if (this.state.loading === null) {\n                  this.setState({ loading: true });\n                }\n\n                expandedJobsIds = Object.keys(this.state.itemIdToExpandedRowMap);\n                _context.prev = 3;\n                _context.next = 6;\n                return _ml_api_service.ml.jobs.jobsSummary(expandedJobsIds);\n\n              case 6:\n                jobs = _context.sent;\n                fullJobsList = {};\n                jobsSummaryList = jobs.map(function (job) {\n                  if (job.fullJob !== undefined) {\n                    fullJobsList[job.id] = job.fullJob;\n                    delete job.fullJob;\n                  }\n                  job.latestTimestampSortValue = job.latestTimestampMs || 0;\n                  return job;\n                });\n                filteredJobsSummaryList = (0, _utils.filterJobs)(jobsSummaryList, this.state.filterClauses);\n\n                this.setState({ jobsSummaryList: jobsSummaryList, filteredJobsSummaryList: filteredJobsSummaryList, fullJobsList: fullJobsList, loading: false }, function () {\n                  _this5.refreshSelectedJobs();\n                });\n\n                Object.keys(this.updateFunctions).forEach(function (j) {\n                  _this5.updateFunctions[j].setState({ job: fullJobsList[j] });\n                });\n\n                jobs.forEach(function (job) {\n                  if (job.deleting && _this5.state.itemIdToExpandedRowMap[job.id]) {\n                    _this5.toggleRow(job.id);\n                  }\n                });\n\n                this.isDoneRefreshing();\n                if (jobsSummaryList.some(function (j) {\n                  return j.deleting === true;\n                })) {\n                  // if there are some jobs in a deleting state, start polling for\n                  // deleting jobs so we can update the jobs list once the\n                  // deleting tasks are over\n                  this.checkDeletingJobTasks();\n                }\n                _context.next = 21;\n                break;\n\n              case 17:\n                _context.prev = 17;\n                _context.t0 = _context['catch'](3);\n\n                console.error(_context.t0);\n                this.setState({ loading: false });\n\n              case 21:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[3, 17]]);\n      }));\n\n      function refreshJobSummaryList() {\n        return _ref.apply(this, arguments);\n      }\n\n      return refreshJobSummaryList;\n    }()\n  }, {\n    key: 'checkDeletingJobTasks',\n    value: function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        var _this6 = this;\n\n        var _ref3, jobIds;\n\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return _ml_api_service.ml.jobs.deletingJobTasks();\n\n              case 2:\n                _ref3 = _context2.sent;\n                jobIds = _ref3.jobIds;\n\n\n                if (jobIds.length === 0 || (0, _lodash.isEqual)(jobIds.sort(), this.state.deletingJobIds.sort())) {\n                  this.setState({\n                    deletingJobIds: jobIds\n                  });\n                  this.refreshJobSummaryList(true);\n                }\n\n                if (jobIds.length > 0 && deletingJobsRefreshTimeout === null) {\n                  deletingJobsRefreshTimeout = setTimeout(function () {\n                    deletingJobsRefreshTimeout = null;\n                    _this6.checkDeletingJobTasks();\n                  }, _jobs_list2.DELETING_JOBS_REFRESH_INTERVAL_MS);\n                }\n\n              case 6:\n              case 'end':\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function checkDeletingJobTasks() {\n        return _ref2.apply(this, arguments);\n      }\n\n      return checkDeletingJobTasks;\n    }()\n  }, {\n    key: 'renderJobsListComponents',\n    value: function renderJobsListComponents() {\n      var _this7 = this;\n\n      var _state = this.state,\n          loading = _state.loading,\n          jobsSummaryList = _state.jobsSummaryList;\n\n      var jobIds = jobsSummaryList.map(function (j) {\n        return j.id;\n      });\n      return _react2.default.createElement(\n        'div',\n        null,\n        _react2.default.createElement(\n          'div',\n          { className: 'actions-bar' },\n          _react2.default.createElement(_multi_job_actions.MultiJobActions, {\n            selectedJobs: this.state.selectedJobs,\n            allJobIds: jobIds,\n            showStartDatafeedModal: this.showStartDatafeedModal,\n            showDeleteJobModal: this.showDeleteJobModal,\n            refreshJobs: function refreshJobs() {\n              return _this7.refreshJobSummaryList(true);\n            }\n          }),\n          _react2.default.createElement(_job_filter_bar.JobFilterBar, { setFilters: this.setFilters })\n        ),\n        _react2.default.createElement(_jobs_list.JobsList, {\n          jobsSummaryList: this.state.filteredJobsSummaryList,\n          fullJobsList: this.state.fullJobsList,\n          itemIdToExpandedRowMap: this.state.itemIdToExpandedRowMap,\n          toggleRow: this.toggleRow,\n          selectJobChange: this.selectJobChange,\n          showEditJobFlyout: this.showEditJobFlyout,\n          showDeleteJobModal: this.showDeleteJobModal,\n          showStartDatafeedModal: this.showStartDatafeedModal,\n          refreshJobs: function refreshJobs() {\n            return _this7.refreshJobSummaryList(true);\n          },\n          selectedJobsCount: this.state.selectedJobs.length,\n          loading: loading\n        }),\n        _react2.default.createElement(_edit_job_flyout.EditJobFlyout, {\n          setShowFunction: this.setShowEditJobFlyoutFunction,\n          unsetShowFunction: this.unsetShowEditJobFlyoutFunction,\n          refreshJobs: function refreshJobs() {\n            return _this7.refreshJobSummaryList(true);\n          },\n          allJobIds: jobIds\n        }),\n        _react2.default.createElement(_delete_job_modal.DeleteJobModal, {\n          setShowFunction: this.setShowDeleteJobModalFunction,\n          unsetShowFunction: this.unsetShowDeleteJobModalFunction,\n          refreshJobs: function refreshJobs() {\n            return _this7.refreshJobSummaryList(true);\n          }\n        }),\n        _react2.default.createElement(_start_datafeed_modal.StartDatafeedModal, {\n          setShowFunction: this.setShowStartDatafeedModalFunction,\n          unsetShowFunction: this.unsetShowDeleteJobModalFunction,\n          getShowCreateWatchFlyoutFunction: this.getShowCreateWatchFlyoutFunction,\n          refreshJobs: function refreshJobs() {\n            return _this7.refreshJobSummaryList(true);\n          }\n        }),\n        _react2.default.createElement(_create_watch_flyout.CreateWatchFlyout, {\n          setShowFunction: this.setShowCreateWatchFlyoutFunction,\n          unsetShowFunction: this.unsetShowCreateWatchFlyoutFunction,\n          compile: this.props.compile\n        })\n      );\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _state2 = this.state,\n          isRefreshing = _state2.isRefreshing,\n          jobsSummaryList = _state2.jobsSummaryList;\n\n\n      return _react2.default.createElement(\n        _react2.default.Fragment,\n        null,\n        _react2.default.createElement(_jobs_stats_bar.JobStatsBar, {\n          jobsSummaryList: jobsSummaryList\n        }),\n        _react2.default.createElement(\n          'div',\n          { className: 'job-management' },\n          _react2.default.createElement(_node_available_warning.NodeAvailableWarning, null),\n          _react2.default.createElement(_upgrade.UpgradeWarning, null),\n          _react2.default.createElement(\n            'header',\n            null,\n            _react2.default.createElement(\n              'div',\n              { className: 'job-buttons-container' },\n              _react2.default.createElement(\n                _eui.EuiFlexGroup,\n                { alignItems: 'center' },\n                _react2.default.createElement(\n                  _eui.EuiFlexItem,\n                  { grow: false },\n                  _react2.default.createElement(_refresh_jobs_list_button.RefreshJobsListButton, {\n                    onRefreshClick: this.onRefreshClick,\n                    isRefreshing: isRefreshing\n                  })\n                ),\n                _react2.default.createElement(\n                  _eui.EuiFlexItem,\n                  { grow: false },\n                  _react2.default.createElement(_new_job_button.NewJobButton, null)\n                )\n              )\n            )\n          ),\n          _react2.default.createElement('div', { className: 'clear' }),\n          _react2.default.createElement(_eui.EuiSpacer, { size: 's' }),\n          this.renderJobsListComponents()\n        )\n      );\n    }\n  }]);\n\n  return JobsListView;\n}(_react.Component);",null]}