{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/graph/public/utils.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/graph/public/utils.js","mtime":1567631711959},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nvar venn = require('venn.js');\nmodule.exports = function () {\n\n  // Unwrap elasticsearch field names from mappings\n  // into a flattened list of field names\n  function unwrapFieldNames(obj, path, fields) {\n    if (!obj.properties) {\n      return;\n    }\n    for (var p in obj.properties) {\n      var child = obj.properties[p];\n      if (child.properties) {\n        path.push(p);\n        unwrapFieldNames(child, path, fields);\n        path.pop();\n      } else {\n        var parentName = '';\n        for (var i in path) {\n          parentName += path[i];\n          parentName += '.';\n        }\n        // Need to clone the path array here:\n        fields.push({\n          'name': parentName + p,\n          'path': path.slice(0),\n          'leafName': p\n        });\n        if (child.fields) {\n          for (var mfield in child.fields) {\n            fields.push({\n              'name': parentName + p + '.' + mfield,\n              'path': path.slice(0),\n              'leafName': p\n            });\n          }\n        }\n      }\n    }\n  }\n\n  function getMergeSuggestionObjects(termIntersects) {\n    var mergeCandidates = [];\n    for (var i in termIntersects) {\n      var ti = termIntersects[i];\n      mergeCandidates.push({\n        'id1': ti.id1,\n        'id2': ti.id2,\n        'term1': ti.term1,\n        'term2': ti.term2,\n        'v1': ti.v1,\n        'v2': ti.v2,\n        'overlap': ti.overlap,\n        width: 100,\n        height: 60 });\n    }\n    return mergeCandidates;\n  }\n\n  return {\n    'unwrapFieldNames': unwrapFieldNames,\n    'getMergeSuggestionObjects': getMergeSuggestionObjects\n  };\n}();",null]}