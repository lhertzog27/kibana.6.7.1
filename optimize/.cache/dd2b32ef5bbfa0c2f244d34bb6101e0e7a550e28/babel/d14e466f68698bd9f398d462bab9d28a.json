{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/jobs/new_job/simple/components/utils/create_fields.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/jobs/new_job/simple/components/utils/create_fields.js","mtime":1567631712057},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /*\n                                                                                                                                                                                                                                                                   * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                   * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                   * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                   */\n\nexports.createFields = createFields;\nexports.getIndexedFields = getIndexedFields;\n\nvar _general = require('plugins/ml/jobs/new_job/simple/components/constants/general');\n\nvar _field_types = require('plugins/ml/../common/constants/field_types');\n\nvar _job_utils = require('plugins/ml/../common/util/job_utils');\n\nvar _field_types_utils = require('plugins/ml/util/field_types_utils');\n\nvar _i18n = require('@kbn/i18n');\n\nfunction createFields(scope, indexPattern) {\n  var isPopulation = scope.formConfig.hasOwnProperty('overField');\n  var agg = scope.formConfig.agg;\n  var fields = [];\n  var categoryFields = [];\n  scope.ui.fields = [];\n  agg.type.params.forEach(function (param) {\n    if (param.name === 'field') {\n      fields = getIndexedFields(indexPattern, [_field_types.KBN_FIELD_TYPES.NUMBER, _field_types.KBN_FIELD_TYPES.STRING, _field_types.KBN_FIELD_TYPES.IP]);\n    }\n    if (param.name === 'customLabel') {\n      categoryFields = getIndexedFields(indexPattern, [_field_types.KBN_FIELD_TYPES.STRING, _field_types.KBN_FIELD_TYPES.IP]);\n    }\n  });\n\n  var countAgg = { type: scope.ui.aggTypeOptions.find(function (o) {\n      return o.name === 'count';\n    }) };\n\n  var eventRateField = {\n    id: _general.EVENT_RATE_COUNT_FIELD,\n    name: 'event rate',\n    tooltip: _i18n.i18n.translate('xpack.ml.newJob.simple.createFields.systemDefinedFieldTooltip', {\n      defaultMessage: 'System defined field'\n    }),\n    isCountField: true,\n    agg: countAgg,\n    mlType: _field_types.ML_JOB_FIELD_TYPES.NUMBER,\n    splitField: undefined,\n    firstSplitFieldName: undefined,\n    cardLabels: undefined\n  };\n  if (isPopulation) {\n    // population page, add additional items\n    eventRateField.splitField = undefined;\n    eventRateField.firstSplitFieldName = undefined;\n    eventRateField.cardLabels = undefined;\n  }\n  scope.ui.fields.push(eventRateField);\n\n  var cardinalityAgg = { type: scope.ui.aggTypeOptions.find(function (o) {\n      return o.name === 'cardinality';\n    }) };\n  fields.forEach(function (field, i) {\n    var id = (0, _job_utils.getSafeAggregationName)(field.displayName, i);\n    var f = {\n      id: id,\n      name: field.displayName,\n      tooltip: field.displayName,\n      // if the field is a keyword or an ip, set the default agg to be cardinality\n      agg: field.mlType === _field_types.ML_JOB_FIELD_TYPES.KEYWORD || field.mlType === _field_types.ML_JOB_FIELD_TYPES.IP ? _extends({}, cardinalityAgg) : _extends({}, agg),\n      mlType: field.mlType\n    };\n    if (isPopulation) {\n      // population page, add additional items\n      f.splitField = undefined;\n      f.firstSplitFieldName = undefined;\n      f.cardLabels = undefined;\n    }\n    scope.ui.fields.push(f);\n  });\n\n  categoryFields.forEach(function (field) {\n    scope.ui.splitFields.push(field);\n    if (isPopulation) {\n      scope.ui.overFields.push(field);\n    }\n  });\n}\n\nfunction getIndexedFields(indexPattern, fieldTypes) {\n  var fields = indexPattern.fields.raw.filter(function (f) {\n    return f.aggregatable === true;\n  });\n\n  if (fieldTypes) {\n    // filter out _type, _id and _index and scripted fields\n    fields = fields.filter(function (f) {\n      return f.displayName !== '_type' && f.displayName !== '_id' && f.displayName !== '_index' && f.scripted !== true;\n    });\n    // we only want fields which the type is in fieldTypes\n    fields = fields.filter(function (f) {\n      return fieldTypes.find(function (t) {\n        return t === f.type;\n      });\n    });\n    // create the mlType property\n    fields.forEach(function (f) {\n      return f.mlType = (0, _field_types_utils.kbnTypeToMLJobType)(f);\n    });\n    // sort the fields\n    fields = fields.sort(orderBy(['name', 'type']));\n  }\n  return fields;\n}\n\nfunction orderBy(items) {\n  return function (a, b) {\n    var result = 0;\n    items.forEach(function (i) {\n      var aa = a[i].toLowerCase();\n      var bb = b[i].toLowerCase();\n      if (aa < bb) {\n        result = -1;\n      } else if (aa > bb) {\n        result = 1;\n      }\n    });\n    return result || 0;\n  };\n}",null]}