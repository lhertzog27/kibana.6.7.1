{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/components/field_type_icon/field_type_icon.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/components/field_type_icon/field_type_icon.js","mtime":1567631712031},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FieldTypeIcon = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _eui = require('@elastic/eui');\n\nvar _field_types = require('../../../common/constants/field_types');\n\nvar _react3 = require('@kbn/i18n/react');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; } /*\n                                                                                                                                                                                                                              * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                              * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                              * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                              */\n\n// don't use something like plugins/ml/../common\n// because it won't work with the jest tests\n\n\nvar FieldTypeIcon = exports.FieldTypeIcon = (0, _react3.injectI18n)(function FieldTypeIcon(_ref) {\n  var _ref$tooltipEnabled = _ref.tooltipEnabled,\n      tooltipEnabled = _ref$tooltipEnabled === undefined ? false : _ref$tooltipEnabled,\n      type = _ref.type,\n      intl = _ref.intl;\n\n  var ariaLabel = '';\n  var iconClass = '';\n  var iconChar = '';\n\n  switch (type) {\n    case _field_types.ML_JOB_FIELD_TYPES.BOOLEAN:\n      ariaLabel = intl.formatMessage({\n        id: 'xpack.ml.fieldTypeIcon.booleanTypeAriaLabel',\n        defaultMessage: 'boolean type'\n      });\n      iconClass = 'fa-adjust';\n      break;\n    case _field_types.ML_JOB_FIELD_TYPES.DATE:\n      ariaLabel = intl.formatMessage({\n        id: 'xpack.ml.fieldTypeIcon.dateTypeAriaLabel',\n        defaultMessage: 'date type'\n      });\n      iconClass = 'fa-clock-o';\n      break;\n    case _field_types.ML_JOB_FIELD_TYPES.NUMBER:\n      ariaLabel = intl.formatMessage({\n        id: 'xpack.ml.fieldTypeIcon.numberTypeAriaLabel',\n        defaultMessage: 'number type'\n      });\n      iconChar = '#';\n      break;\n    case _field_types.ML_JOB_FIELD_TYPES.GEO_POINT:\n      ariaLabel = intl.formatMessage({\n        id: 'xpack.ml.fieldTypeIcon.geoPointTypeAriaLabel',\n        defaultMessage: '{geoPointParam} type'\n      }, { geoPointParam: 'geo_point' });\n      iconClass = 'fa-globe';\n      break;\n    case _field_types.ML_JOB_FIELD_TYPES.KEYWORD:\n      ariaLabel = intl.formatMessage({\n        id: 'xpack.ml.fieldTypeIcon.keywordTypeAriaLabel',\n        defaultMessage: 'keyword type'\n      });\n      iconChar = 't';\n      break;\n    case _field_types.ML_JOB_FIELD_TYPES.TEXT:\n      ariaLabel = intl.formatMessage({\n        id: 'xpack.ml.fieldTypeIcon.textTypeAriaLabel',\n        defaultMessage: 'text type'\n      });\n      iconClass = 'fa-file-text-o';\n      break;\n    case _field_types.ML_JOB_FIELD_TYPES.IP:\n      ariaLabel = intl.formatMessage({\n        id: 'xpack.ml.fieldTypeIcon.ipTypeAriaLabel',\n        defaultMessage: 'IP type'\n      });\n      iconClass = 'fa-laptop';\n      break;\n    case _field_types.ML_JOB_FIELD_TYPES.UNKNOWN:\n      ariaLabel = intl.formatMessage({\n        id: 'xpack.ml.fieldTypeIcon.unknownTypeAriaLabel',\n        defaultMessage: 'Unknown type'\n      });\n      iconChar = '?';\n      break;\n    default:\n      // if type doesn't match one of ML_JOB_FIELD_TYPES\n      // don't render the component at all\n      return null;\n  }\n\n  var className = 'field-type-icon';\n  if (iconClass !== '') {\n    className += ' kuiIcon ' + iconClass;\n  }\n\n  var containerProps = {\n    ariaLabel: ariaLabel,\n    className: className,\n    iconChar: iconChar\n  };\n\n  if (tooltipEnabled === true) {\n    // wrap the inner component inside <span> because EuiToolTip doesn't seem\n    // to support having another component directly inside the tooltip anchor\n    // see https://github.com/elastic/eui/issues/839\n    return _react2.default.createElement(\n      _eui.EuiToolTip,\n      {\n        position: 'left',\n        content: _react2.default.createElement(_react3.FormattedMessage, {\n          id: 'xpack.ml.fieldTypeIcon.fieldTypeTooltip',\n          defaultMessage: '{type} type',\n          values: { type: type }\n        })\n      },\n      _react2.default.createElement(FieldTypeIconContainer, containerProps)\n    );\n  }\n\n  return _react2.default.createElement(FieldTypeIconContainer, containerProps);\n});\nFieldTypeIcon.WrappedComponent.propTypes = {\n  tooltipEnabled: _propTypes2.default.bool,\n  type: _propTypes2.default.string\n};\n\n// If the tooltip is used, it will apply its events to its first inner child.\n// To pass on its properties we apply `rest` to the outer `span` element.\nfunction FieldTypeIconContainer(_ref2) {\n  var ariaLabel = _ref2.ariaLabel,\n      className = _ref2.className,\n      iconChar = _ref2.iconChar,\n      rest = _objectWithoutProperties(_ref2, ['ariaLabel', 'className', 'iconChar']);\n\n  return _react2.default.createElement(\n    'span',\n    _extends({ className: 'field-type-icon-container' }, rest, { tabIndex: '0' }),\n    iconChar === '' ? _react2.default.createElement('span', { 'aria-label': ariaLabel, className: className }) : _react2.default.createElement(\n      'span',\n      { 'aria-label': ariaLabel, className: className },\n      _react2.default.createElement(\n        'strong',\n        { 'aria-hidden': 'true' },\n        iconChar\n      )\n    )\n  );\n}",null]}