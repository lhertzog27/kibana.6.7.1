{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/license_management/public/store/actions/start_trial.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/license_management/public/store/actions/start_trial.js","mtime":1567631712003},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.startLicenseTrial = exports.loadTrialStatus = exports.trialStatusLoaded = undefined;\n\nvar _reduxActions = require('redux-actions');\n\nvar _es = require('../../lib/es');\n\nvar _notify = require('ui/notify');\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            */\n\nvar trialStatusLoaded = exports.trialStatusLoaded = (0, _reduxActions.createAction)('LICENSE_MANAGEMENT_TRIAL_STATUS_LOADED');\n\nvar loadTrialStatus = exports.loadTrialStatus = function loadTrialStatus() {\n  return function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(dispatch) {\n      var trialOK;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return (0, _es.canStartTrial)();\n\n            case 2:\n              trialOK = _context.sent;\n\n              dispatch(trialStatusLoaded(trialOK));\n\n            case 4:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, undefined);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\n\nvar startLicenseTrial = exports.startLicenseTrial = function startLicenseTrial() {\n  return function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(dispatch, getState, _ref2) {\n      var xPackInfo = _ref2.xPackInfo;\n\n      var _ref4, trial_was_started, error_message;\n\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return (0, _es.startTrial)();\n\n            case 2:\n              _ref4 = _context2.sent;\n              trial_was_started = _ref4.trial_was_started;\n              error_message = _ref4.error_message;\n\n              if (!trial_was_started) {\n                _context2.next = 11;\n                break;\n              }\n\n              _context2.next = 8;\n              return xPackInfo.refresh();\n\n            case 8:\n              // reload necessary to get left nav to refresh with proper links\n              window.location.reload();\n              _context2.next = 12;\n              break;\n\n            case 11:\n              return _context2.abrupt('return', _notify.toastNotifications.addDanger(error_message));\n\n            case 12:\n            case 'end':\n              return _context2.stop();\n          }\n        }\n      }, _callee2, undefined);\n    }));\n\n    return function (_x2, _x3, _x4) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n};",null]}