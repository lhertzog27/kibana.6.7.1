{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/public/components/render_with_fn/render_with_fn.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/public/components/render_with_fn/render_with_fn.js","mtime":1567631711926},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RenderWithFn = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _lodash = require('lodash');\n\nvar _render_to_dom = require('../render_to_dom');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\nvar RenderWithFn = exports.RenderWithFn = function (_React$Component) {\n  _inherits(RenderWithFn, _React$Component);\n\n  function RenderWithFn() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, RenderWithFn);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = RenderWithFn.__proto__ || Object.getPrototypeOf(RenderWithFn)).call.apply(_ref, [this].concat(args))), _this), _this.callRenderFn = function () {\n      var _this$props = _this.props,\n          handlers = _this$props.handlers,\n          config = _this$props.config,\n          renderFn = _this$props.renderFn,\n          reuseNode = _this$props.reuseNode,\n          functionName = _this$props.name;\n      // TODO: We should wait until handlers.done() is called before replacing the element content?\n\n      if (!reuseNode || !_this.renderTarget) {\n        _this.resetRenderTarget(_this.domNode);\n      }\n      // else if (!firstRender) handlers.destroy();\n\n      var renderConfig = (0, _lodash.cloneDeep)(config);\n\n      // TODO: this is hacky, but it works. it stops Kibana from blowing up when a render throws\n      try {\n        renderFn(_this.renderTarget, renderConfig, handlers);\n        _this.firstRender = false;\n      } catch (err) {\n        console.error('renderFn threw', err);\n        _this.props.onError(err, { title: 'Rendering \\'' + (functionName || 'function') + '\\' failed' });\n      }\n    }, _this.resetRenderTarget = function (domNode) {\n      var handlers = _this.props.handlers;\n\n\n      if (!domNode) {\n        throw new Error('RenderWithFn can not reset undefined target node');\n      }\n\n      // call destroy on existing element\n      if (!_this.firstRender) {\n        handlers.destroy();\n      }\n\n      while (domNode.firstChild) {\n        domNode.removeChild(domNode.firstChild);\n      }\n\n      _this.firstRender = true;\n      _this.renderTarget = _this.createRenderTarget();\n      domNode.appendChild(_this.renderTarget);\n    }, _this.createRenderTarget = function () {\n      var div = document.createElement('div');\n      div.style.width = '100%';\n      div.style.height = '100%';\n      return div;\n    }, _this.shouldFullRerender = function (prevProps) {\n      // TODO: What a shitty hack. None of these props should update when you move the element.\n      // This should be fixed at a higher level.\n      return !(0, _lodash.isEqual)(_this.props.config, prevProps.config) || !(0, _lodash.isEqual)(_this.props.renderFn.toString(), prevProps.renderFn.toString());\n    }, _this.destroy = function () {\n      _this.props.handlers.destroy();\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(RenderWithFn, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.firstRender = true;\n      this.renderTarget = null;\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(_ref2) {\n      var renderFn = _ref2.renderFn;\n\n      var newRenderFunction = renderFn !== this.props.renderFn;\n\n      if (newRenderFunction) {\n        this.resetRenderTarget(this.domNode);\n      }\n    }\n  }, {\n    key: 'shouldComponentUpdate',\n    value: function shouldComponentUpdate(prevProps) {\n      return !(0, _lodash.isEqual)(this.props.size, prevProps.size) || this.shouldFullRerender(prevProps);\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps) {\n      var _props = this.props,\n          handlers = _props.handlers,\n          size = _props.size;\n      // Config changes\n\n      if (this.shouldFullRerender(prevProps)) {\n        // This should be the only place you call renderFn besides the first time\n        this.callRenderFn();\n      }\n\n      // Size changes\n      if (!(0, _lodash.isEqual)(size, prevProps.size)) {\n        return handlers.resize(size);\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.props.handlers.destroy();\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      // NOTE: the data-shared-* attributes here are used for reporting\n      return _react2.default.createElement(\n        'div',\n        {\n          className: 'canvasWorkpad--element_render canvasRenderEl',\n          style: { height: '100%', width: '100%' }\n        },\n        _react2.default.createElement(_render_to_dom.RenderToDom, {\n          style: { height: '100%', width: '100%' },\n          render: function render(domNode) {\n            _this2.domNode = domNode;\n            _this2.callRenderFn();\n          }\n        })\n      );\n    }\n  }]);\n\n  return RenderWithFn;\n}(_react2.default.Component);\n\nRenderWithFn.propTypes = {\n  name: _propTypes2.default.string.isRequired,\n  renderFn: _propTypes2.default.func.isRequired,\n  reuseNode: _propTypes2.default.bool,\n  handlers: _propTypes2.default.shape({\n    // element handlers, see components/element_wrapper/lib/handlers.js\n    setFilter: _propTypes2.default.func.isRequired,\n    getFilter: _propTypes2.default.func.isRequired,\n    done: _propTypes2.default.func.isRequired,\n    // render handlers, see lib/handlers.js\n    resize: _propTypes2.default.func.isRequired,\n    onResize: _propTypes2.default.func.isRequired,\n    destroy: _propTypes2.default.func.isRequired,\n    onDestroy: _propTypes2.default.func.isRequired\n  }),\n  config: _propTypes2.default.object.isRequired,\n  size: _propTypes2.default.object.isRequired,\n  onError: _propTypes2.default.func.isRequired\n};\nRenderWithFn.defaultProps = {\n  reuseNode: false\n};\nRenderWithFn.domNode = null;",null]}