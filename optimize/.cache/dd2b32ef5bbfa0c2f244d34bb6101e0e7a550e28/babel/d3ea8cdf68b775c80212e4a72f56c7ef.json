{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/ui/public/chrome/directives/global_nav/app_switcher/app_switcher.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/chrome/directives/global_nav/app_switcher/app_switcher.js","mtime":1567631711710},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nvar _dom_location = require('../../../../dom_location');\n\nvar _url = require('url');\n\nvar _modules = require('../../../../modules');\n\nvar _app_switcher = require('./app_switcher.html');\n\nvar _app_switcher2 = _interopRequireDefault(_app_switcher);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n_modules.uiModules.get('kibana').provider('appSwitcherEnsureNavigation', function () {\n  var forceNavigation = false;\n\n  this.forceNavigation = function (val) {\n    forceNavigation = !!val;\n  };\n\n  this.$get = ['Private', function (Private) {\n    var domLocation = Private(_dom_location.DomLocationProvider);\n\n    return function (event, link) {\n      if (link.disabled) {\n        event.preventDefault();\n      }\n\n      if (!forceNavigation || event.isDefaultPrevented() || event.altKey || event.metaKey || event.ctrlKey) {\n        return;\n      }\n\n      var toParsed = (0, _url.parse)(event.delegateTarget.href);\n      var fromParsed = (0, _url.parse)(domLocation.href);\n      var sameProto = toParsed.protocol === fromParsed.protocol;\n      var sameHost = toParsed.host === fromParsed.host;\n      var samePath = toParsed.path === fromParsed.path;\n\n      if (sameProto && sameHost && samePath) {\n        toParsed.hash && domLocation.reload();\n\n        // event.preventDefault() keeps the browser from seeing the new url as an update\n        // and even setting window.location does not mimic that behavior, so instead\n        // we use stopPropagation() to prevent angular from seeing the click and\n        // starting a digest cycle/attempting to handle it in the router.\n        event.stopPropagation();\n      }\n    };\n  }];\n}).directive('appSwitcher', function () {\n  return {\n    restrict: 'E',\n    scope: {\n      chrome: '='\n    },\n    template: _app_switcher2.default,\n    controllerAs: 'switcher',\n    controller: function controller($scope, appSwitcherEnsureNavigation, globalNavState) {\n      if (!$scope.chrome || !$scope.chrome.getNavLinks) {\n        throw new TypeError('appSwitcher directive requires the \"chrome\" config-object');\n      }\n\n      this.links = $scope.chrome.getNavLinks();\n\n      // links don't cause full-navigation events in certain scenarios\n      // so we force them when needed\n      this.ensureNavigation = appSwitcherEnsureNavigation;\n\n      this.getTooltip = function (link) {\n        // If the sidebar is open then we don't need to show the title because\n        // it will already be visible.\n        if (globalNavState.isOpen()) {\n          return link.tooltip;\n        }\n        return link.tooltip ? link.title + ' - ' + link.tooltip : link.title;\n      };\n    }\n  };\n});",null]}