{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/canvas_plugin_src/uis/models/point_series.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/canvas_plugin_src/uis/models/point_series.js","mtime":1567631711910},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.pointseries = undefined;\n\nvar _lodash = require('lodash');\n\nvar _resolved_arg = require('../../../public/lib/resolved_arg');\n\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nvar pointseries = exports.pointseries = function pointseries() {\n  return {\n    name: 'pointseries',\n    displayName: 'Dimensions & measures',\n    args: [{\n      name: 'x',\n      displayName: 'X-axis',\n      help: 'Data along the horizontal axis. Usually a number, string or date',\n      argType: 'datacolumn'\n    }, {\n      name: 'y',\n      displayName: 'Y-axis',\n      help: 'Data along the vertical axis. Usually a number',\n      argType: 'datacolumn'\n    }, {\n      name: 'color',\n      displayName: 'Color',\n      help: 'Determines the color of a mark or series',\n      argType: 'datacolumn'\n    }, {\n      name: 'size',\n      displayName: 'Size',\n      help: 'Determine the size of a mark',\n      argType: 'datacolumn'\n    }, {\n      name: 'text',\n      displayName: 'Text',\n      help: 'Set the text to use as, or around, the mark',\n      argType: 'datacolumn'\n    }],\n    resolve: function resolve(_ref) {\n      var context = _ref.context;\n\n      if ((0, _resolved_arg.getState)(context) !== 'ready') {\n        return { columns: [] };\n      }\n      return { columns: (0, _lodash.get)((0, _resolved_arg.getValue)(context), 'columns', []) };\n    }\n  };\n};",null]}