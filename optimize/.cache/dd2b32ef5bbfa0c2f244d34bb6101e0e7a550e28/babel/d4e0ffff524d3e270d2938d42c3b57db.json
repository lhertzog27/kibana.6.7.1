{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/public/lib/notify.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/public/lib/notify.js","mtime":1567631711933},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.notify = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _notify = require('ui/notify');\n\nvar _format_msg = require('ui/notify/lib/format_msg');\n\nvar _lodash = require('lodash');\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; } /*\n                                                                                                                                                                                                                              * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                              * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                              * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                              */\n\nvar getToast = function getToast(err) {\n  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var errData = (0, _lodash.get)(err, 'response') || err;\n  var errMsg = (0, _format_msg.formatMsg)(errData);\n\n  var title = opts.title,\n      rest = _objectWithoutProperties(opts, ['title']);\n\n  var text = null;\n\n  if (title) {\n    text = errMsg;\n  }\n\n  return _extends({}, rest, {\n    title: title || errMsg,\n    text: text\n  });\n};\n\nvar notify = exports.notify = {\n  /*\n   * @param {(string | Object)} err: message or Error object\n   * @param {Object} opts: option to override toast title or icon, see https://github.com/elastic/kibana/blob/master/src/ui/public/notify/toasts/TOAST_NOTIFICATIONS.md\n   */\n  error: function error(err, opts) {\n    _notify.toastNotifications.addDanger(getToast(err, opts));\n  },\n  warning: function warning(err, opts) {\n    _notify.toastNotifications.addWarning(getToast(err, opts));\n  },\n  info: function info(err, opts) {\n    _notify.toastNotifications.add(getToast(err, opts));\n  },\n  success: function success(err, opts) {\n    _notify.toastNotifications.addSuccess(getToast(err, opts));\n  }\n};",null]}