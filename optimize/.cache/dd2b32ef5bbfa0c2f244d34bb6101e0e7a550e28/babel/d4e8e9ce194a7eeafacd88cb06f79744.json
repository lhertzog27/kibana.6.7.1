{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/monitoring/public/views/elasticsearch/indices/index.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/monitoring/public/views/elasticsearch/indices/index.js","mtime":1567631712101},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } }; /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             */\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _lodash = require('lodash');\n\nvar _routes = require('ui/routes');\n\nvar _routes2 = _interopRequireDefault(_routes);\n\nvar _route_init = require('plugins/monitoring/lib/route_init');\n\nvar _ = require('../../');\n\nvar _components = require('../../../components');\n\nvar _index = require('./index.html');\n\nvar _index2 = _interopRequireDefault(_index);\n\nvar _i18n = require('ui/i18n');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n_routes2.default.when('/elasticsearch/indices', {\n  template: _index2.default,\n  resolve: {\n    clusters: function clusters(Private) {\n      var routeInit = Private(_route_init.routeInitProvider);\n      return routeInit();\n    }\n  },\n  controllerAs: 'elasticsearchIndices',\n  controller: function (_MonitoringViewBaseEu) {\n    _inherits(ElasticsearchIndicesController, _MonitoringViewBaseEu);\n\n    function ElasticsearchIndicesController($injector, $scope, i18n) {\n      var _call;\n\n      _classCallCheck(this, ElasticsearchIndicesController);\n\n      var $route = $injector.get('$route');\n      var globalState = $injector.get('globalState');\n      var features = $injector.get('features');\n\n      var clusterUuid = globalState.cluster_uuid;\n\n      $scope.cluster = (0, _lodash.find)($route.current.locals.clusters, { cluster_uuid: clusterUuid });\n\n      var showSystemIndices = features.isEnabled('showSystemIndices', false);\n\n      var _this = _possibleConstructorReturn(this, (ElasticsearchIndicesController.__proto__ || Object.getPrototypeOf(ElasticsearchIndicesController)).call(this, (_call = {\n        title: i18n('xpack.monitoring.elasticsearch.indices.routeTitle', {\n          defaultMessage: 'Elasticsearch - Indices'\n        }),\n        storageKey: 'elasticsearch.indices',\n        apiUrlFn: function apiUrlFn() {\n          return '../api/monitoring/v1/clusters/' + clusterUuid + '/elasticsearch/indices?show_system_indices=' + showSystemIndices;\n        },\n        reactNodeId: 'elasticsearchIndicesReact',\n        defaultData: {},\n        $scope: $scope,\n        $injector: $injector\n      }, _defineProperty(_call, '$scope', $scope), _defineProperty(_call, '$injector', $injector), _call)));\n\n      _this.isCcrEnabled = $scope.cluster.isCcrEnabled;\n\n      // for binding\n      var toggleShowSystemIndices = function toggleShowSystemIndices(isChecked) {\n        // flip the boolean\n        showSystemIndices = isChecked;\n        // preserve setting in localStorage\n        features.update('showSystemIndices', isChecked);\n        // update the page (resets pagination and sorting)\n        _this.updateData();\n      };\n\n      $scope.$watch(function () {\n        return _this.data;\n      }, function (data) {\n        _this.renderReact(data);\n      });\n\n      _this.renderReact = function (_ref) {\n        var clusterStatus = _ref.clusterStatus,\n            indices = _ref.indices;\n\n        _get(ElasticsearchIndicesController.prototype.__proto__ || Object.getPrototypeOf(ElasticsearchIndicesController.prototype), 'renderReact', _this).call(_this, _react2.default.createElement(\n          _i18n.I18nContext,\n          null,\n          _react2.default.createElement(_components.ElasticsearchIndices, {\n            clusterStatus: clusterStatus,\n            indices: indices,\n            showSystemIndices: showSystemIndices,\n            toggleShowSystemIndices: toggleShowSystemIndices,\n            sorting: _this.sorting,\n            pagination: _this.pagination,\n            onTableChange: _this.onTableChange\n          })\n        ));\n      };\n      return _this;\n    }\n\n    return ElasticsearchIndicesController;\n  }(_.MonitoringViewBaseEuiTableController)\n});",null]}