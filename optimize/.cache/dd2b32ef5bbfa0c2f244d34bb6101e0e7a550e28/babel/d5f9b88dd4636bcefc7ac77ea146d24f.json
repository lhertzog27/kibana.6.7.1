{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/ml_nodes_check/check_ml_nodes.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/ml_nodes_check/check_ml_nodes.js","mtime":1567631712061},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.checkMlNodesAvailable = checkMlNodesAvailable;\nexports.getMlNodeCount = getMlNodeCount;\nexports.mlNodesAvailable = mlNodesAvailable;\nexports.permissionToViewMlNodeCount = permissionToViewMlNodeCount;\n\nvar _ml_api_service = require('plugins/ml/services/ml_api_service');\n\nvar mlNodeCount = 0; /*\n                      * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                      * or more contributor license agreements. Licensed under the Elastic License;\n                      * you may not use this file except in compliance with the Elastic License.\n                      */\n\nvar userHasPermissionToViewMlNodeCount = false;\n\nfunction checkMlNodesAvailable(kbnUrl) {\n  getMlNodeCount().then(function (nodes) {\n    if (nodes.count !== undefined && nodes.count > 0) {\n      Promise.resolve();\n    } else {\n      kbnUrl.redirect('/jobs');\n      Promise.reject();\n    }\n  });\n}\n\nfunction getMlNodeCount() {\n  return new Promise(function (resolve) {\n    _ml_api_service.ml.mlNodeCount().then(function (nodes) {\n      mlNodeCount = nodes.count;\n      userHasPermissionToViewMlNodeCount = true;\n      resolve(nodes);\n    }).catch(function (error) {\n      mlNodeCount = 0;\n      if (error.statusCode === 403) {\n        userHasPermissionToViewMlNodeCount = false;\n      } else {\n        console.error(error);\n      }\n      resolve({ count: 0 });\n    });\n  });\n}\n\nfunction mlNodesAvailable() {\n  return mlNodeCount !== 0;\n}\n\nfunction permissionToViewMlNodeCount() {\n  return userHasPermissionToViewMlNodeCount;\n}",null]}