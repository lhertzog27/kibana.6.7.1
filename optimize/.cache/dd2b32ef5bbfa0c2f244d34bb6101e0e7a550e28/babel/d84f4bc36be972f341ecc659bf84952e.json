{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/public/lib/clone_subgraphs.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/public/lib/clone_subgraphs.js","mtime":1567631711932},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.cloneSubgraphs = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /*\n                                                                                                                                                                                                                                                                   * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                   * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                   * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                   */\n\nvar _functional = require('./aeroelastic/functional');\n\nvar _get_id = require('./get_id');\n\nvar cloneSubgraphs = exports.cloneSubgraphs = function cloneSubgraphs(nodes) {\n  var idMap = (0, _functional.arrayToMap)(nodes.map(function (n) {\n    return n.id;\n  }));\n  // We simultaneously provide unique id values for all elements (across all pages)\n  // AND ensure that parent-child relationships are retained (via matching id values within page)\n  Object.keys(idMap).forEach(function (key) {\n    return idMap[key] = (0, _get_id.getId)(key.split('-')[0]);\n  }); // new group names to which we can map\n  // must return elements in the same order, for several reasons\n  var newNodes = nodes.map(function (element) {\n    return _extends({}, element, {\n      id: idMap[element.id],\n      position: _extends({}, element.position, {\n        parent: element.position.parent ? idMap[element.position.parent] : null\n      })\n    });\n  });\n  return newNodes;\n};",null]}