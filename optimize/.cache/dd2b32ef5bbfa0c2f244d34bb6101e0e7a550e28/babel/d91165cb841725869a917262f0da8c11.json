{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/watcher/public/services/watch/watch_service.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/watcher/public/services/watch/watch_service.js","mtime":1567631712351},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WatchService = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\nopyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\nor more contributor license agreements. Licensed under the Elastic License;\nyou may not use this file except in compliance with the Elastic License.\nn\nvar _chrome = require('ui/chrome');\n\nvar _chrome2 = _interopRequireDefault(_chrome);\n\nvar _lodash = require('lodash');\n\nvar _constants = require('../../../common/constants');\n\nvar _execute_details = require('plugins/watcher/models/execute_details');\n\nvar _watch = require('plugins/watcher/models/watch');\n\nvar _watch_status = require('plugins/watcher/models/watch_status');\n\nvar _watch_history_item = require('plugins/watcher/models/watch_history_item');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar WatchService = exports.WatchService = function () {\n  function WatchService($http) {\n    _classCallCheck(this, WatchService);\n\n    this.$http = $http;\n    this.basePath = _chrome2.default.addBasePath(_constants.ROUTES.API_ROOT);\n  }\n\n  _createClass(WatchService, [{\n    key: 'newWatch',\n    value: function newWatch() {\n      var watchType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _constants.WATCH_TYPES.JSON;\n\n      var WatchType = _watch.Watch.getWatchTypes()[watchType];\n      return new WatchType();\n    }\n  }, {\n    key: 'loadWatch',\n    value: function loadWatch(id) {\n      return this.$http.get(this.basePath + '/watch/' + id).then(function (response) {\n        return _watch.Watch.fromUpstreamJson(response.data.watch);\n      });\n    }\n\n    /**\n     * @param watchId string ID of watch\n     * @param startTime string Relative representation of start time of watch\n     *   history, e.g. \"now-1h\"\n     * @return Promise Array of watch history items\n     */\n\n  }, {\n    key: 'loadWatchHistory',\n    value: function loadWatchHistory(watchId, startTime) {\n      var url = this.basePath + '/watch/' + watchId + '/history';\n      if (startTime) {\n        url += '?startTime=' + startTime;\n      }\n\n      return this.$http.get(url).then(function (response) {\n        return response.data.watchHistoryItems;\n      }).then(function (watchHistoryItems) {\n        return watchHistoryItems.map(_watch_history_item.WatchHistoryItem.fromUpstreamJson);\n      });\n    }\n  }, {\n    key: 'saveWatch',\n    value: function saveWatch(watchModel) {\n      var url = this.basePath + '/watch/' + watchModel.id;\n\n      return this.$http.put(url, watchModel.upstreamJson).catch(function (e) {\n        throw e.data.message;\n      });\n    }\n\n    /**\n     * @param id string ID of watch to delete\n     * @return Promise\n     */\n\n  }, {\n    key: 'deleteWatch',\n    value: function deleteWatch(id) {\n      return this.$http.delete(this.basePath + '/watch/' + id).catch(function (e) {\n        throw e.data.message;\n      });\n    }\n\n    /**\n     * @param id string ID of watch to deactivate\n     * @return Promise\n     */\n\n  }, {\n    key: 'deactivateWatch',\n    value: function deactivateWatch(id) {\n      var url = this.basePath + '/watch/' + id + '/deactivate';\n      return this.$http.put(url).then(function (response) {\n        return _watch_status.WatchStatus.fromUpstreamJson(response.data.watchStatus);\n      }).catch(function (e) {\n        throw e.data.message;\n      });\n    }\n\n    /**\n     * @param id string ID of watch to activate\n     * @return Promise\n     */\n\n  }, {\n    key: 'activateWatch',\n    value: function activateWatch(id) {\n      var url = this.basePath + '/watch/' + id + '/activate';\n      return this.$http.put(url).then(function (response) {\n        return _watch_status.WatchStatus.fromUpstreamJson(response.data.watchStatus);\n      }).catch(function (e) {\n        throw e.data.message;\n      });\n    }\n\n    /**\n     * @param watchId string ID of watch whose action is being acknowledged\n     * @param actionId string ID of watch action to acknowledge\n     * @return Promise updated WatchStatus object\n     */\n\n  }, {\n    key: 'acknowledgeWatchAction',\n    value: function acknowledgeWatchAction(watchId, actionId) {\n      var url = this.basePath + '/watch/' + watchId + '/action/' + actionId + '/acknowledge';\n      return this.$http.put(url).then(function (response) {\n        return _watch_status.WatchStatus.fromUpstreamJson(response.data.watchStatus);\n      }).catch(function (e) {\n        throw e.data.message;\n      });\n    }\n\n    /**\n     * @param executeDetailsModel ExecuteDetailsModel instance with options on how to execute the watch\n     * @param watchModel Watch instance\n     * @return Promise which returns a populated WatchHistoryItem on success\n     */\n\n  }, {\n    key: 'executeWatch',\n    value: function executeWatch(executeDetailsModel, watchModel) {\n      return this.$http.put(this.basePath + '/watch/execute', {\n        executeDetails: executeDetailsModel.upstreamJson,\n        watch: watchModel.upstreamJson\n      }).then(function (response) {\n        return _watch_history_item.WatchHistoryItem.fromUpstreamJson(response.data.watchHistoryItem);\n      }).catch(function (e) {\n        throw e.data.message;\n      });\n    }\n\n    /**\n     * @param watchModel Watch instance\n     * @param actionModel Watch instance\n     * @return Promise which returns a populated WatchHistoryItem on success\n     */\n\n  }, {\n    key: 'simulateWatchAction',\n    value: function simulateWatchAction(watchModel, actionModel) {\n      var actionModes = (0, _lodash.reduce)(watchModel.actions, function (acc, action) {\n        acc[action.id] = action === actionModel ? _constants.ACTION_MODES.FORCE_EXECUTE : _constants.ACTION_MODES.SKIP;\n        return acc;\n      }, {});\n\n      var executeDetails = new _execute_details.ExecuteDetails({\n        triggeredTime: 'now',\n        scheduledTime: 'now',\n        ignoreCondition: true,\n        actionModes: actionModes,\n        recordExecution: false\n      });\n\n      return this.executeWatch(executeDetails, watchModel);\n    }\n  }, {\n    key: 'visualizeWatch',\n    value: function visualizeWatch(watchModel, visualizeOptions) {\n      return this.$http.post(this.basePath + '/watch/visualize', {\n        watch: watchModel.upstreamJson,\n        options: visualizeOptions.upstreamJson\n      }).then(function (response) {\n        return response.data;\n      }).catch(function (e) {\n        throw e.data.message;\n      });\n    }\n  }]);\n\n  return WatchService;\n}();",null]}