{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/file_datavisualizer/components/edit_flyout/overrides.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/file_datavisualizer/components/edit_flyout/overrides.js","mtime":1567631712043},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Overrides = undefined;\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require('@kbn/i18n/react');\n\nvar _i18n = require('@kbn/i18n');\n\nvar _react2 = require('react');\n\nvar _react3 = _interopRequireDefault(_react2);\n\nvar _eui = require('@elastic/eui');\n\nvar _options = require('./options');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\nvar formatOptions = (0, _options.getFormatOptions)();\nvar timestampFormatOptions = (0, _options.getTimestampFormatOptions)();\nvar delimiterOptions = (0, _options.getDelimiterOptions)();\nvar quoteOptions = (0, _options.getQuoteOptions)();\n// const charsetOptions = getCharsetOptions();\n\nvar LINES_TO_SAMPLE_VALUE_MIN = 3;\nvar LINES_TO_SAMPLE_VALUE_MAX = 1000000;\n\nvar Overrides = exports.Overrides = function (_Component) {\n  _inherits(Overrides, _Component);\n\n  function Overrides(props) {\n    _classCallCheck(this, Overrides);\n\n    var _this = _possibleConstructorReturn(this, (Overrides.__proto__ || Object.getPrototypeOf(Overrides)).call(this, props));\n\n    _this.linesToSampleErrors = _i18n.i18n.translate('xpack.ml.fileDatavisualizer.editFlyout.overrides.linesToSampleErrorMessage', {\n      defaultMessage: 'Value must be greater than {min} and less than or equal to {max}',\n      values: {\n        min: LINES_TO_SAMPLE_VALUE_MIN,\n        max: LINES_TO_SAMPLE_VALUE_MAX\n      }\n    });\n\n    _this.applyOverrides = function () {\n      var overrides = _extends({}, _this.state.overrides);\n      overrides.delimiter = convertDelimiterBack(overrides.delimiter, _this.state.customDelimiter);\n\n      _this.props.setOverrides(overrides);\n    };\n\n    _this.onFormatChange = function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 1),\n          opt = _ref2[0];\n\n      var format = opt ? opt.label : '';\n      _this.setOverride({ format: format });\n    };\n\n    _this.onTimestampFormatChange = function (_ref3) {\n      var _ref4 = _slicedToArray(_ref3, 1),\n          opt = _ref4[0];\n\n      var timestampFormat = opt ? opt.label : '';\n      _this.setOverride({ timestampFormat: timestampFormat });\n    };\n\n    _this.onTimestampFieldChange = function (_ref5) {\n      var _ref6 = _slicedToArray(_ref5, 1),\n          opt = _ref6[0];\n\n      var timestampField = opt ? opt.label : '';\n      _this.setOverride({ timestampField: timestampField });\n    };\n\n    _this.onDelimiterChange = function (_ref7) {\n      var _ref8 = _slicedToArray(_ref7, 1),\n          opt = _ref8[0];\n\n      var delimiter = opt ? opt.label : '';\n      _this.setOverride({ delimiter: delimiter });\n    };\n\n    _this.onCustomDelimiterChange = function (e) {\n      _this.setState({ customDelimiter: e.target.value });\n    };\n\n    _this.onQuoteChange = function (_ref9) {\n      var _ref10 = _slicedToArray(_ref9, 1),\n          opt = _ref10[0];\n\n      var quote = opt ? opt.label : '';\n      _this.setOverride({ quote: quote });\n    };\n\n    _this.onHasHeaderRowChange = function (e) {\n      _this.setOverride({ hasHeaderRow: e.target.checked });\n    };\n\n    _this.onShouldTrimFieldsChange = function (e) {\n      _this.setOverride({ shouldTrimFields: e.target.checked });\n    };\n\n    _this.onCharsetChange = function (_ref11) {\n      var _ref12 = _slicedToArray(_ref11, 1),\n          opt = _ref12[0];\n\n      var charset = opt ? opt.label : '';\n      _this.setOverride({ charset: charset });\n    };\n\n    _this.onColumnNameChange = function (e, i) {\n      var columnNames = _this.state.overrides.columnNames;\n      columnNames[i] = e.target.value;\n      _this.setOverride({ columnNames: columnNames });\n    };\n\n    _this.grokPatternChange = function (e) {\n      _this.setOverride({ grokPattern: e.target.value });\n    };\n\n    _this.onLinesToSampleChange = function (e) {\n      var linesToSample = +e.target.value;\n      _this.setOverride({ linesToSample: linesToSample });\n\n      // check whether the value is valid and set that to state.\n      var linesToSampleValid = isLinesToSampleValid(linesToSample);\n      _this.setState({ linesToSampleValid: linesToSampleValid });\n\n      // set the overrides valid setting in the parent component,\n      // used to disable the Apply button if any of the overrides are invalid\n      _this.props.setOverridesValid(linesToSampleValid);\n    };\n\n    _this.state = {};\n    return _this;\n  }\n\n  _createClass(Overrides, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      if (typeof this.props.setApplyOverrides === 'function') {\n        this.props.setApplyOverrides(this.applyOverrides);\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      if (typeof this.props.unsetApplyOverrides === 'function') {\n        this.props.unsetApplyOverrides();\n      }\n    }\n  }, {\n    key: 'setOverride',\n    value: function setOverride(o) {\n      var overrides = _extends({}, this.state.overrides, o);\n      this.setState({ overrides: overrides });\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var fields = this.props.fields;\n      var _state = this.state,\n          customDelimiter = _state.customDelimiter,\n          originalColumnNames = _state.originalColumnNames,\n          linesToSampleValid = _state.linesToSampleValid,\n          overrides = _state.overrides;\n      var timestampFormat = overrides.timestampFormat,\n          timestampField = overrides.timestampField,\n          format = overrides.format,\n          delimiter = overrides.delimiter,\n          quote = overrides.quote,\n          hasHeaderRow = overrides.hasHeaderRow,\n          shouldTrimFields = overrides.shouldTrimFields,\n          columnNames = overrides.columnNames,\n          grokPattern = overrides.grokPattern,\n          linesToSample = overrides.linesToSample;\n\n\n      var fieldOptions = fields.map(function (f) {\n        return { label: f };\n      });\n\n      return _react3.default.createElement(\n        _eui.EuiForm,\n        null,\n        _react3.default.createElement(\n          _eui.EuiFormRow,\n          {\n            error: this.linesToSampleErrors,\n            isInvalid: linesToSampleValid === false,\n            label: _react3.default.createElement(_react.FormattedMessage, {\n              id: 'xpack.ml.fileDatavisualizer.editFlyout.overrides.linesToSampleFormRowLabel',\n              defaultMessage: 'Number of lines to sample'\n            })\n          },\n          _react3.default.createElement(_eui.EuiFieldNumber, {\n            value: linesToSample,\n            onChange: this.onLinesToSampleChange,\n            isInvalid: linesToSampleValid === false\n          })\n        ),\n        _react3.default.createElement(\n          _eui.EuiFormRow,\n          {\n            label: _react3.default.createElement(_react.FormattedMessage, {\n              id: 'xpack.ml.fileDatavisualizer.editFlyout.overrides.dataFormatFormRowLabel',\n              defaultMessage: 'Data format'\n            })\n          },\n          _react3.default.createElement(_eui.EuiComboBox, {\n            options: formatOptions,\n            selectedOptions: selectedOption(format),\n            onChange: this.onFormatChange,\n            singleSelection: { asPlainText: true },\n            isClearable: false\n          })\n        ),\n        format === 'delimited' && _react3.default.createElement(\n          _react3.default.Fragment,\n          null,\n          _react3.default.createElement(\n            _eui.EuiFormRow,\n            {\n              label: _react3.default.createElement(_react.FormattedMessage, {\n                id: 'xpack.ml.fileDatavisualizer.editFlyout.overrides.delimiterFormRowLabel',\n                defaultMessage: 'Delimiter'\n              })\n            },\n            _react3.default.createElement(_eui.EuiComboBox, {\n              options: delimiterOptions,\n              selectedOptions: selectedOption(delimiter),\n              onChange: this.onDelimiterChange,\n              singleSelection: { asPlainText: true },\n              isClearable: false\n            })\n          ),\n          delimiter === 'other' && _react3.default.createElement(\n            _eui.EuiFormRow,\n            {\n              label: _react3.default.createElement(_react.FormattedMessage, {\n                id: 'xpack.ml.fileDatavisualizer.editFlyout.overrides.customDelimiterFormRowLabel',\n                defaultMessage: 'Custom delimiter'\n              })\n            },\n            _react3.default.createElement(_eui.EuiFieldText, {\n              value: customDelimiter,\n              onChange: this.onCustomDelimiterChange\n            })\n          ),\n          _react3.default.createElement(\n            _eui.EuiFormRow,\n            {\n              label: _react3.default.createElement(_react.FormattedMessage, {\n                id: 'xpack.ml.fileDatavisualizer.editFlyout.overrides.quoteCharacterFormRowLabel',\n                defaultMessage: 'Quote character'\n              })\n            },\n            _react3.default.createElement(_eui.EuiComboBox, {\n              options: quoteOptions,\n              selectedOptions: selectedOption(quote),\n              onChange: this.onQuoteChange,\n              singleSelection: { asPlainText: true },\n              isClearable: false\n            })\n          ),\n          _react3.default.createElement(\n            _eui.EuiFormRow,\n            null,\n            _react3.default.createElement(_eui.EuiCheckbox, {\n              id: 'hasHeaderRow',\n              label: _react3.default.createElement(_react.FormattedMessage, {\n                id: 'xpack.ml.fileDatavisualizer.editFlyout.overrides.hasHeaderRowLabel',\n                defaultMessage: 'Has header row'\n              }),\n              checked: hasHeaderRow,\n              onChange: this.onHasHeaderRowChange\n            })\n          ),\n          _react3.default.createElement(\n            _eui.EuiFormRow,\n            null,\n            _react3.default.createElement(_eui.EuiCheckbox, {\n              id: 'shouldTrimFields',\n              label: _react3.default.createElement(_react.FormattedMessage, {\n                id: 'xpack.ml.fileDatavisualizer.editFlyout.overrides.trimFieldsLabel',\n                defaultMessage: 'Should trim fields'\n              }),\n              checked: shouldTrimFields,\n              onChange: this.onShouldTrimFieldsChange\n            })\n          )\n        ),\n        format === 'semi_structured_text' && _react3.default.createElement(\n          _react3.default.Fragment,\n          null,\n          _react3.default.createElement(\n            _eui.EuiFormRow,\n            {\n              label: _react3.default.createElement(_react.FormattedMessage, {\n                id: 'xpack.ml.fileDatavisualizer.editFlyout.overrides.grokPatternFormRowLabel',\n                defaultMessage: 'Grok pattern'\n              })\n            },\n            _react3.default.createElement(_eui.EuiTextArea, {\n              placeholder: grokPattern,\n              value: grokPattern,\n              onChange: this.grokPatternChange\n            })\n          )\n        ),\n        _react3.default.createElement(\n          _eui.EuiFormRow,\n          {\n            label: _react3.default.createElement(_react.FormattedMessage, {\n              id: 'xpack.ml.fileDatavisualizer.editFlyout.overrides.timestampFormatFormRowLabel',\n              defaultMessage: 'Timestamp format'\n            })\n          },\n          _react3.default.createElement(_eui.EuiComboBox, {\n            options: timestampFormatOptions,\n            selectedOptions: selectedOption(timestampFormat),\n            onChange: this.onTimestampFormatChange,\n            singleSelection: { asPlainText: true },\n            isClearable: false\n          })\n        ),\n        _react3.default.createElement(\n          _eui.EuiFormRow,\n          {\n            label: _react3.default.createElement(_react.FormattedMessage, {\n              id: 'xpack.ml.fileDatavisualizer.editFlyout.overrides.timeFieldFormRowLabel',\n              defaultMessage: 'Time field'\n            })\n          },\n          _react3.default.createElement(_eui.EuiComboBox, {\n            options: fieldOptions,\n            selectedOptions: selectedOption(timestampField),\n            onChange: this.onTimestampFieldChange,\n            singleSelection: { asPlainText: true },\n            isClearable: false\n          })\n        ),\n        format === 'delimited' && originalColumnNames.length > 0 && _react3.default.createElement(\n          _react3.default.Fragment,\n          null,\n          _react3.default.createElement(_eui.EuiSpacer, null),\n          _react3.default.createElement(\n            _eui.EuiTitle,\n            { size: 's' },\n            _react3.default.createElement(\n              'h3',\n              null,\n              _react3.default.createElement(_react.FormattedMessage, {\n                id: 'xpack.ml.fileDatavisualizer.editFlyout.overrides.editFieldNamesTitle',\n                defaultMessage: 'Edit field names'\n              })\n            )\n          ),\n          originalColumnNames.map(function (f, i) {\n            return _react3.default.createElement(\n              _eui.EuiFormRow,\n              {\n                label: f,\n                key: f\n              },\n              _react3.default.createElement(_eui.EuiFieldText, {\n                value: columnNames[i],\n                onChange: function onChange(e) {\n                  return _this2.onColumnNameChange(e, i);\n                }\n              })\n            );\n          })\n        )\n      );\n    }\n  }], [{\n    key: 'getDerivedStateFromProps',\n    value: function getDerivedStateFromProps(props, state) {\n      var originalSettings = props.originalSettings;\n      var _props$overrides = props.overrides,\n          charset = _props$overrides.charset,\n          format = _props$overrides.format,\n          hasHeaderRow = _props$overrides.hasHeaderRow,\n          columnNames = _props$overrides.columnNames,\n          delimiter = _props$overrides.delimiter,\n          quote = _props$overrides.quote,\n          shouldTrimFields = _props$overrides.shouldTrimFields,\n          grokPattern = _props$overrides.grokPattern,\n          timestampField = _props$overrides.timestampField,\n          timestampFormat = _props$overrides.timestampFormat,\n          linesToSample = _props$overrides.linesToSample;\n\n      var _convertDelimiter = convertDelimiter(delimiter === undefined ? originalSettings.delimiter : delimiter),\n          d = _convertDelimiter.delimiter,\n          customD = _convertDelimiter.customDelimiter;\n\n      var _getColumnNames = getColumnNames(columnNames, originalSettings),\n          newColumnNames = _getColumnNames.newColumnNames,\n          originalColumnNames = _getColumnNames.originalColumnNames;\n\n      var overrides = {\n        charset: charset === undefined ? originalSettings.charset : charset,\n        format: format === undefined ? originalSettings.format : format,\n        hasHeaderRow: hasHeaderRow === undefined ? originalSettings.hasHeaderRow : hasHeaderRow,\n        columnNames: newColumnNames,\n        delimiter: d,\n        quote: quote === undefined ? originalSettings.quote : quote,\n        shouldTrimFields: shouldTrimFields === undefined ? originalSettings.shouldTrimFields : shouldTrimFields,\n        grokPattern: grokPattern === undefined ? originalSettings.grokPattern : grokPattern,\n        timestampFormat: timestampFormat === undefined ? originalSettings.timestampFormat : timestampFormat,\n        timestampField: timestampField === undefined ? originalSettings.timestampField : timestampField,\n        linesToSample: linesToSample === undefined ? originalSettings.linesToSample : +linesToSample\n      };\n\n      return _extends({\n        originalColumnNames: originalColumnNames,\n        customDelimiter: customD === undefined ? '' : customD,\n        linesToSampleValid: true,\n        overrides: overrides\n      }, state);\n    }\n  }]);\n\n  return Overrides;\n}(_react2.Component);\n\nfunction selectedOption(opt) {\n  return [{ label: opt || '' }];\n}\n\n// Some delimiter characters cannot be used as items in select list.\n// so show a textual description of the character instead.\nfunction convertDelimiter(d) {\n  switch (d) {\n    case ',':\n      return {\n        delimiter: 'comma'\n      };\n    case '\\t':\n      return {\n        delimiter: 'tab'\n      };\n    case ';':\n      return {\n        delimiter: 'semicolon'\n      };\n    case '|':\n      return {\n        delimiter: 'pipe'\n      };\n    case ' ':\n      return {\n        delimiter: 'space'\n      };\n\n    default:\n      return {\n        delimiter: 'other',\n        customDelimiter: d\n      };\n  }\n}\n\n// Convert the delimiter textual descriptions back to their real characters.\nfunction convertDelimiterBack(delimiter, customDelimiter) {\n  switch (delimiter) {\n    case 'comma':\n      return ',';\n    case 'tab':\n      return '\\t';\n    case 'semicolon':\n      return ';';\n    case 'pipe':\n      return '|';\n    case 'space':\n      return ' ';\n    case 'other':\n      return customDelimiter;\n\n    default:\n      return undefined;\n  }\n}\n\nfunction getColumnNames(columnNames, originalSettings) {\n  var newColumnNames = columnNames === undefined && originalSettings.columnNames !== undefined ? [].concat(_toConsumableArray(originalSettings.columnNames)) : columnNames;\n\n  var originalColumnNames = newColumnNames !== undefined ? [].concat(_toConsumableArray(newColumnNames)) : [];\n\n  return {\n    newColumnNames: newColumnNames,\n    originalColumnNames: originalColumnNames\n  };\n}\n\nfunction isLinesToSampleValid(linesToSample) {\n  return linesToSample > LINES_TO_SAMPLE_VALUE_MIN && linesToSample <= LINES_TO_SAMPLE_VALUE_MAX;\n}",null]}