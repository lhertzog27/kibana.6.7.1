{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/monitoring/public/views/access_denied/index.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/monitoring/public/views/access_denied/index.js","mtime":1567631712099},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nvar _lodash = require('lodash');\n\nvar _routes = require('ui/routes');\n\nvar _routes2 = _interopRequireDefault(_routes);\n\nvar _chrome = require('ui/chrome');\n\nvar _chrome2 = _interopRequireDefault(_chrome);\n\nvar _index = require('./index.html');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nvar tryPrivilege = function tryPrivilege($http, kbnUrl) {\n  return $http.get('../api/monitoring/v1/check_access').then(function () {\n    return kbnUrl.redirect('/home');\n  }).catch(_lodash.noop);\n};\n\n_routes2.default.when('/access-denied', {\n  template: _index2.default,\n  resolve: {\n    /*\n     * The user may have been granted privileges in between leaving Monitoring\n     * and before coming back to Monitoring. That means, they just be on this\n     * page because Kibana remembers the \"last app URL\". We check for the\n     * privilege one time up front (doing it in the resolve makes it happen\n     * before the template renders), and then keep retrying every 5 seconds.\n     */\n    initialCheck: function initialCheck($http, kbnUrl) {\n      return tryPrivilege($http, kbnUrl);\n    }\n  },\n  controllerAs: 'accessDenied',\n  controller: function controller($scope, $injector) {\n    var $window = $injector.get('$window');\n    var kbnBaseUrl = $injector.get('kbnBaseUrl');\n    var $http = $injector.get('$http');\n    var kbnUrl = $injector.get('kbnUrl');\n    var $interval = $injector.get('$interval');\n\n    // The template's \"Back to Kibana\" button click handler\n    this.goToKibana = function () {\n      $window.location.href = _chrome2.default.getBasePath() + kbnBaseUrl;\n    };\n\n    // keep trying to load data in the background\n    var accessPoller = $interval(function () {\n      return tryPrivilege($http, kbnUrl);\n    }, 5 * 1000); // every 5 seconds\n    $scope.$on('$destroy', function () {\n      return $interval.cancel(accessPoller);\n    });\n  }\n});",null]}