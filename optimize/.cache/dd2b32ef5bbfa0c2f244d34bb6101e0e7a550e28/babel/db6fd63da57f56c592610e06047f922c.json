{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/maps/public/shared/layers/heatmap_layer.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/maps/public/shared/layers/heatmap_layer.js","mtime":1567631712018},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HeatmapLayer = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } }; /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             */\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _layer = require('./layer');\n\nvar _eui = require('@elastic/eui');\n\nvar _heatmap_style = require('./styles/heatmap_style');\n\nvar _constants = require('../../../common/constants');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar SCALED_PROPERTY_NAME = '__kbn_heatmap_weight__'; //unique name to store scaled value for weighting\n\nvar HeatmapLayer = exports.HeatmapLayer = function (_AbstractLayer) {\n  _inherits(HeatmapLayer, _AbstractLayer);\n\n  _createClass(HeatmapLayer, null, [{\n    key: 'createDescriptor',\n    value: function createDescriptor(options) {\n      var heatmapLayerDescriptor = _get(HeatmapLayer.__proto__ || Object.getPrototypeOf(HeatmapLayer), 'createDescriptor', this).call(this, options);\n      heatmapLayerDescriptor.type = HeatmapLayer.type;\n      heatmapLayerDescriptor.style = _heatmap_style.HeatmapStyle.createDescriptor();\n      return heatmapLayerDescriptor;\n    }\n  }]);\n\n  function HeatmapLayer(_ref) {\n    var layerDescriptor = _ref.layerDescriptor,\n        source = _ref.source,\n        style = _ref.style;\n\n    _classCallCheck(this, HeatmapLayer);\n\n    var _this = _possibleConstructorReturn(this, (HeatmapLayer.__proto__ || Object.getPrototypeOf(HeatmapLayer)).call(this, { layerDescriptor: layerDescriptor, source: source, style: style }));\n\n    if (!style) {\n      var defaultStyle = _heatmap_style.HeatmapStyle.createDescriptor();\n      _this._style = new _heatmap_style.HeatmapStyle(defaultStyle);\n    }\n    return _this;\n  }\n\n  _createClass(HeatmapLayer, [{\n    key: 'getSupportedStyles',\n    value: function getSupportedStyles() {\n      return [_heatmap_style.HeatmapStyle];\n    }\n  }, {\n    key: 'getIndexPatternIds',\n    value: function getIndexPatternIds() {\n      return this._source.getIndexPatternIds();\n    }\n  }, {\n    key: '_getPropKeyOfSelectedMetric',\n    value: function _getPropKeyOfSelectedMetric() {\n      var metricfields = this._source.getMetricFields();\n      return metricfields[0].propertyKey;\n    }\n  }, {\n    key: 'syncLayerWithMB',\n    value: function syncLayerWithMB(mbMap) {\n\n      var mbSource = mbMap.getSource(this.getId());\n      var mbLayerId = this.getId() + '_heatmap';\n\n      if (!mbSource) {\n        mbMap.addSource(this.getId(), {\n          type: 'geojson',\n          data: { 'type': 'FeatureCollection', 'features': [] }\n        });\n\n        mbMap.addLayer({\n          id: mbLayerId,\n          type: 'heatmap',\n          source: this.getId(),\n          paint: {}\n        });\n      }\n\n      var mbSourceAfter = mbMap.getSource(this.getId());\n      var sourceDataRequest = this.getSourceDataRequest();\n      var featureCollection = sourceDataRequest ? sourceDataRequest.getData() : null;\n      if (!featureCollection) {\n        mbSourceAfter.setData({ 'type': 'FeatureCollection', 'features': [] });\n        return;\n      }\n\n      var propertyKey = this._getPropKeyOfSelectedMetric();\n      var dataBoundToMap = _layer.AbstractLayer.getBoundDataForSource(mbMap, this.getId());\n      if (featureCollection !== dataBoundToMap) {\n        var max = 0;\n        for (var i = 0; i < featureCollection.features.length; i++) {\n          max = Math.max(featureCollection.features[i].properties[propertyKey], max);\n        }\n        for (var _i = 0; _i < featureCollection.features.length; _i++) {\n          featureCollection.features[_i].properties[SCALED_PROPERTY_NAME] = featureCollection.features[_i].properties[propertyKey] / max;\n        }\n        mbSourceAfter.setData(featureCollection);\n      }\n\n      mbMap.setLayoutProperty(mbLayerId, 'visibility', this.isVisible() ? 'visible' : 'none');\n      this._style.setMBPaintProperties({\n        mbMap: mbMap,\n        layerId: mbLayerId,\n        propertyName: SCALED_PROPERTY_NAME,\n        resolution: this._source.getGridResolution()\n      });\n      mbMap.setPaintProperty(mbLayerId, 'heatmap-opacity', this.getAlpha());\n      mbMap.setLayerZoomRange(mbLayerId, this._descriptor.minZoom, this._descriptor.maxZoom);\n    }\n  }, {\n    key: 'getBounds',\n    value: function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(filters) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this._source.getBoundsForFilters(filters);\n\n              case 2:\n                return _context.abrupt('return', _context.sent);\n\n              case 3:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getBounds(_x) {\n        return _ref2.apply(this, arguments);\n      }\n\n      return getBounds;\n    }()\n  }, {\n    key: 'syncData',\n    value: function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(_ref3) {\n        var startLoading = _ref3.startLoading,\n            stopLoading = _ref3.stopLoading,\n            onLoadError = _ref3.onLoadError,\n            dataFilters = _ref3.dataFilters;\n        var sourceDataRequest, dataMeta, geogridPrecision, isSamePrecision, isSameTime, updateDueToRefreshTimer, updateDueToExtent, updateDueToQuery, metricPropertyKey, updateDueToMetricChange, newDataMeta;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(!this.isVisible() || !this.showAtZoomLevel(dataFilters.zoom))) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                return _context2.abrupt('return');\n\n              case 2:\n                if (dataFilters.buffer) {\n                  _context2.next = 4;\n                  break;\n                }\n\n                return _context2.abrupt('return');\n\n              case 4:\n                sourceDataRequest = this.getSourceDataRequest();\n                dataMeta = sourceDataRequest ? sourceDataRequest.getMeta() : {};\n                geogridPrecision = this._source.getGeoGridPrecision(dataFilters.zoom);\n                isSamePrecision = dataMeta.geogridPrecision === geogridPrecision;\n                isSameTime = _lodash2.default.isEqual(dataMeta.timeFilters, dataFilters.timeFilters);\n                updateDueToRefreshTimer = dataFilters.refreshTimerLastTriggeredAt && !_lodash2.default.isEqual(dataMeta.refreshTimerLastTriggeredAt, dataFilters.refreshTimerLastTriggeredAt);\n                updateDueToExtent = this.updateDueToExtent(this._source, dataMeta, dataFilters);\n                updateDueToQuery = dataFilters.query && !_lodash2.default.isEqual(dataMeta.query, dataFilters.query);\n                metricPropertyKey = this._getPropKeyOfSelectedMetric();\n                updateDueToMetricChange = !_lodash2.default.isEqual(dataMeta.metric, metricPropertyKey);\n\n                if (!(isSamePrecision && isSameTime && !updateDueToExtent && !updateDueToRefreshTimer && !updateDueToQuery && !updateDueToMetricChange)) {\n                  _context2.next = 16;\n                  break;\n                }\n\n                return _context2.abrupt('return');\n\n              case 16:\n                newDataMeta = _extends({}, dataFilters, {\n                  geogridPrecision: geogridPrecision,\n                  metric: metricPropertyKey\n                });\n                _context2.next = 19;\n                return this._fetchNewData({ startLoading: startLoading, stopLoading: stopLoading, onLoadError: onLoadError, dataMeta: newDataMeta });\n\n              case 19:\n              case 'end':\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function syncData(_x2) {\n        return _ref4.apply(this, arguments);\n      }\n\n      return syncData;\n    }()\n  }, {\n    key: '_fetchNewData',\n    value: function () {\n      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(_ref5) {\n        var startLoading = _ref5.startLoading,\n            stopLoading = _ref5.stopLoading,\n            onLoadError = _ref5.onLoadError,\n            dataMeta = _ref5.dataMeta;\n        var geogridPrecision, timeFilters, buffer, query, requestToken, layerName, data;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                geogridPrecision = dataMeta.geogridPrecision, timeFilters = dataMeta.timeFilters, buffer = dataMeta.buffer, query = dataMeta.query;\n                requestToken = Symbol('layer-source-refresh: this.getId()');\n\n                startLoading(_constants.SOURCE_DATA_ID_ORIGIN, requestToken, dataMeta);\n                _context3.prev = 3;\n                _context3.next = 6;\n                return this.getDisplayName();\n\n              case 6:\n                layerName = _context3.sent;\n                _context3.next = 9;\n                return this._source.getGeoJsonPoints({ layerName: layerName }, {\n                  geogridPrecision: geogridPrecision,\n                  buffer: buffer,\n                  timeFilters: timeFilters,\n                  query: query\n                });\n\n              case 9:\n                data = _context3.sent;\n\n                stopLoading(_constants.SOURCE_DATA_ID_ORIGIN, requestToken, data);\n                _context3.next = 16;\n                break;\n\n              case 13:\n                _context3.prev = 13;\n                _context3.t0 = _context3['catch'](3);\n\n                onLoadError(_constants.SOURCE_DATA_ID_ORIGIN, requestToken, _context3.t0.message);\n\n              case 16:\n              case 'end':\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[3, 13]]);\n      }));\n\n      function _fetchNewData(_x3) {\n        return _ref6.apply(this, arguments);\n      }\n\n      return _fetchNewData;\n    }()\n  }, {\n    key: 'getLayerTypeIconName',\n    value: function getLayerTypeIconName() {\n      return 'heatmap';\n    }\n  }, {\n    key: 'getIcon',\n    value: function getIcon() {\n      return _react2.default.createElement(_eui.EuiIcon, {\n        type: this.getLayerTypeIconName()\n      });\n    }\n  }]);\n\n  return HeatmapLayer;\n}(_layer.AbstractLayer);\n\nHeatmapLayer.type = \"HEATMAP\";",null]}