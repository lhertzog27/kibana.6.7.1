{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/watcher/public/sections/watch_history_item/watch_history_item_route.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/watcher/public/sections/watch_history_item/watch_history_item_route.js","mtime":1567631712349},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nvar _routes = require('ui/routes');\n\nvar _routes2 = _interopRequireDefault(_routes);\n\nrequire('ui/url');\n\nvar _notify = require('ui/notify');\n\nvar _watch_history_item_route = require('./watch_history_item_route.html');\n\nvar _watch_history_item_route2 = _interopRequireDefault(_watch_history_item_route);\n\nrequire('plugins/watcher/services/watch');\n\nrequire('plugins/watcher/services/watch_history');\n\nrequire('./components/watch_history_item');\n\nvar _update_management_sections = require('plugins/watcher/lib/update_management_sections');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } } /*\n                                                                                                                                                           * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                           * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                           * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                           */\n\n_routes2.default.when('/management/elasticsearch/watcher/watches/watch/:watchId/history-item/:watchHistoryItemId', {\n  template: _watch_history_item_route2.default,\n  resolve: {\n    watch: function watch($injector) {\n      var $route = $injector.get('$route');\n      var watchService = $injector.get('xpackWatcherWatchService');\n      var kbnUrl = $injector.get('kbnUrl');\n\n      var watchId = $route.current.params.watchId;\n\n      return watchService.loadWatch(watchId).catch(function (err) {\n        if (err.status !== 403) {\n          _notify.toastNotifications.addDanger(err.data.message);\n        }\n\n        kbnUrl.redirect('/management/elasticsearch/watcher/watches');\n        return Promise.reject();\n      });\n    },\n    watchHistoryItem: function watchHistoryItem($injector) {\n      var $route = $injector.get('$route');\n      var $filter = $injector.get('$filter');\n      var moment = $filter('moment');\n      var watchHistoryService = $injector.get('xpackWatcherWatchHistoryService');\n      var kbnUrl = $injector.get('kbnUrl');\n\n      var watchId = $route.current.params.watchId;\n      var watchHistoryItemId = $route.current.params.watchHistoryItemId;\n\n      return watchHistoryService.loadWatchHistoryItem(watchHistoryItemId).then(function (historyItem) {\n        var display = moment(historyItem.startTime);\n        (0, _update_management_sections.updateHistorySection)(display);\n\n        return historyItem;\n      }).catch(function (err) {\n        if (err.status !== 403) {\n          _notify.toastNotifications.addDanger(err.data.message);\n        }\n\n        kbnUrl.redirect('/management/elasticsearch/watcher/watches/watch/' + watchId + '/status');\n        return Promise.reject();\n      });\n    }\n  },\n  controllerAs: 'watchHistoryItemRoute',\n  controller: function WatchHistoryItemRouteController($injector) {\n    _classCallCheck(this, WatchHistoryItemRouteController);\n\n    var $route = $injector.get('$route');\n\n    this.watch = $route.current.locals.watch;\n    this.watchHistoryItem = $route.current.locals.watchHistoryItem;\n  }\n});",null]}