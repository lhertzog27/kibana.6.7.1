{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/canvas_plugin_src/renderers/repeat_image.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/canvas_plugin_src/renderers/repeat_image.js","mtime":1567631711904},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.repeatImage = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /*\n                                                                                                                                                                                                                                                                   * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                   * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                   * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                   */\n\nvar _jquery = require('jquery');\n\nvar _jquery2 = _interopRequireDefault(_jquery);\n\nvar _lodash = require('lodash');\n\nvar _elastic_outline = require('../lib/elastic_outline');\n\nvar _url = require('../../common/lib/url');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar repeatImage = exports.repeatImage = function repeatImage() {\n  return {\n    name: 'repeatImage',\n    displayName: 'Image repeat',\n    help: 'Repeat an image a given number of times',\n    reuseDomNode: true,\n    render: function render(domNode, config, handlers) {\n      var settings = _extends({\n        count: 10\n      }, config, {\n        image: (0, _url.isValidUrl)(config.image) ? config.image : _elastic_outline.elasticOutline\n      });\n\n      var container = (0, _jquery2.default)('<div class=\"repeatImage\" style=\"pointer-events: none;\">');\n\n      function setSize(img) {\n        if (img.naturalHeight > img.naturalWidth) {\n          img.height = settings.size;\n        } else {\n          img.width = settings.size;\n        }\n      }\n\n      function finish() {\n        (0, _jquery2.default)(domNode).html(container);\n        handlers.done();\n      }\n\n      var img = new Image();\n      img.onload = function () {\n        setSize(img);\n        if (settings.max && settings.count > settings.max) {\n          settings.count = settings.max;\n        }\n        (0, _lodash.times)(settings.count, function () {\n          return container.append(img.cloneNode(true));\n        });\n\n        if ((0, _url.isValidUrl)(settings.emptyImage)) {\n          if (settings.max == null) {\n            throw new Error('max must be set if using an emptyImage');\n          }\n\n          var emptyImage = new Image();\n          emptyImage.onload = function () {\n            setSize(emptyImage);\n            (0, _lodash.times)(settings.max - settings.count, function () {\n              return container.append(emptyImage.cloneNode(true));\n            });\n            finish();\n          };\n          emptyImage.src = settings.emptyImage;\n        } else {\n          finish();\n        }\n      };\n\n      img.src = settings.image;\n    }\n  };\n};",null]}