{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/public/components/fullscreen/fullscreen.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/public/components/fullscreen/fullscreen.js","mtime":1567631711923},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Fullscreen = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _lodash = require('lodash');\n\nvar _get_window = require('../../lib/get_window');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\nvar Fullscreen = exports.Fullscreen = function (_React$Component) {\n  _inherits(Fullscreen, _React$Component);\n\n  function Fullscreen() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, Fullscreen);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Fullscreen.__proto__ || Object.getPrototypeOf(Fullscreen)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n      width: 0,\n      height: 0\n    }, _this.getWindowSize = function () {\n      return {\n        width: _this.win.innerWidth,\n        height: _this.win.innerHeight\n      };\n    }, _this.onWindowResize = (0, _lodash.debounce)(function () {\n      var _this$getWindowSize = _this.getWindowSize(),\n          width = _this$getWindowSize.width,\n          height = _this$getWindowSize.height;\n\n      _this.setState({ width: width, height: height });\n    }, 100), _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(Fullscreen, [{\n    key: 'componentWillMount',\n    value: function componentWillMount() {\n      this.win = (0, _get_window.getWindow)();\n      this.setState({\n        width: this.win.innerWidth,\n        height: this.win.innerHeight\n      });\n    }\n  }, {\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.win.addEventListener('resize', this.onWindowResize);\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.win.removeEventListener('resize', this.onWindowResize);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          isFullscreen = _props.isFullscreen,\n          children = _props.children;\n\n      var windowSize = {\n        width: this.state.width,\n        height: this.state.height\n      };\n\n      return children({ isFullscreen: isFullscreen, windowSize: windowSize });\n    }\n  }]);\n\n  return Fullscreen;\n}(_react2.default.Component);\n\nFullscreen.propTypes = {\n  isFullscreen: _propTypes2.default.bool,\n  children: _propTypes2.default.func\n};",null]}