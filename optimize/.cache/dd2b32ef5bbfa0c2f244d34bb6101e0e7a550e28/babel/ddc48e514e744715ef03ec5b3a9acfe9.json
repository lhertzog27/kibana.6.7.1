{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/monitoring/public/views/base_controller.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/monitoring/public/views/base_controller.js","mtime":1567631712100},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MonitoringViewBaseController = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\nopyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\nor more contributor license agreements. Licensed under the Elastic License;\nyou may not use this file except in compliance with the Elastic License.\nn\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _moment = require('moment');\n\nvar _moment2 = _interopRequireDefault(_moment);\n\nvar _reactDom = require('react-dom');\n\nvar _get_page_data = require('../lib/get_page_data');\n\nvar _components = require('plugins/monitoring/components');\n\nvar _timefilter = require('ui/timefilter');\n\nvar _i18n = require('ui/i18n');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Class to manage common instantiation behaviors in a view controller\n *\n * This is expected to be extended, and behavior enabled using super();\n *\n * Example:\n * uiRoutes.when('/myRoute', {\n *   template: importedTemplate,\n *   controllerAs: 'myView',\n *   controller: class MyView extends MonitoringViewBaseController {\n *     constructor($injector, $scope) {\n *       super({\n *         title: 'Hello World',\n *         api: '../api/v1/monitoring/foo/bar',\n *         defaultData,\n *         reactNodeId,\n *         $scope,\n *         $injector,\n *         options: {\n *           enableTimeFilter: false // this will have just the page auto-refresh control show\n *         }\n *       });\n *     }\n *   }\n * });\n */\nvar MonitoringViewBaseController = exports.MonitoringViewBaseController = function () {\n  /**\n   * Create a view controller\n   * @param {String} title - Title of the page\n   * @param {String} api - Back-end API endpoint to poll for getting the page\n   *    data using POST and time range data in the body. Whenever possible, use\n   *    this method for data polling rather than supply the getPageData param.\n   * @param {Function} apiUrlFn - Function that returns a string for the back-end\n   *    API endpoint, in case the string has dynamic query parameters (e.g.\n   *    show_system_indices) rather than supply the getPageData param.\n   * @param {Function} getPageData - (Optional) Function to fetch page data, if\n   *    simply passing the API string isn't workable.\n   * @param {Object} defaultData - Initial model data to populate\n   * @param {String} reactNodeId - DOM element ID of the element for mounting\n   *    the view's main React component\n   * @param {Service} $injector - Angular dependency injection service\n   * @param {Service} $scope - Angular view data binding service\n   * @param {Boolean} options.enableTimeFilter - Whether to show the time filter\n   * @param {Boolean} options.enableAutoRefresh - Whether to show the auto\n   *    refresh control\n   */\n  function MonitoringViewBaseController(_ref) {\n    var _this = this;\n\n    var _ref$title = _ref.title,\n        title = _ref$title === undefined ? '' : _ref$title,\n        _ref$api = _ref.api,\n        api = _ref$api === undefined ? '' : _ref$api,\n        apiUrlFn = _ref.apiUrlFn,\n        _ref$getPageData = _ref.getPageData,\n        _getPageData = _ref$getPageData === undefined ? _get_page_data.getPageData : _ref$getPageData,\n        defaultData = _ref.defaultData,\n        _ref$reactNodeId = _ref.reactNodeId,\n        reactNodeId = _ref$reactNodeId === undefined ? null : _ref$reactNodeId,\n        $scope = _ref.$scope,\n        $injector = _ref.$injector,\n        _ref$options = _ref.options,\n        options = _ref$options === undefined ? {} : _ref$options;\n\n    _classCallCheck(this, MonitoringViewBaseController);\n\n    var titleService = $injector.get('title');\n    var $executor = $injector.get('$executor');\n\n    titleService($scope.cluster, title);\n\n    $scope.pageData = this.data = _extends({}, defaultData);\n    this._isDataInitialized = false;\n    this.reactNodeId = reactNodeId;\n\n    var _options$enableTimeFi = options.enableTimeFilter,\n        enableTimeFilter = _options$enableTimeFi === undefined ? true : _options$enableTimeFi,\n        _options$enableAutoRe = options.enableAutoRefresh,\n        enableAutoRefresh = _options$enableAutoRe === undefined ? true : _options$enableAutoRe;\n\n\n    if (enableTimeFilter === false) {\n      _timefilter.timefilter.disableTimeRangeSelector();\n    } else {\n      _timefilter.timefilter.enableTimeRangeSelector();\n    }\n\n    if (enableAutoRefresh === false) {\n      _timefilter.timefilter.disableAutoRefreshSelector();\n    } else {\n      _timefilter.timefilter.enableAutoRefreshSelector();\n    }\n\n    this.updateDataPromise = null;\n    this.updateData = function () {\n      if (_this.updateDataPromise) {\n        // Do not sent another request if one is inflight\n        // See https://github.com/elastic/kibana/issues/24082\n        return _this.updateDataPromise;\n      }\n      var _api = apiUrlFn ? apiUrlFn() : api;\n      return _this.updateDataPromise = _getPageData($injector, _api).then(function (pageData) {\n        _this._isDataInitialized = true; // render will replace loading screen with the react component\n        $scope.pageData = _this.data = pageData; // update the view's data with the fetch result\n        _this.updateDataPromise = null;\n      }).catch(function () {\n        _this.updateDataPromise = null;\n      });\n    };\n    this.updateData();\n\n    $executor.register({\n      execute: function execute() {\n        return _this.updateData();\n      }\n    });\n    $executor.start($scope);\n    $scope.$on('$destroy', function () {\n      if (_this.reactNodeId) {\n        // WIP https://github.com/elastic/x-pack-kibana/issues/5198\n        (0, _reactDom.unmountComponentAtNode)(document.getElementById(_this.reactNodeId));\n      }\n      $executor.destroy();\n    });\n\n    // needed for chart pages\n    this.onBrush = function (_ref2) {\n      var xaxis = _ref2.xaxis;\n      var to = xaxis.to,\n          from = xaxis.from;\n\n      _timefilter.timefilter.setTime({\n        from: (0, _moment2.default)(from),\n        to: (0, _moment2.default)(to),\n        mode: 'absolute'\n      });\n    };\n\n    this.setTitle = function (title) {\n      return titleService($scope.cluster, title);\n    };\n  }\n\n  _createClass(MonitoringViewBaseController, [{\n    key: 'renderReact',\n    value: function renderReact(component) {\n      if (this._isDataInitialized === false) {\n        (0, _reactDom.render)(_react2.default.createElement(\n          _i18n.I18nContext,\n          null,\n          _react2.default.createElement(_components.PageLoading, null)\n        ), document.getElementById(this.reactNodeId));\n      } else {\n        (0, _reactDom.render)(component, document.getElementById(this.reactNodeId));\n      }\n    }\n  }]);\n\n  return MonitoringViewBaseController;\n}();",null]}