{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/public/components/page_config/index.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/public/components/page_config/index.js","mtime":1567631711925},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PageConfig = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /*\n                                                                                                                                                                                                                                                                   * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                   * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                   * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                   */\n\nvar _reactRedux = require('react-redux');\n\nvar _lodash = require('lodash');\n\nvar _transitions_registry = require('../../lib/transitions_registry');\n\nvar _workpad = require('../../state/selectors/workpad');\n\nvar _pages = require('../../state/actions/pages');\n\nvar _page_config = require('./page_config');\n\nvar mapStateToProps = function mapStateToProps(state) {\n  var pageIndex = (0, _workpad.getSelectedPageIndex)(state);\n  var page = (0, _workpad.getPages)(state)[pageIndex];\n  return { page: page, pageIndex: pageIndex };\n};\n\nvar mapDispatchToProps = { stylePage: _pages.stylePage, setPageTransition: _pages.setPageTransition };\n\nvar mergeProps = function mergeProps(stateProps, dispatchProps) {\n  return {\n    pageIndex: stateProps.pageIndex,\n    setBackground: function setBackground(background) {\n      var itsTheNewStyle = _extends({}, stateProps.page.style, { background: background });\n      dispatchProps.stylePage(stateProps.page.id, itsTheNewStyle);\n    },\n    background: (0, _lodash.get)(stateProps, 'page.style.background'),\n    transition: _transitions_registry.transitionsRegistry.get((0, _lodash.get)(stateProps, 'page.transition.name')),\n    transitions: [{ value: '', text: 'None' }].concat(_transitions_registry.transitionsRegistry.toArray().map(function (_ref) {\n      var name = _ref.name,\n          displayName = _ref.displayName;\n      return {\n        value: name,\n        text: displayName\n      };\n    })),\n    setTransition: function setTransition(name) {\n      dispatchProps.setPageTransition(stateProps.page.id, { name: name });\n    }\n  };\n};\n\nvar PageConfig = exports.PageConfig = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps, mergeProps)(_page_config.PageConfig);",null]}