{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/jobs/jobs_list/components/multi_job_actions/group_selector/new_group_input/new_group_input.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/jobs/jobs_list/components/multi_job_actions/group_selector/new_group_input/new_group_input.js","mtime":1567631712051},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NewGroupInput = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _class, _temp; /*\n                    * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                    * or more contributor license agreements. Licensed under the Elastic License;\n                    * you may not use this file except in compliance with the Elastic License.\n                    */\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _eui = require('@elastic/eui');\n\nvar _react3 = require('@kbn/i18n/react');\n\nvar _validate_job = require('../../../validate_job');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar NewGroupInput = exports.NewGroupInput = (0, _react3.injectI18n)((_temp = _class = function (_Component) {\n  _inherits(NewGroupInput, _Component);\n\n  function NewGroupInput(props) {\n    _classCallCheck(this, NewGroupInput);\n\n    var _this = _possibleConstructorReturn(this, (NewGroupInput.__proto__ || Object.getPrototypeOf(NewGroupInput)).call(this, props));\n\n    _this.changeTempNewGroup = function (e) {\n      var tempNewGroupName = e.target.value;\n      var groupsValidationError = '';\n\n      if (tempNewGroupName === '') {\n        groupsValidationError = '';\n      } else if (_this.props.allJobIds.includes(tempNewGroupName)) {\n        groupsValidationError = _this.props.intl.formatMessage({\n          id: 'xpack.ml.jobsList.multiJobActions.groupSelector.groupsAndJobsCanNotUseSameIdErrorMessage',\n          defaultMessage: 'A job with this ID already exists. Groups and jobs cannot use the same ID.'\n        });\n      } else {\n        groupsValidationError = (0, _validate_job.validateGroupNames)([tempNewGroupName]).message;\n      }\n\n      _this.setState({\n        tempNewGroupName: tempNewGroupName,\n        groupsValidationError: groupsValidationError\n      });\n    };\n\n    _this.newGroupKeyPress = function (e) {\n      if (e.keyCode === _eui.keyCodes.ENTER && _this.state.groupsValidationError === '' && _this.state.tempNewGroupName !== '') {\n        _this.addNewGroup();\n      }\n    };\n\n    _this.addNewGroup = function () {\n      _this.props.addNewGroup(_this.state.tempNewGroupName);\n      _this.setState({ tempNewGroupName: '' });\n    };\n\n    _this.state = {\n      tempNewGroupName: '',\n      groupsValidationError: ''\n    };\n    return _this;\n  }\n\n  _createClass(NewGroupInput, [{\n    key: 'render',\n    value: function render() {\n      var intl = this.props.intl;\n      var _state = this.state,\n          tempNewGroupName = _state.tempNewGroupName,\n          groupsValidationError = _state.groupsValidationError;\n\n\n      return _react2.default.createElement(\n        'div',\n        null,\n        _react2.default.createElement(\n          _eui.EuiFlexGroup,\n          { gutterSize: 's', alignItems: 'center' },\n          _react2.default.createElement(\n            _eui.EuiFlexItem,\n            null,\n            _react2.default.createElement(\n              _eui.EuiFormRow,\n              {\n                compressed: true,\n                isInvalid: groupsValidationError !== '',\n                error: groupsValidationError,\n                className: 'new-group-input'\n              },\n              _react2.default.createElement(_eui.EuiFieldText, {\n                compressed: true,\n                placeholder: intl.formatMessage({\n                  id: 'xpack.ml.jobsList.multiJobActions.groupSelector.addNewGroupPlaceholder',\n                  defaultMessage: 'Add new group'\n                }),\n                value: tempNewGroupName,\n                onChange: this.changeTempNewGroup,\n                onKeyDown: this.newGroupKeyPress,\n                isInvalid: groupsValidationError !== '',\n                error: groupsValidationError\n              })\n            )\n          ),\n          _react2.default.createElement(\n            _eui.EuiFlexItem,\n            { grow: false },\n            _react2.default.createElement(\n              _eui.EuiFormRow,\n              { className: 'new-group-input' },\n              _react2.default.createElement(_eui.EuiButtonIcon, {\n                onClick: this.addNewGroup,\n                iconType: 'plusInCircle',\n                'aria-label': intl.formatMessage({\n                  id: 'xpack.ml.jobsList.multiJobActions.groupSelector.addButtonAriaLabel',\n                  defaultMessage: 'Add'\n                }),\n                disabled: tempNewGroupName === '' || groupsValidationError !== ''\n              })\n            )\n          )\n        )\n      );\n    }\n  }]);\n\n  return NewGroupInput;\n}(_react.Component), _class.propTypes = {\n  addNewGroup: _propTypes2.default.func.isRequired,\n  allJobIds: _propTypes2.default.array.isRequired\n}, _temp));",null]}