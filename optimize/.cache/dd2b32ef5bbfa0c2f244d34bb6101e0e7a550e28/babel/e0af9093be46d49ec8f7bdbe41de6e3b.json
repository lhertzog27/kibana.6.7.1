{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/legacy/core_plugins/metrics/public/components/lib/replace_vars.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/legacy/core_plugins/metrics/public/components/lib/replace_vars.js","mtime":1567631711627},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = replaceVars;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _handlebars = require('handlebars/dist/handlebars');\n\nvar _handlebars2 = _interopRequireDefault(_handlebars);\n\nvar _i18n = require('@kbn/i18n');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction replaceVars(str) {\n  var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var vars = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  try {\n    var template = _handlebars2.default.compile(str, { strict: true, knownHelpersOnly: true });\n\n    var string = template(_lodash2.default.assign({}, vars, { args: args }));\n\n    return string;\n  } catch (e) {\n    // user is probably typing and so its not formed correctly\n    if (e.toString().indexOf('Parse error') !== -1) {\n      return str;\n\n      // Unknown variable\n    } else if (e.message.indexOf('not defined in') !== -1) {\n      var badVar = e.message.split(/\"/)[1];\n      e.error = {\n        caused_by: {\n          reason: _i18n.i18n.translate('tsvb.replaceVars.errors.unknownVarDescription', { defaultMessage: '{badVar} is an unknown variable', values: { badVar: '{{' + badVar + '}}' } }),\n          title: _i18n.i18n.translate('tsvb.replaceVars.errors.unknownVarTitle', { defaultMessage: 'Error processing your markdown' })\n        }\n      };\n    } else {\n      e.error = {\n        caused_by: {\n          reason: _i18n.i18n.translate('tsvb.replaceVars.errors.markdownErrorDescription', {\n            defaultMessage: 'Please verify you are only using markdown, known variables, and built-in Handlebars expressions' }),\n          title: _i18n.i18n.translate('tsvb.replaceVars.errors.markdownErrorTitle', { defaultMessage: 'Error processing your markdown' })\n        }\n      };\n    }\n    return e;\n  }\n} /*\n   * Licensed to Elasticsearch B.V. under one or more contributor\n   * license agreements. See the NOTICE file distributed with\n   * this work for additional information regarding copyright\n   * ownership. Elasticsearch B.V. licenses this file to you under\n   * the Apache License, Version 2.0 (the \"License\"); you may\n   * not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *    http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing,\n   * software distributed under the License is distributed on an\n   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n   * KIND, either express or implied.  See the License for the\n   * specific language governing permissions and limitations\n   * under the License.\n   */\n\nmodule.exports = exports['default'];",null]}