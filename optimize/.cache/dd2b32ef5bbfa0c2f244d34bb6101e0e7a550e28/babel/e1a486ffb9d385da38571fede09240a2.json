{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/maps/public/shared/components/metric_select.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/maps/public/shared/components/metric_select.js","mtime":1567631712018},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.METRIC_AGGREGATION_VALUES = undefined;\nexports.MetricSelect = MetricSelect;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _i18n = require('@kbn/i18n');\n\nvar _eui = require('@elastic/eui');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nvar AGG_OPTIONS = [{ label: _i18n.i18n.translate('xpack.maps.metricSelect.averageDropDownOptionLabel', {\n    defaultMessage: 'Average'\n  }),\n  value: 'avg' }, { label: _i18n.i18n.translate('xpack.maps.metricSelect.countDropDownOptionLabel', {\n    defaultMessage: 'Count'\n  }),\n  value: 'count' }, { label: _i18n.i18n.translate('xpack.maps.metricSelect.maxDropDownOptionLabel', {\n    defaultMessage: 'Max'\n  }),\n  value: 'max' }, { label: _i18n.i18n.translate('xpack.maps.metricSelect.minDropDownOptionLabel', {\n    defaultMessage: 'Min'\n  }),\n  value: 'min' }, { label: _i18n.i18n.translate('xpack.maps.metricSelect.sumDropDownOptionLabel', {\n    defaultMessage: 'Sum'\n  }),\n  value: 'sum' }];\n\nvar METRIC_AGGREGATION_VALUES = exports.METRIC_AGGREGATION_VALUES = AGG_OPTIONS.map(function (_ref) {\n  var value = _ref.value;\n  return value;\n});\n\nfunction MetricSelect(_ref2) {\n  var value = _ref2.value,\n      onChange = _ref2.onChange,\n      metricsFilter = _ref2.metricsFilter;\n\n\n  function onAggChange(selectedOptions) {\n    if (selectedOptions.length === 0) {\n      return;\n    }\n\n    var aggType = selectedOptions[0].value;\n    onChange(aggType);\n  }\n\n  var options = metricsFilter ? AGG_OPTIONS.filter(metricsFilter) : AGG_OPTIONS;\n\n  return _react2.default.createElement(_eui.EuiComboBox, {\n    placeholder: _i18n.i18n.translate('xpack.maps.metricSelect.selectAggregationPlaceholder', {\n      defaultMessage: 'Select aggregation'\n    }),\n    singleSelection: true,\n    isClearable: false,\n    options: options,\n    selectedOptions: AGG_OPTIONS.filter(function (option) {\n      return value === option.value;\n    }),\n    onChange: onAggChange\n  });\n}\n\nMetricSelect.propTypes = {\n  metricsFilter: _propTypes2.default.func,\n  value: _propTypes2.default.oneOf(METRIC_AGGREGATION_VALUES),\n  onChange: _propTypes2.default.func.isRequired\n};",null]}