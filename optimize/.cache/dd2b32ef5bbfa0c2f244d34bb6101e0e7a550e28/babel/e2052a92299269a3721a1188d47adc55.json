{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/rollup/public/crud_app/services/api.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/rollup/public/crud_app/services/api.js","mtime":1567631712290},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateIndexPattern = exports.createJob = exports.deleteJobs = exports.stopJobs = exports.startJobs = exports.loadJobs = undefined;\n\nvar loadJobs = exports.loadJobs = function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n    var _ref2, jobs;\n\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return (0, _http_provider.getHttp)().get(apiPrefix + '/jobs');\n\n          case 2:\n            _ref2 = _context.sent;\n            jobs = _ref2.data.jobs;\n            return _context.abrupt('return', jobs);\n\n          case 5:\n          case 'end':\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n\n  return function loadJobs() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar startJobs = exports.startJobs = function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(jobIds) {\n    var body;\n    return regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            body = { jobIds: jobIds };\n            _context2.next = 3;\n            return (0, _http_provider.getHttp)().post(apiPrefix + '/start', body);\n\n          case 3:\n            return _context2.abrupt('return', _context2.sent);\n\n          case 4:\n          case 'end':\n            return _context2.stop();\n        }\n      }\n    }, _callee2, this);\n  }));\n\n  return function startJobs(_x) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nvar stopJobs = exports.stopJobs = function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(jobIds) {\n    var body;\n    return regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            body = { jobIds: jobIds };\n            _context3.next = 3;\n            return (0, _http_provider.getHttp)().post(apiPrefix + '/stop', body);\n\n          case 3:\n            return _context3.abrupt('return', _context3.sent);\n\n          case 4:\n          case 'end':\n            return _context3.stop();\n        }\n      }\n    }, _callee3, this);\n  }));\n\n  return function stopJobs(_x2) {\n    return _ref4.apply(this, arguments);\n  };\n}();\n\nvar deleteJobs = exports.deleteJobs = function () {\n  var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(jobIds) {\n    var body;\n    return regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            body = { jobIds: jobIds };\n            _context4.next = 3;\n            return (0, _http_provider.getHttp)().post(apiPrefix + '/delete', body);\n\n          case 3:\n            return _context4.abrupt('return', _context4.sent);\n\n          case 4:\n          case 'end':\n            return _context4.stop();\n        }\n      }\n    }, _callee4, this);\n  }));\n\n  return function deleteJobs(_x3) {\n    return _ref5.apply(this, arguments);\n  };\n}();\n\nvar createJob = exports.createJob = function () {\n  var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(job) {\n    var body;\n    return regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            body = { job: job };\n            _context5.next = 3;\n            return (0, _http_provider.getHttp)().put(apiPrefix + '/create', body);\n\n          case 3:\n            return _context5.abrupt('return', _context5.sent);\n\n          case 4:\n          case 'end':\n            return _context5.stop();\n        }\n      }\n    }, _callee5, this);\n  }));\n\n  return function createJob(_x4) {\n    return _ref6.apply(this, arguments);\n  };\n}();\n\nvar validateIndexPattern = exports.validateIndexPattern = function () {\n  var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(indexPattern) {\n    return regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _context6.next = 2;\n            return (0, _http_provider.getHttp)().get(apiPrefix + '/index_pattern_validity/' + indexPattern);\n\n          case 2:\n            return _context6.abrupt('return', _context6.sent);\n\n          case 3:\n          case 'end':\n            return _context6.stop();\n        }\n      }\n    }, _callee6, this);\n  }));\n\n  return function validateIndexPattern(_x5) {\n    return _ref7.apply(this, arguments);\n  };\n}();\n\nvar _chrome = require('ui/chrome');\n\nvar _chrome2 = _interopRequireDefault(_chrome);\n\nvar _http_provider = require('./http_provider');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            */\n\nvar apiPrefix = _chrome2.default.addBasePath('/api/rollup');",null]}