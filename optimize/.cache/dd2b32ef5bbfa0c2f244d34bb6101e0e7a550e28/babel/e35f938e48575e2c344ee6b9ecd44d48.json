{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/public/lib/aeroelastic/gestures.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/public/lib/aeroelastic/gestures.js","mtime":1567631711932},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.actionEvent = exports.dragVector = exports.dragging = exports.mouseDowned = exports.gestureEnd = exports.mouseIsDown = exports.mouseButton = exports.cursorPosition = exports.shiftHeld = exports.optionHeld = exports.metaHeld = undefined;\n\nvar _state = require('./state');\n\n// Only needed to shuffle some modifier keys for Apple keyboards as per vector editing software conventions,\n// so it's OK that user agent strings are not reliable; in case it's spoofed, it'll just work with a slightly\n// different modifier key map (also, there aren't a lot of alternatives for OS / hw / keyboard detection).\n// It shouldn't fail in testing environments (node.js) either, where it can just return false, no need for\n// actually getting the OS on the server side.\nvar appleKeyboard = Boolean(window && window.navigator && window.navigator.userAgent && window.navigator.userAgent.match('Macintosh|iPhone|iPad'));\n\n/**\n * Selectors directly from a state object\n *\n *    (we could turn gesture.js into a factory, with this state root - primaryUpdate - being passed...)\n */\n\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nvar primaryUpdate = function primaryUpdate(state) {\n  return state.primaryUpdate;\n};\n\n/**\n * Gestures - derived selectors for transient state\n */\n\n// dispatch the various types of actions\nvar rawCursorPosition = (0, _state.select)(function (action) {\n  return action.type === 'cursorPosition' ? action.payload : null;\n})(primaryUpdate);\n\nvar mouseButtonEvent = (0, _state.select)(function (action) {\n  return action.type === 'mouseEvent' ? action.payload : null;\n})(primaryUpdate);\n\nvar keyFromMouse = (0, _state.select)(function (_ref) {\n  var type = _ref.type,\n      _ref$payload = _ref.payload,\n      altKey = _ref$payload.altKey,\n      metaKey = _ref$payload.metaKey,\n      shiftKey = _ref$payload.shiftKey,\n      ctrlKey = _ref$payload.ctrlKey;\n  return type === 'cursorPosition' || type === 'mouseEvent' ? { altKey: altKey, metaKey: metaKey, shiftKey: shiftKey, ctrlKey: ctrlKey } : {};\n})(primaryUpdate);\n\nvar metaHeld = exports.metaHeld = (0, _state.select)(appleKeyboard ? function (e) {\n  return e.metaKey;\n} : function (e) {\n  return e.altKey;\n})(keyFromMouse);\nvar optionHeld = exports.optionHeld = (0, _state.select)(appleKeyboard ? function (e) {\n  return e.altKey;\n} : function (e) {\n  return e.ctrlKey;\n})(keyFromMouse);\nvar shiftHeld = exports.shiftHeld = (0, _state.select)(function (e) {\n  return e.shiftKey;\n})(keyFromMouse);\n\nvar cursorPosition = exports.cursorPosition = (0, _state.selectReduce)(function (previous, position) {\n  return position || previous;\n}, {\n  x: 0,\n  y: 0\n})(rawCursorPosition);\n\nvar mouseButton = exports.mouseButton = (0, _state.selectReduce)(function (prev, next) {\n  if (!next) {\n    return prev;\n  }\n  var event = next.event,\n      uid = next.uid;\n\n  if (event === 'mouseDown') {\n    return { down: true, uid: uid };\n  } else {\n    return event === 'mouseUp' ? { down: false, uid: uid } : prev;\n  }\n}, { down: false, uid: null })(mouseButtonEvent);\n\nvar mouseIsDown = exports.mouseIsDown = (0, _state.selectReduce)(function (previous, next) {\n  return next ? next.event === 'mouseDown' : previous;\n}, false)(mouseButtonEvent);\n\nvar gestureEnd = exports.gestureEnd = (0, _state.select)(function (action) {\n  return action && (action.type === 'actionEvent' || action.type === 'mouseEvent' && action.payload.event === 'mouseUp');\n})(primaryUpdate);\n\n/**\n * mouseButtonStateTransitions\n *\n *    View: http://stable.ascii-flow.appspot.com/#567671116534197027\n *    Edit: http://stable.ascii-flow.appspot.com/#567671116534197027/776257435\n *\n *\n *                             mouseNowDown\n *        initial state: 'up' +------------> 'downed'\n *                        ^ ^                  +  +\n *                        | |  !mouseNowDown   |  |\n *          !mouseNowDown | +------------------+  | mouseNowDown && movedAlready\n *                        |                       |\n *                        +----+ 'dragging' <-----+\n *                                +      ^\n *                                |      |\n *                                +------+\n *                               mouseNowDown\n *\n */\nvar mouseButtonStateTransitions = function mouseButtonStateTransitions(state, mouseNowDown, movedAlready) {\n  switch (state) {\n    case 'up':\n      return mouseNowDown ? 'downed' : 'up';\n    case 'downed':\n      if (mouseNowDown) {\n        return movedAlready ? 'dragging' : 'downed';\n      } else {\n        return 'up';\n      }\n\n    case 'dragging':\n      return mouseNowDown ? 'dragging' : 'up';\n  }\n};\n\nvar mouseButtonState = (0, _state.selectReduce)(function (_ref2, mouseNowDown, _ref3) {\n  var buttonState = _ref2.buttonState,\n      downX = _ref2.downX,\n      downY = _ref2.downY;\n  var x = _ref3.x,\n      y = _ref3.y;\n\n  var movedAlready = x !== downX || y !== downY;\n  var newButtonState = mouseButtonStateTransitions(buttonState, mouseNowDown, movedAlready);\n  return {\n    buttonState: newButtonState,\n    downX: newButtonState === 'downed' ? x : downX,\n    downY: newButtonState === 'downed' ? y : downY\n  };\n}, { buttonState: 'up', downX: null, downY: null })(mouseIsDown, cursorPosition);\n\nvar mouseDowned = exports.mouseDowned = (0, _state.select)(function (state) {\n  return state.buttonState === 'downed';\n})(mouseButtonState);\n\nvar dragging = exports.dragging = (0, _state.select)(function (state) {\n  return state.buttonState === 'dragging';\n})(mouseButtonState);\n\nvar dragVector = exports.dragVector = (0, _state.select)(function (_ref4, _ref5) {\n  var buttonState = _ref4.buttonState,\n      downX = _ref4.downX,\n      downY = _ref4.downY;\n  var x = _ref5.x,\n      y = _ref5.y;\n  return {\n    down: buttonState !== 'up',\n    x0: downX,\n    y0: downY,\n    x1: x,\n    y1: y\n  };\n})(mouseButtonState, cursorPosition);\n\nvar actionEvent = exports.actionEvent = (0, _state.select)(function (action) {\n  return action.type === 'actionEvent' ? action.payload : null;\n})(primaryUpdate);",null]}