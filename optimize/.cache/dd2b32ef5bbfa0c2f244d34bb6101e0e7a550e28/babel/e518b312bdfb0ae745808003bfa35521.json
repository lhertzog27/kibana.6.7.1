{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/public/state/reducers/assets.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/public/state/reducers/assets.js","mtime":1567631711936},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.assetsReducer = undefined;\n\nvar _handleActions;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /*\n                                                                                                                                                                                                                                                                   * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                   * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                   * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                   */\n\nvar _reduxActions = require('redux-actions');\n\nvar _objectPathImmutable = require('object-path-immutable');\n\nvar _lodash = require('lodash');\n\nvar _assets = require('../actions/assets');\n\nvar _get_id = require('../../lib/get_id');\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar assetsReducer = exports.assetsReducer = (0, _reduxActions.handleActions)((_handleActions = {}, _defineProperty(_handleActions, _assets.createAsset, function (assetState, _ref) {\n  var payload = _ref.payload;\n\n  var asset = _extends({\n    id: (0, _get_id.getId)('asset'),\n    '@created': new Date().toISOString()\n  }, payload);\n  return (0, _objectPathImmutable.set)(assetState, asset.id, asset);\n}), _defineProperty(_handleActions, _assets.setAssetValue, function (assetState, _ref2) {\n  var payload = _ref2.payload;\n  var id = payload.id,\n      value = payload.value;\n\n  var asset = (0, _lodash.get)(assetState, [id]);\n  if (!asset) {\n    throw new Error('Can not set asset data, id not found: ' + id);\n  }\n  return (0, _objectPathImmutable.assign)(assetState, id, { value: value });\n}), _defineProperty(_handleActions, _assets.removeAsset, function (assetState, _ref3) {\n  var assetId = _ref3.payload;\n\n  return (0, _objectPathImmutable.del)(assetState, assetId);\n}), _defineProperty(_handleActions, (0, _reduxActions.combineActions)(_assets.setAssets, _assets.resetAssets), function (assetState, _ref4) {\n  var payload = _ref4.payload;\n  return payload || {};\n}), _handleActions), {});",null]}