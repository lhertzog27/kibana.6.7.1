{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/rollup/public/index_pattern_list/rollup_index_pattern_list_config.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/rollup/public/index_pattern_list/rollup_index_pattern_list_config.js","mtime":1567631712292},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RollupIndexPatternListConfig = undefined;\n\nvar _index_pattern_list = require('ui/management/index_pattern_list');\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               */\n\n\nfunction isRollup(indexPattern) {\n  return indexPattern.type === 'rollup' || indexPattern.get && indexPattern.get('type') === 'rollup';\n}\n\nvar RollupIndexPatternListConfig = exports.RollupIndexPatternListConfig = function (_IndexPatternListConf) {\n  _inherits(RollupIndexPatternListConfig, _IndexPatternListConf);\n\n  function RollupIndexPatternListConfig() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, RollupIndexPatternListConfig);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = RollupIndexPatternListConfig.__proto__ || Object.getPrototypeOf(RollupIndexPatternListConfig)).call.apply(_ref, [this].concat(args))), _this), _this.getIndexPatternTags = function (indexPattern) {\n      return isRollup(indexPattern) ? [{\n        key: 'rollup',\n        name: 'Rollup'\n      }] : [];\n    }, _this.getFieldInfo = function (indexPattern, field) {\n      if (!isRollup(indexPattern)) {\n        return [];\n      }\n\n      var allAggs = indexPattern.typeMeta && indexPattern.typeMeta.aggs;\n      var fieldAggs = allAggs && Object.keys(allAggs).filter(function (agg) {\n        return allAggs[agg][field];\n      });\n\n      if (!fieldAggs || !fieldAggs.length) {\n        return [];\n      }\n\n      return ['Rollup aggregations:'].concat(fieldAggs.map(function (aggName) {\n        var agg = allAggs[aggName][field];\n        switch (aggName) {\n          case 'date_histogram':\n            return aggName + ' (interval: ' + agg.interval + ', ' + (agg.delay ? 'delay: ' + agg.delay + ',' : '') + ' ' + agg.time_zone + ')';\n            break;\n          case 'histogram':\n            return aggName + ' (interval: ' + agg.interval + ')';\n          default:\n            return aggName;\n        }\n      }));\n    }, _this.areScriptedFieldsEnabled = function (indexPattern) {\n      return !isRollup(indexPattern);\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  return RollupIndexPatternListConfig;\n}(_index_pattern_list.IndexPatternListConfig);\n\nRollupIndexPatternListConfig.key = 'rollup';",null]}