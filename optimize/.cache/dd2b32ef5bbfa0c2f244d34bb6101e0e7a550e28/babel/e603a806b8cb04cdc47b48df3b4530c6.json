{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/index_management/public/lib/ace.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/index_management/public/lib/ace.js","mtime":1567631711971},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAceEditor = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }(); /*\nopyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\nor more contributor license agreements. Licensed under the Elastic License;\nyou may not use this file except in compliance with the Elastic License.\nn\nvar _ace = require(\"ace\");\n\nvar _ace2 = _interopRequireDefault(_ace);\n\nrequire(\"brace/ext/language_tools\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar splitTokens = function splitTokens(line) {\n  return line.split(/\\s+/);\n};\nvar wordCompleter = function wordCompleter(words) {\n  return {\n    identifierRegexps: [/[a-zA-Z_0-9\\.\\$\\-\\u00A2-\\uFFFF]/ // adds support for dot character\n    ],\n    getCompletions: function getCompletions(editor, session, pos, prefix, callback) {\n      var document = session.getDocument();\n      var currentLine = document.getLine(pos.row);\n      var previousLine = document.getLine(pos.row - 1);\n      var currentTokens = splitTokens(currentLine.slice(0, pos.column));\n      var fullLineTokens = splitTokens(currentLine);\n      var isInArray = previousLine && splitTokens(previousLine).slice(-1)[0] === '[';\n\n      var _currentTokens = _slicedToArray(currentTokens, 2),\n          _currentTokens$ = _currentTokens[1],\n          secondToken = _currentTokens$ === undefined ? null : _currentTokens$;\n\n      var _fullLineTokens = _slicedToArray(fullLineTokens, 2),\n          _fullLineTokens$ = _fullLineTokens[1],\n          secondFullToken = _fullLineTokens$ === undefined ? null : _fullLineTokens$;\n\n      if (isInArray || currentTokens.length > 2) {\n        return callback(null, []);\n      }\n      var startQuote = secondToken === '\"' ? '' : '\"';\n      var endQuote = secondFullToken === '\"\"' ? '' : '\"';\n      callback(null, words.map(function (word) {\n        return {\n          caption: \" \" + word,\n          value: \"\" + startQuote + word + endQuote\n        };\n      }));\n    }\n  };\n};\n\nvar createAceEditor = exports.createAceEditor = function createAceEditor(div, value) {\n  var readOnly = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  var autocompleteArray = arguments[3];\n\n  var editor = _ace2.default.edit(div);\n  editor.$blockScrolling = Infinity;\n  editor.setValue(value, -1);\n  var session = editor.getSession();\n  session.setUseWrapMode(true);\n  session.setMode(\"ace/mode/json\");\n  if (autocompleteArray) {\n    var languageTools = _ace2.default.acequire(\"ace/ext/language_tools\");\n    var autocompleter = wordCompleter(autocompleteArray);\n    languageTools.setCompleters([autocompleter]);\n  }\n  var options = {\n    readOnly: readOnly,\n    highlightActiveLine: false,\n    highlightGutterLine: false,\n    minLines: 20,\n    maxLines: 30\n  };\n  //done this way to avoid warnings about unrecognized options\n  var autocompleteOptions = readOnly ? {} : {\n    enableBasicAutocompletion: true,\n    enableLiveAutocompletion: true\n  };\n  editor.setOptions(_extends({}, options, autocompleteOptions));\n  editor.setBehavioursEnabled(!readOnly);\n  return editor;\n};",null]}