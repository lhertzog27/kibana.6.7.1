{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/monitoring/public/views/no_data/model_updater.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/monitoring/public/views/no_data/model_updater.js","mtime":1567631712103},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\n/*\n * Class for handling model updates of an Angular controller\n * Some properties are simple primitives like strings or booleans,\n * but sometimes we need a property in the model to be an Array. For example,\n * there may be multiple errors that happen in a flow.\n *\n * I use 1 method to handling property values that are either primitives or\n * arrays, because it allows the callers to be a little more dumb. All they\n  * have to know is the property name, rather than the type as well.\n */\nvar ModelUpdater = exports.ModelUpdater = function () {\n  function ModelUpdater($scope, model) {\n    _classCallCheck(this, ModelUpdater);\n\n    this.$scope = $scope;\n    this.model = model;\n    this.updateModel = this.updateModel.bind(this);\n  }\n\n  _createClass(ModelUpdater, [{\n    key: \"updateModel\",\n    value: function updateModel(properties) {\n      var $scope = this.$scope,\n          model = this.model;\n\n      var keys = Object.keys(properties);\n      $scope.$evalAsync(function () {\n        keys.forEach(function (key) {\n          if (Array.isArray(model[key])) {\n            model[key].push(properties[key]);\n          } else {\n            model[key] = properties[key];\n          }\n        });\n      });\n    }\n  }]);\n\n  return ModelUpdater;\n}();",null]}