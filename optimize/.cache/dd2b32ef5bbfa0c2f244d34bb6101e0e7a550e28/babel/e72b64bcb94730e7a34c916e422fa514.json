{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/cross_cluster_replication/public/app/services/auto_follow_pattern_validators.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/cross_cluster_replication/public/app/services/auto_follow_pattern_validators.js","mtime":1567631711954},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateAutoFollowPattern = exports.validateSuffix = exports.validatePrefix = exports.validateLeaderIndexPattern = exports.validateName = undefined;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _i18n = require('@kbn/i18n');\n\nvar _react3 = require('@kbn/i18n/react');\n\nvar _index_patterns = require('ui/index_patterns');\n\nvar _indices = require('ui/indices');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar validateName = exports.validateName = function validateName() {\n  var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n  var errorMsg = null;\n\n  if (!name || !name.trim()) {\n    errorMsg = _i18n.i18n.translate('xpack.crossClusterReplication.autoFollowPattern.nameValidation.errorEmptyName', { defaultMessage: 'Name is required.' });\n  } else {\n    if (name.includes(' ')) {\n      errorMsg = _i18n.i18n.translate('xpack.crossClusterReplication.autoFollowPattern.nameValidation.errorSpace', {\n        defaultMessage: 'Spaces are not allowed in the name.'\n      });\n    }\n\n    if (name[0] === '_') {\n      errorMsg = _i18n.i18n.translate('xpack.crossClusterReplication.autoFollowPattern.nameValidation.errorUnderscore', { defaultMessage: \"Name can't begin with an underscore.\" });\n    }\n\n    if (name.includes(',')) {\n      errorMsg = _i18n.i18n.translate('xpack.crossClusterReplication.autoFollowPattern.nameValidation.errorComma', { defaultMessage: \"Commas are not allowed in the name.\" });\n    }\n  }\n  return errorMsg;\n}; /*\n    * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n    * or more contributor license agreements. Licensed under the Elastic License;\n    * you may not use this file except in compliance with the Elastic License.\n    */\n\nvar validateLeaderIndexPattern = exports.validateLeaderIndexPattern = function validateLeaderIndexPattern(indexPattern) {\n  var errors = (0, _index_patterns.validateIndexPattern)(indexPattern);\n\n  if (errors[_index_patterns.ILLEGAL_CHARACTERS]) {\n    return _react2.default.createElement(_react3.FormattedMessage, {\n      id: 'xpack.crossClusterReplication.autoFollowPattern.leaderIndexPatternValidation.illegalCharacters',\n      defaultMessage: 'Remove the {characterListLength, plural, one {character} other {characters}} {characterList} from the index pattern.',\n      values: {\n        characterList: _react2.default.createElement(\n          'strong',\n          null,\n          errors[_index_patterns.ILLEGAL_CHARACTERS].join(' ')\n        ),\n        characterListLength: errors[_index_patterns.ILLEGAL_CHARACTERS].length\n      }\n    });\n  }\n\n  if (errors[_index_patterns.CONTAINS_SPACES]) {\n    return _react2.default.createElement(_react3.FormattedMessage, {\n      id: 'xpack.crossClusterReplication.autoFollowPattern.leaderIndexPatternValidation.noEmptySpace',\n      defaultMessage: 'Spaces are not allowed in the index pattern.'\n    });\n  }\n\n  return null;\n};\n\nvar validatePrefix = exports.validatePrefix = function validatePrefix(prefix) {\n  // If it's empty, it is valid\n  if (!prefix || !prefix.trim()) {\n    return null;\n  }\n\n  // Prefix can't begin with a period, because that's reserved for system indices.\n  if ((0, _indices.indexNameBeginsWithPeriod)(prefix)) {\n    return _react2.default.createElement(_react3.FormattedMessage, {\n      id: 'xpack.crossClusterReplication.autoFollowPattern.prefixValidation.beginsWithPeriod',\n      defaultMessage: 'The prefix can\\'t begin with a period.'\n    });\n  }\n\n  var illegalCharacters = (0, _indices.findIllegalCharactersInIndexName)(prefix);\n\n  if (illegalCharacters.length) {\n    return _react2.default.createElement(_react3.FormattedMessage, {\n      id: 'xpack.crossClusterReplication.autoFollowPattern.prefixValidation.illegalCharacters',\n      defaultMessage: 'Remove the {characterListLength, plural, one {character} other {characters}} {characterList} from the prefix.',\n      values: {\n        characterList: _react2.default.createElement(\n          'strong',\n          null,\n          illegalCharacters.join(' ')\n        ),\n        characterListLength: illegalCharacters.length\n      }\n    });\n  }\n\n  if ((0, _indices.indexNameContainsSpaces)(prefix)) {\n    return _react2.default.createElement(_react3.FormattedMessage, {\n      id: 'xpack.crossClusterReplication.autoFollowPattern.prefixValidation.noEmptySpace',\n      defaultMessage: 'Spaces are not allowed in the prefix.'\n    });\n  }\n\n  return null;\n};\n\nvar validateSuffix = exports.validateSuffix = function validateSuffix(suffix) {\n  // If it's empty, it is valid\n  if (!suffix || !suffix.trim()) {\n    return null;\n  }\n\n  var illegalCharacters = (0, _indices.findIllegalCharactersInIndexName)(suffix);\n\n  if (illegalCharacters.length) {\n    return _react2.default.createElement(_react3.FormattedMessage, {\n      id: 'xpack.crossClusterReplication.autoFollowPattern.suffixValidation.illegalCharacters',\n      defaultMessage: 'Remove the {characterListLength, plural, one {character} other {characters}} {characterList} from the suffix.',\n      values: {\n        characterList: _react2.default.createElement(\n          'strong',\n          null,\n          illegalCharacters.join(' ')\n        ),\n        characterListLength: illegalCharacters.length\n      }\n    });\n  }\n\n  if ((0, _indices.indexNameContainsSpaces)(suffix)) {\n    return _react2.default.createElement(_react3.FormattedMessage, {\n      id: 'xpack.crossClusterReplication.autoFollowPattern.suffixValidation.noEmptySpace',\n      defaultMessage: 'Spaces are not allowed in the suffix.'\n    });\n  }\n\n  return null;\n};\n\nvar validateAutoFollowPattern = exports.validateAutoFollowPattern = function validateAutoFollowPattern() {\n  var autoFollowPattern = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  var errors = {};\n  var error = null;\n  var fieldValue = void 0;\n\n  Object.keys(autoFollowPattern).forEach(function (fieldName) {\n    fieldValue = autoFollowPattern[fieldName];\n    error = null;\n\n    switch (fieldName) {\n      case 'name':\n        error = validateName(fieldValue);\n        break;\n\n      case 'leaderIndexPatterns':\n        if (!fieldValue.length) {\n          error = {\n            message: _i18n.i18n.translate('xpack.crossClusterReplication.autoFollowPattern.leaderIndexPatternValidation.isEmpty', {\n              defaultMessage: 'At least one leader index pattern is required.'\n            })\n          };\n        }\n        break;\n\n      case 'followIndexPatternPrefix':\n        error = validatePrefix(fieldValue);\n        break;\n\n      case 'followIndexPatternSuffix':\n        error = validateSuffix(fieldValue);\n        break;\n    }\n\n    errors[fieldName] = error;\n  });\n\n  return errors;\n};",null]}