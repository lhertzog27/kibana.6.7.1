{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/security/public/hacks/on_session_timeout.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/security/public/hacks/on_session_timeout.js","mtime":1567631712296},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _modules = require('ui/modules');\n\nvar _system_api = require('ui/system_api');\n\nvar _path = require('plugins/xpack_main/services/path');\n\nrequire('plugins/security/services/auto_logout');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Client session timeout is decreased by this number so that Kibana server\n * can still access session content during logout request to properly clean\n * user session up (invalidate access tokens, redirect to logout portal etc.).\n * @type {number}\n */\nvar SESSION_TIMEOUT_GRACE_PERIOD_MS = 5000; /*\n                                             * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                             * or more contributor license agreements. Licensed under the Elastic License;\n                                             * you may not use this file except in compliance with the Elastic License.\n                                             */\n\nvar _module = _modules.uiModules.get('security', []);\n_module.config(function ($httpProvider) {\n  $httpProvider.interceptors.push(function ($timeout, $window, $q, $injector, sessionTimeout, Notifier, Private, autoLogout, i18n) {\n    var isUnauthenticated = Private(_path.PathProvider).isUnauthenticated();\n    var notifier = new Notifier();\n    var notificationLifetime = 60 * 1000;\n    var notificationOptions = {\n      type: 'warning',\n      content: i18n('xpack.security.hacks.logoutNotification', {\n        defaultMessage: 'You will soon be logged out due to inactivity. Click OK to resume.'\n      }),\n      icon: 'warning',\n      title: i18n('xpack.security.hacks.warningTitle', {\n        defaultMessage: 'Warning'\n      }),\n      lifetime: Math.min(sessionTimeout - SESSION_TIMEOUT_GRACE_PERIOD_MS, notificationLifetime),\n      actions: ['accept']\n    };\n\n    var pendingNotification = void 0;\n    var activeNotification = void 0;\n\n    function clearNotifications() {\n      if (pendingNotification) $timeout.cancel(pendingNotification);\n      if (activeNotification) activeNotification.clear();\n    }\n\n    function scheduleNotification() {\n      pendingNotification = $timeout(showNotification, Math.max(sessionTimeout - notificationLifetime, 0));\n    }\n\n    function showNotification() {\n      activeNotification = notifier.add(notificationOptions, function (action) {\n        if (action === 'accept') {\n          // Make a simple request to keep the session alive\n          $injector.get('es').ping();\n        } else {\n          autoLogout();\n        }\n      });\n    }\n\n    function interceptorFactory(responseHandler) {\n      return function interceptor(response) {\n        if (!isUnauthenticated && !(0, _system_api.isSystemApiRequest)(response.config) && sessionTimeout !== null) {\n          clearNotifications();\n          scheduleNotification();\n        }\n        return responseHandler(response);\n      };\n    }\n\n    return {\n      response: interceptorFactory(_lodash2.default.identity),\n      responseError: interceptorFactory($q.reject)\n    };\n  });\n});",null]}