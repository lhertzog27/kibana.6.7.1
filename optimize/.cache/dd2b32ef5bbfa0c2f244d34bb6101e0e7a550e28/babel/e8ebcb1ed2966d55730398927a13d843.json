{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/maps/public/selectors/map_selectors.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/maps/public/selectors/map_selectors.js","mtime":1567631712017},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hasDirtyState = exports.getUniqueIndexPatternIds = exports.getSelectedLayerJoinDescriptors = exports.getSelectedLayer = exports.getLayerList = exports.getDataFilters = exports.getRefreshTimerLastTriggeredAt = exports.getRefreshConfig = exports.getQuery = exports.getTimeFilters = exports.getMapColors = exports.getMouseCoordinates = exports.getMapCenter = exports.getMapZoom = exports.getMapBuffer = exports.getMapExtent = exports.getWaitingForMapReadyLayerListRaw = exports.getLayerListRaw = exports.getTransientLayerId = exports.getSelectedLayerId = exports.getGoto = exports.getMapReady = undefined;\n\nvar _reselect = require('reselect');\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _tile_layer = require('../shared/layers/tile_layer');\n\nvar _vector_layer = require('../shared/layers/vector_layer');\n\nvar _heatmap_layer = require('../shared/layers/heatmap_layer');\n\nvar _all_sources = require('../shared/layers/sources/all_sources');\n\nvar _vector_style = require('../shared/layers/styles/vector_style');\n\nvar _heatmap_style = require('../shared/layers/styles/heatmap_style');\n\nvar _tile_style = require('../shared/layers/styles/tile_style');\n\nvar _timefilter = require('ui/timefilter');\n\nvar _util = require('../store/util');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } } /*\n                                                                                                                                                                                                     * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                     * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                     * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                     */\n\nfunction createLayerInstance(layerDescriptor) {\n  var source = createSourceInstance(layerDescriptor.sourceDescriptor);\n  var style = createStyleInstance(layerDescriptor.style);\n  switch (layerDescriptor.type) {\n    case _tile_layer.TileLayer.type:\n      return new _tile_layer.TileLayer({ layerDescriptor: layerDescriptor, source: source, style: style });\n    case _vector_layer.VectorLayer.type:\n      return new _vector_layer.VectorLayer({ layerDescriptor: layerDescriptor, source: source, style: style });\n    case _heatmap_layer.HeatmapLayer.type:\n      return new _heatmap_layer.HeatmapLayer({ layerDescriptor: layerDescriptor, source: source, style: style });\n    default:\n      throw new Error('Unrecognized layerType ' + layerDescriptor.type);\n  }\n}\n\nfunction createSourceInstance(sourceDescriptor) {\n  var Source = _all_sources.ALL_SOURCES.find(function (Source) {\n    return Source.type === sourceDescriptor.type;\n  });\n  if (!Source) {\n    throw new Error('Unrecognized sourceType ' + sourceDescriptor.type);\n  }\n  return new Source(sourceDescriptor);\n}\n\nfunction createStyleInstance(styleDescriptor) {\n\n  if (!styleDescriptor || !styleDescriptor.type) {\n    return null;\n  }\n\n  switch (styleDescriptor.type) {\n    case _vector_style.VectorStyle.type:\n      return new _vector_style.VectorStyle(styleDescriptor);\n    case _tile_style.TileStyle.type:\n      return new _tile_style.TileStyle(styleDescriptor);\n    case _heatmap_style.HeatmapStyle.type:\n      return new _heatmap_style.HeatmapStyle(styleDescriptor);\n    default:\n      throw new Error('Unrecognized styleType ' + styleDescriptor.type);\n  }\n}\n\nvar getMapReady = exports.getMapReady = function getMapReady(_ref) {\n  var map = _ref.map;\n  return map && map.ready;\n};\n\nvar getGoto = exports.getGoto = function getGoto(_ref2) {\n  var map = _ref2.map;\n  return map && map.goto;\n};\n\nvar getSelectedLayerId = exports.getSelectedLayerId = function getSelectedLayerId(_ref3) {\n  var map = _ref3.map;\n\n  return !map.selectedLayerId || !map.layerList ? null : map.selectedLayerId;\n};\n\nvar getTransientLayerId = exports.getTransientLayerId = function getTransientLayerId(_ref4) {\n  var map = _ref4.map;\n  return map.__transientLayerId;\n};\n\nvar getLayerListRaw = exports.getLayerListRaw = function getLayerListRaw(_ref5) {\n  var map = _ref5.map;\n  return map.layerList ? map.layerList : [];\n};\n\nvar getWaitingForMapReadyLayerListRaw = exports.getWaitingForMapReadyLayerListRaw = function getWaitingForMapReadyLayerListRaw(_ref6) {\n  var map = _ref6.map;\n  return map.waitingForMapReadyLayerList ? map.waitingForMapReadyLayerList : [];\n};\n\nvar getMapExtent = exports.getMapExtent = function getMapExtent(_ref7) {\n  var map = _ref7.map;\n  return map.mapState.extent ? map.mapState.extent : {};\n};\n\nvar getMapBuffer = exports.getMapBuffer = function getMapBuffer(_ref8) {\n  var map = _ref8.map;\n  return map.mapState.buffer ? map.mapState.buffer : {};\n};\n\nvar getMapZoom = exports.getMapZoom = function getMapZoom(_ref9) {\n  var map = _ref9.map;\n  return map.mapState.zoom ? map.mapState.zoom : 0;\n};\n\nvar getMapCenter = exports.getMapCenter = function getMapCenter(_ref10) {\n  var map = _ref10.map;\n  return map.mapState.center ? map.mapState.center : { lat: 0, lon: 0 };\n};\n\nvar getMouseCoordinates = exports.getMouseCoordinates = function getMouseCoordinates(_ref11) {\n  var map = _ref11.map;\n  return map.mapState.mouseCoordinates;\n};\n\nvar getMapColors = exports.getMapColors = function getMapColors(_ref12) {\n  var map = _ref12.map;\n\n  return map.layerList.reduce(function (accu, layer) {\n    // This will evolve as color options are expanded\n    var color = _lodash2.default.get(layer, 'style.properties.fillColor.options.color');\n    if (color) accu.push(color);\n    return accu;\n  }, []);\n};\n\nvar getTimeFilters = exports.getTimeFilters = function getTimeFilters(_ref13) {\n  var map = _ref13.map;\n  return map.mapState.timeFilters ? map.mapState.timeFilters : _timefilter.timefilter.getTime();\n};\n\nvar getQuery = exports.getQuery = function getQuery(_ref14) {\n  var map = _ref14.map;\n  return map.mapState.query;\n};\n\nvar getRefreshConfig = exports.getRefreshConfig = function getRefreshConfig(_ref15) {\n  var map = _ref15.map;\n  return map.mapState.refreshConfig;\n};\n\nvar getRefreshTimerLastTriggeredAt = exports.getRefreshTimerLastTriggeredAt = function getRefreshTimerLastTriggeredAt(_ref16) {\n  var map = _ref16.map;\n  return map.mapState.refreshTimerLastTriggeredAt;\n};\n\nvar getDataFilters = exports.getDataFilters = (0, _reselect.createSelector)(getMapExtent, getMapBuffer, getMapZoom, getTimeFilters, getRefreshTimerLastTriggeredAt, getQuery, function (mapExtent, mapBuffer, mapZoom, timeFilters, refreshTimerLastTriggeredAt, query) {\n  return {\n    extent: mapExtent,\n    buffer: mapBuffer,\n    zoom: mapZoom,\n    timeFilters: timeFilters,\n    refreshTimerLastTriggeredAt: refreshTimerLastTriggeredAt,\n    query: query\n  };\n});\n\nvar getLayerList = exports.getLayerList = (0, _reselect.createSelector)(getLayerListRaw, function (layerDescriptorList) {\n  return layerDescriptorList.map(function (layerDescriptor) {\n    return createLayerInstance(layerDescriptor);\n  });\n});\n\nvar getSelectedLayer = exports.getSelectedLayer = (0, _reselect.createSelector)(getSelectedLayerId, getLayerList, function (selectedLayerId, layerList) {\n  return layerList.find(function (layer) {\n    return layer.getId() === selectedLayerId;\n  });\n});\n\nvar getSelectedLayerJoinDescriptors = exports.getSelectedLayerJoinDescriptors = (0, _reselect.createSelector)(getSelectedLayer, function (selectedLayer) {\n  return selectedLayer.getJoins().map(function (join) {\n    return join.toDescriptor();\n  });\n});\n\nvar getUniqueIndexPatternIds = exports.getUniqueIndexPatternIds = (0, _reselect.createSelector)(getLayerList, function (layerList) {\n  var indexPatternIds = [];\n  layerList.forEach(function (layer) {\n    indexPatternIds.push.apply(indexPatternIds, _toConsumableArray(layer.getIndexPatternIds()));\n  });\n  return _lodash2.default.uniq(indexPatternIds);\n});\n\nvar hasDirtyState = exports.hasDirtyState = (0, _reselect.createSelector)(getLayerListRaw, function (layerListRaw) {\n  return layerListRaw.some(function (layerDescriptor) {\n    var currentState = (0, _util.copyPersistentState)(layerDescriptor);\n    var trackedState = layerDescriptor[_util.TRACKED_LAYER_DESCRIPTOR];\n    return trackedState ? !_lodash2.default.isEqual(currentState, trackedState) : false;\n  });\n});",null]}