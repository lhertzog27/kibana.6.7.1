{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/util/string_utils.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/util/string_utils.js","mtime":1567631712071},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.replaceStringTokens = replaceStringTokens;\nexports.detectorToString = detectorToString;\nexports.sortByKey = sortByKey;\nexports.guessTimeFormat = guessTimeFormat;\nexports.toLocaleString = toLocaleString;\nexports.mlEscape = mlEscape;\nexports.escapeForElasticsearchQuery = escapeForElasticsearchQuery;\nexports.isWebUrl = isWebUrl;\nexports.calculateTextWidth = calculateTextWidth;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _d = require('d3');\n\nvar _d2 = _interopRequireDefault(_d);\n\nvar _relative_to_absolute = require('ui/url/relative_to_absolute');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Replaces all instances of dollar delimited tokens in the specified String\n// with corresponding values from the supplied object, optionally\n// encoding the replacement for a URI component.\n// For example if passed a String 'http://www.google.co.uk/#q=airline+code+$airline$'\n// and valuesByTokenName of {\"airline\":\"AAL\"}, will return\n// 'http://www.google.co.uk/#q=airline+code+AAL'.\n// If a corresponding key is not found in valuesByTokenName, then the String is not replaced.\nfunction replaceStringTokens(str, valuesByTokenName, encodeForURI) {\n  return String(str).replace(/\\$([^?&$\\'\"]{1,40})\\$/g, function (match, name) {\n    // Use lodash get to allow nested JSON fields to be retrieved.\n    var tokenValue = _lodash2.default.get(valuesByTokenName, name, null);\n    if (encodeForURI === true && tokenValue !== null) {\n      tokenValue = encodeURIComponent(tokenValue);\n    }\n\n    // If property not found string is not replaced.\n    return tokenValue !== null ? tokenValue : match;\n  });\n}\n\n// creates the default description for a given detector\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\n/*\n* Contains utility functions for performing operations on Strings.\n*/\nfunction detectorToString(dtr) {\n  var BY_TOKEN = ' by ';\n  var OVER_TOKEN = ' over ';\n  var USE_NULL_OPTION = ' use_null=';\n  var PARTITION_FIELD_OPTION = ' partition_field_name=';\n  var EXCLUDE_FREQUENT_OPTION = ' exclude_frequent=';\n\n  var txt = '';\n\n  if (dtr.function !== undefined && dtr.function !== '') {\n    txt += dtr.function;\n    if (dtr.field_name !== undefined && dtr.field_name !== '') {\n      txt += '(' + quoteField(dtr.field_name) + ')';\n    }\n  } else if (dtr.field_name !== undefined && dtr.field_name !== '') {\n    txt += quoteField(dtr.field_name);\n  }\n\n  if (dtr.by_field_name !== undefined && dtr.by_field_name !== '') {\n    txt += BY_TOKEN + quoteField(dtr.by_field_name);\n  }\n\n  if (dtr.over_field_name !== undefined && dtr.over_field_name !== '') {\n    txt += OVER_TOKEN + quoteField(dtr.over_field_name);\n  }\n\n  if (dtr.use_null !== undefined) {\n    txt += USE_NULL_OPTION + dtr.use_null;\n  }\n\n  if (dtr.partition_field_name !== undefined && dtr.partition_field_name !== '') {\n    txt += PARTITION_FIELD_OPTION + quoteField(dtr.partition_field_name);\n  }\n\n  if (dtr.exclude_frequent !== undefined && dtr.exclude_frequent !== '') {\n    txt += EXCLUDE_FREQUENT_OPTION + dtr.exclude_frequent;\n  }\n\n  return txt;\n}\n\n// wrap a the inputed string in quotes if it contains non-word characters\nfunction quoteField(field) {\n  if (field.match(/\\W/g)) {\n    return '\"' + field + '\"';\n  } else {\n    return field;\n  }\n}\n\n// re-order an object based on the value of the keys\nfunction sortByKey(list, reverse, comparator) {\n  var keys = _lodash2.default.sortBy(_lodash2.default.keys(list), function (key) {\n    return comparator ? comparator(list[key], key) : key;\n  });\n\n  if (reverse) {\n    keys = keys.reverse();\n  }\n\n  return _lodash2.default.object(keys, _lodash2.default.map(keys, function (key) {\n    return list[key];\n  }));\n}\n\n// guess the time format for a given time string\nfunction guessTimeFormat(time) {\n  var format = '';\n  var matched = false;\n  if (isNaN(time)) {\n    var match = void 0;\n\n    // match date format\n    if (!matched) {\n      var reg = '';\n\n      reg += '('; // 1   ( date\n\n      reg += '('; // 2   ( yyyy-MM-dd\n      reg += '(\\\\d{4})'; // 3   yyyy\n      reg += '([-/.\\\\s])'; // 4   - or . or \\s\n      reg += '('; // 5   ( month\n      reg += '([01]\\\\d)'; // 6   MM\n      reg += '|'; //     or\n      reg += '(\\\\w{3})'; // 7   MMM\n      reg += ')'; //     ) end month\n      reg += '([-/.\\\\s])'; // 8   - or . or \\s\n      reg += '([0-3]\\\\d)'; // 9   dd  0-3 and 0-9\n      reg += ')'; //     ) end yyyy-MM-dd\n\n      reg += '|'; //     or\n\n      reg += '('; // 10  ( d[d]-MM[M]-yyyy or MM[M]-d[d]-yyyy\n\n      reg += '('; // 11  ( day or month\n      reg += '(\\\\d{1,2})'; // 12  d or M or dd or MM\n      reg += '|'; //     or\n      reg += '(\\\\w{3})'; // 13  MMM\n      reg += ')'; //     ) end day or month\n\n      reg += '([-/.\\\\s])'; // 14  - or . or \\s\n\n      reg += '('; // 15  ( day or month\n      reg += '(\\\\d{1,2})'; // 12  d or M or dd or MM\n      reg += '|'; //     or\n      reg += '(\\\\w{3})'; // 17  MMM\n      reg += ')'; //     ) end day or month\n\n      reg += '([-/.\\\\s])'; // 18  - or . or \\s\n      reg += '(\\\\d{4})'; // 19   yyyy\n      reg += ')'; //     ) end d[d]-MM[M]-yyyy or MM[M]-d[d]-yyyy\n\n      reg += ')'; //     ) end date\n\n      reg += '([T\\\\s])?'; // 20  T or space\n\n      reg += '([0-2]\\\\d)'; // 21  HH 0-2 and 0-9\n      reg += '([:.])'; // 22  :.\n      reg += '([0-5]\\\\d)'; // 23  mm  0-5 and 0-9\n      reg += '('; // 24  ( optional secs\n      reg += '([:.])'; // 25  :.\n      reg += '([0-5]\\\\d)'; // 26  ss  0-5 and 0-9\n      reg += ')?'; //     ) end optional secs\n      reg += '('; // 27  ( optional millisecs\n      reg += '([:.])'; // 28  :.\n      reg += '(\\\\d{3})'; // 29  3 * 0-9\n      reg += ')?'; //     ) end optional millisecs\n      reg += '('; // 30  ( optional timezone matches\n      reg += '([+-]\\\\d{2}[:.]\\\\d{2}[:.]\\\\d{2})'; // 31  +- 0-9 0-9 :. 0-9 0-9 :. 0-9 0-9 e.g. +00:00:00\n      reg += '|'; //     or\n      reg += '([+-]\\\\d{2}[:.]\\\\d{2})'; // 32  +- 0-9 0-9 :. 0-9 0-9 e.g. +00:00\n      reg += '|'; //     or\n      reg += '([+-]\\\\d{6})'; // 33  +- 6 * 0-9 e.g. +000000\n      reg += '|'; //     or\n      reg += '([+-]\\\\d{4})'; // 34  +- 4 * 0-9 e.g. +0000\n      reg += '|'; //     or\n      reg += '(Z)'; // 35  Z\n      reg += '|'; //     or\n      reg += '([+-]\\\\d{2})'; // 36  +- 0-9 0-9 e.g. +00\n      reg += '|'; //     or\n      reg += '('; // 37  ( string timezone\n      reg += '(\\\\s)'; // 38  optional space\n      reg += '(\\\\w{1,4})'; // 39  1-4 letters e.g UTC\n      reg += ')'; //     ) end string timezone\n      reg += ')?'; //     ) end optional timezone\n\n      console.log('guessTimeFormat: time format regex: ' + reg);\n\n      match = time.match(new RegExp(reg));\n      // console.log(match);\n      if (match) {\n        // add the standard data and time\n        if (match[2] !== undefined) {\n          // match yyyy-[MM MMM]-dd\n          format += 'yyyy';\n          format += match[4];\n          if (match[6] !== undefined) {\n            format += 'MM';\n          } else if (match[7] !== undefined) {\n            format += 'MMM';\n          }\n          format += match[8];\n          format += 'dd';\n        } else if (match[10] !== undefined) {\n          // match dd-MM[M]-yyyy or MM[M]-dd-yyyy\n\n          if (match[13] !== undefined) {\n            // found a word as the first part\n            // e.g., Jan 01 2000\n            format += 'MMM';\n            format += match[14];\n            format += 'dd';\n          } else if (match[17] !== undefined) {\n            // found a word as the second part\n            // e.g., 01 Jan 2000\n            format += 'dd';\n            format += match[14];\n            format += 'MMM';\n          } else {\n            // check to see if the first number is greater than 12\n            // e.g., 24/03/1981\n            // this is a guess, but is only thing we can do\n            // with one line from the data set\n            if (match[12] !== undefined && +match[12] > 12) {\n              format += 'dd';\n              format += match[14];\n              format += 'MM';\n            } else {\n              // default to US format.\n              format += 'MM';\n              format += match[14];\n              format += 'dd';\n            }\n          }\n\n          format += match[18];\n          format += 'yyyy';\n        }\n\n        // optional T or space splitter\n        // wrap T in single quotes\n        format += match[20] === 'T' ? '\\'' + match[20] + '\\'' : match[20];\n        format += 'HH';\n        format += match[22];\n        format += 'mm';\n\n        // add optional secs\n        if (match[24] !== undefined) {\n          format += match[25];\n          format += 'ss';\n        }\n\n        // add optional millisecs\n        if (match[27] !== undefined) {\n          // .000\n          format += match[28];\n          format += 'SSS';\n        }\n\n        // add optional time zone\n        if (match[31] !== undefined) {\n          // +00:00:00\n          format += 'XXXXX';\n        } else if (match[32] !== undefined) {\n          // +00:00\n          format += 'XXX';\n        } else if (match[33] !== undefined) {\n          // +000000\n          format += 'XXXX';\n        } else if (match[34] !== undefined) {\n          // +0000\n          format += 'Z';\n        } else if (match[35] !== undefined || match[36] !== undefined) {\n          // Z or +00\n          format += 'X';\n        } else if (match[37] !== undefined) {\n          // UTC\n          if (match[38] !== undefined) {\n            // add optional space char\n            format += match[38];\n          }\n          // add time zone name, up to 4 chars\n          for (var i = 0; i < match[39].length; i++) {\n            format += 'z';\n          }\n        }\n        matched = true;\n      }\n    }\n  } else {\n    // time field is a number, so probably epoch or epoch_ms\n    if (time > 10000000000) {\n      // probably milliseconds\n      format = 'epoch_ms';\n    } else {\n      // probably seconds\n      format = 'epoch';\n    }\n    matched = true;\n  }\n\n  if (matched) {\n    console.log('guessTimeFormat: guessed time format: ', format);\n  } else {\n    console.log('guessTimeFormat: time format could not be guessed from: ' + time);\n  }\n\n  return format;\n}\n\n// add commas to large numbers\n// Number.toLocaleString is not supported on safari\nfunction toLocaleString(x) {\n  var result = x;\n  if (x && typeof x === 'number') {\n    var parts = x.toString().split('.');\n    parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n    result = parts.join('.');\n  }\n  return result;\n}\n\n// escape html characters\nfunction mlEscape(str) {\n  var entityMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    '\\'': '&#39;',\n    '/': '&#x2F;'\n  };\n  return String(str).replace(/[&<>\"'\\/]/g, function (s) {\n    return entityMap[s];\n  });\n}\n\n// Escapes reserved characters for use in Elasticsearch query terms.\nfunction escapeForElasticsearchQuery(str) {\n  // Escape with a leading backslash any of the characters that\n  // Elastic document may cause a syntax error when used in queries:\n  // + - = && || > < ! ( ) { } [ ] ^ \" ~ * ? : \\ /\n  // https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-query-string-query.html#_reserved_characters\n  return String(str).replace(/[-[\\]{}()+!<>=?:\\/\\\\^\"~*&|\\s]/g, '\\\\$&');\n}\n\n// returns whether the supplied String represents a web URL\n// i.e. whether it starts with http:// or https://\nfunction isWebUrl(str) {\n  var absoluteUrl = (0, _relative_to_absolute.relativeToAbsolute)(str);\n  return absoluteUrl.startsWith('http://') || absoluteUrl.startsWith('https://');\n}\n\nfunction calculateTextWidth(txt, isNumber, elementSelection) {\n  txt = isNumber ? _d2.default.format(',')(txt) : txt;\n  var svg = elementSelection;\n  var $el = void 0;\n  if (elementSelection === undefined) {\n    // Create a temporary selection to append the label to.\n    // Note styling of font will be inherited from CSS of page.\n    var $body = _d2.default.select('body');\n    $el = $body.append('div');\n    svg = $el.append('svg');\n  }\n\n  var tempLabelText = svg.append('g').attr('class', 'temp-axis-label tick').selectAll('text.temp.axis').data('a').enter().append('text').text(txt);\n  var width = tempLabelText[0][0].getBBox().width;\n\n  _d2.default.select('.temp-axis-label').remove();\n  if ($el !== undefined) {\n    $el.remove();\n  }\n  return Math.ceil(width);\n}",null]}