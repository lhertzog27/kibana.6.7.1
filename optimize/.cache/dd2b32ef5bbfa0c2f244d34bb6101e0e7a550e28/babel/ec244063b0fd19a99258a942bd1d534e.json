{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/public/components/workpad_page/event_handlers.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/public/components/workpad_page/event_handlers.js","mtime":1567631711929},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nvar ancestorElement = function ancestorElement(element) {\n  if (!element) {\n    return element;\n  }\n  // IE11 has no classList on SVG elements, but we're not interested in SVG elements\n  do {\n    if (element.classList && element.classList.contains('canvasPage')) {\n      return element;\n    }\n  } while (element = element.parentElement || element.parentNode); // no IE11 SVG parentElement\n};\n\nvar localMousePosition = function localMousePosition(box, clientX, clientY) {\n  return {\n    x: clientX - box.left,\n    y: clientY - box.top\n  };\n};\n\nvar _resetHandler = function _resetHandler() {\n  window.onmousemove = null;\n  window.onmouseup = null;\n};\n\nvar setupHandler = function setupHandler(commit, target, initialCallback, initialClientX, initialClientY) {\n  // Ancestor has to be identified on setup, rather than 1st interaction, otherwise events may be triggered on\n  // DOM elements that had been removed: kibana-canvas github issue #1093\n  var canvasPage = ancestorElement(target);\n  if (!canvasPage) {\n    return;\n  }\n  var canvasOrigin = canvasPage.getBoundingClientRect();\n  window.onmousemove = function (_ref) {\n    var target = _ref.target,\n        buttons = _ref.buttons,\n        clientX = _ref.clientX,\n        clientY = _ref.clientY,\n        altKey = _ref.altKey,\n        metaKey = _ref.metaKey,\n        shiftKey = _ref.shiftKey,\n        ctrlKey = _ref.ctrlKey;\n\n    var _localMousePosition = localMousePosition(canvasOrigin, clientX, clientY),\n        x = _localMousePosition.x,\n        y = _localMousePosition.y;\n    // only commits the cursor position if the target is a nested element of canvasPage\n    // or if left button is being held down (i.e. an element is being dragged)\n\n\n    if (buttons === 1 || ancestorElement(target)) {\n      commit('cursorPosition', { x: x, y: y, altKey: altKey, metaKey: metaKey, shiftKey: shiftKey, ctrlKey: ctrlKey });\n    } else {\n      // clears cursorPosition\n      commit('cursorPosition', {});\n    }\n  };\n  window.onmouseup = function (e) {\n    e.stopPropagation();\n    var clientX = e.clientX,\n        clientY = e.clientY,\n        altKey = e.altKey,\n        metaKey = e.metaKey,\n        shiftKey = e.shiftKey,\n        ctrlKey = e.ctrlKey;\n\n    var _localMousePosition2 = localMousePosition(canvasOrigin, clientX, clientY),\n        x = _localMousePosition2.x,\n        y = _localMousePosition2.y;\n\n    commit('mouseEvent', { event: 'mouseUp', x: x, y: y, altKey: altKey, metaKey: metaKey, shiftKey: shiftKey, ctrlKey: ctrlKey });\n    _resetHandler();\n  };\n  if (typeof initialCallback === 'function' && !isNaN(initialClientX) && !isNaN(initialClientY)) {\n    var _localMousePosition3 = localMousePosition(canvasOrigin, initialClientX, initialClientY),\n        x = _localMousePosition3.x,\n        y = _localMousePosition3.y;\n\n    initialCallback(x, y);\n  }\n};\n\nvar handleMouseMove = function handleMouseMove(commit, _ref2, isEditable) {\n  var target = _ref2.target,\n      clientX = _ref2.clientX,\n      clientY = _ref2.clientY,\n      altKey = _ref2.altKey,\n      metaKey = _ref2.metaKey,\n      shiftKey = _ref2.shiftKey,\n      ctrlKey = _ref2.ctrlKey;\n\n  // mouse move must be handled even before an initial click\n  if (!window.onmousemove && isEditable) {\n    setupHandler(commit, target, function (x, y) {\n      return commit('cursorPosition', { x: x, y: y, altKey: altKey, metaKey: metaKey, shiftKey: shiftKey, ctrlKey: ctrlKey });\n    }, clientX, clientY);\n  }\n};\n\nvar handleWheel = function handleWheel(commit, _ref3, isEditable) {\n  var target = _ref3.target,\n      clientX = _ref3.clientX,\n      clientY = _ref3.clientY,\n      altKey = _ref3.altKey,\n      metaKey = _ref3.metaKey,\n      shiftKey = _ref3.shiftKey,\n      ctrlKey = _ref3.ctrlKey;\n\n  // new mouse position must be registered when page scrolls\n  if (isEditable) {\n    setupHandler(commit, target, function (x, y) {\n      return commit('cursorPosition', { x: x, y: y, altKey: altKey, metaKey: metaKey, shiftKey: shiftKey, ctrlKey: ctrlKey });\n    }, clientX, clientY);\n  }\n};\n\nvar handleMouseDown = function handleMouseDown(commit, e, isEditable) {\n  e.stopPropagation();\n  var target = e.target,\n      clientX = e.clientX,\n      clientY = e.clientY,\n      buttons = e.buttons,\n      altKey = e.altKey,\n      metaKey = e.metaKey,\n      shiftKey = e.shiftKey,\n      ctrlKey = e.ctrlKey;\n\n  if (buttons !== 1 || !isEditable) {\n    _resetHandler();\n    return; // left-click and edit mode only\n  }\n  var ancestor = ancestorElement(target);\n  if (!ancestor) {\n    return;\n  }\n  setupHandler(commit, ancestor, function (x, y) {\n    return commit('mouseEvent', { event: 'mouseDown', x: x, y: y, altKey: altKey, metaKey: metaKey, shiftKey: shiftKey, ctrlKey: ctrlKey });\n  }, clientX, clientY);\n};\n\nvar eventHandlers = exports.eventHandlers = {\n  onMouseDown: function onMouseDown(props) {\n    return function (e) {\n      return handleMouseDown(props.commit, e, props.isEditable);\n    };\n  },\n  onMouseMove: function onMouseMove(props) {\n    return function (e) {\n      return handleMouseMove(props.commit, e, props.isEditable);\n    };\n  },\n  onKeyDown: function onKeyDown(props) {\n    return function () {\n      return props.commit('keyboardEvent');\n    };\n  }, // dummy event\n  onWheel: function onWheel(props) {\n    return function (e) {\n      return handleWheel(props.commit, e, props.isEditable);\n    };\n  },\n  resetHandler: function resetHandler() {\n    return function () {\n      return _resetHandler();\n    };\n  }\n};",null]}