{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/index_management/public/store/selectors/index.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/index_management/public/store/selectors/index.js","mtime":1567631711974},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getSortField = exports.isSortAscending = exports.showSystemIndices = exports.getFilter = exports.getCurrentPage = exports.getHasPreviousPage = exports.getHasNextPage = exports.getIndexNamesForCurrentPage = exports.getPageOfIndices = exports.getPager = exports.getTotalItems = exports.getIndexStatusByIndexName = exports.getAllIds = exports.getTableState = exports.getRowStatuses = exports.getFilteredIds = exports.getIndexByIndexName = exports.getIndicesByName = exports.getIndicesAsArray = exports.indicesLoading = exports.getIndices = exports.getDetailPanelIndexName = exports.isDetailPanelOpen = exports.getDetailPanelType = exports.getDetailPanelError = exports.getDetailPanelData = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /*\n                                                                                                                                                                                                                                                                   * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                   * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                   * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                   */\n\n\nvar _eui = require('@elastic/eui');\n\nvar _reselect = require('reselect');\n\nvar _index_status_labels = require('../../lib/index_status_labels');\n\nvar _services = require('../../services');\n\nvar _index_management_extensions = require('../../index_management_extensions');\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar getDetailPanelData = exports.getDetailPanelData = function getDetailPanelData(state) {\n  return state.detailPanel.data;\n};\nvar getDetailPanelError = exports.getDetailPanelError = function getDetailPanelError(state) {\n  return state.detailPanel.error;\n};\nvar getDetailPanelType = exports.getDetailPanelType = function getDetailPanelType(state) {\n  return state.detailPanel.panelType;\n};\nvar isDetailPanelOpen = exports.isDetailPanelOpen = function isDetailPanelOpen(state) {\n  return !!getDetailPanelType(state);\n};\nvar getDetailPanelIndexName = exports.getDetailPanelIndexName = function getDetailPanelIndexName(state) {\n  return state.detailPanel.indexName;\n};\nvar getIndices = exports.getIndices = function getIndices(state) {\n  return state.indices.byId;\n};\nvar indicesLoading = exports.indicesLoading = function indicesLoading(state) {\n  return state.indices.loading;\n};\nvar getIndicesAsArray = exports.getIndicesAsArray = function getIndicesAsArray(state) {\n  return Object.values(state.indices.byId);\n};\nvar getIndicesByName = exports.getIndicesByName = function getIndicesByName(state, indexNames) {\n  var indices = getIndices(state);\n  return indexNames.map(function (indexName) {\n    return indices[indexName];\n  });\n};\nvar getIndexByIndexName = exports.getIndexByIndexName = function getIndexByIndexName(state, name) {\n  return getIndices(state)[name];\n};\nvar getFilteredIds = exports.getFilteredIds = function getFilteredIds(state) {\n  return state.indices.filteredIds;\n};\nvar getRowStatuses = exports.getRowStatuses = function getRowStatuses(state) {\n  return state.rowStatus;\n};\nvar getTableState = exports.getTableState = function getTableState(state) {\n  return state.tableState;\n};\nvar getAllIds = exports.getAllIds = function getAllIds(state) {\n  return state.indices.allIds;\n};\nvar getIndexStatusByIndexName = exports.getIndexStatusByIndexName = function getIndexStatusByIndexName(state, indexName) {\n  var indices = getIndices(state);\n\n  var _ref = indices[indexName] || {},\n      status = _ref.status;\n\n  return status;\n};\nvar defaultFilterFields = ['name', 'uuid'];\n\nvar filterByToggles = function filterByToggles(indices, toggleNameToVisibleMap) {\n  var togglesByName = (0, _index_management_extensions.getToggleExtensions)().reduce(function (byName, toggle) {\n    return _extends({}, byName, _defineProperty({}, toggle.name, toggle));\n  }, {});\n\n  var toggleNames = Object.keys(togglesByName);\n  if (!toggleNames.length) {\n    return indices;\n  }\n  // An index is visible if ANY applicable toggle is visible.\n  return indices.filter(function (index) {\n    return toggleNames.some(function (toggleName) {\n      if (!togglesByName[toggleName].matchIndex(index)) {\n        return true;\n      }\n\n      var isVisible = toggleNameToVisibleMap[toggleName] === true;\n\n      return isVisible;\n    });\n  });\n};\nvar getFilteredIndices = (0, _reselect.createSelector)(getIndices, getAllIds, getTableState, function (indices, allIds, tableState) {\n  var indexArray = allIds.map(function (indexName) {\n    return indices[indexName];\n  });\n  indexArray = filterByToggles(indexArray, tableState.toggleNameToVisibleMap);\n  var systemFilteredIndexes = tableState.showSystemIndices ? indexArray : indexArray.filter(function (index) {\n    return !(index.name + '').startsWith('.');\n  });\n  var filter = tableState.filter || _eui.EuiSearchBar.Query.MATCH_ALL;\n  return _eui.EuiSearchBar.Query.execute(filter, systemFilteredIndexes, defaultFilterFields);\n});\nvar getTotalItems = exports.getTotalItems = (0, _reselect.createSelector)(getFilteredIndices, function (filteredIndices) {\n  return Object.keys(filteredIndices).length;\n});\n\nvar getPager = exports.getPager = (0, _reselect.createSelector)(getTableState, getTotalItems, function (_ref2, totalItems) {\n  var currentPage = _ref2.currentPage,\n      pageSize = _ref2.pageSize;\n\n  return new _eui.Pager(totalItems, pageSize, currentPage);\n});\nvar getPageOfIndices = exports.getPageOfIndices = (0, _reselect.createSelector)(getFilteredIndices, getTableState, getRowStatuses, getPager, function (filteredIndices, tableState, rowStatuses, pager) {\n  var sortedIndexes = (0, _services.sortTable)(filteredIndices, tableState.sortField, tableState.isSortAscending);\n  var firstItemIndex = pager.firstItemIndex,\n      lastItemIndex = pager.lastItemIndex;\n\n  var pagedIndexes = sortedIndexes.slice(firstItemIndex, lastItemIndex + 1);\n  return pagedIndexes.map(function (index) {\n    var status = _index_status_labels.indexStatusLabels[rowStatuses[index.name]] || // user friendly version of row status\n    rowStatuses[index.name] || // row status\n    _index_status_labels.indexStatusLabels[index.status] || // user friendly version of index status\n    index.status; // index status\n    return _extends({}, index, {\n      status: status\n    });\n  });\n});\n\nvar getIndexNamesForCurrentPage = exports.getIndexNamesForCurrentPage = (0, _reselect.createSelector)(getPageOfIndices, function (pageOfIndices) {\n  return pageOfIndices.map(function (index) {\n    return index.name;\n  });\n});\n\nvar getHasNextPage = exports.getHasNextPage = (0, _reselect.createSelector)(getPager, function (pager) {\n  return pager.hasNextPage;\n});\n\nvar getHasPreviousPage = exports.getHasPreviousPage = (0, _reselect.createSelector)(getPager, function (pager) {\n  return pager.hasPreviousPage;\n});\n\nvar getCurrentPage = exports.getCurrentPage = (0, _reselect.createSelector)(getPager, function (pager) {\n  return pager.currentPage;\n});\n\nvar getFilter = exports.getFilter = (0, _reselect.createSelector)(getTableState, function (_ref3) {\n  var filter = _ref3.filter;\n  return filter;\n});\n\nvar showSystemIndices = exports.showSystemIndices = (0, _reselect.createSelector)(getTableState, function (_ref4) {\n  var showSystemIndices = _ref4.showSystemIndices;\n  return showSystemIndices;\n});\n\nvar isSortAscending = exports.isSortAscending = (0, _reselect.createSelector)(getTableState, function (_ref5) {\n  var isSortAscending = _ref5.isSortAscending;\n  return isSortAscending;\n});\n\nvar getSortField = exports.getSortField = (0, _reselect.createSelector)(getTableState, function (_ref6) {\n  var sortField = _ref6.sortField;\n  return sortField;\n});",null]}