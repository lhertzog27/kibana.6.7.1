{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/maps/public/meta.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/maps/public/meta.js","mtime":1567631712017},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getKibanaTileMap = exports.getKibanaRegionList = exports.getEmsTMSServices = exports.getEmsVectorFilesMeta = exports.getDataSources = undefined;\n\nvar getDataSources = exports.getDataSources = function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n    var _this = this;\n\n    return regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!meta) {\n              _context2.next = 2;\n              break;\n            }\n\n            return _context2.abrupt('return', meta);\n\n          case 2:\n            if (!loadingMetaPromise) {\n              _context2.next = 4;\n              break;\n            }\n\n            return _context2.abrupt('return', loadingMetaPromise);\n\n          case 4:\n\n            loadingMetaPromise = new Promise(function () {\n              var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(resolve, reject) {\n                var response, metaJson;\n                return regeneratorRuntime.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        _context.prev = 0;\n                        _context.next = 3;\n                        return fetch(GIS_API_RELATIVE + '/meta');\n\n                      case 3:\n                        response = _context.sent;\n                        _context.next = 6;\n                        return response.json();\n\n                      case 6:\n                        metaJson = _context.sent;\n\n                        isLoaded = true;\n                        meta = metaJson.data_sources;\n                        resolve(meta);\n                        _context.next = 15;\n                        break;\n\n                      case 12:\n                        _context.prev = 12;\n                        _context.t0 = _context['catch'](0);\n\n                        reject(_context.t0);\n\n                      case 15:\n                      case 'end':\n                        return _context.stop();\n                    }\n                  }\n                }, _callee, _this, [[0, 12]]);\n              }));\n\n              return function (_x, _x2) {\n                return _ref2.apply(this, arguments);\n              };\n            }());\n            return _context2.abrupt('return', loadingMetaPromise);\n\n          case 6:\n          case 'end':\n            return _context2.stop();\n        }\n      }\n    }, _callee2, this);\n  }));\n\n  return function getDataSources() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\n/**\n * Should only call this after verifying `isMetadataLoaded` equals true\n */\n\n\nvar getEmsVectorFilesMeta = exports.getEmsVectorFilesMeta = function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n    var dataSource;\n    return regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return getDataSources();\n\n          case 2:\n            dataSource = _context3.sent;\n            return _context3.abrupt('return', _lodash2.default.get(dataSource, 'ems.file', []));\n\n          case 4:\n          case 'end':\n            return _context3.stop();\n        }\n      }\n    }, _callee3, this);\n  }));\n\n  return function getEmsVectorFilesMeta() {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nvar getEmsTMSServices = exports.getEmsTMSServices = function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {\n    var dataSource;\n    return regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return getDataSources();\n\n          case 2:\n            dataSource = _context4.sent;\n            return _context4.abrupt('return', _lodash2.default.get(dataSource, 'ems.tms', []));\n\n          case 4:\n          case 'end':\n            return _context4.stop();\n        }\n      }\n    }, _callee4, this);\n  }));\n\n  return function getEmsTMSServices() {\n    return _ref4.apply(this, arguments);\n  };\n}();\n\nvar getKibanaRegionList = exports.getKibanaRegionList = function () {\n  var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {\n    var dataSource;\n    return regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.next = 2;\n            return getDataSources();\n\n          case 2:\n            dataSource = _context5.sent;\n            return _context5.abrupt('return', _lodash2.default.get(dataSource, 'kibana.regionmap', []));\n\n          case 4:\n          case 'end':\n            return _context5.stop();\n        }\n      }\n    }, _callee5, this);\n  }));\n\n  return function getKibanaRegionList() {\n    return _ref5.apply(this, arguments);\n  };\n}();\n\nvar getKibanaTileMap = exports.getKibanaTileMap = function () {\n  var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {\n    var dataSource;\n    return regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _context6.next = 2;\n            return getDataSources();\n\n          case 2:\n            dataSource = _context6.sent;\n            return _context6.abrupt('return', _lodash2.default.get(dataSource, 'kibana.tilemap', {}));\n\n          case 4:\n          case 'end':\n            return _context6.stop();\n        }\n      }\n    }, _callee6, this);\n  }));\n\n  return function getKibanaTileMap() {\n    return _ref6.apply(this, arguments);\n  };\n}();\n\nexports.getDataSourcesSync = getDataSourcesSync;\nexports.isMetaDataLoaded = isMetaDataLoaded;\n\nvar _constants = require('../common/constants');\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            */\n\nvar GIS_API_RELATIVE = '../' + _constants.GIS_API_PATH;\n\nvar meta = null;\nvar loadingMetaPromise = null;\nvar isLoaded = false;\nfunction getDataSourcesSync() {\n  return meta;\n}\n\nfunction isMetaDataLoaded() {\n  return isLoaded;\n}",null]}