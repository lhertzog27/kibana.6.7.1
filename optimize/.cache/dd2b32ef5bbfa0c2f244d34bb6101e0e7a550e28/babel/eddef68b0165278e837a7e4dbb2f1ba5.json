{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/public/expression_types/arg_types/font.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/public/expression_types/arg_types/font.js","mtime":1567631711930},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.font = exports.FontArgInput = undefined;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _lodash = require('lodash');\n\nvar _fonts = require('../../../common/lib/fonts');\n\nvar _template_from_react_component = require('../../lib/template_from_react_component');\n\nvar _text_style_picker = require('../../components/text_style_picker');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nvar FontArgInput = exports.FontArgInput = function FontArgInput(props) {\n  var onValueChange = props.onValueChange,\n      argValue = props.argValue,\n      workpad = props.workpad;\n\n  var chain = (0, _lodash.get)(argValue, 'chain.0', {});\n  var chainArgs = (0, _lodash.get)(chain, 'arguments', {});\n\n  // TODO: Validate input\n\n  var spec = (0, _lodash.mapValues)(chainArgs, '[0]');\n\n  function handleChange(newSpec) {\n    var newValue = (0, _lodash.set)(argValue, ['chain', 0, 'arguments'], (0, _lodash.mapValues)(newSpec, function (v) {\n      return [v];\n    }));\n    return onValueChange(newValue);\n  }\n\n  return _react2.default.createElement(_text_style_picker.TextStylePicker, {\n    family: spec.family,\n    color: spec.color,\n    size: spec.size,\n    align: spec.align,\n    weight: spec.weight,\n    underline: spec.underline || false,\n    italic: spec.italic || false,\n    onChange: handleChange,\n    colors: workpad.colors\n  });\n};\n\nFontArgInput.propTypes = {\n  onValueChange: _propTypes2.default.func.isRequired,\n  argValue: _propTypes2.default.any.isRequired,\n  typeInstance: _propTypes2.default.object,\n  workpad: _propTypes2.default.shape({\n    colors: _propTypes2.default.array.isRequired\n  }).isRequired\n};\n\nFontArgInput.displayName = 'FontArgInput';\n\nvar font = exports.font = function font() {\n  return {\n    name: 'font',\n    displayName: 'Text settings',\n    help: 'Set the font, size and color',\n    template: (0, _template_from_react_component.templateFromReactComponent)(FontArgInput),\n    default: '{font size=14 family=\"' + _fonts.openSans.value + '\" color=\"#000000\" align=left}'\n  };\n};",null]}