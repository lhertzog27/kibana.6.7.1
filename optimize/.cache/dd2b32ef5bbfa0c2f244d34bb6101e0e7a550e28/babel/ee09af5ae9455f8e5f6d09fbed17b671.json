{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/xpack_main/public/hacks/telemetry.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/xpack_main/public/hacks/telemetry.js","mtime":1567631712359},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Telemetry = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\nopyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\nor more contributor license agreements. Licensed under the Elastic License;\nyou may not use this file except in compliance with the Elastic License.\nn\nvar _constants = require('../../common/constants');\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Telemetry = exports.Telemetry = function () {\n\n  /**\n   * @param {Object} $injector - AngularJS injector service\n   * @param {Function} fetchTelemetry Method used to fetch telemetry data (expects an array response)\n   */\n  function Telemetry($injector, fetchTelemetry) {\n    _classCallCheck(this, Telemetry);\n\n    this._storage = $injector.get('localStorage');\n    this._$http = $injector.get('$http');\n    this._telemetryUrl = $injector.get('telemetryUrl');\n    this._telemetryOptedIn = $injector.get('telemetryOptedIn');\n    this._fetchTelemetry = fetchTelemetry;\n    this._sending = false;\n\n    // try to load the local storage data\n    var attributes = this._storage.get(_constants.LOCALSTORAGE_KEY) || {};\n    this._lastReport = attributes.lastReport;\n  }\n\n  _createClass(Telemetry, [{\n    key: '_saveToBrowser',\n    value: function _saveToBrowser() {\n      // we are the only code that manipulates this key, so it's safe to blindly overwrite the whole object\n      this._storage.set(_constants.LOCALSTORAGE_KEY, { lastReport: this._lastReport });\n    }\n\n    /**\n     * Determine if we are due to send a new report.\n     *\n     * @returns {Boolean} true if a new report should be sent. false otherwise.\n     */\n\n  }, {\n    key: '_checkReportStatus',\n    value: function _checkReportStatus() {\n      // check if opt-in for telemetry is enabled\n      if (this._telemetryOptedIn) {\n        // returns NaN for any malformed or unset (null/undefined) value\n        var lastReport = parseInt(this._lastReport, 10);\n        // If it's been a day since we last sent telemetry\n        if (isNaN(lastReport) || Date.now() - lastReport > _constants.REPORT_INTERVAL_MS) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    /**\n     * Check report permission and if passes, send the report\n     *\n     * @returns {Promise} Always.\n     */\n\n  }, {\n    key: '_sendIfDue',\n    value: function _sendIfDue() {\n      var _this = this;\n\n      if (this._sending || !this._checkReportStatus()) {\n        return Promise.resolve(false);\n      }\n\n      // mark that we are working so future requests are ignored until we're done\n      this._sending = true;\n\n      return this._fetchTelemetry().then(function (response) {\n        return Promise.all(response.data.map(function (cluster) {\n          var req = {\n            method: 'POST',\n            url: _this._telemetryUrl,\n            data: cluster\n          };\n          // if passing data externally, then suppress kbnXsrfToken\n          if (_this._telemetryUrl.match(/^https/)) {\n            req.kbnXsrfToken = false;\n          }\n          return _this._$http(req);\n        }));\n      })\n      // the response object is ignored because we do not check it\n      .then(function () {\n        // we sent a report, so we need to record and store the current timestamp\n        _this._lastReport = Date.now();\n        _this._saveToBrowser();\n      })\n      // no ajaxErrorHandlers for telemetry\n      .catch(function () {\n        return null;\n      }).then(function () {\n        _this._sending = false;\n        return true; // sent, but not necessarilly successfully\n      });\n    }\n\n    /**\n     * Public method\n     *\n     * @returns {Number} `window.setInterval` response to allow cancelling the interval.\n     */\n\n  }, {\n    key: 'start',\n    value: function start() {\n      var _this2 = this;\n\n      // continuously check if it's due time for a report\n      return window.setInterval(function () {\n        return _this2._sendIfDue();\n      }, 60000);\n    }\n  }]);\n\n  return Telemetry;\n}(); // end class",null]}