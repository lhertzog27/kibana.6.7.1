{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/canvas_plugin_src/uis/arguments/palette.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/canvas_plugin_src/uis/arguments/palette.js","mtime":1567631711909},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.palette = undefined;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _lodash = require('lodash');\n\nvar _common = require('@kbn/interpreter/common');\n\nvar _palette_picker = require('../../../public/components/palette_picker');\n\nvar _template_from_react_component = require('../../../public/lib/template_from_react_component');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nvar PaletteArgInput = function PaletteArgInput(_ref) {\n  var onValueChange = _ref.onValueChange,\n      argValue = _ref.argValue,\n      renderError = _ref.renderError;\n\n  // Why is this neccesary? Does the dialog really need to know what parameter it is setting?\n\n  var throwNotParsed = function throwNotParsed() {\n    return renderError();\n  };\n\n  // TODO: This is weird, its basically a reimplementation of what the interpretter would return.\n  // Probably a better way todo this, and maybe a better way to handle template stype objects in general?\n  function astToPalette(_ref2) {\n    var chain = _ref2.chain;\n\n    if (chain.length !== 1 || chain[0].function !== 'palette') {\n      throwNotParsed();\n    }\n    try {\n      var colors = chain[0].arguments._.map(function (astObj) {\n        if ((0, _common.getType)(astObj) !== 'string') {\n          throwNotParsed();\n        }\n        return astObj;\n      });\n\n      var gradient = (0, _lodash.get)(chain[0].arguments.gradient, '[0]');\n\n      return { colors: colors, gradient: gradient };\n    } catch (e) {\n      throwNotParsed();\n    }\n  }\n\n  function handleChange(palette) {\n    var astObj = {\n      type: 'expression',\n      chain: [{\n        type: 'function',\n        function: 'palette',\n        arguments: {\n          _: palette.colors,\n          gradient: [palette.gradient]\n        }\n      }]\n    };\n\n    onValueChange(astObj);\n  }\n\n  var palette = astToPalette(argValue);\n\n  return _react2.default.createElement(_palette_picker.PalettePicker, { value: palette, onChange: handleChange });\n};\n\nPaletteArgInput.propTypes = {\n  onValueChange: _propTypes2.default.func.isRequired,\n  argValue: _propTypes2.default.any.isRequired,\n  renderError: _propTypes2.default.func\n};\n\nvar palette = exports.palette = function palette() {\n  return {\n    name: 'palette',\n    displayName: 'Color palette',\n    help: 'Choose a color palette',\n    default: '{palette #882E72 #B178A6 #D6C1DE #1965B0 #5289C7 #7BAFDE #4EB265 #90C987 #CAE0AB #F7EE55 #F6C141 #F1932D #E8601C #DC050C}',\n    simpleTemplate: (0, _template_from_react_component.templateFromReactComponent)(PaletteArgInput)\n  };\n};",null]}