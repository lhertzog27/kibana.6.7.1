{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/public/state/middleware/in_flight.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/public/state/middleware/in_flight.js","mtime":1567631711935},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.inFlight = undefined;\n\nvar _modify_path = require('../../lib/modify_path');\n\nvar _resolved_args = require('../actions/resolved_args');\n\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nvar inFlight = exports.inFlight = function inFlight(_ref) {\n  var dispatch = _ref.dispatch;\n  return function (next) {\n    var pendingCache = [];\n\n    return function (action) {\n      var isLoading = action.type === _resolved_args.setLoading.toString();\n      var isSetting = action.type === _resolved_args.setValue.toString();\n\n      if (isLoading || isSetting) {\n        var cacheKey = (0, _modify_path.convert)(action.payload.path).join('/');\n\n        if (isLoading) {\n          pendingCache.push(cacheKey);\n          dispatch((0, _resolved_args.inFlightActive)());\n        } else if (isSetting) {\n          var idx = pendingCache.indexOf(cacheKey);\n          pendingCache.splice(idx, 1);\n          if (pendingCache.length === 0) {\n            dispatch((0, _resolved_args.inFlightComplete)());\n          }\n        }\n      }\n\n      // execute the action\n      next(action);\n    };\n  };\n};",null]}