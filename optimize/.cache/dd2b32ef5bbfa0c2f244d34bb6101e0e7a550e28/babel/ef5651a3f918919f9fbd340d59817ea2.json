{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/canvas_plugin_src/functions/common/date.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/canvas_plugin_src/functions/common/date.js","mtime":1567631711897},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.date = undefined;\n\nvar _moment = require('moment');\n\nvar _moment2 = _interopRequireDefault(_moment);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar getInputDate = function getInputDate(input) {\n  // return current date if no input\n  if (!input) {\n    return new Date();\n  }\n\n  // return the input\n  return input;\n}; /*\n    * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n    * or more contributor license agreements. Licensed under the Elastic License;\n    * you may not use this file except in compliance with the Elastic License.\n    */\n\nvar date = exports.date = function date() {\n  return {\n    name: 'date',\n    type: 'number',\n    context: {\n      types: ['null']\n    },\n    help: 'Returns the current time, or a time parsed from a string, as milliseconds since epoch',\n    args: {\n      value: {\n        aliases: ['_'],\n        types: ['string', 'null'],\n        help: 'An optional date string to parse into milliseconds since epoch ' + 'Can be either a valid Javascript Date input or a string to parse using the format argument. Must be an ISO 8601 string or you must provide the format'\n      },\n      format: {\n        types: ['string'],\n        help: 'The momentJS format for parsing the optional date string (See https://momentjs.com/docs/#/displaying/)'\n      }\n    },\n    fn: function fn(context, args) {\n      var date = args.value,\n          format = args.format;\n\n      var useMoment = date && format;\n      var outputDate = useMoment ? _moment2.default.utc(date, format).toDate() : new Date(getInputDate(date));\n\n      if (isNaN(outputDate.getTime())) {\n        throw new Error('Invalid date input: ' + date);\n      }\n\n      return outputDate.valueOf();\n    }\n  };\n};",null]}