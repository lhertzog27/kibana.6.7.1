{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/jobs/new_job/advanced/detector_filter_modal/detector_filter_modal_controller.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/jobs/new_job/advanced/detector_filter_modal/detector_filter_modal_controller.js","mtime":1567631712052},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _angular = require('angular');\n\nvar _angular2 = _interopRequireDefault(_angular);\n\nvar _messagebar_service = require('plugins/ml/components/messagebar/messagebar_service');\n\nvar _modules = require('ui/modules');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nvar _module = _modules.uiModules.get('apps/ml');\n\n_module.controller('MlDetectorFilterModal', function ($scope, $modalInstance, params, i18n) {\n  var msgs = _messagebar_service.mlMessageBarService;\n  msgs.clear();\n  $scope.title = i18n('xpack.ml.newJob.advanced.detectorFilterModal.addNewFilterTitle', {\n    defaultMessage: 'Add new filter'\n  });\n  $scope.detector = params.detector;\n  $scope.saveLock = false;\n  $scope.editMode = false;\n  var index = -1;\n  var add = params.add;\n  var validate = params.validate;\n\n  $scope.updateButtonLabel = i18n('xpack.ml.newJob.advanced.detectorFilterModal.updateButtonLabel', {\n    defaultMessage: 'Update'\n  });\n  $scope.addButtonLabel = i18n('xpack.ml.newJob.advanced.detectorFilterModal.addButtonLabel', {\n    defaultMessage: 'Add'\n  });\n\n  /*\n  $scope.functions = [\n    {id: 'count',                 uri: 'count.html#count'},\n    {id: 'low_count',             uri: 'count.html#count'},\n    {id: 'high_count',            uri: 'count.html#count'},\n    {id: 'non_zero_count',        uri: 'count.html#non-zero-count'},\n    {id: 'low_non_zero_count',    uri: 'count.html#non-zero-count'},\n    {id: 'high_non_zero_count',   uri: 'count.html#non-zero-count'},\n    {id: 'distinct_count',        uri: 'count.html#distinct-count'},\n    {id: 'low_distinct_count',    uri: 'count.html#distinct-count'},\n    {id: 'high_distinct_count',   uri: 'count.html#distinct-count'},\n    {id: 'rare',                  uri: 'rare.html#rare'},\n    {id: 'freq_rare',             uri: 'rare.html#freq-rare'},\n    {id: 'info_content',          uri: 'info_content.html#info-content'},\n    {id: 'low_info_content',      uri: 'info_content.html#info-content'},\n    {id: 'high_info_content',     uri: 'info_content.html#info-content'},\n    {id: 'metric',                uri: 'metric.html#metric'},\n    {id: 'mean',                  uri: 'metric.html#mean'},\n    {id: 'low_mean',              uri: 'metric.html#mean'},\n    {id: 'high_mean',             uri: 'metric.html#mean'},\n    {id: 'min',                   uri: 'metric.html#min'},\n    {id: 'max',                   uri: 'metric.html#max'},\n    {id: 'varp',                  uri: 'metric.html#varp'},\n    {id: 'low_varp',              uri: 'metric.html#varp'},\n    {id: 'high_varp',             uri: 'metric.html#varp'},\n    {id: 'sum',                   uri: 'sum.html#sum'},\n    {id: 'low_sum',               uri: 'sum.html#sum'},\n    {id: 'high_sum',              uri: 'sum.html#sum'},\n    {id: 'non_null_sum',          uri: 'sum.html#non-null-sum'},\n    {id: 'low_non_null_sum',      uri: 'sum.html#non-null-sum'},\n    {id: 'high_non_null_sum',     uri: 'sum.html#non-null-sum'},\n    {id: 'time_of_day',           uri: 'time.html#time-of-day'},\n    {id: 'time_of_week',          uri: 'time.html#time-of-week'},\n    {id: 'lat_long',              uri: 'geographic.html'},\n  ];\n  */\n  $scope.fields = [];\n  if ($scope.detector.field_name) {\n    $scope.fields.push($scope.detector.field_name);\n  }\n  if ($scope.detector.by_field_name) {\n    $scope.fields.push($scope.detector.by_field_name);\n  }\n  if ($scope.detector.over_field_name) {\n    $scope.fields.push($scope.detector.over_field_name);\n  }\n  if ($scope.detector.partition_field_name) {\n    $scope.fields.push($scope.detector.partition_field_name);\n  }\n\n  // creating a new filter\n  if (params.filter === undefined) {\n    $scope.filter = {\n      ruleAction: 'filter_results',\n      target_field_name: '',\n      target_field_value: '',\n      conditions_connective: 'or',\n      conditions: [],\n      value_list: []\n    };\n  } else {\n    // editing an existing filter\n    $scope.editMode = true;\n    $scope.filter = params.filter;\n    $scope.title = i18n('xpack.ml.newJob.advanced.detectorFilterModal.editFilterTitle', {\n      defaultMessage: 'Edit filter'\n    });\n    index = params.index;\n  }\n\n  $scope.ui = {\n    ruleAction: ['filter_results'],\n    target_field_name: '',\n    target_field_value: '',\n    conditions_connective: ['or', 'and'],\n    ruleCondition: {\n      condition_type: [{\n        label: 'actual',\n        value: 'numerical_actual'\n      }, {\n        label: 'typical',\n        value: 'numerical_typical'\n      }, {\n        label: '|actual - typical|',\n        value: 'numerical_diff_abs' /*, {\n                                     label: 'Categorical',\n                                     value: 'categorical'\n                                    }*/\n      }],\n      field_name: '',\n      field_value: '',\n      condition: {\n        operator: [{\n          label: '<',\n          value: 'lt'\n        }, {\n          label: '>',\n          value: 'gt'\n        }, {\n          label: '<=',\n          value: 'lte'\n        }, {\n          label: '>=',\n          value: 'gte'\n        }]\n      },\n      value_list: []\n    }\n  };\n\n  $scope.addNewCondition = function () {\n    $scope.filter.conditions.push({\n      condition_type: 'numerical_actual',\n      field_name: '',\n      field_value: '',\n      condition: {\n        operator: 'lt',\n        value: ''\n      }\n    });\n  };\n\n  $scope.removeCondition = function (idx) {\n    $scope.filter.conditions.splice(idx, 1);\n  };\n\n  // console.log('MlDetectorFilterModal detector:', $scope.detector)\n\n  $scope.helpLink = {};\n\n  // $scope.functionChange = function() {\n  //   const func = _.findWhere($scope.functions, {id: $scope.detector.function});\n  //   $scope.helpLink.uri = 'functions/';\n  //   $scope.helpLink.label = 'Help for ';\n\n  //   if (func) {\n  //     $scope.helpLink.uri += func.uri;\n  //     $scope.helpLink.label += func.id;\n  //   } else {\n  //     $scope.helpLink.uri += 'functions.html';\n  //     $scope.helpLink.label += 'analytical functions';\n  //   }\n  // };\n\n  // $scope.functionChange();\n\n  $scope.save = function () {\n    var filter = _angular2.default.copy($scope.filter);\n\n    if (!filter.conditions.length) {\n      return;\n    }\n    $scope.saveLock = true;\n\n    // remove any properties that aren't being used\n    if (filter.target_field_name === '') {\n      delete filter.target_field_name;\n    }\n    if (filter.target_field_value === '') {\n      delete filter.target_field_value;\n    }\n\n    _lodash2.default.each(filter.conditions, function (cond) {\n      delete cond.$$hashKey;\n      if (cond.field_name === '') {\n        delete cond.field_vname;\n      }\n      if (cond.fieldValue === '') {\n        delete cond.fieldValue;\n      }\n    });\n\n    if (filter.value_list && filter.value_list.length === 0) {\n      delete filter.value_list;\n    }\n\n    // make a local copy of the detector, add the new filter\n    // and send it off for validation.\n    // if it passes, add the filter to the real detector.\n    var dtr = _angular2.default.copy($scope.detector);\n    if (dtr.rules === undefined) {\n      dtr.rules = [];\n    }\n\n    if (index >= 0) {\n      dtr.rules[index] = filter;\n    } else {\n      dtr.rules.push(filter);\n    }\n\n    validate(dtr).then(function (resp) {\n      msgs.clear();\n      $scope.saveLock = false;\n      if (resp.success) {\n        add($scope.detector, filter, index);\n\n        // console.log('save:', filter);\n        $modalInstance.close();\n      } else {\n        msgs.error(resp.message);\n      }\n    });\n  };\n\n  $scope.cancel = function () {\n    msgs.clear();\n    $modalInstance.close();\n  };\n});",null]}