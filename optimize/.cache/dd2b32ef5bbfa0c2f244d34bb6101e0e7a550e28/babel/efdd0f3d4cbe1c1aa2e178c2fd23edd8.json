{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/public/state/selectors/workpad.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/public/state/selectors/workpad.js","mtime":1567631711936},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /*\n                                                                                                                                                                                                                                                                   * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                   * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                   * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                   */\n\nexports.getWorkpad = getWorkpad;\nexports.getFullWorkpadPersisted = getFullWorkpadPersisted;\nexports.getWorkpadPersisted = getWorkpadPersisted;\nexports.getWorkpadInfo = getWorkpadInfo;\nexports.isWriteable = isWriteable;\nexports.getSelectedPageIndex = getSelectedPageIndex;\nexports.getSelectedPage = getSelectedPage;\nexports.getPages = getPages;\nexports.getPageById = getPageById;\nexports.getPageIndexById = getPageIndexById;\nexports.getWorkpadName = getWorkpadName;\nexports.getWorkpadColors = getWorkpadColors;\nexports.getAllElements = getAllElements;\nexports.getElementCounts = getElementCounts;\nexports.getElementStats = getElementStats;\nexports.getGlobalFilterExpression = getGlobalFilterExpression;\nexports.getSelectedElementId = getSelectedElementId;\nexports.getSelectedElement = getSelectedElement;\nexports.getElements = getElements;\nexports.getNodes = getNodes;\nexports.getElementById = getElementById;\nexports.getNodeById = getNodeById;\nexports.getResolvedArgs = getResolvedArgs;\nexports.getSelectedResolvedArgs = getSelectedResolvedArgs;\nexports.getContextForIndex = getContextForIndex;\nexports.getRefreshInterval = getRefreshInterval;\n\nvar _lodash = require('lodash');\n\nvar _common = require('@kbn/interpreter/common');\n\nvar _modify_path = require('../../lib/modify_path');\n\nvar _assets = require('./assets');\n\nvar workpadRoot = 'persistent.workpad';\n\nvar appendAst = function appendAst(element) {\n  return _extends({}, element, {\n    ast: (0, _common.safeElementFromExpression)(element.expression)\n  });\n};\n\n// workpad getters\nfunction getWorkpad(state) {\n  return (0, _lodash.get)(state, workpadRoot);\n}\n\n// should we split `workpad.js` to eg. `workpad.js` (full) and `persistentWorkpadStructure.js` (persistent.workpad)?\n// how can we better disambiguate the two? now both the entire state and `persistent.workpad` are informally called workpad\nfunction getFullWorkpadPersisted(state) {\n  return _extends({}, getWorkpad(state), {\n    assets: (0, _assets.getAssets)(state)\n  });\n}\n\nfunction getWorkpadPersisted(state) {\n  return getWorkpad(state);\n}\n\nfunction getWorkpadInfo(state) {\n  return (0, _lodash.omit)(getWorkpad(state), ['pages']);\n}\n\nfunction isWriteable(state) {\n  return (0, _lodash.get)(state, (0, _modify_path.append)(workpadRoot, 'isWriteable'), true);\n}\n\n// page getters\nfunction getSelectedPageIndex(state) {\n  return (0, _lodash.get)(state, (0, _modify_path.append)(workpadRoot, 'page'));\n}\n\nfunction getSelectedPage(state) {\n  var pageIndex = getSelectedPageIndex(state);\n  var pages = getPages(state);\n  return (0, _lodash.get)(pages, '[' + pageIndex + '].id');\n}\n\nfunction getPages(state) {\n  return (0, _lodash.get)(state, (0, _modify_path.append)(workpadRoot, 'pages'), []);\n}\n\nfunction getPageById(state, id) {\n  var pages = getPages(state);\n  return pages.find(function (page) {\n    return page.id === id;\n  });\n}\n\nfunction getPageIndexById(state, id) {\n  var pages = getPages(state);\n  return pages.findIndex(function (page) {\n    return page.id === id;\n  });\n}\n\nfunction getWorkpadName(state) {\n  return (0, _lodash.get)(state, (0, _modify_path.append)(workpadRoot, 'name'));\n}\n\nfunction getWorkpadColors(state) {\n  return (0, _lodash.get)(state, (0, _modify_path.append)(workpadRoot, 'colors'));\n}\n\nfunction getAllElements(state) {\n  return getPages(state).reduce(function (elements, page) {\n    return elements.concat(page.elements);\n  }, []);\n}\n\nfunction getElementCounts(state) {\n  var resolvedArgs = (0, _lodash.get)(state, 'transient.resolvedArgs');\n  var results = {\n    ready: 0,\n    pending: 0,\n    error: 0\n  };\n\n  Object.keys(resolvedArgs).forEach(function (resolvedArg) {\n    var arg = resolvedArgs[resolvedArg];\n    var expressionRenderable = arg.expressionRenderable;\n\n\n    if (!expressionRenderable) {\n      results.pending++;\n      return;\n    }\n\n    var value = expressionRenderable.value,\n        state = expressionRenderable.state;\n\n\n    if (value && value.as === 'error') {\n      results.error++;\n    } else if (state === 'ready') {\n      results.ready++;\n    } else {\n      results.pending++;\n    }\n  });\n\n  return results;\n}\n\nfunction getElementStats(state) {\n  return (0, _lodash.get)(state, 'transient.elementStats');\n}\n\nfunction getGlobalFilterExpression(state) {\n  return getAllElements(state).map(function (el) {\n    return el.filter;\n  }).filter(function (str) {\n    return str != null && str.length;\n  }).join(' | ');\n}\n\n// element getters\nfunction getSelectedElementId(state) {\n  return (0, _lodash.get)(state, 'transient.selectedElement');\n}\n\nfunction getSelectedElement(state) {\n  return getElementById(state, getSelectedElementId(state));\n}\n\nfunction getElements(state, pageId) {\n  var withAst = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n  var id = pageId || getSelectedPage(state);\n  if (!id) {\n    return [];\n  }\n\n  var page = getPageById(state, id);\n  var elements = (0, _lodash.get)(page, 'elements');\n\n  if (!elements) {\n    return [];\n  }\n\n  // explicitly strip the ast, basically a fix for corrupted workpads\n  // due to https://github.com/elastic/kibana-canvas/issues/260\n  // TODO: remove this once it's been in the wild a bit\n  if (!withAst) {\n    return elements.map(function (el) {\n      return (0, _lodash.omit)(el, ['ast']);\n    });\n  }\n\n  return elements.map(appendAst);\n}\n\nvar augment = function augment(type) {\n  return function (n) {\n    return _extends({}, n, {\n      position: _extends({}, n.position, { type: type })\n    }, type === 'group' && { expression: 'shape fill=\"rgba(255,255,255,0)\" | render' });\n  };\n};\n\nvar getNodesOfPage = function getNodesOfPage(page) {\n  return (0, _lodash.get)(page, 'elements').map(augment('element')).concat(((0, _lodash.get)(page, 'groups') || []).map(augment('group')));\n};\n\n// todo unify or DRY up with `getElements`\nfunction getNodes(state, pageId) {\n  var withAst = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n  var id = pageId || getSelectedPage(state);\n  if (!id) {\n    return [];\n  }\n\n  var page = getPageById(state, id);\n  var elements = getNodesOfPage(page);\n\n  if (!elements) {\n    return [];\n  }\n\n  // explicitly strip the ast, basically a fix for corrupted workpads\n  // due to https://github.com/elastic/kibana-canvas/issues/260\n  // TODO: remove this once it's been in the wild a bit\n  if (!withAst) {\n    return elements.map(function (el) {\n      return (0, _lodash.omit)(el, ['ast']);\n    });\n  }\n\n  return elements.map(appendAst);\n}\n\nfunction getElementById(state, id, pageId) {\n  // do we need to pass a truthy empty array instead of `true`?\n  var element = getElements(state, pageId, []).find(function (el) {\n    return el.id === id;\n  });\n  if (element) {\n    return appendAst(element);\n  }\n}\n\nfunction getNodeById(state, id, pageId) {\n  // do we need to pass a truthy empty array instead of `true`?\n  var group = getNodes(state, pageId, []).find(function (el) {\n    return el.id === id;\n  });\n  if (group) {\n    return appendAst(group);\n  }\n}\n\nfunction getResolvedArgs(state, elementId, path) {\n  if (!elementId) {\n    return;\n  }\n  var args = (0, _lodash.get)(state, ['transient', 'resolvedArgs', elementId]);\n  if (path) {\n    return (0, _lodash.get)(args, path);\n  }\n  return args;\n}\n\nfunction getSelectedResolvedArgs(state, path) {\n  return getResolvedArgs(state, getSelectedElementId(state), path);\n}\n\nfunction getContextForIndex(state, index) {\n  return getSelectedResolvedArgs(state, ['expressionContext', index - 1]);\n}\n\nfunction getRefreshInterval(state) {\n  return (0, _lodash.get)(state, 'transient.refresh.interval', 0);\n}",null]}