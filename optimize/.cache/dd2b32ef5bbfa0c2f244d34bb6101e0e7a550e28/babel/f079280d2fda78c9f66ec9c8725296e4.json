{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/canvas_plugin_src/functions/common/image.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/canvas_plugin_src/functions/common/image.js","mtime":1567631711898},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.image = undefined;\n\nvar _resolve_dataurl = require('../../../common/lib/resolve_dataurl');\n\nvar _elastic_logo = require('../../lib/elastic_logo');\n\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nvar modes = ['contain', 'cover', 'stretch'];\n\nvar image = exports.image = function image() {\n  return {\n    name: 'image',\n    aliases: [],\n    type: 'image',\n    help: 'Display an image',\n    context: {\n      types: ['null']\n    },\n    args: {\n      dataurl: {\n        // This was accepting dataurl, but there was no facility in fn for checking type and handling a dataurl type.\n        types: ['string', 'null'],\n        help: 'The HTTP(S) URL or base64 data of an image.',\n        aliases: ['_', 'url'],\n        default: _elastic_logo.elasticLogo\n      },\n      mode: {\n        types: ['string', 'null'],\n        help: '\"contain\" will show the entire image, scaled to fit.' + '\"cover\" will fill the container with the image, cropping from the sides or bottom as needed.' + '\"stretch\" will resize the height and width of the image to 100% of the container',\n        default: 'contain',\n        options: modes\n      }\n    },\n    fn: function fn(context, _ref) {\n      var dataurl = _ref.dataurl,\n          mode = _ref.mode;\n\n      if (!modes.includes(mode)) {\n        throw '\"mode\" must be \"contain\", \"cover\", or \"stretch\"';\n      }\n\n      var modeStyle = mode === 'stretch' ? '100% 100%' : mode;\n\n      return {\n        type: 'image',\n        mode: modeStyle,\n        dataurl: (0, _resolve_dataurl.resolveWithMissingImage)(dataurl, _elastic_logo.elasticLogo)\n      };\n    }\n  };\n};",null]}