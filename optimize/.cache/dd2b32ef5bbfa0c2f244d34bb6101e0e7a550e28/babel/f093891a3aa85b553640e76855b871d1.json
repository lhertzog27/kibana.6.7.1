{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/logstash/public/sections/pipeline_edit/pipeline_edit_route.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/logstash/public/sections/pipeline_edit/pipeline_edit_route.js","mtime":1567631712008},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nvar _routes = require('ui/routes');\n\nvar _routes2 = _interopRequireDefault(_routes);\n\nvar _notify = require('ui/notify');\n\nvar _i18n = require('@kbn/i18n');\n\nvar _pipeline_edit_route = require('./pipeline_edit_route.html');\n\nvar _pipeline_edit_route2 = _interopRequireDefault(_pipeline_edit_route);\n\nrequire('plugins/logstash/services/pipeline');\n\nrequire('plugins/logstash/services/license');\n\nrequire('plugins/logstash/services/upgrade');\n\nrequire('./components/pipeline_edit');\n\nrequire('./components/upgrade_failure');\n\nvar _update_management_sections = require('plugins/logstash/lib/update_management_sections');\n\nvar _pipeline = require('plugins/logstash/models/pipeline');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } } /*\n                                                                                                                                                           * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                           * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                           * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                           */\n\n_routes2.default.when('/management/logstash/pipelines/pipeline/:id/edit').when('/management/logstash/pipelines/new-pipeline').defaults(/management\\/logstash\\/pipelines\\/(new-pipeline|pipeline\\/:id\\/edit)/, {\n  template: _pipeline_edit_route2.default,\n  controller: function PipelineEditRouteController($injector) {\n    _classCallCheck(this, PipelineEditRouteController);\n\n    var $route = $injector.get('$route');\n    this.pipeline = $route.current.locals.pipeline;\n    this.isUpgraded = $route.current.locals.isUpgraded;\n  },\n  controllerAs: 'pipelineEditRoute',\n  resolve: {\n    logstashTabs: function logstashTabs($injector) {\n      var $route = $injector.get('$route');\n      var pipelineId = $route.current.params.id;\n      (0, _update_management_sections.updateLogstashSections)(pipelineId);\n    },\n    pipeline: function pipeline($injector) {\n      var $route = $injector.get('$route');\n      var pipelineService = $injector.get('pipelineService');\n      var licenseService = $injector.get('logstashLicenseService');\n      var kbnUrl = $injector.get('kbnUrl');\n\n      var pipelineId = $route.current.params.id;\n\n      if (!pipelineId) return new _pipeline.Pipeline();\n\n      return pipelineService.loadPipeline(pipelineId).then(function (pipeline) {\n        return !!$route.current.params.clone ? pipeline.clone : pipeline;\n      }).catch(function (err) {\n        return licenseService.checkValidity().then(function () {\n          if (err.status !== 403) {\n            _notify.toastNotifications.addDanger(_i18n.i18n.translate('xpack.logstash.couldNotLoadPipelineErrorNotification', {\n              defaultMessage: 'Couldn\\'t load pipeline. Error: \\'{errStatusText}\\'.',\n              values: {\n                errStatusText: err.statusText\n              }\n            }));\n          }\n\n          kbnUrl.redirect('/management/logstash/pipelines');\n          return Promise.reject();\n        });\n      });\n    },\n    checkLicense: function checkLicense($injector) {\n      var licenseService = $injector.get('logstashLicenseService');\n      return licenseService.checkValidity();\n    },\n    isUpgraded: function isUpgraded($injector) {\n      var upgradeService = $injector.get('upgradeService');\n      return upgradeService.executeUpgrade();\n    }\n  }\n});\n\n_routes2.default.when('/management/logstash/pipelines/pipeline/:id', {\n  redirectTo: '/management/logstash/pipelines/pipeline/:id/edit'\n});",null]}