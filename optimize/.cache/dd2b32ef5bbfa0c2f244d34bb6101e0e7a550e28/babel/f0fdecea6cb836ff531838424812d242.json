{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/index_management/public/sections/index_list/components/detail_panel/detail_panel.container.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/index_management/public/sections/index_list/components/detail_panel/detail_panel.container.js","mtime":1567631711971},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DetailPanel = undefined;\n\nvar _reactRedux = require('react-redux');\n\nvar _detail_panel = require('./detail_panel');\n\nvar _selectors = require('../../../../store/selectors');\n\nvar _actions = require('../../../../store/actions');\n\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nvar mapStateToProps = function mapStateToProps(state) {\n  var indexName = (0, _selectors.getDetailPanelIndexName)(state);\n  return {\n    panelType: (0, _selectors.getDetailPanelType)(state),\n    indexName: indexName,\n    index: (0, _selectors.getIndexByIndexName)(state, indexName)\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    clearCacheIndex: function clearCacheIndex(indexName) {\n      dispatch((0, _actions.clearCacheIndices)({ indexNames: [indexName] }));\n    },\n    closeIndex: function closeIndex(indexName) {\n      dispatch((0, _actions.closeIndices)({ indexNames: [indexName] }));\n    },\n    flushIndex: function flushIndex(indexName) {\n      dispatch((0, _actions.flushIndices)({ indexNames: [indexName] }));\n    },\n    openIndex: function openIndex(indexName) {\n      dispatch((0, _actions.openIndices)({ indexNames: [indexName] }));\n    },\n    refreshIndex: function refreshIndex(indexName) {\n      dispatch((0, _actions.refreshIndices)({ indexNames: [indexName] }));\n    },\n    forcemergeIndex: function forcemergeIndex(indexName) {\n      dispatch((0, _actions.forcemergeIndices)({ indexNames: [indexName] }));\n    },\n    deleteIndex: function deleteIndex(indexName) {\n      dispatch((0, _actions.deleteIndices)({ indexNames: [indexName] }));\n    },\n    closeDetailPanel: function closeDetailPanel() {\n      return dispatch((0, _actions.closeDetailPanel)());\n    },\n    openDetailPanel: function openDetailPanel(indexName, panelType) {\n      return dispatch((0, _actions.openDetailPanel)(indexName, panelType));\n    }\n  };\n};\n\nvar DetailPanel = exports.DetailPanel = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(_detail_panel.DetailPanel);",null]}