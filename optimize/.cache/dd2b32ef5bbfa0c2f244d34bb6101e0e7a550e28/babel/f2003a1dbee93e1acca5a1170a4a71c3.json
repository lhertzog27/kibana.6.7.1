{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/jobs/components/job_timepicker_modal/job_timepicker_modal_controller.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/jobs/components/job_timepicker_modal/job_timepicker_modal_controller.js","mtime":1567631712047},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nvar _moment = require('moment');\n\nvar _moment2 = _interopRequireDefault(_moment);\n\nvar _angular = require('angular');\n\nvar _angular2 = _interopRequireDefault(_angular);\n\nvar _job_service = require('plugins/ml/services/job_service');\n\nvar _messagebar_service = require('plugins/ml/components/messagebar/messagebar_service');\n\nvar _check_license = require('plugins/ml/license/check_license');\n\nvar _modules = require('ui/modules');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nvar _module = _modules.uiModules.get('apps/ml');\n\n_module.controller('MlJobTimepickerModal', function ($scope, $rootScope, $modalInstance, params, Private, i18n) {\n  var msgs = _messagebar_service.mlMessageBarService;\n  $scope.saveLock = false;\n  var xpackFeature = Private(_check_license.xpackFeatureProvider);\n  $scope.watcherEnabled = xpackFeature.isAvailable('watcher');\n\n  var job = _angular2.default.copy(params.job);\n  $scope.jobId = job.job_id;\n\n  $scope.datafeedId = _job_service.mlJobService.getDatafeedId(job.job_id);\n\n  $scope.start = '';\n  $scope.end = '';\n\n  var lastTime = '';\n  if (job.data_counts && job.data_counts.latest_record_timestamp) {\n    var time = (0, _moment2.default)(job.data_counts.latest_record_timestamp);\n    lastTime = time.format('YYYY-MM-DD HH:mm:ss');\n  }\n\n  $scope.isNew = job.data_counts && job.data_counts.input_record_count > 0 ? false : true;\n\n  $scope.startAtBeginningOfDataLabel = i18n('xpack.ml.jobTimePickerModal.startAtBeginningOfDataLabel', {\n    defaultMessage: 'Start at beginning of data'\n  });\n  $scope.continueFromLastTime = i18n('xpack.ml.jobTimePickerModal.continueFromLastTimeLabel', {\n    defaultMessage: 'Continue from {lastTime}',\n    values: { lastTime: lastTime }\n  });\n  $scope.startNowLabel = i18n('xpack.ml.jobTimePickerModal.startNowLabel', {\n    defaultMessage: 'Start now'\n  });\n  $scope.continueFromNowLabel = i18n('xpack.ml.jobTimePickerModal.continueFromNowLabel', {\n    defaultMessage: 'Continue from now'\n  });\n  $scope.specifyStartTimeLabel = i18n('xpack.ml.jobTimePickerModal.specifyStartTimeLabel', {\n    defaultMessage: 'Specify start time'\n  });\n  $scope.continueFromSpecifiedTimeLabel = i18n('xpack.ml.jobTimePickerModal.continueFromSpecifiedTimeLabel', {\n    defaultMessage: 'Continue from specified time'\n  });\n\n  $scope.ui = {\n    lastTime: lastTime,\n    startDateText: '',\n    startRadio: '1',\n    endDateText: '',\n    endRadio: '1',\n    timepicker: {\n      from: '',\n      to: (0, _moment2.default)()\n    },\n    setStartRadio: function setStartRadio(i) {\n      $scope.ui.startRadio = i;\n    },\n    createWatch: false\n  };\n\n  function extractForm() {\n    if ($scope.ui.startRadio === '0') {\n      $scope.start = 'now';\n    } else if ($scope.ui.startRadio === '1') {\n      $scope.start = '0';\n    } else if ($scope.ui.startRadio === '2') {\n      $scope.start = (0, _moment2.default)($scope.ui.timepicker.from).unix() * 1000;\n    }\n\n    if ($scope.ui.endRadio === '0') {\n      $scope.end = undefined;\n    } else if ($scope.ui.endRadio === '1') {\n      $scope.end = (0, _moment2.default)($scope.ui.timepicker.to).unix() * 1000;\n    }\n  }\n\n  $scope.save = function () {\n    $scope.saveLock = true;\n\n    extractForm();\n\n    var doStartCalled = false;\n    // in 10s call the function to start the datafeed.\n    // if the job has already opened and doStart has already been called, nothing will happen.\n    // However, if the job is still waiting to be opened, the datafeed can be started anyway.\n    window.setTimeout(doStart, 10000);\n\n    // Attempt to open the job first.\n    // If it's already open, ignore the 409 error\n    _job_service.mlJobService.openJob($scope.jobId).then(function () {\n      doStart();\n    }).catch(function (resp) {\n      var couldNotOpenJobErrorMessage = i18n('xpack.ml.jobTimePickerModal.couldNotOpenJobErrorMessage', {\n        defaultMessage: 'Could not open {jobId}',\n        values: { jobId: $scope.jobId }\n      });\n      if (resp.statusCode === 409) {\n        doStart();\n      } else {\n        if (resp.statusCode === 500) {\n          if (doStartCalled === false) {\n            // doStart hasn't been called yet, this 500 has returned before 10s,\n            // so it's not due to a timeout\n            msgs.error(couldNotOpenJobErrorMessage, resp);\n          }\n        } else {\n          // console.log(resp);\n          msgs.error(couldNotOpenJobErrorMessage, resp);\n        }\n        $scope.saveLock = false;\n      }\n    });\n\n    // start the datafeed\n    function doStart() {\n      if (doStartCalled === false) {\n        doStartCalled = true;\n        _job_service.mlJobService.startDatafeed($scope.datafeedId, $scope.jobId, $scope.start, $scope.end).then(function () {\n          $rootScope.$broadcast('jobsUpdated');\n\n          if ($scope.ui.createWatch) {\n            $rootScope.$broadcast('openCreateWatchWindow', job);\n          }\n        }).catch(function () {\n          $scope.saveLock = false;\n        });\n      }\n    }\n\n    $modalInstance.close();\n    window.setTimeout(function () {\n      $rootScope.$broadcast('jobsUpdated');\n    }, 500);\n  };\n\n  $scope.cancel = function () {\n    $modalInstance.close();\n  };\n});",null]}