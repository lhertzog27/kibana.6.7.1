{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/monitoring/public/components/chart/get_values_for_legend.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/monitoring/public/components/chart/get_values_for_legend.js","mtime":1567631712083},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getValuesForSeriesIndex = getValuesForSeriesIndex;\nexports.getValuesByX = getValuesByX;\nexports.findIndexByX = findIndexByX;\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\n/**\n * Set the {@code legend} using the supplied data {@code index} in each series.\n *\n * @param datasets {Array} The plot's datasets.\n * @param index {number} The index of the data to show in each series.\n * @param callback {Function} The function to handle the calculation\n */\nfunction getValuesForSeriesIndex(datasets, index, callback) {\n  for (var i = 0; i < datasets.length; i++) {\n    var series = datasets[i];\n    var data = series.data;\n\n    var y = null;\n\n    if (data.length > index && data[index]) {\n      y = data[index][1];\n    }\n\n    callback(series.id, y);\n  }\n}\n\n/**\n * Set the {@code legend} by finding the closest {@code x} coordinate.\n *\n * Note: This method assumes that all series in the same plot are either equal, or they are empty. This may not be\n * true when we add swappable charts with user-selected values in each chart (if the values don't come from the same\n * documents in the same indices, then it's not guaranteed)! This assumption is currently true for all charts.\n *\n * The fix for that is to perform this check per series rather than per plot, and to perform it on the\n * {@code item.datapoint[0]} value from the plotHover event instead of its raw index value.\n *\n * @param datasets {Array} The plot's datasets.\n * @param x {number} The X coordinate of the cursor.\n * @param callback {Function} The callback to handle the calculation\n */\nfunction getValuesByX(datasets, x, callback) {\n  // Check each dataset for the closest point; first one to match wins!\n  // Note: All datasets _should_ have the same X coordinates\n  for (var i = 0; i < datasets.length; i++) {\n    var index = findIndexByX(datasets[i].data, x);\n\n    // It's possible that a given dataset is blank, so we just go onto the next one\n    if (index !== -1) {\n      getValuesForSeriesIndex(datasets, index, callback);\n      break;\n    }\n  }\n}\n\n/**\n * Find the closest index to the {@code x} coordinate within the current series {@code data}.\n *\n * @param data {Array} Series array from the plot.\n * @param x {number} The X coordinate of the cursor.\n * @returns {number} -1 if none.\n */\nfunction findIndexByX(data, x) {\n  var length = data.length;\n\n  if (length === 1) {\n    return 0;\n  } else if (length !== 0) {\n    var prev = null;\n\n    // we need to record previous, if it exists\n    if (data[0]) {\n      prev = 0;\n    }\n\n    // Nearest point (note we start at 1, not 0 because we always look backward)\n    for (var j = 1; j < length; ++j) {\n      if (data[j]) {\n        if (data[j][0] > x) {\n          var currentDistance = data[j][0] - x;\n\n          // see if the previous point was actually closer to the X position\n          if (prev !== null && currentDistance > Math.abs(x - data[prev][0])) {\n            return prev;\n          }\n          return j;\n        }\n\n        prev = j;\n      }\n    }\n  }\n\n  // note: if length is 0, then it's -1; if it's not, then the last index is returned\n  return length - 1;\n}",null]}