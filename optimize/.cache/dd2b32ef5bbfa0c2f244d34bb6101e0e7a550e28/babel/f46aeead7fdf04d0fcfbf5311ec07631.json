{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/cross_cluster_replication/public/app/components/remote_clusters_form_field.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/cross_cluster_replication/public/app/components/remote_clusters_form_field.js","mtime":1567631711951},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RemoteClustersFormField = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _react3 = require('@kbn/i18n/react');\n\nvar _eui = require('@elastic/eui');\n\nvar _routing = require('../services/routing');\n\nvar _routing2 = _interopRequireDefault(_routing);\n\nvar _constants = require('../../../common/constants');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\nvar errorMessages = {\n  noClusterFound: function noClusterFound() {\n    return _react2.default.createElement(_react3.FormattedMessage, {\n      id: 'xpack.crossClusterReplication.forms.emptyRemoteClustersCallOutDescription',\n      defaultMessage: 'You need at least one remote cluster to create a follower index.'\n    });\n  },\n  remoteClusterNotConnectedEditable: function remoteClusterNotConnectedEditable(name) {\n    return {\n      title: _react2.default.createElement(_react3.FormattedMessage, {\n        id: 'xpack.crossClusterReplication.forms.currentRemoteClusterNotConnectedCallOutTitle',\n        defaultMessage: 'Remote cluster \\'{name}\\' is not connected',\n        values: { name: name }\n      }),\n      description: _react2.default.createElement(_react3.FormattedMessage, {\n        id: 'xpack.crossClusterReplication.forms.currentRemoteClusterNotConnectedCallOutDescription',\n        defaultMessage: 'Edit the remote cluster or select a cluster that is connected.'\n      })\n    };\n  }\n};\n\nvar RemoteClustersFormField = exports.RemoteClustersFormField = (0, _react3.injectI18n)(function (_PureComponent) {\n  _inherits(_class2, _PureComponent);\n\n  function _class2() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, _class2);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = _class2.__proto__ || Object.getPrototypeOf(_class2)).call.apply(_ref, [this].concat(args))), _this), _this.errorMessages = _extends({}, errorMessages, _this.props.errorMessages), _this.onRemoteClusterChange = function (cluster) {\n      var _this$props = _this.props,\n          onChange = _this$props.onChange,\n          onError = _this$props.onError;\n\n      var _this$validateRemoteC = _this.validateRemoteCluster(cluster),\n          error = _this$validateRemoteC.error;\n\n      onChange(cluster);\n      onError(error);\n    }, _this.renderNotEditable = function () {\n      var areErrorsVisible = _this.props.areErrorsVisible;\n\n      var errorMessage = _this.renderErrorMessage();\n\n      return _react2.default.createElement(\n        _react.Fragment,\n        null,\n        _react2.default.createElement(_eui.EuiFieldText, {\n          value: _this.props.selected,\n          fullWidth: true,\n          disabled: true,\n          isInvalid: areErrorsVisible && Boolean(errorMessage)\n        }),\n        areErrorsVisible && Boolean(errorMessage) ? _this.renderValidRemoteClusterRequired() : null,\n        errorMessage\n      );\n    }, _this.renderValidRemoteClusterRequired = function () {\n      return _react2.default.createElement(\n        _eui.EuiFormErrorText,\n        null,\n        _react2.default.createElement(_react3.FormattedMessage, {\n          id: 'xpack.crossClusterReplication.autoFollowPatternForm.remoteCluster.validRemoteClusterRequired',\n          defaultMessage: 'A connected remote cluster is required.'\n        })\n      );\n    }, _this.renderDropdown = function () {\n      var _this$props2 = _this.props,\n          remoteClusters = _this$props2.remoteClusters,\n          selected = _this$props2.selected,\n          currentUrl = _this$props2.currentUrl,\n          areErrorsVisible = _this$props2.areErrorsVisible;\n\n      var hasClusters = Boolean(remoteClusters.length);\n      var remoteClustersOptions = hasClusters ? remoteClusters.map(function (_ref2) {\n        var name = _ref2.name,\n            isConnected = _ref2.isConnected;\n        return {\n          value: name,\n          text: isConnected ? name : _this.props.intl.formatMessage({\n            id: 'xpack.crossClusterReplication.forms.remoteClusterDropdownNotConnected',\n            defaultMessage: '{name} (not connected)'\n          }, { name: name }),\n          'data-test-subj': 'option-' + name\n        };\n      }) : [];\n      var errorMessage = _this.renderErrorMessage();\n\n      return _react2.default.createElement(\n        _react.Fragment,\n        null,\n        _react2.default.createElement(_eui.EuiSelect, {\n          fullWidth: true,\n          options: remoteClustersOptions,\n          value: hasClusters ? selected : '',\n          onChange: function onChange(e) {\n            _this.onRemoteClusterChange(e.target.value);\n          },\n          hasNoInitialSelection: !hasClusters,\n          isInvalid: areErrorsVisible && Boolean(errorMessage)\n        }),\n        areErrorsVisible && Boolean(errorMessage) ? _this.renderValidRemoteClusterRequired() : null,\n        errorMessage,\n        _react2.default.createElement(\n          _react.Fragment,\n          null,\n          _react2.default.createElement(_eui.EuiSpacer, { size: 's' }),\n          _react2.default.createElement(\n            'div',\n            null,\n            ' ',\n            _react2.default.createElement(\n              _eui.EuiButtonEmpty,\n              _extends({}, _routing2.default.getRouterLinkProps('/add', _constants.BASE_PATH_REMOTE_CLUSTERS, { redirect: currentUrl }, true), {\n                size: 's',\n                iconType: 'plusInCircle',\n                flush: 'left'\n              }),\n              _react2.default.createElement(_react3.FormattedMessage, {\n                id: 'xpack.crossClusterReplication.forms.addRemoteClusterButtonLabel',\n                defaultMessage: 'Add remote cluster'\n              })\n            )\n          )\n        )\n      );\n    }, _this.renderNoClusterFound = function () {\n      var _this$props3 = _this.props,\n          intl = _this$props3.intl,\n          currentUrl = _this$props3.currentUrl;\n\n      var title = intl.formatMessage({\n        id: 'xpack.crossClusterReplication.forms.emptyRemoteClustersCallOutTitle',\n        defaultMessage: 'You don\\'t have any remote clusters'\n      });\n\n      return _react2.default.createElement(\n        _react.Fragment,\n        null,\n        _react2.default.createElement(\n          _eui.EuiCallOut,\n          {\n            title: title,\n            color: 'danger',\n            iconType: 'cross'\n          },\n          _react2.default.createElement(\n            'p',\n            null,\n            _this.errorMessages.noClusterFound()\n          ),\n          _react2.default.createElement(\n            _eui.EuiButton,\n            _extends({}, _routing2.default.getRouterLinkProps('/add', _constants.BASE_PATH_REMOTE_CLUSTERS, { redirect: currentUrl }, true), {\n              iconType: 'plusInCircle',\n              color: 'danger'\n            }),\n            _react2.default.createElement(_react3.FormattedMessage, {\n              id: 'xpack.crossClusterReplication.forms.addRemoteClusterButtonLabel',\n              defaultMessage: 'Add remote cluster'\n            })\n          )\n        )\n      );\n    }, _this.renderCurrentRemoteClusterNotConnected = function (name, fatal) {\n      var _this$props4 = _this.props,\n          isEditable = _this$props4.isEditable,\n          currentUrl = _this$props4.currentUrl;\n      var _this$errorMessages = _this.errorMessages,\n          remoteClusterNotConnectedEditable = _this$errorMessages.remoteClusterNotConnectedEditable,\n          remoteClusterNotConnectedNotEditable = _this$errorMessages.remoteClusterNotConnectedNotEditable;\n\n      var _ref3 = isEditable ? remoteClusterNotConnectedEditable(name) : remoteClusterNotConnectedNotEditable(name),\n          title = _ref3.title,\n          description = _ref3.description;\n\n      return _react2.default.createElement(\n        _eui.EuiCallOut,\n        {\n          title: title,\n          color: fatal ? 'danger' : 'warning',\n          iconType: 'cross'\n        },\n        _react2.default.createElement(\n          'p',\n          null,\n          description\n        ),\n        _react2.default.createElement(\n          _eui.EuiButton,\n          _extends({}, _routing2.default.getRouterLinkProps('/edit/' + name, _constants.BASE_PATH_REMOTE_CLUSTERS, { redirect: currentUrl }, true), {\n            color: fatal ? 'danger' : 'warning'\n          }),\n          _react2.default.createElement(_react3.FormattedMessage, {\n            id: 'xpack.crossClusterReplication.forms.viewRemoteClusterButtonLabel',\n            defaultMessage: 'Edit remote cluster'\n          })\n        )\n      );\n    }, _this.renderRemoteClusterDoesNotExist = function (name) {\n      var _this$props5 = _this.props,\n          intl = _this$props5.intl,\n          currentUrl = _this$props5.currentUrl;\n\n      var title = intl.formatMessage({\n        id: 'xpack.crossClusterReplication.forms.remoteClusterNotFoundTitle',\n        defaultMessage: 'Couldn\\'t find remote cluster \\'{name}\\''\n      }, { name: name });\n\n      return _react2.default.createElement(\n        _eui.EuiCallOut,\n        {\n          title: title,\n          color: 'danger',\n          iconType: 'cross'\n        },\n        _react2.default.createElement(\n          'p',\n          null,\n          _this.errorMessages.remoteClusterDoesNotExist(name)\n        ),\n        _react2.default.createElement(\n          _eui.EuiButton,\n          _extends({}, _routing2.default.getRouterLinkProps('/add', _constants.BASE_PATH_REMOTE_CLUSTERS, { redirect: currentUrl }, true), {\n            iconType: 'plusInCircle',\n            color: 'danger'\n          }),\n          _react2.default.createElement(_react3.FormattedMessage, {\n            id: 'xpack.crossClusterReplication.forms.addRemoteClusterButtonLabel',\n            defaultMessage: 'Add remote cluster'\n          })\n        )\n      );\n    }, _this.renderErrorMessage = function () {\n      var _this$props6 = _this.props,\n          selected = _this$props6.selected,\n          remoteClusters = _this$props6.remoteClusters,\n          isEditable = _this$props6.isEditable;\n\n      var remoteCluster = remoteClusters.find(function (c) {\n        return c.name === selected;\n      });\n      var isSelectedRemoteClusterConnected = remoteCluster && remoteCluster.isConnected;\n      var error = void 0;\n\n      if (isEditable) {\n        /* Create */\n        var hasClusters = Boolean(remoteClusters.length);\n        if (hasClusters && !isSelectedRemoteClusterConnected) {\n          error = _this.renderCurrentRemoteClusterNotConnected(selected);\n        } else if (!hasClusters) {\n          error = _this.renderNoClusterFound();\n        }\n      } else {\n        /* Edit */\n        var doesExists = !!remoteCluster;\n        if (!doesExists) {\n          error = _this.renderRemoteClusterDoesNotExist(selected);\n        } else if (!isSelectedRemoteClusterConnected) {\n          error = _this.renderCurrentRemoteClusterNotConnected(selected, true);\n        }\n      }\n\n      return error ? _react2.default.createElement(\n        _react.Fragment,\n        null,\n        _react2.default.createElement(_eui.EuiSpacer, { size: 's' }),\n        error\n      ) : null;\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(_class2, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var _props = this.props,\n          selected = _props.selected,\n          onError = _props.onError;\n\n      var _validateRemoteCluste = this.validateRemoteCluster(selected),\n          error = _validateRemoteCluste.error;\n\n      onError(error);\n    }\n  }, {\n    key: 'validateRemoteCluster',\n    value: function validateRemoteCluster(clusterName) {\n      var remoteClusters = this.props.remoteClusters;\n\n      var remoteCluster = remoteClusters.find(function (c) {\n        return c.name === clusterName;\n      });\n\n      return remoteCluster && remoteCluster.isConnected ? { error: null } : { error: { message: _react2.default.createElement(_react3.FormattedMessage, {\n            id: 'xpack.crossClusterReplication.forms.invalidRemoteClusterError',\n            defaultMessage: 'Invalid remote cluster'\n          }) } };\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props2 = this.props,\n          remoteClusters = _props2.remoteClusters,\n          selected = _props2.selected,\n          isEditable = _props2.isEditable,\n          areErrorsVisible = _props2.areErrorsVisible;\n\n      var remoteCluster = remoteClusters.find(function (c) {\n        return c.name === selected;\n      });\n      var hasClusters = Boolean(remoteClusters.length);\n      var isSelectedRemoteClusterConnected = remoteCluster && remoteCluster.isConnected;\n      var isInvalid = areErrorsVisible && (!hasClusters || !isSelectedRemoteClusterConnected);\n      var field = void 0;\n\n      if (isEditable) {\n        if (hasClusters) {\n          field = this.renderDropdown();\n        } else {\n          field = this.renderErrorMessage();\n        }\n      } else {\n        field = this.renderNotEditable();\n      }\n\n      return _react2.default.createElement(\n        _eui.EuiFormRow,\n        {\n          label: _react2.default.createElement(_react3.FormattedMessage, {\n            id: 'xpack.crossClusterReplication.autoFollowPatternForm.remoteCluster.fieldClusterLabel',\n            defaultMessage: 'Remote cluster'\n          }),\n          isInvalid: isInvalid,\n          fullWidth: true\n        },\n        _react2.default.createElement(\n          _react.Fragment,\n          null,\n          field\n        )\n      );\n    }\n  }]);\n\n  return _class2;\n}(_react.PureComponent));",null]}