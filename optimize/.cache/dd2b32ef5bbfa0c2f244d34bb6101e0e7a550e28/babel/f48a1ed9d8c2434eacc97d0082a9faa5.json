{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/settings/filter_lists/edit/utils.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/settings/filter_lists/edit/utils.js","mtime":1567631712067},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isValidFilterListId = isValidFilterListId;\nexports.saveFilterList = saveFilterList;\nexports.addFilterList = addFilterList;\nexports.updateFilterList = updateFilterList;\n\nvar _i18n = require('@kbn/i18n');\n\nvar _notify = require('ui/notify');\n\nvar _job_utils = require('plugins/ml/../common/util/job_utils');\n\nvar _ml_api_service = require('plugins/ml/services/ml_api_service');\n\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nfunction isValidFilterListId(id) {\n  //  Filter List ID requires the same format as a Job ID, therefore isJobIdValid can be used\n  return id !== undefined && id.length > 0 && (0, _job_utils.isJobIdValid)(id);\n}\n\n// Saves a filter list, running an update if the supplied loadedFilterList, holding the\n// original filter list to which edits are being applied, is defined with a filter_id property.\nfunction saveFilterList(filterId, description, items, loadedFilterList) {\n  return new Promise(function (resolve, reject) {\n    if (loadedFilterList === undefined || loadedFilterList.filter_id === undefined) {\n      // Create a new filter.\n      addFilterList(filterId, description, items).then(function (newFilter) {\n        resolve(newFilter);\n      }).catch(function (error) {\n        reject(error);\n      });\n    } else {\n      // Edit to existing filter.\n      updateFilterList(loadedFilterList, description, items).then(function (updatedFilter) {\n        resolve(updatedFilter);\n      }).catch(function (error) {\n        reject(error);\n      });\n    }\n  });\n}\n\nfunction addFilterList(filterId, description, items) {\n  var filterWithIdExistsErrorMessage = _i18n.i18n.translate('xpack.ml.settings.filterLists.filterWithIdExistsErrorMessage', {\n    defaultMessage: 'A filter with id {filterId} already exists',\n    values: {\n      filterId: filterId\n    }\n  });\n\n  return new Promise(function (resolve, reject) {\n\n    // First check the filterId isn't already in use by loading the current list of filters.\n    _ml_api_service.ml.filters.filtersStats().then(function (filterLists) {\n      var savedFilterIds = filterLists.map(function (filterList) {\n        return filterList.filter_id;\n      });\n      if (savedFilterIds.indexOf(filterId) === -1) {\n        // Save the new filter.\n        _ml_api_service.ml.filters.addFilter(filterId, description, items).then(function (newFilter) {\n          resolve(newFilter);\n        }).catch(function (error) {\n          reject(error);\n        });\n      } else {\n        _notify.toastNotifications.addDanger(filterWithIdExistsErrorMessage);\n        reject(new Error(filterWithIdExistsErrorMessage));\n      }\n    }).catch(function (error) {\n      reject(error);\n    });\n  });\n}\n\nfunction updateFilterList(loadedFilterList, description, items) {\n\n  return new Promise(function (resolve, reject) {\n\n    // Get items added and removed from loaded filter.\n    var loadedItems = loadedFilterList.items;\n    var addItems = items.filter(function (item) {\n      return loadedItems.includes(item) === false;\n    });\n    var removeItems = loadedItems.filter(function (item) {\n      return items.includes(item) === false;\n    });\n\n    _ml_api_service.ml.filters.updateFilter(loadedFilterList.filter_id, description, addItems, removeItems).then(function (updatedFilter) {\n      resolve(updatedFilter);\n    }).catch(function (error) {\n      reject(error);\n    });\n  });\n}",null]}