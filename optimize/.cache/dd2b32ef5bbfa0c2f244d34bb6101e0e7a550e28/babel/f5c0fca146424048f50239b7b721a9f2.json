{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/rollup/public/index_pattern_creation/rollup_index_pattern_creation_config.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/rollup/public/index_pattern_creation/rollup_index_pattern_creation_config.js","mtime":1567631712291},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RollupIndexPatternCreationConfig = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _index_pattern_creation = require('ui/management/index_pattern_creation');\n\nvar _rollup_prompt = require('./components/rollup_prompt');\n\nvar _api = require('../services/api');\n\nvar _i18n = require('@kbn/i18n');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\nvar rollupIndexPatternTypeName = _i18n.i18n.translate('xpack.rollupJobs.editRollupIndexPattern.createIndex.defaultTypeName', { defaultMessage: 'rollup index pattern' });\n\nvar rollupIndexPatternButtonText = _i18n.i18n.translate('xpack.rollupJobs.editRollupIndexPattern.createIndex.defaultButtonText', { defaultMessage: 'Rollup index pattern' });\n\nvar rollupIndexPatternButtonDescription = _i18n.i18n.translate('xpack.rollupJobs.editRollupIndexPattern.createIndex.defaultButtonDescription', { defaultMessage: 'Perform limited aggregations against summarized data' });\n\nvar rollupIndexPatternNoMatchError = _i18n.i18n.translate('xpack.rollupJobs.editRollupIndexPattern.createIndex.noMatchError', { defaultMessage: 'Rollup index pattern error: must match one rollup index' });\n\nvar rollupIndexPatternTooManyMatchesError = _i18n.i18n.translate('xpack.rollupJobs.editRollupIndexPattern.createIndex.tooManyMatchesError', { defaultMessage: 'Rollup index pattern error: can only match one rollup index' });\n\nvar rollupIndexPatternIndexLabel = _i18n.i18n.translate('xpack.rollupJobs.editRollupIndexPattern.createIndex.indexLabel', { defaultMessage: 'Rollup' });\n\nvar RollupIndexPatternCreationConfig = exports.RollupIndexPatternCreationConfig = function (_IndexPatternCreation) {\n  _inherits(RollupIndexPatternCreationConfig, _IndexPatternCreation);\n\n  function RollupIndexPatternCreationConfig(options) {\n    _classCallCheck(this, RollupIndexPatternCreationConfig);\n\n    var _this = _possibleConstructorReturn(this, (RollupIndexPatternCreationConfig.__proto__ || Object.getPrototypeOf(RollupIndexPatternCreationConfig)).call(this, _extends({\n      type: 'rollup',\n      name: rollupIndexPatternTypeName,\n      showSystemIndices: false,\n      isBeta: true\n    }, options)));\n\n    _this.isRollupIndex = function (indexName) {\n      return _this.rollupIndices.includes(indexName);\n    };\n\n    _this.checkIndicesForErrors = function (indices) {\n      _this.rollupIndex = null;\n\n      if (!indices || !indices.length) {\n        return;\n      }\n\n      var rollupIndices = indices.filter(function (index) {\n        return _this.isRollupIndex(index.name);\n      });\n\n      if (!rollupIndices.length) {\n        return [rollupIndexPatternNoMatchError];\n      } else if (rollupIndices.length > 1) {\n        return [rollupIndexPatternTooManyMatchesError];\n      }\n\n      var rollupIndexName = rollupIndices[0].name;\n      var error = _this.rollupIndicesCapabilities[rollupIndexName].error;\n\n      if (error) {\n        var errorMessage = _i18n.i18n.translate('xpack.rollupJobs.editRollupIndexPattern.createIndex.uncaughtError', {\n          defaultMessage: 'Rollup index pattern error: {error}',\n          values: {\n            error: error\n          }\n        });\n        return [errorMessage];\n      }\n\n      _this.rollupIndex = rollupIndexName;\n    };\n\n    _this.getIndexPatternMappings = function () {\n      return _this.rollupIndex ? {\n        type: _this.type,\n        typeMeta: {\n          params: {\n            rollup_index: _this.rollupIndex\n          },\n          aggs: _this.rollupIndicesCapabilities[_this.rollupIndex].aggs\n        }\n      } : {};\n    };\n\n    _this.renderPrompt = function () {\n      return _react2.default.createElement(_rollup_prompt.RollupPrompt, null);\n    };\n\n    _this.getFetchForWildcardOptions = function () {\n      return {\n        type: _this.type,\n        params: {\n          rollup_index: _this.rollupIndex\n        }\n      };\n    };\n\n    (0, _api.setHttpClient)(_this.httpClient);\n    _this.rollupIndex = null;\n    _this.rollupJobs = [];\n    _this.rollupIndicesCapabilities = {};\n    _this.rollupIndices = [];\n    _this.settingUp = _this.setRollupIndices();\n    return _this;\n  }\n\n  _createClass(RollupIndexPatternCreationConfig, [{\n    key: 'setRollupIndices',\n    value: function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return (0, _api.getRollupIndices)();\n\n              case 3:\n                this.rollupIndicesCapabilities = _context.sent;\n\n                this.rollupIndices = Object.keys(this.rollupIndicesCapabilities);\n                _context.next = 9;\n                break;\n\n              case 7:\n                _context.prev = 7;\n                _context.t0 = _context['catch'](0);\n\n              case 9:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 7]]);\n      }));\n\n      function setRollupIndices() {\n        return _ref.apply(this, arguments);\n      }\n\n      return setRollupIndices;\n    }()\n  }, {\n    key: 'getIndexPatternCreationOption',\n    value: function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(urlHandler) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.settingUp;\n\n              case 2:\n                return _context2.abrupt('return', this.rollupIndices && this.rollupIndices.length ? {\n                  text: rollupIndexPatternButtonText,\n                  description: rollupIndexPatternButtonDescription,\n                  testSubj: 'createRollupIndexPatternButton',\n                  isBeta: this.isBeta,\n                  onClick: function onClick() {\n                    urlHandler('/management/kibana/index?type=rollup');\n                  }\n                } : null);\n\n              case 3:\n              case 'end':\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getIndexPatternCreationOption(_x) {\n        return _ref2.apply(this, arguments);\n      }\n\n      return getIndexPatternCreationOption;\n    }()\n  }, {\n    key: 'getIndexTags',\n    value: function getIndexTags(indexName) {\n      return this.isRollupIndex(indexName) ? [{\n        key: this.type,\n        name: rollupIndexPatternIndexLabel\n      }] : [];\n    }\n  }]);\n\n  return RollupIndexPatternCreationConfig;\n}(_index_pattern_creation.IndexPatternCreationConfig);\n\nRollupIndexPatternCreationConfig.key = 'rollup';",null]}