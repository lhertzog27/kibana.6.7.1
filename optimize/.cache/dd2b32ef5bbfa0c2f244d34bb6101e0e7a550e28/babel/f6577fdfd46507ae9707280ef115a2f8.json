{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/ui/public/routes/work_queue.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/routes/work_queue.js","mtime":1567631711752},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WorkQueue = WorkQueue;\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nfunction WorkQueue() {\n  var q = this;\n\n  var work = [];\n  var fullDefers = [];\n\n  q.limit = 0;\n  Object.defineProperty(q, 'length', {\n    get: function get() {\n      return work.length;\n    }\n  });\n\n  var resolve = function resolve(defers) {\n    return defers.splice(0).map(function (defer) {\n      return defer.resolve();\n    });\n  };\n\n  var checkIfFull = function checkIfFull() {\n    if (work.length >= q.limit && fullDefers.length) {\n      resolve(fullDefers);\n    }\n  };\n\n  q.resolveWhenFull = function (defer) {\n    fullDefers.push(defer);\n    checkIfFull();\n  };\n\n  q.doWork = function () {\n    var resps = resolve(work);\n    checkIfFull();\n    return resps;\n  };\n\n  q.empty = function () {\n    work.splice(0);\n    checkIfFull();\n  };\n\n  q.push = function (defer) {\n    work.push(defer);\n    checkIfFull();\n  };\n}",null]}