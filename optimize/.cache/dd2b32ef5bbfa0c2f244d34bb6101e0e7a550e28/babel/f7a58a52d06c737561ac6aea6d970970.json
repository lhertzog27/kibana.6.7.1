{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/public/components/autocomplete/autocomplete.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/public/components/autocomplete/autocomplete.js","mtime":1567631711919},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Autocomplete = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _eui = require('@elastic/eui');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\n/*disabling eslint because of these jsx-a11y errors(https://www.npmjs.com/package/eslint-plugin-jsx-a11y):\n181:7   error  Elements with the 'combobox' interactive role must be focusable                                                 jsx-a11y/interactive-supports-focus\n  187:9   error  Elements with the ARIA role \"combobox\" must have the following attributes defined: aria-controls,aria-expanded  jsx-a11y/role-has-required-aria-props\n  209:23  error  Elements with the 'option' interactive role must be focusable                                                   jsx-a11y/interactive-supports-focus\n  218:25  error  Elements with the ARIA role \"option\" must have the following attributes defined: aria-selected                  jsx-a11y/role-has-required-aria-props\n*/\n/* eslint-disable jsx-a11y/interactive-supports-focus */\n/* eslint-disable jsx-a11y/role-has-required-aria-props */\n\n/**\n * An autocomplete component. Currently this is only used for the expression editor but in theory\n * it could be extended to any autocomplete-related component. It expects these props:\n *\n * header: The header node\n * items: The list of items for autocompletion\n * onSelect: The function to invoke when an item is selected (passing in the item)\n * children: Any child nodes, which should include the text input itself\n * reference: A function that is passed the selected item which generates a reference node\n */\nvar Autocomplete = exports.Autocomplete = function (_React$Component) {\n  _inherits(Autocomplete, _React$Component);\n\n  function Autocomplete() {\n    _classCallCheck(this, Autocomplete);\n\n    var _this = _possibleConstructorReturn(this, (Autocomplete.__proto__ || Object.getPrototypeOf(Autocomplete)).call(this));\n\n    _this.onSubmit = function () {\n      var selectedIndex = _this.state.selectedIndex;\n      var _this$props = _this.props,\n          items = _this$props.items,\n          onSelect = _this$props.onSelect;\n\n      onSelect(items[selectedIndex]);\n      _this.setState({ selectedIndex: -1 });\n    };\n\n    _this.onKeyDown = function (e) {\n      var ESCAPE = _eui.keyCodes.ESCAPE,\n          TAB = _eui.keyCodes.TAB,\n          ENTER = _eui.keyCodes.ENTER,\n          UP = _eui.keyCodes.UP,\n          DOWN = _eui.keyCodes.DOWN,\n          LEFT = _eui.keyCodes.LEFT,\n          RIGHT = _eui.keyCodes.RIGHT;\n      var keyCode = e.keyCode;\n      var items = _this.props.items;\n      var _this$state = _this.state,\n          isOpen = _this$state.isOpen,\n          selectedIndex = _this$state.selectedIndex;\n\n\n      if ([ESCAPE, LEFT, RIGHT].includes(keyCode)) {\n        _this.setState({ isOpen: false });\n      }\n\n      if ([TAB, ENTER].includes(keyCode) && isOpen && selectedIndex >= 0) {\n        e.preventDefault();\n        _this.onSubmit();\n      } else if (keyCode === UP && items.length > 0 && isOpen) {\n        e.preventDefault();\n        _this.selectPrevious();\n      } else if (keyCode === DOWN && items.length > 0 && isOpen) {\n        e.preventDefault();\n        _this.selectNext();\n      } else if (e.key === 'Backspace') {\n        _this.setState({ isOpen: true });\n      } else if (!['Shift', 'Control', 'Alt', 'Meta'].includes(e.key)) {\n        _this.setState({ selectedIndex: -1 });\n      }\n    };\n\n    _this.onKeyPress = function () {\n      _this.setState({ isOpen: true });\n    };\n\n    _this.onFocus = function () {\n      _this.setState({\n        isFocused: true\n      });\n    };\n\n    _this.onBlur = function () {\n      _this.setState({\n        isFocused: false\n      });\n    };\n\n    _this.onMouseDown = function () {\n      _this.setState({\n        isOpen: false\n      });\n    };\n\n    _this.onMouseEnter = function () {\n      _this.setState({\n        isMousedOver: true\n      });\n    };\n\n    _this.onMouseLeave = function () {\n      _this.setState({ isMousedOver: false });\n    };\n\n    _this.state = {\n      isOpen: false,\n      isFocused: false,\n      isMousedOver: false,\n      selectedIndex: -1\n    };\n\n    // These are used for automatically scrolling items into view when selected\n    _this.containerRef = null;\n    _this.itemRefs = [];\n    return _this;\n  }\n\n  _createClass(Autocomplete, [{\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (this.props.items && prevProps.items !== this.props.items && this.props.items.length === 1 && this.state.selectedIndex !== 0) {\n        this.selectFirst();\n      }\n\n      if (prevState.selectedIndex !== this.state.selectedIndex) {\n        this.scrollIntoView();\n      }\n    }\n  }, {\n    key: 'selectFirst',\n    value: function selectFirst() {\n      this.setState({ selectedIndex: 0 });\n    }\n  }, {\n    key: 'isVisible',\n    value: function isVisible() {\n      var _state = this.state,\n          isOpen = _state.isOpen,\n          isFocused = _state.isFocused,\n          isMousedOver = _state.isMousedOver;\n      var _props = this.props,\n          items = _props.items,\n          reference = _props.reference;\n\n      // We have to check isMousedOver because the blur event fires before the click event, which\n      // means if we didn't keep track of isMousedOver, we wouldn't even get the click event\n\n      var visible = isOpen && (isFocused || isMousedOver);\n      var hasItems = items && items.length;\n      var hasReference = reference(this.getSelectedItem());\n\n      return visible && (hasItems || hasReference);\n    }\n  }, {\n    key: 'getSelectedItem',\n    value: function getSelectedItem() {\n      return this.props.items && this.props.items[this.state.selectedIndex];\n    }\n  }, {\n    key: 'selectPrevious',\n    value: function selectPrevious() {\n      var items = this.props.items;\n      var selectedIndex = this.state.selectedIndex;\n\n      if (selectedIndex > 0) {\n        this.setState({ selectedIndex: selectedIndex - 1 });\n      } else {\n        this.setState({ selectedIndex: items.length - 1 });\n      }\n    }\n  }, {\n    key: 'selectNext',\n    value: function selectNext() {\n      var items = this.props.items;\n      var selectedIndex = this.state.selectedIndex;\n\n      if (selectedIndex >= 0 && selectedIndex < items.length - 1) {\n        this.setState({ selectedIndex: selectedIndex + 1 });\n      } else {\n        this.setState({ selectedIndex: 0 });\n      }\n    }\n  }, {\n    key: 'scrollIntoView',\n    value: function scrollIntoView() {\n      var containerRef = this.containerRef,\n          itemRefs = this.itemRefs,\n          selectedIndex = this.state.selectedIndex;\n\n      var itemRef = itemRefs[selectedIndex];\n      if (!containerRef || !itemRef) {\n        return;\n      }\n      containerRef.scrollTop = Math.max(Math.min(containerRef.scrollTop, itemRef.offsetTop), itemRef.offsetTop + itemRef.offsetHeight - containerRef.offsetHeight);\n    }\n\n    /**\n     * Handle key down events for the menu, including selecting the previous and next items, making\n     * the item selection, closing the menu, etc.\n     */\n\n\n    /**\n     * On key press (character keys), show the menu. We don't want to willy nilly show the menu\n     * whenever ANY key down event happens (like arrow keys) cuz that would be just downright\n     * annoying.\n     */\n\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var _props2 = this.props,\n          header = _props2.header,\n          items = _props2.items,\n          reference = _props2.reference;\n\n      return _react2.default.createElement(\n        'div',\n        {\n          className: 'autocomplete',\n          onKeyDown: this.onKeyDown,\n          onKeyPress: this.onKeyPress,\n          onFocus: this.onFocus,\n          onBlur: this.onBlur,\n          role: 'combobox',\n          'aria-haspopup': 'true',\n          'aria-owns': 'autocompleteItems',\n          'aria-expanded': this.isVisible() ? 'true' : 'false'\n        },\n        this.isVisible() ? _react2.default.createElement(\n          _eui.EuiPanel,\n          {\n            paddingSize: 'none',\n            className: 'autocompletePopup',\n            onMouseEnter: this.onMouseEnter,\n            onMouseLeave: this.onMouseLeave\n          },\n          _react2.default.createElement(\n            _eui.EuiFlexGroup,\n            { gutterSize: 'none' },\n            items && items.length ? _react2.default.createElement(\n              _eui.EuiFlexItem,\n              { style: { maxWidth: 400 } },\n              _react2.default.createElement(\n                'div',\n                {\n                  className: 'autocompleteItems',\n                  ref: function ref(_ref2) {\n                    return _this2.containerRef = _ref2;\n                  },\n                  role: 'listbox'\n                },\n                header,\n                items.map(function (item, i) {\n                  return _react2.default.createElement(\n                    'div',\n                    {\n                      key: i,\n                      ref: function ref(_ref) {\n                        return _this2.itemRefs[i] = _ref;\n                      },\n                      className: 'autocompleteItem' + (_this2.state.selectedIndex === i ? ' autocompleteItem--isActive' : ''),\n                      onMouseEnter: function onMouseEnter() {\n                        return _this2.setState({ selectedIndex: i });\n                      },\n                      onClick: _this2.onSubmit,\n                      role: 'option'\n                    },\n                    item.text\n                  );\n                })\n              )\n            ) : '',\n            _react2.default.createElement(\n              _eui.EuiFlexItem,\n              null,\n              _react2.default.createElement(\n                'div',\n                { className: 'autocompleteReference' },\n                reference(this.getSelectedItem())\n              )\n            )\n          )\n        ) : '',\n        _react2.default.createElement(\n          'div',\n          { onMouseDown: this.onMouseDown },\n          this.props.children\n        )\n      );\n    }\n  }]);\n\n  return Autocomplete;\n}(_react2.default.Component);\n\nAutocomplete.propTypes = {\n  header: _propTypes2.default.node,\n  items: _propTypes2.default.array,\n  onSelect: _propTypes2.default.func,\n  children: _propTypes2.default.node,\n  reference: _propTypes2.default.func\n};",null]}