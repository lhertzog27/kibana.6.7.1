{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/public/lib/run_interpreter.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/public/lib/run_interpreter.js","mtime":1567631711934},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.runInterpreter = runInterpreter;\n\nvar _interpreter = require('plugins/interpreter/interpreter');\n\nvar _common = require('@kbn/interpreter/common');\n\nvar _notify = require('./notify');\n\n/**\n * Runs interpreter, usually in the browser\n *\n * @param {object} ast - Executable AST\n * @param {any} context - Initial context for AST execution\n * @param {object} options\n * @param {boolean} options.castToRender - try to cast to a type: render object?\n * @param {boolean} options.retryRenderCasting -\n * @returns {promise}\n */\nfunction runInterpreter(ast) {\n  var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  return (0, _interpreter.interpretAst)(ast, context).then(function (renderable) {\n    if ((0, _common.getType)(renderable) === 'render') {\n      return renderable;\n    }\n\n    if (options.castToRender) {\n      return runInterpreter((0, _common.fromExpression)('render'), renderable, {\n        castToRender: false\n      });\n    }\n\n    return new Error('Ack! I don\\'t know how to render a \\'' + (0, _common.getType)(renderable) + '\\'');\n  }).catch(function (err) {\n    _notify.notify.error(err);\n    throw err;\n  });\n} /*\n   * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n   * or more contributor license agreements. Licensed under the Elastic License;\n   * you may not use this file except in compliance with the Elastic License.\n   */",null]}