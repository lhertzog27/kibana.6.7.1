{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/watcher/public/components/threshold_watch_expression/components/threshold_watch_base/threshold_watch_base.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/watcher/public/components/threshold_watch_expression/components/threshold_watch_base/threshold_watch_base.js","mtime":1567631712339},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ThresholdWatchBaseController = undefined;\n\nvar _compat = require('ui/compat');\n\nvar _lodash = require('lodash');\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\nvar ThresholdWatchBaseController = exports.ThresholdWatchBaseController = function (_InitAfterBindingsWor) {\n  _inherits(ThresholdWatchBaseController, _InitAfterBindingsWor);\n\n  function ThresholdWatchBaseController() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, ThresholdWatchBaseController);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ThresholdWatchBaseController.__proto__ || Object.getPrototypeOf(ThresholdWatchBaseController)).call.apply(_ref, [this].concat(args))), _this), _this.checkValidity = function () {\n      if (_this.isValid()) {\n        _this.onValid(_this.itemId);\n      } else {\n        _this.onInvalid(_this.itemId);\n      }\n    }, _this.checkDirty = function () {\n      if (_this.form.$dirty) {\n        _this.onDirty(_this.itemId);\n      } else {\n        _this.onPristine(_this.itemId);\n      }\n    }, _this.resetForm = function () {\n      (0, _lodash.forEach)(_this.form, function (control) {\n        if (Boolean(control) && typeof control.$setViewValue === 'function') {\n          control.$setViewValue(undefined);\n        }\n      });\n\n      _this.form.$setPristine();\n      _this.form.$setUntouched();\n    }, _this.isValid = function () {\n      return !_this.form.$invalid;\n    }, _this.isDirty = function () {\n      return _this.form.$dirty;\n    }, _this.isValidationMessageVisible = function (fieldName, errorType) {\n      var showIfOtherErrors = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n      var showMessage = _this.form[fieldName] && (_this.form[fieldName].$touched || _this.form[fieldName].$dirty) && _this.form[fieldName].$error[errorType];\n\n      if (showMessage && !showIfOtherErrors && (0, _lodash.size)(_this.form[fieldName].$error) > 1) {\n        showMessage = false;\n      }\n\n      return showMessage;\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  return ThresholdWatchBaseController;\n}(_compat.InitAfterBindingsWorkaround);",null]}