{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/monitoring/public/components/table/table.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/monitoring/public/components/table/table.js","mtime":1567631712096},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MonitoringTable = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _lodash = require('lodash');\n\nvar _constants = require('../../../common/constants');\n\nvar _components = require('@kbn/ui-framework/components');\n\nvar _toolbar = require('./toolbar');\n\nvar _no_data = require('./no_data');\n\nvar _footer = require('./footer');\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _react3 = require('@kbn/i18n/react');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\n/*\n * State and data management for Monitoring Tables\n * To be used when all the data is loaded at once and must be paged in the browser\n * - Sort the data\n * - Show the data\n * - Allow the user to change how the data is sorted\n * - Allow the user to filter the data\n * - Allow the user to page through the data\n *\n * Guide to column configuration:\n * const columns = [\n *  {\n *    title: 'Name', // visible title string\n *    sortKey: 'metadata.name', // sorting this column sorts by the `metadata.name` field in the data\n *    secondarySortOrder: 1, // optional field, makes the column secondarily sorted by default\n *  },\n *  {\n *    title: 'Status', // visible title string\n *    sortKey: 'status', // sorting this column sorts by the `metadata.name` field in the data\n *    sortOrder: -1, // optional field, makes the column sorted by default\n *  }\n * ];\n */\nvar MonitoringTableUI = function (_React$Component) {\n  _inherits(MonitoringTableUI, _React$Component);\n\n  function MonitoringTableUI(props) {\n    _classCallCheck(this, MonitoringTableUI);\n\n    var _this = _possibleConstructorReturn(this, (MonitoringTableUI.__proto__ || Object.getPrototypeOf(MonitoringTableUI)).call(this, props));\n\n    var sortKey = props.sortKey;\n    var sortOrder = props.sortOrder;\n    if (props.sortKey === undefined || props.sortOrder === undefined) {\n      // find the col to sort by per table config\n      var defaultSortColumn = props.columns.find(function (c) {\n        return c.hasOwnProperty('sortOrder');\n      });\n      sortKey = defaultSortColumn ? defaultSortColumn.sortKey : null;\n      sortOrder = defaultSortColumn ? defaultSortColumn.sortOrder : null;\n    }\n\n    // find the secondary col to sort by per table config\n    var secondarySortColumn = props.columns.find(function (c) {\n      return c.hasOwnProperty('secondarySortOrder');\n    });\n    var secondarySortKey = secondarySortColumn ? secondarySortColumn.sortKey : null;\n    var secondarySortOrder = secondarySortColumn ? secondarySortColumn.secondarySortOrder : null;\n\n    _this.state = {\n      rows: props.rows,\n      sortKey: sortKey,\n      sortOrder: sortOrder,\n      secondarySortKey: secondarySortKey,\n      secondarySortOrder: secondarySortOrder,\n      filterText: props.filterText || '',\n      pageIndex: props.pageIndex || 1\n    };\n\n    _this.paginationOnPrevious = _this.paginationOnPrevious.bind(_this);\n    _this.paginationOnNext = _this.paginationOnNext.bind(_this);\n    _this.onFilterChange = _this.onFilterChange.bind(_this);\n    _this.dispatchTableAction = _this.dispatchTableAction.bind(_this);\n    return _this;\n  }\n\n  _createClass(MonitoringTableUI, [{\n    key: 'setFilter',\n    value: function setFilter(filterText) {\n      var _this2 = this;\n\n      this.setState(function (prevState) {\n        var newState = _extends({}, prevState, {\n          pageIndex: 1,\n          filterText: filterText\n        });\n\n        _this2.onNewState(newState);\n        return newState;\n      });\n    }\n  }, {\n    key: 'resetPaging',\n    value: function resetPaging() {\n      var _this3 = this;\n\n      this.setState(function (prevState) {\n        var newState = _extends({}, prevState, {\n          pageIndex: 1\n        });\n\n        _this3.onNewState(newState);\n        return newState;\n      });\n    }\n\n    /*\n     * This function is passed to child components, and called when something in\n     * this state needs to change\n     * @param {String} action - A constant to identify the action\n     * @param {Any} value - Payload data for the action, if any is needed\n     */\n\n  }, {\n    key: 'dispatchTableAction',\n    value: function dispatchTableAction(action, value) {\n      // handle the action\n      switch (action) {\n        case _constants.TABLE_ACTION_UPDATE_FILTER:\n          this.setFilter(value);\n          break;\n        case _constants.TABLE_ACTION_RESET_PAGING:\n          this.resetPaging();\n          break;\n        default:\n          throw new Error(this.props.intl.formatMessage({\n            id: 'xpack.monitoring.table.unknownTableActionTypeErrorMessage',\n            defaultMessage: 'Unknown table action type {action}! This shouldn\\'t happen!' }, {\n            action: action\n          }));\n      }\n    }\n\n    /*\n     * Handle an interaction in the UI by calling to the external function (from\n     * angular controller) that does something extra\n     */\n\n  }, {\n    key: 'onNewState',\n    value: function onNewState(newState) {\n      if (this.props.onNewState) {\n        this.props.onNewState(newState); // call top-level function\n      }\n    }\n  }, {\n    key: 'shouldComponentUpdate',\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      var diffRows = !(0, _lodash.isEqual)(nextProps.rows, this.props.rows);\n      var diffState = !(0, _lodash.isEqual)(nextState, this.state);\n\n      if (diffRows || diffState) {\n        return true;\n      }\n      return false;\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(_ref) {\n      var rows = _ref.rows;\n\n      // Any prop change will cause a re-render, as long as it's the `rows` prop :)\n      this.setState({ rows: rows });\n    }\n\n    /*\n     * Return true if the row matches the filter value\n     * @param {Object} row - Data object for which the table is configured to display\n     */\n\n  }, {\n    key: 'checkRowFilterMatch',\n    value: function checkRowFilterMatch(row) {\n      var values = this.props.filterFields.map(function (field) {\n        return (0, _lodash.get)(row, field);\n      }); // find the values of the filterable fields\n      return (0, _lodash.includes)(values.join(' ').toLowerCase(), this.state.filterText.toLowerCase());\n    }\n\n    /*\n     * Return a filtered set of rows that have data that match the filter text\n     * @param {Array} rows\n     */\n\n  }, {\n    key: 'getFilteredRows',\n    value: function getFilteredRows() {\n      var _this4 = this;\n\n      var rows = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n      if (!this.state.filterText) {\n        return rows; // filter is cleared, no rows are filtered out\n      }\n      return rows.filter(function (row) {\n        return _this4.checkRowFilterMatch(row);\n      });\n    }\n\n    /*\n     * Handle UI event of entering text in the Filter text input box\n     * @param {Object} event - UI event data\n     */\n\n  }, {\n    key: 'onFilterChange',\n    value: function onFilterChange(filterText) {\n      this.setFilter(filterText);\n    }\n  }, {\n    key: 'paginationHasPrevious',\n    value: function paginationHasPrevious() {\n      return this.state.pageIndex > 1;\n    }\n  }, {\n    key: 'paginationOnPrevious',\n    value: function paginationOnPrevious() {\n      var _this5 = this;\n\n      this.setState(function (prevState) {\n        var newState = _extends({}, prevState, {\n          pageIndex: prevState.pageIndex - 1\n        });\n\n        _this5.onNewState(newState);\n        return newState;\n      });\n    }\n  }, {\n    key: 'paginationHasNext',\n    value: function paginationHasNext(numAvailableRows) {\n      var pageIndex = this.state.pageIndex;\n      var numPages = Math.ceil(numAvailableRows / this.props.rowsPerPage);\n      return pageIndex < numPages;\n    }\n  }, {\n    key: 'paginationOnNext',\n    value: function paginationOnNext() {\n      var _this6 = this;\n\n      this.setState(function (prevState) {\n        var newState = _extends({}, prevState, {\n          pageIndex: prevState.pageIndex + 1\n        });\n\n        _this6.onNewState(newState);\n        return newState;\n      });\n    }\n\n    /*\n     * @param {Number} numAvailableRows - total number of rows in the table\n     */\n\n  }, {\n    key: 'getPaginationControls',\n    value: function getPaginationControls(numAvailableRows, alwaysShowPageControls) {\n      var shouldShow = false;\n      if (this.isPaginationRequired(numAvailableRows) || alwaysShowPageControls) {\n        shouldShow = true;\n      }\n\n      if (!shouldShow) {\n        return null;\n      }\n\n      var hasPrevious = this.paginationHasPrevious();\n      var hasNext = this.paginationHasNext(numAvailableRows);\n\n      return _react2.default.createElement(_components.KuiPagerButtonGroup, {\n        hasNext: hasNext,\n        hasPrevious: hasPrevious,\n        onPrevious: this.paginationOnPrevious,\n        onNext: this.paginationOnNext\n      });\n    }\n  }, {\n    key: 'calculateFirstRow',\n    value: function calculateFirstRow() {\n      return this.state.pageIndex * this.props.rowsPerPage - this.props.rowsPerPage;\n    }\n\n    /*\n     * @param {Array} visibleRows - rows of data after they've been filtered and sorted\n     * @param {Number} numAvailableRows - number of rows total on all the pages\n     */\n\n  }, {\n    key: 'getToolBar',\n    value: function getToolBar(numVisibleRows, numAvailableRows) {\n      var firstRow = this.calculateFirstRow();\n\n      return _react2.default.createElement(_toolbar.MonitoringTableToolBar, _extends({\n        showSearchBox: this.isSearchBoxShown(),\n        pageIndexFirstRow: numVisibleRows ? firstRow + 1 : 0,\n        pageIndexLastRow: numVisibleRows ? numVisibleRows + firstRow : 0,\n        rowsFiltered: numAvailableRows,\n        totalRows: this.state.rows.length,\n        filterText: this.state.filterText,\n        paginationControls: this.getPaginationControls(numAvailableRows, this.props.alwaysShowPageControls),\n        onFilterChange: this.onFilterChange,\n        dispatchTableAction: this.dispatchTableAction\n      }, this.props));\n    }\n\n    /*\n     * Update state based on how the user wants to sort/resort data per column sorting\n     * Note: secondary sort is not apparent to the user through icons. Secondary\n     * sort order is discarded when the user changes the sorting state.\n     * @param {Object} col - Column configuration object\n     */\n\n  }, {\n    key: 'setSortColumn',\n    value: function setSortColumn(_ref2) {\n      var _this7 = this;\n\n      var sortKey = _ref2.sortKey;\n\n      // clicking the column that is already sorted reverses the sort order\n      this.setState(function (prevState) {\n        var newSortOrder = void 0;\n\n        if (sortKey === _this7.state.sortKey) {\n          // same column, reverse the sort\n          newSortOrder = prevState.sortOrder * -1;\n        } else {\n          // new column, set to ASC sort\n          newSortOrder = 1;\n        }\n\n        var newState = _extends({}, prevState, {\n          sortOrder: newSortOrder,\n          sortKey: sortKey\n        });\n\n        _this7.onNewState(newState);\n        return newState;\n      });\n    }\n\n    /*\n     * Render the table header cells\n     */\n\n  }, {\n    key: 'getTableHeader',\n    value: function getTableHeader() {\n      var _this8 = this;\n\n      return this.props.columns.map(function (col) {\n        var headerCellProps = {};\n        if (col.headerCellProps) {\n          Object.assign(headerCellProps, col.headerCellProps);\n        }\n\n        var colKey = (0, _lodash.camelCase)(col.title);\n        // if onSort is null, then col is not sortable\n        return _react2.default.createElement(\n          _components.KuiTableHeaderCell,\n          _extends({\n            key: 'kuiTableHeaderCell-' + colKey,\n            onSort: col.sortKey !== null ? _this8.setSortColumn.bind(_this8, col) : null,\n            isSorted: _this8.state.sortKey === col.sortKey,\n            isSortAscending: _this8.state.sortKey === col.sortKey ? _this8.state.sortOrder > 0 : true,\n            'data-test-subj': 'tableHeaderCell-' + colKey\n          }, headerCellProps),\n          col.title\n        );\n      });\n    }\n\n    /*\n     * @param {Array} visibleRows - rows of data after they've been filtered and sorted\n     * @param {Number} numAvailableRows - number of rows total on all the pages\n     */\n\n  }, {\n    key: 'getFooter',\n    value: function getFooter(numVisibleRows, numAvailableRows, alwaysShowPageControls) {\n      if (!this.isPaginationRequired(numAvailableRows)) {\n        return null;\n      }\n\n      var firstRow = this.calculateFirstRow();\n      return _react2.default.createElement(_footer.MonitoringTableFooter, {\n        pageIndexFirstRow: numVisibleRows ? firstRow + 1 : 0,\n        pageIndexLastRow: numVisibleRows ? numVisibleRows + firstRow : 0,\n        rowsFiltered: numAvailableRows,\n        paginationControls: this.getPaginationControls(numAvailableRows, alwaysShowPageControls)\n      });\n    }\n\n    /*\n     * @param {Array} rows - rows of data that need to be sorted\n     */\n\n  }, {\n    key: 'sortRows',\n    value: function sortRows() {\n      var rows = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n      if (!this.state.sortKey) {\n        return rows;\n      }\n\n      var _sortOrder = this.state.sortOrder > 0 ? 'asc' : 'desc';\n      var _secondarySortOrder = void 0;\n      if (this.state.secondarySortOrder) {\n        _secondarySortOrder = this.state.secondarySortOrder > 0 ? 'asc' : 'desc';\n      }\n\n      return (0, _lodash.sortByOrder)(rows, [this.state.sortKey, this.state.secondarySortKey], [_sortOrder, _secondarySortOrder]);\n    }\n\n    /*\n     * Filter the rows, sort the rows, get the rows to show for the current page\n     * Important: Should be only called from render\n     * @param {Array} rows - rows of data for which the table is meant to display\n     */\n\n  }, {\n    key: 'getVisibleRows',\n    value: function getVisibleRows(rows) {\n      // [1] filter the rows\n      var filteredRows = this.getFilteredRows(rows);\n      var numAvailableRows = filteredRows.length;\n      // [2] sort the filtered rows\n      var sortedRows = this.sortRows(filteredRows);\n      // [3] paginate the sorted filtered rows\n      var firstRow = this.calculateFirstRow();\n      var visibleRows = sortedRows.slice(firstRow, firstRow + this.props.rowsPerPage) || [];\n\n      return {\n        numAvailableRows: numAvailableRows,\n        visibleRows: visibleRows\n      };\n    }\n  }, {\n    key: 'isPaginationRequired',\n    value: function isPaginationRequired(numAvailableRows) {\n      var hasPrevious = this.paginationHasPrevious();\n      var hasNext = this.paginationHasNext(numAvailableRows);\n\n      return hasPrevious || hasNext;\n    }\n  }, {\n    key: 'isSearchBoxShown',\n    value: function isSearchBoxShown() {\n      return Boolean(this.props.filterFields) && this.props.filterFields.length > 0;\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this9 = this;\n\n      var classes = (0, _classnames2.default)(this.props.className, 'monTable');\n\n      var table = void 0; // This will come out to either be the KuiTable or a \"No Data\" message\n\n      // guard the possibility that rows are null (data is loading)\n\n      var _getVisibleRows = this.getVisibleRows(this.state.rows || []),\n          visibleRows = _getVisibleRows.visibleRows,\n          numAvailableRows = _getVisibleRows.numAvailableRows;\n\n      var numVisibleRows = visibleRows.length;\n\n      if (this.state.rows === null) {\n        // rows are null, show loading message\n        table = _react2.default.createElement(_no_data.MonitoringTableNoData, {\n          message: _react2.default.createElement(_react3.FormattedMessage, {\n            id: 'xpack.monitoring.table.loadingTitle',\n            defaultMessage: 'Loading\\u2026'\n          })\n        });\n      } else if (numVisibleRows > 0) {\n        // data has some rows, show them\n        var RowComponent = this.props.rowComponent;\n        var tBody = visibleRows.map(function (rowData, rowIndex) {\n          return _react2.default.createElement(RowComponent, _extends({}, rowData, {\n            key: 'rowData-' + rowIndex,\n            dispatchTableAction: _this9.dispatchTableAction\n          }));\n        });\n\n        table = _react2.default.createElement(\n          _components.KuiTable,\n          { shrinkToContent: true },\n          _react2.default.createElement(\n            'thead',\n            null,\n            _react2.default.createElement(\n              'tr',\n              null,\n              this.getTableHeader()\n            )\n          ),\n          _react2.default.createElement(\n            'tbody',\n            { 'data-test-subj': this.props.className + 'Body' },\n            tBody\n          )\n        );\n      } else {\n        table = _react2.default.createElement(_no_data.MonitoringTableNoData, { message: this.props.getNoDataMessage(this.state.filterText) });\n      }\n\n      return _react2.default.createElement(\n        _components.KuiControlledTable,\n        { className: classes, 'data-test-subj': this.props.className + 'Container', style: { margin: 10 } },\n        this.getToolBar(numVisibleRows, numAvailableRows),\n        table,\n        this.getFooter(numVisibleRows, numAvailableRows, this.props.alwaysShowPageControls)\n      );\n    }\n  }]);\n\n  return MonitoringTableUI;\n}(_react2.default.Component);\n\nvar defaultGetNoDataMessage = function defaultGetNoDataMessage(filterText) {\n  if (filterText) {\n    return _constants.DEFAULT_NO_DATA_MESSAGE_WITH_FILTER.replace('{{FILTER}}', filterText.trim());\n  }\n  return _constants.DEFAULT_NO_DATA_MESSAGE;\n};\n\nMonitoringTableUI.defaultProps = {\n  rows: [],\n  filterFields: [],\n  getNoDataMessage: defaultGetNoDataMessage,\n  alwaysShowPageControls: false,\n  rowsPerPage: 20\n};\n\nvar MonitoringTable = exports.MonitoringTable = (0, _react3.injectI18n)(MonitoringTableUI);",null]}