{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/monitoring/public/components/elasticsearch/shard_allocation/lib/decorate_shards.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/monitoring/public/components/elasticsearch/shard_allocation/lib/decorate_shards.js","mtime":1567631712087},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decorateShards = decorateShards;\n\nvar _lodash = require('lodash');\n\nvar _i18n = require('@kbn/i18n');\n\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nfunction decorateShards(shards, nodes) {\n  function getTooltipMessage(shard) {\n    var isRelocating = function isRelocating(node) {\n      return (0, _lodash.includes)(node.node_ids, shard.relocating_node);\n    };\n    var nodeName = (0, _lodash.get)((0, _lodash.find)(nodes, function (n) {\n      return isRelocating(n);\n    }), 'name');\n\n    // messages for relocating node\n    if (nodeName) {\n      if (shard.state === 'INITIALIZING') {\n        return _i18n.i18n.translate('xpack.monitoring.elasticsearch.shardAllocation.decorateShards.relocatingFromTextMessage', {\n          defaultMessage: 'Relocating from {nodeName}',\n          values: {\n            nodeName: nodeName\n          }\n        });\n      }\n      if (shard.state === 'RELOCATING') {\n        return _i18n.i18n.translate('xpack.monitoring.elasticsearch.shardAllocation.decorateShards.relocatingToTextMessage', {\n          defaultMessage: 'Relocating to {nodeName}',\n          values: {\n            nodeName: nodeName\n          }\n        });\n      }\n    }\n    return (0, _lodash.capitalize)(shard.state.toLowerCase());\n  }\n\n  return shards.map(function (shard) {\n    var node = nodes[shard.node];\n    shard.nodeName = node && node.name || null;\n    shard.type = 'shard';\n    shard.tooltip_message = getTooltipMessage(shard);\n    return shard;\n  });\n}",null]}