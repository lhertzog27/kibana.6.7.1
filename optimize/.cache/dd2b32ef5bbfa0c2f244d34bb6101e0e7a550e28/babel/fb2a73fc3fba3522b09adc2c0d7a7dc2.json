{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/public/components/asset_manager/index.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/public/components/asset_manager/index.js","mtime":1567631711919},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AssetManager = undefined;\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /*\n                                                                                                                                                                                                                                                                   * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                   * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                   * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                   */\n\nvar _reactRedux = require('react-redux');\n\nvar _recompose = require('recompose');\n\nvar _lodash = require('lodash');\n\nvar _common = require('@kbn/interpreter/common');\n\nvar _notify = require('../../lib/notify');\n\nvar _assets = require('../../state/selectors/assets');\n\nvar _assets2 = require('../../state/actions/assets');\n\nvar _elements_registry = require('../../lib/elements_registry');\n\nvar _elements = require('../../state/actions/elements');\n\nvar _workpad = require('../../state/selectors/workpad');\n\nvar _dataurl = require('../../../common/lib/dataurl');\n\nvar _get_id = require('../../lib/get_id');\n\nvar _find_existing_asset = require('../../lib/find_existing_asset');\n\nvar _constants = require('../../../common/lib/constants');\n\nvar _asset_manager = require('./asset_manager');\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    assets: (0, _assets.getAssets)(state),\n    selectedPage: (0, _workpad.getSelectedPage)(state)\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    addImageElement: function addImageElement(pageId) {\n      return function (assetId) {\n        var imageElement = _elements_registry.elementsRegistry.get('image');\n        var elementAST = (0, _common.fromExpression)(imageElement.expression);\n        var selector = ['chain', '0', 'arguments', 'dataurl'];\n        var subExp = [{\n          type: 'expression',\n          chain: [{\n            type: 'function',\n            function: 'asset',\n            arguments: {\n              _: [assetId]\n            }\n          }]\n        }];\n        var newAST = (0, _lodash.set)(elementAST, selector, subExp);\n        imageElement.expression = (0, _common.toExpression)(newAST);\n        dispatch((0, _elements.addElement)(pageId, imageElement));\n      };\n    },\n    onAssetAdd: function onAssetAdd(type, content) {\n      // make the ID here and pass it into the action\n      var assetId = (0, _get_id.getId)('asset');\n      dispatch((0, _assets2.createAsset)(type, content, assetId));\n\n      // then return the id, so the caller knows the id that will be created\n      return assetId;\n    },\n    removeAsset: function removeAsset(assetId) {\n      return dispatch((0, _assets2.removeAsset)(assetId));\n    }\n  };\n};\n\nvar mergeProps = function mergeProps(stateProps, dispatchProps, ownProps) {\n  var assets = stateProps.assets,\n      selectedPage = stateProps.selectedPage;\n  var _onAssetAdd = dispatchProps.onAssetAdd;\n\n  var assetValues = Object.values(assets); // pull values out of assets object\n\n  return _extends({}, ownProps, dispatchProps, {\n    selectedPage: selectedPage,\n    assetValues: assetValues,\n    addImageElement: dispatchProps.addImageElement(stateProps.selectedPage),\n    onAssetAdd: function onAssetAdd(file) {\n      var _get$split = (0, _lodash.get)(file, 'type', '').split('/'),\n          _get$split2 = _slicedToArray(_get$split, 2),\n          type = _get$split2[0],\n          subtype = _get$split2[1];\n\n      if (type === 'image' && _constants.VALID_IMAGE_TYPES.indexOf(subtype) >= 0) {\n        return (0, _dataurl.encode)(file).then(function (dataurl) {\n          var type = 'dataurl';\n          var existingId = (0, _find_existing_asset.findExistingAsset)(type, dataurl, assetValues);\n          if (existingId) {\n            return existingId;\n          }\n          return _onAssetAdd(type, dataurl);\n        });\n      }\n\n      return false;\n    }\n  });\n};\n\nvar AssetManager = exports.AssetManager = (0, _recompose.compose)((0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps, mergeProps), (0, _recompose.withProps)({ copyAsset: function copyAsset(assetId) {\n    return _notify.notify.success('Copied \\'' + assetId + '\\' to clipboard');\n  } }))(_asset_manager.AssetManager);",null]}