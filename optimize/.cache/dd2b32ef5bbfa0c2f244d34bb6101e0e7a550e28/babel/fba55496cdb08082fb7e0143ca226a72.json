{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/public/components/function_form_list/index.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/public/components/function_form_list/index.js","mtime":1567631711924},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FunctionFormList = undefined;\n\nvar _interpreter = require('plugins/interpreter/interpreter');\n\nvar _recompose = require('recompose');\n\nvar _lodash = require('lodash');\n\nvar _common = require('@kbn/interpreter/common');\n\nvar _expression_types = require('../../expression_types');\n\nvar _function_form_list = require('./function_form_list');\n\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nfunction normalizeContext(chain) {\n  if (!Array.isArray(chain) || !chain.length) {\n    return null;\n  }\n  return {\n    type: 'expression',\n    chain: chain\n  };\n}\n\nfunction getExpression(ast) {\n  return ast != null && ast.type === 'expression' ? (0, _common.toExpression)(ast) : ast;\n}\n\nfunction getArgTypeDef(fn) {\n  return _expression_types.modelRegistry.get(fn) || _expression_types.viewRegistry.get(fn) || _expression_types.transformRegistry.get(fn);\n}\n\nvar functionFormItems = (0, _recompose.withProps)(function (props) {\n  var selectedElement = props.element;\n  var FunctionFormChain = (0, _lodash.get)(selectedElement, 'ast.chain', []);\n\n  // map argTypes from AST, attaching nextArgType if one exists\n  var FunctionFormListItems = FunctionFormChain.reduce(function (acc, argType, i) {\n    var argTypeDef = getArgTypeDef(argType.function);\n    var prevContext = normalizeContext(acc.context);\n    var nextArg = FunctionFormChain[i + 1] || null;\n\n    // filter out argTypes that shouldn't be in the sidebar\n    if (argTypeDef) {\n      // wrap each part of the chain in ArgType, passing in the previous context\n      var component = {\n        args: argType.arguments,\n        argType: argType.function,\n        argTypeDef: argTypeDef,\n        argResolver: function argResolver(argAst) {\n          return (0, _interpreter.interpretAst)(argAst, prevContext);\n        },\n        contextExpression: getExpression(prevContext),\n        expressionIndex: i, // preserve the index in the AST\n        nextArgType: nextArg && nextArg.function\n      };\n\n      acc.mapped.push(component);\n    }\n\n    acc.context = acc.context.concat(argType);\n    return acc;\n  }, { mapped: [], context: [] });\n\n  return {\n    functionFormItems: FunctionFormListItems.mapped\n  };\n});\n\nvar FunctionFormList = exports.FunctionFormList = (0, _recompose.compose)(functionFormItems)(_function_form_list.FunctionFormList);",null]}