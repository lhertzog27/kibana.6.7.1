{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/canvas_plugin_src/functions/browser/markdown.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/canvas_plugin_src/functions/browser/markdown.js","mtime":1567631711894},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.markdown = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /*\n                                                                                                                                                                                                                                                                   * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n                                                                                                                                                                                                                                                                   * or more contributor license agreements. Licensed under the Elastic License;\n                                                                                                                                                                                                                                                                   * you may not use this file except in compliance with the Elastic License.\n                                                                                                                                                                                                                                                                   */\n\nvar _handlebars = require('../../../common/lib/handlebars');\n\nvar markdown = exports.markdown = function markdown() {\n  return {\n    name: 'markdown',\n    aliases: [],\n    type: 'render',\n    help: 'An element for rendering markdown text. Great for single numbers, metrics or paragraphs of text.',\n    context: {\n      types: ['datatable', 'null']\n    },\n    args: {\n      expression: {\n        aliases: ['_'],\n        types: ['string'],\n        help: 'A markdown expression. You can pass this multiple times to achieve concatenation',\n        default: '\"\"',\n        multi: true\n      },\n      font: {\n        types: ['style'],\n        help: 'Font settings. Technically, you can add other styles in here as well',\n        default: '{font}'\n      }\n    },\n    fn: function fn(context, args) {\n      var compileFunctions = args.expression.map(function (str) {\n        return _handlebars.Handlebars.compile(String(str), { knownHelpersOnly: true });\n      });\n      var ctx = _extends({\n        columns: [],\n        rows: [],\n        type: null\n      }, context);\n\n      return {\n        type: 'render',\n        as: 'markdown',\n        value: {\n          content: compileFunctions.map(function (fn) {\n            return fn(ctx);\n          }).join(''),\n          font: args.font\n        }\n      };\n    }\n  };\n};",null]}