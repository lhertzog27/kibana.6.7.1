{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--9-1!/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js??ref--9-2!/home/anthony/git_workspaces/kibana/src/legacy/core_plugins/kibana/public/dashboard/index.js","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/legacy/core_plugins/kibana/public/dashboard/index.js","mtime":1567631711558},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/babel-loader/lib/index.js","mtime":1567666227676}],"contextDependencies":[],"result":["'use strict';\n\nrequire('./dashboard_app');\n\nrequire('./saved_dashboard/saved_dashboards');\n\nrequire('./dashboard_config');\n\nvar _routes = require('ui/routes');\n\nvar _routes2 = _interopRequireDefault(_routes);\n\nvar _chrome = require('ui/chrome');\n\nvar _chrome2 = _interopRequireDefault(_chrome);\n\nvar _i18n = require('ui/i18n');\n\nvar _notify = require('ui/notify');\n\nvar _dashboard_app = require('./dashboard_app.html');\n\nvar _dashboard_app2 = _interopRequireDefault(_dashboard_app);\n\nvar _dashboard_listing_ng_wrapper = require('./listing/dashboard_listing_ng_wrapper.html');\n\nvar _dashboard_listing_ng_wrapper2 = _interopRequireDefault(_dashboard_listing_ng_wrapper);\n\nvar _dashboard_constants = require('./dashboard_constants');\n\nvar _errors = require('ui/errors');\n\nvar _feature_catalogue = require('ui/registry/feature_catalogue');\n\nvar _saved_objects = require('ui/saved_objects');\n\nvar _persisted_log = require('ui/persisted_log');\n\nvar _saved_object_registry = require('ui/saved_objects/saved_object_registry');\n\nvar _dashboard_listing = require('./listing/dashboard_listing');\n\nvar _modules = require('ui/modules');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar app = _modules.uiModules.get('app/dashboard', ['ngRoute', 'react']); /*\n                                                                          * Licensed to Elasticsearch B.V. under one or more contributor\n                                                                          * license agreements. See the NOTICE file distributed with\n                                                                          * this work for additional information regarding copyright\n                                                                          * ownership. Elasticsearch B.V. licenses this file to you under\n                                                                          * the Apache License, Version 2.0 (the \"License\"); you may\n                                                                          * not use this file except in compliance with the License.\n                                                                          * You may obtain a copy of the License at\n                                                                          *\n                                                                          *    http://www.apache.org/licenses/LICENSE-2.0\n                                                                          *\n                                                                          * Unless required by applicable law or agreed to in writing,\n                                                                          * software distributed under the License is distributed on an\n                                                                          * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n                                                                          * KIND, either express or implied.  See the License for the\n                                                                          * specific language governing permissions and limitations\n                                                                          * under the License.\n                                                                          */\n\napp.directive('dashboardListing', function (reactDirective) {\n  return reactDirective((0, _i18n.wrapInI18nContext)(_dashboard_listing.DashboardListing));\n});\n\nfunction createNewDashboardCtrl($scope, i18n) {\n  $scope.visitVisualizeAppLinkText = i18n('kbn.dashboard.visitVisualizeAppLinkText', {\n    defaultMessage: 'visit the Visualize app'\n  });\n}\n\n_routes2.default.defaults(/dashboard/, {\n  requireDefaultIndex: true\n}).when(_dashboard_constants.DashboardConstants.LANDING_PAGE_PATH, {\n  template: _dashboard_listing_ng_wrapper2.default,\n  controller: function controller($injector, $location, $scope, Private, config, i18n) {\n    var services = Private(_saved_object_registry.SavedObjectRegistryProvider).byLoaderPropertiesName;\n    var dashboardConfig = $injector.get('dashboardConfig');\n\n    $scope.listingLimit = config.get('savedObjects:listingLimit');\n    $scope.find = function (search) {\n      return services.dashboards.find(search, $scope.listingLimit);\n    };\n    $scope.delete = function (ids) {\n      return services.dashboards.delete(ids);\n    };\n    $scope.hideWriteControls = dashboardConfig.getHideWriteControls();\n    $scope.initialFilter = $location.search().filter || _dashboard_listing.EMPTY_FILTER;\n    _chrome2.default.breadcrumbs.set([{\n      text: i18n('kbn.dashboard.dashboardBreadcrumbsTitle', {\n        defaultMessage: 'Dashboards'\n      })\n    }]);\n  },\n\n  resolve: {\n    dash: function dash($route, Private, redirectWhenMissing, kbnUrl) {\n      var savedObjectsClient = Private(_saved_objects.SavedObjectsClientProvider);\n      var title = $route.current.params.title;\n      if (title) {\n        return savedObjectsClient.find({\n          search: '\"' + title + '\"',\n          search_fields: 'title',\n          type: 'dashboard'\n        }).then(function (results) {\n          // The search isn't an exact match, lets see if we can find a single exact match to use\n          var matchingDashboards = results.savedObjects.filter(function (dashboard) {\n            return dashboard.attributes.title.toLowerCase() === title.toLowerCase();\n          });\n          if (matchingDashboards.length === 1) {\n            kbnUrl.redirect((0, _dashboard_constants.createDashboardEditUrl)(matchingDashboards[0].id));\n          } else {\n            kbnUrl.redirect(_dashboard_constants.DashboardConstants.LANDING_PAGE_PATH + '?filter=\"' + title + '\"');\n          }\n          throw _routes2.default.WAIT_FOR_URL_CHANGE_TOKEN;\n        }).catch(redirectWhenMissing({\n          'dashboard': _dashboard_constants.DashboardConstants.LANDING_PAGE_PATH\n        }));\n      }\n    }\n  }\n}).when(_dashboard_constants.DashboardConstants.CREATE_NEW_DASHBOARD_URL, {\n  template: _dashboard_app2.default,\n  controller: createNewDashboardCtrl,\n  resolve: {\n    dash: function dash(savedDashboards, redirectWhenMissing) {\n      return savedDashboards.get().catch(redirectWhenMissing({\n        'dashboard': _dashboard_constants.DashboardConstants.LANDING_PAGE_PATH\n      }));\n    }\n  }\n}).when((0, _dashboard_constants.createDashboardEditUrl)(':id'), {\n  template: _dashboard_app2.default,\n  controller: createNewDashboardCtrl,\n  resolve: {\n    dash: function dash(savedDashboards, Notifier, $route, $location, redirectWhenMissing, kbnUrl, AppState, i18n) {\n      var id = $route.current.params.id;\n\n      return savedDashboards.get(id).then(function (savedDashboard) {\n        _persisted_log.recentlyAccessed.add(savedDashboard.getFullPath(), savedDashboard.title, id);\n        return savedDashboard;\n      }).catch(function (error) {\n        // A corrupt dashboard was detected (e.g. with invalid JSON properties)\n        if (error instanceof _errors.InvalidJSONProperty) {\n          _notify.toastNotifications.addDanger(error.message);\n          kbnUrl.redirect(_dashboard_constants.DashboardConstants.LANDING_PAGE_PATH);\n          return;\n        }\n\n        // Preserve BWC of v5.3.0 links for new, unsaved dashboards.\n        // See https://github.com/elastic/kibana/issues/10951 for more context.\n        if (error instanceof _errors.SavedObjectNotFound && id === 'create') {\n          // Note \"new AppState\" is necessary so the state in the url is preserved through the redirect.\n          kbnUrl.redirect(_dashboard_constants.DashboardConstants.CREATE_NEW_DASHBOARD_URL, {}, new AppState());\n          _notify.toastNotifications.addWarning(i18n('kbn.dashboard.urlWasRemovedInSixZeroWarningMessage', { defaultMessage: 'The url \"dashboard/create\" was removed in 6.0. Please update your bookmarks.' }));\n        } else {\n          throw error;\n        }\n      }).catch(redirectWhenMissing({\n        'dashboard': _dashboard_constants.DashboardConstants.LANDING_PAGE_PATH\n      }));\n    }\n  }\n});\n\n_feature_catalogue.FeatureCatalogueRegistryProvider.register(function (i18n) {\n  return {\n    id: 'dashboard',\n    title: i18n('kbn.dashboard.featureCatalogue.dashboardTitle', {\n      defaultMessage: 'Dashboard'\n    }),\n    description: i18n('kbn.dashboard.featureCatalogue.dashboardDescription', {\n      defaultMessage: 'Display and share a collection of visualizations and saved searches.'\n    }),\n    icon: 'dashboardApp',\n    path: '/app/kibana#' + _dashboard_constants.DashboardConstants.LANDING_PAGE_PATH,\n    showOnHomePage: true,\n    category: _feature_catalogue.FeatureCatalogueCategory.DATA\n  };\n});",null]}