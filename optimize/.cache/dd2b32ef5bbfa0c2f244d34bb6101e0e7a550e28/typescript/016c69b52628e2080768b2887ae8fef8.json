{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/components/metrics/index.tsx","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/components/metrics/index.tsx","mtime":1567631711981},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport * as tslib_1 from \"tslib\";\nvar _a;\nimport { EuiPageContentBody, EuiTitle } from '@elastic/eui';\nimport { FormattedMessage, injectI18n } from '@kbn/i18n/react';\nimport React from 'react';\nimport { NoData } from '../empty_states';\nimport { InfraLoadingPanel } from '../loading';\nimport { Section } from './section';\nexport var Metrics = injectI18n((_a = /** @class */ (function (_super) {\n        tslib_1.__extends(class_1, _super);\n        function class_1() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this.state = {\n                crosshairValue: null,\n            };\n            _this.handleRefetch = function () {\n                _this.props.refetch();\n            };\n            _this.renderLayout = function (layout) {\n                return (React.createElement(React.Fragment, { key: layout.id },\n                    React.createElement(EuiPageContentBody, null,\n                        React.createElement(EuiTitle, { size: \"m\" },\n                            React.createElement(\"h2\", { id: layout.id },\n                                React.createElement(FormattedMessage, { id: \"xpack.infra.metrics.layoutLabelOverviewTitle\", defaultMessage: \"{layoutLabel} Overview\", values: {\n                                        layoutLabel: layout.label,\n                                    } })))),\n                    layout.sections.map(_this.renderSection(layout))));\n            };\n            _this.renderSection = function (layout) { return function (section) {\n                var sectionProps = {};\n                if (section.type === 'chart') {\n                    var _a = _this.props, onChangeRangeTime = _a.onChangeRangeTime, isLiveStreaming = _a.isLiveStreaming, stopLiveStreaming = _a.stopLiveStreaming;\n                    sectionProps = {\n                        onChangeRangeTime: onChangeRangeTime,\n                        isLiveStreaming: isLiveStreaming,\n                        stopLiveStreaming: stopLiveStreaming,\n                        crosshairValue: _this.state.crosshairValue,\n                        onCrosshairUpdate: _this.onCrosshairUpdate,\n                    };\n                }\n                return (React.createElement(Section, tslib_1.__assign({ section: section, metrics: _this.props.metrics, key: layout.id + \"-\" + section.id }, sectionProps)));\n            }; };\n            _this.onCrosshairUpdate = function (crosshairValue) {\n                _this.setState({\n                    crosshairValue: crosshairValue,\n                });\n            };\n            return _this;\n        }\n        class_1.prototype.render = function () {\n            var intl = this.props.intl;\n            if (this.props.loading) {\n                return (React.createElement(InfraLoadingPanel, { height: \"100vh\", width: \"auto\", text: intl.formatMessage({\n                        id: 'xpack.infra.metrics.loadingNodeDataText',\n                        defaultMessage: 'Loading data',\n                    }) }));\n            }\n            else if (!this.props.loading && this.props.metrics && this.props.metrics.length === 0) {\n                return (React.createElement(NoData, { titleText: intl.formatMessage({\n                        id: 'xpack.infra.metrics.emptyViewTitle',\n                        defaultMessage: 'There is no data to display.',\n                    }), bodyText: intl.formatMessage({\n                        id: 'xpack.infra.metrics.emptyViewDescription',\n                        defaultMessage: 'Try adjusting your time or filter.',\n                    }), refetchText: intl.formatMessage({\n                        id: 'xpack.infra.metrics.refetchButtonLabel',\n                        defaultMessage: 'Check for new data',\n                    }), onRefetch: this.handleRefetch, testString: \"metricsEmptyViewState\" }));\n            }\n            return React.createElement(React.Fragment, null, this.props.layouts.map(this.renderLayout));\n        };\n        return class_1;\n    }(React.PureComponent)),\n    _a.displayName = 'Metrics',\n    _a));\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/components/metrics/index.tsx","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/components/metrics/index.tsx"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport { EuiPageContentBody, EuiTitle } from '@elastic/eui';\nimport { FormattedMessage, InjectedIntl, injectI18n } from '@kbn/i18n/react';\nimport React from 'react';\n\nimport { InfraMetricData } from '../../graphql/types';\nimport { InfraMetricLayout, InfraMetricLayoutSection } from '../../pages/metrics/layouts/types';\nimport { metricTimeActions } from '../../store';\nimport { NoData } from '../empty_states';\nimport { InfraLoadingPanel } from '../loading';\nimport { Section } from './section';\n\ninterface Props {\n  metrics: InfraMetricData[];\n  layouts: InfraMetricLayout[];\n  loading: boolean;\n  refetch: () => void;\n  nodeId: string;\n  label: string;\n  onChangeRangeTime?: (time: metricTimeActions.MetricRangeTimeState) => void;\n  isLiveStreaming?: boolean;\n  stopLiveStreaming?: () => void;\n  intl: InjectedIntl;\n}\n\ninterface State {\n  crosshairValue: number | null;\n}\n\nexport const Metrics = injectI18n(\n  class extends React.PureComponent<Props, State> {\n    public static displayName = 'Metrics';\n    public readonly state = {\n      crosshairValue: null,\n    };\n\n    public render() {\n      const { intl } = this.props;\n\n      if (this.props.loading) {\n        return (\n          <InfraLoadingPanel\n            height=\"100vh\"\n            width=\"auto\"\n            text={intl.formatMessage({\n              id: 'xpack.infra.metrics.loadingNodeDataText',\n              defaultMessage: 'Loading data',\n            })}\n          />\n        );\n      } else if (!this.props.loading && this.props.metrics && this.props.metrics.length === 0) {\n        return (\n          <NoData\n            titleText={intl.formatMessage({\n              id: 'xpack.infra.metrics.emptyViewTitle',\n              defaultMessage: 'There is no data to display.',\n            })}\n            bodyText={intl.formatMessage({\n              id: 'xpack.infra.metrics.emptyViewDescription',\n              defaultMessage: 'Try adjusting your time or filter.',\n            })}\n            refetchText={intl.formatMessage({\n              id: 'xpack.infra.metrics.refetchButtonLabel',\n              defaultMessage: 'Check for new data',\n            })}\n            onRefetch={this.handleRefetch}\n            testString=\"metricsEmptyViewState\"\n          />\n        );\n      }\n\n      return <React.Fragment>{this.props.layouts.map(this.renderLayout)}</React.Fragment>;\n    }\n\n    private handleRefetch = () => {\n      this.props.refetch();\n    };\n\n    private renderLayout = (layout: InfraMetricLayout) => {\n      return (\n        <React.Fragment key={layout.id}>\n          <EuiPageContentBody>\n            <EuiTitle size=\"m\">\n              <h2 id={layout.id}>\n                <FormattedMessage\n                  id=\"xpack.infra.metrics.layoutLabelOverviewTitle\"\n                  defaultMessage=\"{layoutLabel} Overview\"\n                  values={{\n                    layoutLabel: layout.label,\n                  }}\n                />\n              </h2>\n            </EuiTitle>\n          </EuiPageContentBody>\n          {layout.sections.map(this.renderSection(layout))}\n        </React.Fragment>\n      );\n    };\n\n    private renderSection = (layout: InfraMetricLayout) => (section: InfraMetricLayoutSection) => {\n      let sectionProps = {};\n      if (section.type === 'chart') {\n        const { onChangeRangeTime, isLiveStreaming, stopLiveStreaming } = this.props;\n        sectionProps = {\n          onChangeRangeTime,\n          isLiveStreaming,\n          stopLiveStreaming,\n          crosshairValue: this.state.crosshairValue,\n          onCrosshairUpdate: this.onCrosshairUpdate,\n        };\n      }\n      return (\n        <Section\n          section={section}\n          metrics={this.props.metrics}\n          key={`${layout.id}-${section.id}`}\n          {...sectionProps}\n        />\n      );\n    };\n\n    private onCrosshairUpdate = (crosshairValue: number) => {\n      this.setState({\n        crosshairValue,\n      });\n    };\n  }\n);\n"]}]}