{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/components/source_configuration/source_configuration_form_state.tsx","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/components/source_configuration/source_configuration_form_state.tsx","mtime":1567631711982},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport * as tslib_1 from \"tslib\";\nimport { Container as ConstateContainer } from 'constate';\nimport mergeAll from 'lodash/fp/mergeAll';\nimport React from 'react';\nimport { FormattedMessage } from '@kbn/i18n/react';\nimport { memoizeLast } from 'ui/utils/memoize';\nimport { convertChangeToUpdater } from '../../../common/source_configuration';\nvar createContainerProps = memoizeLast(function (initialFormState) {\n    var actions = {\n        resetForm: function () { return function (state) { return (tslib_1.__assign({}, state, { updates: [] })); }; },\n        updateName: function (name) { return function (state) { return (tslib_1.__assign({}, state, { updates: addOrCombineLastUpdate(state.updates, { setName: { name: name } }) })); }; },\n        updateLogAlias: function (logAlias) { return function (state) { return (tslib_1.__assign({}, state, { updates: addOrCombineLastUpdate(state.updates, { setAliases: { logAlias: logAlias } }) })); }; },\n        updateMetricAlias: function (metricAlias) { return function (state) { return (tslib_1.__assign({}, state, { updates: addOrCombineLastUpdate(state.updates, { setAliases: { metricAlias: metricAlias } }) })); }; },\n        updateField: function (field, value) { return function (state) {\n            var _a;\n            return (tslib_1.__assign({}, state, { updates: addOrCombineLastUpdate(state.updates, { setFields: (_a = {}, _a[field] = value, _a) }) }));\n        }; },\n    };\n    var getCurrentFormState = memoizeLast(function (previousFormState, updates) {\n        return updates\n            .map(convertChangeToUpdater)\n            .reduce(function (state, updater) { return updater(state); }, previousFormState);\n    });\n    var selectors = {\n        getCurrentFormState: function () { return function (_a) {\n            var updates = _a.updates;\n            return getCurrentFormState(initialFormState, updates);\n        }; },\n        getNameFieldValidationErrors: function () { return function (state) {\n            return validateInputFieldNotEmpty(selectors.getCurrentFormState()(state).name);\n        }; },\n        getLogAliasFieldValidationErrors: function () { return function (state) {\n            return validateInputFieldNotEmpty(selectors.getCurrentFormState()(state).logAlias);\n        }; },\n        getMetricAliasFieldValidationErrors: function () { return function (state) {\n            return validateInputFieldNotEmpty(selectors.getCurrentFormState()(state).metricAlias);\n        }; },\n        getFieldFieldValidationErrors: function (field) { return function (state) {\n            return validateInputFieldNotEmpty(selectors.getCurrentFormState()(state).fields[field]);\n        }; },\n        isFormValid: function () { return function (state) {\n            return [\n                selectors.getNameFieldValidationErrors()(state),\n                selectors.getLogAliasFieldValidationErrors()(state),\n                selectors.getMetricAliasFieldValidationErrors()(state),\n                selectors.getFieldFieldValidationErrors('container')(state),\n                selectors.getFieldFieldValidationErrors('host')(state),\n                selectors.getFieldFieldValidationErrors('pod')(state),\n                selectors.getFieldFieldValidationErrors('tiebreaker')(state),\n                selectors.getFieldFieldValidationErrors('timestamp')(state),\n            ].every(function (errors) { return errors.length === 0; });\n        }; },\n    };\n    return {\n        actions: actions,\n        initialState: { updates: [] },\n        selectors: selectors,\n    };\n});\nexport var WithSourceConfigurationFormState = function (_a) {\n    var children = _a.children, initialFormState = _a.initialFormState, onMount = _a.onMount;\n    return (React.createElement(ConstateContainer, tslib_1.__assign({}, createContainerProps(initialFormState), { context: \"source-configuration-form\", onMount: onMount }), function (args) {\n        var currentFormState = args.getCurrentFormState();\n        return children(tslib_1.__assign({}, args, { getNameFieldProps: function () {\n                return createInputFieldProps({\n                    errors: args.getNameFieldValidationErrors(),\n                    name: 'name',\n                    onChange: args.updateName,\n                    value: currentFormState.name,\n                });\n            }, getLogAliasFieldProps: function () {\n                return createInputFieldProps({\n                    errors: args.getLogAliasFieldValidationErrors(),\n                    name: 'logAlias',\n                    onChange: args.updateLogAlias,\n                    value: currentFormState.logAlias,\n                });\n            }, getMetricAliasFieldProps: function () {\n                return createInputFieldProps({\n                    errors: args.getMetricAliasFieldValidationErrors(),\n                    name: 'metricAlias',\n                    onChange: args.updateMetricAlias,\n                    value: currentFormState.metricAlias,\n                });\n            }, getFieldFieldProps: function (field) {\n                return createInputFieldProps({\n                    errors: args.getFieldFieldValidationErrors(field),\n                    name: field + \"Field\",\n                    onChange: function (newValue) { return args.updateField(field, newValue); },\n                    value: currentFormState.fields[field],\n                });\n            } }));\n    }));\n};\nvar addOrCombineLastUpdate = function (updates, newUpdate) { return tslib_1.__spread(updates.slice(0, -1), maybeCombineUpdates(updates[updates.length - 1], newUpdate)); };\nvar createInputFieldProps = function (_a) {\n    var errors = _a.errors, name = _a.name, onChange = _a.onChange, value = _a.value;\n    return ({\n        error: errors,\n        isInvalid: errors.length > 0,\n        name: name,\n        onChange: function (evt) { return onChange(evt.currentTarget.value); },\n        value: value,\n    });\n};\nvar validateInputFieldNotEmpty = function (value) {\n    return value === ''\n        ? [\n            React.createElement(FormattedMessage, { id: \"xpack.infra.sourceConfiguration.fieldEmptyErrorMessage\", defaultMessage: \"The field must not be empty\" }),\n        ]\n        : [];\n};\n/**\n * Tries to combine the given updates by naively checking whether they can be\n * merged into one update.\n *\n * This is only judged to be the case when all of the following conditions are\n * met:\n *\n * 1. The update only contains one operation.\n * 2. The operation is the same on in both updates.\n * 3. The operation is known to be safe to combine.\n */\nvar maybeCombineUpdates = function (firstUpdate, secondUpdate) {\n    if (!firstUpdate) {\n        return [secondUpdate];\n    }\n    var firstKeys = Object.keys(firstUpdate);\n    var secondKeys = Object.keys(secondUpdate);\n    var isSingleOperation = firstKeys.length === secondKeys.length && firstKeys.length === 1;\n    var isSameOperation = firstKeys[0] === secondKeys[0];\n    // to guard against future operations, which might not be safe to merge naively\n    var isMergeableOperation = mergeableOperations.indexOf(firstKeys[0]) > -1;\n    if (isSingleOperation && isSameOperation && isMergeableOperation) {\n        return [mergeAll([firstUpdate, secondUpdate])];\n    }\n    return [firstUpdate, secondUpdate];\n};\nvar mergeableOperations = ['setName', 'setDescription', 'setAliases', 'setFields'];\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/components/source_configuration/source_configuration_form_state.tsx","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/components/source_configuration/source_configuration_form_state.tsx"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport { ActionMap, Container as ConstateContainer, OnMount, SelectorMap } from 'constate';\nimport mergeAll from 'lodash/fp/mergeAll';\nimport React from 'react';\n\nimport { FormattedMessage } from '@kbn/i18n/react';\nimport { memoizeLast } from 'ui/utils/memoize';\nimport { convertChangeToUpdater } from '../../../common/source_configuration';\nimport { UpdateSourceInput } from '../../graphql/types';\nimport { RendererFunction } from '../../utils/typed_react';\n\nexport interface InputFieldProps<\n  Value extends string = string,\n  FieldElement extends HTMLInputElement = HTMLInputElement\n> {\n  error: React.ReactNode[];\n  isInvalid: boolean;\n  name: string;\n  onChange?: React.ChangeEventHandler<FieldElement>;\n  value?: Value;\n}\n\ntype FieldErrorMessage = string | JSX.Element;\n\ntype EditableFieldName = 'container' | 'host' | 'pod' | 'tiebreaker' | 'timestamp';\n\ninterface FormState {\n  name: string;\n  description: string;\n  metricAlias: string;\n  logAlias: string;\n  fields: {\n    container: string;\n    host: string;\n    message: string[];\n    pod: string;\n    tiebreaker: string;\n    timestamp: string;\n  };\n}\n\ninterface State {\n  updates: UpdateSourceInput[];\n}\n\ninterface Actions {\n  resetForm: () => void;\n  updateName: (name: string) => void;\n  updateLogAlias: (value: string) => void;\n  updateMetricAlias: (value: string) => void;\n  updateField: (field: EditableFieldName, value: string) => void;\n}\n\ninterface Selectors {\n  getCurrentFormState: () => FormState;\n  getNameFieldValidationErrors: () => FieldErrorMessage[];\n  getLogAliasFieldValidationErrors: () => FieldErrorMessage[];\n  getMetricAliasFieldValidationErrors: () => FieldErrorMessage[];\n  getFieldFieldValidationErrors: (field: EditableFieldName) => FieldErrorMessage[];\n  isFormValid: () => boolean;\n}\n\nconst createContainerProps = memoizeLast((initialFormState: FormState) => {\n  const actions: ActionMap<State, Actions> = {\n    resetForm: () => state => ({\n      ...state,\n      updates: [],\n    }),\n    updateName: name => state => ({\n      ...state,\n      updates: addOrCombineLastUpdate(state.updates, { setName: { name } }),\n    }),\n    updateLogAlias: logAlias => state => ({\n      ...state,\n      updates: addOrCombineLastUpdate(state.updates, { setAliases: { logAlias } }),\n    }),\n    updateMetricAlias: metricAlias => state => ({\n      ...state,\n      updates: addOrCombineLastUpdate(state.updates, { setAliases: { metricAlias } }),\n    }),\n    updateField: (field, value) => state => ({\n      ...state,\n      updates: addOrCombineLastUpdate(state.updates, { setFields: { [field]: value } }),\n    }),\n  };\n\n  const getCurrentFormState = memoizeLast(\n    (previousFormState: FormState, updates: UpdateSourceInput[]) =>\n      updates\n        .map(convertChangeToUpdater)\n        .reduce((state, updater) => updater(state), previousFormState)\n  );\n\n  const selectors: SelectorMap<State, Selectors> = {\n    getCurrentFormState: () => ({ updates }) => getCurrentFormState(initialFormState, updates),\n    getNameFieldValidationErrors: () => state =>\n      validateInputFieldNotEmpty(selectors.getCurrentFormState()(state).name),\n    getLogAliasFieldValidationErrors: () => state =>\n      validateInputFieldNotEmpty(selectors.getCurrentFormState()(state).logAlias),\n    getMetricAliasFieldValidationErrors: () => state =>\n      validateInputFieldNotEmpty(selectors.getCurrentFormState()(state).metricAlias),\n    getFieldFieldValidationErrors: field => state =>\n      validateInputFieldNotEmpty(selectors.getCurrentFormState()(state).fields[field]),\n    isFormValid: () => state =>\n      [\n        selectors.getNameFieldValidationErrors()(state),\n        selectors.getLogAliasFieldValidationErrors()(state),\n        selectors.getMetricAliasFieldValidationErrors()(state),\n        selectors.getFieldFieldValidationErrors('container')(state),\n        selectors.getFieldFieldValidationErrors('host')(state),\n        selectors.getFieldFieldValidationErrors('pod')(state),\n        selectors.getFieldFieldValidationErrors('tiebreaker')(state),\n        selectors.getFieldFieldValidationErrors('timestamp')(state),\n      ].every(errors => errors.length === 0),\n  };\n\n  return {\n    actions,\n    initialState: { updates: [] } as State,\n    selectors,\n  };\n});\n\ninterface WithSourceConfigurationFormStateProps {\n  children: RendererFunction<\n    State &\n      Actions &\n      Selectors & {\n        getFieldFieldProps: (field: EditableFieldName) => InputFieldProps;\n        getLogAliasFieldProps: () => InputFieldProps;\n        getMetricAliasFieldProps: () => InputFieldProps;\n        getNameFieldProps: () => InputFieldProps;\n      }\n  >;\n  initialFormState: FormState;\n  onMount?: OnMount<State>;\n}\n\nexport const WithSourceConfigurationFormState: React.SFC<WithSourceConfigurationFormStateProps> = ({\n  children,\n  initialFormState,\n  onMount,\n}) => (\n  <ConstateContainer\n    {...createContainerProps(initialFormState)}\n    context=\"source-configuration-form\"\n    onMount={onMount}\n  >\n    {args => {\n      const currentFormState = args.getCurrentFormState();\n      return children({\n        ...args,\n        getNameFieldProps: () =>\n          createInputFieldProps({\n            errors: args.getNameFieldValidationErrors(),\n            name: 'name',\n            onChange: args.updateName,\n            value: currentFormState.name,\n          }),\n        getLogAliasFieldProps: () =>\n          createInputFieldProps({\n            errors: args.getLogAliasFieldValidationErrors(),\n            name: 'logAlias',\n            onChange: args.updateLogAlias,\n            value: currentFormState.logAlias,\n          }),\n        getMetricAliasFieldProps: () =>\n          createInputFieldProps({\n            errors: args.getMetricAliasFieldValidationErrors(),\n            name: 'metricAlias',\n            onChange: args.updateMetricAlias,\n            value: currentFormState.metricAlias,\n          }),\n        getFieldFieldProps: field =>\n          createInputFieldProps({\n            errors: args.getFieldFieldValidationErrors(field),\n            name: `${field}Field`,\n            onChange: newValue => args.updateField(field, newValue),\n            value: currentFormState.fields[field],\n          }),\n      });\n    }}\n  </ConstateContainer>\n);\n\nconst addOrCombineLastUpdate = (updates: UpdateSourceInput[], newUpdate: UpdateSourceInput) => [\n  ...updates.slice(0, -1),\n  ...maybeCombineUpdates(updates[updates.length - 1], newUpdate),\n];\n\nconst createInputFieldProps = <\n  Value extends string = string,\n  FieldElement extends HTMLInputElement = HTMLInputElement\n>({\n  errors,\n  name,\n  onChange,\n  value,\n}: {\n  errors: FieldErrorMessage[];\n  name: string;\n  onChange: (newValue: string) => void;\n  value: Value;\n}): InputFieldProps<Value, FieldElement> => ({\n  error: errors,\n  isInvalid: errors.length > 0,\n  name,\n  onChange: (evt: React.ChangeEvent<FieldElement>) => onChange(evt.currentTarget.value),\n  value,\n});\n\nconst validateInputFieldNotEmpty = (value: string) =>\n  value === ''\n    ? [\n        <FormattedMessage\n          id=\"xpack.infra.sourceConfiguration.fieldEmptyErrorMessage\"\n          defaultMessage=\"The field must not be empty\"\n        />,\n      ]\n    : [];\n\n/**\n * Tries to combine the given updates by naively checking whether they can be\n * merged into one update.\n *\n * This is only judged to be the case when all of the following conditions are\n * met:\n *\n * 1. The update only contains one operation.\n * 2. The operation is the same on in both updates.\n * 3. The operation is known to be safe to combine.\n */\nconst maybeCombineUpdates = (\n  firstUpdate: UpdateSourceInput | undefined,\n  secondUpdate: UpdateSourceInput\n): UpdateSourceInput[] => {\n  if (!firstUpdate) {\n    return [secondUpdate];\n  }\n\n  const firstKeys = Object.keys(firstUpdate);\n  const secondKeys = Object.keys(secondUpdate);\n\n  const isSingleOperation = firstKeys.length === secondKeys.length && firstKeys.length === 1;\n  const isSameOperation = firstKeys[0] === secondKeys[0];\n  // to guard against future operations, which might not be safe to merge naively\n  const isMergeableOperation = mergeableOperations.indexOf(firstKeys[0]) > -1;\n\n  if (isSingleOperation && isSameOperation && isMergeableOperation) {\n    return [mergeAll([firstUpdate, secondUpdate])];\n  }\n\n  return [firstUpdate, secondUpdate];\n};\n\nconst mergeableOperations = ['setName', 'setDescription', 'setAliases', 'setFields'];\n"]}]}