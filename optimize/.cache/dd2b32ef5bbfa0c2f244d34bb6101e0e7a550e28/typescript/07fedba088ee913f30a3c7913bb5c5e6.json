{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/spaces/public/components/space_avatar.tsx","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/spaces/public/components/space_avatar.tsx","mtime":1567631712309},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport * as tslib_1 from \"tslib\";\nimport { EuiAvatar } from '@elastic/eui';\nimport React from 'react';\nimport { getSpaceColor, getSpaceInitials, MAX_SPACE_INITIALS } from '../../common';\nexport var SpaceAvatar = function (props) {\n    var space = props.space, size = props.size, announceSpaceName = props.announceSpaceName, rest = tslib_1.__rest(props, [\"space\", \"size\", \"announceSpaceName\"]);\n    var spaceName = space.name ? space.name.trim() : '';\n    return (React.createElement(EuiAvatar, tslib_1.__assign({ type: \"space\", \"data-test-subj\": \"space-avatar-\" + space.id, name: spaceName }, !announceSpaceName && {\n        // provide empty aria-label so EUI doesn't try to provide its own\n        'aria-label': '',\n        'aria-hidden': true,\n    }, { size: size || 'm', initialsLength: MAX_SPACE_INITIALS, initials: getSpaceInitials(space), color: getSpaceColor(space) }, rest)));\n};\nSpaceAvatar.defaultProps = {\n    announceSpaceName: true,\n};\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/spaces/public/components/space_avatar.tsx","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/spaces/public/components/space_avatar.tsx"],"names":[],"mappings":"AAAA;;;;GAIG;;AAEH,OAAO,EAAE,SAAS,EAAE,MAAM,cAAc,CAAC;AACzC,OAAO,KAAc,MAAM,OAAO,CAAC;AACnC,OAAO,EAAE,aAAa,EAAE,gBAAgB,EAAE,kBAAkB,EAAE,MAAM,cAAc,CAAC;AAUnF,MAAM,CAAC,IAAM,WAAW,GAAe,UAAC,KAAY;IAC1C,IAAA,mBAAK,EAAE,iBAAI,EAAE,2CAAiB,EAAE,oEAAO,CAAW;IAE1D,IAAM,SAAS,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;IAEtD,OAAO,CACL,oBAAC,SAAS,qBACR,IAAI,EAAC,OAAO,oBACI,kBAAgB,KAAK,CAAC,EAAI,EAC1C,IAAI,EAAE,SAAS,IACX,CAAC,iBAAiB,IAAI;QACxB,iEAAiE;QACjE,YAAY,EAAE,EAAE;QAChB,aAAa,EAAE,IAAI;KACpB,IACD,IAAI,EAAE,IAAI,IAAI,GAAG,EACjB,cAAc,EAAE,kBAAkB,EAClC,QAAQ,EAAE,gBAAgB,CAAC,KAAK,CAAC,EACjC,KAAK,EAAE,aAAa,CAAC,KAAK,CAAC,IACvB,IAAI,EACR,CACH,CAAC;AACJ,CAAC,CAAC;AAEF,WAAW,CAAC,YAAY,GAAG;IACzB,iBAAiB,EAAE,IAAI;CACxB,CAAC","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport { EuiAvatar } from '@elastic/eui';\nimport React, { SFC } from 'react';\nimport { getSpaceColor, getSpaceInitials, MAX_SPACE_INITIALS } from '../../common';\nimport { Space } from '../../common/model/space';\n\ninterface Props {\n  space: Partial<Space>;\n  size?: 's' | 'm' | 'l' | 'xl';\n  className?: string;\n  announceSpaceName?: boolean;\n}\n\nexport const SpaceAvatar: SFC<Props> = (props: Props) => {\n  const { space, size, announceSpaceName, ...rest } = props;\n\n  const spaceName = space.name ? space.name.trim() : '';\n\n  return (\n    <EuiAvatar\n      type=\"space\"\n      data-test-subj={`space-avatar-${space.id}`}\n      name={spaceName}\n      {...!announceSpaceName && {\n        // provide empty aria-label so EUI doesn't try to provide its own\n        'aria-label': '',\n        'aria-hidden': true,\n      }}\n      size={size || 'm'}\n      initialsLength={MAX_SPACE_INITIALS}\n      initials={getSpaceInitials(space)}\n      color={getSpaceColor(space)}\n      {...rest}\n    />\n  );\n};\n\nSpaceAvatar.defaultProps = {\n  announceSpaceName: true,\n};\n"]}]}