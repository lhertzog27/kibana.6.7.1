{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/src/legacy/core_plugins/kibana/public/dashboard/panel/panel_header/panel_actions/get_inspector_panel_action.tsx","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/legacy/core_plugins/kibana/public/dashboard/panel/panel_header/panel_actions/get_inspector_panel_action.tsx","mtime":1567631711560},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { EuiIcon } from '@elastic/eui';\nimport { i18n } from '@kbn/i18n';\nimport { ContextMenuAction } from 'ui/embeddable';\nimport { Inspector } from 'ui/inspector';\n/**\n * Returns the dashboard panel action for opening an inspector for a specific panel.\n * This will check if the embeddable inside the panel actually exposes inspector adapters\n * via its embeddable.getInspectorAdapters() method. If so - and if an inspector\n * could be shown for those adapters - the inspector icon will be visible.\n * @return {ContextMenuAction}\n */\nexport function getInspectorPanelAction(_a) {\n    var closeContextMenu = _a.closeContextMenu, panelTitle = _a.panelTitle;\n    return new ContextMenuAction({\n        id: 'openInspector',\n        displayName: i18n.translate('kbn.dashboard.panel.inspectorPanel.displayName', {\n            defaultMessage: 'Inspect',\n        }),\n        parentPanelId: 'mainMenu',\n    }, {\n        icon: React.createElement(EuiIcon, { type: \"inspect\" }),\n        isVisible: function (_a) {\n            var embeddable = _a.embeddable;\n            if (!embeddable) {\n                return false;\n            }\n            return Inspector.isAvailable(embeddable.getInspectorAdapters());\n        },\n        onClick: function (_a) {\n            var embeddable = _a.embeddable;\n            if (!embeddable) {\n                return;\n            }\n            closeContextMenu();\n            var adapters = embeddable.getInspectorAdapters();\n            if (!adapters) {\n                return;\n            }\n            var session = Inspector.open(adapters, {\n                title: panelTitle,\n            });\n            // Overwrite the embeddables.destroy() function to close the inspector\n            // before calling the original destroy method\n            var originalDestroy = embeddable.destroy;\n            embeddable.destroy = function () {\n                session.close();\n                if (originalDestroy) {\n                    originalDestroy.call(embeddable);\n                }\n            };\n            // In case the inspector gets closed (otherwise), restore the original destroy function\n            session.on('closed', function () {\n                embeddable.destroy = originalDestroy;\n            });\n        },\n    });\n}\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/src/legacy/core_plugins/kibana/public/dashboard/panel/panel_header/panel_actions/get_inspector_panel_action.tsx","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/src/legacy/core_plugins/kibana/public/dashboard/panel/panel_header/panel_actions/get_inspector_panel_action.tsx"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;GAiBG;AAEH,OAAO,KAAK,MAAM,OAAO,CAAC;AAE1B,OAAO,EAAE,OAAO,EAAE,MAAM,cAAc,CAAC;AACvC,OAAO,EAAE,IAAI,EAAE,MAAM,WAAW,CAAC;AAEjC,OAAO,EAAE,iBAAiB,EAAE,MAAM,eAAe,CAAC;AAClD,OAAO,EAAE,SAAS,EAAE,MAAM,cAAc,CAAC;AAEzC;;;;;;GAMG;AACH,MAAM,UAAU,uBAAuB,CAAC,EAMvC;QALC,sCAAgB,EAChB,0BAAU;IAKV,OAAO,IAAI,iBAAiB,CAC1B;QACE,EAAE,EAAE,eAAe;QACnB,WAAW,EAAE,IAAI,CAAC,SAAS,CAAC,gDAAgD,EAAE;YAC5E,cAAc,EAAE,SAAS;SAC1B,CAAC;QACF,aAAa,EAAE,UAAU;KAC1B,EACD;QACE,IAAI,EAAE,oBAAC,OAAO,IAAC,IAAI,EAAC,SAAS,GAAG;QAChC,SAAS,EAAE,UAAC,EAAc;gBAAZ,0BAAU;YACtB,IAAI,CAAC,UAAU,EAAE;gBACf,OAAO,KAAK,CAAC;aACd;YACD,OAAO,SAAS,CAAC,WAAW,CAAC,UAAU,CAAC,oBAAoB,EAAE,CAAC,CAAC;QAClE,CAAC;QACD,OAAO,EAAE,UAAC,EAAc;gBAAZ,0BAAU;YACpB,IAAI,CAAC,UAAU,EAAE;gBACf,OAAO;aACR;YACD,gBAAgB,EAAE,CAAC;YACnB,IAAM,QAAQ,GAAG,UAAU,CAAC,oBAAoB,EAAE,CAAC;YACnD,IAAI,CAAC,QAAQ,EAAE;gBACb,OAAO;aACR;YAED,IAAM,OAAO,GAAG,SAAS,CAAC,IAAI,CAAC,QAAQ,EAAE;gBACvC,KAAK,EAAE,UAAU;aAClB,CAAC,CAAC;YACH,sEAAsE;YACtE,6CAA6C;YAC7C,IAAM,eAAe,GAAG,UAAU,CAAC,OAAO,CAAC;YAC3C,UAAU,CAAC,OAAO,GAAG;gBACnB,OAAO,CAAC,KAAK,EAAE,CAAC;gBAChB,IAAI,eAAe,EAAE;oBACnB,eAAe,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;iBAClC;YACH,CAAC,CAAC;YACF,uFAAuF;YACvF,OAAO,CAAC,EAAE,CAAC,QAAQ,EAAE;gBACnB,UAAU,CAAC,OAAO,GAAG,eAAe,CAAC;YACvC,CAAC,CAAC,CAAC;QACL,CAAC;KACF,CACF,CAAC;AACJ,CAAC","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\n\nimport { EuiIcon } from '@elastic/eui';\nimport { i18n } from '@kbn/i18n';\n\nimport { ContextMenuAction } from 'ui/embeddable';\nimport { Inspector } from 'ui/inspector';\n\n/**\n * Returns the dashboard panel action for opening an inspector for a specific panel.\n * This will check if the embeddable inside the panel actually exposes inspector adapters\n * via its embeddable.getInspectorAdapters() method. If so - and if an inspector\n * could be shown for those adapters - the inspector icon will be visible.\n * @return {ContextMenuAction}\n */\nexport function getInspectorPanelAction({\n  closeContextMenu,\n  panelTitle,\n}: {\n  closeContextMenu: () => void;\n  panelTitle?: string;\n}) {\n  return new ContextMenuAction(\n    {\n      id: 'openInspector',\n      displayName: i18n.translate('kbn.dashboard.panel.inspectorPanel.displayName', {\n        defaultMessage: 'Inspect',\n      }),\n      parentPanelId: 'mainMenu',\n    },\n    {\n      icon: <EuiIcon type=\"inspect\" />,\n      isVisible: ({ embeddable }) => {\n        if (!embeddable) {\n          return false;\n        }\n        return Inspector.isAvailable(embeddable.getInspectorAdapters());\n      },\n      onClick: ({ embeddable }) => {\n        if (!embeddable) {\n          return;\n        }\n        closeContextMenu();\n        const adapters = embeddable.getInspectorAdapters();\n        if (!adapters) {\n          return;\n        }\n\n        const session = Inspector.open(adapters, {\n          title: panelTitle,\n        });\n        // Overwrite the embeddables.destroy() function to close the inspector\n        // before calling the original destroy method\n        const originalDestroy = embeddable.destroy;\n        embeddable.destroy = () => {\n          session.close();\n          if (originalDestroy) {\n            originalDestroy.call(embeddable);\n          }\n        };\n        // In case the inspector gets closed (otherwise), restore the original destroy function\n        session.on('closed', () => {\n          embeddable.destroy = originalDestroy;\n        });\n      },\n    }\n  );\n}\n"]}]}