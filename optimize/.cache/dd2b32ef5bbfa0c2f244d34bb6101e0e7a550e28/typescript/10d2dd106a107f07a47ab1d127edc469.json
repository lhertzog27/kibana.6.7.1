{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/store/local/waffle_time/reducer.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/store/local/waffle_time/reducer.ts","mtime":1567631711989},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport { combineReducers } from 'redux';\nimport { reducerWithInitialState } from 'typescript-fsa-reducers/dist';\nimport { jumpToTime, startAutoReload, stopAutoReload } from './actions';\nexport var initialWaffleTimeState = {\n    currentTime: Date.now(),\n    updatePolicy: {\n        policy: 'manual',\n    },\n};\nvar currentTimeReducer = reducerWithInitialState(initialWaffleTimeState.currentTime).case(jumpToTime, function (currentTime, targetTime) { return targetTime; });\nvar updatePolicyReducer = reducerWithInitialState(initialWaffleTimeState.updatePolicy)\n    .case(startAutoReload, function () { return ({\n    policy: 'interval',\n    interval: 5000,\n}); })\n    .case(stopAutoReload, function () { return ({\n    policy: 'manual',\n}); });\nexport var waffleTimeReducer = combineReducers({\n    currentTime: currentTimeReducer,\n    updatePolicy: updatePolicyReducer,\n});\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/store/local/waffle_time/reducer.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/store/local/waffle_time/reducer.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAEH,OAAO,EAAE,eAAe,EAAE,MAAM,OAAO,CAAC;AACxC,OAAO,EAAE,uBAAuB,EAAE,MAAM,8BAA8B,CAAC;AAEvE,OAAO,EAAE,UAAU,EAAE,eAAe,EAAE,cAAc,EAAE,MAAM,WAAW,CAAC;AAkBxE,MAAM,CAAC,IAAM,sBAAsB,GAAoB;IACrD,WAAW,EAAE,IAAI,CAAC,GAAG,EAAE;IACvB,YAAY,EAAE;QACZ,MAAM,EAAE,QAAQ;KACjB;CACF,CAAC;AAEF,IAAM,kBAAkB,GAAG,uBAAuB,CAAC,sBAAsB,CAAC,WAAW,CAAC,CAAC,IAAI,CACzF,UAAU,EACV,UAAC,WAAW,EAAE,UAAU,IAAK,OAAA,UAAU,EAAV,CAAU,CACxC,CAAC;AAEF,IAAM,mBAAmB,GAAG,uBAAuB,CAAC,sBAAsB,CAAC,YAAY,CAAC;KACrF,IAAI,CAAC,eAAe,EAAE,cAAM,OAAA,CAAC;IAC5B,MAAM,EAAE,UAAU;IAClB,QAAQ,EAAE,IAAI;CACf,CAAC,EAH2B,CAG3B,CAAC;KACF,IAAI,CAAC,cAAc,EAAE,cAAM,OAAA,CAAC;IAC3B,MAAM,EAAE,QAAQ;CACjB,CAAC,EAF0B,CAE1B,CAAC,CAAC;AAEN,MAAM,CAAC,IAAM,iBAAiB,GAAG,eAAe,CAAkB;IAChE,WAAW,EAAE,kBAAkB;IAC/B,YAAY,EAAE,mBAAmB;CAClC,CAAC,CAAC","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport { combineReducers } from 'redux';\nimport { reducerWithInitialState } from 'typescript-fsa-reducers/dist';\n\nimport { jumpToTime, startAutoReload, stopAutoReload } from './actions';\n\ninterface ManualTimeUpdatePolicy {\n  policy: 'manual';\n}\n\ninterface IntervalTimeUpdatePolicy {\n  policy: 'interval';\n  interval: number;\n}\n\ntype TimeUpdatePolicy = ManualTimeUpdatePolicy | IntervalTimeUpdatePolicy;\n\nexport interface WaffleTimeState {\n  currentTime: number;\n  updatePolicy: TimeUpdatePolicy;\n}\n\nexport const initialWaffleTimeState: WaffleTimeState = {\n  currentTime: Date.now(),\n  updatePolicy: {\n    policy: 'manual',\n  },\n};\n\nconst currentTimeReducer = reducerWithInitialState(initialWaffleTimeState.currentTime).case(\n  jumpToTime,\n  (currentTime, targetTime) => targetTime\n);\n\nconst updatePolicyReducer = reducerWithInitialState(initialWaffleTimeState.updatePolicy)\n  .case(startAutoReload, () => ({\n    policy: 'interval',\n    interval: 5000,\n  }))\n  .case(stopAutoReload, () => ({\n    policy: 'manual',\n  }));\n\nexport const waffleTimeReducer = combineReducers<WaffleTimeState>({\n  currentTime: currentTimeReducer,\n  updatePolicy: updatePolicyReducer,\n});\n"]}]}