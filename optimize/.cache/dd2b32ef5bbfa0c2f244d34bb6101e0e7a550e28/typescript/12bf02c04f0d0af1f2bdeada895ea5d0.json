{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/spaces/public/views/management/page_routes.tsx","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/spaces/public/views/management/page_routes.tsx","mtime":1567631712311},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport { I18nContext } from 'ui/i18n';\n// @ts-ignore\nimport template from 'plugins/spaces/views/management/template.html';\n// @ts-ignore\nimport { UserProfileProvider } from 'plugins/xpack_main/services/user_profile';\nimport 'ui/autoload/styles';\nimport React from 'react';\nimport { render, unmountComponentAtNode } from 'react-dom';\n// @ts-ignore\nimport routes from 'ui/routes';\nimport { SpacesManager } from '../../lib/spaces_manager';\nimport { ManageSpacePage } from './edit_space';\nimport { SpacesGridPage } from './spaces_grid';\nvar reactRootNodeId = 'manageSpacesReactRoot';\nroutes.when('/management/spaces/list', {\n    template: template,\n    controller: function ($scope, $http, chrome, Private, spacesNavState, spaceSelectorURL) {\n        var userProfile = Private(UserProfileProvider);\n        $scope.$$postDigest(function () {\n            var domNode = document.getElementById(reactRootNodeId);\n            var spacesManager = new SpacesManager($http, chrome, spaceSelectorURL);\n            render(React.createElement(I18nContext, null,\n                React.createElement(SpacesGridPage, { spacesManager: spacesManager, spacesNavState: spacesNavState, userProfile: userProfile })), domNode);\n            // unmount react on controller destroy\n            $scope.$on('$destroy', function () {\n                if (domNode) {\n                    unmountComponentAtNode(domNode);\n                }\n            });\n        });\n    },\n});\nroutes.when('/management/spaces/create', {\n    template: template,\n    controller: function ($scope, $http, chrome, Private, spacesNavState, spaceSelectorURL) {\n        var userProfile = Private(UserProfileProvider);\n        $scope.$$postDigest(function () {\n            var domNode = document.getElementById(reactRootNodeId);\n            var spacesManager = new SpacesManager($http, chrome, spaceSelectorURL);\n            render(React.createElement(I18nContext, null,\n                React.createElement(ManageSpacePage, { spacesManager: spacesManager, spacesNavState: spacesNavState, userProfile: userProfile })), domNode);\n            // unmount react on controller destroy\n            $scope.$on('$destroy', function () {\n                if (domNode) {\n                    unmountComponentAtNode(domNode);\n                }\n            });\n        });\n    },\n});\nroutes.when('/management/spaces/edit', {\n    redirectTo: '/management/spaces/list',\n});\nroutes.when('/management/spaces/edit/:spaceId', {\n    template: template,\n    controller: function ($scope, $http, $route, chrome, Private, spacesNavState, spaceSelectorURL) {\n        var userProfile = Private(UserProfileProvider);\n        $scope.$$postDigest(function () {\n            var domNode = document.getElementById(reactRootNodeId);\n            var spaceId = $route.current.params.spaceId;\n            var spacesManager = new SpacesManager($http, chrome, spaceSelectorURL);\n            render(React.createElement(I18nContext, null,\n                React.createElement(ManageSpacePage, { spaceId: spaceId, spacesManager: spacesManager, spacesNavState: spacesNavState, userProfile: userProfile })), domNode);\n            // unmount react on controller destroy\n            $scope.$on('$destroy', function () {\n                if (domNode) {\n                    unmountComponentAtNode(domNode);\n                }\n            });\n        });\n    },\n});\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/spaces/public/views/management/page_routes.tsx","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/spaces/public/views/management/page_routes.tsx"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport { I18nContext } from 'ui/i18n';\n\n// @ts-ignore\nimport template from 'plugins/spaces/views/management/template.html';\n// @ts-ignore\nimport { UserProfileProvider } from 'plugins/xpack_main/services/user_profile';\nimport 'ui/autoload/styles';\n\nimport { SpacesNavState } from 'plugins/spaces/views/nav_control';\nimport React from 'react';\nimport { render, unmountComponentAtNode } from 'react-dom';\n// @ts-ignore\nimport routes from 'ui/routes';\nimport { SpacesManager } from '../../lib/spaces_manager';\nimport { ManageSpacePage } from './edit_space';\nimport { SpacesGridPage } from './spaces_grid';\n\nconst reactRootNodeId = 'manageSpacesReactRoot';\n\nroutes.when('/management/spaces/list', {\n  template,\n  controller(\n    $scope: any,\n    $http: any,\n    chrome: any,\n    Private: any,\n    spacesNavState: SpacesNavState,\n    spaceSelectorURL: string\n  ) {\n    const userProfile = Private(UserProfileProvider);\n\n    $scope.$$postDigest(() => {\n      const domNode = document.getElementById(reactRootNodeId);\n\n      const spacesManager = new SpacesManager($http, chrome, spaceSelectorURL);\n\n      render(\n        <I18nContext>\n          <SpacesGridPage\n            spacesManager={spacesManager}\n            spacesNavState={spacesNavState}\n            userProfile={userProfile}\n          />\n        </I18nContext>,\n        domNode\n      );\n\n      // unmount react on controller destroy\n      $scope.$on('$destroy', () => {\n        if (domNode) {\n          unmountComponentAtNode(domNode);\n        }\n      });\n    });\n  },\n});\n\nroutes.when('/management/spaces/create', {\n  template,\n  controller(\n    $scope: any,\n    $http: any,\n    chrome: any,\n    Private: any,\n    spacesNavState: SpacesNavState,\n    spaceSelectorURL: string\n  ) {\n    const userProfile = Private(UserProfileProvider);\n\n    $scope.$$postDigest(() => {\n      const domNode = document.getElementById(reactRootNodeId);\n\n      const spacesManager = new SpacesManager($http, chrome, spaceSelectorURL);\n\n      render(\n        <I18nContext>\n          <ManageSpacePage\n            spacesManager={spacesManager}\n            spacesNavState={spacesNavState}\n            userProfile={userProfile}\n          />\n        </I18nContext>,\n        domNode\n      );\n\n      // unmount react on controller destroy\n      $scope.$on('$destroy', () => {\n        if (domNode) {\n          unmountComponentAtNode(domNode);\n        }\n      });\n    });\n  },\n});\n\nroutes.when('/management/spaces/edit', {\n  redirectTo: '/management/spaces/list',\n});\n\nroutes.when('/management/spaces/edit/:spaceId', {\n  template,\n  controller(\n    $scope: any,\n    $http: any,\n    $route: any,\n    chrome: any,\n    Private: any,\n    spacesNavState: SpacesNavState,\n    spaceSelectorURL: string\n  ) {\n    const userProfile = Private(UserProfileProvider);\n\n    $scope.$$postDigest(() => {\n      const domNode = document.getElementById(reactRootNodeId);\n\n      const { spaceId } = $route.current.params;\n\n      const spacesManager = new SpacesManager($http, chrome, spaceSelectorURL);\n\n      render(\n        <I18nContext>\n          <ManageSpacePage\n            spaceId={spaceId}\n            spacesManager={spacesManager}\n            spacesNavState={spacesNavState}\n            userProfile={userProfile}\n          />\n        </I18nContext>,\n        domNode\n      );\n\n      // unmount react on controller destroy\n      $scope.$on('$destroy', () => {\n        if (domNode) {\n          unmountComponentAtNode(domNode);\n        }\n      });\n    });\n  },\n});\n"]}]}