{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/apm/public/store/selectors/chartSelectors.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/apm/public/store/selectors/chartSelectors.ts","mtime":1567631711872},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport * as tslib_1 from \"tslib\";\nimport { i18n } from '@kbn/i18n';\nimport d3 from 'd3';\nimport { difference, memoize, zipObject } from 'lodash';\nimport mean from 'lodash.mean';\nimport { rgba } from 'polished';\nimport { colors } from '../../style/variables';\nimport { asDecimal, asMillis, asPercent, tpmUnit } from '../../utils/formatters';\nexport var getEmptySerie = memoize(function (start, end) {\n    if (start === void 0) { start = Date.now() - 3600000; }\n    if (end === void 0) { end = Date.now(); }\n    var dates = d3.time\n        .scale()\n        .domain([new Date(start), new Date(end)])\n        .ticks();\n    return [\n        {\n            data: dates.map(function (x) { return ({\n                x: x.getTime(),\n                y: 1\n            }); })\n        }\n    ];\n}, function (start, end) { return [start, end].join('_'); });\nexport function getTransactionCharts(urlParams, timeseriesResponse) {\n    var start = urlParams.start, end = urlParams.end, transactionType = urlParams.transactionType;\n    var apmTimeseries = timeseriesResponse.apmTimeseries, anomalyTimeseries = timeseriesResponse.anomalyTimeseries;\n    var noHits = apmTimeseries.totalHits === 0;\n    var tpmSeries = noHits\n        ? getEmptySerie(start, end)\n        : getTpmSeries(apmTimeseries, transactionType);\n    var responseTimeSeries = noHits\n        ? getEmptySerie(start, end)\n        : getResponseTimeSeries(apmTimeseries, anomalyTimeseries);\n    var chartsResult = {\n        noHits: noHits,\n        tpmSeries: tpmSeries,\n        responseTimeSeries: responseTimeSeries\n    };\n    return chartsResult;\n}\nexport function getMemorySeries(urlParams, memoryChartResponse) {\n    var start = urlParams.start, end = urlParams.end;\n    var series = memoryChartResponse.series, overallValues = memoryChartResponse.overallValues, totalHits = memoryChartResponse.totalHits;\n    var seriesList = totalHits === 0\n        ? getEmptySerie(start, end)\n        : [\n            {\n                title: i18n.translate('xpack.apm.chart.memorySeries.systemMaxLabel', {\n                    defaultMessage: 'System max'\n                }),\n                data: series.memoryUsedMax,\n                type: 'linemark',\n                color: colors.apmBlue,\n                legendValue: asPercent(overallValues.memoryUsedMax || 0, 1)\n            },\n            {\n                title: i18n.translate('xpack.apm.chart.memorySeries.systemAverageLabel', {\n                    defaultMessage: 'System average'\n                }),\n                data: series.memoryUsedAvg,\n                type: 'linemark',\n                color: colors.apmGreen,\n                legendValue: asPercent(overallValues.memoryUsedAvg || 0, 1)\n            }\n        ];\n    return tslib_1.__assign({}, memoryChartResponse, { series: seriesList });\n}\nexport function getCPUSeries(CPUChartResponse) {\n    var series = CPUChartResponse.series, overallValues = CPUChartResponse.overallValues;\n    var seriesList = [\n        {\n            title: i18n.translate('xpack.apm.chart.cpuSeries.systemMaxLabel', {\n                defaultMessage: 'System max'\n            }),\n            data: series.systemCPUMax,\n            type: 'linemark',\n            color: colors.apmBlue,\n            legendValue: asPercent(overallValues.systemCPUMax || 0, 1)\n        },\n        {\n            title: i18n.translate('xpack.apm.chart.cpuSeries.systemAverageLabel', {\n                defaultMessage: 'System average'\n            }),\n            data: series.systemCPUAverage,\n            type: 'linemark',\n            color: colors.apmGreen,\n            legendValue: asPercent(overallValues.systemCPUAverage || 0, 1)\n        },\n        {\n            title: i18n.translate('xpack.apm.chart.cpuSeries.processMaxLabel', {\n                defaultMessage: 'Process max'\n            }),\n            data: series.processCPUMax,\n            type: 'linemark',\n            color: colors.apmOrange,\n            legendValue: asPercent(overallValues.processCPUMax || 0, 1)\n        },\n        {\n            title: i18n.translate('xpack.apm.chart.cpuSeries.processAverageLabel', {\n                defaultMessage: 'Process average'\n            }),\n            data: series.processCPUAverage,\n            type: 'linemark',\n            color: colors.apmYellow,\n            legendValue: asPercent(overallValues.processCPUAverage || 0, 1)\n        }\n    ];\n    return tslib_1.__assign({}, CPUChartResponse, { series: seriesList });\n}\nexport function getResponseTimeSeries(apmTimeseries, anomalyTimeseries) {\n    var overallAvgDuration = apmTimeseries.overallAvgDuration;\n    var _a = apmTimeseries.responseTimes, avg = _a.avg, p95 = _a.p95, p99 = _a.p99;\n    var series = [\n        {\n            title: i18n.translate('xpack.apm.transactions.chart.averageLabel', {\n                defaultMessage: 'Avg.'\n            }),\n            data: avg,\n            legendValue: asMillis(overallAvgDuration),\n            type: 'linemark',\n            color: colors.apmBlue\n        },\n        {\n            title: i18n.translate('xpack.apm.transactions.chart.95thPercentileLabel', {\n                defaultMessage: '95th percentile'\n            }),\n            titleShort: '95th',\n            data: p95,\n            type: 'linemark',\n            color: colors.apmYellow\n        },\n        {\n            title: i18n.translate('xpack.apm.transactions.chart.99thPercentileLabel', {\n                defaultMessage: '99th percentile'\n            }),\n            titleShort: '99th',\n            data: p99,\n            type: 'linemark',\n            color: colors.apmOrange\n        }\n    ];\n    if (anomalyTimeseries) {\n        // insert after Avg. series\n        series.splice(1, 0, getAnomalyBoundariesSeries(anomalyTimeseries.anomalyBoundaries), getAnomalyScoreSeries(anomalyTimeseries.anomalyScore));\n    }\n    return series;\n}\nexport function getAnomalyScoreSeries(data) {\n    return {\n        title: i18n.translate('xpack.apm.transactions.chart.anomalyScoreLabel', {\n            defaultMessage: 'Anomaly score'\n        }),\n        hideLegend: true,\n        hideTooltipValue: true,\n        data: data,\n        type: 'areaMaxHeight',\n        color: 'none',\n        areaColor: rgba(colors.apmRed, 0.1)\n    };\n}\nfunction getAnomalyBoundariesSeries(data) {\n    return {\n        title: i18n.translate('xpack.apm.transactions.chart.anomalyBoundariesLabel', {\n            defaultMessage: 'Anomaly Boundaries'\n        }),\n        hideLegend: true,\n        hideTooltipValue: true,\n        data: data,\n        type: 'area',\n        color: 'none',\n        areaColor: rgba(colors.apmBlue, 0.1)\n    };\n}\nexport function getTpmSeries(apmTimeseries, transactionType) {\n    var tpmBuckets = apmTimeseries.tpmBuckets;\n    var bucketKeys = tpmBuckets.map(function (_a) {\n        var key = _a.key;\n        return key;\n    });\n    var getColor = getColorByKey(bucketKeys);\n    return tpmBuckets.map(function (bucket) {\n        var avg = mean(bucket.dataPoints.map(function (p) { return p.y; }));\n        return {\n            title: bucket.key,\n            data: bucket.dataPoints,\n            legendValue: asDecimal(avg) + \" \" + tpmUnit(transactionType || ''),\n            type: 'linemark',\n            color: getColor(bucket.key)\n        };\n    });\n}\nfunction getColorByKey(keys) {\n    var assignedColors = {\n        'HTTP 2xx': colors.apmGreen,\n        'HTTP 3xx': colors.apmYellow,\n        'HTTP 4xx': colors.apmOrange,\n        'HTTP 5xx': colors.apmRed2\n    };\n    var unknownKeys = difference(keys, Object.keys(assignedColors));\n    var unassignedColors = zipObject(unknownKeys, [\n        colors.apmBlue,\n        colors.apmPurple,\n        colors.apmPink,\n        colors.apmTan,\n        colors.apmRed,\n        colors.apmBrown\n    ]);\n    return function (key) { return assignedColors[key] || unassignedColors[key]; };\n}\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/apm/public/store/selectors/chartSelectors.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/apm/public/store/selectors/chartSelectors.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport { i18n } from '@kbn/i18n';\nimport d3 from 'd3';\nimport { difference, memoize, zipObject } from 'lodash';\nimport mean from 'lodash.mean';\nimport { rgba } from 'polished';\nimport { MetricsChartAPIResponse } from 'x-pack/plugins/apm/server/lib/metrics/get_all_metrics_chart_data';\nimport { TimeSeriesAPIResponse } from 'x-pack/plugins/apm/server/lib/transactions/charts';\nimport { AnomalyTimeSeriesResponse } from 'x-pack/plugins/apm/server/lib/transactions/charts/get_anomaly_data/transform';\nimport { ApmTimeSeriesResponse } from 'x-pack/plugins/apm/server/lib/transactions/charts/get_timeseries_data/transform';\nimport { StringMap } from 'x-pack/plugins/apm/typings/common';\nimport {\n  Coordinate,\n  RectCoordinate\n} from 'x-pack/plugins/apm/typings/timeseries';\nimport { colors } from '../../style/variables';\nimport {\n  asDecimal,\n  asMillis,\n  asPercent,\n  tpmUnit\n} from '../../utils/formatters';\nimport { IUrlParams } from '../urlParams';\n\nexport const getEmptySerie = memoize(\n  (start = Date.now() - 3600000, end = Date.now()) => {\n    const dates = d3.time\n      .scale()\n      .domain([new Date(start), new Date(end)])\n      .ticks();\n\n    return [\n      {\n        data: dates.map(x => ({\n          x: x.getTime(),\n          y: 1\n        }))\n      }\n    ];\n  },\n  (start: number, end: number) => [start, end].join('_')\n);\n\ninterface IEmptySeries {\n  data: Coordinate[];\n}\n\nexport interface ITpmBucket {\n  title: string;\n  data: Coordinate[];\n  legendValue: string;\n  type: string;\n  color: string;\n}\n\nexport interface ITransactionChartData {\n  noHits: boolean;\n  tpmSeries: ITpmBucket[] | IEmptySeries[];\n  responseTimeSeries: TimeSerie[] | IEmptySeries[];\n}\n\nexport function getTransactionCharts(\n  urlParams: IUrlParams,\n  timeseriesResponse: TimeSeriesAPIResponse\n) {\n  const { start, end, transactionType } = urlParams;\n  const { apmTimeseries, anomalyTimeseries } = timeseriesResponse;\n  const noHits = apmTimeseries.totalHits === 0;\n  const tpmSeries = noHits\n    ? getEmptySerie(start, end)\n    : getTpmSeries(apmTimeseries, transactionType);\n\n  const responseTimeSeries = noHits\n    ? getEmptySerie(start, end)\n    : getResponseTimeSeries(apmTimeseries, anomalyTimeseries);\n\n  const chartsResult: ITransactionChartData = {\n    noHits,\n    tpmSeries,\n    responseTimeSeries\n  };\n\n  return chartsResult;\n}\n\nexport interface IMemoryChartData extends MetricsChartAPIResponse {\n  series: TimeSerie[] | IEmptySeries[];\n}\n\nexport function getMemorySeries(\n  urlParams: IUrlParams,\n  memoryChartResponse: MetricsChartAPIResponse['memory']\n) {\n  const { start, end } = urlParams;\n  const { series, overallValues, totalHits } = memoryChartResponse;\n  const seriesList: IMemoryChartData['series'] =\n    totalHits === 0\n      ? getEmptySerie(start, end)\n      : [\n          {\n            title: i18n.translate(\n              'xpack.apm.chart.memorySeries.systemMaxLabel',\n              {\n                defaultMessage: 'System max'\n              }\n            ),\n            data: series.memoryUsedMax,\n            type: 'linemark',\n            color: colors.apmBlue,\n            legendValue: asPercent(overallValues.memoryUsedMax || 0, 1)\n          },\n          {\n            title: i18n.translate(\n              'xpack.apm.chart.memorySeries.systemAverageLabel',\n              {\n                defaultMessage: 'System average'\n              }\n            ),\n            data: series.memoryUsedAvg,\n            type: 'linemark',\n            color: colors.apmGreen,\n            legendValue: asPercent(overallValues.memoryUsedAvg || 0, 1)\n          }\n        ];\n\n  return {\n    ...memoryChartResponse,\n    series: seriesList\n  };\n}\n\nexport interface ICPUChartData extends MetricsChartAPIResponse {\n  series: TimeSerie[];\n}\n\nexport function getCPUSeries(CPUChartResponse: MetricsChartAPIResponse['cpu']) {\n  const { series, overallValues } = CPUChartResponse;\n\n  const seriesList: TimeSerie[] = [\n    {\n      title: i18n.translate('xpack.apm.chart.cpuSeries.systemMaxLabel', {\n        defaultMessage: 'System max'\n      }),\n      data: series.systemCPUMax,\n      type: 'linemark',\n      color: colors.apmBlue,\n      legendValue: asPercent(overallValues.systemCPUMax || 0, 1)\n    },\n    {\n      title: i18n.translate('xpack.apm.chart.cpuSeries.systemAverageLabel', {\n        defaultMessage: 'System average'\n      }),\n      data: series.systemCPUAverage,\n      type: 'linemark',\n      color: colors.apmGreen,\n      legendValue: asPercent(overallValues.systemCPUAverage || 0, 1)\n    },\n    {\n      title: i18n.translate('xpack.apm.chart.cpuSeries.processMaxLabel', {\n        defaultMessage: 'Process max'\n      }),\n      data: series.processCPUMax,\n      type: 'linemark',\n      color: colors.apmOrange,\n      legendValue: asPercent(overallValues.processCPUMax || 0, 1)\n    },\n    {\n      title: i18n.translate('xpack.apm.chart.cpuSeries.processAverageLabel', {\n        defaultMessage: 'Process average'\n      }),\n      data: series.processCPUAverage,\n      type: 'linemark',\n      color: colors.apmYellow,\n      legendValue: asPercent(overallValues.processCPUAverage || 0, 1)\n    }\n  ];\n\n  return { ...CPUChartResponse, series: seriesList };\n}\n\ninterface TimeSerie {\n  title: string;\n  titleShort?: string;\n  hideLegend?: boolean;\n  hideTooltipValue?: boolean;\n  data: Array<Coordinate | RectCoordinate>;\n  legendValue?: string;\n  type: string;\n  color: string;\n  areaColor?: string;\n}\n\nexport function getResponseTimeSeries(\n  apmTimeseries: ApmTimeSeriesResponse,\n  anomalyTimeseries?: AnomalyTimeSeriesResponse\n) {\n  const { overallAvgDuration } = apmTimeseries;\n  const { avg, p95, p99 } = apmTimeseries.responseTimes;\n\n  const series: TimeSerie[] = [\n    {\n      title: i18n.translate('xpack.apm.transactions.chart.averageLabel', {\n        defaultMessage: 'Avg.'\n      }),\n      data: avg,\n      legendValue: asMillis(overallAvgDuration),\n      type: 'linemark',\n      color: colors.apmBlue\n    },\n    {\n      title: i18n.translate(\n        'xpack.apm.transactions.chart.95thPercentileLabel',\n        {\n          defaultMessage: '95th percentile'\n        }\n      ),\n      titleShort: '95th',\n      data: p95,\n      type: 'linemark',\n      color: colors.apmYellow\n    },\n    {\n      title: i18n.translate(\n        'xpack.apm.transactions.chart.99thPercentileLabel',\n        {\n          defaultMessage: '99th percentile'\n        }\n      ),\n      titleShort: '99th',\n      data: p99,\n      type: 'linemark',\n      color: colors.apmOrange\n    }\n  ];\n\n  if (anomalyTimeseries) {\n    // insert after Avg. series\n    series.splice(\n      1,\n      0,\n      getAnomalyBoundariesSeries(anomalyTimeseries.anomalyBoundaries),\n      getAnomalyScoreSeries(anomalyTimeseries.anomalyScore)\n    );\n  }\n\n  return series;\n}\n\nexport function getAnomalyScoreSeries(data: RectCoordinate[]) {\n  return {\n    title: i18n.translate('xpack.apm.transactions.chart.anomalyScoreLabel', {\n      defaultMessage: 'Anomaly score'\n    }),\n    hideLegend: true,\n    hideTooltipValue: true,\n    data,\n    type: 'areaMaxHeight',\n    color: 'none',\n    areaColor: rgba(colors.apmRed, 0.1)\n  };\n}\n\nfunction getAnomalyBoundariesSeries(data: Coordinate[]) {\n  return {\n    title: i18n.translate(\n      'xpack.apm.transactions.chart.anomalyBoundariesLabel',\n      {\n        defaultMessage: 'Anomaly Boundaries'\n      }\n    ),\n    hideLegend: true,\n    hideTooltipValue: true,\n    data,\n    type: 'area',\n    color: 'none',\n    areaColor: rgba(colors.apmBlue, 0.1)\n  };\n}\n\nexport function getTpmSeries(\n  apmTimeseries: ApmTimeSeriesResponse,\n  transactionType?: string\n) {\n  const { tpmBuckets } = apmTimeseries;\n  const bucketKeys = tpmBuckets.map(({ key }) => key);\n  const getColor = getColorByKey(bucketKeys);\n\n  return tpmBuckets.map(bucket => {\n    const avg = mean(bucket.dataPoints.map(p => p.y));\n    return {\n      title: bucket.key,\n      data: bucket.dataPoints,\n      legendValue: `${asDecimal(avg)} ${tpmUnit(transactionType || '')}`,\n      type: 'linemark',\n      color: getColor(bucket.key)\n    };\n  });\n}\n\nfunction getColorByKey(keys: string[]) {\n  const assignedColors: StringMap<string> = {\n    'HTTP 2xx': colors.apmGreen,\n    'HTTP 3xx': colors.apmYellow,\n    'HTTP 4xx': colors.apmOrange,\n    'HTTP 5xx': colors.apmRed2\n  };\n\n  const unknownKeys = difference(keys, Object.keys(assignedColors));\n  const unassignedColors: StringMap<string> = zipObject(unknownKeys, [\n    colors.apmBlue,\n    colors.apmPurple,\n    colors.apmPink,\n    colors.apmTan,\n    colors.apmRed,\n    colors.apmBrown\n  ]);\n\n  return (key: string) => assignedColors[key] || unassignedColors[key];\n}\n"]}]}