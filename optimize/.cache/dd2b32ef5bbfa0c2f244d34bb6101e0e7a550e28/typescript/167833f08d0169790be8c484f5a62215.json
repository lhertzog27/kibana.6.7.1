{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/apm/public/services/rest/ml.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/apm/public/services/rest/ml.ts","mtime":1567631711870},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport * as tslib_1 from \"tslib\";\nimport chrome from 'ui/chrome';\nimport { SERVICE_NAME, TRANSACTION_TYPE } from '../../../common/constants';\nimport { callApi } from './callApi';\nexport function getMlPrefix(serviceName, transactionType) {\n    return (serviceName + \"-\" + (transactionType ? transactionType + '-' : '')).toLowerCase();\n}\nexport function startMLJob(_a) {\n    var serviceName = _a.serviceName, transactionType = _a.transactionType;\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n        var _b, _c, indexPatternName, groups, filter;\n        return tslib_1.__generator(this, function (_d) {\n            indexPatternName = chrome.getInjected('apmIndexPatternTitle');\n            groups = ['apm', serviceName.toLowerCase()];\n            filter = [{ term: (_b = {}, _b[SERVICE_NAME] = serviceName, _b) }];\n            if (transactionType) {\n                groups.push(transactionType.toLowerCase());\n                filter.push({ term: (_c = {}, _c[TRANSACTION_TYPE] = transactionType, _c) });\n            }\n            return [2 /*return*/, callApi({\n                    method: 'POST',\n                    pathname: \"/api/ml/modules/setup/apm_transaction\",\n                    body: JSON.stringify({\n                        prefix: getMlPrefix(serviceName, transactionType),\n                        groups: groups,\n                        indexPatternName: indexPatternName,\n                        startDatafeed: true,\n                        query: {\n                            bool: {\n                                filter: filter\n                            }\n                        }\n                    })\n                })];\n        });\n    });\n}\nexport function getMLJob(_a) {\n    var serviceName = _a.serviceName, transactionType = _a.transactionType, _b = _a.anomalyName, anomalyName = _b === void 0 ? 'high_mean_response_time' : _b;\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n        return tslib_1.__generator(this, function (_c) {\n            return [2 /*return*/, callApi({\n                    method: 'GET',\n                    pathname: \"/api/ml/anomaly_detectors/\" + getMlPrefix(serviceName, transactionType) + anomalyName\n                })];\n        });\n    });\n}\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/apm/public/services/rest/ml.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/apm/public/services/rest/ml.ts"],"names":[],"mappings":"AAAA;;;;GAIG;;AAGH,OAAO,MAAM,MAAM,WAAW,CAAC;AAC/B,OAAO,EAAE,YAAY,EAAE,gBAAgB,EAAE,MAAM,2BAA2B,CAAC;AAC3E,OAAO,EAAE,OAAO,EAAE,MAAM,WAAW,CAAC;AAEpC,MAAM,UAAU,WAAW,CAAC,WAAmB,EAAE,eAAwB;IACvE,OAAO,CAAG,WAAW,UACnB,eAAe,CAAC,CAAC,CAAC,eAAe,GAAG,GAAG,CAAC,CAAC,CAAC,EAAE,CAC5C,CAAA,CAAC,WAAW,EAAE,CAAC;AACnB,CAAC;AAmBD,MAAM,UAAgB,UAAU,CAAC,EAMhC;QALC,4BAAW,EACX,oCAAe;;;;YAKT,gBAAgB,GAAG,MAAM,CAAC,WAAW,CAAC,sBAAsB,CAAC,CAAC;YAC9D,MAAM,GAAG,CAAC,KAAK,EAAE,WAAW,CAAC,WAAW,EAAE,CAAC,CAAC;YAC5C,MAAM,GAAe,CAAC,EAAE,IAAI,YAAI,GAAC,YAAY,IAAG,WAAW,KAAE,EAAE,CAAC,CAAC;YACvE,IAAI,eAAe,EAAE;gBACnB,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,WAAW,EAAE,CAAC,CAAC;gBAC3C,MAAM,CAAC,IAAI,CAAC,EAAE,IAAI,YAAI,GAAC,gBAAgB,IAAG,eAAe,KAAE,EAAE,CAAC,CAAC;aAChE;YACD,sBAAO,OAAO,CAA0B;oBACtC,MAAM,EAAE,MAAM;oBACd,QAAQ,EAAE,uCAAuC;oBACjD,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;wBACnB,MAAM,EAAE,WAAW,CAAC,WAAW,EAAE,eAAe,CAAC;wBACjD,MAAM,QAAA;wBACN,gBAAgB,kBAAA;wBAChB,aAAa,EAAE,IAAI;wBACnB,KAAK,EAAE;4BACL,IAAI,EAAE;gCACJ,MAAM,QAAA;6BACP;yBACF;qBACF,CAAC;iBACH,CAAC,EAAC;;;CACJ;AAWD,MAAM,UAAgB,QAAQ,CAAC,EAQ9B;QAPC,4BAAW,EACX,oCAAe,EACf,mBAAuC,EAAvC,4DAAuC;;;YAMvC,sBAAO,OAAO,CAAmB;oBAC/B,MAAM,EAAE,KAAK;oBACb,QAAQ,EAAE,+BAA6B,WAAW,CAChD,WAAW,EACX,eAAe,CAChB,GAAG,WAAa;iBAClB,CAAC,EAAC;;;CACJ","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport { ESFilter } from 'elasticsearch';\nimport chrome from 'ui/chrome';\nimport { SERVICE_NAME, TRANSACTION_TYPE } from '../../../common/constants';\nimport { callApi } from './callApi';\n\nexport function getMlPrefix(serviceName: string, transactionType?: string) {\n  return `${serviceName}-${\n    transactionType ? transactionType + '-' : ''\n  }`.toLowerCase();\n}\n\ninterface MlResponseItem {\n  id: string;\n  success: boolean;\n  error?: {\n    msg: string;\n    body: string;\n    path: string;\n    response: string;\n    statusCode: number;\n  };\n}\n\ninterface StartedMLJobApiResponse {\n  datafeeds: MlResponseItem[];\n  jobs: MlResponseItem[];\n}\n\nexport async function startMLJob({\n  serviceName,\n  transactionType\n}: {\n  serviceName: string;\n  transactionType?: string;\n}) {\n  const indexPatternName = chrome.getInjected('apmIndexPatternTitle');\n  const groups = ['apm', serviceName.toLowerCase()];\n  const filter: ESFilter[] = [{ term: { [SERVICE_NAME]: serviceName } }];\n  if (transactionType) {\n    groups.push(transactionType.toLowerCase());\n    filter.push({ term: { [TRANSACTION_TYPE]: transactionType } });\n  }\n  return callApi<StartedMLJobApiResponse>({\n    method: 'POST',\n    pathname: `/api/ml/modules/setup/apm_transaction`,\n    body: JSON.stringify({\n      prefix: getMlPrefix(serviceName, transactionType),\n      groups,\n      indexPatternName,\n      startDatafeed: true,\n      query: {\n        bool: {\n          filter\n        }\n      }\n    })\n  });\n}\n\n// https://www.elastic.co/guide/en/elasticsearch/reference/6.5/ml-get-job.html\nexport interface MLJobApiResponse {\n  count: number;\n  jobs: Array<{\n    job_id: string;\n    [key: string]: any;\n  }>;\n}\n\nexport async function getMLJob({\n  serviceName,\n  transactionType,\n  anomalyName = 'high_mean_response_time'\n}: {\n  serviceName: string;\n  transactionType?: string;\n  anomalyName?: string;\n}) {\n  return callApi<MLJobApiResponse>({\n    method: 'GET',\n    pathname: `/api/ml/anomaly_detectors/${getMlPrefix(\n      serviceName,\n      transactionType\n    )}${anomalyName}`\n  });\n}\n"]}]}