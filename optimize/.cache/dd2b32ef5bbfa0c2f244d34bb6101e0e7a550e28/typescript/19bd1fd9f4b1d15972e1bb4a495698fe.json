{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/lib/adapters/observable_api/kibana_observable_api.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/lib/adapters/observable_api/kibana_observable_api.ts","mtime":1567631711985},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport * as tslib_1 from \"tslib\";\nimport { ajax } from 'rxjs/ajax';\nimport { map } from 'rxjs/operators';\nvar InfraKibanaObservableApiAdapter = /** @class */ (function () {\n    function InfraKibanaObservableApiAdapter(_a) {\n        var basePath = _a.basePath, xsrfToken = _a.xsrfToken;\n        var _this = this;\n        this.post = function (_a) {\n            var url = _a.url, body = _a.body;\n            return ajax({\n                body: body ? JSON.stringify(body) : undefined,\n                headers: tslib_1.__assign({}, _this.defaultHeaders, { 'Content-Type': 'application/json' }),\n                method: 'POST',\n                responseType: 'json',\n                timeout: 30000,\n                url: _this.basePath + \"/api/\" + url,\n                withCredentials: true,\n            }).pipe(map(function (_a) {\n                var response = _a.response, status = _a.status;\n                return ({ response: response, status: status });\n            }));\n        };\n        this.basePath = basePath;\n        this.defaultHeaders = {\n            'kbn-version': xsrfToken,\n        };\n    }\n    return InfraKibanaObservableApiAdapter;\n}());\nexport { InfraKibanaObservableApiAdapter };\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/lib/adapters/observable_api/kibana_observable_api.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/lib/adapters/observable_api/kibana_observable_api.ts"],"names":[],"mappings":"AAAA;;;;GAIG;;AAEH,OAAO,EAAE,IAAI,EAAE,MAAM,WAAW,CAAC;AACjC,OAAO,EAAE,GAAG,EAAE,MAAM,gBAAgB,CAAC;AAQrC;IAME,yCAAY,EAAgE;YAA9D,sBAAQ,EAAE,wBAAS;QAAjC,iBAKC;QAEM,SAAI,GAAG,UAA4D,EAG9B;gBAF1C,YAAG,EACH,cAAI;YAEJ,OAAA,IAAI,CAAC;gBACH,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS;gBAC7C,OAAO,uBACF,KAAI,CAAC,cAAc,IACtB,cAAc,EAAE,kBAAkB,GACnC;gBACD,MAAM,EAAE,MAAM;gBACd,YAAY,EAAE,MAAM;gBACpB,OAAO,EAAE,KAAK;gBACd,GAAG,EAAK,KAAI,CAAC,QAAQ,aAAQ,GAAK;gBAClC,eAAe,EAAE,IAAI;aACtB,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,UAAC,EAAoB;oBAAlB,sBAAQ,EAAE,kBAAM;gBAAO,OAAA,CAAC,EAAE,QAAQ,UAAA,EAAE,MAAM,QAAA,EAAE,CAAC;YAAtB,CAAsB,CAAC,CAAC;QAX9D,CAW8D,CAAC;QArB/D,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,cAAc,GAAG;YACpB,aAAa,EAAE,SAAS;SACzB,CAAC;IACJ,CAAC;IAkBH,sCAAC;AAAD,CAAC,AA7BD,IA6BC","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport { ajax } from 'rxjs/ajax';\nimport { map } from 'rxjs/operators';\n\nimport {\n  InfraObservableApi,\n  InfraObservableApiPostParams,\n  InfraObservableApiResponse,\n} from '../../lib';\n\nexport class InfraKibanaObservableApiAdapter implements InfraObservableApi {\n  private basePath: string;\n  private defaultHeaders: {\n    [headerName: string]: string;\n  };\n\n  constructor({ basePath, xsrfToken }: { basePath: string; xsrfToken: string }) {\n    this.basePath = basePath;\n    this.defaultHeaders = {\n      'kbn-version': xsrfToken,\n    };\n  }\n\n  public post = <RequestBody extends {} = {}, ResponseBody extends {} = {}>({\n    url,\n    body,\n  }: InfraObservableApiPostParams<RequestBody>): InfraObservableApiResponse<ResponseBody> =>\n    ajax({\n      body: body ? JSON.stringify(body) : undefined,\n      headers: {\n        ...this.defaultHeaders,\n        'Content-Type': 'application/json',\n      },\n      method: 'POST',\n      responseType: 'json',\n      timeout: 30000,\n      url: `${this.basePath}/api/${url}`,\n      withCredentials: true,\n    }).pipe(map(({ response, status }) => ({ response, status })));\n}\n"]}]}