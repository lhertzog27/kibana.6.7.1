{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/spaces/common/space_attributes.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/spaces/common/space_attributes.ts","mtime":1567631712308},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport { VISUALIZATION_COLORS } from '@elastic/eui';\nimport { MAX_SPACE_INITIALS } from './constants';\n// code point for lowercase \"a\"\nvar FALLBACK_CODE_POINT = 97;\n/**\n * Determines the color for the provided space.\n * If a color is present on the Space itself, then that is used.\n * Otherwise, a color is provided from EUI's Visualization Colors based on the space name.\n *\n * @param {Space} space\n */\nexport function getSpaceColor(space) {\n    if (space === void 0) { space = {}; }\n    var color = space.color, _a = space.name, name = _a === void 0 ? '' : _a;\n    if (color) {\n        return color;\n    }\n    var firstCodePoint = name.codePointAt(0) || FALLBACK_CODE_POINT;\n    return VISUALIZATION_COLORS[firstCodePoint % VISUALIZATION_COLORS.length];\n}\n/**\n * Determines the initials for the provided space.\n * If initials are present on the Space itself, then that is used.\n * Otherwise, the initials are calculated based off the words in the space name, with a max length of 2 characters.\n *\n * @param {Space} space\n */\nexport function getSpaceInitials(space) {\n    if (space === void 0) { space = {}; }\n    var initials = space.initials, _a = space.name, name = _a === void 0 ? '' : _a;\n    if (initials) {\n        return initials;\n    }\n    var words = name.split(' ');\n    var numInitials = Math.min(MAX_SPACE_INITIALS, words.length);\n    words.splice(numInitials, words.length);\n    return words.map(function (word) { return word.substring(0, 1); }).join('');\n}\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/spaces/common/space_attributes.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/spaces/common/space_attributes.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAEH,OAAO,EAAE,oBAAoB,EAAE,MAAM,cAAc,CAAC;AACpD,OAAO,EAAE,kBAAkB,EAAE,MAAM,aAAa,CAAC;AAGjD,+BAA+B;AAC/B,IAAM,mBAAmB,GAAG,EAAE,CAAC;AAE/B;;;;;;GAMG;AACH,MAAM,UAAU,aAAa,CAAC,KAA0B;IAA1B,sBAAA,EAAA,UAA0B;IAC9C,IAAA,mBAAK,EAAE,eAAS,EAAT,8BAAS,CAAW;IAEnC,IAAI,KAAK,EAAE;QACT,OAAO,KAAK,CAAC;KACd;IAED,IAAM,cAAc,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,mBAAmB,CAAC;IAElE,OAAO,oBAAoB,CAAC,cAAc,GAAG,oBAAoB,CAAC,MAAM,CAAC,CAAC;AAC5E,CAAC;AAED;;;;;;GAMG;AACH,MAAM,UAAU,gBAAgB,CAAC,KAA0B;IAA1B,sBAAA,EAAA,UAA0B;IACjD,IAAA,yBAAQ,EAAE,eAAS,EAAT,8BAAS,CAAW;IAEtC,IAAI,QAAQ,EAAE;QACZ,OAAO,QAAQ,CAAC;KACjB;IAED,IAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAE9B,IAAM,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,kBAAkB,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC;IAE/D,KAAK,CAAC,MAAM,CAAC,WAAW,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC;IAExC,OAAO,KAAK,CAAC,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,EAApB,CAAoB,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;AAC1D,CAAC","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport { VISUALIZATION_COLORS } from '@elastic/eui';\nimport { MAX_SPACE_INITIALS } from './constants';\nimport { Space } from './model/space';\n\n// code point for lowercase \"a\"\nconst FALLBACK_CODE_POINT = 97;\n\n/**\n * Determines the color for the provided space.\n * If a color is present on the Space itself, then that is used.\n * Otherwise, a color is provided from EUI's Visualization Colors based on the space name.\n *\n * @param {Space} space\n */\nexport function getSpaceColor(space: Partial<Space> = {}) {\n  const { color, name = '' } = space;\n\n  if (color) {\n    return color;\n  }\n\n  const firstCodePoint = name.codePointAt(0) || FALLBACK_CODE_POINT;\n\n  return VISUALIZATION_COLORS[firstCodePoint % VISUALIZATION_COLORS.length];\n}\n\n/**\n * Determines the initials for the provided space.\n * If initials are present on the Space itself, then that is used.\n * Otherwise, the initials are calculated based off the words in the space name, with a max length of 2 characters.\n *\n * @param {Space} space\n */\nexport function getSpaceInitials(space: Partial<Space> = {}) {\n  const { initials, name = '' } = space;\n\n  if (initials) {\n    return initials;\n  }\n\n  const words = name.split(' ');\n\n  const numInitials = Math.min(MAX_SPACE_INITIALS, words.length);\n\n  words.splice(numInitials, words.length);\n\n  return words.map(word => word.substring(0, 1)).join('');\n}\n"]}]}