{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/graphql/types.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/graphql/types.ts","mtime":1567631711985},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/* tslint:disable */\n// ====================================================\n// Enums\n// ====================================================\nexport var InfraIndexType;\n(function (InfraIndexType) {\n    InfraIndexType[\"ANY\"] = \"ANY\";\n    InfraIndexType[\"LOGS\"] = \"LOGS\";\n    InfraIndexType[\"METRICS\"] = \"METRICS\";\n})(InfraIndexType || (InfraIndexType = {}));\nexport var InfraNodeType;\n(function (InfraNodeType) {\n    InfraNodeType[\"pod\"] = \"pod\";\n    InfraNodeType[\"container\"] = \"container\";\n    InfraNodeType[\"host\"] = \"host\";\n})(InfraNodeType || (InfraNodeType = {}));\nexport var InfraPathType;\n(function (InfraPathType) {\n    InfraPathType[\"terms\"] = \"terms\";\n    InfraPathType[\"filters\"] = \"filters\";\n    InfraPathType[\"hosts\"] = \"hosts\";\n    InfraPathType[\"pods\"] = \"pods\";\n    InfraPathType[\"containers\"] = \"containers\";\n    InfraPathType[\"custom\"] = \"custom\";\n})(InfraPathType || (InfraPathType = {}));\nexport var InfraMetricType;\n(function (InfraMetricType) {\n    InfraMetricType[\"count\"] = \"count\";\n    InfraMetricType[\"cpu\"] = \"cpu\";\n    InfraMetricType[\"load\"] = \"load\";\n    InfraMetricType[\"memory\"] = \"memory\";\n    InfraMetricType[\"tx\"] = \"tx\";\n    InfraMetricType[\"rx\"] = \"rx\";\n    InfraMetricType[\"logRate\"] = \"logRate\";\n})(InfraMetricType || (InfraMetricType = {}));\nexport var InfraMetric;\n(function (InfraMetric) {\n    InfraMetric[\"hostSystemOverview\"] = \"hostSystemOverview\";\n    InfraMetric[\"hostCpuUsage\"] = \"hostCpuUsage\";\n    InfraMetric[\"hostFilesystem\"] = \"hostFilesystem\";\n    InfraMetric[\"hostK8sOverview\"] = \"hostK8sOverview\";\n    InfraMetric[\"hostK8sCpuCap\"] = \"hostK8sCpuCap\";\n    InfraMetric[\"hostK8sDiskCap\"] = \"hostK8sDiskCap\";\n    InfraMetric[\"hostK8sMemoryCap\"] = \"hostK8sMemoryCap\";\n    InfraMetric[\"hostK8sPodCap\"] = \"hostK8sPodCap\";\n    InfraMetric[\"hostLoad\"] = \"hostLoad\";\n    InfraMetric[\"hostMemoryUsage\"] = \"hostMemoryUsage\";\n    InfraMetric[\"hostNetworkTraffic\"] = \"hostNetworkTraffic\";\n    InfraMetric[\"podOverview\"] = \"podOverview\";\n    InfraMetric[\"podCpuUsage\"] = \"podCpuUsage\";\n    InfraMetric[\"podMemoryUsage\"] = \"podMemoryUsage\";\n    InfraMetric[\"podLogUsage\"] = \"podLogUsage\";\n    InfraMetric[\"podNetworkTraffic\"] = \"podNetworkTraffic\";\n    InfraMetric[\"containerOverview\"] = \"containerOverview\";\n    InfraMetric[\"containerCpuKernel\"] = \"containerCpuKernel\";\n    InfraMetric[\"containerCpuUsage\"] = \"containerCpuUsage\";\n    InfraMetric[\"containerDiskIOOps\"] = \"containerDiskIOOps\";\n    InfraMetric[\"containerDiskIOBytes\"] = \"containerDiskIOBytes\";\n    InfraMetric[\"containerMemory\"] = \"containerMemory\";\n    InfraMetric[\"containerNetworkTraffic\"] = \"containerNetworkTraffic\";\n    InfraMetric[\"nginxHits\"] = \"nginxHits\";\n    InfraMetric[\"nginxRequestRate\"] = \"nginxRequestRate\";\n    InfraMetric[\"nginxActiveConnections\"] = \"nginxActiveConnections\";\n    InfraMetric[\"nginxRequestsPerConnection\"] = \"nginxRequestsPerConnection\";\n})(InfraMetric || (InfraMetric = {}));\nexport var InfraOperator;\n(function (InfraOperator) {\n    InfraOperator[\"gt\"] = \"gt\";\n    InfraOperator[\"gte\"] = \"gte\";\n    InfraOperator[\"lt\"] = \"lt\";\n    InfraOperator[\"lte\"] = \"lte\";\n    InfraOperator[\"eq\"] = \"eq\";\n})(InfraOperator || (InfraOperator = {}));\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/graphql/types.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/graphql/types.ts"],"names":[],"mappings":"AAAA,oBAAoB;AA+cpB,uDAAuD;AACvD,QAAQ;AACR,uDAAuD;AAEvD,MAAM,CAAN,IAAY,cAIX;AAJD,WAAY,cAAc;IACxB,6BAAW,CAAA;IACX,+BAAa,CAAA;IACb,qCAAmB,CAAA;AACrB,CAAC,EAJW,cAAc,KAAd,cAAc,QAIzB;AAED,MAAM,CAAN,IAAY,aAIX;AAJD,WAAY,aAAa;IACvB,4BAAW,CAAA;IACX,wCAAuB,CAAA;IACvB,8BAAa,CAAA;AACf,CAAC,EAJW,aAAa,KAAb,aAAa,QAIxB;AAED,MAAM,CAAN,IAAY,aAOX;AAPD,WAAY,aAAa;IACvB,gCAAe,CAAA;IACf,oCAAmB,CAAA;IACnB,gCAAe,CAAA;IACf,8BAAa,CAAA;IACb,0CAAyB,CAAA;IACzB,kCAAiB,CAAA;AACnB,CAAC,EAPW,aAAa,KAAb,aAAa,QAOxB;AAED,MAAM,CAAN,IAAY,eAQX;AARD,WAAY,eAAe;IACzB,kCAAe,CAAA;IACf,8BAAW,CAAA;IACX,gCAAa,CAAA;IACb,oCAAiB,CAAA;IACjB,4BAAS,CAAA;IACT,4BAAS,CAAA;IACT,sCAAmB,CAAA;AACrB,CAAC,EARW,eAAe,KAAf,eAAe,QAQ1B;AAED,MAAM,CAAN,IAAY,WA4BX;AA5BD,WAAY,WAAW;IACrB,wDAAyC,CAAA;IACzC,4CAA6B,CAAA;IAC7B,gDAAiC,CAAA;IACjC,kDAAmC,CAAA;IACnC,8CAA+B,CAAA;IAC/B,gDAAiC,CAAA;IACjC,oDAAqC,CAAA;IACrC,8CAA+B,CAAA;IAC/B,oCAAqB,CAAA;IACrB,kDAAmC,CAAA;IACnC,wDAAyC,CAAA;IACzC,0CAA2B,CAAA;IAC3B,0CAA2B,CAAA;IAC3B,gDAAiC,CAAA;IACjC,0CAA2B,CAAA;IAC3B,sDAAuC,CAAA;IACvC,sDAAuC,CAAA;IACvC,wDAAyC,CAAA;IACzC,sDAAuC,CAAA;IACvC,wDAAyC,CAAA;IACzC,4DAA6C,CAAA;IAC7C,kDAAmC,CAAA;IACnC,kEAAmD,CAAA;IACnD,sCAAuB,CAAA;IACvB,oDAAqC,CAAA;IACrC,gEAAiD,CAAA;IACjD,wEAAyD,CAAA;AAC3D,CAAC,EA5BW,WAAW,KAAX,WAAW,QA4BtB;AAED,MAAM,CAAN,IAAY,aAMX;AAND,WAAY,aAAa;IACvB,0BAAS,CAAA;IACT,4BAAW,CAAA;IACX,0BAAS,CAAA;IACT,4BAAW,CAAA;IACX,0BAAS,CAAA;AACX,CAAC,EANW,aAAa,KAAb,aAAa,QAMxB","sourcesContent":["/* tslint:disable */\n\n// ====================================================\n// START: Typescript template\n// ====================================================\n\n// ====================================================\n// Types\n// ====================================================\n\nexport interface Query {\n  /** Get an infrastructure data source by id.The resolution order for the source configuration attributes is as followswith the first defined value winning:1. The attributes of the saved object with the given 'id'.2. The attributes defined in the static Kibana configuration key'xpack.infra.sources.default'.3. The hard-coded default values.As a consequence, querying a source that doesn't exist doesn't error out,but returns the configured or hardcoded defaults. */\n  source: InfraSource;\n  /** Get a list of all infrastructure data sources */\n  allSources: InfraSource[];\n}\n/** A source of infrastructure data */\nexport interface InfraSource {\n  /** The id of the source */\n  id: string;\n  /** The version number the source configuration was last persisted with */\n  version?: string | null;\n  /** The timestamp the source configuration was last persisted at */\n  updatedAt?: number | null;\n  /** The raw configuration of the source */\n  configuration: InfraSourceConfiguration;\n  /** The status of the source */\n  status: InfraSourceStatus;\n  /** A hierarchy of metadata entries by node */\n  metadataByNode: InfraNodeMetadata;\n  /** A consecutive span of log entries surrounding a point in time */\n  logEntriesAround: InfraLogEntryInterval;\n  /** A consecutive span of log entries within an interval */\n  logEntriesBetween: InfraLogEntryInterval;\n  /** A consecutive span of summary buckets within an interval */\n  logSummaryBetween: InfraLogSummaryInterval;\n\n  logItem: InfraLogItem;\n  /** A hierarchy of hosts, pods, containers, services or arbitrary groups */\n  map?: InfraResponse | null;\n\n  metrics: InfraMetricData[];\n}\n/** A set of configuration options for an infrastructure data source */\nexport interface InfraSourceConfiguration {\n  /** The name of the data source */\n  name: string;\n  /** A description of the data source */\n  description: string;\n  /** The alias to read metric data from */\n  metricAlias: string;\n  /** The alias to read log data from */\n  logAlias: string;\n  /** The field mapping to use for this source */\n  fields: InfraSourceFields;\n}\n/** A mapping of semantic fields to their document counterparts */\nexport interface InfraSourceFields {\n  /** The field to identify a container by */\n  container: string;\n  /** The fields to identify a host by */\n  host: string;\n  /** The fields to use as the log message */\n  message: string[];\n  /** The field to identify a pod by */\n  pod: string;\n  /** The field to use as a tiebreaker for log events that have identical timestamps */\n  tiebreaker: string;\n  /** The field to use as a timestamp for metrics and logs */\n  timestamp: string;\n}\n/** The status of an infrastructure data source */\nexport interface InfraSourceStatus {\n  /** Whether the configured metric alias exists */\n  metricAliasExists: boolean;\n  /** Whether the configured log alias exists */\n  logAliasExists: boolean;\n  /** Whether the configured alias or wildcard pattern resolve to any metric indices */\n  metricIndicesExist: boolean;\n  /** Whether the configured alias or wildcard pattern resolve to any log indices */\n  logIndicesExist: boolean;\n  /** The list of indices in the metric alias */\n  metricIndices: string[];\n  /** The list of indices in the log alias */\n  logIndices: string[];\n  /** The list of fields defined in the index mappings */\n  indexFields: InfraIndexField[];\n}\n/** A descriptor of a field in an index */\nexport interface InfraIndexField {\n  /** The name of the field */\n  name: string;\n  /** The type of the field's values as recognized by Kibana */\n  type: string;\n  /** Whether the field's values can be efficiently searched for */\n  searchable: boolean;\n  /** Whether the field's values can be aggregated */\n  aggregatable: boolean;\n}\n/** One metadata entry for a node. */\nexport interface InfraNodeMetadata {\n  id: string;\n\n  name: string;\n\n  features: InfraNodeFeature[];\n}\n\nexport interface InfraNodeFeature {\n  name: string;\n\n  source: string;\n}\n/** A consecutive sequence of log entries */\nexport interface InfraLogEntryInterval {\n  /** The key corresponding to the start of the interval covered by the entries */\n  start?: InfraTimeKey | null;\n  /** The key corresponding to the end of the interval covered by the entries */\n  end?: InfraTimeKey | null;\n  /** Whether there are more log entries available before the start */\n  hasMoreBefore: boolean;\n  /** Whether there are more log entries available after the end */\n  hasMoreAfter: boolean;\n  /** The query the log entries were filtered by */\n  filterQuery?: string | null;\n  /** The query the log entries were highlighted with */\n  highlightQuery?: string | null;\n  /** A list of the log entries */\n  entries: InfraLogEntry[];\n}\n/** A representation of the log entry's position in the event stream */\nexport interface InfraTimeKey {\n  /** The timestamp of the event that the log entry corresponds to */\n  time: number;\n  /** The tiebreaker that disambiguates events with the same timestamp */\n  tiebreaker: number;\n}\n/** A log entry */\nexport interface InfraLogEntry {\n  /** A unique representation of the log entry's position in the event stream */\n  key: InfraTimeKey;\n  /** The log entry's id */\n  gid: string;\n  /** The source id */\n  source: string;\n  /** A list of the formatted log entry segments */\n  message: InfraLogMessageSegment[];\n}\n/** A segment of the log entry message that was derived from a field */\nexport interface InfraLogMessageFieldSegment {\n  /** The field the segment was derived from */\n  field: string;\n  /** The segment's message */\n  value: string;\n  /** A list of highlighted substrings of the value */\n  highlights: string[];\n}\n/** A segment of the log entry message that was derived from a field */\nexport interface InfraLogMessageConstantSegment {\n  /** The segment's message */\n  constant: string;\n}\n/** A consecutive sequence of log summary buckets */\nexport interface InfraLogSummaryInterval {\n  /** The millisecond timestamp corresponding to the start of the interval covered by the summary */\n  start?: number | null;\n  /** The millisecond timestamp corresponding to the end of the interval covered by the summary */\n  end?: number | null;\n  /** The query the log entries were filtered by */\n  filterQuery?: string | null;\n  /** A list of the log entries */\n  buckets: InfraLogSummaryBucket[];\n}\n/** A log summary bucket */\nexport interface InfraLogSummaryBucket {\n  /** The start timestamp of the bucket */\n  start: number;\n  /** The end timestamp of the bucket */\n  end: number;\n  /** The number of entries inside the bucket */\n  entriesCount: number;\n}\n\nexport interface InfraLogItem {\n  /** The ID of the document */\n  id: string;\n  /** The index where the document was found */\n  index: string;\n  /** An array of flattened fields and values */\n  fields: InfraLogItemField[];\n}\n\nexport interface InfraLogItemField {\n  /** The flattened field name */\n  field: string;\n  /** The value for the Field as a string */\n  value: string;\n}\n\nexport interface InfraResponse {\n  nodes: InfraNode[];\n}\n\nexport interface InfraNode {\n  path: InfraNodePath[];\n\n  metric: InfraNodeMetric;\n}\n\nexport interface InfraNodePath {\n  value: string;\n\n  label: string;\n}\n\nexport interface InfraNodeMetric {\n  name: InfraMetricType;\n\n  value: number;\n\n  avg: number;\n\n  max: number;\n}\n\nexport interface InfraMetricData {\n  id?: InfraMetric | null;\n\n  series: InfraDataSeries[];\n}\n\nexport interface InfraDataSeries {\n  id: string;\n\n  data: InfraDataPoint[];\n}\n\nexport interface InfraDataPoint {\n  timestamp: number;\n\n  value?: number | null;\n}\n\nexport interface Mutation {\n  /** Create a new source of infrastructure data */\n  createSource: CreateSourceResult;\n  /** Modify an existing source using the given sequence of update operations */\n  updateSource: UpdateSourceResult;\n  /** Delete a source of infrastructure data */\n  deleteSource: DeleteSourceResult;\n}\n/** The result of a successful source creation */\nexport interface CreateSourceResult {\n  /** The source that was created */\n  source: InfraSource;\n}\n/** The result of a sequence of source update operations */\nexport interface UpdateSourceResult {\n  /** The source after the operations were performed */\n  source: InfraSource;\n}\n/** The result of a source deletion operations */\nexport interface DeleteSourceResult {\n  /** The id of the source that was deleted */\n  id: string;\n}\n\n// ====================================================\n// InputTypes\n// ====================================================\n\nexport interface InfraTimeKeyInput {\n  time: number;\n\n  tiebreaker: number;\n}\n\nexport interface InfraTimerangeInput {\n  /** The interval string to use for last bucket. The format is '{value}{unit}'. For example '5m' would return the metrics for the last 5 minutes of the timespan. */\n  interval: string;\n  /** The end of the timerange */\n  to: number;\n  /** The beginning of the timerange */\n  from: number;\n}\n\nexport interface InfraPathInput {\n  /** The type of path */\n  type: InfraPathType;\n  /** The label to use in the results for the group by for the terms group by */\n  label?: string | null;\n  /** The field to group by from a terms aggregation, this is ignored by the filter type */\n  field?: string | null;\n  /** The fitlers for the filter group by */\n  filters?: InfraPathFilterInput[] | null;\n}\n/** A group by filter */\nexport interface InfraPathFilterInput {\n  /** The label for the filter, this will be used as the group name in the final results */\n  label: string;\n  /** The query string query */\n  query: string;\n}\n\nexport interface InfraMetricInput {\n  /** The type of metric */\n  type: InfraMetricType;\n}\n/** The source to be created */\nexport interface CreateSourceInput {\n  /** The name of the data source */\n  name: string;\n  /** A description of the data source */\n  description?: string | null;\n  /** The alias to read metric data from */\n  metricAlias?: string | null;\n  /** The alias to read log data from */\n  logAlias?: string | null;\n  /** The field mapping to use for this source */\n  fields?: CreateSourceFieldsInput | null;\n}\n/** The mapping of semantic fields of the source to be created */\nexport interface CreateSourceFieldsInput {\n  /** The field to identify a container by */\n  container?: string | null;\n  /** The fields to identify a host by */\n  host?: string | null;\n  /** The field to identify a pod by */\n  pod?: string | null;\n  /** The field to use as a tiebreaker for log events that have identical timestamps */\n  tiebreaker?: string | null;\n  /** The field to use as a timestamp for metrics and logs */\n  timestamp?: string | null;\n}\n/** The update operations to be performed */\nexport interface UpdateSourceInput {\n  /** The name update operation to be performed */\n  setName?: UpdateSourceNameInput | null;\n  /** The description update operation to be performed */\n  setDescription?: UpdateSourceDescriptionInput | null;\n  /** The alias update operation to be performed */\n  setAliases?: UpdateSourceAliasInput | null;\n  /** The field update operation to be performed */\n  setFields?: UpdateSourceFieldsInput | null;\n}\n/** A name update operation */\nexport interface UpdateSourceNameInput {\n  /** The new name to be set */\n  name: string;\n}\n/** A description update operation */\nexport interface UpdateSourceDescriptionInput {\n  /** The new description to be set */\n  description: string;\n}\n/** An alias update operation */\nexport interface UpdateSourceAliasInput {\n  /** The new log index pattern or alias to bet set */\n  logAlias?: string | null;\n  /** The new metric index pattern or alias to bet set */\n  metricAlias?: string | null;\n}\n/** A field update operations */\nexport interface UpdateSourceFieldsInput {\n  /** The new container field to be set */\n  container?: string | null;\n  /** The new host field to be set */\n  host?: string | null;\n  /** The new pod field to be set */\n  pod?: string | null;\n  /** The new tiebreaker field to be set */\n  tiebreaker?: string | null;\n  /** The new timestamp field to be set */\n  timestamp?: string | null;\n}\n\n// ====================================================\n// Arguments\n// ====================================================\n\nexport interface SourceQueryArgs {\n  /** The id of the source */\n  id: string;\n}\nexport interface MetadataByNodeInfraSourceArgs {\n  nodeId: string;\n\n  nodeType: InfraNodeType;\n}\nexport interface LogEntriesAroundInfraSourceArgs {\n  /** The sort key that corresponds to the point in time */\n  key: InfraTimeKeyInput;\n  /** The maximum number of preceding to return */\n  countBefore?: number | null;\n  /** The maximum number of following to return */\n  countAfter?: number | null;\n  /** The query to filter the log entries by */\n  filterQuery?: string | null;\n  /** The query to highlight the log entries with */\n  highlightQuery?: string | null;\n}\nexport interface LogEntriesBetweenInfraSourceArgs {\n  /** The sort key that corresponds to the start of the interval */\n  startKey: InfraTimeKeyInput;\n  /** The sort key that corresponds to the end of the interval */\n  endKey: InfraTimeKeyInput;\n  /** The query to filter the log entries by */\n  filterQuery?: string | null;\n  /** The query to highlight the log entries with */\n  highlightQuery?: string | null;\n}\nexport interface LogSummaryBetweenInfraSourceArgs {\n  /** The millisecond timestamp that corresponds to the start of the interval */\n  start: number;\n  /** The millisecond timestamp that corresponds to the end of the interval */\n  end: number;\n  /** The size of each bucket in milliseconds */\n  bucketSize: number;\n  /** The query to filter the log entries by */\n  filterQuery?: string | null;\n}\nexport interface LogItemInfraSourceArgs {\n  id: string;\n}\nexport interface MapInfraSourceArgs {\n  timerange: InfraTimerangeInput;\n\n  filterQuery?: string | null;\n}\nexport interface MetricsInfraSourceArgs {\n  nodeId: string;\n\n  nodeType: InfraNodeType;\n\n  timerange: InfraTimerangeInput;\n\n  metrics: InfraMetric[];\n}\nexport interface IndexFieldsInfraSourceStatusArgs {\n  indexType?: InfraIndexType | null;\n}\nexport interface NodesInfraResponseArgs {\n  path: InfraPathInput[];\n\n  metric: InfraMetricInput;\n}\nexport interface CreateSourceMutationArgs {\n  /** The id of the source */\n  id: string;\n\n  source: CreateSourceInput;\n}\nexport interface UpdateSourceMutationArgs {\n  /** The id of the source */\n  id: string;\n  /** A sequence of update operations */\n  changes: UpdateSourceInput[];\n}\nexport interface DeleteSourceMutationArgs {\n  /** The id of the source */\n  id: string;\n}\n\n// ====================================================\n// Enums\n// ====================================================\n\nexport enum InfraIndexType {\n  ANY = 'ANY',\n  LOGS = 'LOGS',\n  METRICS = 'METRICS',\n}\n\nexport enum InfraNodeType {\n  pod = 'pod',\n  container = 'container',\n  host = 'host',\n}\n\nexport enum InfraPathType {\n  terms = 'terms',\n  filters = 'filters',\n  hosts = 'hosts',\n  pods = 'pods',\n  containers = 'containers',\n  custom = 'custom',\n}\n\nexport enum InfraMetricType {\n  count = 'count',\n  cpu = 'cpu',\n  load = 'load',\n  memory = 'memory',\n  tx = 'tx',\n  rx = 'rx',\n  logRate = 'logRate',\n}\n\nexport enum InfraMetric {\n  hostSystemOverview = 'hostSystemOverview',\n  hostCpuUsage = 'hostCpuUsage',\n  hostFilesystem = 'hostFilesystem',\n  hostK8sOverview = 'hostK8sOverview',\n  hostK8sCpuCap = 'hostK8sCpuCap',\n  hostK8sDiskCap = 'hostK8sDiskCap',\n  hostK8sMemoryCap = 'hostK8sMemoryCap',\n  hostK8sPodCap = 'hostK8sPodCap',\n  hostLoad = 'hostLoad',\n  hostMemoryUsage = 'hostMemoryUsage',\n  hostNetworkTraffic = 'hostNetworkTraffic',\n  podOverview = 'podOverview',\n  podCpuUsage = 'podCpuUsage',\n  podMemoryUsage = 'podMemoryUsage',\n  podLogUsage = 'podLogUsage',\n  podNetworkTraffic = 'podNetworkTraffic',\n  containerOverview = 'containerOverview',\n  containerCpuKernel = 'containerCpuKernel',\n  containerCpuUsage = 'containerCpuUsage',\n  containerDiskIOOps = 'containerDiskIOOps',\n  containerDiskIOBytes = 'containerDiskIOBytes',\n  containerMemory = 'containerMemory',\n  containerNetworkTraffic = 'containerNetworkTraffic',\n  nginxHits = 'nginxHits',\n  nginxRequestRate = 'nginxRequestRate',\n  nginxActiveConnections = 'nginxActiveConnections',\n  nginxRequestsPerConnection = 'nginxRequestsPerConnection',\n}\n\nexport enum InfraOperator {\n  gt = 'gt',\n  gte = 'gte',\n  lt = 'lt',\n  lte = 'lte',\n  eq = 'eq',\n}\n\n// ====================================================\n// Unions\n// ====================================================\n\n/** A segment of the log entry message */\nexport type InfraLogMessageSegment = InfraLogMessageFieldSegment | InfraLogMessageConstantSegment;\n\n// ====================================================\n// END: Typescript template\n// ====================================================\n\n// ====================================================\n// Documents\n// ====================================================\n\nexport namespace FlyoutItemQuery {\n  export type Variables = {\n    sourceId: string;\n    itemId: string;\n  };\n\n  export type Query = {\n    __typename?: 'Query';\n\n    source: Source;\n  };\n\n  export type Source = {\n    __typename?: 'InfraSource';\n\n    id: string;\n\n    logItem: LogItem;\n  };\n\n  export type LogItem = {\n    __typename?: 'InfraLogItem';\n\n    id: string;\n\n    index: string;\n\n    fields: Fields[];\n  };\n\n  export type Fields = {\n    __typename?: 'InfraLogItemField';\n\n    field: string;\n\n    value: string;\n  };\n}\n\nexport namespace MetadataQuery {\n  export type Variables = {\n    sourceId: string;\n    nodeId: string;\n    nodeType: InfraNodeType;\n  };\n\n  export type Query = {\n    __typename?: 'Query';\n\n    source: Source;\n  };\n\n  export type Source = {\n    __typename?: 'InfraSource';\n\n    id: string;\n\n    metadataByNode: MetadataByNode;\n  };\n\n  export type MetadataByNode = {\n    __typename?: 'InfraNodeMetadata';\n\n    name: string;\n\n    features: Features[];\n  };\n\n  export type Features = {\n    __typename?: 'InfraNodeFeature';\n\n    name: string;\n\n    source: string;\n  };\n}\n\nexport namespace MetricsQuery {\n  export type Variables = {\n    sourceId: string;\n    timerange: InfraTimerangeInput;\n    metrics: InfraMetric[];\n    nodeId: string;\n    nodeType: InfraNodeType;\n  };\n\n  export type Query = {\n    __typename?: 'Query';\n\n    source: Source;\n  };\n\n  export type Source = {\n    __typename?: 'InfraSource';\n\n    id: string;\n\n    metrics: Metrics[];\n  };\n\n  export type Metrics = {\n    __typename?: 'InfraMetricData';\n\n    id?: InfraMetric | null;\n\n    series: Series[];\n  };\n\n  export type Series = {\n    __typename?: 'InfraDataSeries';\n\n    id: string;\n\n    data: Data[];\n  };\n\n  export type Data = {\n    __typename?: 'InfraDataPoint';\n\n    timestamp: number;\n\n    value?: number | null;\n  };\n}\n\nexport namespace WaffleNodesQuery {\n  export type Variables = {\n    sourceId: string;\n    timerange: InfraTimerangeInput;\n    filterQuery?: string | null;\n    metric: InfraMetricInput;\n    path: InfraPathInput[];\n  };\n\n  export type Query = {\n    __typename?: 'Query';\n\n    source: Source;\n  };\n\n  export type Source = {\n    __typename?: 'InfraSource';\n\n    id: string;\n\n    map?: Map | null;\n  };\n\n  export type Map = {\n    __typename?: 'InfraResponse';\n\n    nodes: Nodes[];\n  };\n\n  export type Nodes = {\n    __typename?: 'InfraNode';\n\n    path: Path[];\n\n    metric: Metric;\n  };\n\n  export type Path = {\n    __typename?: 'InfraNodePath';\n\n    value: string;\n\n    label: string;\n  };\n\n  export type Metric = {\n    __typename?: 'InfraNodeMetric';\n\n    name: InfraMetricType;\n\n    value: number;\n\n    avg: number;\n\n    max: number;\n  };\n}\n\nexport namespace CreateSourceMutation {\n  export type Variables = {\n    sourceId: string;\n    sourceConfiguration: CreateSourceInput;\n  };\n\n  export type Mutation = {\n    __typename?: 'Mutation';\n\n    createSource: CreateSource;\n  };\n\n  export type CreateSource = {\n    __typename?: 'CreateSourceResult';\n\n    source: Source;\n  };\n\n  export type Source = SourceFields.Fragment;\n}\n\nexport namespace SourceQuery {\n  export type Variables = {\n    sourceId?: string | null;\n  };\n\n  export type Query = {\n    __typename?: 'Query';\n\n    source: Source;\n  };\n\n  export type Source = SourceFields.Fragment;\n}\n\nexport namespace UpdateSourceMutation {\n  export type Variables = {\n    sourceId?: string | null;\n    changes: UpdateSourceInput[];\n  };\n\n  export type Mutation = {\n    __typename?: 'Mutation';\n\n    updateSource: UpdateSource;\n  };\n\n  export type UpdateSource = {\n    __typename?: 'UpdateSourceResult';\n\n    source: Source;\n  };\n\n  export type Source = SourceFields.Fragment;\n}\n\nexport namespace LogEntries {\n  export type Variables = {\n    sourceId?: string | null;\n    timeKey: InfraTimeKeyInput;\n    countBefore?: number | null;\n    countAfter?: number | null;\n    filterQuery?: string | null;\n  };\n\n  export type Query = {\n    __typename?: 'Query';\n\n    source: Source;\n  };\n\n  export type Source = {\n    __typename?: 'InfraSource';\n\n    id: string;\n\n    logEntriesAround: LogEntriesAround;\n  };\n\n  export type LogEntriesAround = {\n    __typename?: 'InfraLogEntryInterval';\n\n    start?: Start | null;\n\n    end?: End | null;\n\n    hasMoreBefore: boolean;\n\n    hasMoreAfter: boolean;\n\n    entries: Entries[];\n  };\n\n  export type Start = InfraTimeKeyFields.Fragment;\n\n  export type End = InfraTimeKeyFields.Fragment;\n\n  export type Entries = {\n    __typename?: 'InfraLogEntry';\n\n    gid: string;\n\n    key: Key;\n\n    message: Message[];\n  };\n\n  export type Key = {\n    __typename?: 'InfraTimeKey';\n\n    time: number;\n\n    tiebreaker: number;\n  };\n\n  export type Message =\n    | InfraLogMessageFieldSegmentInlineFragment\n    | InfraLogMessageConstantSegmentInlineFragment;\n\n  export type InfraLogMessageFieldSegmentInlineFragment = {\n    __typename?: 'InfraLogMessageFieldSegment';\n\n    field: string;\n\n    value: string;\n  };\n\n  export type InfraLogMessageConstantSegmentInlineFragment = {\n    __typename?: 'InfraLogMessageConstantSegment';\n\n    constant: string;\n  };\n}\n\nexport namespace LogSummary {\n  export type Variables = {\n    sourceId?: string | null;\n    start: number;\n    end: number;\n    bucketSize: number;\n    filterQuery?: string | null;\n  };\n\n  export type Query = {\n    __typename?: 'Query';\n\n    source: Source;\n  };\n\n  export type Source = {\n    __typename?: 'InfraSource';\n\n    id: string;\n\n    logSummaryBetween: LogSummaryBetween;\n  };\n\n  export type LogSummaryBetween = {\n    __typename?: 'InfraLogSummaryInterval';\n\n    start?: number | null;\n\n    end?: number | null;\n\n    buckets: Buckets[];\n  };\n\n  export type Buckets = {\n    __typename?: 'InfraLogSummaryBucket';\n\n    start: number;\n\n    end: number;\n\n    entriesCount: number;\n  };\n}\n\nexport namespace SourceFields {\n  export type Fragment = {\n    __typename?: 'InfraSource';\n\n    id: string;\n\n    version?: string | null;\n\n    updatedAt?: number | null;\n\n    configuration: Configuration;\n\n    status: Status;\n  };\n\n  export type Configuration = {\n    __typename?: 'InfraSourceConfiguration';\n\n    name: string;\n\n    description: string;\n\n    metricAlias: string;\n\n    logAlias: string;\n\n    fields: Fields;\n  };\n\n  export type Fields = {\n    __typename?: 'InfraSourceFields';\n\n    container: string;\n\n    host: string;\n\n    message: string[];\n\n    pod: string;\n\n    tiebreaker: string;\n\n    timestamp: string;\n  };\n\n  export type Status = {\n    __typename?: 'InfraSourceStatus';\n\n    indexFields: IndexFields[];\n\n    logIndicesExist: boolean;\n\n    metricIndicesExist: boolean;\n  };\n\n  export type IndexFields = {\n    __typename?: 'InfraIndexField';\n\n    name: string;\n\n    type: string;\n\n    searchable: boolean;\n\n    aggregatable: boolean;\n  };\n}\n\nexport namespace InfraTimeKeyFields {\n  export type Fragment = {\n    __typename?: 'InfraTimeKey';\n\n    time: number;\n\n    tiebreaker: number;\n  };\n}\n"]}]}