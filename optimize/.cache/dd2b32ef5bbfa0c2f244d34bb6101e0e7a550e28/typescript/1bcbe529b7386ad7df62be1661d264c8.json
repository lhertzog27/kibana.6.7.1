{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/uptime/public/components/queries/monitor_charts/monitor_charts_query.tsx","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/uptime/public/components/queries/monitor_charts/monitor_charts_query.tsx","mtime":1567631712329},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport * as tslib_1 from \"tslib\";\nimport { \n// @ts-ignore missing typings\nEuiAreaSeries, EuiFlexGroup, EuiFlexItem, \n// @ts-ignore missing typings\nEuiLineSeries, EuiPanel, \n// @ts-ignore missing typings\nEuiSeriesChart, \n// @ts-ignore missing typings\nEuiSeriesChartUtils, \n// @ts-ignore missing typings\nEuiTitle, } from '@elastic/eui';\nimport { i18n } from '@kbn/i18n';\nimport { FormattedMessage } from '@kbn/i18n/react';\nimport React, { Fragment } from 'react';\nimport { Query } from 'react-apollo';\nimport { createGetMonitorChartsQuery } from './get_monitor_charts';\nexport var MonitorChartsQuery = function (_a) {\n    var _b = _a.colors, primary = _b.primary, secondary = _b.secondary, danger = _b.danger, dateRangeStart = _a.dateRangeStart, dateRangeEnd = _a.dateRangeEnd, monitorId = _a.monitorId, autorefreshIsPaused = _a.autorefreshIsPaused, autorefreshInterval = _a.autorefreshInterval;\n    return (React.createElement(Query, { pollInterval: autorefreshIsPaused ? undefined : autorefreshInterval, query: createGetMonitorChartsQuery, variables: { dateRangeStart: dateRangeStart, dateRangeEnd: dateRangeEnd, monitorId: monitorId } }, function (_a) {\n        var loading = _a.loading, error = _a.error, data = _a.data;\n        if (loading) {\n            return i18n.translate('xpack.uptime.monitorCharts.loadingMessage', {\n                defaultMessage: 'Loadingâ€¦',\n            });\n        }\n        if (error) {\n            return i18n.translate('xpack.uptime.monitorCharts.errorMessage', {\n                values: { message: error.message },\n                defaultMessage: 'Error {message}',\n            });\n        }\n        var monitorChartsData = data.monitorChartsData;\n        // TODO: this should not exist in the UI, update the GQL resolver/schema to return\n        // an object that contains these series already shaped in the way required by the visualizations.\n        var avgDurationSeries = [];\n        var areaDurationSeries = [];\n        var downSeries = [];\n        var upSeries = [];\n        var checksSeries = [];\n        monitorChartsData.forEach(function (_a) {\n            var avgDuration = _a.avgDuration, maxDuration = _a.maxDuration, minDuration = _a.minDuration, status = _a.status;\n            avgDurationSeries.push(avgDuration);\n            areaDurationSeries.push({ x: minDuration.x, y0: minDuration.y, y: maxDuration.y });\n            downSeries.push({ x: status.x, y: status.down });\n            upSeries.push({ x: status.x, y: status.up });\n            checksSeries.push({ x: status.x, y: status.total });\n        });\n        // As above, we are building a domain size for the chart to use.\n        // Without this code the chart could render data outside of the field.\n        var checksDomain = upSeries.concat(downSeries).map(function (_a) {\n            var y = _a.y;\n            return y;\n        });\n        var checkDomainLimits = [0, Math.max.apply(Math, tslib_1.__spread(checksDomain))];\n        var durationDomain = avgDurationSeries.concat(areaDurationSeries);\n        var durationDomainLimits = [0, Math.max.apply(Math, tslib_1.__spread(durationDomain.map(function (_a) {\n                var y = _a.y;\n                return y;\n            })))];\n        return (React.createElement(Fragment, null,\n            React.createElement(EuiFlexGroup, null,\n                React.createElement(EuiFlexItem, null,\n                    React.createElement(EuiTitle, { size: \"xs\" },\n                        React.createElement(\"h4\", null,\n                            React.createElement(FormattedMessage, { id: \"xpack.uptime.monitorCharts.monitorDuration.titleLabel\", defaultMessage: \"Monitor Duration ms\", description: \"The 'ms' is an abbreviation for milliseconds.\" }))),\n                    React.createElement(EuiPanel, { style: { maxWidth: 520, maxHeight: 220 } },\n                        React.createElement(EuiSeriesChart, { margins: { left: 60, right: 40, top: 10, bottom: 40 }, width: 500, height: 200, xType: EuiSeriesChartUtils.SCALE.TIME, xCrosshairFormat: \"YYYY-MM-DD hh:mmZ\", yDomain: durationDomainLimits },\n                            React.createElement(EuiAreaSeries, { color: secondary, name: i18n.translate('xpack.uptime.monitorCharts.monitorDuration.series.durationRangeLabel', {\n                                    defaultMessage: 'Duration range',\n                                }), data: areaDurationSeries, curve: \"curveBasis\" }),\n                            React.createElement(EuiLineSeries, { color: primary, name: i18n.translate('xpack.uptime.monitorCharts.monitorDuration.series.meanDurationLabel', {\n                                    defaultMessage: 'Mean duration',\n                                }), data: avgDurationSeries })))),\n                React.createElement(EuiFlexItem, null,\n                    React.createElement(EuiTitle, { size: \"xs\" },\n                        React.createElement(\"h4\", null,\n                            React.createElement(FormattedMessage, { id: \"xpack.uptime.monitorCharts.checkStatus.title\", defaultMessage: \"Check status\" }))),\n                    React.createElement(EuiPanel, { style: { maxWidth: 520, maxHeight: 220 } },\n                        React.createElement(EuiSeriesChart, { margins: { left: 60, right: 40, top: 10, bottom: 40 }, width: 500, height: 200, xType: EuiSeriesChartUtils.SCALE.TIME, xCrosshairFormat: \"YYYY-MM-DD hh:mmZ\", stackBy: \"y\", yDomain: checkDomainLimits },\n                            React.createElement(EuiAreaSeries, { name: i18n.translate('xpack.uptime.monitorCharts.checkStatus.series.upCountLabel', {\n                                    defaultMessage: 'Up count',\n                                }), data: upSeries, curve: \"curveBasis\", color: primary }),\n                            React.createElement(EuiAreaSeries, { name: i18n.translate('xpack.uptime.monitorCharts.checkStatus.series.downCountLabel', {\n                                    defaultMessage: 'Down count',\n                                }), data: downSeries, curve: \"curveBasis\", color: danger })))))));\n    }));\n};\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/uptime/public/components/queries/monitor_charts/monitor_charts_query.tsx","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/uptime/public/components/queries/monitor_charts/monitor_charts_query.tsx"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport {\n  // @ts-ignore missing typings\n  EuiAreaSeries,\n  EuiFlexGroup,\n  EuiFlexItem,\n  // @ts-ignore missing typings\n  EuiLineSeries,\n  EuiPanel,\n  // @ts-ignore missing typings\n  EuiSeriesChart,\n  // @ts-ignore missing typings\n  EuiSeriesChartUtils,\n  // @ts-ignore missing typings\n  EuiSpacer,\n  // @ts-ignore missing typings\n  EuiTitle,\n} from '@elastic/eui';\nimport { i18n } from '@kbn/i18n';\nimport { FormattedMessage } from '@kbn/i18n/react';\nimport React, { Fragment } from 'react';\nimport { Query } from 'react-apollo';\nimport { UptimeCommonProps } from '../../../uptime_app';\nimport { createGetMonitorChartsQuery } from './get_monitor_charts';\n\ninterface MonitorChartsProps {\n  monitorId: string;\n}\n\ntype Props = MonitorChartsProps & UptimeCommonProps;\n\nexport const MonitorChartsQuery = ({\n  colors: { primary, secondary, danger },\n  dateRangeStart,\n  dateRangeEnd,\n  monitorId,\n  autorefreshIsPaused,\n  autorefreshInterval,\n}: Props) => {\n  return (\n    <Query\n      pollInterval={autorefreshIsPaused ? undefined : autorefreshInterval}\n      query={createGetMonitorChartsQuery}\n      variables={{ dateRangeStart, dateRangeEnd, monitorId }}\n    >\n      {({ loading, error, data }) => {\n        if (loading) {\n          return i18n.translate('xpack.uptime.monitorCharts.loadingMessage', {\n            defaultMessage: 'Loadingâ€¦',\n          });\n        }\n        if (error) {\n          return i18n.translate('xpack.uptime.monitorCharts.errorMessage', {\n            values: { message: error.message },\n            defaultMessage: 'Error {message}',\n          });\n        }\n\n        const { monitorChartsData } = data;\n\n        // TODO: this should not exist in the UI, update the GQL resolver/schema to return\n        // an object that contains these series already shaped in the way required by the visualizations.\n        const avgDurationSeries: any[] = [];\n        const areaDurationSeries: any[] = [];\n        const downSeries: any[] = [];\n        const upSeries: any[] = [];\n        const checksSeries: any[] = [];\n        monitorChartsData.forEach(({ avgDuration, maxDuration, minDuration, status }: any) => {\n          avgDurationSeries.push(avgDuration);\n          areaDurationSeries.push({ x: minDuration.x, y0: minDuration.y, y: maxDuration.y });\n          downSeries.push({ x: status.x, y: status.down });\n          upSeries.push({ x: status.x, y: status.up });\n          checksSeries.push({ x: status.x, y: status.total });\n        });\n\n        // As above, we are building a domain size for the chart to use.\n        // Without this code the chart could render data outside of the field.\n        const checksDomain = upSeries.concat(downSeries).map(({ y }) => y);\n        const checkDomainLimits = [0, Math.max(...checksDomain)];\n        const durationDomain = avgDurationSeries.concat(areaDurationSeries);\n        const durationDomainLimits = [0, Math.max(...durationDomain.map(({ y }) => y))];\n\n        return (\n          <Fragment>\n            <EuiFlexGroup>\n              <EuiFlexItem>\n                <EuiTitle size=\"xs\">\n                  <h4>\n                    <FormattedMessage\n                      id=\"xpack.uptime.monitorCharts.monitorDuration.titleLabel\"\n                      defaultMessage=\"Monitor Duration ms\"\n                      description=\"The 'ms' is an abbreviation for milliseconds.\"\n                    />\n                  </h4>\n                </EuiTitle>\n\n                <EuiPanel style={{ maxWidth: 520, maxHeight: 220 }}>\n                  <EuiSeriesChart\n                    margins={{ left: 60, right: 40, top: 10, bottom: 40 }}\n                    width={500}\n                    height={200}\n                    xType={EuiSeriesChartUtils.SCALE.TIME}\n                    xCrosshairFormat=\"YYYY-MM-DD hh:mmZ\"\n                    yDomain={durationDomainLimits}\n                  >\n                    <EuiAreaSeries\n                      color={secondary}\n                      name={i18n.translate(\n                        'xpack.uptime.monitorCharts.monitorDuration.series.durationRangeLabel',\n                        {\n                          defaultMessage: 'Duration range',\n                        }\n                      )}\n                      data={areaDurationSeries}\n                      curve=\"curveBasis\"\n                    />\n                    <EuiLineSeries\n                      color={primary}\n                      name={i18n.translate(\n                        'xpack.uptime.monitorCharts.monitorDuration.series.meanDurationLabel',\n                        {\n                          defaultMessage: 'Mean duration',\n                        }\n                      )}\n                      data={avgDurationSeries}\n                    />\n                  </EuiSeriesChart>\n                </EuiPanel>\n              </EuiFlexItem>\n              <EuiFlexItem>\n                <EuiTitle size=\"xs\">\n                  <h4>\n                    <FormattedMessage\n                      id=\"xpack.uptime.monitorCharts.checkStatus.title\"\n                      defaultMessage=\"Check status\"\n                    />\n                  </h4>\n                </EuiTitle>\n                <EuiPanel style={{ maxWidth: 520, maxHeight: 220 }}>\n                  <EuiSeriesChart\n                    margins={{ left: 60, right: 40, top: 10, bottom: 40 }}\n                    width={500}\n                    height={200}\n                    xType={EuiSeriesChartUtils.SCALE.TIME}\n                    xCrosshairFormat=\"YYYY-MM-DD hh:mmZ\"\n                    stackBy=\"y\"\n                    yDomain={checkDomainLimits}\n                  >\n                    <EuiAreaSeries\n                      name={i18n.translate(\n                        'xpack.uptime.monitorCharts.checkStatus.series.upCountLabel',\n                        {\n                          defaultMessage: 'Up count',\n                        }\n                      )}\n                      data={upSeries}\n                      curve=\"curveBasis\"\n                      color={primary}\n                    />\n                    <EuiAreaSeries\n                      name={i18n.translate(\n                        'xpack.uptime.monitorCharts.checkStatus.series.downCountLabel',\n                        {\n                          defaultMessage: 'Down count',\n                        }\n                      )}\n                      data={downSeries}\n                      curve=\"curveBasis\"\n                      color={danger}\n                    />\n                  </EuiSeriesChart>\n                </EuiPanel>\n              </EuiFlexItem>\n            </EuiFlexGroup>\n          </Fragment>\n        );\n      }}\n    </Query>\n  );\n};\n"]}]}