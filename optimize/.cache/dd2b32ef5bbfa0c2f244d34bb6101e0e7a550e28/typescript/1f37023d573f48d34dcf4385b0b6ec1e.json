{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/src/ui/public/inspector/inspector.tsx","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/inspector/inspector.tsx","mtime":1567631711741},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { i18n } from '@kbn/i18n';\nimport { openFlyout } from 'ui/flyout';\nimport { InspectorPanel } from './ui/inspector_panel';\nimport { viewRegistry } from './view_registry';\nvar closeButtonLabel = i18n.translate('common.ui.inspector.closeButton', {\n    defaultMessage: 'Close Inspector',\n});\n/**\n * Checks if a inspector panel could be shown based on the passed adapters.\n *\n * @param {object} adapters - An object of adapters. This should be the same\n *    you would pass into `open`.\n * @returns {boolean} True, if a call to `open` with the same adapters\n *    would have shown the inspector panel, false otherwise.\n */\nfunction isAvailable(adapters) {\n    return viewRegistry.getVisible(adapters).length > 0;\n}\n/**\n * Opens the inspector panel for the given adapters and close any previously opened\n * inspector panel. The previously panel will be closed also if no new panel will be\n * opened (e.g. because of the passed adapters no view is available). You can use\n * {@link InspectorSession#close} on the return value to close that opened panel again.\n *\n * @param {object} adapters - An object of adapters for which you want to show\n *    the inspector panel.\n * @param {InspectorOptions} options - Options that configure the inspector. See InspectorOptions type.\n * @return {InspectorSession} The session instance for the opened inspector.\n */\nfunction open(adapters, options) {\n    if (options === void 0) { options = {}; }\n    var views = viewRegistry.getVisible(adapters);\n    // Don't open inspector if there are no views available for the passed adapters\n    if (!views || views.length === 0) {\n        throw new Error(\"Tried to open an inspector without views being available.\\n      Make sure to call Inspector.isAvailable() with the same adapters before to check\\n      if an inspector can be shown.\");\n    }\n    return openFlyout(React.createElement(InspectorPanel, { views: views, adapters: adapters, title: options.title }), {\n        'data-test-subj': 'inspectorPanel',\n        closeButtonAriaLabel: closeButtonLabel,\n    });\n}\nvar Inspector = {\n    isAvailable: isAvailable,\n    open: open,\n};\nexport { Inspector };\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/src/ui/public/inspector/inspector.tsx","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/src/ui/public/inspector/inspector.tsx"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;GAiBG;AACH,OAAO,KAAK,MAAM,OAAO,CAAC;AAE1B,OAAO,EAAE,IAAI,EAAE,MAAM,WAAW,CAAC;AACjC,OAAO,EAAiB,UAAU,EAAE,MAAM,WAAW,CAAC;AAEtD,OAAO,EAAE,cAAc,EAAE,MAAM,sBAAsB,CAAC;AACtD,OAAO,EAAE,YAAY,EAAE,MAAM,iBAAiB,CAAC;AAE/C,IAAM,gBAAgB,GAAG,IAAI,CAAC,SAAS,CAAC,iCAAiC,EAAE;IACzE,cAAc,EAAE,iBAAiB;CAClC,CAAC,CAAC;AAEH;;;;;;;GAOG;AACH,SAAS,WAAW,CAAC,QAAmB;IACtC,OAAO,YAAY,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC;AACtD,CAAC;AAaD;;;;;;;;;;GAUG;AACH,SAAS,IAAI,CAAC,QAAkB,EAAE,OAA8B;IAA9B,wBAAA,EAAA,YAA8B;IAC9D,IAAM,KAAK,GAAG,YAAY,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;IAEhD,+EAA+E;IAC/E,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;QAChC,MAAM,IAAI,KAAK,CAAC,wLAEgB,CAAC,CAAC;KACnC;IAED,OAAO,UAAU,CAAC,oBAAC,cAAc,IAAC,KAAK,EAAE,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAE,KAAK,EAAE,OAAO,CAAC,KAAK,GAAI,EAAE;QAC5F,gBAAgB,EAAE,gBAAgB;QAClC,oBAAoB,EAAE,gBAAgB;KACvC,CAAC,CAAC;AACL,CAAC;AAED,IAAM,SAAS,GAAG;IAChB,WAAW,aAAA;IACX,IAAI,MAAA;CACL,CAAC;AAEF,OAAO,EAAE,SAAS,EAAE,CAAC","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\n\nimport { i18n } from '@kbn/i18n';\nimport { FlyoutSession, openFlyout } from 'ui/flyout';\nimport { Adapters } from './types';\nimport { InspectorPanel } from './ui/inspector_panel';\nimport { viewRegistry } from './view_registry';\n\nconst closeButtonLabel = i18n.translate('common.ui.inspector.closeButton', {\n  defaultMessage: 'Close Inspector',\n});\n\n/**\n * Checks if a inspector panel could be shown based on the passed adapters.\n *\n * @param {object} adapters - An object of adapters. This should be the same\n *    you would pass into `open`.\n * @returns {boolean} True, if a call to `open` with the same adapters\n *    would have shown the inspector panel, false otherwise.\n */\nfunction isAvailable(adapters?: Adapters): boolean {\n  return viewRegistry.getVisible(adapters).length > 0;\n}\n\n/**\n * Options that can be specified when opening the inspector.\n * @property {string} title - An optional title, that will be shown in the header\n *    of the inspector. Can be used to give more context about what is being inspected.\n */\ninterface InspectorOptions {\n  title?: string;\n}\n\nexport type InspectorSession = FlyoutSession;\n\n/**\n * Opens the inspector panel for the given adapters and close any previously opened\n * inspector panel. The previously panel will be closed also if no new panel will be\n * opened (e.g. because of the passed adapters no view is available). You can use\n * {@link InspectorSession#close} on the return value to close that opened panel again.\n *\n * @param {object} adapters - An object of adapters for which you want to show\n *    the inspector panel.\n * @param {InspectorOptions} options - Options that configure the inspector. See InspectorOptions type.\n * @return {InspectorSession} The session instance for the opened inspector.\n */\nfunction open(adapters: Adapters, options: InspectorOptions = {}): InspectorSession {\n  const views = viewRegistry.getVisible(adapters);\n\n  // Don't open inspector if there are no views available for the passed adapters\n  if (!views || views.length === 0) {\n    throw new Error(`Tried to open an inspector without views being available.\n      Make sure to call Inspector.isAvailable() with the same adapters before to check\n      if an inspector can be shown.`);\n  }\n\n  return openFlyout(<InspectorPanel views={views} adapters={adapters} title={options.title} />, {\n    'data-test-subj': 'inspectorPanel',\n    closeButtonAriaLabel: closeButtonLabel,\n  });\n}\n\nconst Inspector = {\n  isAvailable,\n  open,\n};\n\nexport { Inspector };\n"]}]}