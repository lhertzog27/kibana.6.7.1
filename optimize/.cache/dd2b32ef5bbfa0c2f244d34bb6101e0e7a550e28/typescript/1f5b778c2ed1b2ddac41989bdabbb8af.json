{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/containers/logs/with_log_textview.tsx","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/containers/logs/with_log_textview.tsx","mtime":1567631711983},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\nimport { logTextviewActions, logTextviewSelectors } from '../../store';\nimport { asChildFunctionRenderer } from '../../utils/typed_react';\nimport { bindPlainActionCreators } from '../../utils/typed_redux';\nimport { UrlStateContainer } from '../../utils/url_state';\nvar availableTextScales = ['large', 'medium', 'small'];\nexport var withLogTextview = connect(function (state) { return ({\n    availableTextScales: availableTextScales,\n    textScale: logTextviewSelectors.selectTextviewScale(state),\n    urlState: selectTextviewUrlState(state),\n    wrap: logTextviewSelectors.selectTextviewWrap(state),\n}); }, bindPlainActionCreators({\n    setTextScale: logTextviewActions.setTextviewScale,\n    setTextWrap: logTextviewActions.setTextviewWrap,\n}));\nexport var WithLogTextview = asChildFunctionRenderer(withLogTextview);\nexport var WithLogTextviewUrlState = function () { return (React.createElement(WithLogTextview, null, function (_a) {\n    var urlState = _a.urlState, setTextScale = _a.setTextScale, setTextWrap = _a.setTextWrap;\n    return (React.createElement(UrlStateContainer, { urlState: urlState, urlStateKey: \"logTextview\", mapToUrlState: mapToUrlState, onChange: function (newUrlState) {\n            if (newUrlState && newUrlState.textScale) {\n                setTextScale(newUrlState.textScale);\n            }\n            if (newUrlState && typeof newUrlState.wrap !== 'undefined') {\n                setTextWrap(newUrlState.wrap);\n            }\n        }, onInitialize: function (newUrlState) {\n            if (newUrlState && newUrlState.textScale) {\n                setTextScale(newUrlState.textScale);\n            }\n            if (newUrlState && typeof newUrlState.wrap !== 'undefined') {\n                setTextWrap(newUrlState.wrap);\n            }\n        } }));\n})); };\nvar mapToUrlState = function (value) {\n    return value\n        ? {\n            textScale: mapToTextScaleUrlState(value.textScale),\n            wrap: mapToWrapUrlState(value.wrap),\n        }\n        : undefined;\n};\nvar mapToTextScaleUrlState = function (value) {\n    return availableTextScales.includes(value) ? value : undefined;\n};\nvar mapToWrapUrlState = function (value) { return (typeof value === 'boolean' ? value : undefined); };\nvar selectTextviewUrlState = createSelector(logTextviewSelectors.selectTextviewScale, logTextviewSelectors.selectTextviewWrap, function (textScale, wrap) { return ({\n    textScale: textScale,\n    wrap: wrap,\n}); });\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/containers/logs/with_log_textview.tsx","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/containers/logs/with_log_textview.tsx"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\n\nimport { TextScale } from '../../../common/log_text_scale';\nimport { logTextviewActions, logTextviewSelectors, State } from '../../store';\nimport { asChildFunctionRenderer } from '../../utils/typed_react';\nimport { bindPlainActionCreators } from '../../utils/typed_redux';\nimport { UrlStateContainer } from '../../utils/url_state';\n\nconst availableTextScales = ['large', 'medium', 'small'] as TextScale[];\n\nexport const withLogTextview = connect(\n  (state: State) => ({\n    availableTextScales,\n    textScale: logTextviewSelectors.selectTextviewScale(state),\n    urlState: selectTextviewUrlState(state),\n    wrap: logTextviewSelectors.selectTextviewWrap(state),\n  }),\n  bindPlainActionCreators({\n    setTextScale: logTextviewActions.setTextviewScale,\n    setTextWrap: logTextviewActions.setTextviewWrap,\n  })\n);\n\nexport const WithLogTextview = asChildFunctionRenderer(withLogTextview);\n\n/**\n * Url State\n */\n\ninterface LogTextviewUrlState {\n  textScale?: ReturnType<typeof logTextviewSelectors.selectTextviewScale>;\n  wrap?: ReturnType<typeof logTextviewSelectors.selectTextviewWrap>;\n}\n\nexport const WithLogTextviewUrlState = () => (\n  <WithLogTextview>\n    {({ urlState, setTextScale, setTextWrap }) => (\n      <UrlStateContainer\n        urlState={urlState}\n        urlStateKey=\"logTextview\"\n        mapToUrlState={mapToUrlState}\n        onChange={newUrlState => {\n          if (newUrlState && newUrlState.textScale) {\n            setTextScale(newUrlState.textScale);\n          }\n          if (newUrlState && typeof newUrlState.wrap !== 'undefined') {\n            setTextWrap(newUrlState.wrap);\n          }\n        }}\n        onInitialize={newUrlState => {\n          if (newUrlState && newUrlState.textScale) {\n            setTextScale(newUrlState.textScale);\n          }\n          if (newUrlState && typeof newUrlState.wrap !== 'undefined') {\n            setTextWrap(newUrlState.wrap);\n          }\n        }}\n      />\n    )}\n  </WithLogTextview>\n);\n\nconst mapToUrlState = (value: any): LogTextviewUrlState | undefined =>\n  value\n    ? {\n        textScale: mapToTextScaleUrlState(value.textScale),\n        wrap: mapToWrapUrlState(value.wrap),\n      }\n    : undefined;\n\nconst mapToTextScaleUrlState = (value: any) =>\n  availableTextScales.includes(value) ? (value as TextScale) : undefined;\n\nconst mapToWrapUrlState = (value: any) => (typeof value === 'boolean' ? value : undefined);\n\nconst selectTextviewUrlState = createSelector(\n  logTextviewSelectors.selectTextviewScale,\n  logTextviewSelectors.selectTextviewWrap,\n  (textScale, wrap) => ({\n    textScale,\n    wrap,\n  })\n);\n"]}]}