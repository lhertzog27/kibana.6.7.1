{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/src/ui/public/utils/subscribe_with_scope.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/utils/subscribe_with_scope.ts","mtime":1567631711766},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport * as tslib_1 from \"tslib\";\nimport { fatalError } from 'ui/notify/fatal_error';\nfunction callInDigest($scope, fn) {\n    var args = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n        args[_i - 2] = arguments[_i];\n    }\n    try {\n        // this is terrible, but necessary to synchronously deliver subscription values\n        // to angular scopes. This is required by some APIs, like the `config` service,\n        // and beneficial for root level directives where additional digest cycles make\n        // kibana sluggish to load.\n        //\n        // If you copy this code elsewhere you better have a good reason :)\n        if ($scope.$root.$$phase) {\n            fn.apply(void 0, tslib_1.__spread(args));\n        }\n        else {\n            $scope.$apply(function () { return fn.apply(void 0, tslib_1.__spread(args)); });\n        }\n    }\n    catch (error) {\n        fatalError(error);\n    }\n}\n/**\n * Subscribe to an observable at a $scope, ensuring that the digest cycle\n * is run for subscriber hooks and routing errors to fatalError if not handled.\n */\nexport function subscribeWithScope($scope, observable, observer) {\n    return observable.subscribe({\n        next: function (value) {\n            if (observer && observer.next) {\n                callInDigest($scope, observer.next, value);\n            }\n        },\n        error: function (error) {\n            callInDigest($scope, function () {\n                if (observer && observer.error) {\n                    observer.error(error);\n                }\n                else {\n                    throw new Error(\"Uncaught error in subscribeWithScope(): \" + (error ? error.stack || error.message : error));\n                }\n            });\n        },\n        complete: function () {\n            if (observer && observer.complete) {\n                callInDigest($scope, observer.complete);\n            }\n        },\n    });\n}\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/src/ui/public/utils/subscribe_with_scope.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/src/ui/public/utils/subscribe_with_scope.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;GAiBG;;AAIH,OAAO,EAAE,UAAU,EAAE,MAAM,uBAAuB,CAAC;AAEnD,SAAS,YAAY,CAAkB,MAAc,EAAE,EAAwB;IAAE,cAAU;SAAV,UAAU,EAAV,qBAAU,EAAV,IAAU;QAAV,6BAAU;;IACzF,IAAI;QACF,+EAA+E;QAC/E,+EAA+E;QAC/E,+EAA+E;QAC/E,2BAA2B;QAC3B,EAAE;QACF,mEAAmE;QACnE,IAAI,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE;YACxB,EAAE,gCAAI,IAAI,GAAE;SACb;aAAM;YACL,MAAM,CAAC,MAAM,CAAC,cAAM,OAAA,EAAE,gCAAI,IAAI,IAAV,CAAW,CAAC,CAAC;SAClC;KACF;IAAC,OAAO,KAAK,EAAE;QACd,UAAU,CAAC,KAAK,CAAC,CAAC;KACnB;AACH,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,kBAAkB,CAChC,MAAc,EACd,UAA4B,EAC5B,QAAgC;IAEhC,OAAO,UAAU,CAAC,SAAS,CAAC;QAC1B,IAAI,YAAC,KAAK;YACR,IAAI,QAAQ,IAAI,QAAQ,CAAC,IAAI,EAAE;gBAC7B,YAAY,CAAC,MAAM,EAAE,QAAQ,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;aAC5C;QACH,CAAC;QACD,KAAK,YAAC,KAAK;YACT,YAAY,CAAC,MAAM,EAAE;gBACnB,IAAI,QAAQ,IAAI,QAAQ,CAAC,KAAK,EAAE;oBAC9B,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;iBACvB;qBAAM;oBACL,MAAM,IAAI,KAAK,CACb,8CACE,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAC5C,CACH,CAAC;iBACH;YACH,CAAC,CAAC,CAAC;QACL,CAAC;QACD,QAAQ;YACN,IAAI,QAAQ,IAAI,QAAQ,CAAC,QAAQ,EAAE;gBACjC,YAAY,CAAC,MAAM,EAAE,QAAQ,CAAC,QAAQ,CAAC,CAAC;aACzC;QACH,CAAC;KACF,CAAC,CAAC;AACL,CAAC","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { IScope } from 'angular';\nimport * as Rx from 'rxjs';\nimport { fatalError } from 'ui/notify/fatal_error';\n\nfunction callInDigest<T extends any[]>($scope: IScope, fn: (...args: T) => void, ...args: T) {\n  try {\n    // this is terrible, but necessary to synchronously deliver subscription values\n    // to angular scopes. This is required by some APIs, like the `config` service,\n    // and beneficial for root level directives where additional digest cycles make\n    // kibana sluggish to load.\n    //\n    // If you copy this code elsewhere you better have a good reason :)\n    if ($scope.$root.$$phase) {\n      fn(...args);\n    } else {\n      $scope.$apply(() => fn(...args));\n    }\n  } catch (error) {\n    fatalError(error);\n  }\n}\n\n/**\n * Subscribe to an observable at a $scope, ensuring that the digest cycle\n * is run for subscriber hooks and routing errors to fatalError if not handled.\n */\nexport function subscribeWithScope<T>(\n  $scope: IScope,\n  observable: Rx.Observable<T>,\n  observer?: Rx.PartialObserver<T>\n) {\n  return observable.subscribe({\n    next(value) {\n      if (observer && observer.next) {\n        callInDigest($scope, observer.next, value);\n      }\n    },\n    error(error) {\n      callInDigest($scope, () => {\n        if (observer && observer.error) {\n          observer.error(error);\n        } else {\n          throw new Error(\n            `Uncaught error in subscribeWithScope(): ${\n              error ? error.stack || error.message : error\n            }`\n          );\n        }\n      });\n    },\n    complete() {\n      if (observer && observer.complete) {\n        callInDigest($scope, observer.complete);\n      }\n    },\n  });\n}\n"]}]}