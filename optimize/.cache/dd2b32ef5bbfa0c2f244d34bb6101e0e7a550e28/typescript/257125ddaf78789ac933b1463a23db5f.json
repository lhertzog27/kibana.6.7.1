{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/apm/public/store/reactReduxRequest/serviceDetails.tsx","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/apm/public/store/reactReduxRequest/serviceDetails.tsx","mtime":1567631711871},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport { first, get } from 'lodash';\nimport React from 'react';\nimport { Request } from 'react-redux-request';\nimport { loadServiceDetails } from '../../services/rest/apm/services';\nimport { createInitialDataSelector } from './helpers';\nvar ID = 'serviceDetails';\nvar INITIAL_DATA = { types: [] };\nvar withInitialData = createInitialDataSelector(INITIAL_DATA);\nexport function getServiceDetails(state) {\n    return withInitialData(state.reactReduxRequest[ID]);\n}\nexport function getDefaultTransactionType(state) {\n    var types = get(state.reactReduxRequest[ID], 'data.types');\n    return first(types);\n}\nexport function ServiceDetailsRequest(_a) {\n    var urlParams = _a.urlParams, render = _a.render;\n    var serviceName = urlParams.serviceName, start = urlParams.start, end = urlParams.end, kuery = urlParams.kuery;\n    if (!(serviceName && start && end)) {\n        return null;\n    }\n    return (React.createElement(Request, { id: ID, fn: loadServiceDetails, args: [{ serviceName: serviceName, start: start, end: end, kuery: kuery }], selector: getServiceDetails, render: render }));\n}\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/apm/public/store/reactReduxRequest/serviceDetails.tsx","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/apm/public/store/reactReduxRequest/serviceDetails.tsx"],"names":[],"mappings":"AAAA;;;;GAIG;AAEH,OAAO,EAAE,KAAK,EAAE,GAAG,EAAE,MAAM,QAAQ,CAAC;AACpC,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,OAAO,EAAa,MAAM,qBAAqB,CAAC;AAGzD,OAAO,EAAE,kBAAkB,EAAE,MAAM,kCAAkC,CAAC;AAEtE,OAAO,EAAE,yBAAyB,EAAE,MAAM,WAAW,CAAC;AAEtD,IAAM,EAAE,GAAG,gBAAgB,CAAC;AAC5B,IAAM,YAAY,GAAG,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC;AACnC,IAAM,eAAe,GAAG,yBAAyB,CAAC,YAAY,CAAC,CAAC;AAEhE,MAAM,UAAU,iBAAiB,CAAC,KAAkB;IAClD,OAAO,eAAe,CAAC,KAAK,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAC,CAAC;AACtD,CAAC;AAED,MAAM,UAAU,yBAAyB,CAAC,KAAkB;IAC1D,IAAM,KAAK,GAAa,GAAG,CAAC,KAAK,CAAC,iBAAiB,CAAC,EAAE,CAAC,EAAE,YAAY,CAAC,CAAC;IACvE,OAAO,KAAK,CAAC,KAAK,CAAC,CAAC;AACtB,CAAC;AAED,MAAM,UAAU,qBAAqB,CAAC,EAMrC;QALC,wBAAS,EACT,kBAAM;IAKE,IAAA,mCAAW,EAAE,uBAAK,EAAE,mBAAG,EAAE,uBAAK,CAAe;IAErD,IAAI,CAAC,CAAC,WAAW,IAAI,KAAK,IAAI,GAAG,CAAC,EAAE;QAClC,OAAO,IAAI,CAAC;KACb;IAED,OAAO,CACL,oBAAC,OAAO,IACN,EAAE,EAAE,EAAE,EACN,EAAE,EAAE,kBAAkB,EACtB,IAAI,EAAE,CAAC,EAAE,WAAW,aAAA,EAAE,KAAK,OAAA,EAAE,GAAG,KAAA,EAAE,KAAK,OAAA,EAAE,CAAC,EAC1C,QAAQ,EAAE,iBAAiB,EAC3B,MAAM,EAAE,MAAM,GACd,CACH,CAAC;AACJ,CAAC","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport { first, get } from 'lodash';\nimport React from 'react';\nimport { Request, RRRRender } from 'react-redux-request';\nimport { IUrlParams } from 'x-pack/plugins/apm/public/store/urlParams';\nimport { ServiceAPIResponse } from 'x-pack/plugins/apm/server/lib/services/get_service';\nimport { loadServiceDetails } from '../../services/rest/apm/services';\nimport { IReduxState } from '../rootReducer';\nimport { createInitialDataSelector } from './helpers';\n\nconst ID = 'serviceDetails';\nconst INITIAL_DATA = { types: [] };\nconst withInitialData = createInitialDataSelector(INITIAL_DATA);\n\nexport function getServiceDetails(state: IReduxState) {\n  return withInitialData(state.reactReduxRequest[ID]);\n}\n\nexport function getDefaultTransactionType(state: IReduxState) {\n  const types: string[] = get(state.reactReduxRequest[ID], 'data.types');\n  return first(types);\n}\n\nexport function ServiceDetailsRequest({\n  urlParams,\n  render\n}: {\n  urlParams: IUrlParams;\n  render: RRRRender<ServiceAPIResponse>;\n}) {\n  const { serviceName, start, end, kuery } = urlParams;\n\n  if (!(serviceName && start && end)) {\n    return null;\n  }\n\n  return (\n    <Request\n      id={ID}\n      fn={loadServiceDetails}\n      args={[{ serviceName, start, end, kuery }]}\n      selector={getServiceDetails}\n      render={render}\n    />\n  );\n}\n"]}]}