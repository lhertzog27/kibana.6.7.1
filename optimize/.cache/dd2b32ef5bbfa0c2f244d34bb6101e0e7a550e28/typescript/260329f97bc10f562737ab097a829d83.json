{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/store/local/log_position/reducer.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/store/local/log_position/reducer.ts","mtime":1567631711988},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport { combineReducers } from 'redux';\nimport { reducerWithInitialState } from 'typescript-fsa-reducers/dist';\nimport { jumpToTargetPosition, reportVisiblePositions, reportVisibleSummary, startAutoReload, stopAutoReload, } from './actions';\nexport var initialLogPositionState = {\n    targetPosition: null,\n    updatePolicy: {\n        policy: 'manual',\n    },\n    visiblePositions: {\n        endKey: null,\n        middleKey: null,\n        startKey: null,\n    },\n    visibleSummary: {\n        start: null,\n        end: null,\n    },\n};\nvar targetPositionReducer = reducerWithInitialState(initialLogPositionState.targetPosition).case(jumpToTargetPosition, function (state, target) { return target; });\nvar targetPositionUpdatePolicyReducer = reducerWithInitialState(initialLogPositionState.updatePolicy)\n    .case(startAutoReload, function (state, interval) { return ({\n    policy: 'interval',\n    interval: interval,\n}); })\n    .case(stopAutoReload, function () { return ({\n    policy: 'manual',\n}); });\nvar visiblePositionReducer = reducerWithInitialState(initialLogPositionState.visiblePositions).case(reportVisiblePositions, function (state, _a) {\n    var startKey = _a.startKey, middleKey = _a.middleKey, endKey = _a.endKey;\n    return ({\n        endKey: endKey,\n        middleKey: middleKey,\n        startKey: startKey,\n    });\n});\nvar visibleSummaryReducer = reducerWithInitialState(initialLogPositionState.visibleSummary).case(reportVisibleSummary, function (state, _a) {\n    var start = _a.start, end = _a.end;\n    return ({\n        start: start,\n        end: end,\n    });\n});\nexport var logPositionReducer = combineReducers({\n    targetPosition: targetPositionReducer,\n    updatePolicy: targetPositionUpdatePolicyReducer,\n    visiblePositions: visiblePositionReducer,\n    visibleSummary: visibleSummaryReducer,\n});\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/store/local/log_position/reducer.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/store/local/log_position/reducer.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAEH,OAAO,EAAE,eAAe,EAAE,MAAM,OAAO,CAAC;AACxC,OAAO,EAAE,uBAAuB,EAAE,MAAM,8BAA8B,CAAC;AAGvE,OAAO,EACL,oBAAoB,EACpB,sBAAsB,EACtB,oBAAoB,EACpB,eAAe,EACf,cAAc,GACf,MAAM,WAAW,CAAC;AA6BnB,MAAM,CAAC,IAAM,uBAAuB,GAAqB;IACvD,cAAc,EAAE,IAAI;IACpB,YAAY,EAAE;QACZ,MAAM,EAAE,QAAQ;KACjB;IACD,gBAAgB,EAAE;QAChB,MAAM,EAAE,IAAI;QACZ,SAAS,EAAE,IAAI;QACf,QAAQ,EAAE,IAAI;KACf;IACD,cAAc,EAAE;QACd,KAAK,EAAE,IAAI;QACX,GAAG,EAAE,IAAI;KACV;CACF,CAAC;AAEF,IAAM,qBAAqB,GAAG,uBAAuB,CAAC,uBAAuB,CAAC,cAAc,CAAC,CAAC,IAAI,CAChG,oBAAoB,EACpB,UAAC,KAAK,EAAE,MAAM,IAAK,OAAA,MAAM,EAAN,CAAM,CAC1B,CAAC;AAEF,IAAM,iCAAiC,GAAG,uBAAuB,CAC/D,uBAAuB,CAAC,YAAY,CACrC;KACE,IAAI,CAAC,eAAe,EAAE,UAAC,KAAK,EAAE,QAAQ,IAAK,OAAA,CAAC;IAC3C,MAAM,EAAE,UAAU;IAClB,QAAQ,UAAA;CACT,CAAC,EAH0C,CAG1C,CAAC;KACF,IAAI,CAAC,cAAc,EAAE,cAAM,OAAA,CAAC;IAC3B,MAAM,EAAE,QAAQ;CACjB,CAAC,EAF0B,CAE1B,CAAC,CAAC;AAEN,IAAM,sBAAsB,GAAG,uBAAuB,CACpD,uBAAuB,CAAC,gBAAgB,CACzC,CAAC,IAAI,CAAC,sBAAsB,EAAE,UAAC,KAAK,EAAE,EAA+B;QAA7B,sBAAQ,EAAE,wBAAS,EAAE,kBAAM;IAAO,OAAA,CAAC;QAC1E,MAAM,QAAA;QACN,SAAS,WAAA;QACT,QAAQ,UAAA;KACT,CAAC;AAJyE,CAIzE,CAAC,CAAC;AAEJ,IAAM,qBAAqB,GAAG,uBAAuB,CAAC,uBAAuB,CAAC,cAAc,CAAC,CAAC,IAAI,CAChG,oBAAoB,EACpB,UAAC,KAAK,EAAE,EAAc;QAAZ,gBAAK,EAAE,YAAG;IAAO,OAAA,CAAC;QAC1B,KAAK,OAAA;QACL,GAAG,KAAA;KACJ,CAAC;AAHyB,CAGzB,CACH,CAAC;AAEF,MAAM,CAAC,IAAM,kBAAkB,GAAG,eAAe,CAAmB;IAClE,cAAc,EAAE,qBAAqB;IACrC,YAAY,EAAE,iCAAiC;IAC/C,gBAAgB,EAAE,sBAAsB;IACxC,cAAc,EAAE,qBAAqB;CACtC,CAAC,CAAC","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport { combineReducers } from 'redux';\nimport { reducerWithInitialState } from 'typescript-fsa-reducers/dist';\n\nimport { TimeKey } from '../../../../common/time';\nimport {\n  jumpToTargetPosition,\n  reportVisiblePositions,\n  reportVisibleSummary,\n  startAutoReload,\n  stopAutoReload,\n} from './actions';\n\ninterface ManualTargetPositionUpdatePolicy {\n  policy: 'manual';\n}\n\ninterface IntervalTargetPositionUpdatePolicy {\n  policy: 'interval';\n  interval: number;\n}\n\ntype TargetPositionUpdatePolicy =\n  | ManualTargetPositionUpdatePolicy\n  | IntervalTargetPositionUpdatePolicy;\n\nexport interface LogPositionState {\n  targetPosition: TimeKey | null;\n  updatePolicy: TargetPositionUpdatePolicy;\n  visiblePositions: {\n    startKey: TimeKey | null;\n    middleKey: TimeKey | null;\n    endKey: TimeKey | null;\n  };\n  visibleSummary: {\n    start: number | null;\n    end: number | null;\n  };\n}\n\nexport const initialLogPositionState: LogPositionState = {\n  targetPosition: null,\n  updatePolicy: {\n    policy: 'manual',\n  },\n  visiblePositions: {\n    endKey: null,\n    middleKey: null,\n    startKey: null,\n  },\n  visibleSummary: {\n    start: null,\n    end: null,\n  },\n};\n\nconst targetPositionReducer = reducerWithInitialState(initialLogPositionState.targetPosition).case(\n  jumpToTargetPosition,\n  (state, target) => target\n);\n\nconst targetPositionUpdatePolicyReducer = reducerWithInitialState(\n  initialLogPositionState.updatePolicy\n)\n  .case(startAutoReload, (state, interval) => ({\n    policy: 'interval',\n    interval,\n  }))\n  .case(stopAutoReload, () => ({\n    policy: 'manual',\n  }));\n\nconst visiblePositionReducer = reducerWithInitialState(\n  initialLogPositionState.visiblePositions\n).case(reportVisiblePositions, (state, { startKey, middleKey, endKey }) => ({\n  endKey,\n  middleKey,\n  startKey,\n}));\n\nconst visibleSummaryReducer = reducerWithInitialState(initialLogPositionState.visibleSummary).case(\n  reportVisibleSummary,\n  (state, { start, end }) => ({\n    start,\n    end,\n  })\n);\n\nexport const logPositionReducer = combineReducers<LogPositionState>({\n  targetPosition: targetPositionReducer,\n  updatePolicy: targetPositionUpdatePolicyReducer,\n  visiblePositions: visiblePositionReducer,\n  visibleSummary: visibleSummaryReducer,\n});\n"]}]}