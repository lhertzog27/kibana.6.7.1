{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/uptime/public/components/queries/snapshot/snapshot_query.tsx","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/uptime/public/components/queries/snapshot/snapshot_query.tsx","mtime":1567631712330},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport * as tslib_1 from \"tslib\";\nimport { i18n } from '@kbn/i18n';\nimport React from 'react';\nimport { Query } from 'react-apollo';\nimport { Snapshot, SnapshotLoading } from '../../functional';\nimport { getSnapshotQuery } from './get_snapshot';\nvar SnapshotQuery = /** @class */ (function (_super) {\n    tslib_1.__extends(SnapshotQuery, _super);\n    function SnapshotQuery(props) {\n        var _this = _super.call(this, props) || this;\n        _this.updateWindowSize = function () {\n            _this.setState({ windowWidth: window.innerWidth });\n        };\n        _this.state = {\n            windowWidth: window.innerWidth,\n        };\n        return _this;\n    }\n    SnapshotQuery.prototype.componentDidMount = function () {\n        window.addEventListener('resize', this.updateWindowSize);\n    };\n    SnapshotQuery.prototype.componentWillUnmount = function () {\n        window.removeEventListener('resize', this.updateWindowSize);\n    };\n    SnapshotQuery.prototype.render = function () {\n        var _this = this;\n        var _a = this.props, autorefreshIsPaused = _a.autorefreshIsPaused, autorefreshInterval = _a.autorefreshInterval, _b = _a.colors, primary = _b.primary, danger = _b.danger, dateRangeStart = _a.dateRangeStart, dateRangeEnd = _a.dateRangeEnd, filters = _a.filters;\n        return (React.createElement(Query, { pollInterval: autorefreshIsPaused ? undefined : autorefreshInterval, query: getSnapshotQuery, variables: { dateRangeStart: dateRangeStart, dateRangeEnd: dateRangeEnd, filters: filters } }, function (_a) {\n            var loading = _a.loading, error = _a.error, data = _a.data;\n            if (loading) {\n                return React.createElement(SnapshotLoading, null);\n            }\n            if (error) {\n                return i18n.translate('xpack.uptime.snapshot.errorMessage', {\n                    values: { message: error.message },\n                    defaultMessage: 'Error {message}',\n                });\n            }\n            var snapshot = data.snapshot;\n            return (React.createElement(Snapshot, { danger: danger, primary: primary, snapshot: snapshot, windowWidth: _this.state.windowWidth }));\n        }));\n    };\n    return SnapshotQuery;\n}(React.Component));\nexport { SnapshotQuery };\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/uptime/public/components/queries/snapshot/snapshot_query.tsx","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/uptime/public/components/queries/snapshot/snapshot_query.tsx"],"names":[],"mappings":"AAAA;;;;GAIG;;AAEH,OAAO,EAAE,IAAI,EAAE,MAAM,WAAW,CAAC;AACjC,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,KAAK,EAAE,MAAM,cAAc,CAAC;AAGrC,OAAO,EAAE,QAAQ,EAAE,eAAe,EAAE,MAAM,kBAAkB,CAAC;AAC7D,OAAO,EAAE,gBAAgB,EAAE,MAAM,gBAAgB,CAAC;AAYlD;IAAmC,yCAA0C;IAC3E,uBAAY,KAAY;QAAxB,YACE,kBAAM,KAAK,CAAC,SAIb;QAmDO,sBAAgB,GAAG;YACzB,KAAI,CAAC,QAAQ,CAAC,EAAE,WAAW,EAAE,MAAM,CAAC,UAAU,EAAE,CAAC,CAAC;QACpD,CAAC,CAAC;QAxDA,KAAI,CAAC,KAAK,GAAG;YACX,WAAW,EAAE,MAAM,CAAC,UAAU;SAC/B,CAAC;;IACJ,CAAC;IAEM,yCAAiB,GAAxB;QACE,MAAM,CAAC,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC;IAC3D,CAAC;IAEM,4CAAoB,GAA3B;QACE,MAAM,CAAC,mBAAmB,CAAC,QAAQ,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC;IAC9D,CAAC;IAEM,8BAAM,GAAb;QAAA,iBAuCC;QAtCO,IAAA,eAOQ,EANZ,4CAAmB,EACnB,4CAAmB,EACnB,cAA2B,EAAjB,oBAAO,EAAE,kBAAM,EACzB,kCAAc,EACd,8BAAY,EACZ,oBAAO,CACM;QAEf,OAAO,CACL,oBAAC,KAAK,IACJ,YAAY,EAAE,mBAAmB,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,mBAAmB,EACnE,KAAK,EAAE,gBAAgB,EACvB,SAAS,EAAE,EAAE,cAAc,gBAAA,EAAE,YAAY,cAAA,EAAE,OAAO,SAAA,EAAE,IAEnD,UAAC,EAAwB;gBAAtB,oBAAO,EAAE,gBAAK,EAAE,cAAI;YACtB,IAAI,OAAO,EAAE;gBACX,OAAO,oBAAC,eAAe,OAAG,CAAC;aAC5B;YACD,IAAI,KAAK,EAAE;gBACT,OAAO,IAAI,CAAC,SAAS,CAAC,oCAAoC,EAAE;oBAC1D,MAAM,EAAE,EAAE,OAAO,EAAE,KAAK,CAAC,OAAO,EAAE;oBAClC,cAAc,EAAE,iBAAiB;iBAClC,CAAC,CAAC;aACJ;YACO,IAAA,wBAAQ,CAAsC;YAEtD,OAAO,CACL,oBAAC,QAAQ,IACP,MAAM,EAAE,MAAM,EACd,OAAO,EAAE,OAAO,EAChB,QAAQ,EAAE,QAAQ,EAClB,WAAW,EAAE,KAAI,CAAC,KAAK,CAAC,WAAW,GACnC,CACH,CAAC;QACJ,CAAC,CACK,CACT,CAAC;IACJ,CAAC;IAKH,oBAAC;AAAD,CAAC,AA5DD,CAAmC,KAAK,CAAC,SAAS,GA4DjD","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport { i18n } from '@kbn/i18n';\nimport React from 'react';\nimport { Query } from 'react-apollo';\nimport { Snapshot as SnapshotType } from '../../../../common/graphql/types';\nimport { UptimeCommonProps } from '../../../uptime_app';\nimport { Snapshot, SnapshotLoading } from '../../functional';\nimport { getSnapshotQuery } from './get_snapshot';\n\ninterface SnapshotQueryProps {\n  filters?: string;\n}\n\ninterface SnapshotQueryState {\n  windowWidth: number;\n}\n\ntype Props = SnapshotQueryProps & UptimeCommonProps;\n\nexport class SnapshotQuery extends React.Component<Props, SnapshotQueryState> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      windowWidth: window.innerWidth,\n    };\n  }\n\n  public componentDidMount() {\n    window.addEventListener('resize', this.updateWindowSize);\n  }\n\n  public componentWillUnmount() {\n    window.removeEventListener('resize', this.updateWindowSize);\n  }\n\n  public render() {\n    const {\n      autorefreshIsPaused,\n      autorefreshInterval,\n      colors: { primary, danger },\n      dateRangeStart,\n      dateRangeEnd,\n      filters,\n    } = this.props;\n\n    return (\n      <Query\n        pollInterval={autorefreshIsPaused ? undefined : autorefreshInterval}\n        query={getSnapshotQuery}\n        variables={{ dateRangeStart, dateRangeEnd, filters }}\n      >\n        {({ loading, error, data }) => {\n          if (loading) {\n            return <SnapshotLoading />;\n          }\n          if (error) {\n            return i18n.translate('xpack.uptime.snapshot.errorMessage', {\n              values: { message: error.message },\n              defaultMessage: 'Error {message}',\n            });\n          }\n          const { snapshot }: { snapshot: SnapshotType } = data;\n\n          return (\n            <Snapshot\n              danger={danger}\n              primary={primary}\n              snapshot={snapshot}\n              windowWidth={this.state.windowWidth}\n            />\n          );\n        }}\n      </Query>\n    );\n  }\n\n  private updateWindowSize = () => {\n    this.setState({ windowWidth: window.innerWidth });\n  };\n}\n"]}]}