{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/containers/waffle/with_waffle_filters.tsx","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/containers/waffle/with_waffle_filters.tsx","mtime":1567631711984},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { waffleFilterActions, waffleFilterSelectors } from '../../store';\nimport { convertKueryToElasticSearchQuery } from '../../utils/kuery';\nimport { asChildFunctionRenderer } from '../../utils/typed_react';\nimport { bindPlainActionCreators } from '../../utils/typed_redux';\nimport { UrlStateContainer } from '../../utils/url_state';\nexport var withWaffleFilter = connect(function (state) { return ({\n    filterQuery: waffleFilterSelectors.selectWaffleFilterQuery(state),\n    filterQueryDraft: waffleFilterSelectors.selectWaffleFilterQueryDraft(state),\n    filterQueryAsJson: waffleFilterSelectors.selectWaffleFilterQueryAsJson(state),\n    isFilterQueryDraftValid: waffleFilterSelectors.selectIsWaffleFilterQueryDraftValid(state),\n}); }, function (dispatch, ownProps) {\n    return bindPlainActionCreators({\n        applyFilterQuery: function (query) {\n            return waffleFilterActions.applyWaffleFilterQuery({\n                query: query,\n                serializedQuery: convertKueryToElasticSearchQuery(query.expression, ownProps.indexPattern),\n            });\n        },\n        applyFilterQueryFromKueryExpression: function (expression) {\n            return waffleFilterActions.applyWaffleFilterQuery({\n                query: {\n                    kind: 'kuery',\n                    expression: expression,\n                },\n                serializedQuery: convertKueryToElasticSearchQuery(expression, ownProps.indexPattern),\n            });\n        },\n        setFilterQueryDraft: waffleFilterActions.setWaffleFilterQueryDraft,\n        setFilterQueryDraftFromKueryExpression: function (expression) {\n            return waffleFilterActions.setWaffleFilterQueryDraft({\n                kind: 'kuery',\n                expression: expression,\n            });\n        },\n    });\n});\nexport var WithWaffleFilter = asChildFunctionRenderer(withWaffleFilter);\nexport var WithWaffleFilterUrlState = function (_a) {\n    var indexPattern = _a.indexPattern;\n    return (React.createElement(WithWaffleFilter, { indexPattern: indexPattern }, function (_a) {\n        var applyFilterQuery = _a.applyFilterQuery, filterQuery = _a.filterQuery;\n        return (React.createElement(UrlStateContainer, { urlState: filterQuery, urlStateKey: \"waffleFilter\", mapToUrlState: mapToUrlState, onChange: function (urlState) {\n                if (urlState) {\n                    applyFilterQuery(urlState);\n                }\n            }, onInitialize: function (urlState) {\n                if (urlState) {\n                    applyFilterQuery(urlState);\n                }\n            } }));\n    }));\n};\nvar mapToUrlState = function (value) {\n    return value && value.kind === 'kuery' && typeof value.expression === 'string'\n        ? {\n            kind: value.kind,\n            expression: value.expression,\n        }\n        : undefined;\n};\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/containers/waffle/with_waffle_filters.tsx","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/containers/waffle/with_waffle_filters.tsx"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport React from 'react';\nimport { connect } from 'react-redux';\n\nimport { StaticIndexPattern } from 'ui/index_patterns';\nimport { State, waffleFilterActions, waffleFilterSelectors } from '../../store';\nimport { FilterQuery } from '../../store/local/waffle_filter';\nimport { convertKueryToElasticSearchQuery } from '../../utils/kuery';\nimport { asChildFunctionRenderer } from '../../utils/typed_react';\nimport { bindPlainActionCreators } from '../../utils/typed_redux';\nimport { UrlStateContainer } from '../../utils/url_state';\n\ninterface WithWaffleFilterProps {\n  indexPattern: StaticIndexPattern;\n}\n\nexport const withWaffleFilter = connect(\n  (state: State) => ({\n    filterQuery: waffleFilterSelectors.selectWaffleFilterQuery(state),\n    filterQueryDraft: waffleFilterSelectors.selectWaffleFilterQueryDraft(state),\n    filterQueryAsJson: waffleFilterSelectors.selectWaffleFilterQueryAsJson(state),\n    isFilterQueryDraftValid: waffleFilterSelectors.selectIsWaffleFilterQueryDraftValid(state),\n  }),\n  (dispatch, ownProps: WithWaffleFilterProps) =>\n    bindPlainActionCreators({\n      applyFilterQuery: (query: FilterQuery) =>\n        waffleFilterActions.applyWaffleFilterQuery({\n          query,\n          serializedQuery: convertKueryToElasticSearchQuery(\n            query.expression,\n            ownProps.indexPattern\n          ),\n        }),\n      applyFilterQueryFromKueryExpression: (expression: string) =>\n        waffleFilterActions.applyWaffleFilterQuery({\n          query: {\n            kind: 'kuery',\n            expression,\n          },\n          serializedQuery: convertKueryToElasticSearchQuery(expression, ownProps.indexPattern),\n        }),\n      setFilterQueryDraft: waffleFilterActions.setWaffleFilterQueryDraft,\n      setFilterQueryDraftFromKueryExpression: (expression: string) =>\n        waffleFilterActions.setWaffleFilterQueryDraft({\n          kind: 'kuery',\n          expression,\n        }),\n    })\n);\n\nexport const WithWaffleFilter = asChildFunctionRenderer(withWaffleFilter);\n\n/**\n * Url State\n */\n\ntype WaffleFilterUrlState = ReturnType<typeof waffleFilterSelectors.selectWaffleFilterQuery>;\n\ntype WithWaffleFilterUrlStateProps = WithWaffleFilterProps;\n\nexport const WithWaffleFilterUrlState: React.SFC<WithWaffleFilterUrlStateProps> = ({\n  indexPattern,\n}) => (\n  <WithWaffleFilter indexPattern={indexPattern}>\n    {({ applyFilterQuery, filterQuery }) => (\n      <UrlStateContainer\n        urlState={filterQuery}\n        urlStateKey=\"waffleFilter\"\n        mapToUrlState={mapToUrlState}\n        onChange={urlState => {\n          if (urlState) {\n            applyFilterQuery(urlState);\n          }\n        }}\n        onInitialize={urlState => {\n          if (urlState) {\n            applyFilterQuery(urlState);\n          }\n        }}\n      />\n    )}\n  </WithWaffleFilter>\n);\n\nconst mapToUrlState = (value: any): WaffleFilterUrlState | undefined =>\n  value && value.kind === 'kuery' && typeof value.expression === 'string'\n    ? {\n        kind: value.kind,\n        expression: value.expression,\n      }\n    : undefined;\n"]}]}