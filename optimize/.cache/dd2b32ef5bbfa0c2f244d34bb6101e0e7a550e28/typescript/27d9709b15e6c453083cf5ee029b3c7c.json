{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/apm/public/store/reactReduxRequest/transactionOverviewCharts.tsx","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/apm/public/store/reactReduxRequest/transactionOverviewCharts.tsx","mtime":1567631711872},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport * as tslib_1 from \"tslib\";\nimport { get } from 'lodash';\nimport React from 'react';\nimport { Request } from 'react-redux-request';\nimport { createSelector } from 'reselect';\nimport { loadOverviewCharts, loadOverviewChartsForAllTypes } from '../../services/rest/apm/transaction_groups';\nimport { getTransactionCharts } from '../selectors/chartSelectors';\nimport { getUrlParams } from '../urlParams';\nvar ID = 'transactionOverviewCharts';\nvar INITIAL_DATA = {\n    apmTimeseries: {\n        totalHits: 0,\n        responseTimes: {\n            avg: [],\n            p95: [],\n            p99: []\n        },\n        tpmBuckets: [],\n        overallAvgDuration: undefined\n    },\n    anomalyTimeseries: undefined\n};\nvar selectChartData = function (state) { return state.reactReduxRequest[ID]; };\nexport var getTransactionOverviewCharts = createSelector([getUrlParams, selectChartData], function (urlParams, overviewCharts) {\n    if (overviewCharts === void 0) { overviewCharts = {}; }\n    return tslib_1.__assign({}, overviewCharts, { data: getTransactionCharts(urlParams, overviewCharts.data || INITIAL_DATA) });\n});\nexport var selectHasMLJob = createSelector([selectChartData], function (chartData) { return get(chartData, 'data.anomalyTimeseries') !== undefined; });\nexport function TransactionOverviewChartsRequest(_a) {\n    var urlParams = _a.urlParams, render = _a.render;\n    var serviceName = urlParams.serviceName, start = urlParams.start, end = urlParams.end, transactionType = urlParams.transactionType, kuery = urlParams.kuery;\n    if (!(serviceName && start && end)) {\n        return null;\n    }\n    return (React.createElement(Request, { id: ID, fn: loadOverviewCharts, args: [{ serviceName: serviceName, start: start, end: end, transactionType: transactionType, kuery: kuery }], selector: getTransactionOverviewCharts, render: render }));\n}\n// Ignores transaction type from urlParams and requests charts\n// for ALL transaction types within this service\nexport function TransactionOverviewChartsRequestForAllTypes(_a) {\n    var urlParams = _a.urlParams, render = _a.render;\n    var serviceName = urlParams.serviceName, start = urlParams.start, end = urlParams.end, kuery = urlParams.kuery;\n    if (!(serviceName && start && end)) {\n        return null;\n    }\n    return (React.createElement(Request, { id: ID, fn: loadOverviewChartsForAllTypes, args: [{ serviceName: serviceName, start: start, end: end, kuery: kuery }], selector: getTransactionOverviewCharts, render: render }));\n}\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/apm/public/store/reactReduxRequest/transactionOverviewCharts.tsx","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/apm/public/store/reactReduxRequest/transactionOverviewCharts.tsx"],"names":[],"mappings":"AAAA;;;;GAIG;;AAEH,OAAO,EAAE,GAAG,EAAE,MAAM,QAAQ,CAAC;AAC7B,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,OAAO,EAAa,MAAM,qBAAqB,CAAC;AACzD,OAAO,EAAE,cAAc,EAAE,MAAM,UAAU,CAAC;AAG1C,OAAO,EACL,kBAAkB,EAClB,6BAA6B,EAC9B,MAAM,4CAA4C,CAAC;AAEpD,OAAO,EAAE,oBAAoB,EAAE,MAAM,6BAA6B,CAAC;AACnE,OAAO,EAAE,YAAY,EAAc,MAAM,cAAc,CAAC;AAExD,IAAM,EAAE,GAAG,2BAA2B,CAAC;AACvC,IAAM,YAAY,GAA0B;IAC1C,aAAa,EAAE;QACb,SAAS,EAAE,CAAC;QACZ,aAAa,EAAE;YACb,GAAG,EAAE,EAAE;YACP,GAAG,EAAE,EAAE;YACP,GAAG,EAAE,EAAE;SACR;QACD,UAAU,EAAE,EAAE;QACd,kBAAkB,EAAE,SAAS;KAC9B;IACD,iBAAiB,EAAE,SAAS;CAC7B,CAAC;AAEF,IAAM,eAAe,GAAG,UAAC,KAAkB,IAAK,OAAA,KAAK,CAAC,iBAAiB,CAAC,EAAE,CAAC,EAA3B,CAA2B,CAAC;AAE5E,MAAM,CAAC,IAAM,4BAA4B,GAAG,cAAc,CACxD,CAAC,YAAY,EAAE,eAAe,CAAC,EAC/B,UAAC,SAAS,EAAE,cAAmB;IAAnB,+BAAA,EAAA,mBAAmB;IAC7B,4BACK,cAAc,IACjB,IAAI,EAAE,oBAAoB,CAAC,SAAS,EAAE,cAAc,CAAC,IAAI,IAAI,YAAY,CAAC,IAC1E;AACJ,CAAC,CACF,CAAC;AAEF,MAAM,CAAC,IAAM,cAAc,GAAG,cAAc,CAC1C,CAAC,eAAe,CAAC,EACjB,UAAA,SAAS,IAAI,OAAA,GAAG,CAAC,SAAS,EAAE,wBAAwB,CAAC,KAAK,SAAS,EAAtD,CAAsD,CACpE,CAAC;AAOF,MAAM,UAAU,gCAAgC,CAAC,EAA4B;QAA1B,wBAAS,EAAE,kBAAM;IAC1D,IAAA,mCAAW,EAAE,uBAAK,EAAE,mBAAG,EAAE,2CAAe,EAAE,uBAAK,CAAe;IAEtE,IAAI,CAAC,CAAC,WAAW,IAAI,KAAK,IAAI,GAAG,CAAC,EAAE;QAClC,OAAO,IAAI,CAAC;KACb;IAED,OAAO,CACL,oBAAC,OAAO,IACN,EAAE,EAAE,EAAE,EACN,EAAE,EAAE,kBAAkB,EACtB,IAAI,EAAE,CAAC,EAAE,WAAW,aAAA,EAAE,KAAK,OAAA,EAAE,GAAG,KAAA,EAAE,eAAe,iBAAA,EAAE,KAAK,OAAA,EAAE,CAAC,EAC3D,QAAQ,EAAE,4BAA4B,EACtC,MAAM,EAAE,MAAM,GACd,CACH,CAAC;AACJ,CAAC;AAED,8DAA8D;AAC9D,gDAAgD;AAChD,MAAM,UAAU,2CAA2C,CAAC,EAGpD;QAFN,wBAAS,EACT,kBAAM;IAEE,IAAA,mCAAW,EAAE,uBAAK,EAAE,mBAAG,EAAE,uBAAK,CAAe;IAErD,IAAI,CAAC,CAAC,WAAW,IAAI,KAAK,IAAI,GAAG,CAAC,EAAE;QAClC,OAAO,IAAI,CAAC;KACb;IAED,OAAO,CACL,oBAAC,OAAO,IACN,EAAE,EAAE,EAAE,EACN,EAAE,EAAE,6BAA6B,EACjC,IAAI,EAAE,CAAC,EAAE,WAAW,aAAA,EAAE,KAAK,OAAA,EAAE,GAAG,KAAA,EAAE,KAAK,OAAA,EAAE,CAAC,EAC1C,QAAQ,EAAE,4BAA4B,EACtC,MAAM,EAAE,MAAM,GACd,CACH,CAAC;AACJ,CAAC","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport { get } from 'lodash';\nimport React from 'react';\nimport { Request, RRRRender } from 'react-redux-request';\nimport { createSelector } from 'reselect';\nimport { ITransactionChartData } from 'x-pack/plugins/apm/public/store/selectors/chartSelectors';\nimport { TimeSeriesAPIResponse } from 'x-pack/plugins/apm/server/lib/transactions/charts';\nimport {\n  loadOverviewCharts,\n  loadOverviewChartsForAllTypes\n} from '../../services/rest/apm/transaction_groups';\nimport { IReduxState } from '../rootReducer';\nimport { getTransactionCharts } from '../selectors/chartSelectors';\nimport { getUrlParams, IUrlParams } from '../urlParams';\n\nconst ID = 'transactionOverviewCharts';\nconst INITIAL_DATA: TimeSeriesAPIResponse = {\n  apmTimeseries: {\n    totalHits: 0,\n    responseTimes: {\n      avg: [],\n      p95: [],\n      p99: []\n    },\n    tpmBuckets: [],\n    overallAvgDuration: undefined\n  },\n  anomalyTimeseries: undefined\n};\n\nconst selectChartData = (state: IReduxState) => state.reactReduxRequest[ID];\n\nexport const getTransactionOverviewCharts = createSelector(\n  [getUrlParams, selectChartData],\n  (urlParams, overviewCharts = {}) => {\n    return {\n      ...overviewCharts,\n      data: getTransactionCharts(urlParams, overviewCharts.data || INITIAL_DATA)\n    };\n  }\n);\n\nexport const selectHasMLJob = createSelector(\n  [selectChartData],\n  chartData => get(chartData, 'data.anomalyTimeseries') !== undefined\n);\n\ninterface Props {\n  urlParams: IUrlParams;\n  render: RRRRender<ITransactionChartData>;\n}\n\nexport function TransactionOverviewChartsRequest({ urlParams, render }: Props) {\n  const { serviceName, start, end, transactionType, kuery } = urlParams;\n\n  if (!(serviceName && start && end)) {\n    return null;\n  }\n\n  return (\n    <Request\n      id={ID}\n      fn={loadOverviewCharts}\n      args={[{ serviceName, start, end, transactionType, kuery }]}\n      selector={getTransactionOverviewCharts}\n      render={render}\n    />\n  );\n}\n\n// Ignores transaction type from urlParams and requests charts\n// for ALL transaction types within this service\nexport function TransactionOverviewChartsRequestForAllTypes({\n  urlParams,\n  render\n}: Props) {\n  const { serviceName, start, end, kuery } = urlParams;\n\n  if (!(serviceName && start && end)) {\n    return null;\n  }\n\n  return (\n    <Request\n      id={ID}\n      fn={loadOverviewChartsForAllTypes}\n      args={[{ serviceName, start, end, kuery }]}\n      selector={getTransactionOverviewCharts}\n      render={render}\n    />\n  );\n}\n"]}]}