{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/public/lib/aeroelastic/matrix.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/public/lib/aeroelastic/matrix.ts","mtime":1567631711932},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport * as tslib_1 from \"tslib\";\nvar NANMATRIX = [\n    NaN,\n    NaN,\n    NaN,\n    NaN,\n    NaN,\n    NaN,\n    NaN,\n    NaN,\n    NaN,\n    NaN,\n    NaN,\n    NaN,\n    NaN,\n    NaN,\n    NaN,\n    NaN,\n];\nexport var ORIGIN = [0, 0, 0, 1];\nexport var translate = function (x, y, z) {\n    return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x, y, z, 1];\n};\nexport var scale = function (x, y, z) {\n    return [x, 0, 0, 0, 0, y, 0, 0, 0, 0, z, 0, 0, 0, 0, 1];\n};\nexport var rotateZ = function (a) {\n    var sinA = Math.sin(a);\n    var cosA = Math.cos(a);\n    return [cosA, -sinA, 0, 0, sinA, cosA, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n};\n/**\n * multiply\n *\n * Matrix multiplies two matrices of column major format, returning the result in the same format\n *\n *\n *                               A    E    I    M\n *                               B    F    J    N\n *                               C    G    K    O\n *                               D    H    L    P\n *\n *         a    e    i    m      .    .    .    .\n *         b    f    j    n      .    .    .    .\n *         c    g    k    o      .    .    .    .\n *         d    h    l    p      .    .    .    d * M + h * N + l * O + p * P\n *\n */\nvar mult = function (_a, _b) {\n    var _c = tslib_1.__read(_a, 16), a = _c[0], b = _c[1], c = _c[2], d = _c[3], e = _c[4], f = _c[5], g = _c[6], h = _c[7], i = _c[8], j = _c[9], k = _c[10], l = _c[11], m = _c[12], n = _c[13], o = _c[14], p = _c[15];\n    var _d = tslib_1.__read(_b, 16), A = _d[0], B = _d[1], C = _d[2], D = _d[3], E = _d[4], F = _d[5], G = _d[6], H = _d[7], I = _d[8], J = _d[9], K = _d[10], L = _d[11], M = _d[12], N = _d[13], O = _d[14], P = _d[15];\n    return [\n        a * A + e * B + i * C + m * D,\n        b * A + f * B + j * C + n * D,\n        c * A + g * B + k * C + o * D,\n        d * A + h * B + l * C + p * D,\n        a * E + e * F + i * G + m * H,\n        b * E + f * F + j * G + n * H,\n        c * E + g * F + k * G + o * H,\n        d * E + h * F + l * G + p * H,\n        a * I + e * J + i * K + m * L,\n        b * I + f * J + j * K + n * L,\n        c * I + g * J + k * K + o * L,\n        d * I + h * J + l * K + p * L,\n        a * M + e * N + i * O + m * P,\n        b * M + f * N + j * O + n * P,\n        c * M + g * N + k * O + o * P,\n        d * M + h * N + l * O + p * P,\n    ];\n};\nexport var multiply = function (first) {\n    var rest = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        rest[_i - 1] = arguments[_i];\n    }\n    return rest.reduce(function (prev, next) { return mult(prev, next); }, first);\n};\n/**\n * mvMultiply\n *\n * Multiplies a matrix and a vector\n *\n *\n *                               A\n *                               B\n *                               C\n *                               D\n *\n *         a    e    i    m      .\n *         b    f    j    n      .\n *         c    g    k    o      .\n *         d    h    l    p      d * A + h * B + l * C + p * D\n *\n */\nexport var mvMultiply = function (_a, _b) {\n    var _c = tslib_1.__read(_a, 16), a = _c[0], b = _c[1], c = _c[2], d = _c[3], e = _c[4], f = _c[5], g = _c[6], h = _c[7], i = _c[8], j = _c[9], k = _c[10], l = _c[11], m = _c[12], n = _c[13], o = _c[14], p = _c[15];\n    var _d = tslib_1.__read(_b, 4), A = _d[0], B = _d[1], C = _d[2], D = _d[3];\n    return [\n        a * A + e * B + i * C + m * D,\n        b * A + f * B + j * C + n * D,\n        c * A + g * B + k * C + o * D,\n        d * A + h * B + l * C + p * D,\n    ];\n};\nexport var normalize = function (_a) {\n    var _b = tslib_1.__read(_a, 4), A = _b[0], B = _b[1], C = _b[2], D = _b[3];\n    return D === 1 ? [A, B, C, D] : [A / D, B / D, C / D, 1];\n};\n/**\n * invert\n *\n * Inverts the matrix\n *\n *         a    e    i    m\n *         b    f    j    n\n *         c    g    k    o\n *         d    h    l    p\n */\nexport var invert = function (_a) {\n    var _b = tslib_1.__read(_a, 16), a = _b[0], b = _b[1], c = _b[2], d = _b[3], e = _b[4], f = _b[5], g = _b[6], h = _b[7], i = _b[8], j = _b[9], k = _b[10], l = _b[11], m = _b[12], n = _b[13], o = _b[14], p = _b[15];\n    var inv = [\n        f * k * p - f * l * o - j * g * p + j * h * o + n * g * l - n * h * k,\n        -b * k * p + b * l * o + j * c * p - j * d * o - n * c * l + n * d * k,\n        b * g * p - b * h * o - f * c * p + f * d * o + n * c * h - n * d * g,\n        -b * g * l + b * h * k + f * c * l - f * d * k - j * c * h + j * d * g,\n        -e * k * p + e * l * o + i * g * p - i * h * o - m * g * l + m * h * k,\n        a * k * p - a * l * o - i * c * p + i * d * o + m * c * l - m * d * k,\n        -a * g * p + a * h * o + e * c * p - e * d * o - m * c * h + m * d * g,\n        a * g * l - a * h * k - e * c * l + e * d * k + i * c * h - i * d * g,\n        e * j * p - e * l * n - i * f * p + i * h * n + m * f * l - m * h * j,\n        -a * j * p + a * l * n + i * b * p - i * d * n - m * b * l + m * d * j,\n        a * f * p - a * h * n - e * b * p + e * d * n + m * b * h - m * d * f,\n        -a * f * l + a * h * j + e * b * l - e * d * j - i * b * h + i * d * f,\n        -e * j * o + e * k * n + i * f * o - i * g * n - m * f * k + m * g * j,\n        a * j * o - a * k * n - i * b * o + i * c * n + m * b * k - m * c * j,\n        -a * f * o + a * g * n + e * b * o - e * c * n - m * b * g + m * c * f,\n        a * f * k - a * g * j - e * b * k + e * c * j + i * b * g - i * c * f,\n    ];\n    var det = a * inv[0] + b * inv[4] + c * inv[8] + d * inv[12];\n    if (det === 0) {\n        return NANMATRIX; // no real solution\n    }\n    else {\n        var recDet = 1 / det;\n        for (var index = 0; index < 16; index++) {\n            inv[index] *= recDet;\n        }\n        return inv;\n    }\n};\nexport var translateComponent = function (a) {\n    return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, a[12], a[13], a[14], 1];\n};\nexport var compositeComponent = function (_a) {\n    var _b = tslib_1.__read(_a, 16), a = _b[0], b = _b[1], c = _b[2], d = _b[3], e = _b[4], f = _b[5], g = _b[6], h = _b[7], i = _b[8], j = _b[9], k = _b[10], l = _b[11], m = _b[12], n = _b[13], o = _b[14], p = _b[15];\n    return [a, b, c, d, e, f, g, h, i, j, k, l, 0, 0, 0, p];\n};\nexport var add = function (_a, _b) {\n    var _c = tslib_1.__read(_a, 16), a = _c[0], b = _c[1], c = _c[2], d = _c[3], e = _c[4], f = _c[5], g = _c[6], h = _c[7], i = _c[8], j = _c[9], k = _c[10], l = _c[11], m = _c[12], n = _c[13], o = _c[14], p = _c[15];\n    var _d = tslib_1.__read(_b, 16), A = _d[0], B = _d[1], C = _d[2], D = _d[3], E = _d[4], F = _d[5], G = _d[6], H = _d[7], I = _d[8], J = _d[9], K = _d[10], L = _d[11], M = _d[12], N = _d[13], O = _d[14], P = _d[15];\n    return [\n        a + A,\n        b + B,\n        c + C,\n        d + D,\n        e + E,\n        f + F,\n        g + G,\n        h + H,\n        i + I,\n        j + J,\n        k + K,\n        l + L,\n        m + M,\n        n + N,\n        o + O,\n        p + P,\n    ];\n};\nexport var subtract = function (_a, _b) {\n    var _c = tslib_1.__read(_a, 16), a = _c[0], b = _c[1], c = _c[2], d = _c[3], e = _c[4], f = _c[5], g = _c[6], h = _c[7], i = _c[8], j = _c[9], k = _c[10], l = _c[11], m = _c[12], n = _c[13], o = _c[14], p = _c[15];\n    var _d = tslib_1.__read(_b, 16), A = _d[0], B = _d[1], C = _d[2], D = _d[3], E = _d[4], F = _d[5], G = _d[6], H = _d[7], I = _d[8], J = _d[9], K = _d[10], L = _d[11], M = _d[12], N = _d[13], O = _d[14], P = _d[15];\n    return [\n        a - A,\n        b - B,\n        c - C,\n        d - D,\n        e - E,\n        f - F,\n        g - G,\n        h - H,\n        i - I,\n        j - J,\n        k - K,\n        l - L,\n        m - M,\n        n - N,\n        o - O,\n        p - P,\n    ];\n};\nexport var reduceTransforms = function (transforms) {\n    return transforms.length === 1\n        ? transforms[0]\n        : transforms.slice(1).reduce(function (prev, next) { return multiply(prev, next); }, transforms[0]);\n};\nvar clamp = function (low, high, value) {\n    return Math.min(high, Math.max(low, value));\n};\nexport var matrixToAngle = function (transformMatrix) {\n    // clamping is needed, otherwise inevitable floating point inaccuracies can cause NaN\n    var z0 = Math.acos(clamp(-1, 1, transformMatrix[0]));\n    var z1 = Math.asin(clamp(-1, 1, transformMatrix[1]));\n    return z1 > 0 ? z0 : -z0;\n};\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/public/lib/aeroelastic/matrix.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/public/lib/aeroelastic/matrix.ts"],"names":[],"mappings":"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CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC;QACrE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC;QACtE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC;QACtE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC;QACrE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC;QACtE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC;QACrE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC;QACrE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC;QACtE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC;QACrE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC;QACtE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC;QACtE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC;QACrE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC;QACtE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CA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","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\n/**\n * Column major order:\n *\n * Instead of a row major ordered vector representation of a 4 x 4 matrix, we use column major ordered vectors.\n *\n * This is what the matrix is:                  Eg. this is the equivalent matrix of `translate3d(${x}px, ${y}px, ${z}px)`:\n *\n *         a e i m                                                           1 0 0 x\n *         b f j n                                                           0 1 0 y\n *         c g k o                                                           0 0 1 z\n *         d h l p                                                           0 0 0 1\n *\n *  but it's _not_ represented as a 2D array or array of arrays. CSS3 `transform3d` expects it as this vector:\n *\n *      [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p]\n *\n *  so it's clear that the first _column vector_ corresponds to a, b, c, d.\n *\n */\n\nimport { transformMatrix3d, vector3d } from './types';\n\nconst NANMATRIX = [\n  NaN,\n  NaN,\n  NaN,\n  NaN,\n  NaN,\n  NaN,\n  NaN,\n  NaN,\n  NaN,\n  NaN,\n  NaN,\n  NaN,\n  NaN,\n  NaN,\n  NaN,\n  NaN,\n] as transformMatrix3d;\n\nexport const ORIGIN = [0, 0, 0, 1] as vector3d;\n\nexport const translate = (x: number, y: number, z: number): transformMatrix3d =>\n  [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x, y, z, 1] as transformMatrix3d;\n\nexport const scale = (x: number, y: number, z: number): transformMatrix3d =>\n  [x, 0, 0, 0, 0, y, 0, 0, 0, 0, z, 0, 0, 0, 0, 1] as transformMatrix3d;\n\nexport const rotateZ = (a: number): transformMatrix3d => {\n  const sinA = Math.sin(a);\n  const cosA = Math.cos(a);\n  return [cosA, -sinA, 0, 0, sinA, cosA, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1] as transformMatrix3d;\n};\n\n/**\n * multiply\n *\n * Matrix multiplies two matrices of column major format, returning the result in the same format\n *\n *\n *                               A    E    I    M\n *                               B    F    J    N\n *                               C    G    K    O\n *                               D    H    L    P\n *\n *         a    e    i    m      .    .    .    .\n *         b    f    j    n      .    .    .    .\n *         c    g    k    o      .    .    .    .\n *         d    h    l    p      .    .    .    d * M + h * N + l * O + p * P\n *\n */\nconst mult = (\n  [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p]: transformMatrix3d,\n  [A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]: transformMatrix3d\n): transformMatrix3d =>\n  [\n    a * A + e * B + i * C + m * D,\n    b * A + f * B + j * C + n * D,\n    c * A + g * B + k * C + o * D,\n    d * A + h * B + l * C + p * D,\n\n    a * E + e * F + i * G + m * H,\n    b * E + f * F + j * G + n * H,\n    c * E + g * F + k * G + o * H,\n    d * E + h * F + l * G + p * H,\n\n    a * I + e * J + i * K + m * L,\n    b * I + f * J + j * K + n * L,\n    c * I + g * J + k * K + o * L,\n    d * I + h * J + l * K + p * L,\n\n    a * M + e * N + i * O + m * P,\n    b * M + f * N + j * O + n * P,\n    c * M + g * N + k * O + o * P,\n    d * M + h * N + l * O + p * P,\n  ] as transformMatrix3d;\n\nexport const multiply = (\n  first: transformMatrix3d,\n  ...rest: transformMatrix3d[]\n): transformMatrix3d => rest.reduce((prev, next) => mult(prev, next), first);\n\n/**\n * mvMultiply\n *\n * Multiplies a matrix and a vector\n *\n *\n *                               A\n *                               B\n *                               C\n *                               D\n *\n *         a    e    i    m      .\n *         b    f    j    n      .\n *         c    g    k    o      .\n *         d    h    l    p      d * A + h * B + l * C + p * D\n *\n */\nexport const mvMultiply = (\n  [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p]: transformMatrix3d,\n  [A, B, C, D]: vector3d\n): vector3d =>\n  [\n    a * A + e * B + i * C + m * D,\n    b * A + f * B + j * C + n * D,\n    c * A + g * B + k * C + o * D,\n    d * A + h * B + l * C + p * D,\n  ] as vector3d;\n\nexport const normalize = ([A, B, C, D]: vector3d): vector3d =>\n  D === 1 ? ([A, B, C, D] as vector3d) : ([A / D, B / D, C / D, 1] as vector3d);\n\n/**\n * invert\n *\n * Inverts the matrix\n *\n *         a    e    i    m\n *         b    f    j    n\n *         c    g    k    o\n *         d    h    l    p\n */\nexport const invert = ([\n  a,\n  b,\n  c,\n  d,\n  e,\n  f,\n  g,\n  h,\n  i,\n  j,\n  k,\n  l,\n  m,\n  n,\n  o,\n  p,\n]: transformMatrix3d): transformMatrix3d => {\n  const inv = [\n    f * k * p - f * l * o - j * g * p + j * h * o + n * g * l - n * h * k,\n    -b * k * p + b * l * o + j * c * p - j * d * o - n * c * l + n * d * k,\n    b * g * p - b * h * o - f * c * p + f * d * o + n * c * h - n * d * g,\n    -b * g * l + b * h * k + f * c * l - f * d * k - j * c * h + j * d * g,\n    -e * k * p + e * l * o + i * g * p - i * h * o - m * g * l + m * h * k,\n    a * k * p - a * l * o - i * c * p + i * d * o + m * c * l - m * d * k,\n    -a * g * p + a * h * o + e * c * p - e * d * o - m * c * h + m * d * g,\n    a * g * l - a * h * k - e * c * l + e * d * k + i * c * h - i * d * g,\n    e * j * p - e * l * n - i * f * p + i * h * n + m * f * l - m * h * j,\n    -a * j * p + a * l * n + i * b * p - i * d * n - m * b * l + m * d * j,\n    a * f * p - a * h * n - e * b * p + e * d * n + m * b * h - m * d * f,\n    -a * f * l + a * h * j + e * b * l - e * d * j - i * b * h + i * d * f,\n    -e * j * o + e * k * n + i * f * o - i * g * n - m * f * k + m * g * j,\n    a * j * o - a * k * n - i * b * o + i * c * n + m * b * k - m * c * j,\n    -a * f * o + a * g * n + e * b * o - e * c * n - m * b * g + m * c * f,\n    a * f * k - a * g * j - e * b * k + e * c * j + i * b * g - i * c * f,\n  ] as transformMatrix3d;\n\n  const det = a * inv[0] + b * inv[4] + c * inv[8] + d * inv[12];\n\n  if (det === 0) {\n    return NANMATRIX; // no real solution\n  } else {\n    const recDet = 1 / det;\n\n    for (let index = 0; index < 16; index++) {\n      inv[index] *= recDet;\n    }\n\n    return inv;\n  }\n};\n\nexport const translateComponent = (a: transformMatrix3d): transformMatrix3d =>\n  [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, a[12], a[13], a[14], 1] as transformMatrix3d;\n\nexport const compositeComponent = ([\n  a,\n  b,\n  c,\n  d,\n  e,\n  f,\n  g,\n  h,\n  i,\n  j,\n  k,\n  l,\n  m,\n  n,\n  o,\n  p,\n]: transformMatrix3d): transformMatrix3d =>\n  [a, b, c, d, e, f, g, h, i, j, k, l, 0, 0, 0, p] as transformMatrix3d;\n\nexport const add = (\n  [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p]: transformMatrix3d,\n  [A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]: transformMatrix3d\n): transformMatrix3d =>\n  [\n    a + A,\n    b + B,\n    c + C,\n    d + D,\n    e + E,\n    f + F,\n    g + G,\n    h + H,\n    i + I,\n    j + J,\n    k + K,\n    l + L,\n    m + M,\n    n + N,\n    o + O,\n    p + P,\n  ] as transformMatrix3d;\n\nexport const subtract = (\n  [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p]: transformMatrix3d,\n  [A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]: transformMatrix3d\n): transformMatrix3d =>\n  [\n    a - A,\n    b - B,\n    c - C,\n    d - D,\n    e - E,\n    f - F,\n    g - G,\n    h - H,\n    i - I,\n    j - J,\n    k - K,\n    l - L,\n    m - M,\n    n - N,\n    o - O,\n    p - P,\n  ] as transformMatrix3d;\n\nexport const reduceTransforms = (transforms: transformMatrix3d[]): transformMatrix3d =>\n  transforms.length === 1\n    ? transforms[0]\n    : transforms.slice(1).reduce((prev, next) => multiply(prev, next), transforms[0]);\n\nconst clamp = (low: number, high: number, value: number): number =>\n  Math.min(high, Math.max(low, value));\n\nexport const matrixToAngle = (transformMatrix: transformMatrix3d): number => {\n  // clamping is needed, otherwise inevitable floating point inaccuracies can cause NaN\n  const z0 = Math.acos(clamp(-1, 1, transformMatrix[0]));\n  const z1 = Math.asin(clamp(-1, 1, transformMatrix[1]));\n  return z1 > 0 ? z0 : -z0;\n};\n"]}]}