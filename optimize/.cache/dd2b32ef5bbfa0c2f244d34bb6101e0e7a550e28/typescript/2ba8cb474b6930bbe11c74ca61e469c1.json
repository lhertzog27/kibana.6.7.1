{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/components/logging/log_text_stream/scrollable_log_text_stream_view.tsx","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/components/logging/log_text_stream/scrollable_log_text_stream_view.tsx","mtime":1567631711980},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport * as tslib_1 from \"tslib\";\nimport { FormattedMessage, injectI18n } from '@kbn/i18n/react';\nimport * as React from 'react';\nimport { callWithoutRepeats } from '../../../utils/handlers';\nimport { NoData } from '../../empty_states';\nimport { InfraLoadingPanel } from '../../loading';\nimport { getStreamItemBeforeTimeKey, getStreamItemId, parseStreamItemId } from './item';\nimport { LogTextStreamItemView } from './item_view';\nimport { LogTextStreamLoadingItemView } from './loading_item_view';\nimport { MeasurableItemView } from './measurable_item_view';\nimport { VerticalScrollPanel } from './vertical_scroll_panel';\nvar ScrollableLogTextStreamViewClass = /** @class */ (function (_super) {\n    tslib_1.__extends(ScrollableLogTextStreamViewClass, _super);\n    function ScrollableLogTextStreamViewClass() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.state = {\n            target: null,\n            targetId: null,\n        };\n        _this.handleOpenFlyout = function (id) {\n            _this.props.setFlyoutItem(id);\n            _this.props.showFlyout();\n        };\n        _this.handleReload = function () {\n            var _a = _this.props, jumpToTarget = _a.jumpToTarget, target = _a.target;\n            if (target) {\n                jumpToTarget(target);\n            }\n        };\n        _this.handleLoadNewerItems = function () {\n            var loadNewerItems = _this.props.loadNewerItems;\n            if (loadNewerItems) {\n                loadNewerItems();\n            }\n        };\n        // this is actually a method but not recognized as such\n        // tslint:disable-next-line:member-ordering\n        _this.handleVisibleChildrenChange = callWithoutRepeats(function (_a) {\n            var topChild = _a.topChild, middleChild = _a.middleChild, bottomChild = _a.bottomChild, pagesAbove = _a.pagesAbove, pagesBelow = _a.pagesBelow;\n            _this.props.reportVisibleInterval({\n                endKey: parseStreamItemId(bottomChild),\n                middleKey: parseStreamItemId(middleChild),\n                pagesAfterEnd: pagesBelow,\n                pagesBeforeStart: pagesAbove,\n                startKey: parseStreamItemId(topChild),\n            });\n        });\n        return _this;\n    }\n    ScrollableLogTextStreamViewClass.getDerivedStateFromProps = function (nextProps, prevState) {\n        var hasNewTarget = nextProps.target && nextProps.target !== prevState.target;\n        var hasItems = nextProps.items.length > 0;\n        if (nextProps.isStreaming && hasItems) {\n            return {\n                target: nextProps.target,\n                targetId: getStreamItemId(nextProps.items[nextProps.items.length - 1]),\n            };\n        }\n        else if (hasNewTarget && hasItems) {\n            return {\n                target: nextProps.target,\n                targetId: getStreamItemId(getStreamItemBeforeTimeKey(nextProps.items, nextProps.target)),\n            };\n        }\n        else if (!nextProps.target || !hasItems) {\n            return {\n                target: null,\n                targetId: null,\n            };\n        }\n        return null;\n    };\n    ScrollableLogTextStreamViewClass.prototype.render = function () {\n        var _this = this;\n        var _a = this.props, items = _a.items, height = _a.height, width = _a.width, scale = _a.scale, wrap = _a.wrap, isReloading = _a.isReloading, isLoadingMore = _a.isLoadingMore, hasMoreBeforeStart = _a.hasMoreBeforeStart, hasMoreAfterEnd = _a.hasMoreAfterEnd, isStreaming = _a.isStreaming, lastLoadedTime = _a.lastLoadedTime, intl = _a.intl;\n        var targetId = this.state.targetId;\n        var hasItems = items.length > 0;\n        if (isReloading && !hasItems) {\n            return (React.createElement(InfraLoadingPanel, { height: height, width: width, text: React.createElement(FormattedMessage, { id: \"xpack.infra.logs.scrollableLogTextStreamView.loadingEntriesLabel\", defaultMessage: \"Loading entries\" }) }));\n        }\n        else if (!hasItems) {\n            return (React.createElement(NoData, { titleText: intl.formatMessage({\n                    id: 'xpack.infra.logs.emptyView.noLogMessageTitle',\n                    defaultMessage: 'There are no log messages to display.',\n                }), bodyText: intl.formatMessage({\n                    id: 'xpack.infra.logs.emptyView.noLogMessageDescription',\n                    defaultMessage: 'Try adjusting your filter.',\n                }), refetchText: intl.formatMessage({\n                    id: 'xpack.infra.logs.emptyView.checkForNewDataButtonLabel',\n                    defaultMessage: 'Check for new data',\n                }), onRefetch: this.handleReload, testString: \"logsNoDataPrompt\" }));\n        }\n        else {\n            return (React.createElement(VerticalScrollPanel, { height: height, width: width, onVisibleChildrenChange: this.handleVisibleChildrenChange, target: targetId, hideScrollbar: true }, function (registerChild) { return (React.createElement(React.Fragment, null,\n                React.createElement(LogTextStreamLoadingItemView, { alignment: \"bottom\", isLoading: isLoadingMore, hasMore: hasMoreBeforeStart, isStreaming: false, lastStreamingUpdate: null }),\n                items.map(function (item) { return (React.createElement(MeasurableItemView, { register: registerChild, registrationKey: getStreamItemId(item), key: getStreamItemId(item) }, function (measureRef) { return (React.createElement(LogTextStreamItemView, { openFlyoutWithItem: _this.handleOpenFlyout, ref: measureRef, item: item, scale: scale, wrap: wrap })); })); }),\n                React.createElement(LogTextStreamLoadingItemView, { alignment: \"top\", isLoading: isStreaming || isLoadingMore, hasMore: hasMoreAfterEnd, isStreaming: isStreaming, lastStreamingUpdate: isStreaming ? lastLoadedTime : null, onLoadMore: _this.handleLoadNewerItems }))); }));\n        }\n    };\n    return ScrollableLogTextStreamViewClass;\n}(React.PureComponent));\nexport var ScrollableLogTextStreamView = injectI18n(ScrollableLogTextStreamViewClass);\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/components/logging/log_text_stream/scrollable_log_text_stream_view.tsx","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/components/logging/log_text_stream/scrollable_log_text_stream_view.tsx"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport { FormattedMessage, InjectedIntl, injectI18n } from '@kbn/i18n/react';\nimport * as React from 'react';\n\nimport { TextScale } from '../../../../common/log_text_scale';\nimport { TimeKey } from '../../../../common/time';\nimport { callWithoutRepeats } from '../../../utils/handlers';\nimport { NoData } from '../../empty_states';\nimport { InfraLoadingPanel } from '../../loading';\nimport { getStreamItemBeforeTimeKey, getStreamItemId, parseStreamItemId, StreamItem } from './item';\nimport { LogTextStreamItemView } from './item_view';\nimport { LogTextStreamLoadingItemView } from './loading_item_view';\nimport { MeasurableItemView } from './measurable_item_view';\nimport { VerticalScrollPanel } from './vertical_scroll_panel';\n\ninterface ScrollableLogTextStreamViewProps {\n  height: number;\n  width: number;\n  items: StreamItem[];\n  scale: TextScale;\n  wrap: boolean;\n  isReloading: boolean;\n  isLoadingMore: boolean;\n  hasMoreBeforeStart: boolean;\n  hasMoreAfterEnd: boolean;\n  isStreaming: boolean;\n  lastLoadedTime: number | null;\n  target: TimeKey | null;\n  jumpToTarget: (target: TimeKey) => any;\n  reportVisibleInterval: (\n    params: {\n      pagesBeforeStart: number;\n      pagesAfterEnd: number;\n      startKey: TimeKey | null;\n      middleKey: TimeKey | null;\n      endKey: TimeKey | null;\n    }\n  ) => any;\n  loadNewerItems: () => void;\n  setFlyoutItem: (id: string) => void;\n  showFlyout: () => void;\n  intl: InjectedIntl;\n}\n\ninterface ScrollableLogTextStreamViewState {\n  target: TimeKey | null;\n  targetId: string | null;\n}\n\nclass ScrollableLogTextStreamViewClass extends React.PureComponent<\n  ScrollableLogTextStreamViewProps,\n  ScrollableLogTextStreamViewState\n> {\n  public static getDerivedStateFromProps(\n    nextProps: ScrollableLogTextStreamViewProps,\n    prevState: ScrollableLogTextStreamViewState\n  ): Partial<ScrollableLogTextStreamViewState> | null {\n    const hasNewTarget = nextProps.target && nextProps.target !== prevState.target;\n    const hasItems = nextProps.items.length > 0;\n\n    if (nextProps.isStreaming && hasItems) {\n      return {\n        target: nextProps.target,\n        targetId: getStreamItemId(nextProps.items[nextProps.items.length - 1]),\n      };\n    } else if (hasNewTarget && hasItems) {\n      return {\n        target: nextProps.target,\n        targetId: getStreamItemId(getStreamItemBeforeTimeKey(nextProps.items, nextProps.target!)),\n      };\n    } else if (!nextProps.target || !hasItems) {\n      return {\n        target: null,\n        targetId: null,\n      };\n    }\n\n    return null;\n  }\n\n  public readonly state = {\n    target: null,\n    targetId: null,\n  };\n\n  public render() {\n    const {\n      items,\n      height,\n      width,\n      scale,\n      wrap,\n      isReloading,\n      isLoadingMore,\n      hasMoreBeforeStart,\n      hasMoreAfterEnd,\n      isStreaming,\n      lastLoadedTime,\n      intl,\n    } = this.props;\n    const { targetId } = this.state;\n    const hasItems = items.length > 0;\n    if (isReloading && !hasItems) {\n      return (\n        <InfraLoadingPanel\n          height={height}\n          width={width}\n          text={\n            <FormattedMessage\n              id=\"xpack.infra.logs.scrollableLogTextStreamView.loadingEntriesLabel\"\n              defaultMessage=\"Loading entries\"\n            />\n          }\n        />\n      );\n    } else if (!hasItems) {\n      return (\n        <NoData\n          titleText={intl.formatMessage({\n            id: 'xpack.infra.logs.emptyView.noLogMessageTitle',\n            defaultMessage: 'There are no log messages to display.',\n          })}\n          bodyText={intl.formatMessage({\n            id: 'xpack.infra.logs.emptyView.noLogMessageDescription',\n            defaultMessage: 'Try adjusting your filter.',\n          })}\n          refetchText={intl.formatMessage({\n            id: 'xpack.infra.logs.emptyView.checkForNewDataButtonLabel',\n            defaultMessage: 'Check for new data',\n          })}\n          onRefetch={this.handleReload}\n          testString=\"logsNoDataPrompt\"\n        />\n      );\n    } else {\n      return (\n        <VerticalScrollPanel\n          height={height}\n          width={width}\n          onVisibleChildrenChange={this.handleVisibleChildrenChange}\n          target={targetId}\n          hideScrollbar={true}\n        >\n          {registerChild => (\n            <>\n              <LogTextStreamLoadingItemView\n                alignment=\"bottom\"\n                isLoading={isLoadingMore}\n                hasMore={hasMoreBeforeStart}\n                isStreaming={false}\n                lastStreamingUpdate={null}\n              />\n              {items.map(item => (\n                <MeasurableItemView\n                  register={registerChild}\n                  registrationKey={getStreamItemId(item)}\n                  key={getStreamItemId(item)}\n                >\n                  {measureRef => (\n                    <LogTextStreamItemView\n                      openFlyoutWithItem={this.handleOpenFlyout}\n                      ref={measureRef}\n                      item={item}\n                      scale={scale}\n                      wrap={wrap}\n                    />\n                  )}\n                </MeasurableItemView>\n              ))}\n              <LogTextStreamLoadingItemView\n                alignment=\"top\"\n                isLoading={isStreaming || isLoadingMore}\n                hasMore={hasMoreAfterEnd}\n                isStreaming={isStreaming}\n                lastStreamingUpdate={isStreaming ? lastLoadedTime : null}\n                onLoadMore={this.handleLoadNewerItems}\n              />\n            </>\n          )}\n        </VerticalScrollPanel>\n      );\n    }\n  }\n\n  private handleOpenFlyout = (id: string) => {\n    this.props.setFlyoutItem(id);\n    this.props.showFlyout();\n  };\n\n  private handleReload = () => {\n    const { jumpToTarget, target } = this.props;\n\n    if (target) {\n      jumpToTarget(target);\n    }\n  };\n\n  private handleLoadNewerItems = () => {\n    const { loadNewerItems } = this.props;\n\n    if (loadNewerItems) {\n      loadNewerItems();\n    }\n  };\n\n  // this is actually a method but not recognized as such\n  // tslint:disable-next-line:member-ordering\n  private handleVisibleChildrenChange = callWithoutRepeats(\n    ({\n      topChild,\n      middleChild,\n      bottomChild,\n      pagesAbove,\n      pagesBelow,\n    }: {\n      topChild: string;\n      middleChild: string;\n      bottomChild: string;\n      pagesAbove: number;\n      pagesBelow: number;\n    }) => {\n      this.props.reportVisibleInterval({\n        endKey: parseStreamItemId(bottomChild),\n        middleKey: parseStreamItemId(middleChild),\n        pagesAfterEnd: pagesBelow,\n        pagesBeforeStart: pagesAbove,\n        startKey: parseStreamItemId(topChild),\n      });\n    }\n  );\n}\n\nexport const ScrollableLogTextStreamView = injectI18n(ScrollableLogTextStreamViewClass);\n"]}]}