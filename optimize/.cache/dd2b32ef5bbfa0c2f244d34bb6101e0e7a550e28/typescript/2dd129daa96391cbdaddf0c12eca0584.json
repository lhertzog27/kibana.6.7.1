{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/reporting/public/lib/job_queue_client.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/reporting/public/lib/job_queue_client.ts","mtime":1567631712281},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport { kfetch } from 'ui/kfetch';\n// @ts-ignore\nimport { addSystemApiHeader } from 'ui/system_api';\nvar API_BASE_URL = '/api/reporting/jobs';\nvar JobQueueClient = /** @class */ (function () {\n    function JobQueueClient() {\n        this.list = function (page, jobIds) {\n            if (page === void 0) { page = 0; }\n            var query = { page: page };\n            if (jobIds && jobIds.length > 0) {\n                // Only getting the first 10, to prevent URL overflows\n                query.ids = jobIds.slice(0, 10).join(',');\n            }\n            return kfetch({\n                method: 'GET',\n                pathname: API_BASE_URL + \"/list\",\n                query: query,\n                headers: addSystemApiHeader({}),\n            });\n        };\n    }\n    JobQueueClient.prototype.total = function () {\n        return kfetch({\n            method: 'GET',\n            pathname: API_BASE_URL + \"/count\",\n            headers: addSystemApiHeader({}),\n        });\n    };\n    JobQueueClient.prototype.getContent = function (jobId) {\n        return kfetch({\n            method: 'GET',\n            pathname: API_BASE_URL + \"/output/\" + jobId,\n            headers: addSystemApiHeader({}),\n        });\n    };\n    JobQueueClient.prototype.getInfo = function (jobId) {\n        return kfetch({\n            method: 'GET',\n            pathname: API_BASE_URL + \"/info/\" + jobId,\n            headers: addSystemApiHeader({}),\n        });\n    };\n    return JobQueueClient;\n}());\nexport var jobQueueClient = new JobQueueClient();\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/reporting/public/lib/job_queue_client.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/reporting/public/lib/job_queue_client.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAEH,OAAO,EAAE,MAAM,EAAE,MAAM,WAAW,CAAC;AACnC,aAAa;AACb,OAAO,EAAE,kBAAkB,EAAE,MAAM,eAAe,CAAC;AAEnD,IAAM,YAAY,GAAG,qBAAqB,CAAC;AA6C3C;IAAA;QACS,SAAI,GAAG,UAAC,IAAQ,EAAE,MAAiB;YAA3B,qBAAA,EAAA,QAAQ;YACrB,IAAM,KAAK,GAAG,EAAE,IAAI,MAAA,EAAS,CAAC;YAC9B,IAAI,MAAM,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;gBAC/B,sDAAsD;gBACtD,KAAK,CAAC,GAAG,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;aAC3C;YACD,OAAO,MAAM,CAAC;gBACZ,MAAM,EAAE,KAAK;gBACb,QAAQ,EAAK,YAAY,UAAO;gBAChC,KAAK,OAAA;gBACL,OAAO,EAAE,kBAAkB,CAAC,EAAE,CAAC;aAChC,CAAC,CAAC;QACL,CAAC,CAAC;IAyBJ,CAAC;IAvBQ,8BAAK,GAAZ;QACE,OAAO,MAAM,CAAC;YACZ,MAAM,EAAE,KAAK;YACb,QAAQ,EAAK,YAAY,WAAQ;YACjC,OAAO,EAAE,kBAAkB,CAAC,EAAE,CAAC;SAChC,CAAC,CAAC;IACL,CAAC;IAEM,mCAAU,GAAjB,UAAkB,KAAa;QAC7B,OAAO,MAAM,CAAC;YACZ,MAAM,EAAE,KAAK;YACb,QAAQ,EAAK,YAAY,gBAAW,KAAO;YAC3C,OAAO,EAAE,kBAAkB,CAAC,EAAE,CAAC;SAChC,CAAC,CAAC;IACL,CAAC;IAEM,gCAAO,GAAd,UAAe,KAAa;QAC1B,OAAO,MAAM,CAAC;YACZ,MAAM,EAAE,KAAK;YACb,QAAQ,EAAK,YAAY,cAAS,KAAO;YACzC,OAAO,EAAE,kBAAkB,CAAC,EAAE,CAAC;SAChC,CAAC,CAAC;IACL,CAAC;IACH,qBAAC;AAAD,CAAC,AAtCD,IAsCC;AAED,MAAM,CAAC,IAAM,cAAc,GAAG,IAAI,cAAc,EAAE,CAAC","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport { kfetch } from 'ui/kfetch';\n// @ts-ignore\nimport { addSystemApiHeader } from 'ui/system_api';\n\nconst API_BASE_URL = '/api/reporting/jobs';\n\nexport interface JobQueueEntry {\n  _id: string;\n  _source: any;\n}\n\nexport interface JobContent {\n  content: string;\n  content_type: boolean;\n}\n\nexport interface JobInfo {\n  kibana_name: string;\n  kibana_id: string;\n  browser_type: string;\n  created_at: string;\n  priority: number;\n  jobtype: string;\n  created_by: string;\n  timeout: number;\n  output: {\n    content_type: string;\n    size: number;\n  };\n  process_expiration: string;\n  completed_at: string;\n  payload: {\n    layout: { id: string; dimensions: { width: number; height: number } };\n    objects: Array<{ relativeUrl: string }>;\n    type: string;\n    title: string;\n    forceNow: string;\n    browserTimezone: string;\n  };\n  meta: {\n    layout: string;\n    objectType: string;\n  };\n  max_attempts: number;\n  started_at: string;\n  attempts: number;\n  status: string;\n}\n\nclass JobQueueClient {\n  public list = (page = 0, jobIds?: string[]): Promise<JobQueueEntry[]> => {\n    const query = { page } as any;\n    if (jobIds && jobIds.length > 0) {\n      // Only getting the first 10, to prevent URL overflows\n      query.ids = jobIds.slice(0, 10).join(',');\n    }\n    return kfetch({\n      method: 'GET',\n      pathname: `${API_BASE_URL}/list`,\n      query,\n      headers: addSystemApiHeader({}),\n    });\n  };\n\n  public total(): Promise<number> {\n    return kfetch({\n      method: 'GET',\n      pathname: `${API_BASE_URL}/count`,\n      headers: addSystemApiHeader({}),\n    });\n  }\n\n  public getContent(jobId: string): Promise<JobContent> {\n    return kfetch({\n      method: 'GET',\n      pathname: `${API_BASE_URL}/output/${jobId}`,\n      headers: addSystemApiHeader({}),\n    });\n  }\n\n  public getInfo(jobId: string): Promise<JobInfo> {\n    return kfetch({\n      method: 'GET',\n      pathname: `${API_BASE_URL}/info/${jobId}`,\n      headers: addSystemApiHeader({}),\n    });\n  }\n}\n\nexport const jobQueueClient = new JobQueueClient();\n"]}]}