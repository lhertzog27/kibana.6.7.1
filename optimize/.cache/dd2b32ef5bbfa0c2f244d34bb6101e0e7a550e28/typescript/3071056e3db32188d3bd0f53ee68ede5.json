{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/components/logging/log_text_stream/item.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/components/logging/log_text_stream/item.ts","mtime":1567631711980},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport { bisector } from 'd3-array';\nimport { getLogEntryKey } from '../../../../common/log_entry';\nimport { compareToTimeKey } from '../../../../common/time';\nexport function getStreamItemTimeKey(item) {\n    switch (item.kind) {\n        case 'logEntry':\n            return getLogEntryKey(item.logEntry);\n    }\n}\nexport function getStreamItemId(item) {\n    var _a = getStreamItemTimeKey(item), time = _a.time, tiebreaker = _a.tiebreaker, gid = _a.gid;\n    return time + \":\" + tiebreaker + \":\" + gid;\n}\nexport function parseStreamItemId(id) {\n    var idFragments = id.split(':');\n    return {\n        gid: idFragments.slice(2).join(':'),\n        tiebreaker: parseInt(idFragments[1], 10),\n        time: parseInt(idFragments[0], 10),\n    };\n}\nvar streamItemTimeBisector = bisector(compareToTimeKey(getStreamItemTimeKey));\nexport var getStreamItemBeforeTimeKey = function (streamItems, key) {\n    return streamItems[Math.min(streamItemTimeBisector.left(streamItems, key), streamItems.length - 1)];\n};\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/components/logging/log_text_stream/item.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/components/logging/log_text_stream/item.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAEH,OAAO,EAAE,QAAQ,EAAE,MAAM,UAAU,CAAC;AAEpC,OAAO,EAAE,cAAc,EAAY,MAAM,8BAA8B,CAAC;AAExE,OAAO,EAAE,gBAAgB,EAAW,MAAM,yBAAyB,CAAC;AAUpE,MAAM,UAAU,oBAAoB,CAAC,IAAgB;IACnD,QAAQ,IAAI,CAAC,IAAI,EAAE;QACjB,KAAK,UAAU;YACb,OAAO,cAAc,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;KACxC;AACH,CAAC;AAED,MAAM,UAAU,eAAe,CAAC,IAAgB;IACxC,IAAA,+BAAsD,EAApD,cAAI,EAAE,0BAAU,EAAE,YAAG,CAAgC;IAE7D,OAAU,IAAI,SAAI,UAAU,SAAI,GAAK,CAAC;AACxC,CAAC;AAED,MAAM,UAAU,iBAAiB,CAAC,EAAU;IAC1C,IAAM,WAAW,GAAG,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAElC,OAAO;QACL,GAAG,EAAE,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC;QACnC,UAAU,EAAE,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;QACxC,IAAI,EAAE,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;KACnC,CAAC;AACJ,CAAC;AAED,IAAM,sBAAsB,GAAG,QAAQ,CAAC,gBAAgB,CAAC,oBAAoB,CAAC,CAAC,CAAC;AAEhF,MAAM,CAAC,IAAM,0BAA0B,GAAG,UAAC,WAAyB,EAAE,GAAY;IAChF,OAAA,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,sBAAsB,CAAC,IAAI,CAAC,WAAW,EAAE,GAAG,CAAC,EAAE,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;AAA5F,CAA4F,CAAC","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport { bisector } from 'd3-array';\n\nimport { getLogEntryKey, LogEntry } from '../../../../common/log_entry';\nimport { SearchResult } from '../../../../common/log_search_result';\nimport { compareToTimeKey, TimeKey } from '../../../../common/time';\n\nexport type StreamItem = LogEntryStreamItem;\n\nexport interface LogEntryStreamItem {\n  kind: 'logEntry';\n  logEntry: LogEntry;\n  searchResult: SearchResult | undefined;\n}\n\nexport function getStreamItemTimeKey(item: StreamItem) {\n  switch (item.kind) {\n    case 'logEntry':\n      return getLogEntryKey(item.logEntry);\n  }\n}\n\nexport function getStreamItemId(item: StreamItem) {\n  const { time, tiebreaker, gid } = getStreamItemTimeKey(item);\n\n  return `${time}:${tiebreaker}:${gid}`;\n}\n\nexport function parseStreamItemId(id: string) {\n  const idFragments = id.split(':');\n\n  return {\n    gid: idFragments.slice(2).join(':'),\n    tiebreaker: parseInt(idFragments[1], 10),\n    time: parseInt(idFragments[0], 10),\n  };\n}\n\nconst streamItemTimeBisector = bisector(compareToTimeKey(getStreamItemTimeKey));\n\nexport const getStreamItemBeforeTimeKey = (streamItems: StreamItem[], key: TimeKey) =>\n  streamItems[Math.min(streamItemTimeBisector.left(streamItems, key), streamItems.length - 1)];\n"]}]}