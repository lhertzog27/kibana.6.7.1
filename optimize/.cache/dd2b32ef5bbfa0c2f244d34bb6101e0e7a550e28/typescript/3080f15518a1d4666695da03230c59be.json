{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/reporting/public/components/reporting_panel_content.tsx","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/reporting/public/components/reporting_panel_content.tsx","mtime":1567631712280},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport * as tslib_1 from \"tslib\";\nimport { EuiButton, EuiCopy, EuiForm, EuiFormRow, EuiSpacer, EuiText } from '@elastic/eui';\nimport { FormattedMessage, injectI18n } from '@kbn/i18n/react';\nimport React, { Component } from 'react';\nimport { toastNotifications } from 'ui/notify';\nimport url from 'url';\nimport { reportingClient } from '../lib/reporting_client';\nvar ReportingPanelContentUi = /** @class */ (function (_super) {\n    tslib_1.__extends(ReportingPanelContentUi, _super);\n    function ReportingPanelContentUi(props) {\n        var _this = _super.call(this, props) || this;\n        _this.renderGenerateReportButton = function (isDisabled) {\n            return (React.createElement(EuiButton, { className: \"sharePanel__button\", disabled: isDisabled, fill: true, onClick: _this.createReportingJob, \"data-test-subj\": \"generateReportButton\", size: \"s\" },\n                React.createElement(FormattedMessage, { id: \"xpack.reporting.panelContent.generateButtonLabel\", defaultMessage: \"Generate {reportingType}\", values: { reportingType: _this.prettyPrintReportingType() } })));\n        };\n        _this.prettyPrintReportingType = function () {\n            switch (_this.props.reportType) {\n                case 'printablePdf':\n                    return 'PDF';\n                case 'csv':\n                    return 'CSV';\n                case 'png':\n                    return 'PNG';\n                default:\n                    return _this.props.reportType;\n            }\n        };\n        _this.markAsStale = function () {\n            if (!_this.mounted) {\n                return;\n            }\n            _this.setState({ isStale: true });\n        };\n        _this.isNotSaved = function () {\n            return _this.props.objectId === undefined || _this.props.objectId === '';\n        };\n        _this.setAbsoluteReportGenerationUrl = function () {\n            if (!_this.mounted) {\n                return;\n            }\n            var absoluteUrl = ReportingPanelContentUi.getAbsoluteReportGenerationUrl(_this.props);\n            _this.setState({ absoluteUrl: absoluteUrl });\n        };\n        _this.createReportingJob = function () {\n            var intl = _this.props.intl;\n            return reportingClient\n                .createReportingJob(_this.props.reportType, _this.props.getJobParams())\n                .then(function () {\n                toastNotifications.addSuccess({\n                    title: intl.formatMessage({\n                        id: 'xpack.reporting.panelContent.successfullyQueuedReportNotificationTitle',\n                        defaultMessage: 'Queued report for {objectType}',\n                    }, { objectType: _this.props.objectType }),\n                    text: (React.createElement(FormattedMessage, { id: \"xpack.reporting.panelContent.successfullyQueuedReportNotificationDescription\", defaultMessage: \"Track its progress in Management\" })),\n                    'data-test-subj': 'queueReportSuccess',\n                });\n                _this.props.onClose();\n            })\n                .catch(function (kfetchError) {\n                if (kfetchError.message === 'not exportable') {\n                    return toastNotifications.addWarning({\n                        title: intl.formatMessage({\n                            id: 'xpack.reporting.panelContent.whatCanBeExportedWarningTitle',\n                            defaultMessage: 'Only saved {objectType} can be exported',\n                        }, { objectType: _this.props.objectType }),\n                        text: (React.createElement(FormattedMessage, { id: \"xpack.reporting.panelContent.whatCanBeExportedWarningDescription\", defaultMessage: \"Please save your work first\" })),\n                    });\n                }\n                var defaultMessage = kfetchError.res.status === 403 ? (React.createElement(FormattedMessage, { id: \"xpack.reporting.panelContent.noPermissionToGenerateReportDescription\", defaultMessage: \"You don't have permission to generate this report.\" })) : (React.createElement(FormattedMessage, { id: \"xpack.reporting.panelContent.notification.cantReachServerDescription\", defaultMessage: \"Can't reach the server. Please try again.\" }));\n                toastNotifications.addDanger({\n                    title: intl.formatMessage({\n                        id: 'xpack.reporting.panelContent.notification.reportingErrorTitle',\n                        defaultMessage: 'Reporting error',\n                    }),\n                    text: kfetchError.message || defaultMessage,\n                    'data-test-subj': 'queueReportError',\n                });\n            });\n        };\n        _this.state = {\n            isStale: false,\n            absoluteUrl: '',\n            layoutId: '',\n        };\n        return _this;\n    }\n    ReportingPanelContentUi.getDerivedStateFromProps = function (nextProps, prevState) {\n        if (nextProps.layoutId !== prevState.layoutId) {\n            return tslib_1.__assign({}, prevState, { absoluteUrl: ReportingPanelContentUi.getAbsoluteReportGenerationUrl(nextProps) });\n        }\n        return prevState;\n    };\n    ReportingPanelContentUi.prototype.componentWillUnmount = function () {\n        window.removeEventListener('hashchange', this.markAsStale);\n        window.removeEventListener('resize', this.setAbsoluteReportGenerationUrl);\n        this.mounted = false;\n    };\n    ReportingPanelContentUi.prototype.componentDidMount = function () {\n        this.mounted = true;\n        window.addEventListener('hashchange', this.markAsStale, false);\n        window.addEventListener('resize', this.setAbsoluteReportGenerationUrl);\n    };\n    ReportingPanelContentUi.prototype.render = function () {\n        if (this.isNotSaved() || this.props.isDirty || this.state.isStale) {\n            return (React.createElement(EuiForm, { className: \"sharePanelContent\", \"data-test-subj\": \"shareReportingForm\" },\n                React.createElement(EuiFormRow, { helpText: React.createElement(FormattedMessage, { id: \"xpack.reporting.panelContent.saveWorkDescription\", defaultMessage: \"Please save your work before generating a report.\" }) }, this.renderGenerateReportButton(true))));\n        }\n        var reportMsg = (React.createElement(FormattedMessage, { id: \"xpack.reporting.panelContent.generationTimeDescription\", defaultMessage: \"{reportingType}s can take a minute or two to generate based upon the size of your {objectType}.\", description: \"Here 'reportingType' can be 'PDF' or 'CSV'\", values: {\n                reportingType: this.prettyPrintReportingType(),\n                objectType: this.props.objectType,\n            } }));\n        return (React.createElement(EuiForm, { className: \"sharePanelContent\", \"data-test-subj\": \"shareReportingForm\" },\n            React.createElement(EuiText, { size: \"s\" },\n                React.createElement(\"p\", null, reportMsg)),\n            React.createElement(EuiSpacer, { size: \"s\" }),\n            this.props.options,\n            this.renderGenerateReportButton(false),\n            React.createElement(EuiSpacer, { size: \"s\" }),\n            React.createElement(EuiText, { size: \"s\" },\n                React.createElement(\"p\", null,\n                    React.createElement(FormattedMessage, { id: \"xpack.reporting.panelContent.howToCallGenerationDescription\", defaultMessage: \"Alternatively, copy this POST URL to call generation from outside Kibana or from Watcher.\" }))),\n            React.createElement(EuiSpacer, { size: \"s\" }),\n            React.createElement(EuiCopy, { textToCopy: this.state.absoluteUrl, anchorClassName: \"sharePanel__copyAnchor\" }, function (copy) { return (React.createElement(EuiButton, { className: \"sharePanel__button\", onClick: copy, size: \"s\" },\n                React.createElement(FormattedMessage, { id: \"xpack.reporting.panelContent.copyUrlButtonLabel\", defaultMessage: \"Copy POST URL\" }))); })));\n    };\n    ReportingPanelContentUi.getAbsoluteReportGenerationUrl = function (props) {\n        var relativePath = reportingClient.getReportingJobPath(props.reportType, props.getJobParams());\n        return url.resolve(window.location.href, relativePath);\n    };\n    return ReportingPanelContentUi;\n}(Component));\nexport var ReportingPanelContent = injectI18n(ReportingPanelContentUi);\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/reporting/public/components/reporting_panel_content.tsx","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/reporting/public/components/reporting_panel_content.tsx"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\n// TODO: Remove once typescript definitions are in EUI\ndeclare module '@elastic/eui' {\n  export const EuiCopy: React.SFC<any>;\n}\n\nimport { EuiButton, EuiCopy, EuiForm, EuiFormRow, EuiSpacer, EuiText } from '@elastic/eui';\nimport { FormattedMessage, InjectedIntl, injectI18n } from '@kbn/i18n/react';\nimport React, { Component, ReactElement } from 'react';\nimport { KFetchError } from 'ui/kfetch/kfetch_error';\nimport { toastNotifications } from 'ui/notify';\nimport url from 'url';\nimport { reportingClient } from '../lib/reporting_client';\n\ninterface Props {\n  reportType: string;\n  layoutId: string | undefined;\n  objectId?: string;\n  objectType: string;\n  getJobParams: () => any;\n  options?: ReactElement<any>;\n  isDirty: boolean;\n  onClose: () => void;\n  intl: InjectedIntl;\n}\n\ninterface State {\n  isStale: boolean;\n  absoluteUrl: string;\n  layoutId: string;\n}\n\nclass ReportingPanelContentUi extends Component<Props, State> {\n  public static getDerivedStateFromProps(nextProps: Props, prevState: State) {\n    if (nextProps.layoutId !== prevState.layoutId) {\n      return {\n        ...prevState,\n        absoluteUrl: ReportingPanelContentUi.getAbsoluteReportGenerationUrl(nextProps),\n      };\n    }\n    return prevState;\n  }\n\n  private static getAbsoluteReportGenerationUrl = (props: Props) => {\n    const relativePath = reportingClient.getReportingJobPath(\n      props.reportType,\n      props.getJobParams()\n    );\n    return url.resolve(window.location.href, relativePath);\n  };\n  private mounted?: boolean;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      isStale: false,\n      absoluteUrl: '',\n      layoutId: '',\n    };\n  }\n\n  public componentWillUnmount() {\n    window.removeEventListener('hashchange', this.markAsStale);\n    window.removeEventListener('resize', this.setAbsoluteReportGenerationUrl);\n\n    this.mounted = false;\n  }\n\n  public componentDidMount() {\n    this.mounted = true;\n\n    window.addEventListener('hashchange', this.markAsStale, false);\n    window.addEventListener('resize', this.setAbsoluteReportGenerationUrl);\n  }\n\n  public render() {\n    if (this.isNotSaved() || this.props.isDirty || this.state.isStale) {\n      return (\n        <EuiForm className=\"sharePanelContent\" data-test-subj=\"shareReportingForm\">\n          <EuiFormRow\n            helpText={\n              <FormattedMessage\n                id=\"xpack.reporting.panelContent.saveWorkDescription\"\n                defaultMessage=\"Please save your work before generating a report.\"\n              />\n            }\n          >\n            {this.renderGenerateReportButton(true)}\n          </EuiFormRow>\n        </EuiForm>\n      );\n    }\n\n    const reportMsg = (\n      <FormattedMessage\n        id=\"xpack.reporting.panelContent.generationTimeDescription\"\n        defaultMessage=\"{reportingType}s can take a minute or two to generate based upon the size of your {objectType}.\"\n        description=\"Here 'reportingType' can be 'PDF' or 'CSV'\"\n        values={{\n          reportingType: this.prettyPrintReportingType(),\n          objectType: this.props.objectType,\n        }}\n      />\n    );\n\n    return (\n      <EuiForm className=\"sharePanelContent\" data-test-subj=\"shareReportingForm\">\n        <EuiText size=\"s\">\n          <p>{reportMsg}</p>\n        </EuiText>\n        <EuiSpacer size=\"s\" />\n\n        {this.props.options}\n\n        {this.renderGenerateReportButton(false)}\n        <EuiSpacer size=\"s\" />\n\n        <EuiText size=\"s\">\n          <p>\n            <FormattedMessage\n              id=\"xpack.reporting.panelContent.howToCallGenerationDescription\"\n              defaultMessage=\"Alternatively, copy this POST URL to call generation from outside Kibana or from Watcher.\"\n            />\n          </p>\n        </EuiText>\n        <EuiSpacer size=\"s\" />\n\n        <EuiCopy textToCopy={this.state.absoluteUrl} anchorClassName=\"sharePanel__copyAnchor\">\n          {(copy: () => void) => (\n            <EuiButton className=\"sharePanel__button\" onClick={copy} size=\"s\">\n              <FormattedMessage\n                id=\"xpack.reporting.panelContent.copyUrlButtonLabel\"\n                defaultMessage=\"Copy POST URL\"\n              />\n            </EuiButton>\n          )}\n        </EuiCopy>\n      </EuiForm>\n    );\n  }\n\n  private renderGenerateReportButton = (isDisabled: boolean) => {\n    return (\n      <EuiButton\n        className=\"sharePanel__button\"\n        disabled={isDisabled}\n        fill\n        onClick={this.createReportingJob}\n        data-test-subj=\"generateReportButton\"\n        size=\"s\"\n      >\n        <FormattedMessage\n          id=\"xpack.reporting.panelContent.generateButtonLabel\"\n          defaultMessage=\"Generate {reportingType}\"\n          values={{ reportingType: this.prettyPrintReportingType() }}\n        />\n      </EuiButton>\n    );\n  };\n\n  private prettyPrintReportingType = () => {\n    switch (this.props.reportType) {\n      case 'printablePdf':\n        return 'PDF';\n      case 'csv':\n        return 'CSV';\n      case 'png':\n        return 'PNG';\n      default:\n        return this.props.reportType;\n    }\n  };\n\n  private markAsStale = () => {\n    if (!this.mounted) {\n      return;\n    }\n\n    this.setState({ isStale: true });\n  };\n\n  private isNotSaved = () => {\n    return this.props.objectId === undefined || this.props.objectId === '';\n  };\n\n  private setAbsoluteReportGenerationUrl = () => {\n    if (!this.mounted) {\n      return;\n    }\n    const absoluteUrl = ReportingPanelContentUi.getAbsoluteReportGenerationUrl(this.props);\n    this.setState({ absoluteUrl });\n  };\n\n  private createReportingJob = () => {\n    const { intl } = this.props;\n\n    return reportingClient\n      .createReportingJob(this.props.reportType, this.props.getJobParams())\n      .then(() => {\n        toastNotifications.addSuccess({\n          title: intl.formatMessage(\n            {\n              id: 'xpack.reporting.panelContent.successfullyQueuedReportNotificationTitle',\n              defaultMessage: 'Queued report for {objectType}',\n            },\n            { objectType: this.props.objectType }\n          ),\n          text: (\n            <FormattedMessage\n              id=\"xpack.reporting.panelContent.successfullyQueuedReportNotificationDescription\"\n              defaultMessage=\"Track its progress in Management\"\n            />\n          ),\n          'data-test-subj': 'queueReportSuccess',\n        });\n        this.props.onClose();\n      })\n      .catch((kfetchError: KFetchError) => {\n        if (kfetchError.message === 'not exportable') {\n          return toastNotifications.addWarning({\n            title: intl.formatMessage(\n              {\n                id: 'xpack.reporting.panelContent.whatCanBeExportedWarningTitle',\n                defaultMessage: 'Only saved {objectType} can be exported',\n              },\n              { objectType: this.props.objectType }\n            ),\n            text: (\n              <FormattedMessage\n                id=\"xpack.reporting.panelContent.whatCanBeExportedWarningDescription\"\n                defaultMessage=\"Please save your work first\"\n              />\n            ),\n          });\n        }\n\n        const defaultMessage =\n          kfetchError.res.status === 403 ? (\n            <FormattedMessage\n              id=\"xpack.reporting.panelContent.noPermissionToGenerateReportDescription\"\n              defaultMessage=\"You don't have permission to generate this report.\"\n            />\n          ) : (\n            <FormattedMessage\n              id=\"xpack.reporting.panelContent.notification.cantReachServerDescription\"\n              defaultMessage=\"Can't reach the server. Please try again.\"\n            />\n          );\n\n        toastNotifications.addDanger({\n          title: intl.formatMessage({\n            id: 'xpack.reporting.panelContent.notification.reportingErrorTitle',\n            defaultMessage: 'Reporting error',\n          }),\n          text: kfetchError.message || defaultMessage,\n          'data-test-subj': 'queueReportError',\n        });\n      });\n  };\n}\n\nexport const ReportingPanelContent = injectI18n(ReportingPanelContentUi);\n"]}]}