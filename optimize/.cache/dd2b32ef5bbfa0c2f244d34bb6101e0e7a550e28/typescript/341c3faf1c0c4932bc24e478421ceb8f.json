{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/src/core/public/ui_settings/ui_settings_client.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/core/public/ui_settings/ui_settings_client.ts","mtime":1567631711499},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport * as tslib_1 from \"tslib\";\nimport { cloneDeep, defaultsDeep } from 'lodash';\nimport * as Rx from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nvar UiSettingsClient = /** @class */ (function () {\n    function UiSettingsClient(params) {\n        this.params = params;\n        this.update$ = new Rx.Subject();\n        this.api = params.api;\n        this.onUpdateError = params.onUpdateError;\n        this.defaults = cloneDeep(params.defaults);\n        this.cache = defaultsDeep({}, this.defaults, cloneDeep(params.initialSettings));\n    }\n    /**\n     * Gets the metadata about all uiSettings, including the type, default value, and user value\n     * for each key.\n     */\n    UiSettingsClient.prototype.getAll = function () {\n        return cloneDeep(this.cache);\n    };\n    /**\n     * Gets the value for a specific uiSetting. If this setting has no user-defined value\n     * then the `defaultOverride` parameter is returned (and parsed if setting is of type\n     * \"json\" or \"number). If the parameter is not defined and the key is not defined by a\n     * uiSettingDefaults then an error is thrown, otherwise the default is read\n     * from the uiSettingDefaults.\n     */\n    UiSettingsClient.prototype.get = function (key, defaultOverride) {\n        var declared = this.isDeclared(key);\n        if (!declared && defaultOverride !== undefined) {\n            return defaultOverride;\n        }\n        if (!declared) {\n            throw new Error(\"Unexpected `config.get(\\\"\" + key + \"\\\")` call on unrecognized configuration setting \\\"\" + key + \"\\\".\\nSetting an initial value via `config.set(\\\"\" + key + \"\\\", value)` before attempting to retrieve\\nany custom setting value for \\\"\" + key + \"\\\" may fix this issue.\\nYou can use `config.get(\\\"\" + key + \"\\\", defaultValue)`, which will just return\\n`defaultValue` when the key is unrecognized.\");\n        }\n        var type = this.cache[key].type;\n        var userValue = this.cache[key].userValue;\n        var defaultValue = defaultOverride !== undefined ? defaultOverride : this.cache[key].value;\n        var value = userValue == null ? defaultValue : userValue;\n        if (type === 'json') {\n            return JSON.parse(value);\n        }\n        if (type === 'number') {\n            return parseFloat(value);\n        }\n        return value;\n    };\n    /**\n     * Gets an observable of the current value for a config key, and all updates to that config\n     * key in the future. Providing a `defaultOverride` argument behaves the same as it does in #get()\n     */\n    UiSettingsClient.prototype.get$ = function (key, defaultOverride) {\n        var _this = this;\n        return Rx.concat(Rx.defer(function () { return Rx.of(_this.get(key, defaultOverride)); }), this.update$.pipe(filter(function (update) { return update.key === key; }), map(function () { return _this.get(key, defaultOverride); })));\n    };\n    /**\n     * Sets the value for a uiSetting. If the setting is not defined in the uiSettingDefaults\n     * it will be stored as a custom setting. The new value will be synchronously available via\n     * the `get()` method and sent to the server in the background. If the request to the\n     * server fails then a toast notification will be displayed and the setting will be\n     * reverted it its value before `set()` was called.\n     */\n    UiSettingsClient.prototype.set = function (key, val) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.update(key, val)];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    /**\n     * Removes the user-defined value for a setting, causing it to revert to the default. This\n     * method behaves the same as calling `set(key, null)`, including the synchronization, custom\n     * setting, and error behavior of that method.\n     */\n    UiSettingsClient.prototype.remove = function (key) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.update(key, null)];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    /**\n     * Returns true if the key is a \"known\" uiSetting, meaning it is either defined in the\n     * uiSettingDefaults or was previously added as a custom setting via the `set()` method.\n     */\n    UiSettingsClient.prototype.isDeclared = function (key) {\n        return key in this.cache;\n    };\n    /**\n     * Returns true if the setting has no user-defined value or is unknown\n     */\n    UiSettingsClient.prototype.isDefault = function (key) {\n        return !this.isDeclared(key) || this.cache[key].userValue == null;\n    };\n    /**\n     * Returns true if the setting is not a part of the uiSettingDefaults, but was either\n     * added directly via `set()`, or is an unknown setting found in the uiSettings saved\n     * object\n     */\n    UiSettingsClient.prototype.isCustom = function (key) {\n        return this.isDeclared(key) && !('value' in this.cache[key]);\n    };\n    /**\n     * Returns true if a settings value is overridden by the server. When a setting is overridden\n     * its value can not be changed via `set()` or `remove()`.\n     */\n    UiSettingsClient.prototype.isOverridden = function (key) {\n        return this.isDeclared(key) && Boolean(this.cache[key].isOverridden);\n    };\n    /**\n     * Overrides the default value for a setting in this specific browser tab. If the page\n     * is reloaded the default override is lost.\n     */\n    UiSettingsClient.prototype.overrideLocalDefault = function (key, newDefault) {\n        // capture the previous value\n        var prevDefault = this.defaults[key] ? this.defaults[key].value : undefined;\n        // update defaults map\n        this.defaults[key] = tslib_1.__assign({}, (this.defaults[key] || {}), { value: newDefault });\n        // update cached default value\n        this.cache[key] = tslib_1.__assign({}, (this.cache[key] || {}), { value: newDefault });\n        // don't broadcast change if userValue was already overriding the default\n        if (this.cache[key].userValue == null) {\n            this.update$.next({\n                key: key,\n                newValue: newDefault,\n                oldValue: prevDefault,\n            });\n        }\n    };\n    /**\n     * Returns an Observable that notifies subscribers of each update to the uiSettings,\n     * including the key, newValue, and oldValue of the setting that changed.\n     */\n    UiSettingsClient.prototype.getUpdate$ = function () {\n        return this.update$.asObservable();\n    };\n    /**\n     * Prepares the uiSettingsClient to be discarded, completing any update$ observables\n     * that have been created.\n     */\n    UiSettingsClient.prototype.stop = function () {\n        this.update$.complete();\n    };\n    UiSettingsClient.prototype.assertUpdateAllowed = function (key) {\n        if (this.isOverridden(key)) {\n            throw new Error(\"Unable to update \\\"\" + key + \"\\\" because its value is overridden by the Kibana server\");\n        }\n    };\n    UiSettingsClient.prototype.update = function (key, newVal) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var declared, defaults, oldVal, unchanged, initialVal, settings, error_1;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        this.assertUpdateAllowed(key);\n                        declared = this.isDeclared(key);\n                        defaults = this.defaults;\n                        oldVal = declared ? this.cache[key].userValue : undefined;\n                        unchanged = oldVal === newVal;\n                        if (unchanged) {\n                            return [2 /*return*/, true];\n                        }\n                        initialVal = declared ? this.get(key) : undefined;\n                        this.setLocally(key, newVal);\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 3, , 4]);\n                        return [4 /*yield*/, this.api.batchSet(key, newVal)];\n                    case 2:\n                        settings = (_a.sent()).settings;\n                        this.cache = defaultsDeep({}, defaults, settings);\n                        return [2 /*return*/, true];\n                    case 3:\n                        error_1 = _a.sent();\n                        this.setLocally(key, initialVal);\n                        this.onUpdateError(error_1);\n                        return [2 /*return*/, false];\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    UiSettingsClient.prototype.setLocally = function (key, newValue) {\n        this.assertUpdateAllowed(key);\n        if (!this.isDeclared(key)) {\n            this.cache[key] = {};\n        }\n        var oldValue = this.get(key);\n        if (newValue === null) {\n            delete this.cache[key].userValue;\n        }\n        else {\n            var type = this.cache[key].type;\n            if (type === 'json' && typeof newValue !== 'string') {\n                this.cache[key].userValue = JSON.stringify(newValue);\n            }\n            else {\n                this.cache[key].userValue = newValue;\n            }\n        }\n        this.update$.next({ key: key, newValue: newValue, oldValue: oldValue });\n    };\n    return UiSettingsClient;\n}());\nexport { UiSettingsClient };\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/src/core/public/ui_settings/ui_settings_client.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/src/core/public/ui_settings/ui_settings_client.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { cloneDeep, defaultsDeep } from 'lodash';\nimport * as Rx from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\nimport { UiSettingsState } from './types';\nimport { UiSettingsApi } from './ui_settings_api';\n\ninterface Params {\n  api: UiSettingsApi;\n  onUpdateError: UiSettingsClient['onUpdateError'];\n  defaults: UiSettingsState;\n  initialSettings?: UiSettingsState;\n}\n\nexport class UiSettingsClient {\n  private readonly update$ = new Rx.Subject<{ key: string; newValue: any; oldValue: any }>();\n\n  private readonly api: UiSettingsApi;\n  private readonly onUpdateError: (error: Error) => void;\n  private readonly defaults: UiSettingsState;\n  private cache: UiSettingsState;\n\n  constructor(readonly params: Params) {\n    this.api = params.api;\n    this.onUpdateError = params.onUpdateError;\n    this.defaults = cloneDeep(params.defaults);\n    this.cache = defaultsDeep({}, this.defaults, cloneDeep(params.initialSettings));\n  }\n\n  /**\n   * Gets the metadata about all uiSettings, including the type, default value, and user value\n   * for each key.\n   */\n  public getAll() {\n    return cloneDeep(this.cache);\n  }\n\n  /**\n   * Gets the value for a specific uiSetting. If this setting has no user-defined value\n   * then the `defaultOverride` parameter is returned (and parsed if setting is of type\n   * \"json\" or \"number). If the parameter is not defined and the key is not defined by a\n   * uiSettingDefaults then an error is thrown, otherwise the default is read\n   * from the uiSettingDefaults.\n   */\n  public get(key: string, defaultOverride?: any) {\n    const declared = this.isDeclared(key);\n\n    if (!declared && defaultOverride !== undefined) {\n      return defaultOverride;\n    }\n\n    if (!declared) {\n      throw new Error(\n        `Unexpected \\`config.get(\"${key}\")\\` call on unrecognized configuration setting \"${key}\".\nSetting an initial value via \\`config.set(\"${key}\", value)\\` before attempting to retrieve\nany custom setting value for \"${key}\" may fix this issue.\nYou can use \\`config.get(\"${key}\", defaultValue)\\`, which will just return\n\\`defaultValue\\` when the key is unrecognized.`\n      );\n    }\n\n    const type = this.cache[key].type;\n    const userValue = this.cache[key].userValue;\n    const defaultValue = defaultOverride !== undefined ? defaultOverride : this.cache[key].value;\n    const value = userValue == null ? defaultValue : userValue;\n\n    if (type === 'json') {\n      return JSON.parse(value);\n    }\n\n    if (type === 'number') {\n      return parseFloat(value);\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets an observable of the current value for a config key, and all updates to that config\n   * key in the future. Providing a `defaultOverride` argument behaves the same as it does in #get()\n   */\n  public get$(key: string, defaultOverride?: any) {\n    return Rx.concat(\n      Rx.defer(() => Rx.of(this.get(key, defaultOverride))),\n      this.update$.pipe(\n        filter(update => update.key === key),\n        map(() => this.get(key, defaultOverride))\n      )\n    );\n  }\n\n  /**\n   * Sets the value for a uiSetting. If the setting is not defined in the uiSettingDefaults\n   * it will be stored as a custom setting. The new value will be synchronously available via\n   * the `get()` method and sent to the server in the background. If the request to the\n   * server fails then a toast notification will be displayed and the setting will be\n   * reverted it its value before `set()` was called.\n   */\n  public async set(key: string, val: any) {\n    return await this.update(key, val);\n  }\n\n  /**\n   * Removes the user-defined value for a setting, causing it to revert to the default. This\n   * method behaves the same as calling `set(key, null)`, including the synchronization, custom\n   * setting, and error behavior of that method.\n   */\n  public async remove(key: string) {\n    return await this.update(key, null);\n  }\n\n  /**\n   * Returns true if the key is a \"known\" uiSetting, meaning it is either defined in the\n   * uiSettingDefaults or was previously added as a custom setting via the `set()` method.\n   */\n  public isDeclared(key: string) {\n    return key in this.cache;\n  }\n\n  /**\n   * Returns true if the setting has no user-defined value or is unknown\n   */\n  public isDefault(key: string) {\n    return !this.isDeclared(key) || this.cache[key].userValue == null;\n  }\n\n  /**\n   * Returns true if the setting is not a part of the uiSettingDefaults, but was either\n   * added directly via `set()`, or is an unknown setting found in the uiSettings saved\n   * object\n   */\n  public isCustom(key: string) {\n    return this.isDeclared(key) && !('value' in this.cache[key]);\n  }\n\n  /**\n   * Returns true if a settings value is overridden by the server. When a setting is overridden\n   * its value can not be changed via `set()` or `remove()`.\n   */\n  public isOverridden(key: string) {\n    return this.isDeclared(key) && Boolean(this.cache[key].isOverridden);\n  }\n\n  /**\n   * Overrides the default value for a setting in this specific browser tab. If the page\n   * is reloaded the default override is lost.\n   */\n  public overrideLocalDefault(key: string, newDefault: any) {\n    // capture the previous value\n    const prevDefault = this.defaults[key] ? this.defaults[key].value : undefined;\n\n    // update defaults map\n    this.defaults[key] = {\n      ...(this.defaults[key] || {}),\n      value: newDefault,\n    };\n\n    // update cached default value\n    this.cache[key] = {\n      ...(this.cache[key] || {}),\n      value: newDefault,\n    };\n\n    // don't broadcast change if userValue was already overriding the default\n    if (this.cache[key].userValue == null) {\n      this.update$.next({\n        key,\n        newValue: newDefault,\n        oldValue: prevDefault,\n      });\n    }\n  }\n\n  /**\n   * Returns an Observable that notifies subscribers of each update to the uiSettings,\n   * including the key, newValue, and oldValue of the setting that changed.\n   */\n  public getUpdate$() {\n    return this.update$.asObservable();\n  }\n\n  /**\n   * Prepares the uiSettingsClient to be discarded, completing any update$ observables\n   * that have been created.\n   */\n  public stop() {\n    this.update$.complete();\n  }\n\n  private assertUpdateAllowed(key: string) {\n    if (this.isOverridden(key)) {\n      throw new Error(\n        `Unable to update \"${key}\" because its value is overridden by the Kibana server`\n      );\n    }\n  }\n\n  private async update(key: string, newVal: any) {\n    this.assertUpdateAllowed(key);\n\n    const declared = this.isDeclared(key);\n    const defaults = this.defaults;\n\n    const oldVal = declared ? this.cache[key].userValue : undefined;\n\n    const unchanged = oldVal === newVal;\n    if (unchanged) {\n      return true;\n    }\n\n    const initialVal = declared ? this.get(key) : undefined;\n    this.setLocally(key, newVal);\n\n    try {\n      const { settings } = await this.api.batchSet(key, newVal);\n      this.cache = defaultsDeep({}, defaults, settings);\n      return true;\n    } catch (error) {\n      this.setLocally(key, initialVal);\n      this.onUpdateError(error);\n      return false;\n    }\n  }\n\n  private setLocally(key: string, newValue: any) {\n    this.assertUpdateAllowed(key);\n\n    if (!this.isDeclared(key)) {\n      this.cache[key] = {};\n    }\n\n    const oldValue = this.get(key);\n\n    if (newValue === null) {\n      delete this.cache[key].userValue;\n    } else {\n      const { type } = this.cache[key];\n      if (type === 'json' && typeof newValue !== 'string') {\n        this.cache[key].userValue = JSON.stringify(newValue);\n      } else {\n        this.cache[key].userValue = newValue;\n      }\n    }\n\n    this.update$.next({ key, newValue, oldValue });\n  }\n}\n"]}]}