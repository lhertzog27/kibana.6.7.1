{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/src/core/public/fatal_errors/get_error_info.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/core/public/fatal_errors/get_error_info.ts","mtime":1567631711497},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { inspect } from 'util';\n/**\n * Produce a string version of an error,\n */\nfunction formatMessage(error) {\n    if (typeof error === 'string') {\n        return error;\n    }\n    if (!error) {\n        // stringify undefined/null/0/whatever this falsy value is\n        return inspect(error);\n    }\n    // handle es error response with `root_cause`s\n    if (error.resp && error.resp.error && error.resp.error.root_cause) {\n        return error.resp.error.root_cause.map(function (cause) { return cause.reason; }).join('\\n');\n    }\n    // handle http response errors with error messages\n    if (error.body && typeof error.body.message === 'string') {\n        return error.body.message;\n    }\n    // handle standard error objects with messages\n    if (error instanceof Error && error.message) {\n        return error.message;\n    }\n    // everything else can just be serialized using util.inspect()\n    return inspect(error);\n}\n/**\n * Format the stack trace from a message so that it starts with the message, which\n * some browsers do automatically and some don't\n */\nfunction formatStack(err) {\n    if (err.stack && !err.stack.includes(err.message)) {\n        return 'Error: ' + err.message + '\\n' + err.stack;\n    }\n    return err.stack;\n}\n/**\n * Produce a simple ErrorInfo object from some error and optional source, used for\n * displaying error information on the fatal error screen\n */\nexport function getErrorInfo(error, source) {\n    var prefix = source ? source + ': ' : '';\n    return {\n        message: prefix + formatMessage(error),\n        stack: formatStack(error),\n    };\n}\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/src/core/public/fatal_errors/get_error_info.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/src/core/public/fatal_errors/get_error_info.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;GAiBG;AAEH,OAAO,EAAE,OAAO,EAAE,MAAM,MAAM,CAAC;AAE/B;;GAEG;AACH,SAAS,aAAa,CAAC,KAAU;IAC/B,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;QAC7B,OAAO,KAAK,CAAC;KACd;IAED,IAAI,CAAC,KAAK,EAAE;QACV,0DAA0D;QAC1D,OAAO,OAAO,CAAC,KAAK,CAAC,CAAC;KACvB;IAED,8CAA8C;IAC9C,IAAI,KAAK,CAAC,IAAI,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE;QACjE,OAAO,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,UAAC,KAAyB,IAAK,OAAA,KAAK,CAAC,MAAM,EAAZ,CAAY,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KAChG;IAED,kDAAkD;IAClD,IAAI,KAAK,CAAC,IAAI,IAAI,OAAO,KAAK,CAAC,IAAI,CAAC,OAAO,KAAK,QAAQ,EAAE;QACxD,OAAO,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC;KAC3B;IAED,8CAA8C;IAC9C,IAAI,KAAK,YAAY,KAAK,IAAI,KAAK,CAAC,OAAO,EAAE;QAC3C,OAAO,KAAK,CAAC,OAAO,CAAC;KACtB;IAED,8DAA8D;IAC9D,OAAO,OAAO,CAAC,KAAK,CAAC,CAAC;AACxB,CAAC;AAED;;;GAGG;AACH,SAAS,WAAW,CAAC,GAAU;IAC7B,IAAI,GAAG,CAAC,KAAK,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE;QACjD,OAAO,SAAS,GAAG,GAAG,CAAC,OAAO,GAAG,IAAI,GAAG,GAAG,CAAC,KAAK,CAAC;KACnD;IAED,OAAO,GAAG,CAAC,KAAK,CAAC;AACnB,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,YAAY,CAAC,KAAU,EAAE,MAAe;IACtD,IAAM,MAAM,GAAG,MAAM,CAAC,CAAC,CAAC,MAAM,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC;IAC3C,OAAO;QACL,OAAO,EAAE,MAAM,GAAG,aAAa,CAAC,KAAK,CAAC;QACtC,KAAK,EAAE,WAAW,CAAC,KAAK,CAAC;KAC1B,CAAC;AACJ,CAAC","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { inspect } from 'util';\n\n/**\n * Produce a string version of an error,\n */\nfunction formatMessage(error: any) {\n  if (typeof error === 'string') {\n    return error;\n  }\n\n  if (!error) {\n    // stringify undefined/null/0/whatever this falsy value is\n    return inspect(error);\n  }\n\n  // handle es error response with `root_cause`s\n  if (error.resp && error.resp.error && error.resp.error.root_cause) {\n    return error.resp.error.root_cause.map((cause: { reason: string }) => cause.reason).join('\\n');\n  }\n\n  // handle http response errors with error messages\n  if (error.body && typeof error.body.message === 'string') {\n    return error.body.message;\n  }\n\n  // handle standard error objects with messages\n  if (error instanceof Error && error.message) {\n    return error.message;\n  }\n\n  // everything else can just be serialized using util.inspect()\n  return inspect(error);\n}\n\n/**\n * Format the stack trace from a message so that it starts with the message, which\n * some browsers do automatically and some don't\n */\nfunction formatStack(err: Error) {\n  if (err.stack && !err.stack.includes(err.message)) {\n    return 'Error: ' + err.message + '\\n' + err.stack;\n  }\n\n  return err.stack;\n}\n\n/**\n * Produce a simple ErrorInfo object from some error and optional source, used for\n * displaying error information on the fatal error screen\n */\nexport function getErrorInfo(error: any, source?: string) {\n  const prefix = source ? source + ': ' : '';\n  return {\n    message: prefix + formatMessage(error),\n    stack: formatStack(error),\n  };\n}\n\nexport type ErrorInfo = ReturnType<typeof getErrorInfo>;\n"]}]}