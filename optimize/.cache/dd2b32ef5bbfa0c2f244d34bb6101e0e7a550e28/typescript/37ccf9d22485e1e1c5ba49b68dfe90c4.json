{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/store/store.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/store/store.ts","mtime":1567631711990},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport { applyMiddleware, compose, createStore as createBasicStore } from 'redux';\nimport { createEpicMiddleware } from 'redux-observable';\nimport { map } from 'rxjs/operators';\nimport { createRootEpic, initialState, logEntriesSelectors, logFilterSelectors, logPositionSelectors, metricTimeSelectors, reducer, waffleTimeSelectors, } from '.';\nexport function createStore(_a) {\n    var apolloClient = _a.apolloClient, observableApi = _a.observableApi;\n    var composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n    var middlewareDependencies = {\n        postToApi$: observableApi.pipe(map(function (_a) {\n            var post = _a.post;\n            return post;\n        })),\n        apolloClient$: apolloClient,\n        selectIsLoadingLogEntries: logEntriesSelectors.selectIsLoadingEntries,\n        selectLogEntriesEnd: logEntriesSelectors.selectEntriesEnd,\n        selectLogEntriesStart: logEntriesSelectors.selectEntriesStart,\n        selectHasMoreLogEntriesAfterEnd: logEntriesSelectors.selectHasMoreAfterEnd,\n        selectHasMoreLogEntriesBeforeStart: logEntriesSelectors.selectHasMoreBeforeStart,\n        selectIsAutoReloadingLogEntries: logPositionSelectors.selectIsAutoReloading,\n        selectLogFilterQueryAsJson: logFilterSelectors.selectLogFilterQueryAsJson,\n        selectLogTargetPosition: logPositionSelectors.selectTargetPosition,\n        selectVisibleLogMidpointOrTarget: logPositionSelectors.selectVisibleMidpointOrTarget,\n        selectVisibleLogSummary: logPositionSelectors.selectVisibleSummary,\n        selectWaffleTimeUpdatePolicyInterval: waffleTimeSelectors.selectTimeUpdatePolicyInterval,\n        selectMetricTimeUpdatePolicyInterval: metricTimeSelectors.selectTimeUpdatePolicyInterval,\n        selectMetricRangeFromTimeRange: metricTimeSelectors.selectRangeFromTimeRange,\n    };\n    var epicMiddleware = createEpicMiddleware({\n        dependencies: middlewareDependencies,\n    });\n    var store = createBasicStore(reducer, initialState, composeEnhancers(applyMiddleware(epicMiddleware)));\n    epicMiddleware.run(createRootEpic());\n    return store;\n}\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/store/store.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/store/store.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAEH,OAAO,EAAU,eAAe,EAAE,OAAO,EAAE,WAAW,IAAI,gBAAgB,EAAE,MAAM,OAAO,CAAC;AAC1F,OAAO,EAAE,oBAAoB,EAAE,MAAM,kBAAkB,CAAC;AAExD,OAAO,EAAE,GAAG,EAAE,MAAM,gBAAgB,CAAC;AAErC,OAAO,EACL,cAAc,EACd,YAAY,EACZ,mBAAmB,EACnB,kBAAkB,EAClB,oBAAoB,EACpB,mBAAmB,EACnB,OAAO,EAEP,mBAAmB,GACpB,MAAM,GAAG,CAAC;AAcX,MAAM,UAAU,WAAW,CAAC,EAAkD;QAAhD,8BAAY,EAAE,gCAAa;IACvD,IAAM,gBAAgB,GAAG,MAAM,CAAC,oCAAoC,IAAI,OAAO,CAAC;IAEhF,IAAM,sBAAsB,GAAG;QAC7B,UAAU,EAAE,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,UAAC,EAAQ;gBAAN,cAAI;YAAO,OAAA,IAAI;QAAJ,CAAI,CAAC,CAAC;QACvD,aAAa,EAAE,YAAY;QAC3B,yBAAyB,EAAE,mBAAmB,CAAC,sBAAsB;QACrE,mBAAmB,EAAE,mBAAmB,CAAC,gBAAgB;QACzD,qBAAqB,EAAE,mBAAmB,CAAC,kBAAkB;QAC7D,+BAA+B,EAAE,mBAAmB,CAAC,qBAAqB;QAC1E,kCAAkC,EAAE,mBAAmB,CAAC,wBAAwB;QAChF,+BAA+B,EAAE,oBAAoB,CAAC,qBAAqB;QAC3E,0BAA0B,EAAE,kBAAkB,CAAC,0BAA0B;QACzE,uBAAuB,EAAE,oBAAoB,CAAC,oBAAoB;QAClE,gCAAgC,EAAE,oBAAoB,CAAC,6BAA6B;QACpF,uBAAuB,EAAE,oBAAoB,CAAC,oBAAoB;QAClE,oCAAoC,EAAE,mBAAmB,CAAC,8BAA8B;QACxF,oCAAoC,EAAE,mBAAmB,CAAC,8BAA8B;QACxF,8BAA8B,EAAE,mBAAmB,CAAC,wBAAwB;KAC7E,CAAC;IAEF,IAAM,cAAc,GAAG,oBAAoB,CACzC;QACE,YAAY,EAAE,sBAAsB;KACrC,CACF,CAAC;IAEF,IAAM,KAAK,GAAG,gBAAgB,CAC5B,OAAO,EACP,YAAY,EACZ,gBAAgB,CAAC,eAAe,CAAC,cAAc,CAAC,CAAC,CAClD,CAAC;IAEF,cAAc,CAAC,GAAG,CAAC,cAAc,EAAS,CAAC,CAAC;IAE5C,OAAO,KAAK,CAAC;AACf,CAAC","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport { Action, applyMiddleware, compose, createStore as createBasicStore } from 'redux';\nimport { createEpicMiddleware } from 'redux-observable';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport {\n  createRootEpic,\n  initialState,\n  logEntriesSelectors,\n  logFilterSelectors,\n  logPositionSelectors,\n  metricTimeSelectors,\n  reducer,\n  State,\n  waffleTimeSelectors,\n} from '.';\nimport { InfraApolloClient, InfraObservableApi } from '../lib/lib';\n\ndeclare global {\n  interface Window {\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__: typeof compose;\n  }\n}\n\nexport interface StoreDependencies {\n  apolloClient: Observable<InfraApolloClient>;\n  observableApi: Observable<InfraObservableApi>;\n}\n\nexport function createStore({ apolloClient, observableApi }: StoreDependencies) {\n  const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\n  const middlewareDependencies = {\n    postToApi$: observableApi.pipe(map(({ post }) => post)),\n    apolloClient$: apolloClient,\n    selectIsLoadingLogEntries: logEntriesSelectors.selectIsLoadingEntries,\n    selectLogEntriesEnd: logEntriesSelectors.selectEntriesEnd,\n    selectLogEntriesStart: logEntriesSelectors.selectEntriesStart,\n    selectHasMoreLogEntriesAfterEnd: logEntriesSelectors.selectHasMoreAfterEnd,\n    selectHasMoreLogEntriesBeforeStart: logEntriesSelectors.selectHasMoreBeforeStart,\n    selectIsAutoReloadingLogEntries: logPositionSelectors.selectIsAutoReloading,\n    selectLogFilterQueryAsJson: logFilterSelectors.selectLogFilterQueryAsJson,\n    selectLogTargetPosition: logPositionSelectors.selectTargetPosition,\n    selectVisibleLogMidpointOrTarget: logPositionSelectors.selectVisibleMidpointOrTarget,\n    selectVisibleLogSummary: logPositionSelectors.selectVisibleSummary,\n    selectWaffleTimeUpdatePolicyInterval: waffleTimeSelectors.selectTimeUpdatePolicyInterval,\n    selectMetricTimeUpdatePolicyInterval: metricTimeSelectors.selectTimeUpdatePolicyInterval,\n    selectMetricRangeFromTimeRange: metricTimeSelectors.selectRangeFromTimeRange,\n  };\n\n  const epicMiddleware = createEpicMiddleware<Action, Action, State, typeof middlewareDependencies>(\n    {\n      dependencies: middlewareDependencies,\n    }\n  );\n\n  const store = createBasicStore(\n    reducer,\n    initialState,\n    composeEnhancers(applyMiddleware(epicMiddleware))\n  );\n\n  epicMiddleware.run(createRootEpic<State>());\n\n  return store;\n}\n"]}]}