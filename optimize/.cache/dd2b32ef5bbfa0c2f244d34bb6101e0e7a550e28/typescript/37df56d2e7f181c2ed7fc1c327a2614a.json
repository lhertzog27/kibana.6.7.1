{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/apm/public/components/app/ServiceOverview/view.tsx","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/apm/public/components/app/ServiceOverview/view.tsx","mtime":1567631711861},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport * as tslib_1 from \"tslib\";\nimport { i18n } from '@kbn/i18n';\nimport React, { Component } from 'react';\nimport { loadAgentStatus } from '../../../services/rest/apm/status_check';\nimport { ServiceListRequest } from '../../../store/reactReduxRequest/serviceList';\nimport { EmptyMessage } from '../../shared/EmptyMessage';\nimport { SetupInstructionsLink } from '../../shared/SetupInstructionsLink';\nimport { ServiceList } from './ServiceList';\nvar ServiceOverview = /** @class */ (function (_super) {\n    tslib_1.__extends(ServiceOverview, _super);\n    function ServiceOverview() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.state = { historicalDataFound: true };\n        return _this;\n    }\n    ServiceOverview.prototype.checkForHistoricalData = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var result;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, loadAgentStatus()];\n                    case 1:\n                        result = _a.sent();\n                        this.setState({ historicalDataFound: result.dataFound });\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    ServiceOverview.prototype.componentDidMount = function () {\n        this.checkForHistoricalData();\n    };\n    ServiceOverview.prototype.render = function () {\n        var _this = this;\n        var urlParams = this.props.urlParams;\n        var historicalDataFound = this.state.historicalDataFound;\n        var noItemsMessage = (React.createElement(EmptyMessage, { heading: historicalDataFound\n                ? i18n.translate('xpack.apm.servicesTable.notFoundLabel', {\n                    defaultMessage: 'No services were found'\n                })\n                : i18n.translate('xpack.apm.servicesTable.noServicesLabel', {\n                    defaultMessage: \"Looks like you don't have any services with APM installed. Let's add some!\"\n                }), subheading: !historicalDataFound ? React.createElement(SetupInstructionsLink, { buttonFill: true }) : null }));\n        // Render method here uses this.props.serviceList instead of received \"data\" from RRR\n        // to make it easier to test -- mapStateToProps uses the RRR selector so the data\n        // is the same either way\n        return (React.createElement(\"div\", null,\n            React.createElement(ServiceListRequest, { urlParams: urlParams, render: function () { return (React.createElement(ServiceList, { items: _this.props.serviceList.data, noItemsMessage: noItemsMessage })); } })));\n    };\n    return ServiceOverview;\n}(Component));\nexport { ServiceOverview };\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/apm/public/components/app/ServiceOverview/view.tsx","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/apm/public/components/app/ServiceOverview/view.tsx"],"names":[],"mappings":"AAAA;;;;GAIG;;AAEH,OAAO,EAAE,IAAI,EAAE,MAAM,WAAW,CAAC;AACjC,OAAO,KAAK,EAAE,EAAE,SAAS,EAAE,MAAM,OAAO,CAAC;AAIzC,OAAO,EAAE,eAAe,EAAE,MAAM,yCAAyC,CAAC;AAC1E,OAAO,EAAE,kBAAkB,EAAE,MAAM,8CAA8C,CAAC;AAClF,OAAO,EAAE,YAAY,EAAE,MAAM,2BAA2B,CAAC;AACzD,OAAO,EAAE,qBAAqB,EAAE,MAAM,oCAAoC,CAAC;AAC3E,OAAO,EAAE,WAAW,EAAE,MAAM,eAAe,CAAC;AAW5C;IAAqC,2CAAuB;IAA5D;QAAA,qEAkDC;QAjDQ,WAAK,GAAG,EAAE,mBAAmB,EAAE,IAAI,EAAE,CAAC;;IAiD/C,CAAC;IA/Cc,gDAAsB,GAAnC;;;;;4BACiB,qBAAM,eAAe,EAAE,EAAA;;wBAAhC,MAAM,GAAG,SAAuB;wBACtC,IAAI,CAAC,QAAQ,CAAC,EAAE,mBAAmB,EAAE,MAAM,CAAC,SAAS,EAAE,CAAC,CAAC;;;;;KAC1D;IAEM,2CAAiB,GAAxB;QACE,IAAI,CAAC,sBAAsB,EAAE,CAAC;IAChC,CAAC;IAEM,gCAAM,GAAb;QAAA,iBAqCC;QApCS,IAAA,gCAAS,CAAgB;QACzB,IAAA,oDAAmB,CAAgB;QAE3C,IAAM,cAAc,GAAG,CACrB,oBAAC,YAAY,IACX,OAAO,EACL,mBAAmB;gBACjB,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,uCAAuC,EAAE;oBACtD,cAAc,EAAE,wBAAwB;iBACzC,CAAC;gBACJ,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,yCAAyC,EAAE;oBACxD,cAAc,EAAE,4EAA4E;iBAC7F,CAAC,EAER,UAAU,EACR,CAAC,mBAAmB,CAAC,CAAC,CAAC,oBAAC,qBAAqB,IAAC,UAAU,SAAG,CAAC,CAAC,CAAC,IAAI,GAEpE,CACH,CAAC;QAEF,qFAAqF;QACrF,iFAAiF;QACjF,yBAAyB;QACzB,OAAO,CACL;YACE,oBAAC,kBAAkB,IACjB,SAAS,EAAE,SAAS,EACpB,MAAM,EAAE,cAAM,OAAA,CACZ,oBAAC,WAAW,IACV,KAAK,EAAE,KAAI,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,EAClC,cAAc,EAAE,cAAc,GAC9B,CACH,EALa,CAKb,GACD,CACE,CACP,CAAC;IACJ,CAAC;IACH,sBAAC;AAAD,CAAC,AAlDD,CAAqC,SAAS,GAkD7C","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport { i18n } from '@kbn/i18n';\nimport React, { Component } from 'react';\nimport { RRRRenderResponse } from 'react-redux-request';\nimport { IUrlParams } from 'x-pack/plugins/apm/public/store/urlParams';\nimport { IServiceListItem } from 'x-pack/plugins/apm/server/lib/services/get_services';\nimport { loadAgentStatus } from '../../../services/rest/apm/status_check';\nimport { ServiceListRequest } from '../../../store/reactReduxRequest/serviceList';\nimport { EmptyMessage } from '../../shared/EmptyMessage';\nimport { SetupInstructionsLink } from '../../shared/SetupInstructionsLink';\nimport { ServiceList } from './ServiceList';\n\ninterface Props {\n  urlParams: IUrlParams;\n  serviceList: RRRRenderResponse<IServiceListItem[]>;\n}\n\ninterface State {\n  historicalDataFound: boolean;\n}\n\nexport class ServiceOverview extends Component<Props, State> {\n  public state = { historicalDataFound: true };\n\n  public async checkForHistoricalData() {\n    const result = await loadAgentStatus();\n    this.setState({ historicalDataFound: result.dataFound });\n  }\n\n  public componentDidMount() {\n    this.checkForHistoricalData();\n  }\n\n  public render() {\n    const { urlParams } = this.props;\n    const { historicalDataFound } = this.state;\n\n    const noItemsMessage = (\n      <EmptyMessage\n        heading={\n          historicalDataFound\n            ? i18n.translate('xpack.apm.servicesTable.notFoundLabel', {\n                defaultMessage: 'No services were found'\n              })\n            : i18n.translate('xpack.apm.servicesTable.noServicesLabel', {\n                defaultMessage: `Looks like you don't have any services with APM installed. Let's add some!`\n              })\n        }\n        subheading={\n          !historicalDataFound ? <SetupInstructionsLink buttonFill /> : null\n        }\n      />\n    );\n\n    // Render method here uses this.props.serviceList instead of received \"data\" from RRR\n    // to make it easier to test -- mapStateToProps uses the RRR selector so the data\n    // is the same either way\n    return (\n      <div>\n        <ServiceListRequest\n          urlParams={urlParams}\n          render={() => (\n            <ServiceList\n              items={this.props.serviceList.data}\n              noItemsMessage={noItemsMessage}\n            />\n          )}\n        />\n      </div>\n    );\n  }\n}\n"]}]}