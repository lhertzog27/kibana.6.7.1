{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/upgrade_assistant/public/components/tabs/checkup/deprecations/reindex/button.tsx","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/upgrade_assistant/public/components/tabs/checkup/deprecations/reindex/button.tsx","mtime":1567631712322},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport * as tslib_1 from \"tslib\";\nimport { set } from 'lodash';\nimport React, { Fragment } from 'react';\nimport { EuiButton, EuiLoadingSpinner } from '@elastic/eui';\nimport { FormattedMessage } from '@kbn/i18n/react';\nimport { kfetch } from 'ui/kfetch';\nimport { ReindexStatus } from '../../../../../../common/types';\nimport { LoadingState } from '../../../../types';\nimport { ReindexFlyout } from './flyout';\nimport { ReindexPollingService } from './polling_service';\n/**\n * Displays a button that will display a flyout when clicked with the reindexing status for\n * the given `indexName`.\n */\nvar ReindexButton = /** @class */ (function (_super) {\n    tslib_1.__extends(ReindexButton, _super);\n    function ReindexButton(props) {\n        var _this = _super.call(this, props) || this;\n        _this.startReindex = function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this.state.reindexState.status) {\n                            // if status didn't exist we are starting a reindex action\n                            this.sendUIReindexTelemetryInfo('start');\n                        }\n                        return [4 /*yield*/, this.service.startReindex()];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        }); };\n        _this.cancelReindex = function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        this.sendUIReindexTelemetryInfo('stop');\n                        return [4 /*yield*/, this.service.cancelReindex()];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        }); };\n        _this.showFlyout = function () {\n            _this.sendUIReindexTelemetryInfo('open');\n            _this.setState({ flyoutVisible: true });\n        };\n        _this.closeFlyout = function () {\n            _this.sendUIReindexTelemetryInfo('close');\n            _this.setState({ flyoutVisible: false });\n        };\n        _this.service = _this.newService();\n        _this.state = {\n            flyoutVisible: false,\n            reindexState: _this.service.status$.value,\n        };\n        return _this;\n    }\n    ReindexButton.prototype.componentDidMount = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                this.subscribeToUpdates();\n                return [2 /*return*/];\n            });\n        });\n    };\n    ReindexButton.prototype.componentWillUnmount = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                this.unsubscribeToUpdates();\n                return [2 /*return*/];\n            });\n        });\n    };\n    ReindexButton.prototype.componentDidUpdate = function (prevProps) {\n        if (prevProps.indexName !== this.props.indexName) {\n            this.unsubscribeToUpdates();\n            this.service = this.newService();\n            this.subscribeToUpdates();\n        }\n    };\n    ReindexButton.prototype.render = function () {\n        var indexName = this.props.indexName;\n        var _a = this.state, flyoutVisible = _a.flyoutVisible, reindexState = _a.reindexState;\n        var buttonProps = { size: 's', onClick: this.showFlyout };\n        var buttonContent = (React.createElement(FormattedMessage, { id: \"xpack.upgradeAssistant.checkupTab.reindexing.reindexButton.reindexLabel\", defaultMessage: \"Reindex\" }));\n        if (reindexState.loadingState === LoadingState.Loading) {\n            buttonProps.disabled = true;\n            buttonContent = (React.createElement(FormattedMessage, { id: \"xpack.upgradeAssistant.checkupTab.reindexing.reindexButton.loadingLabel\", defaultMessage: \"Loading\\u2026\" }));\n        }\n        else {\n            switch (reindexState.status) {\n                case ReindexStatus.inProgress:\n                    buttonContent = (React.createElement(\"span\", null,\n                        React.createElement(EuiLoadingSpinner, { className: \"upgReindexButton__spinner\", size: \"m\" }),\n                        \" Reindexing\\u2026\"));\n                    break;\n                case ReindexStatus.completed:\n                    buttonProps.color = 'secondary';\n                    buttonProps.iconSide = 'left';\n                    buttonProps.iconType = 'check';\n                    buttonContent = (React.createElement(FormattedMessage, { id: \"xpack.upgradeAssistant.checkupTab.reindexing.reindexButton.doneLabel\", defaultMessage: \"Done\" }));\n                    break;\n                case ReindexStatus.failed:\n                    buttonProps.color = 'danger';\n                    buttonProps.iconSide = 'left';\n                    buttonProps.iconType = 'cross';\n                    buttonContent = (React.createElement(FormattedMessage, { id: \"xpack.upgradeAssistant.checkupTab.reindexing.reindexButton.failedLabel\", defaultMessage: \"Failed\" }));\n                    break;\n                case ReindexStatus.paused:\n                    buttonProps.color = 'warning';\n                    buttonProps.iconSide = 'left';\n                    buttonProps.iconType = 'pause';\n                    buttonContent = (React.createElement(FormattedMessage, { id: \"xpack.upgradeAssistant.checkupTab.reindexing.reindexButton.pausedLabel\", defaultMessage: \"Paused\" }));\n                case ReindexStatus.cancelled:\n                    buttonProps.color = 'danger';\n                    buttonProps.iconSide = 'left';\n                    buttonProps.iconType = 'cross';\n                    buttonContent = (React.createElement(FormattedMessage, { id: \"xpack.upgradeAssistant.checkupTab.reindexing.reindexButton.cancelledLabel\", defaultMessage: \"Cancelled\" }));\n                    break;\n            }\n        }\n        return (React.createElement(Fragment, null,\n            React.createElement(EuiButton, tslib_1.__assign({}, buttonProps), buttonContent),\n            flyoutVisible && (React.createElement(ReindexFlyout, { indexName: indexName, closeFlyout: this.closeFlyout, reindexState: reindexState, startReindex: this.startReindex, cancelReindex: this.cancelReindex }))));\n    };\n    ReindexButton.prototype.newService = function () {\n        return new ReindexPollingService(this.props.indexName);\n    };\n    ReindexButton.prototype.subscribeToUpdates = function () {\n        var _this = this;\n        this.service.updateStatus();\n        this.subscription = this.service.status$.subscribe(function (reindexState) {\n            return _this.setState({ reindexState: reindexState });\n        });\n    };\n    ReindexButton.prototype.unsubscribeToUpdates = function () {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n            delete this.subscription;\n        }\n        if (this.service) {\n            this.service.stopPolling();\n        }\n    };\n    ReindexButton.prototype.sendUIReindexTelemetryInfo = function (uiReindexAction) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, kfetch({\n                            pathname: '/api/upgrade_assistant/telemetry/ui_reindex',\n                            method: 'PUT',\n                            body: JSON.stringify(set({}, uiReindexAction, true)),\n                        })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    return ReindexButton;\n}(React.Component));\nexport { ReindexButton };\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/upgrade_assistant/public/components/tabs/checkup/deprecations/reindex/button.tsx","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/upgrade_assistant/public/components/tabs/checkup/deprecations/reindex/button.tsx"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport { set } from 'lodash';\nimport React, { Fragment, ReactNode } from 'react';\nimport { Subscription } from 'rxjs';\n\nimport { EuiButton, EuiLoadingSpinner } from '@elastic/eui';\nimport { FormattedMessage } from '@kbn/i18n/react';\nimport { kfetch } from 'ui/kfetch';\nimport { ReindexStatus, UIReindexOption } from '../../../../../../common/types';\nimport { LoadingState } from '../../../../types';\nimport { ReindexFlyout } from './flyout';\nimport { ReindexPollingService, ReindexState } from './polling_service';\n\ninterface ReindexButtonProps {\n  indexName: string;\n}\n\ninterface ReindexButtonState {\n  flyoutVisible: boolean;\n  reindexState: ReindexState;\n}\n\n/**\n * Displays a button that will display a flyout when clicked with the reindexing status for\n * the given `indexName`.\n */\nexport class ReindexButton extends React.Component<ReindexButtonProps, ReindexButtonState> {\n  private service: ReindexPollingService;\n  private subscription?: Subscription;\n\n  constructor(props: ReindexButtonProps) {\n    super(props);\n\n    this.service = this.newService();\n    this.state = {\n      flyoutVisible: false,\n      reindexState: this.service.status$.value,\n    };\n  }\n\n  public async componentDidMount() {\n    this.subscribeToUpdates();\n  }\n\n  public async componentWillUnmount() {\n    this.unsubscribeToUpdates();\n  }\n\n  public componentDidUpdate(prevProps: ReindexButtonProps) {\n    if (prevProps.indexName !== this.props.indexName) {\n      this.unsubscribeToUpdates();\n      this.service = this.newService();\n      this.subscribeToUpdates();\n    }\n  }\n\n  public render() {\n    const { indexName } = this.props;\n    const { flyoutVisible, reindexState } = this.state;\n\n    const buttonProps: any = { size: 's', onClick: this.showFlyout };\n    let buttonContent: ReactNode = (\n      <FormattedMessage\n        id=\"xpack.upgradeAssistant.checkupTab.reindexing.reindexButton.reindexLabel\"\n        defaultMessage=\"Reindex\"\n      />\n    );\n\n    if (reindexState.loadingState === LoadingState.Loading) {\n      buttonProps.disabled = true;\n      buttonContent = (\n        <FormattedMessage\n          id=\"xpack.upgradeAssistant.checkupTab.reindexing.reindexButton.loadingLabel\"\n          defaultMessage=\"Loading…\"\n        />\n      );\n    } else {\n      switch (reindexState.status) {\n        case ReindexStatus.inProgress:\n          buttonContent = (\n            <span>\n              <EuiLoadingSpinner className=\"upgReindexButton__spinner\" size=\"m\" /> Reindexing…\n            </span>\n          );\n          break;\n        case ReindexStatus.completed:\n          buttonProps.color = 'secondary';\n          buttonProps.iconSide = 'left';\n          buttonProps.iconType = 'check';\n          buttonContent = (\n            <FormattedMessage\n              id=\"xpack.upgradeAssistant.checkupTab.reindexing.reindexButton.doneLabel\"\n              defaultMessage=\"Done\"\n            />\n          );\n          break;\n        case ReindexStatus.failed:\n          buttonProps.color = 'danger';\n          buttonProps.iconSide = 'left';\n          buttonProps.iconType = 'cross';\n          buttonContent = (\n            <FormattedMessage\n              id=\"xpack.upgradeAssistant.checkupTab.reindexing.reindexButton.failedLabel\"\n              defaultMessage=\"Failed\"\n            />\n          );\n          break;\n        case ReindexStatus.paused:\n          buttonProps.color = 'warning';\n          buttonProps.iconSide = 'left';\n          buttonProps.iconType = 'pause';\n          buttonContent = (\n            <FormattedMessage\n              id=\"xpack.upgradeAssistant.checkupTab.reindexing.reindexButton.pausedLabel\"\n              defaultMessage=\"Paused\"\n            />\n          );\n        case ReindexStatus.cancelled:\n          buttonProps.color = 'danger';\n          buttonProps.iconSide = 'left';\n          buttonProps.iconType = 'cross';\n          buttonContent = (\n            <FormattedMessage\n              id=\"xpack.upgradeAssistant.checkupTab.reindexing.reindexButton.cancelledLabel\"\n              defaultMessage=\"Cancelled\"\n            />\n          );\n          break;\n      }\n    }\n\n    return (\n      <Fragment>\n        <EuiButton {...buttonProps}>{buttonContent}</EuiButton>\n\n        {flyoutVisible && (\n          <ReindexFlyout\n            indexName={indexName}\n            closeFlyout={this.closeFlyout}\n            reindexState={reindexState}\n            startReindex={this.startReindex}\n            cancelReindex={this.cancelReindex}\n          />\n        )}\n      </Fragment>\n    );\n  }\n\n  private newService() {\n    return new ReindexPollingService(this.props.indexName);\n  }\n\n  private subscribeToUpdates() {\n    this.service.updateStatus();\n    this.subscription = this.service!.status$.subscribe(reindexState =>\n      this.setState({ reindexState })\n    );\n  }\n\n  private unsubscribeToUpdates() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n      delete this.subscription;\n    }\n\n    if (this.service) {\n      this.service.stopPolling();\n    }\n  }\n\n  private startReindex = async () => {\n    if (!this.state.reindexState.status) {\n      // if status didn't exist we are starting a reindex action\n      this.sendUIReindexTelemetryInfo('start');\n    }\n\n    await this.service.startReindex();\n  };\n\n  private cancelReindex = async () => {\n    this.sendUIReindexTelemetryInfo('stop');\n    await this.service.cancelReindex();\n  };\n\n  private showFlyout = () => {\n    this.sendUIReindexTelemetryInfo('open');\n    this.setState({ flyoutVisible: true });\n  };\n\n  private closeFlyout = () => {\n    this.sendUIReindexTelemetryInfo('close');\n    this.setState({ flyoutVisible: false });\n  };\n\n  private async sendUIReindexTelemetryInfo(uiReindexAction: UIReindexOption) {\n    await kfetch({\n      pathname: '/api/upgrade_assistant/telemetry/ui_reindex',\n      method: 'PUT',\n      body: JSON.stringify(set({}, uiReindexAction, true)),\n    });\n  }\n}\n"]}]}