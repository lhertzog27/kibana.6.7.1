{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/beats_management/public/lib/adapters/framework/adapter_types.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/beats_management/public/lib/adapters/framework/adapter_types.ts","mtime":1567631711882},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport * as t from 'io-ts';\nimport { LICENSES } from './../../../../common/constants/security';\nexport var RuntimeFrameworkInfo = t.type({\n    basePath: t.string,\n    license: t.type({\n        type: t.union(LICENSES.map(function (s) { return t.literal(s); })),\n        expired: t.boolean,\n        expiry_date_in_millis: t.number,\n    }),\n    security: t.type({\n        enabled: t.boolean,\n        available: t.boolean,\n    }),\n    settings: t.type({\n        encryptionKey: t.string,\n        enrollmentTokensTtlInSeconds: t.number,\n        defaultUserRoles: t.array(t.string),\n    }),\n});\nexport var RuntimeFrameworkUser = t.interface({\n    username: t.string,\n    roles: t.array(t.string),\n    full_name: t.union([t.null, t.string]),\n    email: t.union([t.null, t.string]),\n    enabled: t.boolean,\n}, 'FrameworkUser');\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/beats_management/public/lib/adapters/framework/adapter_types.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/beats_management/public/lib/adapters/framework/adapter_types.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AACH,OAAO,KAAK,CAAC,MAAM,OAAO,CAAC;AAC3B,OAAO,EAAE,QAAQ,EAAE,MAAM,yCAAyC,CAAC;AA+BnE,MAAM,CAAC,IAAM,oBAAoB,GAAG,CAAC,CAAC,IAAI,CAAC;IACzC,QAAQ,EAAE,CAAC,CAAC,MAAM;IAClB,OAAO,EAAE,CAAC,CAAC,IAAI,CAAC;QACd,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAZ,CAAY,CAAC,CAAC;QAC9C,OAAO,EAAE,CAAC,CAAC,OAAO;QAClB,qBAAqB,EAAE,CAAC,CAAC,MAAM;KAChC,CAAC;IACF,QAAQ,EAAE,CAAC,CAAC,IAAI,CAAC;QACf,OAAO,EAAE,CAAC,CAAC,OAAO;QAClB,SAAS,EAAE,CAAC,CAAC,OAAO;KACrB,CAAC;IACF,QAAQ,EAAE,CAAC,CAAC,IAAI,CAAC;QACf,aAAa,EAAE,CAAC,CAAC,MAAM;QACvB,4BAA4B,EAAE,CAAC,CAAC,MAAM;QACtC,gBAAgB,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC;KACpC,CAAC;CACH,CAAC,CAAC;AAqBH,MAAM,CAAC,IAAM,oBAAoB,GAAG,CAAC,CAAC,SAAS,CAC7C;IACE,QAAQ,EAAE,CAAC,CAAC,MAAM;IAClB,KAAK,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC;IACxB,SAAS,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC;IACtC,KAAK,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC;IAClC,OAAO,EAAE,CAAC,CAAC,OAAO;CACnB,EACD,eAAe,CAChB,CAAC","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport * as t from 'io-ts';\nimport { LICENSES } from './../../../../common/constants/security';\n\nexport interface FrameworkAdapter {\n  // Instance vars\n  info: FrameworkInfo;\n  version: string;\n  currentUser: FrameworkUser;\n  // Methods\n  waitUntilFrameworkReady(): Promise<void>;\n  renderUIAtPath(\n    path: string,\n    component: React.ReactElement<any>,\n    toController: 'management' | 'self'\n  ): void;\n  registerManagementSection(settings: {\n    id?: string;\n    name: string;\n    iconName: string;\n    order?: number;\n  }): void;\n  registerManagementUI(settings: {\n    sectionId?: string;\n    name: string;\n    basePath: string;\n    visable?: boolean;\n    order?: number;\n  }): void;\n  setUISettings(key: string, value: any): void;\n  getUISetting(key: string): boolean;\n}\n\nexport const RuntimeFrameworkInfo = t.type({\n  basePath: t.string,\n  license: t.type({\n    type: t.union(LICENSES.map(s => t.literal(s))),\n    expired: t.boolean,\n    expiry_date_in_millis: t.number,\n  }),\n  security: t.type({\n    enabled: t.boolean,\n    available: t.boolean,\n  }),\n  settings: t.type({\n    encryptionKey: t.string,\n    enrollmentTokensTtlInSeconds: t.number,\n    defaultUserRoles: t.array(t.string),\n  }),\n});\n\nexport interface FrameworkInfo extends t.TypeOf<typeof RuntimeFrameworkInfo> {}\n\ninterface ManagementSection {\n  register(\n    sectionId: string,\n    options: {\n      visible: boolean;\n      display: string;\n      order: number;\n      url: string;\n    }\n  ): void;\n}\nexport interface ManagementAPI {\n  getSection(sectionId: string): ManagementSection;\n  hasItem(sectionId: string): boolean;\n  register(sectionId: string, options: { display: string; icon: string; order: number }): void;\n}\n\nexport const RuntimeFrameworkUser = t.interface(\n  {\n    username: t.string,\n    roles: t.array(t.string),\n    full_name: t.union([t.null, t.string]),\n    email: t.union([t.null, t.string]),\n    enabled: t.boolean,\n  },\n  'FrameworkUser'\n);\nexport interface FrameworkUser extends t.TypeOf<typeof RuntimeFrameworkUser> {}\n"]}]}