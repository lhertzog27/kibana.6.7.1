{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/spaces/public/views/management/spaces_grid/spaces_grid_page.tsx","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/spaces/public/views/management/spaces_grid/spaces_grid_page.tsx","mtime":1567631712312},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport * as tslib_1 from \"tslib\";\nimport React, { Component, Fragment } from 'react';\nimport { EuiButton, EuiButtonIcon, EuiFlexGroup, EuiFlexItem, \n// @ts-ignore\nEuiInMemoryTable, EuiLink, EuiPageContent, EuiSpacer, EuiText, EuiTitle, } from '@elastic/eui';\nimport { FormattedMessage, injectI18n } from '@kbn/i18n/react';\n// @ts-ignore\nimport { toastNotifications } from 'ui/notify';\nimport { isReservedSpace } from '../../../../common';\nimport { SpaceAvatar } from '../../../components';\nimport { getSpacesFeatureDescription } from '../../../lib/constants';\nimport { ConfirmDeleteModal } from '../components/confirm_delete_modal';\nimport { SecureSpaceMessage } from '../components/secure_space_message';\nimport { UnauthorizedPrompt } from '../components/unauthorized_prompt';\nvar SpacesGridPageUI = /** @class */ (function (_super) {\n    tslib_1.__extends(SpacesGridPageUI, _super);\n    function SpacesGridPageUI(props) {\n        var _this = _super.call(this, props) || this;\n        _this.getConfirmDeleteModal = function () {\n            if (!_this.state.showConfirmDeleteModal || !_this.state.selectedSpace) {\n                return null;\n            }\n            var _a = _this.props, spacesNavState = _a.spacesNavState, spacesManager = _a.spacesManager;\n            return (React.createElement(ConfirmDeleteModal, { space: _this.state.selectedSpace, spacesNavState: spacesNavState, spacesManager: spacesManager, onCancel: function () {\n                    _this.setState({\n                        showConfirmDeleteModal: false,\n                    });\n                }, onConfirm: _this.deleteSpace }));\n        };\n        _this.deleteSpace = function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n            var intl, _a, spacesManager, spacesNavState, space, error_1, _b, errorMessage, message;\n            return tslib_1.__generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        intl = this.props.intl;\n                        _a = this.props, spacesManager = _a.spacesManager, spacesNavState = _a.spacesNavState;\n                        space = this.state.selectedSpace;\n                        if (!space) {\n                            return [2 /*return*/];\n                        }\n                        _c.label = 1;\n                    case 1:\n                        _c.trys.push([1, 3, , 4]);\n                        return [4 /*yield*/, spacesManager.deleteSpace(space)];\n                    case 2:\n                        _c.sent();\n                        return [3 /*break*/, 4];\n                    case 3:\n                        error_1 = _c.sent();\n                        _b = (error_1.data || {}).message, errorMessage = _b === void 0 ? '' : _b;\n                        toastNotifications.addDanger(intl.formatMessage({\n                            id: 'xpack.spaces.management.spacesGridPage.errorDeletingSpaceErrorMessage',\n                            defaultMessage: 'Error deleting space: {errorMessage}',\n                        }, {\n                            errorMessage: errorMessage,\n                        }));\n                        return [3 /*break*/, 4];\n                    case 4:\n                        this.setState({\n                            showConfirmDeleteModal: false,\n                        });\n                        this.loadGrid();\n                        message = intl.formatMessage({\n                            id: 'xpack.spaces.management.spacesGridPage.spaceSuccessfullyDeletedNotificationMessage',\n                            defaultMessage: 'Deleted \"{spaceName}\" space.',\n                        }, {\n                            spaceName: space.name,\n                        });\n                        toastNotifications.addSuccess(message);\n                        spacesNavState.refreshSpacesList();\n                        return [2 /*return*/];\n                }\n            });\n        }); };\n        _this.loadGrid = function () {\n            var spacesManager = _this.props.spacesManager;\n            _this.setState({\n                loading: true,\n                spaces: [],\n            });\n            var setSpaces = function (spaces) {\n                _this.setState({\n                    loading: false,\n                    spaces: spaces,\n                });\n            };\n            spacesManager\n                .getSpaces()\n                .then(function (spaces) {\n                setSpaces(spaces);\n            })\n                .catch(function (error) {\n                _this.setState({\n                    loading: false,\n                    error: error,\n                });\n            });\n        };\n        _this.onEditSpaceClick = function (space) {\n            window.location.hash = \"#/management/spaces/edit/\" + encodeURIComponent(space.id);\n        };\n        _this.onDeleteSpaceClick = function (space) {\n            _this.setState({\n                selectedSpace: space,\n                showConfirmDeleteModal: true,\n            });\n        };\n        _this.state = {\n            spaces: [],\n            loading: true,\n            showConfirmDeleteModal: false,\n            selectedSpace: null,\n            error: null,\n        };\n        return _this;\n    }\n    SpacesGridPageUI.prototype.componentDidMount = function () {\n        this.loadGrid();\n    };\n    SpacesGridPageUI.prototype.render = function () {\n        return (React.createElement(\"div\", { className: \"spcGridPage\" },\n            React.createElement(EuiPageContent, { horizontalPosition: \"center\" }, this.getPageContent()),\n            React.createElement(SecureSpaceMessage, { userProfile: this.props.userProfile }),\n            this.getConfirmDeleteModal()));\n    };\n    SpacesGridPageUI.prototype.getPageContent = function () {\n        var intl = this.props.intl;\n        if (!this.props.userProfile.hasCapability('manageSpaces')) {\n            return React.createElement(UnauthorizedPrompt, null);\n        }\n        return (React.createElement(Fragment, null,\n            React.createElement(EuiFlexGroup, { justifyContent: 'spaceBetween' },\n                React.createElement(EuiFlexItem, { grow: false },\n                    React.createElement(EuiTitle, { size: \"m\" },\n                        React.createElement(\"h1\", null,\n                            React.createElement(FormattedMessage, { id: \"xpack.spaces.management.spacesGridPage.spacesTitle\", defaultMessage: \"Spaces\" }))),\n                    React.createElement(EuiText, { color: \"subdued\" },\n                        React.createElement(\"p\", null, getSpacesFeatureDescription()))),\n                React.createElement(EuiFlexItem, { grow: false }, this.getPrimaryActionButton())),\n            React.createElement(EuiSpacer, { size: \"l\" }),\n            React.createElement(EuiInMemoryTable, { itemId: 'id', items: this.state.spaces, columns: this.getColumnConfig(), hasActions: true, pagination: true, search: {\n                    box: {\n                        placeholder: intl.formatMessage({\n                            id: 'xpack.spaces.management.spacesGridPage.searchPlaceholder',\n                            defaultMessage: 'Search',\n                        }),\n                    },\n                }, loading: this.state.loading, message: this.state.loading ? (React.createElement(FormattedMessage, { id: \"xpack.spaces.management.spacesGridPage.loadingTitle\", defaultMessage: \"loading\\u2026\" })) : (undefined) })));\n    };\n    SpacesGridPageUI.prototype.getPrimaryActionButton = function () {\n        return (React.createElement(EuiButton, { fill: true, onClick: function () {\n                window.location.hash = \"#/management/spaces/create\";\n            } },\n            React.createElement(FormattedMessage, { id: \"xpack.spaces.management.spacesGridPage.createSpaceButtonLabel\", defaultMessage: \"Create a space\" })));\n    };\n    SpacesGridPageUI.prototype.getColumnConfig = function () {\n        var _this = this;\n        var intl = this.props.intl;\n        return [\n            {\n                field: 'name',\n                name: '',\n                width: '50px',\n                sortable: true,\n                render: function (value, record) {\n                    return (React.createElement(EuiLink, { onClick: function () {\n                            _this.onEditSpaceClick(record);\n                        } },\n                        React.createElement(SpaceAvatar, { space: record, size: \"s\" })));\n                },\n            },\n            {\n                field: 'name',\n                name: intl.formatMessage({\n                    id: 'xpack.spaces.management.spacesGridPage.spaceColumnName',\n                    defaultMessage: 'Space',\n                }),\n                sortable: true,\n                render: function (value, record) {\n                    return (React.createElement(EuiLink, { onClick: function () {\n                            _this.onEditSpaceClick(record);\n                        } }, value));\n                },\n            },\n            {\n                field: 'id',\n                name: intl.formatMessage({\n                    id: 'xpack.spaces.management.spacesGridPage.identifierColumnName',\n                    defaultMessage: 'Identifier',\n                }),\n                sortable: true,\n            },\n            {\n                field: 'description',\n                name: intl.formatMessage({\n                    id: 'xpack.spaces.management.spacesGridPage.descriptionColumnName',\n                    defaultMessage: 'Description',\n                }),\n                sortable: true,\n            },\n            {\n                name: intl.formatMessage({\n                    id: 'xpack.spaces.management.spacesGridPage.actionsColumnName',\n                    defaultMessage: 'Actions',\n                }),\n                actions: [\n                    {\n                        render: function (record) {\n                            return (React.createElement(EuiButtonIcon, { \"aria-label\": intl.formatMessage({\n                                    id: 'xpack.spaces.management.spacesGridPage.editSpaceActionName',\n                                    defaultMessage: \"Edit {spaceName}.\",\n                                }, {\n                                    spaceName: record.name,\n                                }), color: 'primary', iconType: 'pencil', onClick: function () { return _this.onEditSpaceClick(record); } }));\n                        },\n                    },\n                    {\n                        available: function (record) { return !isReservedSpace(record); },\n                        render: function (record) {\n                            return (React.createElement(EuiButtonIcon, { \"aria-label\": intl.formatMessage({\n                                    id: 'xpack.spaces.management.spacesGridPage.deleteActionName',\n                                    defaultMessage: \"Delete {spaceName}.\",\n                                }, {\n                                    spaceName: record.name,\n                                }), color: 'danger', iconType: 'trash', onClick: function () { return _this.onDeleteSpaceClick(record); } }));\n                        },\n                    },\n                ],\n            },\n        ];\n    };\n    return SpacesGridPageUI;\n}(Component));\nexport var SpacesGridPage = injectI18n(SpacesGridPageUI);\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/spaces/public/views/management/spaces_grid/spaces_grid_page.tsx","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/spaces/public/views/management/spaces_grid/spaces_grid_page.tsx"],"names":[],"mappings":"AAAA;;;;GAIG;;AAEH,OAAO,KAAK,EAAE,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AAEnD,OAAO,EACL,SAAS,EACT,aAAa,EACb,YAAY,EACZ,WAAW;AACX,aAAa;AACb,gBAAgB,EAChB,OAAO,EACP,cAAc,EACd,SAAS,EACT,OAAO,EACP,QAAQ,GACT,MAAM,cAAc,CAAC;AACtB,OAAO,EAAE,gBAAgB,EAAgB,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAC7E,aAAa;AACb,OAAO,EAAE,kBAAkB,EAAE,MAAM,WAAW,CAAC;AAI/C,OAAO,EAAE,eAAe,EAAE,MAAM,oBAAoB,CAAC;AAErD,OAAO,EAAE,WAAW,EAAE,MAAM,qBAAqB,CAAC;AAClD,OAAO,EAAE,2BAA2B,EAAE,MAAM,wBAAwB,CAAC;AAErE,OAAO,EAAE,kBAAkB,EAAE,MAAM,oCAAoC,CAAC;AACxE,OAAO,EAAE,kBAAkB,EAAE,MAAM,oCAAoC,CAAC;AACxE,OAAO,EAAE,kBAAkB,EAAE,MAAM,mCAAmC,CAAC;AAiBvE;IAA+B,4CAAuB;IACpD,0BAAY,KAAY;QAAxB,YACE,kBAAM,KAAK,CAAC,SAQb;QAwFM,2BAAqB,GAAG;YAC7B,IAAI,CAAC,KAAI,CAAC,KAAK,CAAC,sBAAsB,IAAI,CAAC,KAAI,CAAC,KAAK,CAAC,aAAa,EAAE;gBACnE,OAAO,IAAI,CAAC;aACb;YAEK,IAAA,gBAA8C,EAA5C,kCAAc,EAAE,gCAAa,CAAgB;YAErD,OAAO,CACL,oBAAC,kBAAkB,IACjB,KAAK,EAAE,KAAI,CAAC,KAAK,CAAC,aAAa,EAC/B,cAAc,EAAE,cAAc,EAC9B,aAAa,EAAE,aAAa,EAC5B,QAAQ,EAAE;oBACR,KAAI,CAAC,QAAQ,CAAC;wBACZ,sBAAsB,EAAE,KAAK;qBAC9B,CAAC,CAAC;gBACL,CAAC,EACD,SAAS,EAAE,KAAI,CAAC,WAAW,GAC3B,CACH,CAAC;QACJ,CAAC,CAAC;QAEK,iBAAW,GAAG;;;;;wBACX,IAAI,GAAK,IAAI,CAAC,KAAK,KAAf,CAAgB;wBACtB,KAAoC,IAAI,CAAC,KAAK,EAA5C,aAAa,mBAAA,EAAE,cAAc,oBAAA,CAAgB;wBAE/C,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC;wBAEvC,IAAI,CAAC,KAAK,EAAE;4BACV,sBAAO;yBACR;;;;wBAGC,qBAAM,aAAa,CAAC,WAAW,CAAC,KAAK,CAAC,EAAA;;wBAAtC,SAAsC,CAAC;;;;wBAE/B,KAA+B,CAAA,OAAK,CAAC,IAAI,IAAI,EAAE,CAAA,QAArB,EAAjB,YAAY,mBAAG,EAAE,KAAA,CAAsB;wBAExD,kBAAkB,CAAC,SAAS,CAC1B,IAAI,CAAC,aAAa,CAChB;4BACE,EAAE,EAAE,uEAAuE;4BAC3E,cAAc,EAAE,sCAAsC;yBACvD,EACD;4BACE,YAAY,cAAA;yBACb,CACF,CACF,CAAC;;;wBAGJ,IAAI,CAAC,QAAQ,CAAC;4BACZ,sBAAsB,EAAE,KAAK;yBAC9B,CAAC,CAAC;wBAEH,IAAI,CAAC,QAAQ,EAAE,CAAC;wBAEV,OAAO,GAAG,IAAI,CAAC,aAAa,CAChC;4BACE,EAAE,EAAE,oFAAoF;4BACxF,cAAc,EAAE,8BAA8B;yBAC/C,EACD;4BACE,SAAS,EAAE,KAAK,CAAC,IAAI;yBACtB,CACF,CAAC;wBAEF,kBAAkB,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;wBAEvC,cAAc,CAAC,iBAAiB,EAAE,CAAC;;;;aACpC,CAAC;QAEK,cAAQ,GAAG;YACR,IAAA,yCAAa,CAAgB;YAErC,KAAI,CAAC,QAAQ,CAAC;gBACZ,OAAO,EAAE,IAAI;gBACb,MAAM,EAAE,EAAE;aACX,CAAC,CAAC;YAEH,IAAM,SAAS,GAAG,UAAC,MAAe;gBAChC,KAAI,CAAC,QAAQ,CAAC;oBACZ,OAAO,EAAE,KAAK;oBACd,MAAM,QAAA;iBACP,CAAC,CAAC;YACL,CAAC,CAAC;YAEF,aAAa;iBACV,SAAS,EAAE;iBACX,IAAI,CAAC,UAAA,MAAM;gBACV,SAAS,CAAC,MAAM,CAAC,CAAC;YACpB,CAAC,CAAC;iBACD,KAAK,CAAC,UAAA,KAAK;gBACV,KAAI,CAAC,QAAQ,CAAC;oBACZ,OAAO,EAAE,KAAK;oBACd,KAAK,OAAA;iBACN,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;QACP,CAAC,CAAC;QA6GM,sBAAgB,GAAG,UAAC,KAAY;YACtC,MAAM,CAAC,QAAQ,CAAC,IAAI,GAAG,8BAA4B,kBAAkB,CAAC,KAAK,CAAC,EAAE,CAAG,CAAC;QACpF,CAAC,CAAC;QAEM,wBAAkB,GAAG,UAAC,KAAY;YACxC,KAAI,CAAC,QAAQ,CAAC;gBACZ,aAAa,EAAE,KAAK;gBACpB,sBAAsB,EAAE,IAAI;aAC7B,CAAC,CAAC;QACL,CAAC,CAAC;QAtTA,KAAI,CAAC,KAAK,GAAG;YACX,MAAM,EAAE,EAAE;YACV,OAAO,EAAE,IAAI;YACb,sBAAsB,EAAE,KAAK;YAC7B,aAAa,EAAE,IAAI;YACnB,KAAK,EAAE,IAAI;SACZ,CAAC;;IACJ,CAAC;IAEM,4CAAiB,GAAxB;QACE,IAAI,CAAC,QAAQ,EAAE,CAAC;IAClB,CAAC;IAEM,iCAAM,GAAb;QACE,OAAO,CACL,6BAAK,SAAS,EAAC,aAAa;YAC1B,oBAAC,cAAc,IAAC,kBAAkB,EAAC,QAAQ,IAAE,IAAI,CAAC,cAAc,EAAE,CAAkB;YACpF,oBAAC,kBAAkB,IAAC,WAAW,EAAE,IAAI,CAAC,KAAK,CAAC,WAAW,GAAI;YAC1D,IAAI,CAAC,qBAAqB,EAAE,CACzB,CACP,CAAC;IACJ,CAAC;IAEM,yCAAc,GAArB;QACU,IAAA,sBAAI,CAAgB;QAC5B,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,aAAa,CAAC,cAAc,CAAC,EAAE;YACzD,OAAO,oBAAC,kBAAkB,OAAG,CAAC;SAC/B;QAED,OAAO,CACL,oBAAC,QAAQ;YACP,oBAAC,YAAY,IAAC,cAAc,EAAE,cAAc;gBAC1C,oBAAC,WAAW,IAAC,IAAI,EAAE,KAAK;oBACtB,oBAAC,QAAQ,IAAC,IAAI,EAAC,GAAG;wBAChB;4BACE,oBAAC,gBAAgB,IACf,EAAE,EAAC,oDAAoD,EACvD,cAAc,EAAC,QAAQ,GACvB,CACC,CACI;oBACX,oBAAC,OAAO,IAAC,KAAK,EAAC,SAAS;wBACtB,+BAAI,2BAA2B,EAAE,CAAK,CAC9B,CACE;gBACd,oBAAC,WAAW,IAAC,IAAI,EAAE,KAAK,IAAG,IAAI,CAAC,sBAAsB,EAAE,CAAe,CAC1D;YACf,oBAAC,SAAS,IAAC,IAAI,EAAC,GAAG,GAAG;YAEtB,oBAAC,gBAAgB,IACf,MAAM,EAAE,IAAI,EACZ,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,EACxB,OAAO,EAAE,IAAI,CAAC,eAAe,EAAE,EAC/B,UAAU,QACV,UAAU,EAAE,IAAI,EAChB,MAAM,EAAE;oBACN,GAAG,EAAE;wBACH,WAAW,EAAE,IAAI,CAAC,aAAa,CAAC;4BAC9B,EAAE,EAAE,0DAA0D;4BAC9D,cAAc,EAAE,QAAQ;yBACzB,CAAC;qBACH;iBACF,EACD,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,OAAO,EAC3B,OAAO,EACL,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CACnB,oBAAC,gBAAgB,IACf,EAAE,EAAC,qDAAqD,EACxD,cAAc,EAAC,eAAU,GACzB,CACH,CAAC,CAAC,CAAC,CACF,SAAS,CACV,GAEH,CACO,CACZ,CAAC;IACJ,CAAC;IAEM,iDAAsB,GAA7B;QACE,OAAO,CACL,oBAAC,SAAS,IACR,IAAI,QACJ,OAAO,EAAE;gBACP,MAAM,CAAC,QAAQ,CAAC,IAAI,GAAG,4BAA4B,CAAC;YACtD,CAAC;YAED,oBAAC,gBAAgB,IACf,EAAE,EAAC,+DAA+D,EAClE,cAAc,EAAC,gBAAgB,GAC/B,CACQ,CACb,CAAC;IACJ,CAAC;IAqGM,0CAAe,GAAtB;QAAA,iBAyGC;QAxGS,IAAA,sBAAI,CAAgB;QAC5B,OAAO;YACL;gBACE,KAAK,EAAE,MAAM;gBACb,IAAI,EAAE,EAAE;gBACR,KAAK,EAAE,MAAM;gBACb,QAAQ,EAAE,IAAI;gBACd,MAAM,EAAE,UAAC,KAAa,EAAE,MAAa;oBACnC,OAAO,CACL,oBAAC,OAAO,IACN,OAAO,EAAE;4BACP,KAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;wBAChC,CAAC;wBAED,oBAAC,WAAW,IAAC,KAAK,EAAE,MAAM,EAAE,IAAI,EAAC,GAAG,GAAG,CAC/B,CACX,CAAC;gBACJ,CAAC;aACF;YACD;gBACE,KAAK,EAAE,MAAM;gBACb,IAAI,EAAE,IAAI,CAAC,aAAa,CAAC;oBACvB,EAAE,EAAE,wDAAwD;oBAC5D,cAAc,EAAE,OAAO;iBACxB,CAAC;gBACF,QAAQ,EAAE,IAAI;gBACd,MAAM,EAAE,UAAC,KAAa,EAAE,MAAa;oBACnC,OAAO,CACL,oBAAC,OAAO,IACN,OAAO,EAAE;4BACP,KAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;wBAChC,CAAC,IAEA,KAAK,CACE,CACX,CAAC;gBACJ,CAAC;aACF;YACD;gBACE,KAAK,EAAE,IAAI;gBACX,IAAI,EAAE,IAAI,CAAC,aAAa,CAAC;oBACvB,EAAE,EAAE,6DAA6D;oBACjE,cAAc,EAAE,YAAY;iBAC7B,CAAC;gBACF,QAAQ,EAAE,IAAI;aACf;YACD;gBACE,KAAK,EAAE,aAAa;gBACpB,IAAI,EAAE,IAAI,CAAC,aAAa,CAAC;oBACvB,EAAE,EAAE,8DAA8D;oBAClE,cAAc,EAAE,aAAa;iBAC9B,CAAC;gBACF,QAAQ,EAAE,IAAI;aACf;YACD;gBACE,IAAI,EAAE,IAAI,CAAC,aAAa,CAAC;oBACvB,EAAE,EAAE,0DAA0D;oBAC9D,cAAc,EAAE,SAAS;iBAC1B,CAAC;gBACF,OAAO,EAAE;oBACP;wBACE,MAAM,EAAE,UAAC,MAAa;4BACpB,OAAO,CACL,oBAAC,aAAa,kBACA,IAAI,CAAC,aAAa,CAC5B;oCACE,EAAE,EAAE,4DAA4D;oCAChE,cAAc,EAAE,mBAAmB;iCACpC,EACD;oCACE,SAAS,EAAE,MAAM,CAAC,IAAI;iCACvB,CACF,EACD,KAAK,EAAE,SAAS,EAChB,QAAQ,EAAE,QAAQ,EAClB,OAAO,EAAE,cAAM,OAAA,KAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,EAA7B,CAA6B,GAC5C,CACH,CAAC;wBACJ,CAAC;qBACF;oBACD;wBACE,SAAS,EAAE,UAAC,MAAa,IAAK,OAAA,CAAC,eAAe,CAAC,MAAM,CAAC,EAAxB,CAAwB;wBACtD,MAAM,EAAE,UAAC,MAAa;4BACpB,OAAO,CACL,oBAAC,aAAa,kBACA,IAAI,CAAC,aAAa,CAC5B;oCACE,EAAE,EAAE,yDAAyD;oCAC7D,cAAc,EAAE,qBAAqB;iCACtC,EACD;oCACE,SAAS,EAAE,MAAM,CAAC,IAAI;iCACvB,CACF,EACD,KAAK,EAAE,QAAQ,EACf,QAAQ,EAAE,OAAO,EACjB,OAAO,EAAE,cAAM,OAAA,KAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,EAA/B,CAA+B,GAC9C,CACH,CAAC;wBACJ,CAAC;qBACF;iBACF;aACF;SACF,CAAC;IACJ,CAAC;IAYH,uBAAC;AAAD,CAAC,AA1TD,CAA+B,SAAS,GA0TvC;AAED,MAAM,CAAC,IAAM,cAAc,GAAG,UAAU,CAAC,gBAAgB,CAAC,CAAC","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport React, { Component, Fragment } from 'react';\n\nimport {\n  EuiButton,\n  EuiButtonIcon,\n  EuiFlexGroup,\n  EuiFlexItem,\n  // @ts-ignore\n  EuiInMemoryTable,\n  EuiLink,\n  EuiPageContent,\n  EuiSpacer,\n  EuiText,\n  EuiTitle,\n} from '@elastic/eui';\nimport { FormattedMessage, InjectedIntl, injectI18n } from '@kbn/i18n/react';\n// @ts-ignore\nimport { toastNotifications } from 'ui/notify';\n\nimport { SpacesNavState } from 'plugins/spaces/views/nav_control';\nimport { UserProfile } from '../../../../../xpack_main/public/services/user_profile';\nimport { isReservedSpace } from '../../../../common';\nimport { Space } from '../../../../common/model/space';\nimport { SpaceAvatar } from '../../../components';\nimport { getSpacesFeatureDescription } from '../../../lib/constants';\nimport { SpacesManager } from '../../../lib/spaces_manager';\nimport { ConfirmDeleteModal } from '../components/confirm_delete_modal';\nimport { SecureSpaceMessage } from '../components/secure_space_message';\nimport { UnauthorizedPrompt } from '../components/unauthorized_prompt';\n\ninterface Props {\n  spacesManager: SpacesManager;\n  spacesNavState: SpacesNavState;\n  userProfile: UserProfile;\n  intl: InjectedIntl;\n}\n\ninterface State {\n  spaces: Space[];\n  loading: boolean;\n  showConfirmDeleteModal: boolean;\n  selectedSpace: Space | null;\n  error: Error | null;\n}\n\nclass SpacesGridPageUI extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      spaces: [],\n      loading: true,\n      showConfirmDeleteModal: false,\n      selectedSpace: null,\n      error: null,\n    };\n  }\n\n  public componentDidMount() {\n    this.loadGrid();\n  }\n\n  public render() {\n    return (\n      <div className=\"spcGridPage\">\n        <EuiPageContent horizontalPosition=\"center\">{this.getPageContent()}</EuiPageContent>\n        <SecureSpaceMessage userProfile={this.props.userProfile} />\n        {this.getConfirmDeleteModal()}\n      </div>\n    );\n  }\n\n  public getPageContent() {\n    const { intl } = this.props;\n    if (!this.props.userProfile.hasCapability('manageSpaces')) {\n      return <UnauthorizedPrompt />;\n    }\n\n    return (\n      <Fragment>\n        <EuiFlexGroup justifyContent={'spaceBetween'}>\n          <EuiFlexItem grow={false}>\n            <EuiTitle size=\"m\">\n              <h1>\n                <FormattedMessage\n                  id=\"xpack.spaces.management.spacesGridPage.spacesTitle\"\n                  defaultMessage=\"Spaces\"\n                />\n              </h1>\n            </EuiTitle>\n            <EuiText color=\"subdued\">\n              <p>{getSpacesFeatureDescription()}</p>\n            </EuiText>\n          </EuiFlexItem>\n          <EuiFlexItem grow={false}>{this.getPrimaryActionButton()}</EuiFlexItem>\n        </EuiFlexGroup>\n        <EuiSpacer size=\"l\" />\n\n        <EuiInMemoryTable\n          itemId={'id'}\n          items={this.state.spaces}\n          columns={this.getColumnConfig()}\n          hasActions\n          pagination={true}\n          search={{\n            box: {\n              placeholder: intl.formatMessage({\n                id: 'xpack.spaces.management.spacesGridPage.searchPlaceholder',\n                defaultMessage: 'Search',\n              }),\n            },\n          }}\n          loading={this.state.loading}\n          message={\n            this.state.loading ? (\n              <FormattedMessage\n                id=\"xpack.spaces.management.spacesGridPage.loadingTitle\"\n                defaultMessage=\"loading…\"\n              />\n            ) : (\n              undefined\n            )\n          }\n        />\n      </Fragment>\n    );\n  }\n\n  public getPrimaryActionButton() {\n    return (\n      <EuiButton\n        fill\n        onClick={() => {\n          window.location.hash = `#/management/spaces/create`;\n        }}\n      >\n        <FormattedMessage\n          id=\"xpack.spaces.management.spacesGridPage.createSpaceButtonLabel\"\n          defaultMessage=\"Create a space\"\n        />\n      </EuiButton>\n    );\n  }\n\n  public getConfirmDeleteModal = () => {\n    if (!this.state.showConfirmDeleteModal || !this.state.selectedSpace) {\n      return null;\n    }\n\n    const { spacesNavState, spacesManager } = this.props;\n\n    return (\n      <ConfirmDeleteModal\n        space={this.state.selectedSpace}\n        spacesNavState={spacesNavState}\n        spacesManager={spacesManager}\n        onCancel={() => {\n          this.setState({\n            showConfirmDeleteModal: false,\n          });\n        }}\n        onConfirm={this.deleteSpace}\n      />\n    );\n  };\n\n  public deleteSpace = async () => {\n    const { intl } = this.props;\n    const { spacesManager, spacesNavState } = this.props;\n\n    const space = this.state.selectedSpace;\n\n    if (!space) {\n      return;\n    }\n\n    try {\n      await spacesManager.deleteSpace(space);\n    } catch (error) {\n      const { message: errorMessage = '' } = error.data || {};\n\n      toastNotifications.addDanger(\n        intl.formatMessage(\n          {\n            id: 'xpack.spaces.management.spacesGridPage.errorDeletingSpaceErrorMessage',\n            defaultMessage: 'Error deleting space: {errorMessage}',\n          },\n          {\n            errorMessage,\n          }\n        )\n      );\n    }\n\n    this.setState({\n      showConfirmDeleteModal: false,\n    });\n\n    this.loadGrid();\n\n    const message = intl.formatMessage(\n      {\n        id: 'xpack.spaces.management.spacesGridPage.spaceSuccessfullyDeletedNotificationMessage',\n        defaultMessage: 'Deleted \"{spaceName}\" space.',\n      },\n      {\n        spaceName: space.name,\n      }\n    );\n\n    toastNotifications.addSuccess(message);\n\n    spacesNavState.refreshSpacesList();\n  };\n\n  public loadGrid = () => {\n    const { spacesManager } = this.props;\n\n    this.setState({\n      loading: true,\n      spaces: [],\n    });\n\n    const setSpaces = (spaces: Space[]) => {\n      this.setState({\n        loading: false,\n        spaces,\n      });\n    };\n\n    spacesManager\n      .getSpaces()\n      .then(spaces => {\n        setSpaces(spaces);\n      })\n      .catch(error => {\n        this.setState({\n          loading: false,\n          error,\n        });\n      });\n  };\n\n  public getColumnConfig() {\n    const { intl } = this.props;\n    return [\n      {\n        field: 'name',\n        name: '',\n        width: '50px',\n        sortable: true,\n        render: (value: string, record: Space) => {\n          return (\n            <EuiLink\n              onClick={() => {\n                this.onEditSpaceClick(record);\n              }}\n            >\n              <SpaceAvatar space={record} size=\"s\" />\n            </EuiLink>\n          );\n        },\n      },\n      {\n        field: 'name',\n        name: intl.formatMessage({\n          id: 'xpack.spaces.management.spacesGridPage.spaceColumnName',\n          defaultMessage: 'Space',\n        }),\n        sortable: true,\n        render: (value: string, record: Space) => {\n          return (\n            <EuiLink\n              onClick={() => {\n                this.onEditSpaceClick(record);\n              }}\n            >\n              {value}\n            </EuiLink>\n          );\n        },\n      },\n      {\n        field: 'id',\n        name: intl.formatMessage({\n          id: 'xpack.spaces.management.spacesGridPage.identifierColumnName',\n          defaultMessage: 'Identifier',\n        }),\n        sortable: true,\n      },\n      {\n        field: 'description',\n        name: intl.formatMessage({\n          id: 'xpack.spaces.management.spacesGridPage.descriptionColumnName',\n          defaultMessage: 'Description',\n        }),\n        sortable: true,\n      },\n      {\n        name: intl.formatMessage({\n          id: 'xpack.spaces.management.spacesGridPage.actionsColumnName',\n          defaultMessage: 'Actions',\n        }),\n        actions: [\n          {\n            render: (record: Space) => {\n              return (\n                <EuiButtonIcon\n                  aria-label={intl.formatMessage(\n                    {\n                      id: 'xpack.spaces.management.spacesGridPage.editSpaceActionName',\n                      defaultMessage: `Edit {spaceName}.`,\n                    },\n                    {\n                      spaceName: record.name,\n                    }\n                  )}\n                  color={'primary'}\n                  iconType={'pencil'}\n                  onClick={() => this.onEditSpaceClick(record)}\n                />\n              );\n            },\n          },\n          {\n            available: (record: Space) => !isReservedSpace(record),\n            render: (record: Space) => {\n              return (\n                <EuiButtonIcon\n                  aria-label={intl.formatMessage(\n                    {\n                      id: 'xpack.spaces.management.spacesGridPage.deleteActionName',\n                      defaultMessage: `Delete {spaceName}.`,\n                    },\n                    {\n                      spaceName: record.name,\n                    }\n                  )}\n                  color={'danger'}\n                  iconType={'trash'}\n                  onClick={() => this.onDeleteSpaceClick(record)}\n                />\n              );\n            },\n          },\n        ],\n      },\n    ];\n  }\n\n  private onEditSpaceClick = (space: Space) => {\n    window.location.hash = `#/management/spaces/edit/${encodeURIComponent(space.id)}`;\n  };\n\n  private onDeleteSpaceClick = (space: Space) => {\n    this.setState({\n      selectedSpace: space,\n      showConfirmDeleteModal: true,\n    });\n  };\n}\n\nexport const SpacesGridPage = injectI18n(SpacesGridPageUI);\n"]}]}