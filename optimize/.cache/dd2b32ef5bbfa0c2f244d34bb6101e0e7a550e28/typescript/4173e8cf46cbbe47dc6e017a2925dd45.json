{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/upgrade_assistant/public/components/tabs/checkup/deprecations/default_fields/button.tsx","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/upgrade_assistant/public/components/tabs/checkup/deprecations/default_fields/button.tsx","mtime":1567631712321},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport * as tslib_1 from \"tslib\";\nimport React from 'react';\nimport { EuiButton } from '@elastic/eui';\nimport { FormattedMessage } from '@kbn/i18n/react';\nimport { kfetch } from 'ui/kfetch';\nimport { LoadingState } from '../../../../types';\n/**\n * Field types used by Metricbeat to generate the default_field setting.\n * Matches Beats code here:\n * https://github.com/elastic/beats/blob/eee127cb59b56f2ed7c7e317398c3f79c4158216/libbeat/template/processor.go#L104\n */\nvar BEAT_DEFAULT_FIELD_TYPES = new Set(['keyword', 'text', 'ip']);\nvar BEAT_OTHER_DEFAULT_FIELDS = new Set(['fields.*']);\n/**\n * Renders a button if given index is a valid Metricbeat index to add a default_field setting.\n */\nvar FixDefaultFieldsButton = /** @class */ (function (_super) {\n    tslib_1.__extends(FixDefaultFieldsButton, _super);\n    function FixDefaultFieldsButton(props) {\n        var _this = _super.call(this, props) || this;\n        _this.isBeatsIndex = function () {\n            var indexName = _this.props.indexName;\n            return indexName.startsWith('metricbeat-') || indexName.startsWith('filebeat-');\n        };\n        _this.fixBeatsIndex = function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n            var e_1;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this.isBeatsIndex()) {\n                            return [2 /*return*/];\n                        }\n                        this.setState({\n                            fixLoadingState: LoadingState.Loading,\n                        });\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 3, , 4]);\n                        return [4 /*yield*/, kfetch({\n                                pathname: \"/api/upgrade_assistant/add_query_default_field/\" + this.props.indexName,\n                                method: 'POST',\n                                body: JSON.stringify({\n                                    fieldTypes: tslib_1.__spread(BEAT_DEFAULT_FIELD_TYPES),\n                                    otherFields: tslib_1.__spread(BEAT_OTHER_DEFAULT_FIELDS),\n                                }),\n                            })];\n                    case 2:\n                        _a.sent();\n                        this.setState({\n                            fixLoadingState: LoadingState.Success,\n                        });\n                        return [3 /*break*/, 4];\n                    case 3:\n                        e_1 = _a.sent();\n                        this.setState({\n                            fixLoadingState: LoadingState.Error,\n                        });\n                        return [3 /*break*/, 4];\n                    case 4: return [2 /*return*/];\n                }\n            });\n        }); };\n        _this.state = {};\n        return _this;\n    }\n    FixDefaultFieldsButton.prototype.render = function () {\n        var fixLoadingState = this.state.fixLoadingState;\n        if (!this.isBeatsIndex()) {\n            return null;\n        }\n        var buttonProps = { size: 's', onClick: this.fixBeatsIndex };\n        var buttonContent;\n        switch (fixLoadingState) {\n            case LoadingState.Loading:\n                buttonProps.disabled = true;\n                buttonProps.isLoading = true;\n                buttonContent = (React.createElement(FormattedMessage, { id: \"xpack.upgradeAssistant.checkupTab.fixMetricbeatIndexButton.fixingLabel\", defaultMessage: \"Fixing\\u2026\" }));\n                break;\n            case LoadingState.Success:\n                buttonProps.iconSide = 'left';\n                buttonProps.iconType = 'check';\n                buttonProps.disabled = true;\n                buttonContent = (React.createElement(FormattedMessage, { id: \"xpack.upgradeAssistant.checkupTab.fixMetricbeatIndexButton.fixedLabel\", defaultMessage: \"Fixed\" }));\n                break;\n            case LoadingState.Error:\n                buttonProps.color = 'danger';\n                buttonProps.iconSide = 'left';\n                buttonProps.iconType = 'cross';\n                buttonContent = (React.createElement(FormattedMessage, { id: \"xpack.upgradeAssistant.checkupTab.fixMetricbeatIndexButton.failedLabel\", defaultMessage: \"Failed\" }));\n                break;\n            default:\n                buttonContent = (React.createElement(FormattedMessage, { id: \"xpack.upgradeAssistant.checkupTab.fixMetricbeatIndexButton.reindexLabel\", defaultMessage: \"Fix\" }));\n        }\n        return React.createElement(EuiButton, tslib_1.__assign({}, buttonProps), buttonContent);\n    };\n    return FixDefaultFieldsButton;\n}(React.Component));\nexport { FixDefaultFieldsButton };\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/upgrade_assistant/public/components/tabs/checkup/deprecations/default_fields/button.tsx","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/upgrade_assistant/public/components/tabs/checkup/deprecations/default_fields/button.tsx"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport React, { ReactNode } from 'react';\n\nimport { EuiButton } from '@elastic/eui';\nimport { FormattedMessage } from '@kbn/i18n/react';\nimport { kfetch } from 'ui/kfetch';\nimport { LoadingState } from '../../../../types';\n\n/**\n * Field types used by Metricbeat to generate the default_field setting.\n * Matches Beats code here:\n * https://github.com/elastic/beats/blob/eee127cb59b56f2ed7c7e317398c3f79c4158216/libbeat/template/processor.go#L104\n */\nconst BEAT_DEFAULT_FIELD_TYPES: ReadonlySet<string> = new Set(['keyword', 'text', 'ip']);\nconst BEAT_OTHER_DEFAULT_FIELDS: ReadonlySet<string> = new Set(['fields.*']);\n\ninterface FixDefaultFieldsButtonProps {\n  indexName: string;\n}\n\ninterface FixDefaultFieldsButtonState {\n  fixLoadingState?: LoadingState;\n}\n\n/**\n * Renders a button if given index is a valid Metricbeat index to add a default_field setting.\n */\nexport class FixDefaultFieldsButton extends React.Component<\n  FixDefaultFieldsButtonProps,\n  FixDefaultFieldsButtonState\n> {\n  constructor(props: FixDefaultFieldsButtonProps) {\n    super(props);\n    this.state = {};\n  }\n\n  public render() {\n    const { fixLoadingState } = this.state;\n\n    if (!this.isBeatsIndex()) {\n      return null;\n    }\n\n    const buttonProps: any = { size: 's', onClick: this.fixBeatsIndex };\n    let buttonContent: ReactNode;\n\n    switch (fixLoadingState) {\n      case LoadingState.Loading:\n        buttonProps.disabled = true;\n        buttonProps.isLoading = true;\n        buttonContent = (\n          <FormattedMessage\n            id=\"xpack.upgradeAssistant.checkupTab.fixMetricbeatIndexButton.fixingLabel\"\n            defaultMessage=\"Fixing…\"\n          />\n        );\n        break;\n      case LoadingState.Success:\n        buttonProps.iconSide = 'left';\n        buttonProps.iconType = 'check';\n        buttonProps.disabled = true;\n        buttonContent = (\n          <FormattedMessage\n            id=\"xpack.upgradeAssistant.checkupTab.fixMetricbeatIndexButton.fixedLabel\"\n            defaultMessage=\"Fixed\"\n          />\n        );\n        break;\n      case LoadingState.Error:\n        buttonProps.color = 'danger';\n        buttonProps.iconSide = 'left';\n        buttonProps.iconType = 'cross';\n        buttonContent = (\n          <FormattedMessage\n            id=\"xpack.upgradeAssistant.checkupTab.fixMetricbeatIndexButton.failedLabel\"\n            defaultMessage=\"Failed\"\n          />\n        );\n        break;\n      default:\n        buttonContent = (\n          <FormattedMessage\n            id=\"xpack.upgradeAssistant.checkupTab.fixMetricbeatIndexButton.reindexLabel\"\n            defaultMessage=\"Fix\"\n          />\n        );\n    }\n\n    return <EuiButton {...buttonProps}>{buttonContent}</EuiButton>;\n  }\n\n  private isBeatsIndex = () => {\n    const { indexName } = this.props;\n    return indexName.startsWith('metricbeat-') || indexName.startsWith('filebeat-');\n  };\n\n  private fixBeatsIndex = async () => {\n    if (!this.isBeatsIndex()) {\n      return;\n    }\n\n    this.setState({\n      fixLoadingState: LoadingState.Loading,\n    });\n\n    try {\n      await kfetch({\n        pathname: `/api/upgrade_assistant/add_query_default_field/${this.props.indexName}`,\n        method: 'POST',\n        body: JSON.stringify({\n          fieldTypes: [...BEAT_DEFAULT_FIELD_TYPES],\n          otherFields: [...BEAT_OTHER_DEFAULT_FIELDS],\n        }),\n      });\n\n      this.setState({\n        fixLoadingState: LoadingState.Success,\n      });\n    } catch (e) {\n      this.setState({\n        fixLoadingState: LoadingState.Error,\n      });\n    }\n  };\n}\n"]}]}