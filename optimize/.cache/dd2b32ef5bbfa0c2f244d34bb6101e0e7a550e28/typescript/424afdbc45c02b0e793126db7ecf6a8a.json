{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/components/waffle/custom_field_panel.tsx","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/components/waffle/custom_field_panel.tsx","mtime":1567631711982},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport * as tslib_1 from \"tslib\";\nvar _a;\nimport { EuiButton, EuiComboBox, EuiForm, EuiFormRow } from '@elastic/eui';\nimport { injectI18n } from '@kbn/i18n/react';\nimport React from 'react';\nvar initialState = {\n    selectedOptions: [],\n};\nexport var CustomFieldPanel = injectI18n((_a = /** @class */ (function (_super) {\n        tslib_1.__extends(class_1, _super);\n        function class_1() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this.state = initialState;\n            _this.handleSubmit = function () {\n                _this.props.onSubmit(_this.state.selectedOptions[0].label);\n            };\n            _this.handleFieldSelection = function (selectedOptions) {\n                _this.setState({ selectedOptions: selectedOptions });\n            };\n            return _this;\n        }\n        class_1.prototype.render = function () {\n            var _a = this.props, fields = _a.fields, intl = _a.intl;\n            var options = fields\n                .filter(function (f) { return f.aggregatable && f.type === 'string'; })\n                .map(function (f) { return ({ label: f.name }); });\n            return (React.createElement(\"div\", { style: { padding: 16 } },\n                React.createElement(EuiForm, null,\n                    React.createElement(EuiFormRow, { label: intl.formatMessage({\n                            id: 'xpack.infra.waffle.customGroupByFieldLabel',\n                            defaultMessage: 'Field',\n                        }), helpText: intl.formatMessage({\n                            id: 'xpack.infra.waffle.customGroupByHelpText',\n                            defaultMessage: 'This is the field used for the terms aggregation',\n                        }), compressed: true },\n                        React.createElement(EuiComboBox, { placeholder: intl.formatMessage({\n                                id: 'xpack.infra.waffle.customGroupByDropdownPlacehoder',\n                                defaultMessage: 'Select one',\n                            }), singleSelection: { asPlainText: true }, selectedOptions: this.state.selectedOptions, options: options, onChange: this.handleFieldSelection, isClearable: false })),\n                    React.createElement(EuiButton, { disabled: !this.state.selectedOptions.length, type: \"submit\", size: \"s\", fill: true, onClick: this.handleSubmit }, \"Add\"))));\n        };\n        return class_1;\n    }(React.PureComponent)),\n    _a.displayName = 'CustomFieldPanel',\n    _a));\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/components/waffle/custom_field_panel.tsx","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/components/waffle/custom_field_panel.tsx"],"names":[],"mappings":"AAAA;;;;GAIG;;;AAEH,OAAO,EAAE,SAAS,EAAE,WAAW,EAAE,OAAO,EAAE,UAAU,EAAE,MAAM,cAAc,CAAC;AAC3E,OAAO,EAAgB,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAC3D,OAAO,KAAK,MAAM,OAAO,CAAC;AAY1B,IAAM,YAAY,GAAG;IACnB,eAAe,EAAE,EAAsB;CACxC,CAAC;AAIF,MAAM,CAAC,IAAM,gBAAgB,GAAG,UAAU;QAC1B,mCAAiC;QAA/C;YAAA,qEAuDC;YArDiB,WAAK,GAAU,YAAY,CAAC;YA8CpC,kBAAY,GAAG;gBACrB,KAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAI,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;YAC3D,CAAC,CAAC;YAEM,0BAAoB,GAAG,UAAC,eAAiC;gBAC/D,KAAI,CAAC,QAAQ,CAAC,EAAE,eAAe,iBAAA,EAAE,CAAC,CAAC;YACrC,CAAC,CAAC;;QACJ,CAAC;QApDQ,wBAAM,GAAb;YACQ,IAAA,eAA6B,EAA3B,kBAAM,EAAE,cAAI,CAAgB;YACpC,IAAM,OAAO,GAAG,MAAM;iBACnB,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,YAAY,IAAI,CAAC,CAAC,IAAI,KAAK,QAAQ,EAArC,CAAqC,CAAC;iBAClD,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,EAAnB,CAAmB,CAAC,CAAC;YACjC,OAAO,CACL,6BAAK,KAAK,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;gBACzB,oBAAC,OAAO;oBACN,oBAAC,UAAU,IACT,KAAK,EAAE,IAAI,CAAC,aAAa,CAAC;4BACxB,EAAE,EAAE,4CAA4C;4BAChD,cAAc,EAAE,OAAO;yBACxB,CAAC,EACF,QAAQ,EAAE,IAAI,CAAC,aAAa,CAAC;4BAC3B,EAAE,EAAE,0CAA0C;4BAC9C,cAAc,EAAE,kDAAkD;yBACnE,CAAC,EACF,UAAU;wBAEV,oBAAC,WAAW,IACV,WAAW,EAAE,IAAI,CAAC,aAAa,CAAC;gCAC9B,EAAE,EAAE,oDAAoD;gCACxD,cAAc,EAAE,YAAY;6BAC7B,CAAC,EACF,eAAe,EAAE,EAAE,WAAW,EAAE,IAAI,EAAE,EACtC,eAAe,EAAE,IAAI,CAAC,KAAK,CAAC,eAAe,EAC3C,OAAO,EAAE,OAAO,EAChB,QAAQ,EAAE,IAAI,CAAC,oBAAoB,EACnC,WAAW,EAAE,KAAK,GAClB,CACS;oBACb,oBAAC,SAAS,IACR,QAAQ,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,MAAM,EAC5C,IAAI,EAAC,QAAQ,EACb,IAAI,EAAC,GAAG,EACR,IAAI,QACJ,OAAO,EAAE,IAAI,CAAC,YAAY,UAGhB,CACJ,CACN,CACP,CAAC;QACJ,CAAC;QASH,cAAC;IAAD,CAAC,AAvDD,CAAc,KAAK,CAAC,aAAa;IACjB,cAAW,GAAG,kBAAmB;QAuDlD,CAAC","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport { EuiButton, EuiComboBox, EuiForm, EuiFormRow } from '@elastic/eui';\nimport { InjectedIntl, injectI18n } from '@kbn/i18n/react';\nimport React from 'react';\nimport { InfraIndexField } from 'x-pack/plugins/infra/server/graphql/types';\ninterface Props {\n  onSubmit: (field: string) => void;\n  fields: InfraIndexField[];\n  intl: InjectedIntl;\n}\n\ninterface SelectedOption {\n  label: string;\n}\n\nconst initialState = {\n  selectedOptions: [] as SelectedOption[],\n};\n\ntype State = Readonly<typeof initialState>;\n\nexport const CustomFieldPanel = injectI18n(\n  class extends React.PureComponent<Props, State> {\n    public static displayName = 'CustomFieldPanel';\n    public readonly state: State = initialState;\n    public render() {\n      const { fields, intl } = this.props;\n      const options = fields\n        .filter(f => f.aggregatable && f.type === 'string')\n        .map(f => ({ label: f.name }));\n      return (\n        <div style={{ padding: 16 }}>\n          <EuiForm>\n            <EuiFormRow\n              label={intl.formatMessage({\n                id: 'xpack.infra.waffle.customGroupByFieldLabel',\n                defaultMessage: 'Field',\n              })}\n              helpText={intl.formatMessage({\n                id: 'xpack.infra.waffle.customGroupByHelpText',\n                defaultMessage: 'This is the field used for the terms aggregation',\n              })}\n              compressed\n            >\n              <EuiComboBox\n                placeholder={intl.formatMessage({\n                  id: 'xpack.infra.waffle.customGroupByDropdownPlacehoder',\n                  defaultMessage: 'Select one',\n                })}\n                singleSelection={{ asPlainText: true }}\n                selectedOptions={this.state.selectedOptions}\n                options={options}\n                onChange={this.handleFieldSelection}\n                isClearable={false}\n              />\n            </EuiFormRow>\n            <EuiButton\n              disabled={!this.state.selectedOptions.length}\n              type=\"submit\"\n              size=\"s\"\n              fill\n              onClick={this.handleSubmit}\n            >\n              Add\n            </EuiButton>\n          </EuiForm>\n        </div>\n      );\n    }\n\n    private handleSubmit = () => {\n      this.props.onSubmit(this.state.selectedOptions[0].label);\n    };\n\n    private handleFieldSelection = (selectedOptions: SelectedOption[]) => {\n      this.setState({ selectedOptions });\n    };\n  }\n);\n"]}]}