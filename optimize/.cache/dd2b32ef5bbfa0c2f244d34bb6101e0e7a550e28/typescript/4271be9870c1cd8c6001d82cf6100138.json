{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/public/lib/aeroelastic/matrix2d.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/public/lib/aeroelastic/matrix2d.ts","mtime":1567631711932},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport * as tslib_1 from \"tslib\";\nexport var ORIGIN = [0, 0, 1];\nexport var UNITMATRIX = [1, 0, 0, 0, 1, 0, 0, 0, 1];\nexport var translate = function (x, y) {\n    return [1, 0, 0, 0, 1, 0, x, y, 1];\n};\nexport var scale = function (x, y) {\n    return [x, 0, 0, 0, y, 0, 0, 0, 1];\n};\n/**\n * multiply\n *\n * Matrix multiplies two matrices of column major format, returning the result in the same format\n *\n *\n *                          A    D    G\n *                          B    E    H\n *                          C    F    I\n *\n *         a    d    g      .    .    .\n *         b    e    h      .    .    .\n *         c    f    i      .    .    c * G + f * H + i * I\n *\n */\nvar mult = function (_a, _b) {\n    var _c = tslib_1.__read(_a, 9), a = _c[0], b = _c[1], c = _c[2], d = _c[3], e = _c[4], f = _c[5], g = _c[6], h = _c[7], i = _c[8];\n    var _d = tslib_1.__read(_b, 9), A = _d[0], B = _d[1], C = _d[2], D = _d[3], E = _d[4], F = _d[5], G = _d[6], H = _d[7], I = _d[8];\n    return [\n        a * A + d * B + g * C,\n        b * A + e * B + h * C,\n        c * A + f * B + i * C,\n        a * D + d * E + g * F,\n        b * D + e * E + h * F,\n        c * D + f * E + i * F,\n        a * G + d * H + g * I,\n        b * G + e * H + h * I,\n        c * G + f * H + i * I,\n    ];\n};\nexport var multiply = function (first) {\n    var rest = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        rest[_i - 1] = arguments[_i];\n    }\n    return rest.reduce(function (prev, next) { return mult(prev, next); }, first);\n};\n/**\n * mvMultiply\n *\n * Multiplies a matrix and a vector\n *\n *\n *                          A\n *                          B\n *                          C\n *\n *         a    d    g      .\n *         b    e    h      .\n *         c    f    i      c * A + f * B + i * C\n *\n */\nexport var mvMultiply = function (_a, _b) {\n    var _c = tslib_1.__read(_a, 9), a = _c[0], b = _c[1], c = _c[2], d = _c[3], e = _c[4], f = _c[5], g = _c[6], h = _c[7], i = _c[8];\n    var _d = tslib_1.__read(_b, 3), A = _d[0], B = _d[1], C = _d[2];\n    return [a * A + d * B + g * C, b * A + e * B + h * C, c * A + f * B + i * C];\n};\nexport var normalize = function (_a) {\n    var _b = tslib_1.__read(_a, 3), A = _b[0], B = _b[1], C = _b[2];\n    return C === 1 ? [A, B, C] : [A / C, B / C, 1];\n};\nexport var add = function (_a, _b) {\n    var _c = tslib_1.__read(_a, 9), a = _c[0], b = _c[1], c = _c[2], d = _c[3], e = _c[4], f = _c[5], g = _c[6], h = _c[7], i = _c[8];\n    var _d = tslib_1.__read(_b, 9), A = _d[0], B = _d[1], C = _d[2], D = _d[3], E = _d[4], F = _d[5], G = _d[6], H = _d[7], I = _d[8];\n    return [a + A, b + B, c + C, d + D, e + E, f + F, g + G, h + H, i + I];\n};\nexport var subtract = function (_a, _b) {\n    var _c = tslib_1.__read(_a, 9), a = _c[0], b = _c[1], c = _c[2], d = _c[3], e = _c[4], f = _c[5], g = _c[6], h = _c[7], i = _c[8];\n    var _d = tslib_1.__read(_b, 9), A = _d[0], B = _d[1], C = _d[2], D = _d[3], E = _d[4], F = _d[5], G = _d[6], H = _d[7], I = _d[8];\n    return [a - A, b - B, c - C, d - D, e - E, f - F, g - G, h - H, i - I];\n};\nexport var componentProduct = function (_a, _b) {\n    var _c = tslib_1.__read(_a, 3), a = _c[0], b = _c[1], c = _c[2];\n    var _d = tslib_1.__read(_b, 3), A = _d[0], B = _d[1], C = _d[2];\n    return [a * A, b * B, c * C];\n};\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/public/lib/aeroelastic/matrix2d.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/public/lib/aeroelastic/matrix2d.ts"],"names":[],"mappings":"AAAA;;;;GAIG;;AAIH,MAAM,CAAC,IAAM,MAAM,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAa,CAAC;AAE5C,MAAM,CAAC,IAAM,UAAU,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAsB,CAAC;AAE3E,MAAM,CAAC,IAAM,SAAS,GAAG,UAAC,CAAS,EAAE,CAAS;IAC5C,OAAA,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAsB;AAAhD,CAAgD,CAAC;AAEnD,MAAM,CAAC,IAAM,KAAK,GAAG,UAAC,CAAS,EAAE,CAAS;IACxC,OAAA,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAsB;AAAhD,CAAgD,CAAC;AAEnD;;;;;;;;;;;;;;GAcG;AACH,IAAM,IAAI,GAAG,UACX,EAA8C,EAC9C,EAA8C;QAD9C,0BAA8C,EAA7C,SAAC,EAAE,SAAC,EAAE,SAAC,EAAE,SAAC,EAAE,SAAC,EAAE,SAAC,EAAE,SAAC,EAAE,SAAC,EAAE,SAAC;QAC1B,0BAA8C,EAA7C,SAAC,EAAE,SAAC,EAAE,SAAC,EAAE,SAAC,EAAE,SAAC,EAAE,SAAC,EAAE,SAAC,EAAE,SAAC,EAAE,SAAC;IAE1B,OAAA;QACE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC;QACrB,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC;QACrB,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC;QAErB,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC;QACrB,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC;QACrB,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC;QAErB,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC;QACrB,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC;QACrB,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC;KACD;AAZtB,CAYsB,CAAC;AAEzB,MAAM,CAAC,IAAM,QAAQ,GAAG,UACtB,KAAwB;IACxB,cAA4B;SAA5B,UAA4B,EAA5B,qBAA4B,EAA5B,IAA4B;QAA5B,6BAA4B;;IACN,OAAA,IAAI,CAAC,MAAM,CAAC,UAAC,IAAI,EAAE,IAAI,IAAK,OAAA,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,EAAhB,CAAgB,EAAE,KAAK,CAAC;AAApD,CAAoD,CAAC;AAE7E;;;;;;;;;;;;;;GAcG;AACH,MAAM,CAAC,IAAM,UAAU,GAAG,UACxB,EAA8C,EAC9C,EAAmB;QADnB,0BAA8C,EAA7C,SAAC,EAAE,SAAC,EAAE,SAAC,EAAE,SAAC,EAAE,SAAC,EAAE,SAAC,EAAE,SAAC,EAAE,SAAC,EAAE,SAAC;QAC1B,0BAAmB,EAAlB,SAAC,EAAE,SAAC,EAAE,SAAC;IACK,OAAA,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAa;AAAjF,CAAiF,CAAC;AAEjG,MAAM,CAAC,IAAM,SAAS,GAAG,UAAC,EAAmB;QAAnB,0BAAmB,EAAlB,SAAC,EAAE,SAAC,EAAE,SAAC;IAChC,OAAA,CAAC,KAAK,CAAC,CAAC,CAAC,CAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAc,CAAC,CAAC,CAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAc;AAAnE,CAAmE,CAAC;AAEtE,MAAM,CAAC,IAAM,GAAG,GAAG,UACjB,EAA8C,EAC9C,EAA8C;QAD9C,0BAA8C,EAA7C,SAAC,EAAE,SAAC,EAAE,SAAC,EAAE,SAAC,EAAE,SAAC,EAAE,SAAC,EAAE,SAAC,EAAE,SAAC,EAAE,SAAC;QAC1B,0BAA8C,EAA7C,SAAC,EAAE,SAAC,EAAE,SAAC,EAAE,SAAC,EAAE,SAAC,EAAE,SAAC,EAAE,SAAC,EAAE,SAAC,EAAE,SAAC;IAE1B,OAAA,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAsB;AAApF,CAAoF,CAAC;AAEvF,MAAM,CAAC,IAAM,QAAQ,GAAG,UACtB,EAA8C,EAC9C,EAA8C;QAD9C,0BAA8C,EAA7C,SAAC,EAAE,SAAC,EAAE,SAAC,EAAE,SAAC,EAAE,SAAC,EAAE,SAAC,EAAE,SAAC,EAAE,SAAC,EAAE,SAAC;QAC1B,0BAA8C,EAA7C,SAAC,EAAE,SAAC,EAAE,SAAC,EAAE,SAAC,EAAE,SAAC,EAAE,SAAC,EAAE,SAAC,EAAE,SAAC,EAAE,SAAC;IAE1B,OAAA,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAsB;AAApF,CAAoF,CAAC;AAEvF,MAAM,CAAC,IAAM,gBAAgB,GAAG,UAAC,EAAmB,EAAE,EAAmB;QAAxC,0BAAmB,EAAlB,SAAC,EAAE,SAAC,EAAE,SAAC;QAAa,0BAAmB,EAAlB,SAAC,EAAE,SAAC,EAAE,SAAC;IAC5D,OAAA,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAa;AAAjC,CAAiC,CAAC","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport { transformMatrix2d, vector2d } from './types';\n\nexport const ORIGIN = [0, 0, 1] as vector2d;\n\nexport const UNITMATRIX = [1, 0, 0, 0, 1, 0, 0, 0, 1] as transformMatrix2d;\n\nexport const translate = (x: number, y: number): transformMatrix2d =>\n  [1, 0, 0, 0, 1, 0, x, y, 1] as transformMatrix2d;\n\nexport const scale = (x: number, y: number): transformMatrix2d =>\n  [x, 0, 0, 0, y, 0, 0, 0, 1] as transformMatrix2d;\n\n/**\n * multiply\n *\n * Matrix multiplies two matrices of column major format, returning the result in the same format\n *\n *\n *                          A    D    G\n *                          B    E    H\n *                          C    F    I\n *\n *         a    d    g      .    .    .\n *         b    e    h      .    .    .\n *         c    f    i      .    .    c * G + f * H + i * I\n *\n */\nconst mult = (\n  [a, b, c, d, e, f, g, h, i]: transformMatrix2d,\n  [A, B, C, D, E, F, G, H, I]: transformMatrix2d\n): transformMatrix2d =>\n  [\n    a * A + d * B + g * C,\n    b * A + e * B + h * C,\n    c * A + f * B + i * C,\n\n    a * D + d * E + g * F,\n    b * D + e * E + h * F,\n    c * D + f * E + i * F,\n\n    a * G + d * H + g * I,\n    b * G + e * H + h * I,\n    c * G + f * H + i * I,\n  ] as transformMatrix2d;\n\nexport const multiply = (\n  first: transformMatrix2d,\n  ...rest: transformMatrix2d[]\n): transformMatrix2d => rest.reduce((prev, next) => mult(prev, next), first);\n\n/**\n * mvMultiply\n *\n * Multiplies a matrix and a vector\n *\n *\n *                          A\n *                          B\n *                          C\n *\n *         a    d    g      .\n *         b    e    h      .\n *         c    f    i      c * A + f * B + i * C\n *\n */\nexport const mvMultiply = (\n  [a, b, c, d, e, f, g, h, i]: transformMatrix2d,\n  [A, B, C]: vector2d\n): vector2d => [a * A + d * B + g * C, b * A + e * B + h * C, c * A + f * B + i * C] as vector2d;\n\nexport const normalize = ([A, B, C]: vector2d): vector2d =>\n  C === 1 ? ([A, B, C] as vector2d) : ([A / C, B / C, 1] as vector2d);\n\nexport const add = (\n  [a, b, c, d, e, f, g, h, i]: transformMatrix2d,\n  [A, B, C, D, E, F, G, H, I]: transformMatrix2d\n): transformMatrix2d =>\n  [a + A, b + B, c + C, d + D, e + E, f + F, g + G, h + H, i + I] as transformMatrix2d;\n\nexport const subtract = (\n  [a, b, c, d, e, f, g, h, i]: transformMatrix2d,\n  [A, B, C, D, E, F, G, H, I]: transformMatrix2d\n): transformMatrix2d =>\n  [a - A, b - B, c - C, d - D, e - E, f - F, g - G, h - H, i - I] as transformMatrix2d;\n\nexport const componentProduct = ([a, b, c]: vector2d, [A, B, C]: vector2d): vector2d =>\n  [a * A, b * B, c * C] as vector2d;\n"]}]}