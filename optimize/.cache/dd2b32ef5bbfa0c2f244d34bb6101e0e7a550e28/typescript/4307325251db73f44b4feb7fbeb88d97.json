{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/apm/public/components/app/ServiceDetails/ServiceIntegrations/createErrorGroupWatch.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/apm/public/components/app/ServiceDetails/ServiceIntegrations/createErrorGroupWatch.ts","mtime":1567631711861},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport * as tslib_1 from \"tslib\";\nimport { i18n } from '@kbn/i18n';\nimport { isEmpty } from 'lodash';\nimport chrome from 'ui/chrome';\nimport url from 'url';\nimport uuid from 'uuid';\nimport { ERROR_CULPRIT, ERROR_EXC_HANDLED, ERROR_EXC_MESSAGE, ERROR_GROUP_ID, ERROR_LOG_MESSAGE, PROCESSOR_EVENT, SERVICE_NAME } from '../../../../../common/constants';\n// @ts-ignore\nimport { createWatch } from '../../../../services/rest/watcher';\nfunction getSlackPathUrl(slackUrl) {\n    if (slackUrl) {\n        var path = url.parse(slackUrl).path;\n        return path;\n    }\n}\nexport function createErrorGroupWatch(_a) {\n    var _b = _a.emails, emails = _b === void 0 ? [] : _b, schedule = _a.schedule, serviceName = _a.serviceName, slackUrl = _a.slackUrl, threshold = _a.threshold, timeRange = _a.timeRange;\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n        var _c, _d, id, apmIndexPatternTitle, slackUrlPath, emailTemplate, slackTemplate, actions, body;\n        return tslib_1.__generator(this, function (_e) {\n            switch (_e.label) {\n                case 0:\n                    id = \"apm-\" + uuid.v4();\n                    apmIndexPatternTitle = chrome.getInjected('apmIndexPatternTitle');\n                    slackUrlPath = getSlackPathUrl(slackUrl);\n                    emailTemplate = i18n.translate('xpack.apm.serviceDetails.enableErrorReportsPanel.emailTemplateText', {\n                        defaultMessage: 'Your service {serviceName} has error groups which exceeds {threshold} occurrences within {timeRange}{br}' +\n                            '{br}' +\n                            '{errorGroupsBuckets}{br}' +\n                            '{errorLogMessage}{br}' +\n                            '{errorCulprit}N/A{slashErrorCulprit}{br}' +\n                            '{docCountParam} occurrences{br}' +\n                            '{slashErrorGroupsBucket}',\n                        values: {\n                            serviceName: '\"{{ctx.metadata.serviceName}}\"',\n                            threshold: '{{ctx.metadata.threshold}}',\n                            timeRange: '\"{{ctx.metadata.timeRangeValue}}{{ctx.metadata.timeRangeUnit}}\"',\n                            errorGroupsBuckets: '{{#ctx.payload.aggregations.error_groups.buckets}}',\n                            errorLogMessage: '<strong>{{sample.hits.hits.0._source.error.log.message}}{{^sample.hits.hits.0._source.error.log.message}}{{sample.hits.hits.0._source.error.exception.message}}{{/sample.hits.hits.0._source.error.log.message}}</strong>',\n                            errorCulprit: '{{sample.hits.hits.0._source.error.culprit}}{{^sample.hits.hits.0._source.error.culprit}}',\n                            slashErrorCulprit: '{{/sample.hits.hits.0._source.error.culprit}}',\n                            docCountParam: '{{doc_count}}',\n                            slashErrorGroupsBucket: '{{/ctx.payload.aggregations.error_groups.buckets}}',\n                            br: '<br/>'\n                        }\n                    });\n                    slackTemplate = i18n.translate('xpack.apm.serviceDetails.enableErrorReportsPanel.slackTemplateText', {\n                        defaultMessage: \"Your service {serviceName} has error groups which exceeds {threshold} occurrences within {timeRange}\\n{errorGroupsBuckets}\\n{errorLogMessage}\\n{errorCulprit}N/A{slashErrorCulprit}\\n{docCountParam} occurrences\\n{slashErrorGroupsBucket}\",\n                        values: {\n                            serviceName: '\"{{ctx.metadata.serviceName}}\"',\n                            threshold: '{{ctx.metadata.threshold}}',\n                            timeRange: '\"{{ctx.metadata.timeRangeValue}}{{ctx.metadata.timeRangeUnit}}\"',\n                            errorGroupsBuckets: '{{#ctx.payload.aggregations.error_groups.buckets}}',\n                            errorLogMessage: '>*{{sample.hits.hits.0._source.error.log.message}}{{^sample.hits.hits.0._source.error.log.message}}{{sample.hits.hits.0._source.error.exception.message}}{{/sample.hits.hits.0._source.error.log.message}}*',\n                            errorCulprit: '>{{#sample.hits.hits.0._source.error.culprit}}`{{sample.hits.hits.0._source.error.culprit}}`{{/sample.hits.hits.0._source.error.culprit}}{{^sample.hits.hits.0._source.error.culprit}}',\n                            slashErrorCulprit: '{{/sample.hits.hits.0._source.error.culprit}}',\n                            docCountParam: '>{{doc_count}}',\n                            slashErrorGroupsBucket: '{{/ctx.payload.aggregations.error_groups.buckets}}'\n                        }\n                    });\n                    actions = {\n                        log_error: { logging: { text: emailTemplate } }\n                    };\n                    body = {\n                        metadata: {\n                            emails: emails,\n                            trigger: i18n.translate('xpack.apm.serviceDetails.enableErrorReportsPanel.triggerText', {\n                                defaultMessage: 'This value must be changed in trigger section'\n                            }),\n                            serviceName: serviceName,\n                            threshold: threshold,\n                            timeRangeValue: timeRange.value,\n                            timeRangeUnit: timeRange.unit,\n                            slackUrlPath: slackUrlPath\n                        },\n                        trigger: {\n                            schedule: schedule\n                        },\n                        input: {\n                            search: {\n                                request: {\n                                    indices: [apmIndexPatternTitle],\n                                    body: {\n                                        size: 0,\n                                        query: {\n                                            bool: {\n                                                filter: [\n                                                    { term: (_c = {}, _c[SERVICE_NAME] = '{{ctx.metadata.serviceName}}', _c) },\n                                                    { term: (_d = {}, _d[PROCESSOR_EVENT] = 'error', _d) },\n                                                    {\n                                                        range: {\n                                                            '@timestamp': {\n                                                                gte: 'now-{{ctx.metadata.timeRangeValue}}{{ctx.metadata.timeRangeUnit}}'\n                                                            }\n                                                        }\n                                                    }\n                                                ]\n                                            }\n                                        },\n                                        aggs: {\n                                            error_groups: {\n                                                terms: {\n                                                    min_doc_count: '{{ctx.metadata.threshold}}',\n                                                    field: ERROR_GROUP_ID,\n                                                    size: 10,\n                                                    order: {\n                                                        _count: 'desc'\n                                                    }\n                                                },\n                                                aggs: {\n                                                    sample: {\n                                                        top_hits: {\n                                                            _source: [\n                                                                ERROR_LOG_MESSAGE,\n                                                                ERROR_EXC_MESSAGE,\n                                                                ERROR_EXC_HANDLED,\n                                                                ERROR_CULPRIT,\n                                                                ERROR_GROUP_ID,\n                                                                '@timestamp'\n                                                            ],\n                                                            sort: [\n                                                                {\n                                                                    '@timestamp': 'desc'\n                                                                }\n                                                            ],\n                                                            size: 1\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        },\n                        condition: {\n                            script: {\n                                source: 'return ctx.payload.aggregations.error_groups.buckets.length > 0'\n                            }\n                        },\n                        actions: actions\n                    };\n                    if (slackUrlPath) {\n                        body.actions.slack_webhook = {\n                            webhook: {\n                                scheme: 'https',\n                                host: 'hooks.slack.com',\n                                port: 443,\n                                method: 'POST',\n                                path: '{{ctx.metadata.slackUrlPath}}',\n                                headers: {\n                                    'Content-Type': 'application/json'\n                                },\n                                body: \"__json__::\" + JSON.stringify({\n                                    text: slackTemplate\n                                })\n                            }\n                        };\n                    }\n                    if (!isEmpty(emails)) {\n                        body.actions.email = {\n                            email: {\n                                to: '{{#join}}ctx.metadata.emails{{/join}}',\n                                subject: i18n.translate('xpack.apm.serviceDetails.enableErrorReportsPanel.emailSubjectText', {\n                                    defaultMessage: '{serviceName} has error groups which exceeds the threshold',\n                                    values: { serviceName: '\"{{ctx.metadata.serviceName}}\"' }\n                                }),\n                                body: {\n                                    html: emailTemplate\n                                }\n                            }\n                        };\n                    }\n                    return [4 /*yield*/, createWatch(id, body)];\n                case 1:\n                    _e.sent();\n                    return [2 /*return*/, id];\n            }\n        });\n    });\n}\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/apm/public/components/app/ServiceDetails/ServiceIntegrations/createErrorGroupWatch.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/apm/public/components/app/ServiceDetails/ServiceIntegrations/createErrorGroupWatch.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport { i18n } from '@kbn/i18n';\nimport { isEmpty } from 'lodash';\nimport chrome from 'ui/chrome';\nimport url from 'url';\nimport uuid from 'uuid';\nimport {\n  ERROR_CULPRIT,\n  ERROR_EXC_HANDLED,\n  ERROR_EXC_MESSAGE,\n  ERROR_GROUP_ID,\n  ERROR_LOG_MESSAGE,\n  PROCESSOR_EVENT,\n  SERVICE_NAME\n} from '../../../../../common/constants';\n// @ts-ignore\nimport { createWatch } from '../../../../services/rest/watcher';\n\nfunction getSlackPathUrl(slackUrl?: string) {\n  if (slackUrl) {\n    const { path } = url.parse(slackUrl);\n    return path;\n  }\n}\n\nexport interface Schedule {\n  interval?: string;\n  daily?: {\n    at: string;\n  };\n}\n\ninterface Arguments {\n  emails: string[];\n  schedule: Schedule;\n  serviceName: string;\n  slackUrl?: string;\n  threshold: number;\n  timeRange: {\n    value: number;\n    unit: string;\n  };\n}\n\ninterface Actions {\n  log_error: { logging: { text: string } };\n  slack_webhook?: { [key: string]: any };\n  email?: { [key: string]: any };\n}\n\nexport async function createErrorGroupWatch({\n  emails = [],\n  schedule,\n  serviceName,\n  slackUrl,\n  threshold,\n  timeRange\n}: Arguments) {\n  const id = `apm-${uuid.v4()}`;\n  const apmIndexPatternTitle = chrome.getInjected('apmIndexPatternTitle');\n\n  const slackUrlPath = getSlackPathUrl(slackUrl);\n  const emailTemplate = i18n.translate(\n    'xpack.apm.serviceDetails.enableErrorReportsPanel.emailTemplateText',\n    {\n      defaultMessage:\n        'Your service {serviceName} has error groups which exceeds {threshold} occurrences within {timeRange}{br}' +\n        '{br}' +\n        '{errorGroupsBuckets}{br}' +\n        '{errorLogMessage}{br}' +\n        '{errorCulprit}N/A{slashErrorCulprit}{br}' +\n        '{docCountParam} occurrences{br}' +\n        '{slashErrorGroupsBucket}',\n      values: {\n        serviceName: '\"{{ctx.metadata.serviceName}}\"',\n        threshold: '{{ctx.metadata.threshold}}',\n        timeRange:\n          '\"{{ctx.metadata.timeRangeValue}}{{ctx.metadata.timeRangeUnit}}\"',\n        errorGroupsBuckets:\n          '{{#ctx.payload.aggregations.error_groups.buckets}}',\n        errorLogMessage:\n          '<strong>{{sample.hits.hits.0._source.error.log.message}}{{^sample.hits.hits.0._source.error.log.message}}{{sample.hits.hits.0._source.error.exception.message}}{{/sample.hits.hits.0._source.error.log.message}}</strong>',\n        errorCulprit:\n          '{{sample.hits.hits.0._source.error.culprit}}{{^sample.hits.hits.0._source.error.culprit}}',\n        slashErrorCulprit: '{{/sample.hits.hits.0._source.error.culprit}}',\n        docCountParam: '{{doc_count}}',\n        slashErrorGroupsBucket:\n          '{{/ctx.payload.aggregations.error_groups.buckets}}',\n        br: '<br/>'\n      }\n    }\n  );\n\n  const slackTemplate = i18n.translate(\n    'xpack.apm.serviceDetails.enableErrorReportsPanel.slackTemplateText',\n    {\n      defaultMessage: `Your service {serviceName} has error groups which exceeds {threshold} occurrences within {timeRange}\n{errorGroupsBuckets}\n{errorLogMessage}\n{errorCulprit}N/A{slashErrorCulprit}\n{docCountParam} occurrences\n{slashErrorGroupsBucket}`,\n      values: {\n        serviceName: '\"{{ctx.metadata.serviceName}}\"',\n        threshold: '{{ctx.metadata.threshold}}',\n        timeRange:\n          '\"{{ctx.metadata.timeRangeValue}}{{ctx.metadata.timeRangeUnit}}\"',\n        errorGroupsBuckets:\n          '{{#ctx.payload.aggregations.error_groups.buckets}}',\n        errorLogMessage:\n          '>*{{sample.hits.hits.0._source.error.log.message}}{{^sample.hits.hits.0._source.error.log.message}}{{sample.hits.hits.0._source.error.exception.message}}{{/sample.hits.hits.0._source.error.log.message}}*',\n        errorCulprit:\n          '>{{#sample.hits.hits.0._source.error.culprit}}`{{sample.hits.hits.0._source.error.culprit}}`{{/sample.hits.hits.0._source.error.culprit}}{{^sample.hits.hits.0._source.error.culprit}}',\n        slashErrorCulprit: '{{/sample.hits.hits.0._source.error.culprit}}',\n        docCountParam: '>{{doc_count}}',\n        slashErrorGroupsBucket:\n          '{{/ctx.payload.aggregations.error_groups.buckets}}'\n      }\n    }\n  );\n\n  const actions: Actions = {\n    log_error: { logging: { text: emailTemplate } }\n  };\n\n  const body = {\n    metadata: {\n      emails,\n      trigger: i18n.translate(\n        'xpack.apm.serviceDetails.enableErrorReportsPanel.triggerText',\n        {\n          defaultMessage: 'This value must be changed in trigger section'\n        }\n      ),\n      serviceName,\n      threshold,\n      timeRangeValue: timeRange.value,\n      timeRangeUnit: timeRange.unit,\n      slackUrlPath\n    },\n    trigger: {\n      schedule\n    },\n    input: {\n      search: {\n        request: {\n          indices: [apmIndexPatternTitle],\n          body: {\n            size: 0,\n            query: {\n              bool: {\n                filter: [\n                  { term: { [SERVICE_NAME]: '{{ctx.metadata.serviceName}}' } },\n                  { term: { [PROCESSOR_EVENT]: 'error' } },\n                  {\n                    range: {\n                      '@timestamp': {\n                        gte:\n                          'now-{{ctx.metadata.timeRangeValue}}{{ctx.metadata.timeRangeUnit}}'\n                      }\n                    }\n                  }\n                ]\n              }\n            },\n            aggs: {\n              error_groups: {\n                terms: {\n                  min_doc_count: '{{ctx.metadata.threshold}}',\n                  field: ERROR_GROUP_ID,\n                  size: 10,\n                  order: {\n                    _count: 'desc'\n                  }\n                },\n                aggs: {\n                  sample: {\n                    top_hits: {\n                      _source: [\n                        ERROR_LOG_MESSAGE,\n                        ERROR_EXC_MESSAGE,\n                        ERROR_EXC_HANDLED,\n                        ERROR_CULPRIT,\n                        ERROR_GROUP_ID,\n                        '@timestamp'\n                      ],\n                      sort: [\n                        {\n                          '@timestamp': 'desc'\n                        }\n                      ],\n                      size: 1\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    condition: {\n      script: {\n        source:\n          'return ctx.payload.aggregations.error_groups.buckets.length > 0'\n      }\n    },\n    actions\n  };\n\n  if (slackUrlPath) {\n    body.actions.slack_webhook = {\n      webhook: {\n        scheme: 'https',\n        host: 'hooks.slack.com',\n        port: 443,\n        method: 'POST',\n        path: '{{ctx.metadata.slackUrlPath}}',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: `__json__::${JSON.stringify({\n          text: slackTemplate\n        })}`\n      }\n    };\n  }\n\n  if (!isEmpty(emails)) {\n    body.actions.email = {\n      email: {\n        to: '{{#join}}ctx.metadata.emails{{/join}}',\n        subject: i18n.translate(\n          'xpack.apm.serviceDetails.enableErrorReportsPanel.emailSubjectText',\n          {\n            defaultMessage:\n              '{serviceName} has error groups which exceeds the threshold',\n            values: { serviceName: '\"{{ctx.metadata.serviceName}}\"' }\n          }\n        ),\n        body: {\n          html: emailTemplate\n        }\n      }\n    };\n  }\n\n  await createWatch(id, body);\n  return id;\n}\n"]}]}