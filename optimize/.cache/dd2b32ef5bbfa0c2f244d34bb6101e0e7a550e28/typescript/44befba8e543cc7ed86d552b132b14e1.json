{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/components/nodes_overview/table.tsx","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/components/nodes_overview/table.tsx","mtime":1567631711981},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport * as tslib_1 from \"tslib\";\nimport { EuiButtonEmpty, EuiInMemoryTable, EuiToolTip } from '@elastic/eui';\nimport { injectI18n } from '@kbn/i18n/react';\nimport { last } from 'lodash';\nimport React from 'react';\nimport { createWaffleMapNode } from '../../containers/waffle/nodes_to_wafflemap';\nimport { fieldToName } from '../waffle/lib/field_to_display_name';\nimport { NodeContextMenu } from '../waffle/node_context_menu';\nvar initialState = {\n    isPopoverOpen: [],\n};\nvar getGroupPaths = function (path) {\n    switch (path.length) {\n        case 3:\n            return path.slice(0, 2);\n        case 2:\n            return path.slice(0, 1);\n        default:\n            return [];\n    }\n};\nexport var TableView = injectI18n(/** @class */ (function (_super) {\n    tslib_1.__extends(class_1, _super);\n    function class_1() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.state = initialState;\n        _this.openPopoverFor = function (id) { return function () {\n            _this.setState(function (prevState) { return ({ isPopoverOpen: tslib_1.__spread(prevState.isPopoverOpen, [id]) }); });\n        }; };\n        _this.closePopoverFor = function (id) { return function () {\n            if (_this.state.isPopoverOpen.includes(id)) {\n                _this.setState(function (prevState) {\n                    return {\n                        isPopoverOpen: prevState.isPopoverOpen.filter(function (subject) { return subject !== id; }),\n                    };\n                });\n            }\n        }; };\n        return _this;\n    }\n    class_1.prototype.render = function () {\n        var _this = this;\n        var _a = this.props, nodes = _a.nodes, options = _a.options, formatter = _a.formatter, intl = _a.intl, timeRange = _a.timeRange, nodeType = _a.nodeType;\n        var columns = tslib_1.__spread([\n            {\n                field: 'name',\n                name: intl.formatMessage({\n                    id: 'xpack.infra.tableView.columnName.name',\n                    defaultMessage: 'Name',\n                }),\n                sortable: true,\n                truncateText: true,\n                textOnly: true,\n                render: function (value, item) { return (React.createElement(NodeContextMenu, { node: item.node, nodeType: nodeType, closePopover: _this.closePopoverFor(item.node.pathId), timeRange: timeRange, isPopoverOpen: _this.state.isPopoverOpen.includes(item.node.pathId), options: options },\n                    React.createElement(EuiButtonEmpty, { onClick: _this.openPopoverFor(item.node.pathId) }, value))); },\n            }\n        ], options.groupBy.map(function (grouping, index) { return ({\n            field: \"group_\" + index,\n            name: fieldToName((grouping && grouping.field) || '', intl),\n            sortable: true,\n            truncateText: true,\n            textOnly: true,\n            render: function (value) {\n                var handleClick = function () { return _this.props.onFilter(grouping.field + \":\\\"\" + value + \"\\\"\"); };\n                return (React.createElement(EuiToolTip, { content: \"Set Filter\" },\n                    React.createElement(EuiButtonEmpty, { onClick: handleClick }, value)));\n            },\n        }); }), [\n            {\n                field: 'value',\n                name: intl.formatMessage({\n                    id: 'xpack.infra.tableView.columnName.last1m',\n                    defaultMessage: 'Last 1m',\n                }),\n                sortable: true,\n                truncateText: true,\n                dataType: 'number',\n                render: function (value) { return React.createElement(\"span\", null, formatter(value)); },\n            },\n            {\n                field: 'avg',\n                name: intl.formatMessage({\n                    id: 'xpack.infra.tableView.columnName.avg',\n                    defaultMessage: 'Avg',\n                }),\n                sortable: true,\n                truncateText: true,\n                dataType: 'number',\n                render: function (value) { return React.createElement(\"span\", null, formatter(value)); },\n            },\n            {\n                field: 'max',\n                name: intl.formatMessage({\n                    id: 'xpack.infra.tableView.columnName.max',\n                    defaultMessage: 'Max',\n                }),\n                sortable: true,\n                truncateText: true,\n                dataType: 'number',\n                render: function (value) { return React.createElement(\"span\", null, formatter(value)); },\n            },\n        ]);\n        var items = nodes.map(function (node) {\n            var name = last(node.path);\n            return tslib_1.__assign({ name: (name && name.label) || 'unknown' }, getGroupPaths(node.path).reduce(function (acc, path, index) {\n                var _a;\n                return (tslib_1.__assign({}, acc, (_a = {}, _a[\"group_\" + index] = path.label, _a)));\n            }, {}), { value: node.metric.value, avg: node.metric.avg, max: node.metric.max, node: createWaffleMapNode(node) });\n        });\n        var initialSorting = {\n            sort: {\n                field: 'value',\n                direction: 'desc',\n            },\n        };\n        return (React.createElement(EuiInMemoryTable, { pagination: true, sorting: initialSorting, items: items, columns: columns }));\n    };\n    return class_1;\n}(React.PureComponent)));\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/components/nodes_overview/table.tsx","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/components/nodes_overview/table.tsx"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport { EuiButtonEmpty, EuiInMemoryTable, EuiToolTip } from '@elastic/eui';\nimport { InjectedIntl, injectI18n } from '@kbn/i18n/react';\nimport { last } from 'lodash';\nimport React from 'react';\nimport { InfraNodeType } from '../../../server/lib/adapters/nodes';\nimport { createWaffleMapNode } from '../../containers/waffle/nodes_to_wafflemap';\nimport { InfraNode, InfraNodePath, InfraTimerangeInput } from '../../graphql/types';\nimport { InfraWaffleMapNode, InfraWaffleMapOptions } from '../../lib/lib';\nimport { fieldToName } from '../waffle/lib/field_to_display_name';\nimport { NodeContextMenu } from '../waffle/node_context_menu';\n\ninterface Props {\n  nodes: InfraNode[];\n  nodeType: InfraNodeType;\n  options: InfraWaffleMapOptions;\n  formatter: (subject: string | number) => string;\n  timeRange: InfraTimerangeInput;\n  intl: InjectedIntl;\n  onFilter: (filter: string) => void;\n}\n\nconst initialState = {\n  isPopoverOpen: [] as string[],\n};\n\ntype State = Readonly<typeof initialState>;\n\nconst getGroupPaths = (path: InfraNodePath[]) => {\n  switch (path.length) {\n    case 3:\n      return path.slice(0, 2);\n    case 2:\n      return path.slice(0, 1);\n    default:\n      return [];\n  }\n};\n\nexport const TableView = injectI18n(\n  class extends React.PureComponent<Props, State> {\n    public readonly state: State = initialState;\n    public render() {\n      const { nodes, options, formatter, intl, timeRange, nodeType } = this.props;\n      const columns = [\n        {\n          field: 'name',\n          name: intl.formatMessage({\n            id: 'xpack.infra.tableView.columnName.name',\n            defaultMessage: 'Name',\n          }),\n          sortable: true,\n          truncateText: true,\n          textOnly: true,\n          render: (value: string, item: { node: InfraWaffleMapNode }) => (\n            <NodeContextMenu\n              node={item.node}\n              nodeType={nodeType}\n              closePopover={this.closePopoverFor(item.node.pathId)}\n              timeRange={timeRange}\n              isPopoverOpen={this.state.isPopoverOpen.includes(item.node.pathId)}\n              options={options}\n            >\n              <EuiButtonEmpty onClick={this.openPopoverFor(item.node.pathId)}>\n                {value}\n              </EuiButtonEmpty>\n            </NodeContextMenu>\n          ),\n        },\n        ...options.groupBy.map((grouping, index) => ({\n          field: `group_${index}`,\n          name: fieldToName((grouping && grouping.field) || '', intl),\n          sortable: true,\n          truncateText: true,\n          textOnly: true,\n          render: (value: string) => {\n            const handleClick = () => this.props.onFilter(`${grouping.field}:\"${value}\"`);\n            return (\n              <EuiToolTip content=\"Set Filter\">\n                <EuiButtonEmpty onClick={handleClick}>{value}</EuiButtonEmpty>\n              </EuiToolTip>\n            );\n          },\n        })),\n        {\n          field: 'value',\n          name: intl.formatMessage({\n            id: 'xpack.infra.tableView.columnName.last1m',\n            defaultMessage: 'Last 1m',\n          }),\n          sortable: true,\n          truncateText: true,\n          dataType: 'number',\n          render: (value: number) => <span>{formatter(value)}</span>,\n        },\n        {\n          field: 'avg',\n          name: intl.formatMessage({\n            id: 'xpack.infra.tableView.columnName.avg',\n            defaultMessage: 'Avg',\n          }),\n          sortable: true,\n          truncateText: true,\n          dataType: 'number',\n          render: (value: number) => <span>{formatter(value)}</span>,\n        },\n        {\n          field: 'max',\n          name: intl.formatMessage({\n            id: 'xpack.infra.tableView.columnName.max',\n            defaultMessage: 'Max',\n          }),\n          sortable: true,\n          truncateText: true,\n          dataType: 'number',\n          render: (value: number) => <span>{formatter(value)}</span>,\n        },\n      ];\n      const items = nodes.map(node => {\n        const name = last(node.path);\n        return {\n          name: (name && name.label) || 'unknown',\n          ...getGroupPaths(node.path).reduce(\n            (acc, path, index) => ({\n              ...acc,\n              [`group_${index}`]: path.label,\n            }),\n            {}\n          ),\n          value: node.metric.value,\n          avg: node.metric.avg,\n          max: node.metric.max,\n          node: createWaffleMapNode(node),\n        };\n      });\n      const initialSorting = {\n        sort: {\n          field: 'value',\n          direction: 'desc',\n        },\n      };\n      return (\n        <EuiInMemoryTable\n          pagination={true}\n          sorting={initialSorting}\n          items={items}\n          columns={columns}\n        />\n      );\n    }\n\n    private openPopoverFor = (id: string) => () => {\n      this.setState(prevState => ({ isPopoverOpen: [...prevState.isPopoverOpen, id] }));\n    };\n\n    private closePopoverFor = (id: string) => () => {\n      if (this.state.isPopoverOpen.includes(id)) {\n        this.setState(prevState => {\n          return {\n            isPopoverOpen: prevState.isPopoverOpen.filter(subject => subject !== id),\n          };\n        });\n      }\n    };\n  }\n);\n"]}]}