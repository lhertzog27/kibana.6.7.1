{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/reporting/public/components/report_listing.tsx","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/reporting/public/components/report_listing.tsx","mtime":1567631712280},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport * as tslib_1 from \"tslib\";\nimport { i18n } from '@kbn/i18n';\nimport { FormattedMessage, injectI18n } from '@kbn/i18n/react';\nimport moment from 'moment';\nimport React, { Component } from 'react';\nimport chrome from 'ui/chrome';\nimport { toastNotifications } from 'ui/notify';\nimport { Poller } from '../../../../common/poller';\nimport { JobStatuses } from '../constants/job_statuses';\nimport { downloadReport } from '../lib/download_report';\nimport { jobQueueClient } from '../lib/job_queue_client';\nimport { ReportErrorButton } from './report_error_button';\nimport { ReportInfoButton } from './report_info_button';\nimport { EuiBasicTable, EuiButtonIcon, EuiPageContent, EuiSpacer, EuiText, EuiTextColor, EuiTitle, EuiToolTip, } from '@elastic/eui';\nvar jobStatusLabelsMap = new Map([\n    [\n        JobStatuses.PENDING,\n        i18n.translate('xpack.reporting.jobStatuses.pendingText', {\n            defaultMessage: 'Pending',\n        }),\n    ],\n    [\n        JobStatuses.PROCESSING,\n        i18n.translate('xpack.reporting.jobStatuses.processingText', {\n            defaultMessage: 'Processing',\n        }),\n    ],\n    [\n        JobStatuses.COMPLETED,\n        i18n.translate('xpack.reporting.jobStatuses.completedText', {\n            defaultMessage: 'Completed',\n        }),\n    ],\n    [\n        JobStatuses.FAILED,\n        i18n.translate('xpack.reporting.jobStatuses.failedText', {\n            defaultMessage: 'Failed',\n        }),\n    ],\n    [\n        JobStatuses.CANCELLED,\n        i18n.translate('xpack.reporting.jobStatuses.cancelledText', {\n            defaultMessage: 'Cancelled',\n        }),\n    ],\n]);\nvar ReportListingUi = /** @class */ (function (_super) {\n    tslib_1.__extends(ReportListingUi, _super);\n    function ReportListingUi(props) {\n        var _this = _super.call(this, props) || this;\n        _this.renderDownloadButton = function (record) {\n            if (record.status !== JobStatuses.COMPLETED) {\n                return;\n            }\n            var intl = _this.props.intl;\n            var button = (React.createElement(EuiButtonIcon, { onClick: function () { return downloadReport(record.id); }, iconType: \"importAction\", \"aria-label\": intl.formatMessage({\n                    id: 'xpack.reporting.listing.table.downloadReportAriaLabel',\n                    defaultMessage: 'Download report',\n                }) }));\n            if (record.max_size_reached) {\n                return (React.createElement(EuiToolTip, { position: \"top\", content: intl.formatMessage({\n                        id: 'xpack.reporting.listing.table.maxSizeReachedTooltip',\n                        defaultMessage: 'Max size reached, contains partial data.',\n                    }) }, button));\n            }\n            return button;\n        };\n        _this.renderReportErrorButton = function (record) {\n            if (record.status !== JobStatuses.FAILED) {\n                return;\n            }\n            return React.createElement(ReportErrorButton, { jobId: record.id });\n        };\n        _this.renderInfoButton = function (record) {\n            return React.createElement(ReportInfoButton, { jobId: record.id });\n        };\n        _this.onTableChange = function (_a) {\n            var page = _a.page;\n            var pageIndex = page.index;\n            _this.setState({\n                page: pageIndex,\n            }, _this.fetchJobs);\n        };\n        _this.fetchJobs = function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n            var jobs, total, kfetchError_1;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        // avoid page flicker when poller is updating table - only display loading screen on first load\n                        if (this.isInitialJobsFetch) {\n                            this.setState({ isLoading: true });\n                        }\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 4, , 5]);\n                        return [4 /*yield*/, jobQueueClient.list(this.state.page)];\n                    case 2:\n                        jobs = _a.sent();\n                        return [4 /*yield*/, jobQueueClient.total()];\n                    case 3:\n                        total = _a.sent();\n                        this.isInitialJobsFetch = false;\n                        return [3 /*break*/, 5];\n                    case 4:\n                        kfetchError_1 = _a.sent();\n                        if (!this.licenseAllowsToShowThisPage()) {\n                            toastNotifications.addDanger(this.props.badLicenseMessage);\n                            this.props.redirect('/management');\n                            return [2 /*return*/];\n                        }\n                        if (kfetchError_1.res.status !== 401 && kfetchError_1.res.status !== 403) {\n                            toastNotifications.addDanger(kfetchError_1.res.statusText ||\n                                this.props.intl.formatMessage({\n                                    id: 'xpack.reporting.listing.table.requestFailedErrorMessage',\n                                    defaultMessage: 'Request failed',\n                                }));\n                        }\n                        if (this.mounted) {\n                            this.setState({ isLoading: false, jobs: [], total: 0 });\n                        }\n                        return [2 /*return*/];\n                    case 5:\n                        if (this.mounted) {\n                            this.setState({\n                                isLoading: false,\n                                total: total,\n                                jobs: jobs.map(function (job) { return ({\n                                    id: job._id,\n                                    type: job._source.jobtype,\n                                    object_type: job._source.payload.type,\n                                    object_title: job._source.payload.title,\n                                    created_by: job._source.created_by,\n                                    created_at: job._source.created_at,\n                                    started_at: job._source.started_at,\n                                    completed_at: job._source.completed_at,\n                                    status: job._source.status,\n                                    statusLabel: jobStatusLabelsMap.get(job._source.status) || job._source.status,\n                                    max_size_reached: job._source.output ? job._source.output.max_size_reached : false,\n                                    attempts: job._source.attempts,\n                                    max_attempts: job._source.max_attempts,\n                                }); }),\n                            });\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        }); };\n        _this.licenseAllowsToShowThisPage = function () {\n            return _this.props.showLinks && _this.props.enableLinks;\n        };\n        _this.state = {\n            page: 0,\n            total: 0,\n            jobs: [],\n            isLoading: false,\n        };\n        _this.isInitialJobsFetch = true;\n        return _this;\n    }\n    ReportListingUi.prototype.render = function () {\n        return (React.createElement(EuiPageContent, { horizontalPosition: \"center\", className: \"euiPageBody--restrictWidth-default\" },\n            React.createElement(EuiTitle, null,\n                React.createElement(\"h1\", null,\n                    React.createElement(FormattedMessage, { id: \"xpack.reporting.listing.reportstitle\", defaultMessage: \"Reports\" }))),\n            React.createElement(EuiText, { color: \"subdued\" },\n                React.createElement(\"p\", null,\n                    React.createElement(FormattedMessage, { id: \"xpack.reporting.listing.reports.subtitle\", defaultMessage: \"Find reports generated in Kibana applications here\" }))),\n            React.createElement(EuiSpacer, null),\n            this.renderTable()));\n    };\n    ReportListingUi.prototype.componentWillUnmount = function () {\n        this.mounted = false;\n        this.poller.stop();\n    };\n    ReportListingUi.prototype.componentDidMount = function () {\n        var _this = this;\n        this.mounted = true;\n        var jobsRefresh = chrome.getInjected('reportingPollConfig').jobsRefresh;\n        this.poller = new Poller({\n            functionToPoll: function () {\n                return _this.fetchJobs();\n            },\n            pollFrequencyInMillis: jobsRefresh.interval,\n            trailing: false,\n            continuePollingOnError: true,\n            pollFrequencyErrorMultiplier: jobsRefresh.intervalErrorMultiplier,\n        });\n        this.poller.start();\n    };\n    ReportListingUi.prototype.renderTable = function () {\n        var _this = this;\n        var intl = this.props.intl;\n        var tableColumns = [\n            {\n                field: 'object_title',\n                name: intl.formatMessage({\n                    id: 'xpack.reporting.listing.tableColumns.reportTitle',\n                    defaultMessage: 'Report',\n                }),\n                render: function (objectTitle, record) {\n                    return (React.createElement(\"div\", null,\n                        React.createElement(\"div\", null, objectTitle),\n                        React.createElement(EuiText, { size: \"s\" },\n                            React.createElement(EuiTextColor, { color: \"subdued\" }, record.object_type))));\n                },\n            },\n            {\n                field: 'created_at',\n                name: intl.formatMessage({\n                    id: 'xpack.reporting.listing.tableColumns.createdAtTitle',\n                    defaultMessage: 'Created at',\n                }),\n                render: function (createdAt, record) {\n                    if (record.created_by) {\n                        return (React.createElement(\"div\", null,\n                            React.createElement(\"div\", null, _this.formatDate(createdAt)),\n                            React.createElement(\"span\", null, record.created_by)));\n                    }\n                    return _this.formatDate(createdAt);\n                },\n            },\n            {\n                field: 'status',\n                name: intl.formatMessage({\n                    id: 'xpack.reporting.listing.tableColumns.statusTitle',\n                    defaultMessage: 'Status',\n                }),\n                render: function (status, record) {\n                    if (status === 'pending') {\n                        return (React.createElement(\"div\", null,\n                            React.createElement(FormattedMessage, { id: \"xpack.reporting.listing.tableValue.createdAtDetail.pendingStatusReachedText\", defaultMessage: \"Pending - waiting for job to be processed\" })));\n                    }\n                    var maxSizeReached;\n                    if (record.max_size_reached) {\n                        maxSizeReached = (React.createElement(\"span\", null,\n                            React.createElement(FormattedMessage, { id: \"xpack.reporting.listing.tableValue.createdAtDetail.maxSizeReachedText\", defaultMessage: \" - Max size reached\" })));\n                    }\n                    var statusTimestamp;\n                    if (status === JobStatuses.PROCESSING && record.started_at) {\n                        statusTimestamp = _this.formatDate(record.started_at);\n                    }\n                    else if (record.completed_at &&\n                        (status === JobStatuses.COMPLETED || status === JobStatuses.FAILED)) {\n                        statusTimestamp = _this.formatDate(record.completed_at);\n                    }\n                    var statusLabel = jobStatusLabelsMap.get(status) || status;\n                    if (status === JobStatuses.PROCESSING) {\n                        statusLabel = statusLabel + (\" (attempt \" + record.attempts + \" of \" + record.max_attempts + \")\");\n                    }\n                    if (statusTimestamp) {\n                        return (React.createElement(\"div\", null,\n                            React.createElement(FormattedMessage, { id: \"xpack.reporting.listing.tableValue.createdAtDetail.statusTimestampText\", defaultMessage: \"{statusLabel} at {statusTimestamp}\", values: {\n                                    statusLabel: statusLabel,\n                                    statusTimestamp: React.createElement(\"span\", { className: \"eui-textNoWrap\" }, statusTimestamp),\n                                } }),\n                            maxSizeReached));\n                    }\n                    // unknown status\n                    return (React.createElement(\"div\", null,\n                        statusLabel,\n                        maxSizeReached));\n                },\n            },\n            {\n                name: intl.formatMessage({\n                    id: 'xpack.reporting.listing.tableColumns.actionsTitle',\n                    defaultMessage: 'Actions',\n                }),\n                actions: [\n                    {\n                        render: function (record) {\n                            return (React.createElement(\"div\", null,\n                                _this.renderDownloadButton(record),\n                                _this.renderReportErrorButton(record),\n                                _this.renderInfoButton(record)));\n                        },\n                    },\n                ],\n            },\n        ];\n        var pagination = {\n            pageIndex: this.state.page,\n            pageSize: 10,\n            totalItemCount: this.state.total,\n            hidePerPageOptions: true,\n        };\n        return (React.createElement(EuiBasicTable, { itemId: 'id', items: this.state.jobs, loading: this.state.isLoading, columns: tableColumns, noItemsMessage: this.state.isLoading\n                ? intl.formatMessage({\n                    id: 'xpack.reporting.listing.table.loadingReportsDescription',\n                    defaultMessage: 'Loading reports',\n                })\n                : intl.formatMessage({\n                    id: 'xpack.reporting.listing.table.noCreatedReportsDescription',\n                    defaultMessage: 'No reports have been created',\n                }), pagination: pagination, onChange: this.onTableChange }));\n    };\n    ReportListingUi.prototype.formatDate = function (timestamp) {\n        try {\n            return moment(timestamp).format('YYYY-MM-DD @ hh:mm A');\n        }\n        catch (error) {\n            // ignore parse error and display unformatted value\n            return timestamp;\n        }\n    };\n    return ReportListingUi;\n}(Component));\nexport var ReportListing = injectI18n(ReportListingUi);\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/reporting/public/components/report_listing.tsx","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/reporting/public/components/report_listing.tsx"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\n// TODO: Remove once typescript definitions are in EUI\ndeclare module '@elastic/eui' {\n  export const EuiBasicTable: React.SFC<any>;\n}\n\nimport { i18n } from '@kbn/i18n';\nimport { FormattedMessage, InjectedIntl, injectI18n } from '@kbn/i18n/react';\nimport moment from 'moment';\nimport React, { Component } from 'react';\nimport chrome from 'ui/chrome';\nimport { toastNotifications } from 'ui/notify';\nimport { Poller } from '../../../../common/poller';\nimport { JobStatuses } from '../constants/job_statuses';\nimport { downloadReport } from '../lib/download_report';\nimport { jobQueueClient, JobQueueEntry } from '../lib/job_queue_client';\nimport { ReportErrorButton } from './report_error_button';\nimport { ReportInfoButton } from './report_info_button';\n\nimport {\n  EuiBasicTable,\n  EuiButtonIcon,\n  EuiPageContent,\n  EuiSpacer,\n  EuiText,\n  EuiTextColor,\n  EuiTitle,\n  EuiToolTip,\n} from '@elastic/eui';\n\ninterface Job {\n  id: string;\n  type: string;\n  object_type: string;\n  object_title: string;\n  created_by?: string;\n  created_at: string;\n  started_at?: string;\n  completed_at?: string;\n  status: string;\n  statusLabel: string;\n  max_size_reached: boolean;\n  attempts: number;\n  max_attempts: number;\n}\n\ninterface Props {\n  badLicenseMessage: string;\n  showLinks: boolean;\n  enableLinks: boolean;\n  redirect: (url: string) => void;\n  intl: InjectedIntl;\n}\n\ninterface State {\n  page: number;\n  total: number;\n  jobs: Job[];\n  isLoading: boolean;\n}\n\nconst jobStatusLabelsMap = new Map<JobStatuses, string>([\n  [\n    JobStatuses.PENDING,\n    i18n.translate('xpack.reporting.jobStatuses.pendingText', {\n      defaultMessage: 'Pending',\n    }),\n  ],\n  [\n    JobStatuses.PROCESSING,\n    i18n.translate('xpack.reporting.jobStatuses.processingText', {\n      defaultMessage: 'Processing',\n    }),\n  ],\n  [\n    JobStatuses.COMPLETED,\n    i18n.translate('xpack.reporting.jobStatuses.completedText', {\n      defaultMessage: 'Completed',\n    }),\n  ],\n  [\n    JobStatuses.FAILED,\n    i18n.translate('xpack.reporting.jobStatuses.failedText', {\n      defaultMessage: 'Failed',\n    }),\n  ],\n  [\n    JobStatuses.CANCELLED,\n    i18n.translate('xpack.reporting.jobStatuses.cancelledText', {\n      defaultMessage: 'Cancelled',\n    }),\n  ],\n]);\n\nclass ReportListingUi extends Component<Props, State> {\n  private mounted?: boolean;\n  private poller?: any;\n  private isInitialJobsFetch: boolean;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      page: 0,\n      total: 0,\n      jobs: [],\n      isLoading: false,\n    };\n\n    this.isInitialJobsFetch = true;\n  }\n\n  public render() {\n    return (\n      <EuiPageContent horizontalPosition=\"center\" className=\"euiPageBody--restrictWidth-default\">\n        <EuiTitle>\n          <h1>\n            <FormattedMessage id=\"xpack.reporting.listing.reportstitle\" defaultMessage=\"Reports\" />\n          </h1>\n        </EuiTitle>\n        <EuiText color=\"subdued\">\n          <p>\n            <FormattedMessage\n              id=\"xpack.reporting.listing.reports.subtitle\"\n              defaultMessage=\"Find reports generated in Kibana applications here\"\n            />\n          </p>\n        </EuiText>\n        <EuiSpacer />\n        {this.renderTable()}\n      </EuiPageContent>\n    );\n  }\n\n  public componentWillUnmount() {\n    this.mounted = false;\n    this.poller.stop();\n  }\n\n  public componentDidMount() {\n    this.mounted = true;\n    const { jobsRefresh } = chrome.getInjected('reportingPollConfig');\n    this.poller = new Poller({\n      functionToPoll: () => {\n        return this.fetchJobs();\n      },\n      pollFrequencyInMillis: jobsRefresh.interval,\n      trailing: false,\n      continuePollingOnError: true,\n      pollFrequencyErrorMultiplier: jobsRefresh.intervalErrorMultiplier,\n    });\n    this.poller.start();\n  }\n\n  private renderTable() {\n    const { intl } = this.props;\n\n    const tableColumns = [\n      {\n        field: 'object_title',\n        name: intl.formatMessage({\n          id: 'xpack.reporting.listing.tableColumns.reportTitle',\n          defaultMessage: 'Report',\n        }),\n        render: (objectTitle: string, record: Job) => {\n          return (\n            <div>\n              <div>{objectTitle}</div>\n              <EuiText size=\"s\">\n                <EuiTextColor color=\"subdued\">{record.object_type}</EuiTextColor>\n              </EuiText>\n            </div>\n          );\n        },\n      },\n      {\n        field: 'created_at',\n        name: intl.formatMessage({\n          id: 'xpack.reporting.listing.tableColumns.createdAtTitle',\n          defaultMessage: 'Created at',\n        }),\n        render: (createdAt: string, record: Job) => {\n          if (record.created_by) {\n            return (\n              <div>\n                <div>{this.formatDate(createdAt)}</div>\n                <span>{record.created_by}</span>\n              </div>\n            );\n          }\n          return this.formatDate(createdAt);\n        },\n      },\n      {\n        field: 'status',\n        name: intl.formatMessage({\n          id: 'xpack.reporting.listing.tableColumns.statusTitle',\n          defaultMessage: 'Status',\n        }),\n        render: (status: string, record: Job) => {\n          if (status === 'pending') {\n            return (\n              <div>\n                <FormattedMessage\n                  id=\"xpack.reporting.listing.tableValue.createdAtDetail.pendingStatusReachedText\"\n                  defaultMessage=\"Pending - waiting for job to be processed\"\n                />\n              </div>\n            );\n          }\n\n          let maxSizeReached;\n          if (record.max_size_reached) {\n            maxSizeReached = (\n              <span>\n                <FormattedMessage\n                  id=\"xpack.reporting.listing.tableValue.createdAtDetail.maxSizeReachedText\"\n                  defaultMessage=\" - Max size reached\"\n                />\n              </span>\n            );\n          }\n\n          let statusTimestamp;\n          if (status === JobStatuses.PROCESSING && record.started_at) {\n            statusTimestamp = this.formatDate(record.started_at);\n          } else if (\n            record.completed_at &&\n            (status === JobStatuses.COMPLETED || status === JobStatuses.FAILED)\n          ) {\n            statusTimestamp = this.formatDate(record.completed_at);\n          }\n\n          let statusLabel = jobStatusLabelsMap.get(status as JobStatuses) || status;\n\n          if (status === JobStatuses.PROCESSING) {\n            statusLabel = statusLabel + ` (attempt ${record.attempts} of ${record.max_attempts})`;\n          }\n\n          if (statusTimestamp) {\n            return (\n              <div>\n                <FormattedMessage\n                  id=\"xpack.reporting.listing.tableValue.createdAtDetail.statusTimestampText\"\n                  defaultMessage=\"{statusLabel} at {statusTimestamp}\"\n                  values={{\n                    statusLabel,\n                    statusTimestamp: <span className=\"eui-textNoWrap\">{statusTimestamp}</span>,\n                  }}\n                />\n                {maxSizeReached}\n              </div>\n            );\n          }\n\n          // unknown status\n          return (\n            <div>\n              {statusLabel}\n              {maxSizeReached}\n            </div>\n          );\n        },\n      },\n      {\n        name: intl.formatMessage({\n          id: 'xpack.reporting.listing.tableColumns.actionsTitle',\n          defaultMessage: 'Actions',\n        }),\n        actions: [\n          {\n            render: (record: Job) => {\n              return (\n                <div>\n                  {this.renderDownloadButton(record)}\n                  {this.renderReportErrorButton(record)}\n                  {this.renderInfoButton(record)}\n                </div>\n              );\n            },\n          },\n        ],\n      },\n    ];\n\n    const pagination = {\n      pageIndex: this.state.page,\n      pageSize: 10,\n      totalItemCount: this.state.total,\n      hidePerPageOptions: true,\n    };\n\n    return (\n      <EuiBasicTable\n        itemId={'id'}\n        items={this.state.jobs}\n        loading={this.state.isLoading}\n        columns={tableColumns}\n        noItemsMessage={\n          this.state.isLoading\n            ? intl.formatMessage({\n                id: 'xpack.reporting.listing.table.loadingReportsDescription',\n                defaultMessage: 'Loading reports',\n              })\n            : intl.formatMessage({\n                id: 'xpack.reporting.listing.table.noCreatedReportsDescription',\n                defaultMessage: 'No reports have been created',\n              })\n        }\n        pagination={pagination}\n        onChange={this.onTableChange}\n      />\n    );\n  }\n\n  private renderDownloadButton = (record: Job) => {\n    if (record.status !== JobStatuses.COMPLETED) {\n      return;\n    }\n\n    const { intl } = this.props;\n    const button = (\n      <EuiButtonIcon\n        onClick={() => downloadReport(record.id)}\n        iconType=\"importAction\"\n        aria-label={intl.formatMessage({\n          id: 'xpack.reporting.listing.table.downloadReportAriaLabel',\n          defaultMessage: 'Download report',\n        })}\n      />\n    );\n\n    if (record.max_size_reached) {\n      return (\n        <EuiToolTip\n          position=\"top\"\n          content={intl.formatMessage({\n            id: 'xpack.reporting.listing.table.maxSizeReachedTooltip',\n            defaultMessage: 'Max size reached, contains partial data.',\n          })}\n        >\n          {button}\n        </EuiToolTip>\n      );\n    }\n\n    return button;\n  };\n\n  private renderReportErrorButton = (record: Job) => {\n    if (record.status !== JobStatuses.FAILED) {\n      return;\n    }\n\n    return <ReportErrorButton jobId={record.id} />;\n  };\n\n  private renderInfoButton = (record: Job) => {\n    return <ReportInfoButton jobId={record.id} />;\n  };\n\n  private onTableChange = ({ page }: { page: { index: number } }) => {\n    const { index: pageIndex } = page;\n\n    this.setState(\n      {\n        page: pageIndex,\n      },\n      this.fetchJobs\n    );\n  };\n\n  private fetchJobs = async () => {\n    // avoid page flicker when poller is updating table - only display loading screen on first load\n    if (this.isInitialJobsFetch) {\n      this.setState({ isLoading: true });\n    }\n\n    let jobs: JobQueueEntry[];\n    let total: number;\n    try {\n      jobs = await jobQueueClient.list(this.state.page);\n      total = await jobQueueClient.total();\n      this.isInitialJobsFetch = false;\n    } catch (kfetchError) {\n      if (!this.licenseAllowsToShowThisPage()) {\n        toastNotifications.addDanger(this.props.badLicenseMessage);\n        this.props.redirect('/management');\n        return;\n      }\n\n      if (kfetchError.res.status !== 401 && kfetchError.res.status !== 403) {\n        toastNotifications.addDanger(\n          kfetchError.res.statusText ||\n            this.props.intl.formatMessage({\n              id: 'xpack.reporting.listing.table.requestFailedErrorMessage',\n              defaultMessage: 'Request failed',\n            })\n        );\n      }\n      if (this.mounted) {\n        this.setState({ isLoading: false, jobs: [], total: 0 });\n      }\n      return;\n    }\n\n    if (this.mounted) {\n      this.setState({\n        isLoading: false,\n        total,\n        jobs: jobs.map(\n          (job: JobQueueEntry): Job => ({\n            id: job._id,\n            type: job._source.jobtype,\n            object_type: job._source.payload.type,\n            object_title: job._source.payload.title,\n            created_by: job._source.created_by,\n            created_at: job._source.created_at,\n            started_at: job._source.started_at,\n            completed_at: job._source.completed_at,\n            status: job._source.status,\n            statusLabel:\n              jobStatusLabelsMap.get(job._source.status as JobStatuses) || job._source.status,\n            max_size_reached: job._source.output ? job._source.output.max_size_reached : false,\n            attempts: job._source.attempts,\n            max_attempts: job._source.max_attempts,\n          })\n        ),\n      });\n    }\n  };\n\n  private licenseAllowsToShowThisPage = () => {\n    return this.props.showLinks && this.props.enableLinks;\n  };\n\n  private formatDate(timestamp: string) {\n    try {\n      return moment(timestamp).format('YYYY-MM-DD @ hh:mm A');\n    } catch (error) {\n      // ignore parse error and display unformatted value\n      return timestamp;\n    }\n  }\n}\n\nexport const ReportListing = injectI18n(ReportListingUi);\n"]}]}