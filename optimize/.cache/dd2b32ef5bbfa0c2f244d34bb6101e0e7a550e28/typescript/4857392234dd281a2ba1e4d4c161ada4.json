{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/beats_management/public/components/config_list.tsx","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/beats_management/public/components/config_list.tsx","mtime":1567631711879},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport * as tslib_1 from \"tslib\";\n// @ts-ignore\nimport { EuiBasicTable, EuiLink } from '@elastic/eui';\nimport { injectI18n } from '@kbn/i18n/react';\nimport React from 'react';\nimport { configBlockSchemas } from '../../common/config_schemas';\nimport { translateConfigSchema } from '../../common/config_schemas_translations_map';\nvar pagination = {\n    pageSize: 5,\n    hidePerPageOptions: true,\n};\nvar ConfigListUi = function (props) { return (React.createElement(EuiBasicTable, { items: props.configs.blocks || [], itemId: \"id\", pagination: tslib_1.__assign({}, pagination, { totalItemCount: props.configs.total, pageIndex: props.configs.page }), onChange: function (table) {\n        if (table === void 0) { table = { page: { index: 0, size: 5 } }; }\n        if (props.onTableChange) {\n            props.onTableChange(table.page.index, table.page.size);\n        }\n    }, columns: [\n        {\n            field: 'type',\n            name: props.intl.formatMessage({\n                id: 'xpack.beatsManagement.tagTable.typeColumnName',\n                defaultMessage: 'Type',\n            }),\n            truncateText: false,\n            render: function (type, config) {\n                var translatedConfig = translateConfigSchema(configBlockSchemas).find(function (sc) { return sc.id === type; });\n                return (React.createElement(EuiLink, { onClick: function () { return props.onConfigClick('edit', config); } }, translatedConfig ? translatedConfig.name : type));\n            },\n        },\n        {\n            field: 'module',\n            name: props.intl.formatMessage({\n                id: 'xpack.beatsManagement.tagTable.moduleColumnName',\n                defaultMessage: 'Module',\n            }),\n            truncateText: false,\n            render: function (value, config) {\n                return (config.config._sub_type ||\n                    props.intl.formatMessage({\n                        id: 'xpack.beatsManagement.tagTable.moduleColumn.notAvailibaleLabel',\n                        defaultMessage: 'N/A',\n                    }));\n            },\n        },\n        {\n            field: 'description',\n            name: props.intl.formatMessage({\n                id: 'xpack.beatsManagement.tagTable.descriptionColumnName',\n                defaultMessage: 'Description',\n            }),\n        },\n        {\n            name: props.intl.formatMessage({\n                id: 'xpack.beatsManagement.tagTable.actionsColumnName',\n                defaultMessage: 'Actions',\n            }),\n            actions: [\n                {\n                    name: props.intl.formatMessage({\n                        id: 'xpack.beatsManagement.tagTable.actions.removeButtonAriaLabel',\n                        defaultMessage: 'Remove',\n                    }),\n                    description: props.intl.formatMessage({\n                        id: 'xpack.beatsManagement.tagTable.actions.removeTooltip',\n                        defaultMessage: 'Remove this config from tag',\n                    }),\n                    type: 'icon',\n                    icon: 'trash',\n                    onClick: function (item) { return props.onConfigClick('delete', item); },\n                },\n            ],\n        },\n    ] })); };\nexport var ConfigList = injectI18n(ConfigListUi);\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/beats_management/public/components/config_list.tsx","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/beats_management/public/components/config_list.tsx"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\n// @ts-ignore\nimport { EuiBasicTable, EuiLink } from '@elastic/eui';\nimport { InjectedIntl, injectI18n } from '@kbn/i18n/react';\nimport React from 'react';\nimport { configBlockSchemas } from '../../common/config_schemas';\nimport { translateConfigSchema } from '../../common/config_schemas_translations_map';\nimport { ConfigurationBlock } from '../../common/domain_types';\n\ninterface ComponentProps {\n  configs: {\n    error?: string | undefined;\n    blocks: ConfigurationBlock[];\n    page: number;\n    total: number;\n  };\n  onConfigClick: (action: 'edit' | 'delete', config: ConfigurationBlock) => any;\n  onTableChange: (index: number, size: number) => void;\n  intl: InjectedIntl;\n}\nconst pagination = {\n  pageSize: 5,\n  hidePerPageOptions: true,\n};\n\nconst ConfigListUi: React.SFC<ComponentProps> = props => (\n  <EuiBasicTable\n    items={props.configs.blocks || []}\n    itemId=\"id\"\n    pagination={{\n      ...pagination,\n      totalItemCount: props.configs.total,\n      pageIndex: props.configs.page,\n    }}\n    onChange={(\n      table: { page: { index: number; size: number } } = { page: { index: 0, size: 5 } }\n    ) => {\n      if (props.onTableChange) {\n        props.onTableChange(table.page.index, table.page.size);\n      }\n    }}\n    columns={[\n      {\n        field: 'type',\n        name: props.intl.formatMessage({\n          id: 'xpack.beatsManagement.tagTable.typeColumnName',\n          defaultMessage: 'Type',\n        }),\n        truncateText: false,\n        render: (type: string, config: ConfigurationBlock) => {\n          const translatedConfig = translateConfigSchema(configBlockSchemas).find(\n            sc => sc.id === type\n          );\n\n          return (\n            <EuiLink onClick={() => props.onConfigClick('edit', config)}>\n              {translatedConfig ? translatedConfig.name : type}\n            </EuiLink>\n          );\n        },\n      },\n      {\n        field: 'module',\n        name: props.intl.formatMessage({\n          id: 'xpack.beatsManagement.tagTable.moduleColumnName',\n          defaultMessage: 'Module',\n        }),\n        truncateText: false,\n        render: (value: string, config: ConfigurationBlock) => {\n          return (\n            config.config._sub_type ||\n            props.intl.formatMessage({\n              id: 'xpack.beatsManagement.tagTable.moduleColumn.notAvailibaleLabel',\n              defaultMessage: 'N/A',\n            })\n          );\n        },\n      },\n      {\n        field: 'description',\n        name: props.intl.formatMessage({\n          id: 'xpack.beatsManagement.tagTable.descriptionColumnName',\n          defaultMessage: 'Description',\n        }),\n      },\n      {\n        name: props.intl.formatMessage({\n          id: 'xpack.beatsManagement.tagTable.actionsColumnName',\n          defaultMessage: 'Actions',\n        }),\n        actions: [\n          {\n            name: props.intl.formatMessage({\n              id: 'xpack.beatsManagement.tagTable.actions.removeButtonAriaLabel',\n              defaultMessage: 'Remove',\n            }),\n            description: props.intl.formatMessage({\n              id: 'xpack.beatsManagement.tagTable.actions.removeTooltip',\n              defaultMessage: 'Remove this config from tag',\n            }),\n            type: 'icon',\n            icon: 'trash',\n            onClick: (item: ConfigurationBlock) => props.onConfigClick('delete', item),\n          },\n        ],\n      },\n    ]}\n  />\n);\n\nexport const ConfigList = injectI18n(ConfigListUi);\n"]}]}