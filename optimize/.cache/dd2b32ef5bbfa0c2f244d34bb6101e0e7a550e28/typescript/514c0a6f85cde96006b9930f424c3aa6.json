{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/src/ui/public/agg_types/param_types/filter/field_filters.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/agg_types/param_types/filter/field_filters.ts","mtime":1567631711701},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/**\n * A registry to store {@link AggTypeFieldFilter} which are used to filter down\n * available fields for a specific visualization and {@link AggType}.\n */\nvar AggTypeFieldFilters = /** @class */ (function () {\n    function AggTypeFieldFilters() {\n        this.filters = new Set();\n    }\n    /**\n     * Register a new {@link AggTypeFieldFilter} with this registry.\n     * This will be used by the {@link #filter|filter method}.\n     *\n     * @param filter The filter to register.\n     */\n    AggTypeFieldFilters.prototype.addFilter = function (filter) {\n        this.filters.add(filter);\n    };\n    /**\n     * Returns the {@link any|fields} filtered by all registered filters.\n     *\n     * @param fields A list of fields that will be filtered down by this registry.\n     * @param fieldParamType The fieldParamType for which the returning list will be used.\n     * @param indexPattern The indexPattern for which the returning list will be used.\n     * @param aggConfig The aggConfig for which the returning list will be used.\n     * @return A filtered list of the passed fields.\n     */\n    AggTypeFieldFilters.prototype.filter = function (fields, fieldParamType, aggConfig, vis) {\n        var allFilters = Array.from(this.filters);\n        var allowedAggTypeFields = fields.filter(function (field) {\n            var isAggTypeFieldAllowed = allFilters.every(function (filter) {\n                return filter(field, fieldParamType, aggConfig, vis);\n            });\n            return isAggTypeFieldAllowed;\n        });\n        return allowedAggTypeFields;\n    };\n    return AggTypeFieldFilters;\n}());\nvar aggTypeFieldFilters = new AggTypeFieldFilters();\nexport { aggTypeFieldFilters, AggTypeFieldFilters };\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/src/ui/public/agg_types/param_types/filter/field_filters.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/src/ui/public/agg_types/param_types/filter/field_filters.ts"],"names":[],"mappings":"AA6BA;;;GAGG;AACH;IAAA;QACU,YAAO,GAAG,IAAI,GAAG,EAAsB,CAAC;IA+BlD,CAAC;IA7BC;;;;;OAKG;IACI,uCAAS,GAAhB,UAAiB,MAA0B;QACzC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IAC3B,CAAC;IAED;;;;;;;;OAQG;IACI,oCAAM,GAAb,UAAc,MAAa,EAAE,cAA8B,EAAE,SAAoB,EAAE,GAAQ;QACzF,IAAM,UAAU,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC5C,IAAM,oBAAoB,GAAG,MAAM,CAAC,MAAM,CAAC,UAAA,KAAK;YAC9C,IAAM,qBAAqB,GAAG,UAAU,CAAC,KAAK,CAAC,UAAA,MAAM;gBACnD,OAAA,MAAM,CAAC,KAAK,EAAE,cAAc,EAAE,SAAS,EAAE,GAAG,CAAC;YAA7C,CAA6C,CAC9C,CAAC;YACF,OAAO,qBAAqB,CAAC;QAC/B,CAAC,CAAC,CAAC;QACH,OAAO,oBAAoB,CAAC;IAC9B,CAAC;IACH,0BAAC;AAAD,CAAC,AAhCD,IAgCC;AAED,IAAM,mBAAmB,GAAG,IAAI,mBAAmB,EAAE,CAAC;AAEtD,OAAO,EAAE,mBAAmB,EAAE,mBAAmB,EAAE,CAAC","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { FieldParamType } from '../';\nimport { IndexPattern } from '../../../index_patterns';\nimport { AggConfig, Vis } from '../../../vis';\n\ntype AggTypeFieldFilter = (\n  field: any,\n  fieldParamType: FieldParamType,\n  indexPattern: IndexPattern,\n  aggConfig: AggConfig\n) => boolean;\n\n/**\n * A registry to store {@link AggTypeFieldFilter} which are used to filter down\n * available fields for a specific visualization and {@link AggType}.\n */\nclass AggTypeFieldFilters {\n  private filters = new Set<AggTypeFieldFilter>();\n\n  /**\n   * Register a new {@link AggTypeFieldFilter} with this registry.\n   * This will be used by the {@link #filter|filter method}.\n   *\n   * @param filter The filter to register.\n   */\n  public addFilter(filter: AggTypeFieldFilter): void {\n    this.filters.add(filter);\n  }\n\n  /**\n   * Returns the {@link any|fields} filtered by all registered filters.\n   *\n   * @param fields A list of fields that will be filtered down by this registry.\n   * @param fieldParamType The fieldParamType for which the returning list will be used.\n   * @param indexPattern The indexPattern for which the returning list will be used.\n   * @param aggConfig The aggConfig for which the returning list will be used.\n   * @return A filtered list of the passed fields.\n   */\n  public filter(fields: any[], fieldParamType: FieldParamType, aggConfig: AggConfig, vis: Vis) {\n    const allFilters = Array.from(this.filters);\n    const allowedAggTypeFields = fields.filter(field => {\n      const isAggTypeFieldAllowed = allFilters.every(filter =>\n        filter(field, fieldParamType, aggConfig, vis)\n      );\n      return isAggTypeFieldAllowed;\n    });\n    return allowedAggTypeFields;\n  }\n}\n\nconst aggTypeFieldFilters = new AggTypeFieldFilters();\n\nexport { aggTypeFieldFilters, AggTypeFieldFilters };\n"]}]}