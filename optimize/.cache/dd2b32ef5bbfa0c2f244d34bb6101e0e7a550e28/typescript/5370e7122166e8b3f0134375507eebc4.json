{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/services/annotations_service.tsx","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/services/annotations_service.tsx","mtime":1567631712062},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport { BehaviorSubject, Subject } from 'rxjs';\n/*\n  This observable offers a way to share state between components\n  that don't have a direct parent -> * -> child relationship.\n  It's also useful in mixed angularjs/React environments.\n\n  For example, we want to trigger the flyout for editing annotations from both\n  the timeseries_chart and the annotations_table. Since we don't want two flyout instances,\n  we cannot simply add the flyout component as a child to each of the other two components.\n\n  The directive/component/DOM structure may look somewhat like this:\n\n                               ->   <TimeseriesChart />\n                             /\n  <timeseriesexplorer.html>  -->    <AnnotationsTable />\n                             \\\n                               ->   <AnnotationsFlyout />\n\n  In this mixed angular/react environment,\n  we want the siblings (chart, table and flyout) to be\n  able to communicate with each other.\n\n  The observable can be used as follows to achieve this:\n\n  - To trigger an update, use `annotation$.next(<Annotation>)`\n  - To reset the currently editable annotation, use `annotation$.next(null)`\n\n  There are two ways to deal with updates of the observable:\n\n  1. Inline subscription in an existing component.\n     This requires the component to be a class component and manage its own state.\n\n  - To react to an update, use `annotation$.subscribe(annotation => { <callback> })`.\n  - To add it to a given components state, just use\n    `annotation$.subscribe(annotation => this.setState({ annotation }));` in `componentDidMount()`.\n\n  2. injectObservablesAsProps() from public/utils/observable_utils.tsx, as the name implies, offers\n     a way to wrap observables into another component which passes on updated values as props.\n\n  - To subscribe to updates this way, wrap your component like:\n\n      const MyOriginalComponent = ({ annotation }) => {\n        // don't render if the annotation isn't set\n        if (annotation === null) {\n          return null;\n        }\n\n        return <span>{annotation.annotation}</span>;\n      }\n\n      export const MyObservableComponent = injectObservablesAsProps(\n        { annotation: annotaton$ },\n        MyOriginalComponent\n      );\n*/\nexport var annotation$ = new BehaviorSubject(null);\n/*\n  This observable provides a way to trigger a reload of annotations based on a given event.\n  Instead of passing around callbacks or deeply nested props, it can be imported for both\n  angularjs controllers/directives and React components.\n*/\nexport var annotationsRefresh$ = new Subject();\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/services/annotations_service.tsx","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/services/annotations_service.tsx"],"names":[],"mappings":"AAAA;;;;GAIG;AAEH,OAAO,EAAE,eAAe,EAAE,OAAO,EAAE,MAAM,MAAM,CAAC;AAShD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAqDE;AACF,MAAM,CAAC,IAAM,WAAW,GAAG,IAAI,eAAe,CAAkB,IAAI,CAAC,CAAC;AAEtE;;;;EAIE;AACF,MAAM,CAAC,IAAM,mBAAmB,GAAG,IAAI,OAAO,EAAE,CAAC","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport { BehaviorSubject, Subject } from 'rxjs';\n\nimport { Annotation } from '../../common/types/annotations';\n\n/*\n  A TypeScript helper type to allow a given component state attribute to be either an annotation or null.\n*/\nexport type AnnotationState = Annotation | null;\n\n/*\n  This observable offers a way to share state between components\n  that don't have a direct parent -> * -> child relationship.\n  It's also useful in mixed angularjs/React environments.\n\n  For example, we want to trigger the flyout for editing annotations from both\n  the timeseries_chart and the annotations_table. Since we don't want two flyout instances,\n  we cannot simply add the flyout component as a child to each of the other two components.\n\n  The directive/component/DOM structure may look somewhat like this:\n\n                               ->   <TimeseriesChart />\n                             /\n  <timeseriesexplorer.html>  -->    <AnnotationsTable />\n                             \\\n                               ->   <AnnotationsFlyout />\n\n  In this mixed angular/react environment,\n  we want the siblings (chart, table and flyout) to be\n  able to communicate with each other.\n\n  The observable can be used as follows to achieve this:\n\n  - To trigger an update, use `annotation$.next(<Annotation>)`\n  - To reset the currently editable annotation, use `annotation$.next(null)`\n\n  There are two ways to deal with updates of the observable:\n\n  1. Inline subscription in an existing component. \n     This requires the component to be a class component and manage its own state.\n\n  - To react to an update, use `annotation$.subscribe(annotation => { <callback> })`.\n  - To add it to a given components state, just use\n    `annotation$.subscribe(annotation => this.setState({ annotation }));` in `componentDidMount()`.\n\n  2. injectObservablesAsProps() from public/utils/observable_utils.tsx, as the name implies, offers\n     a way to wrap observables into another component which passes on updated values as props.\n\n  - To subscribe to updates this way, wrap your component like:\n\n      const MyOriginalComponent = ({ annotation }) => {\n        // don't render if the annotation isn't set\n        if (annotation === null) {\n          return null;\n        }\n\n        return <span>{annotation.annotation}</span>;\n      }\n\n      export const MyObservableComponent = injectObservablesAsProps(\n        { annotation: annotaton$ },\n        MyOriginalComponent\n      );\n*/\nexport const annotation$ = new BehaviorSubject<AnnotationState>(null);\n\n/*\n  This observable provides a way to trigger a reload of annotations based on a given event.\n  Instead of passing around callbacks or deeply nested props, it can be imported for both\n  angularjs controllers/directives and React components.\n*/\nexport const annotationsRefresh$ = new Subject();\n"]}]}