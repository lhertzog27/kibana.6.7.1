{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/apm/public/store/reactReduxRequest/waterfallV1.tsx","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/apm/public/store/reactReduxRequest/waterfallV1.tsx","mtime":1567631711872},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport * as tslib_1 from \"tslib\";\nimport { get } from 'lodash';\nimport React from 'react';\nimport { Request } from 'react-redux-request';\nimport { SERVICE_NAME, TRANSACTION_ID } from 'x-pack/plugins/apm/common/constants';\nimport { getWaterfall } from '../../components/app/TransactionDetails/Transaction/WaterfallContainer/Waterfall/waterfall_helpers/waterfall_helpers';\nimport { loadSpans } from '../../services/rest/apm/transactions';\nexport var ID = 'waterfallV1';\nexport function WaterfallV1Request(_a) {\n    var urlParams = _a.urlParams, transaction = _a.transaction, render = _a.render;\n    var start = urlParams.start, end = urlParams.end;\n    var transactionId = get(transaction, TRANSACTION_ID);\n    var serviceName = get(transaction, SERVICE_NAME);\n    if (!(serviceName && transactionId && start && end)) {\n        return null;\n    }\n    return (React.createElement(Request, { id: ID, fn: loadSpans, args: [{ serviceName: serviceName, start: start, end: end, transactionId: transactionId }], render: function (_a) {\n            var status = _a.status, _b = _a.data, data = _b === void 0 ? [] : _b, args = _a.args;\n            var waterfall = getWaterfall(tslib_1.__spread([transaction], data), transaction);\n            return render({ status: status, data: waterfall, args: args });\n        } }));\n}\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/apm/public/store/reactReduxRequest/waterfallV1.tsx","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/apm/public/store/reactReduxRequest/waterfallV1.tsx"],"names":[],"mappings":"AAAA;;;;GAIG;;AAEH,OAAO,EAAE,GAAG,EAAE,MAAM,QAAQ,CAAC;AAC7B,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,OAAO,EAAa,MAAM,qBAAqB,CAAC;AACzD,OAAO,EACL,YAAY,EACZ,cAAc,EACf,MAAM,qCAAqC,CAAC;AAG7C,OAAO,EACL,YAAY,EAEb,MAAM,sHAAsH,CAAC;AAC9H,OAAO,EAAE,SAAS,EAAE,MAAM,sCAAsC,CAAC;AAKjE,MAAM,CAAC,IAAM,EAAE,GAAG,aAAa,CAAC;AAQhC,MAAM,UAAU,kBAAkB,CAAC,EAAyC;QAAvC,wBAAS,EAAE,4BAAW,EAAE,kBAAM;IACzD,IAAA,uBAAK,EAAE,mBAAG,CAAe;IACjC,IAAM,aAAa,GAAW,GAAG,CAAC,WAAW,EAAE,cAAc,CAAC,CAAC;IAC/D,IAAM,WAAW,GAAW,GAAG,CAAC,WAAW,EAAE,YAAY,CAAC,CAAC;IAE3D,IAAI,CAAC,CAAC,WAAW,IAAI,aAAa,IAAI,KAAK,IAAI,GAAG,CAAC,EAAE;QACnD,OAAO,IAAI,CAAC;KACb;IAED,OAAO,CACL,oBAAC,OAAO,IACN,EAAE,EAAE,EAAE,EACN,EAAE,EAAE,SAAS,EACb,IAAI,EAAE,CAAC,EAAE,WAAW,aAAA,EAAE,KAAK,OAAA,EAAE,GAAG,KAAA,EAAE,aAAa,eAAA,EAAE,CAAC,EAClD,MAAM,EAAE,UAAC,EAA2B;gBAAzB,kBAAM,EAAE,YAAS,EAAT,8BAAS,EAAE,cAAI;YAChC,IAAM,SAAS,GAAG,YAAY,mBAAE,WAAW,GAAK,IAAI,GAAG,WAAW,CAAC,CAAC;YACpE,OAAO,MAAM,CAAC,EAAE,MAAM,QAAA,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,MAAA,EAAE,CAAC,CAAC;QACnD,CAAC,GACD,CACH,CAAC;AACJ,CAAC","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport { get } from 'lodash';\nimport React from 'react';\nimport { Request, RRRRender } from 'react-redux-request';\nimport {\n  SERVICE_NAME,\n  TRANSACTION_ID\n} from 'x-pack/plugins/apm/common/constants';\nimport { Span } from 'x-pack/plugins/apm/typings/es_schemas/Span';\nimport { Transaction } from 'x-pack/plugins/apm/typings/es_schemas/Transaction';\nimport {\n  getWaterfall,\n  IWaterfall\n} from '../../components/app/TransactionDetails/Transaction/WaterfallContainer/Waterfall/waterfall_helpers/waterfall_helpers';\nimport { loadSpans } from '../../services/rest/apm/transactions';\nimport { IUrlParams } from '../urlParams';\n// @ts-ignore\nimport { createInitialDataSelector } from './helpers';\n\nexport const ID = 'waterfallV1';\n\ninterface Props {\n  urlParams: IUrlParams;\n  transaction: Transaction;\n  render: RRRRender<IWaterfall>;\n}\n\nexport function WaterfallV1Request({ urlParams, transaction, render }: Props) {\n  const { start, end } = urlParams;\n  const transactionId: string = get(transaction, TRANSACTION_ID);\n  const serviceName: string = get(transaction, SERVICE_NAME);\n\n  if (!(serviceName && transactionId && start && end)) {\n    return null;\n  }\n\n  return (\n    <Request<Span[]>\n      id={ID}\n      fn={loadSpans}\n      args={[{ serviceName, start, end, transactionId }]}\n      render={({ status, data = [], args }) => {\n        const waterfall = getWaterfall([transaction, ...data], transaction);\n        return render({ status, data: waterfall, args });\n      }}\n    />\n  );\n}\n"]}]}