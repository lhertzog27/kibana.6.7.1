{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/store/local/waffle_time/selectors.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/store/local/waffle_time/selectors.ts","mtime":1567631711989},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport { createSelector } from 'reselect';\nexport var selectCurrentTime = function (state) { return state.currentTime; };\nexport var selectIsAutoReloading = function (state) {\n    return state.updatePolicy.policy === 'interval';\n};\nexport var selectTimeUpdatePolicyInterval = function (state) {\n    return state.updatePolicy.policy === 'interval' ? state.updatePolicy.interval : null;\n};\nexport var selectCurrentTimeRange = createSelector(selectCurrentTime, function (currentTime) { return ({\n    from: currentTime - 1000 * 60 * 5,\n    interval: '1m',\n    to: currentTime,\n}); });\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/store/local/waffle_time/selectors.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/store/local/waffle_time/selectors.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAEH,OAAO,EAAE,cAAc,EAAE,MAAM,UAAU,CAAC;AAI1C,MAAM,CAAC,IAAM,iBAAiB,GAAG,UAAC,KAAsB,IAAK,OAAA,KAAK,CAAC,WAAW,EAAjB,CAAiB,CAAC;AAE/E,MAAM,CAAC,IAAM,qBAAqB,GAAG,UAAC,KAAsB;IAC1D,OAAA,KAAK,CAAC,YAAY,CAAC,MAAM,KAAK,UAAU;AAAxC,CAAwC,CAAC;AAE3C,MAAM,CAAC,IAAM,8BAA8B,GAAG,UAAC,KAAsB;IACnE,OAAA,KAAK,CAAC,YAAY,CAAC,MAAM,KAAK,UAAU,CAAC,CAAC,CAAC,KAAK,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI;AAA7E,CAA6E,CAAC;AAEhF,MAAM,CAAC,IAAM,sBAAsB,GAAG,cAAc,CAClD,iBAAiB,EACjB,UAAA,WAAW,IAAI,OAAA,CAAC;IACd,IAAI,EAAE,WAAW,GAAG,IAAI,GAAG,EAAE,GAAG,CAAC;IACjC,QAAQ,EAAE,IAAI;IACd,EAAE,EAAE,WAAW;CAChB,CAAC,EAJa,CAIb,CACH,CAAC","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport { createSelector } from 'reselect';\n\nimport { WaffleTimeState } from './reducer';\n\nexport const selectCurrentTime = (state: WaffleTimeState) => state.currentTime;\n\nexport const selectIsAutoReloading = (state: WaffleTimeState) =>\n  state.updatePolicy.policy === 'interval';\n\nexport const selectTimeUpdatePolicyInterval = (state: WaffleTimeState) =>\n  state.updatePolicy.policy === 'interval' ? state.updatePolicy.interval : null;\n\nexport const selectCurrentTimeRange = createSelector(\n  selectCurrentTime,\n  currentTime => ({\n    from: currentTime - 1000 * 60 * 5,\n    interval: '1m',\n    to: currentTime,\n  })\n);\n"]}]}