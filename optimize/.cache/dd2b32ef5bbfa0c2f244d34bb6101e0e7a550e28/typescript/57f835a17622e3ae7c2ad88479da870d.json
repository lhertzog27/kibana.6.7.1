{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/uptime/public/components/queries/error_list/error_list_query.tsx","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/uptime/public/components/queries/error_list/error_list_query.tsx","mtime":1567631712329},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport { i18n } from '@kbn/i18n';\nimport React from 'react';\nimport { Query } from 'react-apollo';\nimport { ErrorList } from '../../functional';\nimport { getErrorListQuery } from './get_error_list';\nexport var ErrorListQuery = function (_a) {\n    var autorefreshInterval = _a.autorefreshInterval, autorefreshIsPaused = _a.autorefreshIsPaused, dateRangeStart = _a.dateRangeStart, dateRangeEnd = _a.dateRangeEnd, filters = _a.filters;\n    return (React.createElement(Query, { pollInterval: autorefreshIsPaused ? undefined : autorefreshInterval, query: getErrorListQuery, variables: { dateRangeStart: dateRangeStart, dateRangeEnd: dateRangeEnd, filters: filters } }, function (_a) {\n        var loading = _a.loading, error = _a.error, data = _a.data;\n        if (error) {\n            return i18n.translate('xpack.uptime.errorList.errorMessage', {\n                values: { message: error.message },\n                defaultMessage: 'Error {message}',\n            });\n        }\n        var errorList = data.errorList;\n        return React.createElement(ErrorList, { loading: loading, errorList: errorList });\n    }));\n};\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/uptime/public/components/queries/error_list/error_list_query.tsx","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/uptime/public/components/queries/error_list/error_list_query.tsx"],"names":[],"mappings":"AAAA;;;;GAIG;AAEH,OAAO,EAAE,IAAI,EAAE,MAAM,WAAW,CAAC;AACjC,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,KAAK,EAAE,MAAM,cAAc,CAAC;AAErC,OAAO,EAAE,SAAS,EAAE,MAAM,kBAAkB,CAAC;AAC7C,OAAO,EAAE,iBAAiB,EAAE,MAAM,kBAAkB,CAAC;AAQrD,MAAM,CAAC,IAAM,cAAc,GAAG,UAAC,EAMvB;QALN,4CAAmB,EACnB,4CAAmB,EACnB,kCAAc,EACd,8BAAY,EACZ,oBAAO;IACI,OAAA,CACX,oBAAC,KAAK,IACJ,YAAY,EAAE,mBAAmB,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,mBAAmB,EACnE,KAAK,EAAE,iBAAiB,EACxB,SAAS,EAAE,EAAE,cAAc,gBAAA,EAAE,YAAY,cAAA,EAAE,OAAO,SAAA,EAAE,IAEnD,UAAC,EAAwB;YAAtB,oBAAO,EAAE,gBAAK,EAAE,cAAI;QACtB,IAAI,KAAK,EAAE;YACT,OAAO,IAAI,CAAC,SAAS,CAAC,qCAAqC,EAAE;gBAC3D,MAAM,EAAE,EAAE,OAAO,EAAE,KAAK,CAAC,OAAO,EAAE;gBAClC,cAAc,EAAE,iBAAiB;aAClC,CAAC,CAAC;SACJ;QACO,IAAA,0BAAS,CAAU;QAC3B,OAAO,oBAAC,SAAS,IAAC,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE,SAAS,GAAI,CAAC;IAC/D,CAAC,CACK,CACT;AAjBY,CAiBZ,CAAC","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport { i18n } from '@kbn/i18n';\nimport React from 'react';\nimport { Query } from 'react-apollo';\nimport { UptimeCommonProps } from '../../../uptime_app';\nimport { ErrorList } from '../../functional';\nimport { getErrorListQuery } from './get_error_list';\n\ninterface ErrorListProps {\n  filters?: string;\n}\n\ntype Props = ErrorListProps & UptimeCommonProps;\n\nexport const ErrorListQuery = ({\n  autorefreshInterval,\n  autorefreshIsPaused,\n  dateRangeStart,\n  dateRangeEnd,\n  filters,\n}: Props) => (\n  <Query\n    pollInterval={autorefreshIsPaused ? undefined : autorefreshInterval}\n    query={getErrorListQuery}\n    variables={{ dateRangeStart, dateRangeEnd, filters }}\n  >\n    {({ loading, error, data }) => {\n      if (error) {\n        return i18n.translate('xpack.uptime.errorList.errorMessage', {\n          values: { message: error.message },\n          defaultMessage: 'Error {message}',\n        });\n      }\n      const { errorList } = data;\n      return <ErrorList loading={loading} errorList={errorList} />;\n    }}\n  </Query>\n);\n"]}]}