{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/common/log_entry/log_entry_list.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/common/log_entry/log_entry_list.ts","mtime":1567631711977},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport { getLogEntryKey, isEqual, isLess, isLessOrEqual, } from './log_entry';\nexport function getIndexNearLogEntry(logEntries, key, highest) {\n    if (highest === void 0) { highest = false; }\n    var minIndex = 0;\n    var maxIndex = logEntries.length;\n    var currentIndex;\n    var currentKey;\n    while (minIndex < maxIndex) {\n        currentIndex = (minIndex + maxIndex) >>> 1; // tslint:disable-line:no-bitwise\n        currentKey = getLogEntryKey(logEntries[currentIndex]);\n        if ((highest ? isLessOrEqual : isLess)(currentKey, key)) {\n            minIndex = currentIndex + 1;\n        }\n        else {\n            maxIndex = currentIndex;\n        }\n    }\n    return maxIndex;\n}\nexport function getIndexOfLogEntry(logEntries, key) {\n    var index = getIndexNearLogEntry(logEntries, key);\n    var logEntry = logEntries[index];\n    return logEntry && isEqual(key, getLogEntryKey(logEntry)) ? index : null;\n}\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/common/log_entry/log_entry_list.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/common/log_entry/log_entry_list.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAEH,OAAO,EACL,cAAc,EACd,OAAO,EACP,MAAM,EACN,aAAa,GAGd,MAAM,aAAa,CAAC;AAIrB,MAAM,UAAU,oBAAoB,CAAC,UAAwB,EAAE,GAAiB,EAAE,OAAe;IAAf,wBAAA,EAAA,eAAe;IAC/F,IAAI,QAAQ,GAAG,CAAC,CAAC;IACjB,IAAI,QAAQ,GAAG,UAAU,CAAC,MAAM,CAAC;IACjC,IAAI,YAAoB,CAAC;IACzB,IAAI,UAAwB,CAAC;IAE7B,OAAO,QAAQ,GAAG,QAAQ,EAAE;QAC1B,YAAY,GAAG,CAAC,QAAQ,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,iCAAiC;QAC7E,UAAU,GAAG,cAAc,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,CAAC;QAEtD,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,UAAU,EAAE,GAAG,CAAC,EAAE;YACvD,QAAQ,GAAG,YAAY,GAAG,CAAC,CAAC;SAC7B;aAAM;YACL,QAAQ,GAAG,YAAY,CAAC;SACzB;KACF;IAED,OAAO,QAAQ,CAAC;AAClB,CAAC;AAED,MAAM,UAAU,kBAAkB,CAAC,UAAsB,EAAE,GAAiB;IAC1E,IAAM,KAAK,GAAG,oBAAoB,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC;IACpD,IAAM,QAAQ,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC;IAEnC,OAAO,QAAQ,IAAI,OAAO,CAAC,GAAG,EAAE,cAAc,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC;AAC3E,CAAC","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport {\n  getLogEntryKey,\n  isEqual,\n  isLess,\n  isLessOrEqual,\n  LogEntry,\n  LogEntryTime,\n} from './log_entry';\n\nexport type LogEntryList = LogEntry[];\n\nexport function getIndexNearLogEntry(logEntries: LogEntryList, key: LogEntryTime, highest = false) {\n  let minIndex = 0;\n  let maxIndex = logEntries.length;\n  let currentIndex: number;\n  let currentKey: LogEntryTime;\n\n  while (minIndex < maxIndex) {\n    currentIndex = (minIndex + maxIndex) >>> 1; // tslint:disable-line:no-bitwise\n    currentKey = getLogEntryKey(logEntries[currentIndex]);\n\n    if ((highest ? isLessOrEqual : isLess)(currentKey, key)) {\n      minIndex = currentIndex + 1;\n    } else {\n      maxIndex = currentIndex;\n    }\n  }\n\n  return maxIndex;\n}\n\nexport function getIndexOfLogEntry(logEntries: LogEntry[], key: LogEntryTime) {\n  const index = getIndexNearLogEntry(logEntries, key);\n  const logEntry = logEntries[index];\n\n  return logEntry && isEqual(key, getLogEntryKey(logEntry)) ? index : null;\n}\n"]}]}