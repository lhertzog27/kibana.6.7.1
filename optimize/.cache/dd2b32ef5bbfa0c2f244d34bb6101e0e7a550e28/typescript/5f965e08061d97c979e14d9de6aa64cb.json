{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/src/ui/public/vis/lib/least_common_interval.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/vis/lib/least_common_interval.ts","mtime":1567631711771},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport dateMath from '@elastic/datemath';\nimport { leastCommonMultiple } from '../../utils/math';\nimport { parseEsInterval } from '../../utils/parse_es_interval';\n/**\n * Finds the lowest common interval between two given ES date histogram intervals\n * in the format of (value)(unit)\n *\n *  - `ms` units are fixed-length intervals\n *  - `s, m, h, d` units are fixed-length intervals when value > 1 (i.e. 2m, 24h, 7d),\n *    but calendar interval when value === 1\n *  - `w, M, q, y` units are calendar intervals and do not support multiple, aka\n *    value must === 1\n *\n * @returns {string}\n */\nexport function leastCommonInterval(a, b) {\n    var unitsMap = dateMath.unitsMap, unitsDesc = dateMath.unitsDesc;\n    var aInt = parseEsInterval(a);\n    var bInt = parseEsInterval(b);\n    if (a === b) {\n        return a;\n    }\n    var aUnit = unitsMap[aInt.unit];\n    var bUnit = unitsMap[bInt.unit];\n    // If intervals aren't the same type, throw error\n    if (aInt.type !== bInt.type) {\n        throw Error(\"Incompatible intervals: \" + a + \" (\" + aInt.type + \"), \" + b + \" (\" + bInt.type + \")\");\n    }\n    // If intervals are calendar units, pick the larger one (calendar value is always 1)\n    if (aInt.type === 'calendar' || bInt.type === 'calendar') {\n        return aUnit.weight > bUnit.weight ? \"\" + aInt.value + aInt.unit : \"\" + bInt.value + bInt.unit;\n    }\n    // Otherwise if intervals are fixed units, find least common multiple in milliseconds\n    var aMs = aInt.value * aUnit.base;\n    var bMs = bInt.value * bUnit.base;\n    var lcmMs = leastCommonMultiple(aMs, bMs);\n    // Return original interval string if it matches one of the original milliseconds\n    if (lcmMs === bMs) {\n        return b.replace(/\\s/g, '');\n    }\n    if (lcmMs === aMs) {\n        return a.replace(/\\s/g, '');\n    }\n    // Otherwise find the biggest non-calendar unit that divides evenly\n    var lcmUnit = unitsDesc.find(function (unit) {\n        var unitInfo = unitsMap[unit];\n        return !!(unitInfo.type !== 'calendar' && lcmMs % unitInfo.base === 0);\n    });\n    // Throw error in case we couldn't divide evenly, theoretically we never get here as everything is\n    // divisible by 1 millisecond\n    if (!lcmUnit) {\n        throw Error(\"Unable to find common interval for: \" + a + \", \" + b);\n    }\n    // Return the interval string\n    return \"\" + lcmMs / unitsMap[lcmUnit].base + lcmUnit;\n}\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/src/ui/public/vis/lib/least_common_interval.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/src/ui/public/vis/lib/least_common_interval.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;GAiBG;AAEH,OAAO,QAAQ,MAAM,mBAAmB,CAAC;AACzC,OAAO,EAAE,mBAAmB,EAAE,MAAM,kBAAkB,CAAC;AACvD,OAAO,EAAE,eAAe,EAAE,MAAM,+BAA+B,CAAC;AAEhE;;;;;;;;;;;GAWG;AACH,MAAM,UAAU,mBAAmB,CAAC,CAAS,EAAE,CAAS;IAC9C,IAAA,4BAAQ,EAAE,8BAAS,CAAc;IACzC,IAAM,IAAI,GAAG,eAAe,CAAC,CAAC,CAAC,CAAC;IAChC,IAAM,IAAI,GAAG,eAAe,CAAC,CAAC,CAAC,CAAC;IAEhC,IAAI,CAAC,KAAK,CAAC,EAAE;QACX,OAAO,CAAC,CAAC;KACV;IAED,IAAM,KAAK,GAAG,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAClC,IAAM,KAAK,GAAG,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAElC,iDAAiD;IACjD,IAAI,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,EAAE;QAC3B,MAAM,KAAK,CAAC,6BAA2B,CAAC,UAAK,IAAI,CAAC,IAAI,WAAM,CAAC,UAAK,IAAI,CAAC,IAAI,MAAG,CAAC,CAAC;KACjF;IAED,oFAAoF;IACpF,IAAI,IAAI,CAAC,IAAI,KAAK,UAAU,IAAI,IAAI,CAAC,IAAI,KAAK,UAAU,EAAE;QACxD,OAAO,KAAK,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,KAAG,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAM,CAAC,CAAC,CAAC,KAAG,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAM,CAAC;KAChG;IAED,qFAAqF;IACrF,IAAM,GAAG,GAAG,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC;IACpC,IAAM,GAAG,GAAG,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC;IACpC,IAAM,KAAK,GAAG,mBAAmB,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;IAE5C,iFAAiF;IACjF,IAAI,KAAK,KAAK,GAAG,EAAE;QACjB,OAAO,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;KAC7B;IACD,IAAI,KAAK,KAAK,GAAG,EAAE;QACjB,OAAO,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;KAC7B;IAED,mEAAmE;IACnE,IAAM,OAAO,GAAG,SAAS,CAAC,IAAI,CAAC,UAAA,IAAI;QACjC,IAAM,QAAQ,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC;QAChC,OAAO,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,KAAK,UAAU,IAAI,KAAK,GAAG,QAAQ,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC;IACzE,CAAC,CAAC,CAAC;IAEH,kGAAkG;IAClG,6BAA6B;IAC7B,IAAI,CAAC,OAAO,EAAE;QACZ,MAAM,KAAK,CAAC,yCAAuC,CAAC,UAAK,CAAG,CAAC,CAAC;KAC/D;IAED,6BAA6B;IAC7B,OAAO,KAAG,KAAK,GAAG,QAAQ,CAAC,OAAO,CAAC,CAAC,IAAI,GAAG,OAAS,CAAC;AACvD,CAAC","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport dateMath from '@elastic/datemath';\nimport { leastCommonMultiple } from '../../utils/math';\nimport { parseEsInterval } from '../../utils/parse_es_interval';\n\n/**\n * Finds the lowest common interval between two given ES date histogram intervals\n * in the format of (value)(unit)\n *\n *  - `ms` units are fixed-length intervals\n *  - `s, m, h, d` units are fixed-length intervals when value > 1 (i.e. 2m, 24h, 7d),\n *    but calendar interval when value === 1\n *  - `w, M, q, y` units are calendar intervals and do not support multiple, aka\n *    value must === 1\n *\n * @returns {string}\n */\nexport function leastCommonInterval(a: string, b: string): string {\n  const { unitsMap, unitsDesc } = dateMath;\n  const aInt = parseEsInterval(a);\n  const bInt = parseEsInterval(b);\n\n  if (a === b) {\n    return a;\n  }\n\n  const aUnit = unitsMap[aInt.unit];\n  const bUnit = unitsMap[bInt.unit];\n\n  // If intervals aren't the same type, throw error\n  if (aInt.type !== bInt.type) {\n    throw Error(`Incompatible intervals: ${a} (${aInt.type}), ${b} (${bInt.type})`);\n  }\n\n  // If intervals are calendar units, pick the larger one (calendar value is always 1)\n  if (aInt.type === 'calendar' || bInt.type === 'calendar') {\n    return aUnit.weight > bUnit.weight ? `${aInt.value}${aInt.unit}` : `${bInt.value}${bInt.unit}`;\n  }\n\n  // Otherwise if intervals are fixed units, find least common multiple in milliseconds\n  const aMs = aInt.value * aUnit.base;\n  const bMs = bInt.value * bUnit.base;\n  const lcmMs = leastCommonMultiple(aMs, bMs);\n\n  // Return original interval string if it matches one of the original milliseconds\n  if (lcmMs === bMs) {\n    return b.replace(/\\s/g, '');\n  }\n  if (lcmMs === aMs) {\n    return a.replace(/\\s/g, '');\n  }\n\n  // Otherwise find the biggest non-calendar unit that divides evenly\n  const lcmUnit = unitsDesc.find(unit => {\n    const unitInfo = unitsMap[unit];\n    return !!(unitInfo.type !== 'calendar' && lcmMs % unitInfo.base === 0);\n  });\n\n  // Throw error in case we couldn't divide evenly, theoretically we never get here as everything is\n  // divisible by 1 millisecond\n  if (!lcmUnit) {\n    throw Error(`Unable to find common interval for: ${a}, ${b}`);\n  }\n\n  // Return the interval string\n  return `${lcmMs / unitsMap[lcmUnit].base}${lcmUnit}`;\n}\n"]}]}