{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/uptime/public/components/functional/monitor_list.tsx","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/uptime/public/components/functional/monitor_list.tsx","mtime":1567631712328},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport { EuiHealth, \n// @ts-ignore missing type definition\nEuiHistogramSeries, \n// @ts-ignore missing type definition\nEuiInMemoryTable, EuiPanel, \n// @ts-ignore missing type definition\nEuiSeriesChart, \n// @ts-ignore missing type definition\nEuiSeriesChartUtils, EuiTitle, } from '@elastic/eui';\nimport { i18n } from '@kbn/i18n';\nimport { FormattedMessage } from '@kbn/i18n/react';\nimport moment from 'moment';\nimport React, { Fragment } from 'react';\nimport { Link } from 'react-router-dom';\nimport { formatSparklineCounts } from './format_sparkline_counts';\nvar MONITOR_LIST_DEFAULT_PAGINATION = 10;\nvar monitorListPagination = {\n    initialPageSize: MONITOR_LIST_DEFAULT_PAGINATION,\n    pageSizeOptions: [5, 10, 20, 50],\n};\nexport var MonitorList = function (_a) {\n    var dangerColor = _a.dangerColor, loading = _a.loading, monitors = _a.monitors, primaryColor = _a.primaryColor;\n    return (React.createElement(Fragment, null,\n        React.createElement(EuiTitle, { size: \"xs\" },\n            React.createElement(\"h5\", null,\n                React.createElement(FormattedMessage, { id: \"xpack.uptime.monitorList.monitoringStatusTitle\", defaultMessage: \"Monitor status\" }))),\n        React.createElement(EuiPanel, { paddingSize: \"l\" },\n            React.createElement(EuiInMemoryTable, { columns: [\n                    {\n                        field: 'ping.monitor.status',\n                        name: i18n.translate('xpack.uptime.monitorList.statusColumnLabel', {\n                            defaultMessage: 'Status',\n                        }),\n                        render: function (status) { return (React.createElement(EuiHealth, { color: status === 'up' ? 'success' : 'danger' }, status === 'up'\n                            ? i18n.translate('xpack.uptime.monitorList.statusColumn.upLabel', {\n                                defaultMessage: 'Up',\n                            })\n                            : i18n.translate('xpack.uptime.monitorList.statusColumn.downLabel', {\n                                defaultMessage: 'Down',\n                            }))); },\n                    },\n                    {\n                        field: 'ping.timestamp',\n                        name: i18n.translate('xpack.uptime.monitorList.lastUpdatedColumnLabel', {\n                            defaultMessage: 'Last updated',\n                        }),\n                        render: function (timestamp) { return moment(timestamp).fromNow(); },\n                    },\n                    {\n                        field: 'ping.monitor.host',\n                        name: i18n.translate('xpack.uptime.monitorList.hostColumnLabel', {\n                            defaultMessage: 'Host',\n                        }),\n                        render: function (host, monitor) { return (React.createElement(Link, { to: \"/monitor/\" + monitor.key.id }, host || monitor.key.id)); },\n                    },\n                    {\n                        field: 'key.port',\n                        name: i18n.translate('xpack.uptime.monitorList.portColumnLabel', {\n                            defaultMessage: 'Port',\n                        }),\n                        sortable: true,\n                    },\n                    {\n                        field: 'ping.monitor.type',\n                        name: i18n.translate('xpack.uptime.monitorList.typeColumnLabel', {\n                            defaultMessage: 'Type',\n                        }),\n                        sortable: true,\n                    },\n                    {\n                        field: 'ping.monitor.ip',\n                        name: i18n.translate('xpack.uptime.monitorList.ipColumnLabel', {\n                            defaultMessage: 'IP',\n                        }),\n                    },\n                    {\n                        field: 'upSeries',\n                        name: i18n.translate('xpack.uptime.monitorList.monitorHistoryColumnLabel', {\n                            defaultMessage: 'Monitor History',\n                        }),\n                        // @ts-ignore TODO fix typing\n                        render: function (upSeries, monitor) {\n                            var downSeries = monitor.downSeries;\n                            return (React.createElement(EuiSeriesChart, { showDefaultAxis: false, width: 180, height: 70, stackBy: \"y\", \n                                // TODO: style hack\n                                style: { marginBottom: '-20px' }, xType: EuiSeriesChartUtils.SCALE.TIME, xCrosshairFormat: \"YYYY-MM-DD hh:mmZ\" },\n                                React.createElement(EuiHistogramSeries, { data: formatSparklineCounts(downSeries), name: i18n.translate('xpack.uptime.monitorList.downLineSeries.downLabel', {\n                                        defaultMessage: 'Down',\n                                    }), color: dangerColor }),\n                                React.createElement(EuiHistogramSeries, { data: formatSparklineCounts(upSeries), name: i18n.translate('xpack.uptime.monitorList.upLineSeries.upLabel', {\n                                        defaultMessage: 'Up',\n                                    }), color: primaryColor })));\n                        },\n                    },\n                ], loading: loading, items: monitors, pagination: monitorListPagination }))));\n};\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/uptime/public/components/functional/monitor_list.tsx","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/uptime/public/components/functional/monitor_list.tsx"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport {\n  EuiHealth,\n  // @ts-ignore missing type definition\n  EuiHistogramSeries,\n  // @ts-ignore missing type definition\n  EuiInMemoryTable,\n  EuiPanel,\n  // @ts-ignore missing type definition\n  EuiSeriesChart,\n  // @ts-ignore missing type definition\n  EuiSeriesChartUtils,\n  EuiTitle,\n} from '@elastic/eui';\nimport { i18n } from '@kbn/i18n';\nimport { FormattedMessage } from '@kbn/i18n/react';\nimport moment from 'moment';\nimport React, { Fragment } from 'react';\nimport { Link } from 'react-router-dom';\nimport { LatestMonitor } from '../../../common/graphql/types';\nimport { formatSparklineCounts } from './format_sparkline_counts';\n\ninterface MonitorListProps {\n  dangerColor: string;\n  loading: boolean;\n  monitors: LatestMonitor[];\n  primaryColor: string;\n}\n\nconst MONITOR_LIST_DEFAULT_PAGINATION = 10;\n\nconst monitorListPagination = {\n  initialPageSize: MONITOR_LIST_DEFAULT_PAGINATION,\n  pageSizeOptions: [5, 10, 20, 50],\n};\n\nexport const MonitorList = ({ dangerColor, loading, monitors, primaryColor }: MonitorListProps) => (\n  <Fragment>\n    <EuiTitle size=\"xs\">\n      <h5>\n        <FormattedMessage\n          id=\"xpack.uptime.monitorList.monitoringStatusTitle\"\n          defaultMessage=\"Monitor status\"\n        />\n      </h5>\n    </EuiTitle>\n    <EuiPanel paddingSize=\"l\">\n      <EuiInMemoryTable\n        columns={[\n          {\n            field: 'ping.monitor.status',\n            name: i18n.translate('xpack.uptime.monitorList.statusColumnLabel', {\n              defaultMessage: 'Status',\n            }),\n            render: (status: string) => (\n              <EuiHealth color={status === 'up' ? 'success' : 'danger'}>\n                {status === 'up'\n                  ? i18n.translate('xpack.uptime.monitorList.statusColumn.upLabel', {\n                      defaultMessage: 'Up',\n                    })\n                  : i18n.translate('xpack.uptime.monitorList.statusColumn.downLabel', {\n                      defaultMessage: 'Down',\n                    })}\n              </EuiHealth>\n            ),\n          },\n          {\n            field: 'ping.timestamp',\n            name: i18n.translate('xpack.uptime.monitorList.lastUpdatedColumnLabel', {\n              defaultMessage: 'Last updated',\n            }),\n            render: (timestamp: string) => moment(timestamp).fromNow(),\n          },\n          {\n            field: 'ping.monitor.host',\n            name: i18n.translate('xpack.uptime.monitorList.hostColumnLabel', {\n              defaultMessage: 'Host',\n            }),\n            render: (host: string, monitor: any) => (\n              <Link to={`/monitor/${monitor.key.id}`}>{host || monitor.key.id}</Link>\n            ),\n          },\n          {\n            field: 'key.port',\n            name: i18n.translate('xpack.uptime.monitorList.portColumnLabel', {\n              defaultMessage: 'Port',\n            }),\n            sortable: true,\n          },\n          {\n            field: 'ping.monitor.type',\n            name: i18n.translate('xpack.uptime.monitorList.typeColumnLabel', {\n              defaultMessage: 'Type',\n            }),\n            sortable: true,\n          },\n          {\n            field: 'ping.monitor.ip',\n            name: i18n.translate('xpack.uptime.monitorList.ipColumnLabel', {\n              defaultMessage: 'IP',\n            }),\n          },\n          {\n            field: 'upSeries',\n            name: i18n.translate('xpack.uptime.monitorList.monitorHistoryColumnLabel', {\n              defaultMessage: 'Monitor History',\n            }),\n            // @ts-ignore TODO fix typing\n            render: (upSeries, monitor) => {\n              const { downSeries } = monitor;\n              return (\n                <EuiSeriesChart\n                  showDefaultAxis={false}\n                  width={180}\n                  height={70}\n                  stackBy=\"y\"\n                  // TODO: style hack\n                  style={{ marginBottom: '-20px' }}\n                  xType={EuiSeriesChartUtils.SCALE.TIME}\n                  xCrosshairFormat=\"YYYY-MM-DD hh:mmZ\"\n                >\n                  <EuiHistogramSeries\n                    data={formatSparklineCounts(downSeries)}\n                    name={i18n.translate('xpack.uptime.monitorList.downLineSeries.downLabel', {\n                      defaultMessage: 'Down',\n                    })}\n                    color={dangerColor}\n                  />\n                  <EuiHistogramSeries\n                    data={formatSparklineCounts(upSeries)}\n                    name={i18n.translate('xpack.uptime.monitorList.upLineSeries.upLabel', {\n                      defaultMessage: 'Up',\n                    })}\n                    color={primaryColor}\n                  />\n                </EuiSeriesChart>\n              );\n            },\n          },\n        ]}\n        loading={loading}\n        items={monitors}\n        pagination={monitorListPagination}\n      />\n    </EuiPanel>\n  </Fragment>\n);\n"]}]}