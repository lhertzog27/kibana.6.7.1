{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/utils/formatters/index.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/utils/formatters/index.ts","mtime":1567631711990},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nvar _a;\nimport Mustache from 'mustache';\nimport { InfraFormatterType, InfraWaffleMapDataFormat } from '../../lib/lib';\nimport { createDataFormatter } from './data';\nimport { formatNumber } from './number';\nimport { formatPercent } from './percent';\nexport var FORMATTERS = (_a = {},\n    _a[InfraFormatterType.number] = formatNumber,\n    _a[InfraFormatterType.abbreviatedNumber] = createDataFormatter(InfraWaffleMapDataFormat.abbreviatedNumber),\n    _a[InfraFormatterType.bytes] = createDataFormatter(InfraWaffleMapDataFormat.bytesDecimal),\n    _a[InfraFormatterType.bits] = createDataFormatter(InfraWaffleMapDataFormat.bitsDecimal),\n    _a[InfraFormatterType.percent] = formatPercent,\n    _a);\nexport var createFormatter = function (format, template) {\n    if (template === void 0) { template = '{{value}}'; }\n    return function (val) {\n        if (val == null) {\n            return '';\n        }\n        var fmtFn = FORMATTERS[format];\n        var value = fmtFn(Number(val));\n        return Mustache.render(template, { value: value });\n    };\n};\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/utils/formatters/index.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/utils/formatters/index.ts"],"names":[],"mappings":"AAAA;;;;GAIG;;AAEH,OAAO,QAAQ,MAAM,UAAU,CAAC;AAChC,OAAO,EAAE,kBAAkB,EAAE,wBAAwB,EAAE,MAAM,eAAe,CAAC;AAC7E,OAAO,EAAE,mBAAmB,EAAE,MAAM,QAAQ,CAAC;AAC7C,OAAO,EAAE,YAAY,EAAE,MAAM,UAAU,CAAC;AACxC,OAAO,EAAE,aAAa,EAAE,MAAM,WAAW,CAAC;AAE1C,MAAM,CAAC,IAAM,UAAU;IACrB,GAAC,kBAAkB,CAAC,MAAM,IAAG,YAAY;IACzC,GAAC,kBAAkB,CAAC,iBAAiB,IAAG,mBAAmB,CACzD,wBAAwB,CAAC,iBAAiB,CAC3C;IACD,GAAC,kBAAkB,CAAC,KAAK,IAAG,mBAAmB,CAAC,wBAAwB,CAAC,YAAY,CAAC;IACtF,GAAC,kBAAkB,CAAC,IAAI,IAAG,mBAAmB,CAAC,wBAAwB,CAAC,WAAW,CAAC;IACpF,GAAC,kBAAkB,CAAC,OAAO,IAAG,aAAa;OAC5C,CAAC;AAEF,MAAM,CAAC,IAAM,eAAe,GAAG,UAAC,MAA0B,EAAE,QAA8B;IAA9B,yBAAA,EAAA,sBAA8B;IAAK,OAAA,UAC7F,GAAoB;QAEpB,IAAI,GAAG,IAAI,IAAI,EAAE;YACf,OAAO,EAAE,CAAC;SACX;QACD,IAAM,KAAK,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC;QACjC,IAAM,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;QACjC,OAAO,QAAQ,CAAC,MAAM,CAAC,QAAQ,EAAE,EAAE,KAAK,OAAA,EAAE,CAAC,CAAC;IAC9C,CAAC;AAT8F,CAS9F,CAAC","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport Mustache from 'mustache';\nimport { InfraFormatterType, InfraWaffleMapDataFormat } from '../../lib/lib';\nimport { createDataFormatter } from './data';\nimport { formatNumber } from './number';\nimport { formatPercent } from './percent';\n\nexport const FORMATTERS = {\n  [InfraFormatterType.number]: formatNumber,\n  [InfraFormatterType.abbreviatedNumber]: createDataFormatter(\n    InfraWaffleMapDataFormat.abbreviatedNumber\n  ),\n  [InfraFormatterType.bytes]: createDataFormatter(InfraWaffleMapDataFormat.bytesDecimal),\n  [InfraFormatterType.bits]: createDataFormatter(InfraWaffleMapDataFormat.bitsDecimal),\n  [InfraFormatterType.percent]: formatPercent,\n};\n\nexport const createFormatter = (format: InfraFormatterType, template: string = '{{value}}') => (\n  val: string | number\n) => {\n  if (val == null) {\n    return '';\n  }\n  const fmtFn = FORMATTERS[format];\n  const value = fmtFn(Number(val));\n  return Mustache.render(template, { value });\n};\n"]}]}