{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/common/time/time_key.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/common/time/time_key.ts","mtime":1567631711977},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport { ascending, bisector } from 'd3-array';\nimport pick from 'lodash/fp/pick';\nexport var isTimeKey = function (value) {\n    return value &&\n        typeof value === 'object' &&\n        typeof value.time === 'number' &&\n        typeof value.tiebreaker === 'number';\n};\nexport var pickTimeKey = function (value) {\n    return pick(['time', 'tiebreaker'], value);\n};\nexport function compareTimeKeys(firstKey, secondKey, compareValues) {\n    if (compareValues === void 0) { compareValues = ascending; }\n    var timeComparison = compareValues(firstKey.time, secondKey.time);\n    if (timeComparison === 0) {\n        var tiebreakerComparison = compareValues(firstKey.tiebreaker, secondKey.tiebreaker);\n        if (tiebreakerComparison === 0 &&\n            typeof firstKey.gid !== 'undefined' &&\n            typeof secondKey.gid !== 'undefined') {\n            return compareValues(firstKey.gid, secondKey.gid);\n        }\n        return tiebreakerComparison;\n    }\n    return timeComparison;\n}\nexport var compareToTimeKey = function (keyAccessor, compareValues) { return function (value, key) { return compareTimeKeys(keyAccessor(value), key, compareValues); }; };\nexport var getIndexAtTimeKey = function (keyAccessor, compareValues) {\n    var comparator = compareToTimeKey(keyAccessor, compareValues);\n    var collectionBisector = bisector(comparator);\n    return function (collection, key) {\n        var index = collectionBisector.left(collection, key);\n        if (index >= collection.length) {\n            return null;\n        }\n        if (comparator(collection[index], key) !== 0) {\n            return null;\n        }\n        return index;\n    };\n};\nexport var timeKeyIsBetween = function (min, max, operand) {\n    return compareTimeKeys(min, operand) <= 0 && compareTimeKeys(max, operand) >= 0;\n};\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/common/time/time_key.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/common/time/time_key.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAEH,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,UAAU,CAAC;AAC/C,OAAO,IAAI,MAAM,gBAAgB,CAAC;AAUlC,MAAM,CAAC,IAAM,SAAS,GAAG,UAAC,KAAU;IAClC,OAAA,KAAK;QACL,OAAO,KAAK,KAAK,QAAQ;QACzB,OAAO,KAAK,CAAC,IAAI,KAAK,QAAQ;QAC9B,OAAO,KAAK,CAAC,UAAU,KAAK,QAAQ;AAHpC,CAGoC,CAAC;AAEvC,MAAM,CAAC,IAAM,WAAW,GAAG,UAAoB,KAAQ;IACrD,OAAA,IAAI,CAAC,CAAC,MAAM,EAAE,YAAY,CAAC,EAAE,KAAK,CAAC;AAAnC,CAAmC,CAAC;AAEtC,MAAM,UAAU,eAAe,CAC7B,QAAiB,EACjB,SAAkB,EAClB,aAAqC;IAArC,8BAAA,EAAA,yBAAqC;IAErC,IAAM,cAAc,GAAG,aAAa,CAAC,QAAQ,CAAC,IAAI,EAAE,SAAS,CAAC,IAAI,CAAC,CAAC;IAEpE,IAAI,cAAc,KAAK,CAAC,EAAE;QACxB,IAAM,oBAAoB,GAAG,aAAa,CAAC,QAAQ,CAAC,UAAU,EAAE,SAAS,CAAC,UAAU,CAAC,CAAC;QAEtF,IACE,oBAAoB,KAAK,CAAC;YAC1B,OAAO,QAAQ,CAAC,GAAG,KAAK,WAAW;YACnC,OAAO,SAAS,CAAC,GAAG,KAAK,WAAW,EACpC;YACA,OAAO,aAAa,CAAC,QAAQ,CAAC,GAAG,EAAE,SAAS,CAAC,GAAG,CAAC,CAAC;SACnD;QAED,OAAO,oBAAoB,CAAC;KAC7B;IAED,OAAO,cAAc,CAAC;AACxB,CAAC;AAED,MAAM,CAAC,IAAM,gBAAgB,GAAG,UAC9B,WAAsC,EACtC,aAA0B,IACvB,OAAA,UAAC,KAAY,EAAE,GAAY,IAAK,OAAA,eAAe,CAAC,WAAW,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,aAAa,CAAC,EAAvD,CAAuD,EAAvF,CAAuF,CAAC;AAE7F,MAAM,CAAC,IAAM,iBAAiB,GAAG,UAC/B,WAAsC,EACtC,aAA0B;IAE1B,IAAM,UAAU,GAAG,gBAAgB,CAAC,WAAW,EAAE,aAAa,CAAC,CAAC;IAChE,IAAM,kBAAkB,GAAG,QAAQ,CAAC,UAAU,CAAC,CAAC;IAEhD,OAAO,UAAC,UAAmB,EAAE,GAAY;QACvC,IAAM,KAAK,GAAG,kBAAkB,CAAC,IAAI,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC;QAEvD,IAAI,KAAK,IAAI,UAAU,CAAC,MAAM,EAAE;YAC9B,OAAO,IAAI,CAAC;SACb;QAED,IAAI,UAAU,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE,GAAG,CAAC,KAAK,CAAC,EAAE;YAC5C,OAAO,IAAI,CAAC;SACb;QAED,OAAO,KAAK,CAAC;IACf,CAAC,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,IAAM,gBAAgB,GAAG,UAAC,GAAY,EAAE,GAAY,EAAE,OAAgB;IAC3E,OAAA,eAAe,CAAC,GAAG,EAAE,OAAO,CAAC,IAAI,CAAC,IAAI,eAAe,CAAC,GAAG,EAAE,OAAO,CAAC,IAAI,CAAC;AAAxE,CAAwE,CAAC","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport { ascending, bisector } from 'd3-array';\nimport pick from 'lodash/fp/pick';\n\nexport interface TimeKey {\n  time: number;\n  tiebreaker: number;\n  gid?: string;\n}\n\nexport type Comparator = (firstValue: any, secondValue: any) => number;\n\nexport const isTimeKey = (value: any): value is TimeKey =>\n  value &&\n  typeof value === 'object' &&\n  typeof value.time === 'number' &&\n  typeof value.tiebreaker === 'number';\n\nexport const pickTimeKey = <T extends TimeKey>(value: T): TimeKey =>\n  pick(['time', 'tiebreaker'], value);\n\nexport function compareTimeKeys(\n  firstKey: TimeKey,\n  secondKey: TimeKey,\n  compareValues: Comparator = ascending\n): number {\n  const timeComparison = compareValues(firstKey.time, secondKey.time);\n\n  if (timeComparison === 0) {\n    const tiebreakerComparison = compareValues(firstKey.tiebreaker, secondKey.tiebreaker);\n\n    if (\n      tiebreakerComparison === 0 &&\n      typeof firstKey.gid !== 'undefined' &&\n      typeof secondKey.gid !== 'undefined'\n    ) {\n      return compareValues(firstKey.gid, secondKey.gid);\n    }\n\n    return tiebreakerComparison;\n  }\n\n  return timeComparison;\n}\n\nexport const compareToTimeKey = <Value>(\n  keyAccessor: (value: Value) => TimeKey,\n  compareValues?: Comparator\n) => (value: Value, key: TimeKey) => compareTimeKeys(keyAccessor(value), key, compareValues);\n\nexport const getIndexAtTimeKey = <Value>(\n  keyAccessor: (value: Value) => TimeKey,\n  compareValues?: Comparator\n) => {\n  const comparator = compareToTimeKey(keyAccessor, compareValues);\n  const collectionBisector = bisector(comparator);\n\n  return (collection: Value[], key: TimeKey): number | null => {\n    const index = collectionBisector.left(collection, key);\n\n    if (index >= collection.length) {\n      return null;\n    }\n\n    if (comparator(collection[index], key) !== 0) {\n      return null;\n    }\n\n    return index;\n  };\n};\n\nexport const timeKeyIsBetween = (min: TimeKey, max: TimeKey, operand: TimeKey) =>\n  compareTimeKeys(min, operand) <= 0 && compareTimeKeys(max, operand) >= 0;\n"]}]}