{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/apm/public/services/rest/apm/traces.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/apm/public/services/rest/apm/traces.ts","mtime":1567631711870},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport * as tslib_1 from \"tslib\";\nimport { callApi } from '../callApi';\nimport { addVersion, getEncodedEsQuery } from './apm';\nexport function loadTrace(_a) {\n    var traceId = _a.traceId, start = _a.start, end = _a.end;\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n        var hits;\n        return tslib_1.__generator(this, function (_b) {\n            switch (_b.label) {\n                case 0: return [4 /*yield*/, callApi({\n                        pathname: \"/api/apm/traces/\" + traceId,\n                        query: {\n                            start: start,\n                            end: end\n                        }\n                    })];\n                case 1:\n                    hits = _b.sent();\n                    return [2 /*return*/, hits.map(addVersion)];\n            }\n        });\n    });\n}\nexport function loadTraceList(_a) {\n    var start = _a.start, end = _a.end, kuery = _a.kuery;\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n        var groups, _b, _c, _d;\n        return tslib_1.__generator(this, function (_e) {\n            switch (_e.label) {\n                case 0:\n                    _b = callApi;\n                    _c = {\n                        pathname: '/api/apm/traces'\n                    };\n                    _d = {\n                        start: start,\n                        end: end\n                    };\n                    return [4 /*yield*/, getEncodedEsQuery(kuery)];\n                case 1: return [4 /*yield*/, _b.apply(void 0, [(_c.query = (_d.esFilterQuery = _e.sent(),\n                            _d),\n                            _c)])];\n                case 2:\n                    groups = _e.sent();\n                    return [2 /*return*/, groups.map(function (group) {\n                            group.sample = addVersion(group.sample);\n                            return group;\n                        })];\n            }\n        });\n    });\n}\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/apm/public/services/rest/apm/traces.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/apm/public/services/rest/apm/traces.ts"],"names":[],"mappings":"AAAA;;;;GAIG;;AAKH,OAAO,EAAE,OAAO,EAAE,MAAM,YAAY,CAAC;AACrC,OAAO,EAAE,UAAU,EAAE,iBAAiB,EAAE,MAAM,OAAO,CAAC;AAEtD,MAAM,UAAgB,SAAS,CAAC,EAAmC;QAAjC,oBAAO,EAAE,gBAAK,EAAE,YAAG;;;;;wBACtC,qBAAM,OAAO,CAAmB;wBAC3C,QAAQ,EAAE,qBAAmB,OAAS;wBACtC,KAAK,EAAE;4BACL,KAAK,OAAA;4BACL,GAAG,KAAA;yBACJ;qBACF,CAAC,EAAA;;oBANI,IAAI,GAAG,SAMX;oBAEF,sBAAO,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,EAAC;;;;CAC7B;AAED,MAAM,UAAgB,aAAa,CAAC,EAAiC;QAA/B,gBAAK,EAAE,YAAG,EAAE,gBAAK;;;;;;oBAChC,KAAA,OAAO,CAAA;;wBAC1B,QAAQ,EAAE,iBAAiB;;;wBAEzB,KAAK,OAAA;wBACL,GAAG,KAAA;;oBACY,qBAAM,iBAAiB,CAAC,KAAK,CAAC,EAAA;wBALlC,qBAAM,mBAEnB,QAAK,IAGH,gBAAa,GAAE,SAA8B;+BAC9C;iCACD,EAAA;;oBAPI,MAAM,GAAG,SAOb;oBAEF,sBAAO,MAAM,CAAC,GAAG,CAAC,UAAA,KAAK;4BACrB,KAAK,CAAC,MAAM,GAAG,UAAU,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;4BACxC,OAAO,KAAK,CAAC;wBACf,CAAC,CAAC,EAAC;;;;CACJ","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport { TraceListAPIResponse } from 'x-pack/plugins/apm/server/lib/traces/get_top_traces';\nimport { TraceAPIResponse } from 'x-pack/plugins/apm/server/lib/traces/get_trace';\nimport { IUrlParams } from '../../../store/urlParams';\nimport { callApi } from '../callApi';\nimport { addVersion, getEncodedEsQuery } from './apm';\n\nexport async function loadTrace({ traceId, start, end }: IUrlParams) {\n  const hits = await callApi<TraceAPIResponse>({\n    pathname: `/api/apm/traces/${traceId}`,\n    query: {\n      start,\n      end\n    }\n  });\n\n  return hits.map(addVersion);\n}\n\nexport async function loadTraceList({ start, end, kuery }: IUrlParams) {\n  const groups = await callApi<TraceListAPIResponse>({\n    pathname: '/api/apm/traces',\n    query: {\n      start,\n      end,\n      esFilterQuery: await getEncodedEsQuery(kuery)\n    }\n  });\n\n  return groups.map(group => {\n    group.sample = addVersion(group.sample);\n    return group;\n  });\n}\n"]}]}