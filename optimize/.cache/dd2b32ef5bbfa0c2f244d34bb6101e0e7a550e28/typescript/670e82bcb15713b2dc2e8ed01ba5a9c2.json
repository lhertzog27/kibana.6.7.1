{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/uptime/public/components/queries/monitor_status_bar/monitor_status_bar_query.tsx","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/uptime/public/components/queries/monitor_status_bar/monitor_status_bar_query.tsx","mtime":1567631712330},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport { i18n } from '@kbn/i18n';\nimport { get } from 'lodash';\nimport React from 'react';\nimport { Query } from 'react-apollo';\nimport { StatusBar } from '../../functional';\nimport { EmptyStatusBar } from '../../functional/empty_status_bar';\nimport { formatDuration } from './format_duration';\nimport { getMonitorStatusBarQuery } from './get_monitor_status_bar';\nexport var MonitorStatusBarQuery = function (_a) {\n    var dateRangeStart = _a.dateRangeStart, dateRangeEnd = _a.dateRangeEnd, monitorId = _a.monitorId, autorefreshIsPaused = _a.autorefreshIsPaused, autorefreshInterval = _a.autorefreshInterval;\n    return (React.createElement(Query, { pollInterval: autorefreshIsPaused ? undefined : autorefreshInterval, query: getMonitorStatusBarQuery, variables: { dateRangeStart: dateRangeStart, dateRangeEnd: dateRangeEnd, monitorId: monitorId } }, function (_a) {\n        var loading = _a.loading, error = _a.error, data = _a.data;\n        if (loading) {\n            return React.createElement(EmptyStatusBar, { message: \"Fetching data\", monitorId: monitorId });\n        }\n        if (error) {\n            return i18n.translate('xpack.uptime.monitorStatusBar.errorMessage', {\n                values: { message: error.message },\n                defaultMessage: 'Error {message}',\n            });\n        }\n        var monitorStatus = get(data, 'monitorStatus');\n        if (!monitorStatus || !monitorStatus.length) {\n            return React.createElement(EmptyStatusBar, { monitorId: monitorId });\n        }\n        var _b = monitorStatus[0], monitor = _b.monitor, timestamp = _b.timestamp, tcp = _b.tcp;\n        var status = get(monitor, 'status', undefined);\n        var host = get(monitor, 'host', undefined);\n        var port = get(tcp, 'port', undefined);\n        var scheme = get(monitor, 'scheme', undefined);\n        var duration = parseInt(get(monitor, 'duration.us'), 10);\n        return (React.createElement(StatusBar, { duration: formatDuration(duration), host: host, port: port, scheme: scheme, status: status, timestamp: timestamp }));\n    }));\n};\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/uptime/public/components/queries/monitor_status_bar/monitor_status_bar_query.tsx","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/uptime/public/components/queries/monitor_status_bar/monitor_status_bar_query.tsx"],"names":[],"mappings":"AAAA;;;;GAIG;AAEH,OAAO,EAAE,IAAI,EAAE,MAAM,WAAW,CAAC;AAEjC,OAAO,EAAE,GAAG,EAAE,MAAM,QAAQ,CAAC;AAC7B,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,KAAK,EAAE,MAAM,cAAc,CAAC;AAGrC,OAAO,EAAE,SAAS,EAAE,MAAM,kBAAkB,CAAC;AAC7C,OAAO,EAAE,cAAc,EAAE,MAAM,mCAAmC,CAAC;AACnE,OAAO,EAAE,cAAc,EAAE,MAAM,mBAAmB,CAAC;AACnD,OAAO,EAAE,wBAAwB,EAAE,MAAM,0BAA0B,CAAC;AAcpE,MAAM,CAAC,IAAM,qBAAqB,GAAG,UAAC,EAM9B;QALN,kCAAc,EACd,8BAAY,EACZ,wBAAS,EACT,4CAAmB,EACnB,4CAAmB;IACR,OAAA,CACX,oBAAC,KAAK,IACJ,YAAY,EAAE,mBAAmB,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,mBAAmB,EACnE,KAAK,EAAE,wBAAwB,EAC/B,SAAS,EAAE,EAAE,cAAc,gBAAA,EAAE,YAAY,cAAA,EAAE,SAAS,WAAA,EAAE,IAErD,UAAC,EAAqD;YAAnD,oBAAO,EAAE,gBAAK,EAAE,cAAI;QACtB,IAAI,OAAO,EAAE;YACX,OAAO,oBAAC,cAAc,IAAC,OAAO,EAAC,eAAe,EAAC,SAAS,EAAE,SAAS,GAAI,CAAC;SACzE;QACD,IAAI,KAAK,EAAE;YACT,OAAO,IAAI,CAAC,SAAS,CAAC,4CAA4C,EAAE;gBAClE,MAAM,EAAE,EAAE,OAAO,EAAE,KAAK,CAAC,OAAO,EAAE;gBAClC,cAAc,EAAE,iBAAiB;aAClC,CAAC,CAAC;SACJ;QAED,IAAM,aAAa,GAAW,GAAG,CAAC,IAAI,EAAE,eAAe,CAAC,CAAC;QACzD,IAAI,CAAC,aAAa,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE;YAC3C,OAAO,oBAAC,cAAc,IAAC,SAAS,EAAE,SAAS,GAAI,CAAC;SACjD;QAEK,IAAA,qBAA8C,EAA5C,oBAAO,EAAE,wBAAS,EAAE,YAAG,CAAsB;QACrD,IAAM,MAAM,GAAG,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,SAAS,CAAC,CAAC;QACjD,IAAM,IAAI,GAAG,GAAG,CAAC,OAAO,EAAE,MAAM,EAAE,SAAS,CAAC,CAAC;QAC7C,IAAM,IAAI,GAAG,GAAG,CAAC,GAAG,EAAE,MAAM,EAAE,SAAS,CAAC,CAAC;QACzC,IAAM,MAAM,GAAG,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,SAAS,CAAC,CAAC;QACjD,IAAM,QAAQ,GAAG,QAAQ,CAAC,GAAG,CAAC,OAAO,EAAE,aAAa,CAAC,EAAE,EAAE,CAAC,CAAC;QAE3D,OAAO,CACL,oBAAC,SAAS,IACR,QAAQ,EAAE,cAAc,CAAC,QAAQ,CAAC,EAClC,IAAI,EAAE,IAAI,EACV,IAAI,EAAE,IAAI,EACV,MAAM,EAAE,MAAM,EACd,MAAM,EAAE,MAAM,EACd,SAAS,EAAE,SAAS,GACpB,CACH,CAAC;IACJ,CAAC,CACK,CACT;AAzCY,CAyCZ,CAAC","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport { i18n } from '@kbn/i18n';\nimport { ApolloError } from 'apollo-client';\nimport { get } from 'lodash';\nimport React from 'react';\nimport { Query } from 'react-apollo';\nimport { Ping } from 'x-pack/plugins/uptime/common/graphql/types';\nimport { UptimeCommonProps } from '../../../uptime_app';\nimport { StatusBar } from '../../functional';\nimport { EmptyStatusBar } from '../../functional/empty_status_bar';\nimport { formatDuration } from './format_duration';\nimport { getMonitorStatusBarQuery } from './get_monitor_status_bar';\n\ninterface MonitorStatusBarProps {\n  monitorId: string;\n}\n\ninterface MonitorStatusBarQueryParams {\n  loading: boolean;\n  error?: ApolloError | any;\n  data?: { monitorStatus: Ping[] };\n}\n\ntype Props = MonitorStatusBarProps & UptimeCommonProps;\n\nexport const MonitorStatusBarQuery = ({\n  dateRangeStart,\n  dateRangeEnd,\n  monitorId,\n  autorefreshIsPaused,\n  autorefreshInterval,\n}: Props) => (\n  <Query\n    pollInterval={autorefreshIsPaused ? undefined : autorefreshInterval}\n    query={getMonitorStatusBarQuery}\n    variables={{ dateRangeStart, dateRangeEnd, monitorId }}\n  >\n    {({ loading, error, data }: MonitorStatusBarQueryParams) => {\n      if (loading) {\n        return <EmptyStatusBar message=\"Fetching data\" monitorId={monitorId} />;\n      }\n      if (error) {\n        return i18n.translate('xpack.uptime.monitorStatusBar.errorMessage', {\n          values: { message: error.message },\n          defaultMessage: 'Error {message}',\n        });\n      }\n\n      const monitorStatus: Ping[] = get(data, 'monitorStatus');\n      if (!monitorStatus || !monitorStatus.length) {\n        return <EmptyStatusBar monitorId={monitorId} />;\n      }\n\n      const { monitor, timestamp, tcp } = monitorStatus[0];\n      const status = get(monitor, 'status', undefined);\n      const host = get(monitor, 'host', undefined);\n      const port = get(tcp, 'port', undefined);\n      const scheme = get(monitor, 'scheme', undefined);\n      const duration = parseInt(get(monitor, 'duration.us'), 10);\n\n      return (\n        <StatusBar\n          duration={formatDuration(duration)}\n          host={host}\n          port={port}\n          scheme={scheme}\n          status={status}\n          timestamp={timestamp}\n        />\n      );\n    }}\n  </Query>\n);\n"]}]}