{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/pages/link_to/redirect_to_node_detail.tsx","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/pages/link_to/redirect_to_node_detail.tsx","mtime":1567631711986},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport React from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { replaceMetricTimeInQueryString } from '../../containers/metrics/with_metrics_time';\nimport { getFromFromLocation, getToFromLocation } from './query_params';\nexport var RedirectToNodeDetail = function (_a) {\n    var _b = _a.match.params, nodeId = _b.nodeId, nodeType = _b.nodeType, location = _a.location;\n    var searchString = replaceMetricTimeInQueryString(getFromFromLocation(location), getToFromLocation(location))('');\n    return React.createElement(Redirect, { to: \"/metrics/\" + nodeType + \"/\" + nodeId + \"?\" + searchString });\n};\nexport var getNodeDetailUrl = function (_a) {\n    var nodeType = _a.nodeType, nodeId = _a.nodeId, to = _a.to, from = _a.from;\n    var args = to && from ? \"?to=\" + to + \"&from=\" + from : '';\n    return \"#/link-to/\" + nodeType + \"-detail/\" + nodeId + args;\n};\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/pages/link_to/redirect_to_node_detail.tsx","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/pages/link_to/redirect_to_node_detail.tsx"],"names":[],"mappings":"AAAA;;;;GAIG;AAEH,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,QAAQ,EAAuB,MAAM,kBAAkB,CAAC;AAEjE,OAAO,EAAE,8BAA8B,EAAE,MAAM,4CAA4C,CAAC;AAE5F,OAAO,EAAE,mBAAmB,EAAE,iBAAiB,EAAE,MAAM,gBAAgB,CAAC;AAOxE,MAAM,CAAC,IAAM,oBAAoB,GAAG,UAAC,EAKT;QAHxB,oBAA4B,EAAlB,kBAAM,EAAE,sBAAQ,EAE5B,sBAAQ;IAER,IAAM,YAAY,GAAG,8BAA8B,CACjD,mBAAmB,CAAC,QAAQ,CAAC,EAC7B,iBAAiB,CAAC,QAAQ,CAAC,CAC5B,CAAC,EAAE,CAAC,CAAC;IAEN,OAAO,oBAAC,QAAQ,IAAC,EAAE,EAAE,cAAY,QAAQ,SAAI,MAAM,SAAI,YAAc,GAAI,CAAC;AAC5E,CAAC,CAAC;AAEF,MAAM,CAAC,IAAM,gBAAgB,GAAG,UAAC,EAUhC;QATC,sBAAQ,EACR,kBAAM,EACN,UAAE,EACF,cAAI;IAOJ,IAAM,IAAI,GAAG,EAAE,IAAI,IAAI,CAAC,CAAC,CAAC,SAAO,EAAE,cAAS,IAAM,CAAC,CAAC,CAAC,EAAE,CAAC;IACxD,OAAO,eAAa,QAAQ,gBAAW,MAAM,GAAG,IAAM,CAAC;AACzD,CAAC,CAAC","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport React from 'react';\nimport { Redirect, RouteComponentProps } from 'react-router-dom';\n\nimport { replaceMetricTimeInQueryString } from '../../containers/metrics/with_metrics_time';\nimport { InfraNodeType } from '../../graphql/types';\nimport { getFromFromLocation, getToFromLocation } from './query_params';\n\ntype RedirectToNodeDetailProps = RouteComponentProps<{\n  nodeId: string;\n  nodeType: InfraNodeType;\n}>;\n\nexport const RedirectToNodeDetail = ({\n  match: {\n    params: { nodeId, nodeType },\n  },\n  location,\n}: RedirectToNodeDetailProps) => {\n  const searchString = replaceMetricTimeInQueryString(\n    getFromFromLocation(location),\n    getToFromLocation(location)\n  )('');\n\n  return <Redirect to={`/metrics/${nodeType}/${nodeId}?${searchString}`} />;\n};\n\nexport const getNodeDetailUrl = ({\n  nodeType,\n  nodeId,\n  to,\n  from,\n}: {\n  nodeType: InfraNodeType;\n  nodeId: string;\n  to?: number;\n  from?: number;\n}) => {\n  const args = to && from ? `?to=${to}&from=${from}` : '';\n  return `#/link-to/${nodeType}-detail/${nodeId}${args}`;\n};\n"]}]}