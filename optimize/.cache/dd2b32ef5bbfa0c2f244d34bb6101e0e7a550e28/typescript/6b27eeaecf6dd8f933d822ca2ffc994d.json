{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/components/nodes_overview/index.tsx","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/components/nodes_overview/index.tsx","mtime":1567631711981},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["import * as tslib_1 from \"tslib\";\nvar _a;\nvar _b;\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport { injectI18n } from '@kbn/i18n/react';\nimport { get, max, min } from 'lodash';\nimport React from 'react';\nimport styled from 'styled-components';\nimport { InfraMetricType, } from '../../graphql/types';\nimport { InfraFormatterType } from '../../lib/lib';\nimport { createFormatter } from '../../utils/formatters';\nimport { NoData } from '../empty_states';\nimport { InfraLoadingPanel } from '../loading';\nimport { Map } from '../waffle/map';\nimport { ViewSwitcher } from '../waffle/view_switcher';\nimport { TableView } from './table';\nvar METRIC_FORMATTERS = (_a = {},\n    _a[InfraMetricType.count] = { formatter: InfraFormatterType.number, template: '{{value}}' },\n    _a[InfraMetricType.cpu] = {\n        formatter: InfraFormatterType.percent,\n        template: '{{value}}',\n        bounds: { min: 0, max: 1 },\n    },\n    _a[InfraMetricType.memory] = {\n        formatter: InfraFormatterType.percent,\n        template: '{{value}}',\n        bounds: { min: 0, max: 1 },\n    },\n    _a[InfraMetricType.rx] = { formatter: InfraFormatterType.bits, template: '{{value}}/s' },\n    _a[InfraMetricType.tx] = { formatter: InfraFormatterType.bits, template: '{{value}}/s' },\n    _a[InfraMetricType.logRate] = {\n        formatter: InfraFormatterType.abbreviatedNumber,\n        template: '{{value}}/s',\n    },\n    _a);\nvar calculateBoundsFromNodes = function (nodes) {\n    var values = nodes.map(function (node) { return node.metric.value; });\n    // if there is only one value then we need to set the bottom range to zero\n    if (values.length === 1) {\n        values.unshift(0);\n    }\n    return { min: min(values) || 0, max: max(values) || 0 };\n};\nexport var NodesOverview = injectI18n((_b = /** @class */ (function (_super) {\n        tslib_1.__extends(class_1, _super);\n        function class_1() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this.handleViewChange = function (view) { return _this.props.onViewChange(view); };\n            // TODO: Change this to a real implimentation using the tickFormatter from the prototype as an example.\n            _this.formatter = function (val) {\n                var metric = _this.props.options.metric;\n                var metricFormatter = get(METRIC_FORMATTERS, metric.type, METRIC_FORMATTERS[InfraMetricType.count]);\n                if (val == null) {\n                    return '';\n                }\n                var formatter = createFormatter(metricFormatter.formatter, metricFormatter.template);\n                return formatter(val);\n            };\n            _this.handleDrilldown = function (filter) {\n                _this.props.onDrilldown({\n                    kind: 'kuery',\n                    expression: filter,\n                });\n                return;\n            };\n            return _this;\n        }\n        class_1.prototype.render = function () {\n            var _a = this.props, loading = _a.loading, nodes = _a.nodes, nodeType = _a.nodeType, reload = _a.reload, intl = _a.intl, view = _a.view, options = _a.options, timeRange = _a.timeRange;\n            if (loading) {\n                return (React.createElement(InfraLoadingPanel, { height: \"100%\", width: \"100%\", text: intl.formatMessage({\n                        id: 'xpack.infra.waffle.loadingDataText',\n                        defaultMessage: 'Loading data',\n                    }) }));\n            }\n            else if (!loading && nodes && nodes.length === 0) {\n                return (React.createElement(NoData, { titleText: intl.formatMessage({\n                        id: 'xpack.infra.waffle.noDataTitle',\n                        defaultMessage: 'There is no data to display.',\n                    }), bodyText: intl.formatMessage({\n                        id: 'xpack.infra.waffle.noDataDescription',\n                        defaultMessage: 'Try adjusting your time or filter.',\n                    }), refetchText: intl.formatMessage({\n                        id: 'xpack.infra.waffle.checkNewDataButtonLabel',\n                        defaultMessage: 'Check for new data',\n                    }), onRefetch: function () {\n                        reload();\n                    }, testString: \"noMetricsDataPrompt\" }));\n            }\n            var metric = this.props.options.metric;\n            var metricFormatter = get(METRIC_FORMATTERS, metric.type, METRIC_FORMATTERS[InfraMetricType.count]);\n            var bounds = (metricFormatter && metricFormatter.bounds) || calculateBoundsFromNodes(nodes);\n            return (React.createElement(MainContainer, null,\n                React.createElement(ViewSwitcherContainer, null,\n                    React.createElement(ViewSwitcher, { view: view, onChange: this.handleViewChange })),\n                view === 'table' ? (React.createElement(TableContainer, null,\n                    React.createElement(TableView, { nodeType: nodeType, nodes: nodes, options: options, formatter: this.formatter, timeRange: timeRange, onFilter: this.handleDrilldown }))) : (React.createElement(MapContainer, null,\n                    React.createElement(Map, { nodeType: nodeType, nodes: nodes, options: options, formatter: this.formatter, timeRange: timeRange, onFilter: this.handleDrilldown, bounds: bounds })))));\n        };\n        return class_1;\n    }(React.Component)),\n    _b.displayName = 'Waffle',\n    _b));\nvar MainContainer = styled.div(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([\"\\n  position: relative;\\n  flex: 1 1 auto;\\n\"], [\"\\n  position: relative;\\n  flex: 1 1 auto;\\n\"])));\nvar TableContainer = styled.div(templateObject_2 || (templateObject_2 = tslib_1.__makeTemplateObject([\"\\n  padding: \", \";\\n\"], [\"\\n  padding: \", \";\\n\"])), function (props) { return props.theme.eui.paddingSizes.l; });\nvar ViewSwitcherContainer = styled.div(templateObject_3 || (templateObject_3 = tslib_1.__makeTemplateObject([\"\\n  padding: \", \";\\n\"], [\"\\n  padding: \", \";\\n\"])), function (props) { return props.theme.eui.paddingSizes.l; });\nvar MapContainer = styled.div(templateObject_4 || (templateObject_4 = tslib_1.__makeTemplateObject([\"\\n  position: absolute;\\n  display: flex;\\n  top: 70px;\\n  right: 0;\\n  bottom: 0;\\n  left: 0;\\n\"], [\"\\n  position: absolute;\\n  display: flex;\\n  top: 70px;\\n  right: 0;\\n  bottom: 0;\\n  left: 0;\\n\"])));\nvar templateObject_1, templateObject_2, templateObject_3, templateObject_4;\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/components/nodes_overview/index.tsx","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/components/nodes_overview/index.tsx"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport { InjectedIntl, injectI18n } from '@kbn/i18n/react';\nimport { get, max, min } from 'lodash';\nimport React from 'react';\nimport styled from 'styled-components';\n\nimport {\n  InfraMetricType,\n  InfraNode,\n  InfraNodeType,\n  InfraTimerangeInput,\n} from '../../graphql/types';\nimport { InfraFormatterType, InfraWaffleMapBounds, InfraWaffleMapOptions } from '../../lib/lib';\nimport { KueryFilterQuery } from '../../store/local/waffle_filter';\nimport { createFormatter } from '../../utils/formatters';\nimport { NoData } from '../empty_states';\nimport { InfraLoadingPanel } from '../loading';\nimport { Map } from '../waffle/map';\nimport { ViewSwitcher } from '../waffle/view_switcher';\nimport { TableView } from './table';\n\ninterface Props {\n  options: InfraWaffleMapOptions;\n  nodeType: InfraNodeType;\n  nodes: InfraNode[];\n  loading: boolean;\n  reload: () => void;\n  onDrilldown: (filter: KueryFilterQuery) => void;\n  timeRange: InfraTimerangeInput;\n  onViewChange: (view: string) => void;\n  view: string;\n  intl: InjectedIntl;\n}\n\ninterface MetricFormatter {\n  formatter: InfraFormatterType;\n  template: string;\n  bounds?: { min: number; max: number };\n}\n\ninterface MetricFormatters {\n  [key: string]: MetricFormatter;\n}\n\nconst METRIC_FORMATTERS: MetricFormatters = {\n  [InfraMetricType.count]: { formatter: InfraFormatterType.number, template: '{{value}}' },\n  [InfraMetricType.cpu]: {\n    formatter: InfraFormatterType.percent,\n    template: '{{value}}',\n    bounds: { min: 0, max: 1 },\n  },\n  [InfraMetricType.memory]: {\n    formatter: InfraFormatterType.percent,\n    template: '{{value}}',\n    bounds: { min: 0, max: 1 },\n  },\n  [InfraMetricType.rx]: { formatter: InfraFormatterType.bits, template: '{{value}}/s' },\n  [InfraMetricType.tx]: { formatter: InfraFormatterType.bits, template: '{{value}}/s' },\n  [InfraMetricType.logRate]: {\n    formatter: InfraFormatterType.abbreviatedNumber,\n    template: '{{value}}/s',\n  },\n};\n\nconst calculateBoundsFromNodes = (nodes: InfraNode[]): InfraWaffleMapBounds => {\n  const values = nodes.map(node => node.metric.value);\n  // if there is only one value then we need to set the bottom range to zero\n  if (values.length === 1) {\n    values.unshift(0);\n  }\n  return { min: min(values) || 0, max: max(values) || 0 };\n};\n\nexport const NodesOverview = injectI18n(\n  class extends React.Component<Props, {}> {\n    public static displayName = 'Waffle';\n    public render() {\n      const { loading, nodes, nodeType, reload, intl, view, options, timeRange } = this.props;\n      if (loading) {\n        return (\n          <InfraLoadingPanel\n            height=\"100%\"\n            width=\"100%\"\n            text={intl.formatMessage({\n              id: 'xpack.infra.waffle.loadingDataText',\n              defaultMessage: 'Loading data',\n            })}\n          />\n        );\n      } else if (!loading && nodes && nodes.length === 0) {\n        return (\n          <NoData\n            titleText={intl.formatMessage({\n              id: 'xpack.infra.waffle.noDataTitle',\n              defaultMessage: 'There is no data to display.',\n            })}\n            bodyText={intl.formatMessage({\n              id: 'xpack.infra.waffle.noDataDescription',\n              defaultMessage: 'Try adjusting your time or filter.',\n            })}\n            refetchText={intl.formatMessage({\n              id: 'xpack.infra.waffle.checkNewDataButtonLabel',\n              defaultMessage: 'Check for new data',\n            })}\n            onRefetch={() => {\n              reload();\n            }}\n            testString=\"noMetricsDataPrompt\"\n          />\n        );\n      }\n      const { metric } = this.props.options;\n      const metricFormatter = get(\n        METRIC_FORMATTERS,\n        metric.type,\n        METRIC_FORMATTERS[InfraMetricType.count]\n      );\n      const bounds = (metricFormatter && metricFormatter.bounds) || calculateBoundsFromNodes(nodes);\n      return (\n        <MainContainer>\n          <ViewSwitcherContainer>\n            <ViewSwitcher view={view} onChange={this.handleViewChange} />\n          </ViewSwitcherContainer>\n          {view === 'table' ? (\n            <TableContainer>\n              <TableView\n                nodeType={nodeType}\n                nodes={nodes}\n                options={options}\n                formatter={this.formatter}\n                timeRange={timeRange}\n                onFilter={this.handleDrilldown}\n              />\n            </TableContainer>\n          ) : (\n            <MapContainer>\n              <Map\n                nodeType={nodeType}\n                nodes={nodes}\n                options={options}\n                formatter={this.formatter}\n                timeRange={timeRange}\n                onFilter={this.handleDrilldown}\n                bounds={bounds}\n              />\n            </MapContainer>\n          )}\n        </MainContainer>\n      );\n    }\n\n    private handleViewChange = (view: string) => this.props.onViewChange(view);\n\n    // TODO: Change this to a real implimentation using the tickFormatter from the prototype as an example.\n    private formatter = (val: string | number) => {\n      const { metric } = this.props.options;\n      const metricFormatter = get(\n        METRIC_FORMATTERS,\n        metric.type,\n        METRIC_FORMATTERS[InfraMetricType.count]\n      );\n      if (val == null) {\n        return '';\n      }\n      const formatter = createFormatter(metricFormatter.formatter, metricFormatter.template);\n      return formatter(val);\n    };\n\n    private handleDrilldown = (filter: string) => {\n      this.props.onDrilldown({\n        kind: 'kuery',\n        expression: filter,\n      });\n      return;\n    };\n  }\n);\n\nconst MainContainer = styled.div`\n  position: relative;\n  flex: 1 1 auto;\n`;\n\nconst TableContainer = styled.div`\n  padding: ${props => props.theme.eui.paddingSizes.l};\n`;\n\nconst ViewSwitcherContainer = styled.div`\n  padding: ${props => props.theme.eui.paddingSizes.l};\n`;\n\nconst MapContainer = styled.div`\n  position: absolute;\n  display: flex;\n  top: 70px;\n  right: 0;\n  bottom: 0;\n  left: 0;\n`;\n"]}]}