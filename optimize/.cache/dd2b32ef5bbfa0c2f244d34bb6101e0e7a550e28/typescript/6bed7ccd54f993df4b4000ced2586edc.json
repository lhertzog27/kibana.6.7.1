{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/src/core/public/injected_metadata/deep_freeze.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/core/public/injected_metadata/deep_freeze.ts","mtime":1567631711497},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport * as tslib_1 from \"tslib\";\nexport function deepFreeze(object) {\n    var e_1, _a;\n    try {\n        // for any properties that reference an object, makes sure that object is\n        // recursively frozen as well\n        for (var _b = tslib_1.__values(Object.values(object)), _c = _b.next(); !_c.done; _c = _b.next()) {\n            var value = _c.value;\n            if (value !== null && typeof value === 'object') {\n                deepFreeze(value);\n            }\n        }\n    }\n    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n    finally {\n        try {\n            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        }\n        finally { if (e_1) throw e_1.error; }\n    }\n    return Object.freeze(object);\n}\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/src/core/public/injected_metadata/deep_freeze.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/src/core/public/injected_metadata/deep_freeze.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;GAiBG;;AAaH,MAAM,UAAU,UAAU,CAAsB,MAAS;;;QACvD,yEAAyE;QACzE,6BAA6B;QAC7B,KAAoB,IAAA,KAAA,iBAAA,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAA,gBAAA,4BAAE;YAAtC,IAAM,KAAK,WAAA;YACd,IAAI,KAAK,KAAK,IAAI,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;gBAC/C,UAAU,CAAC,KAAK,CAAC,CAAC;aACnB;SACF;;;;;;;;;IAED,OAAO,MAAM,CAAC,MAAM,CAAC,MAAM,CAAyB,CAAC;AACvD,CAAC","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\ntype Freezable = { [k: string]: any } | any[];\n\n// if we define this inside RecursiveReadonly TypeScript complains\ninterface RecursiveReadonlyArray<T> extends Array<RecursiveReadonly<T>> {}\n\ntype RecursiveReadonly<T> = T extends any[]\n  ? RecursiveReadonlyArray<T[number]>\n  : T extends object\n  ? Readonly<{ [K in keyof T]: RecursiveReadonly<T[K]> }>\n  : T;\n\nexport function deepFreeze<T extends Freezable>(object: T) {\n  // for any properties that reference an object, makes sure that object is\n  // recursively frozen as well\n  for (const value of Object.values(object)) {\n    if (value !== null && typeof value === 'object') {\n      deepFreeze(value);\n    }\n  }\n\n  return Object.freeze(object) as RecursiveReadonly<T>;\n}\n"]}]}