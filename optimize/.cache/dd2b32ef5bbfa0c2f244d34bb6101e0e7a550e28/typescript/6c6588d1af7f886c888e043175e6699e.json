{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/utils/typed_redux.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/utils/typed_redux.ts","mtime":1567631711991},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport { bindActionCreators } from 'redux';\nexport var globalizeSelector = function (globalizer, selector) { return function (globalState) { return selector(globalizer(globalState)); }; };\nexport var globalizeSelectors = function (globalizer, selectors) {\n    var globalSelectors = {};\n    for (var s in selectors) {\n        if (selectors.hasOwnProperty(s)) {\n            globalSelectors[s] = globalizeSelector(globalizer, selectors[s]);\n        }\n    }\n    return globalSelectors;\n};\nexport var bindPlainActionCreators = function (actionCreators) { return function (dispatch) {\n    return bindActionCreators(actionCreators, dispatch);\n}; };\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/utils/typed_redux.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/utils/typed_redux.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAEH,OAAO,EAAE,kBAAkB,EAAY,MAAM,OAAO,CAAC;AAkBrD,MAAM,CAAC,IAAM,iBAAiB,GAAG,UAM/B,UAA6C,EAC7C,QAAuB,IACU,OAAA,UAAC,WAAwB,IAAK,OAAA,QAAQ,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,EAAjC,CAAiC,EAA/D,CAA+D,CAAC;AAEnG,MAAM,CAAC,IAAM,kBAAkB,GAAG,UAKhC,UAAoD,EACpD,SAAyB;IAEzB,IAAM,eAAe,GAAG,EAAkD,CAAC;IAC3E,KAAK,IAAM,CAAC,IAAI,SAAS,EAAE;QACzB,IAAI,SAAS,CAAC,cAAc,CAAC,CAAC,CAAC,EAAE;YAC/B,eAAe,CAAC,CAAC,CAAC,GAAG,iBAAiB,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;SAClE;KACF;IACD,OAAO,eAAe,CAAC;AACzB,CAAC,CAAC;AAeF,MAAM,CAAC,IAAM,uBAAuB,GAAG,UACrC,cAAqC,IAClC,OAAA,UAAC,QAAkB;IACtB,OAAA,kBAAkB,CAAC,cAAc,EAAE,QAAQ,CAE1C;AAFD,CAEC,EAHE,CAGF,CAAC","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport { bindActionCreators, Dispatch } from 'redux';\n\n/**\n * Selectors\n */\nexport type Selector<State, Value> = (state: State) => Value;\n\nexport interface Selectors<State = any, Value = any> {\n  [selectorName: string]: Selector<State, Value>;\n}\n\nexport type GlobalSelectors<GlobalState, LocalSelectors extends Selectors> = {\n  [selectorName in keyof LocalSelectors]: Selector<\n    GlobalState,\n    ReturnType<LocalSelectors[selectorName]>\n  >\n};\n\nexport const globalizeSelector = <\n  GlobalState,\n  LocalSelector extends Selector<LocalState, Value>,\n  LocalState = any,\n  Value = any\n>(\n  globalizer: Selector<GlobalState, LocalState>,\n  selector: LocalSelector\n): Selector<GlobalState, Value> => (globalState: GlobalState) => selector(globalizer(globalState));\n\nexport const globalizeSelectors = <\n  GlobalState,\n  LocalSelectors extends Selectors<LocalState>,\n  LocalState = any\n>(\n  globalizer: (globalState: GlobalState) => LocalState,\n  selectors: LocalSelectors\n): GlobalSelectors<GlobalState, LocalSelectors> => {\n  const globalSelectors = {} as GlobalSelectors<GlobalState, LocalSelectors>;\n  for (const s in selectors) {\n    if (selectors.hasOwnProperty(s)) {\n      globalSelectors[s] = globalizeSelector(globalizer, selectors[s]);\n    }\n  }\n  return globalSelectors;\n};\n\n/**\n * Action Creators\n */\ninterface ActionCreators {\n  [key: string]: (arg: any) => any;\n}\n\ntype PlainActionCreator<WrappedActionCreator> = WrappedActionCreator extends () => infer R\n  ? () => R\n  : WrappedActionCreator extends (payload: infer A) => infer R\n  ? (payload: A) => R\n  : never;\n\nexport const bindPlainActionCreators = <WrappedActionCreators extends ActionCreators>(\n  actionCreators: WrappedActionCreators\n) => (dispatch: Dispatch) =>\n  bindActionCreators(actionCreators, dispatch) as {\n    [P in keyof WrappedActionCreators]: PlainActionCreator<WrappedActionCreators[P]>\n  };\n"]}]}