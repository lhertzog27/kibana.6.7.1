{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/reporting/public/share_context_menu/register_reporting.tsx","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/reporting/public/share_context_menu/register_reporting.tsx","mtime":1567631712281},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport * as tslib_1 from \"tslib\";\nimport moment from 'moment-timezone';\n// @ts-ignore: implicit any for JS file\nimport { XPackInfoProvider } from 'plugins/xpack_main/services/xpack_info';\nimport React from 'react';\nimport chrome from 'ui/chrome';\nimport { ShareContextMenuExtensionsRegistryProvider } from 'ui/share/share_action_registry';\nimport { unhashUrl } from 'ui/state_management/state_hashing';\nimport { ScreenCapturePanelContent } from '../components/screen_capture_panel_content';\nfunction reportingProvider(Private, dashboardConfig, i18n) {\n    var xpackInfo = Private(XPackInfoProvider);\n    var getShareActions = function (_a) {\n        var objectType = _a.objectType, objectId = _a.objectId, getUnhashableStates = _a.getUnhashableStates, sharingData = _a.sharingData, isDirty = _a.isDirty, onClose = _a.onClose;\n        var _b, _c;\n        if (!['dashboard', 'visualization'].includes(objectType)) {\n            return [];\n        }\n        // Dashboard only mode does not currently support reporting\n        // https://github.com/elastic/kibana/issues/18286\n        if (objectType === 'dashboard' && dashboardConfig.getHideWriteControls()) {\n            return [];\n        }\n        var getReportingJobParams = function () {\n            // Replace hashes with original RISON values.\n            var unhashedUrl = unhashUrl(window.location.href, getUnhashableStates());\n            var relativeUrl = unhashedUrl.replace(window.location.origin + chrome.getBasePath(), '');\n            var browserTimezone = chrome.getUiSettingsClient().get('dateFormat:tz') === 'Browser'\n                ? moment.tz.guess()\n                : chrome.getUiSettingsClient().get('dateFormat:tz');\n            return tslib_1.__assign({}, sharingData, { objectType: objectType,\n                browserTimezone: browserTimezone, relativeUrls: [relativeUrl] });\n        };\n        var getPngJobParams = function () {\n            // Replace hashes with original RISON values.\n            var unhashedUrl = unhashUrl(window.location.href, getUnhashableStates());\n            var relativeUrl = unhashedUrl.replace(window.location.origin + chrome.getBasePath(), '');\n            var browserTimezone = chrome.getUiSettingsClient().get('dateFormat:tz') === 'Browser'\n                ? moment.tz.guess()\n                : chrome.getUiSettingsClient().get('dateFormat:tz');\n            return tslib_1.__assign({}, sharingData, { objectType: objectType,\n                browserTimezone: browserTimezone,\n                relativeUrl: relativeUrl });\n        };\n        var shareActions = [];\n        if (xpackInfo.get('features.reporting.printablePdf.showLinks', false)) {\n            var panelTitle = i18n('xpack.reporting.shareContextMenu.pdfReportsButtonLabel', {\n                defaultMessage: 'PDF Reports',\n            });\n            shareActions.push({\n                shareMenuItem: (_b = {\n                        name: panelTitle,\n                        icon: 'document',\n                        toolTipContent: xpackInfo.get('features.reporting.printablePdf.message'),\n                        disabled: !xpackInfo.get('features.reporting.printablePdf.enableLinks', false)\n                            ? true\n                            : false\n                    },\n                    _b['data-test-subj'] = 'pdfReportMenuItem',\n                    _b.sortOrder = 10,\n                    _b),\n                panel: {\n                    title: panelTitle,\n                    content: (React.createElement(ScreenCapturePanelContent, { reportType: \"printablePdf\", objectType: objectType, objectId: objectId, getJobParams: getReportingJobParams, isDirty: isDirty, onClose: onClose })),\n                },\n            });\n        }\n        if (xpackInfo.get('features.reporting.png.showLinks', false)) {\n            var panelTitle = 'PNG Reports';\n            shareActions.push({\n                shareMenuItem: (_c = {\n                        name: panelTitle,\n                        icon: 'document',\n                        toolTipContent: xpackInfo.get('features.reporting.png.message'),\n                        disabled: !xpackInfo.get('features.reporting.png.enableLinks', false) ? true : false\n                    },\n                    _c['data-test-subj'] = 'pngReportMenuItem',\n                    _c.sortOrder = 10,\n                    _c),\n                panel: {\n                    title: panelTitle,\n                    content: (React.createElement(ScreenCapturePanelContent, { reportType: \"png\", objectType: objectType, objectId: objectId, getJobParams: getPngJobParams, isDirty: isDirty, onClose: onClose })),\n                },\n            });\n        }\n        return shareActions;\n    };\n    return {\n        id: 'screenCaptureReports',\n        getShareActions: getShareActions,\n    };\n}\nShareContextMenuExtensionsRegistryProvider.register(reportingProvider);\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/reporting/public/share_context_menu/register_reporting.tsx","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/reporting/public/share_context_menu/register_reporting.tsx"],"names":[],"mappings":"AAAA;;;;GAIG;;AAGH,OAAO,MAAM,MAAM,iBAAiB,CAAC;AACrC,uCAAuC;AACvC,OAAO,EAAE,iBAAiB,EAAE,MAAM,wCAAwC,CAAC;AAC3E,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,MAAM,MAAM,WAAW,CAAC;AAE/B,OAAO,EAAE,0CAA0C,EAAE,MAAM,gCAAgC,CAAC;AAC5F,OAAO,EAAE,SAAS,EAAE,MAAM,mCAAmC,CAAC;AAC9D,OAAO,EAAE,yBAAyB,EAAE,MAAM,4CAA4C,CAAC;AAEvF,SAAS,iBAAiB,CAAC,OAAY,EAAE,eAAoB,EAAE,IAAqB;IAClF,IAAM,SAAS,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAC;IAC7C,IAAM,eAAe,GAAG,UAAC,EAON;YANjB,0BAAU,EACV,sBAAQ,EACR,4CAAmB,EACnB,4BAAW,EACX,oBAAO,EACP,oBAAO;;QAEP,IAAI,CAAC,CAAC,WAAW,EAAE,eAAe,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE;YACxD,OAAO,EAAE,CAAC;SACX;QACD,2DAA2D;QAC3D,iDAAiD;QACjD,IAAI,UAAU,KAAK,WAAW,IAAI,eAAe,CAAC,oBAAoB,EAAE,EAAE;YACxE,OAAO,EAAE,CAAC;SACX;QAED,IAAM,qBAAqB,GAAG;YAC5B,6CAA6C;YAC7C,IAAM,WAAW,GAAG,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,mBAAmB,EAAE,CAAC,CAAC;YAC3E,IAAM,WAAW,GAAG,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,GAAG,MAAM,CAAC,WAAW,EAAE,EAAE,EAAE,CAAC,CAAC;YAE3F,IAAM,eAAe,GACnB,MAAM,CAAC,mBAAmB,EAAE,CAAC,GAAG,CAAC,eAAe,CAAC,KAAK,SAAS;gBAC7D,CAAC,CAAC,MAAM,CAAC,EAAE,CAAC,KAAK,EAAE;gBACnB,CAAC,CAAC,MAAM,CAAC,mBAAmB,EAAE,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;YAExD,4BACK,WAAW,IACd,UAAU,YAAA;gBACV,eAAe,iBAAA,EACf,YAAY,EAAE,CAAC,WAAW,CAAC,IAC3B;QACJ,CAAC,CAAC;QAEF,IAAM,eAAe,GAAG;YACtB,6CAA6C;YAC7C,IAAM,WAAW,GAAG,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,mBAAmB,EAAE,CAAC,CAAC;YAC3E,IAAM,WAAW,GAAG,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,GAAG,MAAM,CAAC,WAAW,EAAE,EAAE,EAAE,CAAC,CAAC;YAE3F,IAAM,eAAe,GACnB,MAAM,CAAC,mBAAmB,EAAE,CAAC,GAAG,CAAC,eAAe,CAAC,KAAK,SAAS;gBAC7D,CAAC,CAAC,MAAM,CAAC,EAAE,CAAC,KAAK,EAAE;gBACnB,CAAC,CAAC,MAAM,CAAC,mBAAmB,EAAE,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;YAExD,4BACK,WAAW,IACd,UAAU,YAAA;gBACV,eAAe,iBAAA;gBACf,WAAW,aAAA,IACX;QACJ,CAAC,CAAC;QAEF,IAAM,YAAY,GAAG,EAAE,CAAC;QACxB,IAAI,SAAS,CAAC,GAAG,CAAC,2CAA2C,EAAE,KAAK,CAAC,EAAE;YACrE,IAAM,UAAU,GAAG,IAAI,CAAC,wDAAwD,EAAE;gBAChF,cAAc,EAAE,aAAa;aAC9B,CAAC,CAAC;YAEH,YAAY,CAAC,IAAI,CAAC;gBAChB,aAAa;wBACX,IAAI,EAAE,UAAU;wBAChB,IAAI,EAAE,UAAU;wBAChB,cAAc,EAAE,SAAS,CAAC,GAAG,CAAC,yCAAyC,CAAC;wBACxE,QAAQ,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,6CAA6C,EAAE,KAAK,CAAC;4BAC5E,CAAC,CAAC,IAAI;4BACN,CAAC,CAAC,KAAK;;oBACT,GAAC,gBAAgB,IAAG,mBAAmB;oBACvC,YAAS,GAAE,EAAE;uBACd;gBACD,KAAK,EAAE;oBACL,KAAK,EAAE,UAAU;oBACjB,OAAO,EAAE,CACP,oBAAC,yBAAyB,IACxB,UAAU,EAAC,cAAc,EACzB,UAAU,EAAE,UAAU,EACtB,QAAQ,EAAE,QAAQ,EAClB,YAAY,EAAE,qBAAqB,EACnC,OAAO,EAAE,OAAO,EAChB,OAAO,EAAE,OAAO,GAChB,CACH;iBACF;aACF,CAAC,CAAC;SACJ;QAED,IAAI,SAAS,CAAC,GAAG,CAAC,kCAAkC,EAAE,KAAK,CAAC,EAAE;YAC5D,IAAM,UAAU,GAAG,aAAa,CAAC;YAEjC,YAAY,CAAC,IAAI,CAAC;gBAChB,aAAa;wBACX,IAAI,EAAE,UAAU;wBAChB,IAAI,EAAE,UAAU;wBAChB,cAAc,EAAE,SAAS,CAAC,GAAG,CAAC,gCAAgC,CAAC;wBAC/D,QAAQ,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,oCAAoC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK;;oBACpF,GAAC,gBAAgB,IAAG,mBAAmB;oBACvC,YAAS,GAAE,EAAE;uBACd;gBACD,KAAK,EAAE;oBACL,KAAK,EAAE,UAAU;oBACjB,OAAO,EAAE,CACP,oBAAC,yBAAyB,IACxB,UAAU,EAAC,KAAK,EAChB,UAAU,EAAE,UAAU,EACtB,QAAQ,EAAE,QAAQ,EAClB,YAAY,EAAE,eAAe,EAC7B,OAAO,EAAE,OAAO,EAChB,OAAO,EAAE,OAAO,GAChB,CACH;iBACF;aACF,CAAC,CAAC;SACJ;QAED,OAAO,YAAY,CAAC;IACtB,CAAC,CAAC;IAEF,OAAO;QACL,EAAE,EAAE,sBAAsB;QAC1B,eAAe,iBAAA;KAChB,CAAC;AACJ,CAAC;AAED,0CAA0C,CAAC,QAAQ,CAAC,iBAAiB,CAAC,CAAC","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport { I18nServiceType } from '@kbn/i18n/angular';\nimport moment from 'moment-timezone';\n// @ts-ignore: implicit any for JS file\nimport { XPackInfoProvider } from 'plugins/xpack_main/services/xpack_info';\nimport React from 'react';\nimport chrome from 'ui/chrome';\nimport { ShareActionProps } from 'ui/share/share_action';\nimport { ShareContextMenuExtensionsRegistryProvider } from 'ui/share/share_action_registry';\nimport { unhashUrl } from 'ui/state_management/state_hashing';\nimport { ScreenCapturePanelContent } from '../components/screen_capture_panel_content';\n\nfunction reportingProvider(Private: any, dashboardConfig: any, i18n: I18nServiceType) {\n  const xpackInfo = Private(XPackInfoProvider);\n  const getShareActions = ({\n    objectType,\n    objectId,\n    getUnhashableStates,\n    sharingData,\n    isDirty,\n    onClose,\n  }: ShareActionProps) => {\n    if (!['dashboard', 'visualization'].includes(objectType)) {\n      return [];\n    }\n    // Dashboard only mode does not currently support reporting\n    // https://github.com/elastic/kibana/issues/18286\n    if (objectType === 'dashboard' && dashboardConfig.getHideWriteControls()) {\n      return [];\n    }\n\n    const getReportingJobParams = () => {\n      // Replace hashes with original RISON values.\n      const unhashedUrl = unhashUrl(window.location.href, getUnhashableStates());\n      const relativeUrl = unhashedUrl.replace(window.location.origin + chrome.getBasePath(), '');\n\n      const browserTimezone =\n        chrome.getUiSettingsClient().get('dateFormat:tz') === 'Browser'\n          ? moment.tz.guess()\n          : chrome.getUiSettingsClient().get('dateFormat:tz');\n\n      return {\n        ...sharingData,\n        objectType,\n        browserTimezone,\n        relativeUrls: [relativeUrl],\n      };\n    };\n\n    const getPngJobParams = () => {\n      // Replace hashes with original RISON values.\n      const unhashedUrl = unhashUrl(window.location.href, getUnhashableStates());\n      const relativeUrl = unhashedUrl.replace(window.location.origin + chrome.getBasePath(), '');\n\n      const browserTimezone =\n        chrome.getUiSettingsClient().get('dateFormat:tz') === 'Browser'\n          ? moment.tz.guess()\n          : chrome.getUiSettingsClient().get('dateFormat:tz');\n\n      return {\n        ...sharingData,\n        objectType,\n        browserTimezone,\n        relativeUrl,\n      };\n    };\n\n    const shareActions = [];\n    if (xpackInfo.get('features.reporting.printablePdf.showLinks', false)) {\n      const panelTitle = i18n('xpack.reporting.shareContextMenu.pdfReportsButtonLabel', {\n        defaultMessage: 'PDF Reports',\n      });\n\n      shareActions.push({\n        shareMenuItem: {\n          name: panelTitle,\n          icon: 'document',\n          toolTipContent: xpackInfo.get('features.reporting.printablePdf.message'),\n          disabled: !xpackInfo.get('features.reporting.printablePdf.enableLinks', false)\n            ? true\n            : false,\n          ['data-test-subj']: 'pdfReportMenuItem',\n          sortOrder: 10,\n        },\n        panel: {\n          title: panelTitle,\n          content: (\n            <ScreenCapturePanelContent\n              reportType=\"printablePdf\"\n              objectType={objectType}\n              objectId={objectId}\n              getJobParams={getReportingJobParams}\n              isDirty={isDirty}\n              onClose={onClose}\n            />\n          ),\n        },\n      });\n    }\n\n    if (xpackInfo.get('features.reporting.png.showLinks', false)) {\n      const panelTitle = 'PNG Reports';\n\n      shareActions.push({\n        shareMenuItem: {\n          name: panelTitle,\n          icon: 'document',\n          toolTipContent: xpackInfo.get('features.reporting.png.message'),\n          disabled: !xpackInfo.get('features.reporting.png.enableLinks', false) ? true : false,\n          ['data-test-subj']: 'pngReportMenuItem',\n          sortOrder: 10,\n        },\n        panel: {\n          title: panelTitle,\n          content: (\n            <ScreenCapturePanelContent\n              reportType=\"png\"\n              objectType={objectType}\n              objectId={objectId}\n              getJobParams={getPngJobParams}\n              isDirty={isDirty}\n              onClose={onClose}\n            />\n          ),\n        },\n      });\n    }\n\n    return shareActions;\n  };\n\n  return {\n    id: 'screenCaptureReports',\n    getShareActions,\n  };\n}\n\nShareContextMenuExtensionsRegistryProvider.register(reportingProvider);\n"]}]}