{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/containers/with_source/with_source.tsx","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/containers/with_source/with_source.tsx","mtime":1567631711984},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport * as tslib_1 from \"tslib\";\nimport { Container as ConstateContainer } from 'constate';\nimport React from 'react';\nimport { ApolloConsumer } from 'react-apollo';\nimport { createSelector } from 'reselect';\nimport { memoizeLast } from 'ui/utils/memoize';\nimport { createStatusActions, createStatusSelectors, } from '../../utils/operation_status';\nimport { inferActionMap, inferEffectMap, inferSelectorMap } from '../../utils/typed_constate';\nimport { createSourceMutation } from './create_source.gql_query';\nimport { sourceQuery } from './query_source.gql_query';\nimport { updateSourceMutation } from './update_source.gql_query';\nvar createContainerProps = memoizeLast(function (sourceId, apolloClient) {\n    var initialState = {\n        operationStatusHistory: [],\n        source: undefined,\n    };\n    var actions = inferActionMap()(tslib_1.__assign({}, createStatusActions(function (updater) { return function (state) { return (tslib_1.__assign({}, state, { operationStatusHistory: updater(state.operationStatusHistory) })); }; })));\n    var getDerivedIndexPattern = createSelector(function (state) {\n        return (state && state.source && state.source.status && state.source.status.indexFields) || [];\n    }, function (state) {\n        return (state &&\n            state.source &&\n            state.source.configuration &&\n            state.source.configuration.logAlias) ||\n            undefined;\n    }, function (state) {\n        return (state &&\n            state.source &&\n            state.source.configuration &&\n            state.source.configuration.metricAlias) ||\n            undefined;\n    }, function (indexFields, logAlias, metricAlias) { return ({\n        fields: indexFields,\n        title: logAlias + \",\" + metricAlias,\n    }); });\n    var selectors = inferSelectorMap()(tslib_1.__assign({}, createStatusSelectors(function (_a) {\n        var operationStatusHistory = _a.operationStatusHistory;\n        return operationStatusHistory;\n    }), { getConfiguration: function () { return function (state) {\n            return (state && state.source && state.source.configuration) || undefined;\n        }; }, getSourceId: function () { return function () { return sourceId; }; }, getLogIndicesExist: function () { return function (state) {\n            return (state && state.source && state.source.status && state.source.status.logIndicesExist) ||\n                undefined;\n        }; }, getMetricIndicesExist: function () { return function (state) {\n            return (state && state.source && state.source.status && state.source.status.metricIndicesExist) ||\n                undefined;\n        }; }, getDerivedIndexPattern: function () { return getDerivedIndexPattern; }, getVersion: function () { return function (state) { return (state && state.source && state.source.version) || undefined; }; }, getExists: function () { return function (state) { return (state && state.source && !!state.source.version) || false; }; } }));\n    var effects = inferEffectMap()({\n        create: function (sourceConfiguration) { return function (_a) {\n            var setState = _a.setState;\n            var variables = {\n                sourceId: sourceId,\n                sourceConfiguration: {\n                    name: sourceConfiguration.name,\n                    description: sourceConfiguration.description,\n                    metricAlias: sourceConfiguration.metricAlias,\n                    logAlias: sourceConfiguration.logAlias,\n                    fields: sourceConfiguration.fields\n                        ? {\n                            container: sourceConfiguration.fields.container,\n                            host: sourceConfiguration.fields.host,\n                            pod: sourceConfiguration.fields.pod,\n                            tiebreaker: sourceConfiguration.fields.tiebreaker,\n                            timestamp: sourceConfiguration.fields.timestamp,\n                        }\n                        : undefined,\n                },\n            };\n            setState(actions.startOperation({ name: 'create', parameters: variables }));\n            return apolloClient\n                .mutate({\n                mutation: createSourceMutation,\n                fetchPolicy: 'no-cache',\n                variables: variables,\n            })\n                .then(function (result) {\n                setState(function (state) { return (tslib_1.__assign({}, actions.finishOperation({ name: 'create', parameters: variables })(state), { source: result.data ? result.data.createSource.source : state.source })); });\n                return result;\n            }, function (error) {\n                setState(function (state) { return (tslib_1.__assign({}, actions.failOperation({ name: 'create', parameters: variables }, \"\" + error)(state))); });\n                throw error;\n            });\n        }; },\n        load: function () { return function (_a) {\n            var setState = _a.setState;\n            var variables = {\n                sourceId: sourceId,\n            };\n            setState(actions.startOperation({ name: 'load', parameters: variables }));\n            return apolloClient\n                .query({\n                query: sourceQuery,\n                fetchPolicy: 'no-cache',\n                variables: variables,\n            })\n                .then(function (result) {\n                setState(function (state) { return (tslib_1.__assign({}, actions.finishOperation({ name: 'load', parameters: variables })(state), { source: result.data.source })); });\n                return result;\n            }, function (error) {\n                setState(function (state) { return (tslib_1.__assign({}, actions.failOperation({ name: 'load', parameters: variables }, \"\" + error)(state))); });\n                throw error;\n            });\n        }; },\n        update: function (changes) { return function (_a) {\n            var setState = _a.setState;\n            var variables = {\n                sourceId: sourceId,\n                changes: changes,\n            };\n            setState(actions.startOperation({ name: 'update', parameters: variables }));\n            return apolloClient\n                .mutate({\n                mutation: updateSourceMutation,\n                fetchPolicy: 'no-cache',\n                variables: variables,\n            })\n                .then(function (result) {\n                setState(function (state) { return (tslib_1.__assign({}, actions.finishOperation({ name: 'update', parameters: variables })(state), { source: result.data ? result.data.updateSource.source : state.source })); });\n                return result;\n            }, function (error) {\n                setState(function (state) { return (tslib_1.__assign({}, actions.failOperation({ name: 'update', parameters: variables }, \"\" + error)(state))); });\n                throw error;\n            });\n        }; },\n    });\n    var onMount = function (props) {\n        effects.load()(props);\n    };\n    return {\n        actions: actions,\n        context: \"source-\" + sourceId,\n        effects: effects,\n        initialState: initialState,\n        key: \"source-\" + sourceId,\n        onMount: onMount,\n        selectors: selectors,\n    };\n});\nexport var WithSource = function (_a) {\n    var children = _a.children;\n    return (React.createElement(ApolloConsumer, null, function (client) { return (React.createElement(ConstateContainer, tslib_1.__assign({}, createContainerProps('default', client)), function (_a) {\n        var create = _a.create, getConfiguration = _a.getConfiguration, getDerivedIndexPattern = _a.getDerivedIndexPattern, getExists = _a.getExists, getHasFailed = _a.getHasFailed, getIsInProgress = _a.getIsInProgress, getLastFailureMessage = _a.getLastFailureMessage, getLogIndicesExist = _a.getLogIndicesExist, getMetricIndicesExist = _a.getMetricIndicesExist, getSourceId = _a.getSourceId, getVersion = _a.getVersion, load = _a.load, update = _a.update;\n        return children({\n            create: create,\n            configuration: getConfiguration(),\n            derivedIndexPattern: getDerivedIndexPattern(),\n            exists: getExists(),\n            hasFailed: getHasFailed(),\n            isLoading: getIsInProgress(),\n            lastFailureMessage: getLastFailureMessage(),\n            load: load,\n            logIndicesExist: getLogIndicesExist(),\n            metricIndicesExist: getMetricIndicesExist(),\n            sourceId: getSourceId(),\n            update: update,\n            version: getVersion(),\n        });\n    })); }));\n};\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/containers/with_source/with_source.tsx","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/containers/with_source/with_source.tsx"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport { ApolloClient } from 'apollo-client';\nimport { Container as ConstateContainer, OnMount } from 'constate';\nimport React from 'react';\nimport { ApolloConsumer } from 'react-apollo';\nimport { createSelector } from 'reselect';\n\nimport { StaticIndexPattern } from 'ui/index_patterns';\nimport { memoizeLast } from 'ui/utils/memoize';\nimport {\n  CreateSourceInput,\n  CreateSourceMutation,\n  SourceQuery,\n  UpdateSourceInput,\n  UpdateSourceMutation,\n} from '../../graphql/types';\nimport {\n  createStatusActions,\n  createStatusSelectors,\n  Operation,\n  OperationStatus,\n  StatusHistoryUpdater,\n} from '../../utils/operation_status';\nimport { inferActionMap, inferEffectMap, inferSelectorMap } from '../../utils/typed_constate';\nimport { RendererFunction } from '../../utils/typed_react';\nimport { createSourceMutation } from './create_source.gql_query';\nimport { sourceQuery } from './query_source.gql_query';\nimport { updateSourceMutation } from './update_source.gql_query';\n\ntype Operations =\n  | Operation<'create', CreateSourceMutation.Variables>\n  | Operation<'load', SourceQuery.Variables>\n  | Operation<'update', UpdateSourceMutation.Variables>;\n\ninterface State {\n  operationStatusHistory: Array<OperationStatus<Operations>>;\n  source: SourceQuery.Query['source'] | undefined;\n}\n\nconst createContainerProps = memoizeLast((sourceId: string, apolloClient: ApolloClient<any>) => {\n  const initialState: State = {\n    operationStatusHistory: [],\n    source: undefined,\n  };\n\n  const actions = inferActionMap<State>()({\n    ...createStatusActions((updater: StatusHistoryUpdater<Operations>) => (state: State) => ({\n      ...state,\n      operationStatusHistory: updater(state.operationStatusHistory),\n    })),\n  });\n\n  const getDerivedIndexPattern = createSelector(\n    (state: State) =>\n      (state && state.source && state.source.status && state.source.status.indexFields) || [],\n    (state: State) =>\n      (state &&\n        state.source &&\n        state.source.configuration &&\n        state.source.configuration.logAlias) ||\n      undefined,\n    (state: State) =>\n      (state &&\n        state.source &&\n        state.source.configuration &&\n        state.source.configuration.metricAlias) ||\n      undefined,\n    (indexFields, logAlias, metricAlias) => ({\n      fields: indexFields,\n      title: `${logAlias},${metricAlias}`,\n    })\n  );\n\n  const selectors = inferSelectorMap<State>()({\n    ...createStatusSelectors(({ operationStatusHistory }: State) => operationStatusHistory),\n    getConfiguration: () => state =>\n      (state && state.source && state.source.configuration) || undefined,\n    getSourceId: () => () => sourceId,\n    getLogIndicesExist: () => state =>\n      (state && state.source && state.source.status && state.source.status.logIndicesExist) ||\n      undefined,\n    getMetricIndicesExist: () => state =>\n      (state && state.source && state.source.status && state.source.status.metricIndicesExist) ||\n      undefined,\n    getDerivedIndexPattern: () => getDerivedIndexPattern,\n    getVersion: () => state => (state && state.source && state.source.version) || undefined,\n    getExists: () => state => (state && state.source && !!state.source.version) || false,\n  });\n\n  const effects = inferEffectMap<State>()({\n    create: (sourceConfiguration: CreateSourceInput) => ({ setState }) => {\n      const variables = {\n        sourceId,\n        sourceConfiguration: {\n          name: sourceConfiguration.name,\n          description: sourceConfiguration.description,\n          metricAlias: sourceConfiguration.metricAlias,\n          logAlias: sourceConfiguration.logAlias,\n          fields: sourceConfiguration.fields\n            ? {\n                container: sourceConfiguration.fields.container,\n                host: sourceConfiguration.fields.host,\n                pod: sourceConfiguration.fields.pod,\n                tiebreaker: sourceConfiguration.fields.tiebreaker,\n                timestamp: sourceConfiguration.fields.timestamp,\n              }\n            : undefined,\n        },\n      };\n\n      setState(actions.startOperation({ name: 'create', parameters: variables }));\n\n      return apolloClient\n        .mutate<CreateSourceMutation.Mutation, CreateSourceMutation.Variables>({\n          mutation: createSourceMutation,\n          fetchPolicy: 'no-cache',\n          variables,\n        })\n        .then(\n          result => {\n            setState(state => ({\n              ...actions.finishOperation({ name: 'create', parameters: variables })(state),\n              source: result.data ? result.data.createSource.source : state.source,\n            }));\n            return result;\n          },\n          error => {\n            setState(state => ({\n              ...actions.failOperation({ name: 'create', parameters: variables }, `${error}`)(\n                state\n              ),\n            }));\n            throw error;\n          }\n        );\n    },\n    load: () => ({ setState }) => {\n      const variables = {\n        sourceId,\n      };\n\n      setState(actions.startOperation({ name: 'load', parameters: variables }));\n\n      return apolloClient\n        .query<SourceQuery.Query, SourceQuery.Variables>({\n          query: sourceQuery,\n          fetchPolicy: 'no-cache',\n          variables,\n        })\n        .then(\n          result => {\n            setState(state => ({\n              ...actions.finishOperation({ name: 'load', parameters: variables })(state),\n              source: result.data.source,\n            }));\n            return result;\n          },\n          error => {\n            setState(state => ({\n              ...actions.failOperation({ name: 'load', parameters: variables }, `${error}`)(state),\n            }));\n            throw error;\n          }\n        );\n    },\n    update: (changes: UpdateSourceInput[]) => ({ setState }) => {\n      const variables = {\n        sourceId,\n        changes,\n      };\n\n      setState(actions.startOperation({ name: 'update', parameters: variables }));\n\n      return apolloClient\n        .mutate<UpdateSourceMutation.Mutation, UpdateSourceMutation.Variables>({\n          mutation: updateSourceMutation,\n          fetchPolicy: 'no-cache',\n          variables,\n        })\n        .then(\n          result => {\n            setState(state => ({\n              ...actions.finishOperation({ name: 'update', parameters: variables })(state),\n              source: result.data ? result.data.updateSource.source : state.source,\n            }));\n            return result;\n          },\n          error => {\n            setState(state => ({\n              ...actions.failOperation({ name: 'update', parameters: variables }, `${error}`)(\n                state\n              ),\n            }));\n            throw error;\n          }\n        );\n    },\n  });\n\n  const onMount: OnMount<State> = props => {\n    effects.load()(props);\n  };\n\n  return {\n    actions,\n    context: `source-${sourceId}`,\n    effects,\n    initialState,\n    key: `source-${sourceId}`,\n    onMount,\n    selectors,\n  };\n});\n\ninterface WithSourceProps {\n  children: RendererFunction<{\n    configuration?: SourceQuery.Query['source']['configuration'];\n    create: (sourceConfiguration: CreateSourceInput) => Promise<any>;\n    derivedIndexPattern: StaticIndexPattern;\n    exists: boolean;\n    hasFailed: boolean;\n    isLoading: boolean;\n    lastFailureMessage?: string;\n    load: () => Promise<any>;\n    logIndicesExist?: boolean;\n    metricAlias?: string;\n    metricIndicesExist?: boolean;\n    sourceId: string;\n    update: (changes: UpdateSourceInput[]) => Promise<any>;\n    version?: string;\n  }>;\n}\n\nexport const WithSource: React.SFC<WithSourceProps> = ({ children }) => (\n  <ApolloConsumer>\n    {client => (\n      <ConstateContainer {...createContainerProps('default', client)}>\n        {({\n          create,\n          getConfiguration,\n          getDerivedIndexPattern,\n          getExists,\n          getHasFailed,\n          getIsInProgress,\n          getLastFailureMessage,\n          getLogIndicesExist,\n          getMetricIndicesExist,\n          getSourceId,\n          getVersion,\n          load,\n          update,\n        }) =>\n          children({\n            create,\n            configuration: getConfiguration(),\n            derivedIndexPattern: getDerivedIndexPattern(),\n            exists: getExists(),\n            hasFailed: getHasFailed(),\n            isLoading: getIsInProgress(),\n            lastFailureMessage: getLastFailureMessage(),\n            load,\n            logIndicesExist: getLogIndicesExist(),\n            metricIndicesExist: getMetricIndicesExist(),\n            sourceId: getSourceId(),\n            update,\n            version: getVersion(),\n          })\n        }\n      </ConstateContainer>\n    )}\n  </ApolloConsumer>\n);\n"]}]}