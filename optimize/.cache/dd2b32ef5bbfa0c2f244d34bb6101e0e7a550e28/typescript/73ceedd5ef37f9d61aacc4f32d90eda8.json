{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/uptime/public/components/queries/ping_list/ping_list_query.tsx","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/uptime/public/components/queries/ping_list/ping_list_query.tsx","mtime":1567631712330},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport * as tslib_1 from \"tslib\";\nimport { i18n } from '@kbn/i18n';\nimport React from 'react';\nimport { Query } from 'react-apollo';\nimport { PingList } from '../../functional';\nimport { getPingsQuery } from './get_pings';\nvar DEFAULT_MAX_SEARCH_SIZE = 100;\nvar PingListQuery = /** @class */ (function (_super) {\n    tslib_1.__extends(PingListQuery, _super);\n    function PingListQuery(props) {\n        var _this = _super.call(this, props) || this;\n        _this.onSearchSizeBlur = function (e) {\n            var sanitizedValue = parseInt(e.target.value, 10);\n            if (!isNaN(sanitizedValue)) {\n                _this.setState({\n                    maxSearchSize: sanitizedValue >= 10000 ? 10000 : sanitizedValue,\n                });\n            }\n        };\n        _this.onSelectedOptionChange = function (selectedOptions) {\n            if (selectedOptions[0]) {\n                _this.setState({ selectedOption: selectedOptions[0] });\n            }\n        };\n        var statusOptions = [\n            {\n                label: i18n.translate('xpack.uptime.pingList.statusOptions.allStatusOptionLabel', {\n                    defaultMessage: 'All',\n                }),\n                value: '',\n            },\n            {\n                label: i18n.translate('xpack.uptime.pingList.statusOptions.upStatusOptionLabel', {\n                    defaultMessage: 'Up',\n                }),\n                value: 'up',\n            },\n            {\n                label: i18n.translate('xpack.uptime.pingList.statusOptions.downStatusOptionLabel', {\n                    defaultMessage: 'Down',\n                }),\n                value: 'down',\n            },\n        ];\n        _this.state = {\n            statusOptions: statusOptions,\n            selectedOption: statusOptions[2],\n            maxSearchSize: DEFAULT_MAX_SEARCH_SIZE,\n        };\n        return _this;\n    }\n    PingListQuery.prototype.render = function () {\n        var _this = this;\n        var _a = this.props, monitorId = _a.monitorId, dateRangeStart = _a.dateRangeStart, dateRangeEnd = _a.dateRangeEnd, autorefreshIsPaused = _a.autorefreshIsPaused, autorefreshInterval = _a.autorefreshInterval, sort = _a.sort, size = _a.size;\n        var selectedOption = this.state.selectedOption;\n        return (React.createElement(Query, { pollInterval: autorefreshIsPaused ? undefined : autorefreshInterval, variables: {\n                monitorId: monitorId,\n                dateRangeStart: dateRangeStart,\n                dateRangeEnd: dateRangeEnd,\n                status: selectedOption.value === 'up' || selectedOption.value === 'down'\n                    ? selectedOption.value\n                    : '',\n                // TODO: get rid of the magic number\n                size: this.state.maxSearchSize || size || DEFAULT_MAX_SEARCH_SIZE,\n                sort: sort || 'desc',\n            }, query: getPingsQuery }, function (_a) {\n            var loading = _a.loading, error = _a.error, data = _a.data;\n            if (error) {\n                return i18n.translate('xpack.uptime.pingList.errorMessage', {\n                    values: { message: error.message },\n                    defaultMessage: 'Error {message}',\n                });\n            }\n            var allPings = data.allPings;\n            var maxSearchSize = _this.state.maxSearchSize;\n            return (React.createElement(PingList, { loading: loading, maxSearchSize: maxSearchSize, pingResults: allPings, searchSizeOnBlur: _this.onSearchSizeBlur, selectedOption: _this.state.selectedOption, selectedOptionChanged: _this.onSelectedOptionChange, statusOptions: _this.state.statusOptions }));\n        }));\n    };\n    return PingListQuery;\n}(React.Component));\nexport { PingListQuery };\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/uptime/public/components/queries/ping_list/ping_list_query.tsx","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/uptime/public/components/queries/ping_list/ping_list_query.tsx"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport { EuiComboBoxOptionProps } from '@elastic/eui';\nimport { i18n } from '@kbn/i18n';\nimport React from 'react';\nimport { Query } from 'react-apollo';\nimport { UMPingSortDirectionArg } from '../../../../common/domain_types';\nimport { UptimeCommonProps } from '../../../uptime_app';\nimport { PingList } from '../../functional';\nimport { getPingsQuery } from './get_pings';\n\nconst DEFAULT_MAX_SEARCH_SIZE = 100;\n\ninterface PingListProps {\n  monitorId?: string;\n  sort?: UMPingSortDirectionArg;\n  size?: number;\n}\n\ntype Props = PingListProps & UptimeCommonProps;\n\ninterface PingListState {\n  statusOptions: EuiComboBoxOptionProps[];\n  selectedOption: EuiComboBoxOptionProps;\n  maxSearchSize: number;\n}\n\nexport class PingListQuery extends React.Component<Props, PingListState> {\n  constructor(props: Props) {\n    super(props);\n\n    const statusOptions = [\n      {\n        label: i18n.translate('xpack.uptime.pingList.statusOptions.allStatusOptionLabel', {\n          defaultMessage: 'All',\n        }),\n        value: '',\n      },\n      {\n        label: i18n.translate('xpack.uptime.pingList.statusOptions.upStatusOptionLabel', {\n          defaultMessage: 'Up',\n        }),\n        value: 'up',\n      },\n      {\n        label: i18n.translate('xpack.uptime.pingList.statusOptions.downStatusOptionLabel', {\n          defaultMessage: 'Down',\n        }),\n        value: 'down',\n      },\n    ];\n    this.state = {\n      statusOptions,\n      selectedOption: statusOptions[2],\n      maxSearchSize: DEFAULT_MAX_SEARCH_SIZE,\n    };\n  }\n  public render() {\n    const {\n      monitorId,\n      dateRangeStart,\n      dateRangeEnd,\n      autorefreshIsPaused,\n      autorefreshInterval,\n      sort,\n      size,\n    } = this.props;\n    const { selectedOption } = this.state;\n    return (\n      <Query\n        pollInterval={autorefreshIsPaused ? undefined : autorefreshInterval}\n        variables={{\n          monitorId,\n          dateRangeStart,\n          dateRangeEnd,\n          status:\n            selectedOption.value === 'up' || selectedOption.value === 'down'\n              ? selectedOption.value\n              : '',\n          // TODO: get rid of the magic number\n          size: this.state.maxSearchSize || size || DEFAULT_MAX_SEARCH_SIZE,\n          sort: sort || 'desc',\n        }}\n        query={getPingsQuery}\n      >\n        {({ loading, error, data }) => {\n          if (error) {\n            return i18n.translate('xpack.uptime.pingList.errorMessage', {\n              values: { message: error.message },\n              defaultMessage: 'Error {message}',\n            });\n          }\n          const { allPings } = data;\n          const { maxSearchSize } = this.state;\n          return (\n            <PingList\n              loading={loading}\n              maxSearchSize={maxSearchSize}\n              pingResults={allPings}\n              searchSizeOnBlur={this.onSearchSizeBlur}\n              selectedOption={this.state.selectedOption}\n              selectedOptionChanged={this.onSelectedOptionChange}\n              statusOptions={this.state.statusOptions}\n            />\n          );\n        }}\n      </Query>\n    );\n  }\n\n  private onSearchSizeBlur = (e: React.FocusEvent<HTMLInputElement>) => {\n    const sanitizedValue = parseInt(e.target.value, 10);\n    if (!isNaN(sanitizedValue)) {\n      this.setState({\n        maxSearchSize: sanitizedValue >= 10000 ? 10000 : sanitizedValue,\n      });\n    }\n  };\n\n  private onSelectedOptionChange = (selectedOptions: EuiComboBoxOptionProps[]) => {\n    if (selectedOptions[0]) {\n      this.setState({ selectedOption: selectedOptions[0] });\n    }\n  };\n}\n"]}]}