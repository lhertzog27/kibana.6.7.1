{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/components/logging/log_minimap/density_chart.tsx","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/components/logging/log_minimap/density_chart.tsx","mtime":1567631711979},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport * as tslib_1 from \"tslib\";\nimport { scaleLinear, scaleTime } from 'd3-scale';\nimport { area, curveMonotoneY } from 'd3-shape';\nimport max from 'lodash/fp/max';\nimport * as React from 'react';\nimport styled from 'styled-components';\nexport var DensityChart = function (_a) {\n    var buckets = _a.buckets, start = _a.start, end = _a.end, width = _a.width, height = _a.height;\n    if (start >= end || height <= 0 || width <= 0 || buckets.length <= 0) {\n        return null;\n    }\n    var yScale = scaleTime()\n        .domain([start, end])\n        .range([0, height]);\n    var xMax = max(buckets.map(function (bucket) { return bucket.entriesCount; })) || 0;\n    var xScale = scaleLinear()\n        .domain([0, xMax])\n        .range([0, width / 2]);\n    var path = area()\n        .x0(xScale(0))\n        .x1(function (bucket) { return xScale(bucket.entriesCount); })\n        .y(function (bucket) { return yScale((bucket.start + bucket.end) / 2); })\n        .curve(curveMonotoneY);\n    var pathData = path(buckets);\n    return (React.createElement(\"g\", { transform: \"translate(\" + width / 2 + \", 0)\" },\n        React.createElement(PositiveAreaPath, { d: pathData || '' }),\n        React.createElement(NegativeAreaPath, { transform: \"scale(-1, 1)\", d: pathData || '' })));\n};\nvar PositiveAreaPath = styled.path(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([\"\\n  fill: \", \";\\n\"], [\"\\n  fill: \",\n    \";\\n\"])), function (props) {\n    return props.theme.darkMode\n        ? props.theme.eui.euiColorMediumShade\n        : props.theme.eui.euiColorLightShade;\n});\nvar NegativeAreaPath = styled.path(templateObject_2 || (templateObject_2 = tslib_1.__makeTemplateObject([\"\\n  fill: \", \";\\n\"], [\"\\n  fill: \",\n    \";\\n\"])), function (props) {\n    return props.theme.darkMode\n        ? props.theme.eui.euiColorLightShade\n        : props.theme.eui.euiColorLightestShade;\n});\nvar templateObject_1, templateObject_2;\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/components/logging/log_minimap/density_chart.tsx","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/components/logging/log_minimap/density_chart.tsx"],"names":[],"mappings":"AAAA;;;;GAIG;;AAEH,OAAO,EAAE,WAAW,EAAE,SAAS,EAAE,MAAM,UAAU,CAAC;AAClD,OAAO,EAAE,IAAI,EAAE,cAAc,EAAE,MAAM,UAAU,CAAC;AAChD,OAAO,GAAG,MAAM,eAAe,CAAC;AAChC,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,MAAM,MAAM,mBAAmB,CAAC;AAYvC,MAAM,CAAC,IAAM,YAAY,GAAiC,UAAC,EAM1D;QALC,oBAAO,EACP,gBAAK,EACL,YAAG,EACH,gBAAK,EACL,kBAAM;IAEN,IAAI,KAAK,IAAI,GAAG,IAAI,MAAM,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,OAAO,CAAC,MAAM,IAAI,CAAC,EAAE;QACpE,OAAO,IAAI,CAAC;KACb;IAED,IAAM,MAAM,GAAG,SAAS,EAAE;SACvB,MAAM,CAAC,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;SACpB,KAAK,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC;IAEtB,IAAM,IAAI,GAAG,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,YAAY,EAAnB,CAAmB,CAAC,CAAC,IAAI,CAAC,CAAC;IAClE,IAAM,MAAM,GAAG,WAAW,EAAE;SACzB,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;SACjB,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC;IAEzB,IAAM,IAAI,GAAG,IAAI,EAAiB;SAC/B,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;SACb,EAAE,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,EAA3B,CAA2B,CAAC;SACzC,CAAC,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,CAAC,MAAM,CAAC,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAvC,CAAuC,CAAC;SACpD,KAAK,CAAC,cAAc,CAAC,CAAC;IACzB,IAAM,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC;IAE/B,OAAO,CACL,2BAAG,SAAS,EAAE,eAAa,KAAK,GAAG,CAAC,SAAM;QACxC,oBAAC,gBAAgB,IAAC,CAAC,EAAE,QAAQ,IAAI,EAAE,GAAI;QACvC,oBAAC,gBAAgB,IAAC,SAAS,EAAC,cAAc,EAAC,CAAC,EAAE,QAAQ,IAAI,EAAE,GAAI,CAC9D,CACL,CAAC;AACJ,CAAC,CAAC;AAEF,IAAM,gBAAgB,GAAG,MAAM,CAAC,IAAI,8FAAA,YAC1B;IAGgC,KACzC,KAJS,UAAA,KAAK;IACX,OAAA,KAAK,CAAC,KAAK,CAAC,QAAQ;QAClB,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,mBAAmB;QACrC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,kBAAkB;AAFtC,CAEsC,CACzC,CAAC;AAEF,IAAM,gBAAgB,GAAG,MAAM,CAAC,IAAI,8FAAA,YAC1B;IAGmC,KAC5C,KAJS,UAAA,KAAK;IACX,OAAA,KAAK,CAAC,KAAK,CAAC,QAAQ;QAClB,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,kBAAkB;QACpC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,qBAAqB;AAFzC,CAEyC,CAC5C,CAAC","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport { scaleLinear, scaleTime } from 'd3-scale';\nimport { area, curveMonotoneY } from 'd3-shape';\nimport max from 'lodash/fp/max';\nimport * as React from 'react';\nimport styled from 'styled-components';\n\nimport { SummaryBucket } from './types';\n\ninterface DensityChartProps {\n  buckets: SummaryBucket[];\n  end: number;\n  start: number;\n  width: number;\n  height: number;\n}\n\nexport const DensityChart: React.SFC<DensityChartProps> = ({\n  buckets,\n  start,\n  end,\n  width,\n  height,\n}) => {\n  if (start >= end || height <= 0 || width <= 0 || buckets.length <= 0) {\n    return null;\n  }\n\n  const yScale = scaleTime()\n    .domain([start, end])\n    .range([0, height]);\n\n  const xMax = max(buckets.map(bucket => bucket.entriesCount)) || 0;\n  const xScale = scaleLinear()\n    .domain([0, xMax])\n    .range([0, width / 2]);\n\n  const path = area<SummaryBucket>()\n    .x0(xScale(0))\n    .x1(bucket => xScale(bucket.entriesCount))\n    .y(bucket => yScale((bucket.start + bucket.end) / 2))\n    .curve(curveMonotoneY);\n  const pathData = path(buckets);\n\n  return (\n    <g transform={`translate(${width / 2}, 0)`}>\n      <PositiveAreaPath d={pathData || ''} />\n      <NegativeAreaPath transform=\"scale(-1, 1)\" d={pathData || ''} />\n    </g>\n  );\n};\n\nconst PositiveAreaPath = styled.path`\n  fill: ${props =>\n    props.theme.darkMode\n      ? props.theme.eui.euiColorMediumShade\n      : props.theme.eui.euiColorLightShade};\n`;\n\nconst NegativeAreaPath = styled.path`\n  fill: ${props =>\n    props.theme.darkMode\n      ? props.theme.eui.euiColorLightShade\n      : props.theme.eui.euiColorLightestShade};\n`;\n"]}]}