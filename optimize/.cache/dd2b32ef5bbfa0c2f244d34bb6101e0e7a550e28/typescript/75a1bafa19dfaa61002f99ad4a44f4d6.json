{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/containers/logs/with_log_minimap.tsx","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/containers/logs/with_log_minimap.tsx","mtime":1567631711983},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport { i18n } from '@kbn/i18n';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\nimport { logMinimapActions, logMinimapSelectors } from '../../store';\nimport { asChildFunctionRenderer } from '../../utils/typed_react';\nimport { bindPlainActionCreators } from '../../utils/typed_redux';\nimport { UrlStateContainer } from '../../utils/url_state';\nexport var withLogMinimap = connect(function (state) { return ({\n    availableIntervalSizes: availableIntervalSizes,\n    intervalSize: logMinimapSelectors.selectMinimapIntervalSize(state),\n    urlState: selectMinimapUrlState(state),\n}); }, bindPlainActionCreators({\n    setIntervalSize: logMinimapActions.setMinimapIntervalSize,\n}));\nexport var WithLogMinimap = asChildFunctionRenderer(withLogMinimap);\nexport var availableIntervalSizes = [\n    {\n        label: i18n.translate('xpack.infra.mapLogs.oneYearLabel', {\n            defaultMessage: '1 Year',\n        }),\n        intervalSize: 1000 * 60 * 60 * 24 * 365,\n    },\n    {\n        label: i18n.translate('xpack.infra.mapLogs.oneMonthLabel', {\n            defaultMessage: '1 Month',\n        }),\n        intervalSize: 1000 * 60 * 60 * 24 * 30,\n    },\n    {\n        label: i18n.translate('xpack.infra.mapLogs.oneWeekLabel', {\n            defaultMessage: '1 Week',\n        }),\n        intervalSize: 1000 * 60 * 60 * 24 * 7,\n    },\n    {\n        label: i18n.translate('xpack.infra.mapLogs.oneDayLabel', {\n            defaultMessage: '1 Day',\n        }),\n        intervalSize: 1000 * 60 * 60 * 24,\n    },\n    {\n        label: i18n.translate('xpack.infra.mapLogs.oneHourLabel', {\n            defaultMessage: '1 Hour',\n        }),\n        intervalSize: 1000 * 60 * 60,\n    },\n    {\n        label: i18n.translate('xpack.infra.mapLogs.oneMinuteLabel', {\n            defaultMessage: '1 Minute',\n        }),\n        intervalSize: 1000 * 60,\n    },\n];\nexport var WithLogMinimapUrlState = function () { return (React.createElement(WithLogMinimap, null, function (_a) {\n    var urlState = _a.urlState, setIntervalSize = _a.setIntervalSize;\n    return (React.createElement(UrlStateContainer, { urlState: urlState, urlStateKey: \"logMinimap\", mapToUrlState: mapToUrlState, onChange: function (newUrlState) {\n            if (newUrlState && newUrlState.intervalSize) {\n                setIntervalSize(newUrlState.intervalSize);\n            }\n        }, onInitialize: function (newUrlState) {\n            if (newUrlState && newUrlState.intervalSize) {\n                setIntervalSize(newUrlState.intervalSize);\n            }\n        } }));\n})); };\nvar mapToUrlState = function (value) {\n    return value\n        ? {\n            intervalSize: mapToIntervalSizeUrlState(value.intervalSize),\n        }\n        : undefined;\n};\nvar mapToIntervalSizeUrlState = function (value) {\n    return value && typeof value === 'number' ? value : undefined;\n};\nvar selectMinimapUrlState = createSelector(logMinimapSelectors.selectMinimapIntervalSize, function (intervalSize) { return ({\n    intervalSize: intervalSize,\n}); });\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/containers/logs/with_log_minimap.tsx","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/containers/logs/with_log_minimap.tsx"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport { i18n } from '@kbn/i18n';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\n\nimport { logMinimapActions, logMinimapSelectors, State } from '../../store';\nimport { asChildFunctionRenderer } from '../../utils/typed_react';\nimport { bindPlainActionCreators } from '../../utils/typed_redux';\nimport { UrlStateContainer } from '../../utils/url_state';\n\nexport const withLogMinimap = connect(\n  (state: State) => ({\n    availableIntervalSizes,\n    intervalSize: logMinimapSelectors.selectMinimapIntervalSize(state),\n    urlState: selectMinimapUrlState(state),\n  }),\n  bindPlainActionCreators({\n    setIntervalSize: logMinimapActions.setMinimapIntervalSize,\n  })\n);\n\nexport const WithLogMinimap = asChildFunctionRenderer(withLogMinimap);\n\nexport const availableIntervalSizes = [\n  {\n    label: i18n.translate('xpack.infra.mapLogs.oneYearLabel', {\n      defaultMessage: '1 Year',\n    }),\n    intervalSize: 1000 * 60 * 60 * 24 * 365,\n  },\n  {\n    label: i18n.translate('xpack.infra.mapLogs.oneMonthLabel', {\n      defaultMessage: '1 Month',\n    }),\n    intervalSize: 1000 * 60 * 60 * 24 * 30,\n  },\n  {\n    label: i18n.translate('xpack.infra.mapLogs.oneWeekLabel', {\n      defaultMessage: '1 Week',\n    }),\n    intervalSize: 1000 * 60 * 60 * 24 * 7,\n  },\n  {\n    label: i18n.translate('xpack.infra.mapLogs.oneDayLabel', {\n      defaultMessage: '1 Day',\n    }),\n    intervalSize: 1000 * 60 * 60 * 24,\n  },\n  {\n    label: i18n.translate('xpack.infra.mapLogs.oneHourLabel', {\n      defaultMessage: '1 Hour',\n    }),\n    intervalSize: 1000 * 60 * 60,\n  },\n  {\n    label: i18n.translate('xpack.infra.mapLogs.oneMinuteLabel', {\n      defaultMessage: '1 Minute',\n    }),\n    intervalSize: 1000 * 60,\n  },\n];\n\n/**\n * Url State\n */\n\ninterface LogMinimapUrlState {\n  intervalSize?: ReturnType<typeof logMinimapSelectors.selectMinimapIntervalSize>;\n}\n\nexport const WithLogMinimapUrlState = () => (\n  <WithLogMinimap>\n    {({ urlState, setIntervalSize }) => (\n      <UrlStateContainer\n        urlState={urlState}\n        urlStateKey=\"logMinimap\"\n        mapToUrlState={mapToUrlState}\n        onChange={newUrlState => {\n          if (newUrlState && newUrlState.intervalSize) {\n            setIntervalSize(newUrlState.intervalSize);\n          }\n        }}\n        onInitialize={newUrlState => {\n          if (newUrlState && newUrlState.intervalSize) {\n            setIntervalSize(newUrlState.intervalSize);\n          }\n        }}\n      />\n    )}\n  </WithLogMinimap>\n);\n\nconst mapToUrlState = (value: any): LogMinimapUrlState | undefined =>\n  value\n    ? {\n        intervalSize: mapToIntervalSizeUrlState(value.intervalSize),\n      }\n    : undefined;\n\nconst mapToIntervalSizeUrlState = (value: any) =>\n  value && typeof value === 'number' ? value : undefined;\n\nconst selectMinimapUrlState = createSelector(\n  logMinimapSelectors.selectMinimapIntervalSize,\n  intervalSize => ({\n    intervalSize,\n  })\n);\n"]}]}