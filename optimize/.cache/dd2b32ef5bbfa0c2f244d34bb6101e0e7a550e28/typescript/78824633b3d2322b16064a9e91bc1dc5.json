{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/apm/public/store/reactReduxRequest/serviceList.tsx","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/apm/public/store/reactReduxRequest/serviceList.tsx","mtime":1567631711871},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport React from 'react';\nimport { Request } from 'react-redux-request';\nimport { loadServiceList } from '../../services/rest/apm/services';\nimport { createInitialDataSelector } from './helpers';\nvar ID = 'serviceList';\nvar INITIAL_DATA = [];\nvar withInitialData = createInitialDataSelector(INITIAL_DATA);\nexport function getServiceList(state) {\n    return withInitialData(state.reactReduxRequest[ID]);\n}\nexport function ServiceListRequest(_a) {\n    var urlParams = _a.urlParams, render = _a.render;\n    var start = urlParams.start, end = urlParams.end, kuery = urlParams.kuery;\n    if (!(start && end)) {\n        return null;\n    }\n    return (React.createElement(Request, { id: ID, fn: loadServiceList, args: [{ start: start, end: end, kuery: kuery }], selector: getServiceList, render: render }));\n}\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/apm/public/store/reactReduxRequest/serviceList.tsx","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/apm/public/store/reactReduxRequest/serviceList.tsx"],"names":[],"mappings":"AAAA;;;;GAIG;AAEH,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,OAAO,EAAgC,MAAM,qBAAqB,CAAC;AAE5E,OAAO,EAAE,eAAe,EAAE,MAAM,kCAAkC,CAAC;AAGnE,OAAO,EAAE,yBAAyB,EAAE,MAAM,WAAW,CAAC;AAEtD,IAAM,EAAE,GAAG,aAAa,CAAC;AACzB,IAAM,YAAY,GAA2B,EAAE,CAAC;AAChD,IAAM,eAAe,GAAG,yBAAyB,CAC/C,YAAY,CACb,CAAC;AAEF,MAAM,UAAU,cAAc,CAC5B,KAAkB;IAElB,OAAO,eAAe,CAAC,KAAK,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAC,CAAC;AACtD,CAAC;AAED,MAAM,UAAU,kBAAkB,CAAC,EAMlC;QALC,wBAAS,EACT,kBAAM;IAKE,IAAA,uBAAK,EAAE,mBAAG,EAAE,uBAAK,CAAe;IAExC,IAAI,CAAC,CAAC,KAAK,IAAI,GAAG,CAAC,EAAE;QACnB,OAAO,IAAI,CAAC;KACb;IAED,OAAO,CACL,oBAAC,OAAO,IACN,EAAE,EAAE,EAAE,EACN,EAAE,EAAE,eAAe,EACnB,IAAI,EAAE,CAAC,EAAE,KAAK,OAAA,EAAE,GAAG,KAAA,EAAE,KAAK,OAAA,EAAE,CAAC,EAC7B,QAAQ,EAAE,cAAc,EACxB,MAAM,EAAE,MAAM,GACd,CACH,CAAC;AACJ,CAAC","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport React from 'react';\nimport { Request, RRRRender, RRRRenderResponse } from 'react-redux-request';\nimport { ServiceListAPIResponse } from 'x-pack/plugins/apm/server/lib/services/get_services';\nimport { loadServiceList } from '../../services/rest/apm/services';\nimport { IReduxState } from '../rootReducer';\nimport { IUrlParams } from '../urlParams';\nimport { createInitialDataSelector } from './helpers';\n\nconst ID = 'serviceList';\nconst INITIAL_DATA: ServiceListAPIResponse = [];\nconst withInitialData = createInitialDataSelector<ServiceListAPIResponse>(\n  INITIAL_DATA\n);\n\nexport function getServiceList(\n  state: IReduxState\n): RRRRenderResponse<ServiceListAPIResponse> {\n  return withInitialData(state.reactReduxRequest[ID]);\n}\n\nexport function ServiceListRequest({\n  urlParams,\n  render\n}: {\n  urlParams: IUrlParams;\n  render: RRRRender<ServiceListAPIResponse>;\n}) {\n  const { start, end, kuery } = urlParams;\n\n  if (!(start && end)) {\n    return null;\n  }\n\n  return (\n    <Request\n      id={ID}\n      fn={loadServiceList}\n      args={[{ start, end, kuery }]}\n      selector={getServiceList}\n      render={render}\n    />\n  );\n}\n"]}]}