{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/containers/with_options.tsx","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/containers/with_options.tsx","mtime":1567631711984},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport * as tslib_1 from \"tslib\";\nimport moment from 'moment';\nimport React from 'react';\nimport { InfraMetricType, InfraPathType } from '../graphql/types';\nimport { InfraFormatterType, InfraWaffleMapLegendMode, } from '../lib/lib';\nvar initialState = {\n    options: {\n        timerange: {\n            interval: '1m',\n            to: moment.utc().valueOf(),\n            from: moment\n                .utc()\n                .subtract(1, 'h')\n                .valueOf(),\n        },\n        wafflemap: {\n            formatter: InfraFormatterType.percent,\n            formatTemplate: '{{value}}',\n            metric: { type: InfraMetricType.cpu },\n            path: [{ type: InfraPathType.hosts }],\n            /*\n            legend: {\n              type: InfraWaffleMapLegendMode.step,\n              rules: [\n                {\n                  value: 0,\n                  color: '#00B3A4',\n                  operator: InfraWaffleMapRuleOperator.gte,\n                  label: 'Ok',\n                },\n                {\n                  value: 10000,\n                  color: '#DB1374',\n                  operator: InfraWaffleMapRuleOperator.gte,\n                  label: 'Over 10,000',\n                },\n              ],\n            },\n            */\n            legend: {\n                type: InfraWaffleMapLegendMode.gradient,\n                rules: [\n                    {\n                        value: 0,\n                        color: '#D3DAE6',\n                    },\n                    {\n                        value: 1,\n                        color: '#3185FC',\n                    },\n                ],\n            },\n        },\n    },\n};\nexport var withOptions = function (WrappedComponent) { return (React.createElement(WithOptions, null, function (args) { return React.createElement(WrappedComponent, tslib_1.__assign({}, args)); })); };\nvar WithOptions = /** @class */ (function (_super) {\n    tslib_1.__extends(WithOptions, _super);\n    function WithOptions() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.state = initialState;\n        return _this;\n    }\n    WithOptions.prototype.render = function () {\n        return this.props.children(this.state.options);\n    };\n    return WithOptions;\n}(React.Component));\nexport { WithOptions };\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/containers/with_options.tsx","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/containers/with_options.tsx"],"names":[],"mappings":"AAAA;;;;GAIG;;AAEH,OAAO,MAAM,MAAM,QAAQ,CAAC;AAC5B,OAAO,KAAK,MAAM,OAAO,CAAC;AAE1B,OAAO,EAAE,eAAe,EAAE,aAAa,EAAE,MAAM,kBAAkB,CAAC;AAClE,OAAO,EACL,kBAAkB,EAElB,wBAAwB,GAEzB,MAAM,YAAY,CAAC;AAGpB,IAAM,YAAY,GAAG;IACnB,OAAO,EAAE;QACP,SAAS,EAAE;YACT,QAAQ,EAAE,IAAI;YACd,EAAE,EAAE,MAAM,CAAC,GAAG,EAAE,CAAC,OAAO,EAAE;YAC1B,IAAI,EAAE,MAAM;iBACT,GAAG,EAAE;iBACL,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;iBAChB,OAAO,EAAE;SACb;QACD,SAAS,EAAE;YACT,SAAS,EAAE,kBAAkB,CAAC,OAAO;YACrC,cAAc,EAAE,WAAW;YAC3B,MAAM,EAAE,EAAE,IAAI,EAAE,eAAe,CAAC,GAAG,EAAE;YACrC,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,aAAa,CAAC,KAAK,EAAE,CAAC;YACrC;;;;;;;;;;;;;;;;;;cAkBE;YACF,MAAM,EAAE;gBACN,IAAI,EAAE,wBAAwB,CAAC,QAAQ;gBACvC,KAAK,EAAE;oBACL;wBACE,KAAK,EAAE,CAAC;wBACR,KAAK,EAAE,SAAS;qBACjB;oBACD;wBACE,KAAK,EAAE,CAAC;wBACR,KAAK,EAAE,SAAS;qBACjB;iBACF;aACF;SACF;KACc;CAClB,CAAC;AAQF,MAAM,CAAC,IAAM,WAAW,GAAG,UAAC,gBAAmD,IAAK,OAAA,CAClF,oBAAC,WAAW,QAAE,UAAA,IAAI,IAAI,OAAA,oBAAC,gBAAgB,uBAAK,IAAI,EAAI,EAA9B,CAA8B,CAAe,CACpE,EAFmF,CAEnF,CAAC;AAEF;IAAiC,uCAAwC;IAAzE;QAAA,qEAMC;QALiB,WAAK,GAAU,YAAY,CAAC;;IAK9C,CAAC;IAHQ,4BAAM,GAAb;QACE,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;IACjD,CAAC;IACH,kBAAC;AAAD,CAAC,AAND,CAAiC,KAAK,CAAC,SAAS,GAM/C","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport moment from 'moment';\nimport React from 'react';\n\nimport { InfraMetricType, InfraPathType } from '../graphql/types';\nimport {\n  InfraFormatterType,\n  InfraOptions,\n  InfraWaffleMapLegendMode,\n  // InfraWaffleMapRuleOperator,\n} from '../lib/lib';\nimport { RendererFunction } from '../utils/typed_react';\n\nconst initialState = {\n  options: {\n    timerange: {\n      interval: '1m',\n      to: moment.utc().valueOf(),\n      from: moment\n        .utc()\n        .subtract(1, 'h')\n        .valueOf(),\n    },\n    wafflemap: {\n      formatter: InfraFormatterType.percent,\n      formatTemplate: '{{value}}',\n      metric: { type: InfraMetricType.cpu },\n      path: [{ type: InfraPathType.hosts }],\n      /*\n      legend: {\n        type: InfraWaffleMapLegendMode.step,\n        rules: [\n          {\n            value: 0,\n            color: '#00B3A4',\n            operator: InfraWaffleMapRuleOperator.gte,\n            label: 'Ok',\n          },\n          {\n            value: 10000,\n            color: '#DB1374',\n            operator: InfraWaffleMapRuleOperator.gte,\n            label: 'Over 10,000',\n          },\n        ],\n      },\n      */\n      legend: {\n        type: InfraWaffleMapLegendMode.gradient,\n        rules: [\n          {\n            value: 0,\n            color: '#D3DAE6',\n          },\n          {\n            value: 1,\n            color: '#3185FC',\n          },\n        ],\n      },\n    },\n  } as InfraOptions,\n};\n\ninterface WithOptionsProps {\n  children: RendererFunction<InfraOptions>;\n}\n\ntype State = Readonly<typeof initialState>;\n\nexport const withOptions = (WrappedComponent: React.ComponentType<InfraOptions>) => (\n  <WithOptions>{args => <WrappedComponent {...args} />}</WithOptions>\n);\n\nexport class WithOptions extends React.Component<WithOptionsProps, State> {\n  public readonly state: State = initialState;\n\n  public render() {\n    return this.props.children(this.state.options);\n  }\n}\n"]}]}