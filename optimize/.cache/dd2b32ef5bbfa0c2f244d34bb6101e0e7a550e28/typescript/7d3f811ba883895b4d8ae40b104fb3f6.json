{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/store/remote/log_entries/selectors.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/store/remote/log_entries/selectors.ts","mtime":1567631711989},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport { createSelector } from 'reselect';\nimport { createGraphqlStateSelectors } from '../../../utils/remote_state/remote_graphql_state';\nvar entriesGraphlStateSelectors = createGraphqlStateSelectors();\nexport var selectEntries = createSelector(entriesGraphlStateSelectors.selectData, function (data) { return (data ? data.entries : []); });\nexport var selectIsLoadingEntries = entriesGraphlStateSelectors.selectIsLoading;\nexport var selectIsReloadingEntries = createSelector(entriesGraphlStateSelectors.selectIsLoading, entriesGraphlStateSelectors.selectLoadingProgressOperationInfo, function (isLoading, operationInfo) {\n    return isLoading && operationInfo ? operationInfo.operationKey === 'load' : false;\n});\nexport var selectIsLoadingMoreEntries = createSelector(entriesGraphlStateSelectors.selectIsLoading, entriesGraphlStateSelectors.selectLoadingProgressOperationInfo, function (isLoading, operationInfo) {\n    return isLoading && operationInfo ? operationInfo.operationKey === 'load_more' : false;\n});\nexport var selectEntriesStart = createSelector(entriesGraphlStateSelectors.selectData, function (data) { return (data && data.start ? data.start : null); });\nexport var selectEntriesEnd = createSelector(entriesGraphlStateSelectors.selectData, function (data) { return (data && data.end ? data.end : null); });\nexport var selectHasMoreBeforeStart = createSelector(entriesGraphlStateSelectors.selectData, function (data) { return (data ? data.hasMoreBefore : true); });\nexport var selectHasMoreAfterEnd = createSelector(entriesGraphlStateSelectors.selectData, function (data) { return (data ? data.hasMoreAfter : true); });\nexport var selectEntriesLastLoadedTime = entriesGraphlStateSelectors.selectLoadingResultTime;\nexport var selectEntriesStartLoadingState = entriesGraphlStateSelectors.selectLoadingState;\nexport var selectEntriesEndLoadingState = entriesGraphlStateSelectors.selectLoadingState;\nexport var selectFirstEntry = createSelector(selectEntries, function (entries) { return (entries.length > 0 ? entries[0] : null); });\nexport var selectLastEntry = createSelector(selectEntries, function (entries) { return (entries.length > 0 ? entries[entries.length - 1] : null); });\nexport var selectLoadedEntriesTimeInterval = createSelector(entriesGraphlStateSelectors.selectData, function (data) { return ({\n    end: data && data.end ? data.end.time : null,\n    start: data && data.start ? data.start.time : null,\n}); });\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/store/remote/log_entries/selectors.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/store/remote/log_entries/selectors.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport { createSelector } from 'reselect';\n\nimport { createGraphqlStateSelectors } from '../../../utils/remote_state/remote_graphql_state';\nimport { LogEntriesRemoteState } from './state';\n\nconst entriesGraphlStateSelectors = createGraphqlStateSelectors<LogEntriesRemoteState>();\n\nexport const selectEntries = createSelector(\n  entriesGraphlStateSelectors.selectData,\n  data => (data ? data.entries : [])\n);\n\nexport const selectIsLoadingEntries = entriesGraphlStateSelectors.selectIsLoading;\n\nexport const selectIsReloadingEntries = createSelector(\n  entriesGraphlStateSelectors.selectIsLoading,\n  entriesGraphlStateSelectors.selectLoadingProgressOperationInfo,\n  (isLoading, operationInfo) =>\n    isLoading && operationInfo ? operationInfo.operationKey === 'load' : false\n);\n\nexport const selectIsLoadingMoreEntries = createSelector(\n  entriesGraphlStateSelectors.selectIsLoading,\n  entriesGraphlStateSelectors.selectLoadingProgressOperationInfo,\n  (isLoading, operationInfo) =>\n    isLoading && operationInfo ? operationInfo.operationKey === 'load_more' : false\n);\n\nexport const selectEntriesStart = createSelector(\n  entriesGraphlStateSelectors.selectData,\n  data => (data && data.start ? data.start : null)\n);\n\nexport const selectEntriesEnd = createSelector(\n  entriesGraphlStateSelectors.selectData,\n  data => (data && data.end ? data.end : null)\n);\n\nexport const selectHasMoreBeforeStart = createSelector(\n  entriesGraphlStateSelectors.selectData,\n  data => (data ? data.hasMoreBefore : true)\n);\n\nexport const selectHasMoreAfterEnd = createSelector(\n  entriesGraphlStateSelectors.selectData,\n  data => (data ? data.hasMoreAfter : true)\n);\n\nexport const selectEntriesLastLoadedTime = entriesGraphlStateSelectors.selectLoadingResultTime;\n\nexport const selectEntriesStartLoadingState = entriesGraphlStateSelectors.selectLoadingState;\n\nexport const selectEntriesEndLoadingState = entriesGraphlStateSelectors.selectLoadingState;\n\nexport const selectFirstEntry = createSelector(\n  selectEntries,\n  entries => (entries.length > 0 ? entries[0] : null)\n);\n\nexport const selectLastEntry = createSelector(\n  selectEntries,\n  entries => (entries.length > 0 ? entries[entries.length - 1] : null)\n);\n\nexport const selectLoadedEntriesTimeInterval = createSelector(\n  entriesGraphlStateSelectors.selectData,\n  data => ({\n    end: data && data.end ? data.end.time : null,\n    start: data && data.start ? data.start.time : null,\n  })\n);\n"]}]}