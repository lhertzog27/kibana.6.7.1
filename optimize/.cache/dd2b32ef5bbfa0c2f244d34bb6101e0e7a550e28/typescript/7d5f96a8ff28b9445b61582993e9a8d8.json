{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/containers/waffle/with_waffle_time.tsx","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/containers/waffle/with_waffle_time.tsx","mtime":1567631711984},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\nimport { waffleTimeActions, waffleTimeSelectors } from '../../store';\nimport { asChildFunctionRenderer } from '../../utils/typed_react';\nimport { bindPlainActionCreators } from '../../utils/typed_redux';\nimport { UrlStateContainer } from '../../utils/url_state';\nexport var withWaffleTime = connect(function (state) { return ({\n    currentTime: waffleTimeSelectors.selectCurrentTime(state),\n    currentTimeRange: waffleTimeSelectors.selectCurrentTimeRange(state),\n    isAutoReloading: waffleTimeSelectors.selectIsAutoReloading(state),\n    urlState: selectTimeUrlState(state),\n}); }, bindPlainActionCreators({\n    jumpToTime: waffleTimeActions.jumpToTime,\n    startAutoReload: waffleTimeActions.startAutoReload,\n    stopAutoReload: waffleTimeActions.stopAutoReload,\n}));\nexport var WithWaffleTime = asChildFunctionRenderer(withWaffleTime, {\n    onCleanup: function (_a) {\n        var stopAutoReload = _a.stopAutoReload;\n        return stopAutoReload();\n    },\n});\nexport var WithWaffleTimeUrlState = function () { return (React.createElement(WithWaffleTime, null, function (_a) {\n    var jumpToTime = _a.jumpToTime, startAutoReload = _a.startAutoReload, stopAutoReload = _a.stopAutoReload, urlState = _a.urlState;\n    return (React.createElement(UrlStateContainer, { urlState: urlState, urlStateKey: \"waffleTime\", mapToUrlState: mapToUrlState, onChange: function (newUrlState) {\n            if (newUrlState && newUrlState.time) {\n                jumpToTime(newUrlState.time);\n            }\n            if (newUrlState && newUrlState.autoReload) {\n                startAutoReload();\n            }\n            else if (newUrlState &&\n                typeof newUrlState.autoReload !== 'undefined' &&\n                !newUrlState.autoReload) {\n                stopAutoReload();\n            }\n        }, onInitialize: function (initialUrlState) {\n            if (initialUrlState) {\n                jumpToTime(initialUrlState.time ? initialUrlState.time : Date.now());\n            }\n            if (initialUrlState && initialUrlState.autoReload) {\n                startAutoReload();\n            }\n        } }));\n})); };\nvar selectTimeUrlState = createSelector(waffleTimeSelectors.selectCurrentTime, waffleTimeSelectors.selectIsAutoReloading, function (time, autoReload) { return ({\n    time: time,\n    autoReload: autoReload,\n}); });\nvar mapToUrlState = function (value) {\n    return value\n        ? {\n            time: mapToTimeUrlState(value.time),\n            autoReload: mapToAutoReloadUrlState(value.autoReload),\n        }\n        : undefined;\n};\nvar mapToTimeUrlState = function (value) { return (value && typeof value === 'number' ? value : undefined); };\nvar mapToAutoReloadUrlState = function (value) { return (typeof value === 'boolean' ? value : undefined); };\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/containers/waffle/with_waffle_time.tsx","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/containers/waffle/with_waffle_time.tsx"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\n\nimport { State, waffleTimeActions, waffleTimeSelectors } from '../../store';\nimport { asChildFunctionRenderer } from '../../utils/typed_react';\nimport { bindPlainActionCreators } from '../../utils/typed_redux';\nimport { UrlStateContainer } from '../../utils/url_state';\n\nexport const withWaffleTime = connect(\n  (state: State) => ({\n    currentTime: waffleTimeSelectors.selectCurrentTime(state),\n    currentTimeRange: waffleTimeSelectors.selectCurrentTimeRange(state),\n    isAutoReloading: waffleTimeSelectors.selectIsAutoReloading(state),\n    urlState: selectTimeUrlState(state),\n  }),\n  bindPlainActionCreators({\n    jumpToTime: waffleTimeActions.jumpToTime,\n    startAutoReload: waffleTimeActions.startAutoReload,\n    stopAutoReload: waffleTimeActions.stopAutoReload,\n  })\n);\n\nexport const WithWaffleTime = asChildFunctionRenderer(withWaffleTime, {\n  onCleanup: ({ stopAutoReload }) => stopAutoReload(),\n});\n\n/**\n * Url State\n */\n\ninterface WaffleTimeUrlState {\n  time?: ReturnType<typeof waffleTimeSelectors.selectCurrentTime>;\n  autoReload?: ReturnType<typeof waffleTimeSelectors.selectIsAutoReloading>;\n}\n\nexport const WithWaffleTimeUrlState = () => (\n  <WithWaffleTime>\n    {({ jumpToTime, startAutoReload, stopAutoReload, urlState }) => (\n      <UrlStateContainer\n        urlState={urlState}\n        urlStateKey=\"waffleTime\"\n        mapToUrlState={mapToUrlState}\n        onChange={newUrlState => {\n          if (newUrlState && newUrlState.time) {\n            jumpToTime(newUrlState.time);\n          }\n          if (newUrlState && newUrlState.autoReload) {\n            startAutoReload();\n          } else if (\n            newUrlState &&\n            typeof newUrlState.autoReload !== 'undefined' &&\n            !newUrlState.autoReload\n          ) {\n            stopAutoReload();\n          }\n        }}\n        onInitialize={initialUrlState => {\n          if (initialUrlState) {\n            jumpToTime(initialUrlState.time ? initialUrlState.time : Date.now());\n          }\n          if (initialUrlState && initialUrlState.autoReload) {\n            startAutoReload();\n          }\n        }}\n      />\n    )}\n  </WithWaffleTime>\n);\n\nconst selectTimeUrlState = createSelector(\n  waffleTimeSelectors.selectCurrentTime,\n  waffleTimeSelectors.selectIsAutoReloading,\n  (time, autoReload) => ({\n    time,\n    autoReload,\n  })\n);\n\nconst mapToUrlState = (value: any): WaffleTimeUrlState | undefined =>\n  value\n    ? {\n        time: mapToTimeUrlState(value.time),\n        autoReload: mapToAutoReloadUrlState(value.autoReload),\n      }\n    : undefined;\n\nconst mapToTimeUrlState = (value: any) => (value && typeof value === 'number' ? value : undefined);\n\nconst mapToAutoReloadUrlState = (value: any) => (typeof value === 'boolean' ? value : undefined);\n"]}]}