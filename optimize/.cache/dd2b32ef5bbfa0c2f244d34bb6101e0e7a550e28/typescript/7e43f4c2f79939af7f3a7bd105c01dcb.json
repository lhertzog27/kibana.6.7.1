{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/src/utils/get_flattened_object.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/utils/get_flattened_object.ts","mtime":1567631711787},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport * as tslib_1 from \"tslib\";\nfunction shouldReadKeys(value) {\n    return typeof value === 'object' && value !== null && !Array.isArray(value);\n}\n/**\n *  Flattens a deeply nested object to a map of dot-separated\n *  paths pointing to all primitive values **and arrays**\n *  from `rootValue`.\n *\n *  example:\n *    getFlattenedObject({ a: { b: 1, c: [2,3] } })\n *    // => { 'a.b': 1, 'a.c': [2,3] }\n *\n *  @param {Object} rootValue\n *  @returns {Object}\n */\nexport function getFlattenedObject(rootValue) {\n    if (!shouldReadKeys(rootValue)) {\n        throw new TypeError(\"Root value is not flatten-able, received \" + rootValue);\n    }\n    return (function flatten(acc, prefix, object) {\n        var e_1, _a;\n        try {\n            for (var _b = tslib_1.__values(Object.entries(object)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var _d = tslib_1.__read(_c.value, 2), key = _d[0], value = _d[1];\n                var path = prefix ? prefix + \".\" + key : key;\n                if (shouldReadKeys(value)) {\n                    flatten(acc, path, value);\n                }\n                else {\n                    acc[path] = value;\n                }\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        return acc;\n    })({}, '', rootValue);\n}\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/src/utils/get_flattened_object.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/src/utils/get_flattened_object.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;GAiBG;;AAEH,SAAS,cAAc,CAAC,KAAc;IACpC,OAAO,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;AAC9E,CAAC;AAED;;;;;;;;;;;GAWG;AACH,MAAM,UAAU,kBAAkB,CAAC,SAAkB;IACnD,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,EAAE;QAC9B,MAAM,IAAI,SAAS,CAAC,8CAA4C,SAAW,CAAC,CAAC;KAC9E;IAED,OAAO,CAAC,SAAS,OAAO,CAAgC,GAAM,EAAE,MAAc,EAAE,MAAS;;;YACvF,KAA2B,IAAA,KAAA,iBAAA,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAA,gBAAA,4BAAE;gBAAxC,IAAA,gCAAY,EAAX,WAAG,EAAE,aAAK;gBACpB,IAAM,IAAI,GAAG,MAAM,CAAC,CAAC,CAAI,MAAM,SAAI,GAAK,CAAC,CAAC,CAAC,GAAG,CAAC;gBAC/C,IAAI,cAAc,CAAC,KAAK,CAAC,EAAE;oBACzB,OAAO,CAAC,GAAG,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;iBAC3B;qBAAM;oBACL,GAAG,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC;iBACnB;aACF;;;;;;;;;QAED,OAAO,GAAG,CAAC;IACb,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,SAAS,CAAC,CAAC;AACxB,CAAC","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nfunction shouldReadKeys(value: unknown): value is Record<string, any> {\n  return typeof value === 'object' && value !== null && !Array.isArray(value);\n}\n\n/**\n *  Flattens a deeply nested object to a map of dot-separated\n *  paths pointing to all primitive values **and arrays**\n *  from `rootValue`.\n *\n *  example:\n *    getFlattenedObject({ a: { b: 1, c: [2,3] } })\n *    // => { 'a.b': 1, 'a.c': [2,3] }\n *\n *  @param {Object} rootValue\n *  @returns {Object}\n */\nexport function getFlattenedObject(rootValue: unknown) {\n  if (!shouldReadKeys(rootValue)) {\n    throw new TypeError(`Root value is not flatten-able, received ${rootValue}`);\n  }\n\n  return (function flatten<T extends Record<string, any>>(acc: T, prefix: string, object: T): T {\n    for (const [key, value] of Object.entries(object)) {\n      const path = prefix ? `${prefix}.${key}` : key;\n      if (shouldReadKeys(value)) {\n        flatten(acc, path, value);\n      } else {\n        acc[path] = value;\n      }\n    }\n\n    return acc;\n  })({}, '', rootValue);\n}\n"]}]}