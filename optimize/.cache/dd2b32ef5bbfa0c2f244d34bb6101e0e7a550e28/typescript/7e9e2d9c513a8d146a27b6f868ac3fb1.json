{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/util/observable_utils.tsx","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/util/observable_utils.tsx","mtime":1567631712071},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport * as tslib_1 from \"tslib\";\nimport React, { Component } from 'react';\n// Sets up a ObservableComponent which subscribes to given observable updates and\n// and passes them on as prop values to the given WrappedComponent.\n// This give us the benefit of abstracting away the need to set up subscribers and callbacks,\n// and the passed down props can be used in pure/functional components without\n// the need for their own state management.\nexport function injectObservablesAsProps(observables, WrappedComponent) {\n    var observableKeys = Object.keys(observables);\n    var ObservableComponent = /** @class */ (function (_super) {\n        tslib_1.__extends(ObservableComponent, _super);\n        function ObservableComponent() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this.state = observableKeys.reduce(function (reducedState, key) {\n                reducedState[key] = observables[key].value;\n                return reducedState;\n            }, {});\n            _this.subscriptions = {};\n            return _this;\n        }\n        ObservableComponent.prototype.componentDidMount = function () {\n            var _this = this;\n            observableKeys.forEach(function (k) {\n                _this.subscriptions[k] = observables[k].subscribe(function (v) {\n                    var _a;\n                    return _this.setState((_a = {}, _a[k] = v, _a));\n                });\n            });\n        };\n        ObservableComponent.prototype.componentWillUnmount = function () {\n            var _this = this;\n            Object.keys(this.subscriptions).forEach(function (key) {\n                return _this.subscriptions[key].unsubscribe();\n            });\n        };\n        ObservableComponent.prototype.render = function () {\n            return (React.createElement(WrappedComponent, tslib_1.__assign({}, this.props, this.state), this.props.children));\n        };\n        return ObservableComponent;\n    }(Component));\n    return ObservableComponent;\n}\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/util/observable_utils.tsx","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/ml/public/util/observable_utils.tsx"],"names":[],"mappings":"AAAA;;;;GAIG;;AAEH,OAAO,KAAK,EAAE,EAAE,SAAS,EAAiB,MAAM,OAAO,CAAC;AAKxD,iFAAiF;AACjF,mEAAmE;AACnE,6FAA6F;AAC7F,8EAA8E;AAC9E,2CAA2C;AAC3C,MAAM,UAAU,wBAAwB,CACtC,WAA6C,EAC7C,gBAA+B;IAE/B,IAAM,cAAc,GAAG,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAEhD;QAAkC,+CAAmB;QAArD;YAAA,qEA2BC;YA1BQ,WAAK,GAAG,cAAc,CAAC,MAAM,CAAC,UAAC,YAA6B,EAAE,GAAW;gBAC9E,YAAY,CAAC,GAAG,CAAC,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC;gBAC3C,OAAO,YAAY,CAAC;YACtB,CAAC,EAAE,EAAE,CAAC,CAAC;YAEA,mBAAa,GAAG,EAA8B,CAAC;;QAqBxD,CAAC;QAnBQ,+CAAiB,GAAxB;YAAA,iBAIC;YAHC,cAAc,CAAC,OAAO,CAAC,UAAA,CAAC;gBACtB,KAAI,CAAC,aAAa,CAAC,CAAC,CAAC,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,UAAA,CAAC;;oBAAI,OAAA,KAAI,CAAC,QAAQ,WAAG,GAAC,CAAC,IAAG,CAAC,MAAG;gBAAzB,CAAyB,CAAC,CAAC;YACnF,CAAC,CAAC,CAAC;QACL,CAAC;QAEM,kDAAoB,GAA3B;YAAA,iBAIC;YAHC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,UAAC,GAAW;gBAClD,OAAA,KAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,WAAW,EAAE;YAArC,CAAqC,CACtC,CAAC;QACJ,CAAC;QAEM,oCAAM,GAAb;YACE,OAAO,CACL,oBAAC,gBAAgB,uBAAK,IAAI,CAAC,KAAK,EAAM,IAAI,CAAC,KAAK,GAC7C,IAAI,CAAC,KAAK,CAAC,QAAQ,CACH,CACpB,CAAC;QACJ,CAAC;QACH,0BAAC;IAAD,CAAC,AA3BD,CAAkC,SAAS,GA2B1C;IAED,OAAO,mBAAoC,CAAC;AAC9C,CAAC","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport React, { Component, ComponentType } from 'react';\n\nimport { BehaviorSubject, Subscription } from 'rxjs';\nimport { Dictionary } from '../../common/types/common';\n\n// Sets up a ObservableComponent which subscribes to given observable updates and\n// and passes them on as prop values to the given WrappedComponent.\n// This give us the benefit of abstracting away the need to set up subscribers and callbacks,\n// and the passed down props can be used in pure/functional components without\n// the need for their own state management.\nexport function injectObservablesAsProps(\n  observables: Dictionary<BehaviorSubject<any>>,\n  WrappedComponent: ComponentType\n): ComponentType {\n  const observableKeys = Object.keys(observables);\n\n  class ObservableComponent extends Component<any, any> {\n    public state = observableKeys.reduce((reducedState: Dictionary<any>, key: string) => {\n      reducedState[key] = observables[key].value;\n      return reducedState;\n    }, {});\n\n    public subscriptions = {} as Dictionary<Subscription>;\n\n    public componentDidMount() {\n      observableKeys.forEach(k => {\n        this.subscriptions[k] = observables[k].subscribe(v => this.setState({ [k]: v }));\n      });\n    }\n\n    public componentWillUnmount() {\n      Object.keys(this.subscriptions).forEach((key: string) =>\n        this.subscriptions[key].unsubscribe()\n      );\n    }\n\n    public render() {\n      return (\n        <WrappedComponent {...this.props} {...this.state}>\n          {this.props.children}\n        </WrappedComponent>\n      );\n    }\n  }\n\n  return ObservableComponent as ComponentType;\n}\n"]}]}