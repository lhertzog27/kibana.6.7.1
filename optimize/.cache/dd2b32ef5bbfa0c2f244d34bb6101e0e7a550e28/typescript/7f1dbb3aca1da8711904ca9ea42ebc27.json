{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/reporting/public/components/screen_capture_panel_content.tsx","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/reporting/public/components/screen_capture_panel_content.tsx","mtime":1567631712280},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport * as tslib_1 from \"tslib\";\nimport { EuiSpacer, EuiSwitch } from '@elastic/eui';\nimport { FormattedMessage } from '@kbn/i18n/react';\nimport React, { Component, Fragment } from 'react';\nimport { ReportingPanelContent } from './reporting_panel_content';\nvar ScreenCapturePanelContent = /** @class */ (function (_super) {\n    tslib_1.__extends(ScreenCapturePanelContent, _super);\n    function ScreenCapturePanelContent(props) {\n        var _this = _super.call(this, props) || this;\n        _this.renderOptions = function () {\n            if (_this.props.reportType === 'png') {\n                return (React.createElement(Fragment, null,\n                    React.createElement(EuiSpacer, { size: \"s\" })));\n            }\n            else {\n                return (React.createElement(Fragment, null,\n                    React.createElement(EuiSwitch, { label: React.createElement(FormattedMessage, { id: \"xpack.reporting.screenCapturePanelContent.optimizeForPrintingLabel\", defaultMessage: \"Optimize for printing\" }), checked: _this.state.usePrintLayout, onChange: _this.handlePrintLayoutChange, \"data-test-subj\": \"usePrintLayout\" }),\n                    React.createElement(EuiSpacer, { size: \"s\" })));\n            }\n        };\n        _this.handlePrintLayoutChange = function (evt) {\n            _this.setState({ usePrintLayout: evt.target.checked });\n        };\n        _this.getLayout = function () {\n            if (_this.state.usePrintLayout) {\n                return { id: 'print' };\n            }\n            var el = document.querySelector('[data-shared-items-container]');\n            var bounds = el ? el.getBoundingClientRect() : { height: 768, width: 1024 };\n            if (_this.props.reportType === 'png') {\n                return {\n                    dimensions: {\n                        height: bounds.height,\n                        width: bounds.width,\n                    },\n                };\n            }\n            else {\n                return {\n                    id: 'preserve_layout',\n                    dimensions: {\n                        height: bounds.height,\n                        width: bounds.width,\n                    },\n                };\n            }\n        };\n        _this.getJobParams = function () {\n            return tslib_1.__assign({}, _this.props.getJobParams(), { layout: _this.getLayout() });\n        };\n        _this.state = {\n            usePrintLayout: false,\n        };\n        return _this;\n    }\n    ScreenCapturePanelContent.prototype.render = function () {\n        return (React.createElement(ReportingPanelContent, { reportType: this.props.reportType, layoutId: this.getLayout().id, objectType: this.props.objectType, objectId: this.props.objectId, getJobParams: this.getJobParams, options: this.renderOptions(), isDirty: this.props.isDirty, onClose: this.props.onClose }));\n    };\n    return ScreenCapturePanelContent;\n}(Component));\nexport { ScreenCapturePanelContent };\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/reporting/public/components/screen_capture_panel_content.tsx","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/reporting/public/components/screen_capture_panel_content.tsx"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport { EuiSpacer, EuiSwitch } from '@elastic/eui';\nimport { FormattedMessage } from '@kbn/i18n/react';\nimport React, { Component, Fragment } from 'react';\nimport { ReportingPanelContent } from './reporting_panel_content';\n\ninterface Props {\n  reportType: string;\n  objectId?: string;\n  objectType: string;\n  getJobParams: () => any;\n  isDirty: boolean;\n  onClose: () => void;\n}\n\ninterface State {\n  usePrintLayout: boolean;\n}\n\nexport class ScreenCapturePanelContent extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      usePrintLayout: false,\n    };\n  }\n\n  public render() {\n    return (\n      <ReportingPanelContent\n        reportType={this.props.reportType}\n        layoutId={this.getLayout().id}\n        objectType={this.props.objectType}\n        objectId={this.props.objectId}\n        getJobParams={this.getJobParams}\n        options={this.renderOptions()}\n        isDirty={this.props.isDirty}\n        onClose={this.props.onClose}\n      />\n    );\n  }\n\n  private renderOptions = () => {\n    if (this.props.reportType === 'png') {\n      return (\n        <Fragment>\n          <EuiSpacer size=\"s\" />\n        </Fragment>\n      );\n    } else {\n      return (\n        <Fragment>\n          <EuiSwitch\n            label={\n              <FormattedMessage\n                id=\"xpack.reporting.screenCapturePanelContent.optimizeForPrintingLabel\"\n                defaultMessage=\"Optimize for printing\"\n              />\n            }\n            checked={this.state.usePrintLayout}\n            onChange={this.handlePrintLayoutChange}\n            data-test-subj=\"usePrintLayout\"\n          />\n          <EuiSpacer size=\"s\" />\n        </Fragment>\n      );\n    }\n  };\n\n  private handlePrintLayoutChange = (evt: any) => {\n    this.setState({ usePrintLayout: evt.target.checked });\n  };\n\n  private getLayout = () => {\n    if (this.state.usePrintLayout) {\n      return { id: 'print' };\n    }\n\n    const el = document.querySelector('[data-shared-items-container]');\n    const bounds = el ? el.getBoundingClientRect() : { height: 768, width: 1024 };\n\n    if (this.props.reportType === 'png') {\n      return {\n        dimensions: {\n          height: bounds.height,\n          width: bounds.width,\n        },\n      };\n    } else {\n      return {\n        id: 'preserve_layout',\n        dimensions: {\n          height: bounds.height,\n          width: bounds.width,\n        },\n      };\n    }\n  };\n\n  private getJobParams = () => {\n    return {\n      ...this.props.getJobParams(),\n      layout: this.getLayout(),\n    };\n  };\n}\n"]}]}