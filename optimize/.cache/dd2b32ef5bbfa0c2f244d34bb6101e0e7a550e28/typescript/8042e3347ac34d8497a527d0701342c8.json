{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/security/public/views/management/edit_role/components/privileges/es/index_privileges.tsx","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/security/public/views/management/edit_role/components/privileges/es/index_privileges.tsx","mtime":1567631712300},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["import * as tslib_1 from \"tslib\";\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport _ from 'lodash';\nimport React, { Component } from 'react';\nimport { isReservedRole, isRoleEnabled } from '../../../../../../lib/role';\nimport { getFields } from '../../../../../../objects';\nimport { IndexPrivilegeForm } from './index_privilege_form';\nvar IndexPrivileges = /** @class */ (function (_super) {\n    tslib_1.__extends(IndexPrivileges, _super);\n    function IndexPrivileges(props) {\n        var _this = _super.call(this, props) || this;\n        _this.addIndexPrivilege = function () {\n            var role = _this.props.role;\n            var newIndices = tslib_1.__spread(role.elasticsearch.indices, [\n                {\n                    names: [],\n                    privileges: [],\n                    field_security: {\n                        grant: ['*'],\n                    },\n                },\n            ]);\n            _this.props.onChange(tslib_1.__assign({}, _this.props.role, { elasticsearch: tslib_1.__assign({}, _this.props.role.elasticsearch, { indices: newIndices }) }));\n        };\n        _this.onIndexPrivilegeChange = function (privilegeIndex) {\n            return function (updatedPrivilege) {\n                var role = _this.props.role;\n                var indices = role.elasticsearch.indices;\n                var newIndices = tslib_1.__spread(indices);\n                newIndices[privilegeIndex] = updatedPrivilege;\n                _this.props.onChange(tslib_1.__assign({}, _this.props.role, { elasticsearch: tslib_1.__assign({}, _this.props.role.elasticsearch, { indices: newIndices }) }));\n                _this.loadAvailableFields(newIndices);\n            };\n        };\n        _this.onIndexPrivilegeDelete = function (privilegeIndex) {\n            return function () {\n                var role = _this.props.role;\n                var newIndices = tslib_1.__spread(role.elasticsearch.indices);\n                newIndices.splice(privilegeIndex, 1);\n                _this.props.onChange(tslib_1.__assign({}, _this.props.role, { elasticsearch: tslib_1.__assign({}, _this.props.role.elasticsearch, { indices: newIndices }) }));\n            };\n        };\n        _this.isPlaceholderPrivilege = function (indexPrivilege) {\n            return indexPrivilege.names.length === 0;\n        };\n        _this.loadFieldsForPattern = function (pattern) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n            var _a, _b, _c, _d, e_1;\n            return tslib_1.__generator(this, function (_e) {\n                switch (_e.label) {\n                    case 0:\n                        if (!pattern) {\n                            return [2 /*return*/, (_a = {}, _a[pattern] = [], _a)];\n                        }\n                        _e.label = 1;\n                    case 1:\n                        _e.trys.push([1, 3, , 4]);\n                        _b = {};\n                        _d = pattern;\n                        return [4 /*yield*/, getFields(this.props.httpClient, pattern)];\n                    case 2: return [2 /*return*/, (_b[_d] = _e.sent(),\n                            _b)];\n                    case 3:\n                        e_1 = _e.sent();\n                        return [2 /*return*/, (_c = {},\n                                _c[pattern] = [],\n                                _c)];\n                    case 4: return [2 /*return*/];\n                }\n            });\n        }); };\n        _this.state = {\n            availableFields: {},\n        };\n        return _this;\n    }\n    IndexPrivileges.prototype.componentDidMount = function () {\n        this.loadAvailableFields(this.props.role.elasticsearch.indices);\n    };\n    IndexPrivileges.prototype.render = function () {\n        var _this = this;\n        var _a = this.props.role.elasticsearch.indices, indices = _a === void 0 ? [] : _a;\n        var _b = this.props, indexPatterns = _b.indexPatterns, allowDocumentLevelSecurity = _b.allowDocumentLevelSecurity, allowFieldLevelSecurity = _b.allowFieldLevelSecurity;\n        var props = {\n            indexPatterns: indexPatterns,\n            // If editing an existing role while that has been disabled, always show the FLS/DLS fields because currently\n            // a role is only marked as disabled if it has FLS/DLS setup (usually before the user changed to a license that\n            // doesn't permit FLS/DLS).\n            allowDocumentLevelSecurity: allowDocumentLevelSecurity || !isRoleEnabled(this.props.role),\n            allowFieldLevelSecurity: allowFieldLevelSecurity || !isRoleEnabled(this.props.role),\n            isReservedRole: isReservedRole(this.props.role),\n        };\n        var forms = indices.map(function (indexPrivilege, idx) { return (React.createElement(IndexPrivilegeForm, tslib_1.__assign({ key: idx }, props, { formIndex: idx, validator: _this.props.validator, allowDelete: !props.isReservedRole, indexPrivilege: indexPrivilege, availableFields: _this.state.availableFields[indexPrivilege.names.join(',')], onChange: _this.onIndexPrivilegeChange(idx), onDelete: _this.onIndexPrivilegeDelete(idx) }))); });\n        return forms;\n    };\n    IndexPrivileges.prototype.loadAvailableFields = function (privileges) {\n        var _this = this;\n        // Reserved roles cannot be edited, and therefore do not need to fetch available fields.\n        if (isReservedRole(this.props.role)) {\n            return;\n        }\n        var patterns = privileges.map(function (index) { return index.names.join(','); });\n        var cachedPatterns = Object.keys(this.state.availableFields);\n        var patternsToFetch = _.difference(patterns, cachedPatterns);\n        var fetchRequests = patternsToFetch.map(this.loadFieldsForPattern);\n        Promise.all(fetchRequests).then(function (response) {\n            _this.setState({\n                availableFields: tslib_1.__assign({}, _this.state.availableFields, response.reduce(function (acc, o) { return (tslib_1.__assign({}, acc, o)); }, {})),\n            });\n        });\n    };\n    return IndexPrivileges;\n}(Component));\nexport { IndexPrivileges };\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/security/public/views/management/edit_role/components/privileges/es/index_privileges.tsx","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/security/public/views/management/edit_role/components/privileges/es/index_privileges.tsx"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport _ from 'lodash';\nimport React, { Component } from 'react';\nimport { IndexPrivilege } from '../../../../../../../common/model/index_privilege';\nimport { Role } from '../../../../../../../common/model/role';\nimport { isReservedRole, isRoleEnabled } from '../../../../../../lib/role';\nimport { getFields } from '../../../../../../objects';\nimport { RoleValidator } from '../../../lib/validate_role';\nimport { IndexPrivilegeForm } from './index_privilege_form';\n\ninterface Props {\n  role: Role;\n  indexPatterns: string[];\n  allowDocumentLevelSecurity: boolean;\n  allowFieldLevelSecurity: boolean;\n  httpClient: any;\n  onChange: (role: Role) => void;\n  validator: RoleValidator;\n}\n\ninterface State {\n  availableFields: {\n    [indexPrivKey: string]: string[];\n  };\n}\n\nexport class IndexPrivileges extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      availableFields: {},\n    };\n  }\n\n  public componentDidMount() {\n    this.loadAvailableFields(this.props.role.elasticsearch.indices);\n  }\n\n  public render() {\n    const { indices = [] } = this.props.role.elasticsearch;\n\n    const { indexPatterns, allowDocumentLevelSecurity, allowFieldLevelSecurity } = this.props;\n\n    const props = {\n      indexPatterns,\n      // If editing an existing role while that has been disabled, always show the FLS/DLS fields because currently\n      // a role is only marked as disabled if it has FLS/DLS setup (usually before the user changed to a license that\n      // doesn't permit FLS/DLS).\n      allowDocumentLevelSecurity: allowDocumentLevelSecurity || !isRoleEnabled(this.props.role),\n      allowFieldLevelSecurity: allowFieldLevelSecurity || !isRoleEnabled(this.props.role),\n      isReservedRole: isReservedRole(this.props.role),\n    };\n\n    const forms = indices.map((indexPrivilege: IndexPrivilege, idx) => (\n      <IndexPrivilegeForm\n        key={idx}\n        {...props}\n        formIndex={idx}\n        validator={this.props.validator}\n        allowDelete={!props.isReservedRole}\n        indexPrivilege={indexPrivilege}\n        availableFields={this.state.availableFields[indexPrivilege.names.join(',')]}\n        onChange={this.onIndexPrivilegeChange(idx)}\n        onDelete={this.onIndexPrivilegeDelete(idx)}\n      />\n    ));\n\n    return forms;\n  }\n\n  public addIndexPrivilege = () => {\n    const { role } = this.props;\n\n    const newIndices = [\n      ...role.elasticsearch.indices,\n      {\n        names: [],\n        privileges: [],\n        field_security: {\n          grant: ['*'],\n        },\n      },\n    ];\n\n    this.props.onChange({\n      ...this.props.role,\n      elasticsearch: {\n        ...this.props.role.elasticsearch,\n        indices: newIndices,\n      },\n    });\n  };\n\n  public onIndexPrivilegeChange = (privilegeIndex: number) => {\n    return (updatedPrivilege: IndexPrivilege) => {\n      const { role } = this.props;\n      const { indices } = role.elasticsearch;\n\n      const newIndices = [...indices];\n      newIndices[privilegeIndex] = updatedPrivilege;\n\n      this.props.onChange({\n        ...this.props.role,\n        elasticsearch: {\n          ...this.props.role.elasticsearch,\n          indices: newIndices,\n        },\n      });\n\n      this.loadAvailableFields(newIndices);\n    };\n  };\n\n  public onIndexPrivilegeDelete = (privilegeIndex: number) => {\n    return () => {\n      const { role } = this.props;\n\n      const newIndices = [...role.elasticsearch.indices];\n      newIndices.splice(privilegeIndex, 1);\n\n      this.props.onChange({\n        ...this.props.role,\n        elasticsearch: {\n          ...this.props.role.elasticsearch,\n          indices: newIndices,\n        },\n      });\n    };\n  };\n\n  public isPlaceholderPrivilege = (indexPrivilege: IndexPrivilege) => {\n    return indexPrivilege.names.length === 0;\n  };\n\n  public loadAvailableFields(privileges: IndexPrivilege[]) {\n    // Reserved roles cannot be edited, and therefore do not need to fetch available fields.\n    if (isReservedRole(this.props.role)) {\n      return;\n    }\n\n    const patterns = privileges.map(index => index.names.join(','));\n\n    const cachedPatterns = Object.keys(this.state.availableFields);\n    const patternsToFetch = _.difference(patterns, cachedPatterns);\n\n    const fetchRequests = patternsToFetch.map(this.loadFieldsForPattern);\n\n    Promise.all(fetchRequests).then(response => {\n      this.setState({\n        availableFields: {\n          ...this.state.availableFields,\n          ...response.reduce((acc, o) => ({ ...acc, ...o }), {}),\n        },\n      });\n    });\n  }\n\n  public loadFieldsForPattern = async (pattern: string) => {\n    if (!pattern) {\n      return { [pattern]: [] };\n    }\n\n    try {\n      return {\n        [pattern]: await getFields(this.props.httpClient, pattern),\n      };\n    } catch (e) {\n      return {\n        [pattern]: [],\n      };\n    }\n  };\n}\n"]}]}