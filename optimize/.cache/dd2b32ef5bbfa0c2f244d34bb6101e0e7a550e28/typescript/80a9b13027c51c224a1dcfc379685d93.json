{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/uptime/public/components/queries/filter_bar/filter_bar_query.tsx","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/uptime/public/components/queries/filter_bar/filter_bar_query.tsx","mtime":1567631712329},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport { i18n } from '@kbn/i18n';\nimport React from 'react';\nimport { Query } from 'react-apollo';\nimport { FilterBar, FilterBarLoading } from '../../functional';\nimport { getFilterBarQuery } from './get_filter_bar';\nexport var FilterBarQuery = function (_a) {\n    var autorefreshInterval = _a.autorefreshInterval, autorefreshIsPaused = _a.autorefreshIsPaused, dateRangeStart = _a.dateRangeStart, dateRangeEnd = _a.dateRangeEnd, updateQuery = _a.updateQuery;\n    return (React.createElement(Query, { pollInterval: autorefreshIsPaused ? undefined : autorefreshInterval, query: getFilterBarQuery, variables: { dateRangeStart: dateRangeStart, dateRangeEnd: dateRangeEnd } }, function (_a) {\n        var loading = _a.loading, error = _a.error, data = _a.data;\n        if (loading) {\n            return React.createElement(FilterBarLoading, null);\n        }\n        if (error) {\n            return i18n.translate('xpack.uptime.filterBar.errorMessage', {\n                values: { message: error.message },\n                defaultMessage: 'Error {message}',\n            });\n        }\n        var filterBar = data.filterBar;\n        return React.createElement(FilterBar, { filterBar: filterBar, updateQuery: updateQuery });\n    }));\n};\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/uptime/public/components/queries/filter_bar/filter_bar_query.tsx","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/uptime/public/components/queries/filter_bar/filter_bar_query.tsx"],"names":[],"mappings":"AAAA;;;;GAIG;AAEH,OAAO,EAAE,IAAI,EAAE,MAAM,WAAW,CAAC;AACjC,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,KAAK,EAAE,MAAM,cAAc,CAAC;AAErC,OAAO,EAAE,SAAS,EAAE,gBAAgB,EAAE,MAAM,kBAAkB,CAAC;AAC/D,OAAO,EAAE,iBAAiB,EAAE,MAAM,kBAAkB,CAAC;AAQrD,MAAM,CAAC,IAAM,cAAc,GAAG,UAAC,EAMvB;QALN,4CAAmB,EACnB,4CAAmB,EACnB,kCAAc,EACd,8BAAY,EACZ,4BAAW;IACA,OAAA,CACX,oBAAC,KAAK,IACJ,YAAY,EAAE,mBAAmB,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,mBAAmB,EACnE,KAAK,EAAE,iBAAiB,EACxB,SAAS,EAAE,EAAE,cAAc,gBAAA,EAAE,YAAY,cAAA,EAAE,IAE1C,UAAC,EAAwB;YAAtB,oBAAO,EAAE,gBAAK,EAAE,cAAI;QACtB,IAAI,OAAO,EAAE;YACX,OAAO,oBAAC,gBAAgB,OAAG,CAAC;SAC7B;QACD,IAAI,KAAK,EAAE;YACT,OAAO,IAAI,CAAC,SAAS,CAAC,qCAAqC,EAAE;gBAC3D,MAAM,EAAE,EAAE,OAAO,EAAE,KAAK,CAAC,OAAO,EAAE;gBAClC,cAAc,EAAE,iBAAiB;aAClC,CAAC,CAAC;SACJ;QACO,IAAA,0BAAS,CAAU;QAC3B,OAAO,oBAAC,SAAS,IAAC,SAAS,EAAE,SAAS,EAAE,WAAW,EAAE,WAAW,GAAI,CAAC;IACvE,CAAC,CACK,CACT;AApBY,CAoBZ,CAAC","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport { i18n } from '@kbn/i18n';\nimport React from 'react';\nimport { Query } from 'react-apollo';\nimport { UptimeCommonProps } from '../../../uptime_app';\nimport { FilterBar, FilterBarLoading } from '../../functional';\nimport { getFilterBarQuery } from './get_filter_bar';\n\ninterface FilterBarProps {\n  updateQuery: (query: object | undefined) => void;\n}\n\ntype Props = FilterBarProps & UptimeCommonProps;\n\nexport const FilterBarQuery = ({\n  autorefreshInterval,\n  autorefreshIsPaused,\n  dateRangeStart,\n  dateRangeEnd,\n  updateQuery,\n}: Props) => (\n  <Query\n    pollInterval={autorefreshIsPaused ? undefined : autorefreshInterval}\n    query={getFilterBarQuery}\n    variables={{ dateRangeStart, dateRangeEnd }}\n  >\n    {({ loading, error, data }) => {\n      if (loading) {\n        return <FilterBarLoading />;\n      }\n      if (error) {\n        return i18n.translate('xpack.uptime.filterBar.errorMessage', {\n          values: { message: error.message },\n          defaultMessage: 'Error {message}',\n        });\n      }\n      const { filterBar } = data;\n      return <FilterBar filterBar={filterBar} updateQuery={updateQuery} />;\n    }}\n  </Query>\n);\n"]}]}