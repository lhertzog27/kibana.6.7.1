{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/pages/metrics/index.tsx","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/pages/metrics/index.tsx","mtime":1567631711986},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport * as tslib_1 from \"tslib\";\nvar _a;\nimport { EuiHideFor, EuiPage, EuiPageBody, EuiPageContent, EuiPageHeader, EuiPageHeaderSection, EuiTitle, } from '@elastic/eui';\nimport { injectI18n } from '@kbn/i18n/react';\nimport React from 'react';\nimport styled, { withTheme } from 'styled-components';\nimport { AutoSizer } from '../../components/auto_sizer';\nimport { InfrastructureBetaBadgeHeaderSection } from '../../components/beta_badge_header_section';\nimport { Header } from '../../components/header';\nimport { Metrics } from '../../components/metrics';\nimport { MetricsSideNav } from '../../components/metrics/side_nav';\nimport { MetricsTimeControls } from '../../components/metrics/time_controls';\nimport { ColumnarPage, PageContent } from '../../components/page';\nimport { WithMetadata } from '../../containers/metadata/with_metadata';\nimport { WithMetrics } from '../../containers/metrics/with_metrics';\nimport { WithMetricsTime, WithMetricsTimeUrlState, } from '../../containers/metrics/with_metrics_time';\nimport { WithSource } from '../../containers/with_source';\nimport { Error, ErrorPageBody } from '../error';\nimport { layoutCreators } from './layouts';\nvar DetailPageContent = styled(PageContent)(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([\"\\n  overflow: auto;\\n  background-color: \", \";\\n\"], [\"\\n  overflow: auto;\\n  background-color: \", \";\\n\"])), function (props) { return props.theme.eui.euiColorLightestShade; });\nvar EuiPageContentWithRelative = styled(EuiPageContent)(templateObject_2 || (templateObject_2 = tslib_1.__makeTemplateObject([\"\\n  position: relative;\\n\"], [\"\\n  position: relative;\\n\"])));\nexport var MetricDetail = withTheme(injectI18n((_a = /** @class */ (function (_super) {\n        tslib_1.__extends(class_1, _super);\n        function class_1() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this.handleClick = function (section) { return function () {\n                var id = section.linkToId || section.id;\n                var el = document.getElementById(id);\n                if (el) {\n                    el.scrollIntoView();\n                }\n            }; };\n            return _this;\n        }\n        class_1.prototype.render = function () {\n            var _this = this;\n            var intl = this.props.intl;\n            var nodeId = this.props.match.params.node;\n            var nodeType = this.props.match.params.type;\n            var layoutCreator = layoutCreators[nodeType];\n            if (!layoutCreator) {\n                return (React.createElement(Error, { message: intl.formatMessage({\n                        id: 'xpack.infra.metricDetailPage.invalidNodeTypeErrorMessage',\n                        defaultMessage: '{nodeType} is not a valid node type',\n                    }, {\n                        nodeType: \"\\\"\" + nodeType + \"\\\"\",\n                    }) }));\n            }\n            var layouts = layoutCreator(this.props.theme);\n            return (React.createElement(WithSource, null, function (_a) {\n                var sourceId = _a.sourceId;\n                return (React.createElement(WithMetricsTime, { resetOnUnmount: true }, function (_a) {\n                    var currentTimeRange = _a.currentTimeRange, isAutoReloading = _a.isAutoReloading, setRangeTime = _a.setRangeTime, startMetricsAutoReload = _a.startMetricsAutoReload, stopMetricsAutoReload = _a.stopMetricsAutoReload;\n                    return (React.createElement(WithMetadata, { layouts: layouts, sourceId: sourceId, nodeType: nodeType, nodeId: nodeId }, function (_a) {\n                        var name = _a.name, filteredLayouts = _a.filteredLayouts, metadataLoading = _a.loading;\n                        var breadcrumbs = [\n                            {\n                                href: '#/',\n                                text: intl.formatMessage({\n                                    id: 'xpack.infra.header.infrastructureTitle',\n                                    defaultMessage: 'Infrastructure',\n                                }),\n                            },\n                            { text: name },\n                        ];\n                        return (React.createElement(ColumnarPage, null,\n                            React.createElement(Header, { appendSections: React.createElement(InfrastructureBetaBadgeHeaderSection, null), breadcrumbs: breadcrumbs }),\n                            React.createElement(WithMetricsTimeUrlState, null),\n                            React.createElement(DetailPageContent, null,\n                                React.createElement(WithMetrics, { layouts: filteredLayouts, sourceId: sourceId, timerange: currentTimeRange, nodeType: nodeType, nodeId: nodeId }, function (_a) {\n                                    var metrics = _a.metrics, error = _a.error, loading = _a.loading, refetch = _a.refetch;\n                                    if (error) {\n                                        return React.createElement(ErrorPageBody, { message: error });\n                                    }\n                                    return (React.createElement(EuiPage, { style: { flex: '1 0 auto' } },\n                                        React.createElement(MetricsSideNav, { layouts: filteredLayouts, loading: metadataLoading, nodeName: name, handleClick: _this.handleClick }),\n                                        React.createElement(AutoSizer, { content: false, bounds: true, detectAnyWindowResize: true }, function (_a) {\n                                            var measureRef = _a.measureRef, _b = _a.bounds.width, width = _b === void 0 ? 0 : _b;\n                                            return (React.createElement(MetricsDetailsPageColumn, { innerRef: measureRef },\n                                                React.createElement(EuiPageBody, { style: { width: width + \"px\" } },\n                                                    React.createElement(EuiPageHeader, { style: { flex: '0 0 auto' } },\n                                                        React.createElement(EuiPageHeaderSection, { style: { width: '100%' } },\n                                                            React.createElement(MetricsTitleTimeRangeContainer, null,\n                                                                React.createElement(EuiHideFor, { sizes: ['xs', 's'] },\n                                                                    React.createElement(EuiTitle, { size: \"m\" },\n                                                                        React.createElement(\"h1\", null, name))),\n                                                                React.createElement(MetricsTimeControls, { currentTimeRange: currentTimeRange, isLiveStreaming: isAutoReloading, onChangeRangeTime: setRangeTime, startLiveStreaming: startMetricsAutoReload, stopLiveStreaming: stopMetricsAutoReload })))),\n                                                    React.createElement(EuiPageContentWithRelative, null,\n                                                        React.createElement(Metrics, { label: name, nodeId: nodeId, layouts: filteredLayouts, metrics: metrics, loading: metrics.length > 0 && isAutoReloading\n                                                                ? false\n                                                                : loading, refetch: refetch, onChangeRangeTime: setRangeTime, isLiveStreaming: isAutoReloading, stopLiveStreaming: stopMetricsAutoReload })))));\n                                        })));\n                                }))));\n                    }));\n                }));\n            }));\n        };\n        return class_1;\n    }(React.PureComponent)),\n    _a.displayName = 'MetricDetailPage',\n    _a)));\nvar MetricsDetailsPageColumn = styled.div(templateObject_3 || (templateObject_3 = tslib_1.__makeTemplateObject([\"\\n  flex: 1 0 0%;\\n  display: flex;\\n  flex-direction: column;\\n\"], [\"\\n  flex: 1 0 0%;\\n  display: flex;\\n  flex-direction: column;\\n\"])));\nvar MetricsTitleTimeRangeContainer = styled.div(templateObject_4 || (templateObject_4 = tslib_1.__makeTemplateObject([\"\\n  display: flex;\\n  flex-flow: row wrap;\\n  justify-content: space-between;\\n\"], [\"\\n  display: flex;\\n  flex-flow: row wrap;\\n  justify-content: space-between;\\n\"])));\nvar templateObject_1, templateObject_2, templateObject_3, templateObject_4;\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/pages/metrics/index.tsx","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/pages/metrics/index.tsx"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport {\n  EuiHideFor,\n  EuiPage,\n  EuiPageBody,\n  EuiPageContent,\n  EuiPageHeader,\n  EuiPageHeaderSection,\n  EuiTitle,\n} from '@elastic/eui';\nimport { InjectedIntl, injectI18n } from '@kbn/i18n/react';\nimport React from 'react';\nimport styled, { withTheme } from 'styled-components';\n\nimport { AutoSizer } from '../../components/auto_sizer';\nimport { InfrastructureBetaBadgeHeaderSection } from '../../components/beta_badge_header_section';\nimport { Header } from '../../components/header';\nimport { Metrics } from '../../components/metrics';\nimport { MetricsSideNav } from '../../components/metrics/side_nav';\nimport { MetricsTimeControls } from '../../components/metrics/time_controls';\nimport { ColumnarPage, PageContent } from '../../components/page';\nimport { WithMetadata } from '../../containers/metadata/with_metadata';\nimport { WithMetrics } from '../../containers/metrics/with_metrics';\nimport {\n  WithMetricsTime,\n  WithMetricsTimeUrlState,\n} from '../../containers/metrics/with_metrics_time';\nimport { WithSource } from '../../containers/with_source';\nimport { InfraNodeType, InfraTimerangeInput } from '../../graphql/types';\nimport { Error, ErrorPageBody } from '../error';\nimport { layoutCreators } from './layouts';\nimport { InfraMetricLayoutSection } from './layouts/types';\n\nconst DetailPageContent = styled(PageContent)`\n  overflow: auto;\n  background-color: ${props => props.theme.eui.euiColorLightestShade};\n`;\n\nconst EuiPageContentWithRelative = styled(EuiPageContent)`\n  position: relative;\n`;\n\ninterface Props {\n  theme: { eui: any };\n  match: {\n    params: {\n      type: string;\n      node: string;\n    };\n  };\n  intl: InjectedIntl;\n}\n\nexport const MetricDetail = withTheme(\n  injectI18n(\n    class extends React.PureComponent<Props> {\n      public static displayName = 'MetricDetailPage';\n\n      public render() {\n        const { intl } = this.props;\n        const nodeId = this.props.match.params.node;\n        const nodeType = this.props.match.params.type as InfraNodeType;\n        const layoutCreator = layoutCreators[nodeType];\n        if (!layoutCreator) {\n          return (\n            <Error\n              message={intl.formatMessage(\n                {\n                  id: 'xpack.infra.metricDetailPage.invalidNodeTypeErrorMessage',\n                  defaultMessage: '{nodeType} is not a valid node type',\n                },\n                {\n                  nodeType: `\"${nodeType}\"`,\n                }\n              )}\n            />\n          );\n        }\n        const layouts = layoutCreator(this.props.theme);\n\n        return (\n          <WithSource>\n            {({ sourceId }) => (\n              <WithMetricsTime resetOnUnmount>\n                {({\n                  currentTimeRange,\n                  isAutoReloading,\n                  setRangeTime,\n                  startMetricsAutoReload,\n                  stopMetricsAutoReload,\n                }) => (\n                  <WithMetadata\n                    layouts={layouts}\n                    sourceId={sourceId}\n                    nodeType={nodeType}\n                    nodeId={nodeId}\n                  >\n                    {({ name, filteredLayouts, loading: metadataLoading }) => {\n                      const breadcrumbs = [\n                        {\n                          href: '#/',\n                          text: intl.formatMessage({\n                            id: 'xpack.infra.header.infrastructureTitle',\n                            defaultMessage: 'Infrastructure',\n                          }),\n                        },\n                        { text: name },\n                      ];\n                      return (\n                        <ColumnarPage>\n                          <Header\n                            appendSections={<InfrastructureBetaBadgeHeaderSection />}\n                            breadcrumbs={breadcrumbs}\n                          />\n                          <WithMetricsTimeUrlState />\n                          <DetailPageContent>\n                            <WithMetrics\n                              layouts={filteredLayouts}\n                              sourceId={sourceId}\n                              timerange={currentTimeRange as InfraTimerangeInput}\n                              nodeType={nodeType}\n                              nodeId={nodeId}\n                            >\n                              {({ metrics, error, loading, refetch }) => {\n                                if (error) {\n                                  return <ErrorPageBody message={error} />;\n                                }\n                                return (\n                                  <EuiPage style={{ flex: '1 0 auto' }}>\n                                    <MetricsSideNav\n                                      layouts={filteredLayouts}\n                                      loading={metadataLoading}\n                                      nodeName={name}\n                                      handleClick={this.handleClick}\n                                    />\n                                    <AutoSizer content={false} bounds detectAnyWindowResize>\n                                      {({ measureRef, bounds: { width = 0 } }) => {\n                                        return (\n                                          <MetricsDetailsPageColumn innerRef={measureRef}>\n                                            <EuiPageBody style={{ width: `${width}px` }}>\n                                              <EuiPageHeader style={{ flex: '0 0 auto' }}>\n                                                <EuiPageHeaderSection style={{ width: '100%' }}>\n                                                  <MetricsTitleTimeRangeContainer>\n                                                    <EuiHideFor sizes={['xs', 's']}>\n                                                      <EuiTitle size=\"m\">\n                                                        <h1>{name}</h1>\n                                                      </EuiTitle>\n                                                    </EuiHideFor>\n                                                    <MetricsTimeControls\n                                                      currentTimeRange={currentTimeRange}\n                                                      isLiveStreaming={isAutoReloading}\n                                                      onChangeRangeTime={setRangeTime}\n                                                      startLiveStreaming={startMetricsAutoReload}\n                                                      stopLiveStreaming={stopMetricsAutoReload}\n                                                    />\n                                                  </MetricsTitleTimeRangeContainer>\n                                                </EuiPageHeaderSection>\n                                              </EuiPageHeader>\n\n                                              <EuiPageContentWithRelative>\n                                                <Metrics\n                                                  label={name}\n                                                  nodeId={nodeId}\n                                                  layouts={filteredLayouts}\n                                                  metrics={metrics}\n                                                  loading={\n                                                    metrics.length > 0 && isAutoReloading\n                                                      ? false\n                                                      : loading\n                                                  }\n                                                  refetch={refetch}\n                                                  onChangeRangeTime={setRangeTime}\n                                                  isLiveStreaming={isAutoReloading}\n                                                  stopLiveStreaming={stopMetricsAutoReload}\n                                                />\n                                              </EuiPageContentWithRelative>\n                                            </EuiPageBody>\n                                          </MetricsDetailsPageColumn>\n                                        );\n                                      }}\n                                    </AutoSizer>\n                                  </EuiPage>\n                                );\n                              }}\n                            </WithMetrics>\n                          </DetailPageContent>\n                        </ColumnarPage>\n                      );\n                    }}\n                  </WithMetadata>\n                )}\n              </WithMetricsTime>\n            )}\n          </WithSource>\n        );\n      }\n\n      private handleClick = (section: InfraMetricLayoutSection) => () => {\n        const id = section.linkToId || section.id;\n        const el = document.getElementById(id);\n        if (el) {\n          el.scrollIntoView();\n        }\n      };\n    }\n  )\n);\n\nconst MetricsDetailsPageColumn = styled.div`\n  flex: 1 0 0%;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst MetricsTitleTimeRangeContainer = styled.div`\n  display: flex;\n  flex-flow: row wrap;\n  justify-content: space-between;\n`;\n"]}]}