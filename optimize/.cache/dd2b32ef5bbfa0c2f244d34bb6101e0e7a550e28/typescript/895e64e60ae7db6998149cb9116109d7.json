{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/security/public/views/management/edit_role/components/privileges/es/index_privilege_form.tsx","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/security/public/views/management/edit_role/components/privileges/es/index_privilege_form.tsx","mtime":1567631712300},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["import * as tslib_1 from \"tslib\";\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport { EuiButtonIcon, EuiComboBox, EuiFlexGroup, EuiFlexItem, EuiFormRow, EuiHorizontalRule, EuiSpacer, EuiSwitch, EuiTextArea, } from '@elastic/eui';\nimport { i18n } from '@kbn/i18n';\nimport { FormattedMessage } from '@kbn/i18n/react';\nimport React, { Component, Fragment } from 'react';\n// @ts-ignore\nimport { getIndexPrivileges } from '../../../../../../services/role_privileges';\nvar fromOption = function (option) { return option.label; };\nvar toOption = function (value) { return ({ label: value, isGroupLabelOption: false }); };\nvar IndexPrivilegeForm = /** @class */ (function (_super) {\n    tslib_1.__extends(IndexPrivilegeForm, _super);\n    function IndexPrivilegeForm(props) {\n        var _this = _super.call(this, props) || this;\n        _this.getPrivilegeForm = function () {\n            return (React.createElement(Fragment, null,\n                React.createElement(EuiFlexGroup, null,\n                    React.createElement(EuiFlexItem, null,\n                        React.createElement(EuiFormRow, tslib_1.__assign({ label: React.createElement(FormattedMessage, { id: \"xpack.security.management.editRoles.indexPrivilegeForm.indicesFormRowLabel\", defaultMessage: \"Indices\" }), fullWidth: true }, _this.props.validator.validateIndexPrivilege(_this.props.indexPrivilege)),\n                            React.createElement(EuiComboBox, { \"data-test-subj\": \"indicesInput\" + _this.props.formIndex, options: _this.props.indexPatterns.map(toOption), selectedOptions: _this.props.indexPrivilege.names.map(toOption), onCreateOption: _this.onCreateIndexPatternOption, onChange: _this.onIndexPatternsChange, isDisabled: _this.props.isReservedRole }))),\n                    React.createElement(EuiFlexItem, null,\n                        React.createElement(EuiFormRow, { label: React.createElement(FormattedMessage, { id: \"xpack.security.management.editRoles.indexPrivilegeForm.privilegesFormRowLabel\", defaultMessage: \"Privileges\" }), fullWidth: true },\n                            React.createElement(EuiComboBox, { \"data-test-subj\": \"privilegesInput\" + _this.props.formIndex, options: getIndexPrivileges().map(toOption), selectedOptions: _this.props.indexPrivilege.privileges.map(toOption), onChange: _this.onPrivilegeChange, isDisabled: _this.props.isReservedRole }))),\n                    _this.getGrantedFieldsControl()),\n                React.createElement(EuiSpacer, null),\n                _this.getGrantedDocumentsControl()));\n        };\n        _this.getGrantedFieldsControl = function () {\n            var _a = _this.props, allowFieldLevelSecurity = _a.allowFieldLevelSecurity, availableFields = _a.availableFields, indexPrivilege = _a.indexPrivilege, isReservedRole = _a.isReservedRole;\n            if (!allowFieldLevelSecurity) {\n                return null;\n            }\n            var _b = (indexPrivilege.field_security || {}).grant, grant = _b === void 0 ? [] : _b;\n            if (allowFieldLevelSecurity) {\n                return (React.createElement(EuiFlexItem, null,\n                    React.createElement(EuiFormRow, { label: React.createElement(FormattedMessage, { id: \"xpack.security.management.editRoles.indexPrivilegeForm.grantedFieldsFormRowLabel\", defaultMessage: \"Granted fields (optional)\" }), fullWidth: true, className: \"indexPrivilegeForm__grantedFieldsRow\", helpText: !isReservedRole && grant.length === 0 ? (React.createElement(FormattedMessage, { id: \"xpack.security.management.editRoles.indexPrivilegeForm.grantedFieldsFormRowHelpText\", defaultMessage: \"If no fields are granted, then users assigned to this role will not be able to see any data for this index.\" })) : (undefined) },\n                        React.createElement(Fragment, null,\n                            React.createElement(EuiComboBox, { \"data-test-subj\": \"fieldInput\" + _this.props.formIndex, options: availableFields ? availableFields.map(toOption) : [], selectedOptions: grant.map(toOption), onCreateOption: _this.onCreateGrantedField, onChange: _this.onGrantedFieldsChange, isDisabled: _this.props.isReservedRole })))));\n            }\n            return null;\n        };\n        _this.getGrantedDocumentsControl = function () {\n            var _a = _this.props, allowDocumentLevelSecurity = _a.allowDocumentLevelSecurity, indexPrivilege = _a.indexPrivilege;\n            if (!allowDocumentLevelSecurity) {\n                return null;\n            }\n            return (\n            // @ts-ignore\n            React.createElement(EuiFlexGroup, { direction: \"column\" },\n                !_this.props.isReservedRole && (React.createElement(EuiFlexItem, null,\n                    React.createElement(EuiSwitch, { \"data-test-subj\": \"restrictDocumentsQuery\" + _this.props.formIndex, label: React.createElement(FormattedMessage, { id: \"xpack.security.management.editRoles.indexPrivilegeForm.grantReadPrivilegesLabel\", defaultMessage: \"Grant read privileges to specific documents\" }), \n                        // @ts-ignore\n                        compressed: true, checked: _this.state.queryExpanded, onChange: _this.toggleDocumentQuery }))),\n                _this.state.queryExpanded && (React.createElement(EuiFlexItem, null,\n                    React.createElement(EuiFormRow, { label: React.createElement(FormattedMessage, { id: \"xpack.security.management.editRoles.indexPrivilegeForm.grantedDocumentsQueryFormRowLabel\", defaultMessage: \"Granted documents query\" }), fullWidth: true },\n                        React.createElement(EuiTextArea, { \"data-test-subj\": \"queryInput\" + _this.props.formIndex, style: { resize: 'none' }, fullWidth: true, value: indexPrivilege.query, onChange: _this.onQueryChange, readOnly: _this.props.isReservedRole }))))));\n        };\n        _this.toggleDocumentQuery = function () {\n            var willToggleOff = _this.state.queryExpanded;\n            var willToggleOn = !willToggleOff;\n            // If turning off, then save the current query in state so that we can restore it if the user changes their mind.\n            _this.setState({\n                queryExpanded: !_this.state.queryExpanded,\n                documentQuery: willToggleOff ? _this.props.indexPrivilege.query : _this.state.documentQuery,\n            });\n            // If turning off, then remove the query from the Index Privilege\n            if (willToggleOff) {\n                _this.props.onChange(tslib_1.__assign({}, _this.props.indexPrivilege, { query: '' }));\n            }\n            // If turning on, then restore the saved query if available\n            if (willToggleOn && !_this.props.indexPrivilege.query && _this.state.documentQuery) {\n                _this.props.onChange(tslib_1.__assign({}, _this.props.indexPrivilege, { query: _this.state.documentQuery }));\n            }\n        };\n        _this.onCreateIndexPatternOption = function (option) {\n            var newIndexPatterns = _this.props.indexPrivilege.names.concat([option]);\n            _this.props.onChange(tslib_1.__assign({}, _this.props.indexPrivilege, { names: newIndexPatterns }));\n        };\n        _this.onIndexPatternsChange = function (newPatterns) {\n            _this.props.onChange(tslib_1.__assign({}, _this.props.indexPrivilege, { names: newPatterns.map(fromOption) }));\n        };\n        _this.onPrivilegeChange = function (newPrivileges) {\n            _this.props.onChange(tslib_1.__assign({}, _this.props.indexPrivilege, { privileges: newPrivileges.map(fromOption) }));\n        };\n        _this.onQueryChange = function (e) {\n            _this.props.onChange(tslib_1.__assign({}, _this.props.indexPrivilege, { query: e.target.value }));\n        };\n        _this.onCreateGrantedField = function (grant) {\n            if (!_this.props.indexPrivilege.field_security ||\n                !_this.props.indexPrivilege.field_security.grant) {\n                return;\n            }\n            var newGrants = _this.props.indexPrivilege.field_security.grant.concat([grant]);\n            _this.props.onChange(tslib_1.__assign({}, _this.props.indexPrivilege, { field_security: tslib_1.__assign({}, _this.props.indexPrivilege.field_security, { grant: newGrants }) }));\n        };\n        _this.onGrantedFieldsChange = function (grantedFields) {\n            _this.props.onChange(tslib_1.__assign({}, _this.props.indexPrivilege, { field_security: tslib_1.__assign({}, _this.props.indexPrivilege.field_security, { grant: grantedFields.map(fromOption) }) }));\n        };\n        _this.state = {\n            queryExpanded: !!props.indexPrivilege.query,\n            documentQuery: props.indexPrivilege.query,\n        };\n        return _this;\n    }\n    IndexPrivilegeForm.prototype.render = function () {\n        return (React.createElement(Fragment, null,\n            React.createElement(EuiHorizontalRule, null),\n            React.createElement(EuiFlexGroup, { className: \"index-privilege-form\" },\n                React.createElement(EuiFlexItem, null, this.getPrivilegeForm()),\n                this.props.allowDelete && (React.createElement(EuiFlexItem, { grow: false },\n                    React.createElement(EuiFormRow, { hasEmptyLabelSpace: true },\n                        React.createElement(EuiButtonIcon, { \"aria-label\": i18n.translate('xpack.security.management.editRoles.indexPrivilegeForm.deleteSpacePrivilegeAriaLabel', { defaultMessage: 'Delete index privilege' }), color: 'danger', onClick: this.props.onDelete, iconType: 'trash' })))))));\n    };\n    return IndexPrivilegeForm;\n}(Component));\nexport { IndexPrivilegeForm };\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/security/public/views/management/edit_role/components/privileges/es/index_privilege_form.tsx","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/security/public/views/management/edit_role/components/privileges/es/index_privilege_form.tsx"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport {\n  EuiButtonIcon,\n  EuiComboBox,\n  EuiComboBoxOptionProps,\n  EuiFlexGroup,\n  EuiFlexItem,\n  EuiFormRow,\n  EuiHorizontalRule,\n  EuiSpacer,\n  EuiSwitch,\n  EuiTextArea,\n} from '@elastic/eui';\nimport { i18n } from '@kbn/i18n';\nimport { FormattedMessage } from '@kbn/i18n/react';\nimport React, { ChangeEvent, Component, Fragment } from 'react';\nimport { IndexPrivilege } from '../../../../../../../common/model/index_privilege';\n// @ts-ignore\nimport { getIndexPrivileges } from '../../../../../../services/role_privileges';\nimport { RoleValidator } from '../../../lib/validate_role';\n\nconst fromOption = (option: any) => option.label;\nconst toOption = (value: string) => ({ label: value, isGroupLabelOption: false });\n\ninterface Props {\n  formIndex: number;\n  indexPrivilege: IndexPrivilege;\n  indexPatterns: string[];\n  availableFields: string[];\n  onChange: (indexPrivilege: IndexPrivilege) => void;\n  onDelete: () => void;\n  isReservedRole: boolean;\n  allowDelete: boolean;\n  allowDocumentLevelSecurity: boolean;\n  allowFieldLevelSecurity: boolean;\n  validator: RoleValidator;\n}\n\ninterface State {\n  queryExpanded: boolean;\n  documentQuery?: string;\n}\n\nexport class IndexPrivilegeForm extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      queryExpanded: !!props.indexPrivilege.query,\n      documentQuery: props.indexPrivilege.query,\n    };\n  }\n\n  public render() {\n    return (\n      <Fragment>\n        <EuiHorizontalRule />\n        <EuiFlexGroup className=\"index-privilege-form\">\n          <EuiFlexItem>{this.getPrivilegeForm()}</EuiFlexItem>\n          {this.props.allowDelete && (\n            <EuiFlexItem grow={false}>\n              <EuiFormRow hasEmptyLabelSpace>\n                <EuiButtonIcon\n                  aria-label={i18n.translate(\n                    'xpack.security.management.editRoles.indexPrivilegeForm.deleteSpacePrivilegeAriaLabel',\n                    { defaultMessage: 'Delete index privilege' }\n                  )}\n                  color={'danger'}\n                  onClick={this.props.onDelete}\n                  iconType={'trash'}\n                />\n              </EuiFormRow>\n            </EuiFlexItem>\n          )}\n        </EuiFlexGroup>\n      </Fragment>\n    );\n  }\n\n  public getPrivilegeForm = () => {\n    return (\n      <Fragment>\n        <EuiFlexGroup>\n          <EuiFlexItem>\n            <EuiFormRow\n              label={\n                <FormattedMessage\n                  id=\"xpack.security.management.editRoles.indexPrivilegeForm.indicesFormRowLabel\"\n                  defaultMessage=\"Indices\"\n                />\n              }\n              fullWidth={true}\n              {...this.props.validator.validateIndexPrivilege(this.props.indexPrivilege)}\n            >\n              <EuiComboBox\n                data-test-subj={`indicesInput${this.props.formIndex}`}\n                options={this.props.indexPatterns.map(toOption)}\n                selectedOptions={this.props.indexPrivilege.names.map(toOption)}\n                onCreateOption={this.onCreateIndexPatternOption}\n                onChange={this.onIndexPatternsChange}\n                isDisabled={this.props.isReservedRole}\n              />\n            </EuiFormRow>\n          </EuiFlexItem>\n          <EuiFlexItem>\n            <EuiFormRow\n              label={\n                <FormattedMessage\n                  id=\"xpack.security.management.editRoles.indexPrivilegeForm.privilegesFormRowLabel\"\n                  defaultMessage=\"Privileges\"\n                />\n              }\n              fullWidth={true}\n            >\n              <EuiComboBox\n                data-test-subj={`privilegesInput${this.props.formIndex}`}\n                options={getIndexPrivileges().map(toOption)}\n                selectedOptions={this.props.indexPrivilege.privileges.map(toOption)}\n                onChange={this.onPrivilegeChange}\n                isDisabled={this.props.isReservedRole}\n              />\n            </EuiFormRow>\n          </EuiFlexItem>\n          {this.getGrantedFieldsControl()}\n        </EuiFlexGroup>\n\n        <EuiSpacer />\n\n        {this.getGrantedDocumentsControl()}\n      </Fragment>\n    );\n  };\n\n  public getGrantedFieldsControl = () => {\n    const { allowFieldLevelSecurity, availableFields, indexPrivilege, isReservedRole } = this.props;\n\n    if (!allowFieldLevelSecurity) {\n      return null;\n    }\n\n    const { grant = [] } = indexPrivilege.field_security || {};\n\n    if (allowFieldLevelSecurity) {\n      return (\n        <EuiFlexItem>\n          <EuiFormRow\n            label={\n              <FormattedMessage\n                id=\"xpack.security.management.editRoles.indexPrivilegeForm.grantedFieldsFormRowLabel\"\n                defaultMessage=\"Granted fields (optional)\"\n              />\n            }\n            fullWidth={true}\n            className=\"indexPrivilegeForm__grantedFieldsRow\"\n            helpText={\n              !isReservedRole && grant.length === 0 ? (\n                <FormattedMessage\n                  id=\"xpack.security.management.editRoles.indexPrivilegeForm.grantedFieldsFormRowHelpText\"\n                  defaultMessage=\"If no fields are granted, then users assigned to this role will not be able to see any data for this index.\"\n                />\n              ) : (\n                undefined\n              )\n            }\n          >\n            <Fragment>\n              <EuiComboBox\n                data-test-subj={`fieldInput${this.props.formIndex}`}\n                options={availableFields ? availableFields.map(toOption) : []}\n                selectedOptions={grant.map(toOption)}\n                onCreateOption={this.onCreateGrantedField}\n                onChange={this.onGrantedFieldsChange}\n                isDisabled={this.props.isReservedRole}\n              />\n            </Fragment>\n          </EuiFormRow>\n        </EuiFlexItem>\n      );\n    }\n\n    return null;\n  };\n\n  public getGrantedDocumentsControl = () => {\n    const { allowDocumentLevelSecurity, indexPrivilege } = this.props;\n\n    if (!allowDocumentLevelSecurity) {\n      return null;\n    }\n\n    return (\n      // @ts-ignore\n      <EuiFlexGroup direction=\"column\">\n        {!this.props.isReservedRole && (\n          <EuiFlexItem>\n            <EuiSwitch\n              data-test-subj={`restrictDocumentsQuery${this.props.formIndex}`}\n              label={\n                <FormattedMessage\n                  id=\"xpack.security.management.editRoles.indexPrivilegeForm.grantReadPrivilegesLabel\"\n                  defaultMessage=\"Grant read privileges to specific documents\"\n                />\n              }\n              // @ts-ignore\n              compressed={true}\n              checked={this.state.queryExpanded}\n              onChange={this.toggleDocumentQuery}\n            />\n          </EuiFlexItem>\n        )}\n        {this.state.queryExpanded && (\n          <EuiFlexItem>\n            <EuiFormRow\n              label={\n                <FormattedMessage\n                  id=\"xpack.security.management.editRoles.indexPrivilegeForm.grantedDocumentsQueryFormRowLabel\"\n                  defaultMessage=\"Granted documents query\"\n                />\n              }\n              fullWidth={true}\n            >\n              <EuiTextArea\n                data-test-subj={`queryInput${this.props.formIndex}`}\n                style={{ resize: 'none' }}\n                fullWidth={true}\n                value={indexPrivilege.query}\n                onChange={this.onQueryChange}\n                readOnly={this.props.isReservedRole}\n              />\n            </EuiFormRow>\n          </EuiFlexItem>\n        )}\n      </EuiFlexGroup>\n    );\n  };\n\n  public toggleDocumentQuery = () => {\n    const willToggleOff = this.state.queryExpanded;\n    const willToggleOn = !willToggleOff;\n\n    // If turning off, then save the current query in state so that we can restore it if the user changes their mind.\n    this.setState({\n      queryExpanded: !this.state.queryExpanded,\n      documentQuery: willToggleOff ? this.props.indexPrivilege.query : this.state.documentQuery,\n    });\n\n    // If turning off, then remove the query from the Index Privilege\n    if (willToggleOff) {\n      this.props.onChange({\n        ...this.props.indexPrivilege,\n        query: '',\n      });\n    }\n\n    // If turning on, then restore the saved query if available\n    if (willToggleOn && !this.props.indexPrivilege.query && this.state.documentQuery) {\n      this.props.onChange({\n        ...this.props.indexPrivilege,\n        query: this.state.documentQuery,\n      });\n    }\n  };\n\n  public onCreateIndexPatternOption = (option: any) => {\n    const newIndexPatterns = this.props.indexPrivilege.names.concat([option]);\n\n    this.props.onChange({\n      ...this.props.indexPrivilege,\n      names: newIndexPatterns,\n    });\n  };\n\n  public onIndexPatternsChange = (newPatterns: EuiComboBoxOptionProps[]) => {\n    this.props.onChange({\n      ...this.props.indexPrivilege,\n      names: newPatterns.map(fromOption),\n    });\n  };\n\n  public onPrivilegeChange = (newPrivileges: EuiComboBoxOptionProps[]) => {\n    this.props.onChange({\n      ...this.props.indexPrivilege,\n      privileges: newPrivileges.map(fromOption),\n    });\n  };\n\n  public onQueryChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\n    this.props.onChange({\n      ...this.props.indexPrivilege,\n      query: e.target.value,\n    });\n  };\n\n  public onCreateGrantedField = (grant: string) => {\n    if (\n      !this.props.indexPrivilege.field_security ||\n      !this.props.indexPrivilege.field_security.grant\n    ) {\n      return;\n    }\n\n    const newGrants = this.props.indexPrivilege.field_security.grant.concat([grant]);\n\n    this.props.onChange({\n      ...this.props.indexPrivilege,\n      field_security: {\n        ...this.props.indexPrivilege.field_security,\n        grant: newGrants,\n      },\n    });\n  };\n\n  public onGrantedFieldsChange = (grantedFields: EuiComboBoxOptionProps[]) => {\n    this.props.onChange({\n      ...this.props.indexPrivilege,\n      field_security: {\n        ...this.props.indexPrivilege.field_security,\n        grant: grantedFields.map(fromOption),\n      },\n    });\n  };\n}\n"]}]}