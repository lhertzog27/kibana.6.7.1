{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/src/core/public/fatal_errors/fatal_errors_service.tsx","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/core/public/fatal_errors/fatal_errors_service.tsx","mtime":1567631711497},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { render } from 'react-dom';\nimport * as Rx from 'rxjs';\nimport { first, tap } from 'rxjs/operators';\nimport { FatalErrorsScreen } from './fatal_errors_screen';\nimport { getErrorInfo } from './get_error_info';\nvar FatalErrorsService = /** @class */ (function () {\n    function FatalErrorsService(params) {\n        var _this = this;\n        this.params = params;\n        this.errorInfo$ = new Rx.ReplaySubject();\n        this.add = function (error, source) {\n            var errorInfo = getErrorInfo(error, source);\n            _this.errorInfo$.next(errorInfo);\n            if (error instanceof Error) {\n                // make stack traces clickable by putting whole error in the console\n                // tslint:disable-next-line no-console\n                console.error(error);\n            }\n            throw error;\n        };\n        this.errorInfo$\n            .pipe(first(), tap(function () { return _this.onFirstError(); }))\n            .subscribe({\n            error: function (error) {\n                // tslint:disable-next-line no-console\n                console.error('Uncaught error in fatal error screen internals', error);\n            },\n        });\n    }\n    FatalErrorsService.prototype.start = function (_a) {\n        var _this = this;\n        var i18n = _a.i18n;\n        this.i18n = i18n;\n        return {\n            add: this.add,\n            get$: function () {\n                return _this.errorInfo$.asObservable();\n            },\n        };\n    };\n    FatalErrorsService.prototype.onFirstError = function () {\n        // stop the core systems so that things like the legacy platform are stopped\n        // and angular/react components are unmounted;\n        this.params.stopCoreSystem();\n        // delete all content in the rootDomElement\n        this.params.rootDomElement.textContent = '';\n        // create and mount a container for the <FatalErrorScreen>\n        var container = document.createElement('div');\n        this.params.rootDomElement.appendChild(container);\n        // If error occurred before I18nService has been started we don't have any\n        // i18n context to provide.\n        var I18nContext = this.i18n ? this.i18n.Context : React.Fragment;\n        render(React.createElement(I18nContext, null,\n            React.createElement(FatalErrorsScreen, { buildNumber: this.params.injectedMetadata.getKibanaBuildNumber(), kibanaVersion: this.params.injectedMetadata.getKibanaVersion(), \"errorInfo$\": this.errorInfo$ })), container);\n    };\n    return FatalErrorsService;\n}());\nexport { FatalErrorsService };\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/src/core/public/fatal_errors/fatal_errors_service.tsx","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/src/core/public/fatal_errors/fatal_errors_service.tsx"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;GAiBG;AAEH,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,MAAM,EAAE,MAAM,WAAW,CAAC;AACnC,OAAO,KAAK,EAAE,MAAM,MAAM,CAAC;AAC3B,OAAO,EAAE,KAAK,EAAE,GAAG,EAAE,MAAM,gBAAgB,CAAC;AAI5C,OAAO,EAAE,iBAAiB,EAAE,MAAM,uBAAuB,CAAC;AAC1D,OAAO,EAAa,YAAY,EAAE,MAAM,kBAAkB,CAAC;AAY3D;IAIE,4BAAoB,MAAyB;QAA7C,iBAYC;QAZmB,WAAM,GAAN,MAAM,CAAmB;QAH5B,eAAU,GAAG,IAAI,EAAE,CAAC,aAAa,EAAa,CAAC;QAiBzD,QAAG,GAAG,UAAC,KAAqB,EAAE,MAAe;YAClD,IAAM,SAAS,GAAG,YAAY,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;YAE9C,KAAI,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YAEhC,IAAI,KAAK,YAAY,KAAK,EAAE;gBAC1B,oEAAoE;gBACpE,sCAAsC;gBACtC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;aACtB;YAED,MAAM,KAAK,CAAC;QACd,CAAC,CAAC;QAzBA,IAAI,CAAC,UAAU;aACZ,IAAI,CACH,KAAK,EAAE,EACP,GAAG,CAAC,cAAM,OAAA,KAAI,CAAC,YAAY,EAAE,EAAnB,CAAmB,CAAC,CAC/B;aACA,SAAS,CAAC;YACT,KAAK,EAAE,UAAA,KAAK;gBACV,sCAAsC;gBACtC,OAAO,CAAC,KAAK,CAAC,gDAAgD,EAAE,KAAK,CAAC,CAAC;YACzE,CAAC;SACF,CAAC,CAAC;IACP,CAAC;IAgBM,kCAAK,GAAZ,UAAa,EAAc;QAA3B,iBASC;YATc,cAAI;QACjB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QAEjB,OAAO;YACL,GAAG,EAAE,IAAI,CAAC,GAAG;YACb,IAAI,EAAE;gBACJ,OAAO,KAAI,CAAC,UAAU,CAAC,YAAY,EAAE,CAAC;YACxC,CAAC;SACF,CAAC;IACJ,CAAC;IAEO,yCAAY,GAApB;QACE,4EAA4E;QAC5E,8CAA8C;QAC9C,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE,CAAC;QAE7B,2CAA2C;QAC3C,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,WAAW,GAAG,EAAE,CAAC;QAE5C,0DAA0D;QAC1D,IAAM,SAAS,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAChD,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;QAElD,0EAA0E;QAC1E,2BAA2B;QAC3B,IAAM,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC;QAEnE,MAAM,CACJ,oBAAC,WAAW;YACV,oBAAC,iBAAiB,IAChB,WAAW,EAAE,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,oBAAoB,EAAE,EAChE,aAAa,EAAE,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,gBAAgB,EAAE,gBAClD,IAAI,CAAC,UAAU,GAC3B,CACU,EACd,SAAS,CACV,CAAC;IACJ,CAAC;IACH,yBAAC;AAAD,CAAC,AAtED,IAsEC","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport { render } from 'react-dom';\nimport * as Rx from 'rxjs';\nimport { first, tap } from 'rxjs/operators';\n\nimport { I18nStartContract } from '../i18n';\nimport { InjectedMetadataService } from '../injected_metadata';\nimport { FatalErrorsScreen } from './fatal_errors_screen';\nimport { ErrorInfo, getErrorInfo } from './get_error_info';\n\nexport interface FatalErrorsParams {\n  rootDomElement: HTMLElement;\n  injectedMetadata: InjectedMetadataService;\n  stopCoreSystem: () => void;\n}\n\ninterface Deps {\n  i18n: I18nStartContract;\n}\n\nexport class FatalErrorsService {\n  private readonly errorInfo$ = new Rx.ReplaySubject<ErrorInfo>();\n  private i18n?: I18nStartContract;\n\n  constructor(private params: FatalErrorsParams) {\n    this.errorInfo$\n      .pipe(\n        first(),\n        tap(() => this.onFirstError())\n      )\n      .subscribe({\n        error: error => {\n          // tslint:disable-next-line no-console\n          console.error('Uncaught error in fatal error screen internals', error);\n        },\n      });\n  }\n\n  public add = (error: Error | string, source?: string) => {\n    const errorInfo = getErrorInfo(error, source);\n\n    this.errorInfo$.next(errorInfo);\n\n    if (error instanceof Error) {\n      // make stack traces clickable by putting whole error in the console\n      // tslint:disable-next-line no-console\n      console.error(error);\n    }\n\n    throw error;\n  };\n\n  public start({ i18n }: Deps) {\n    this.i18n = i18n;\n\n    return {\n      add: this.add,\n      get$: () => {\n        return this.errorInfo$.asObservable();\n      },\n    };\n  }\n\n  private onFirstError() {\n    // stop the core systems so that things like the legacy platform are stopped\n    // and angular/react components are unmounted;\n    this.params.stopCoreSystem();\n\n    // delete all content in the rootDomElement\n    this.params.rootDomElement.textContent = '';\n\n    // create and mount a container for the <FatalErrorScreen>\n    const container = document.createElement('div');\n    this.params.rootDomElement.appendChild(container);\n\n    // If error occurred before I18nService has been started we don't have any\n    // i18n context to provide.\n    const I18nContext = this.i18n ? this.i18n.Context : React.Fragment;\n\n    render(\n      <I18nContext>\n        <FatalErrorsScreen\n          buildNumber={this.params.injectedMetadata.getKibanaBuildNumber()}\n          kibanaVersion={this.params.injectedMetadata.getKibanaVersion()}\n          errorInfo$={this.errorInfo$}\n        />\n      </I18nContext>,\n      container\n    );\n  }\n}\n\nexport type FatalErrorsStartContract = ReturnType<FatalErrorsService['start']>;\n"]}]}