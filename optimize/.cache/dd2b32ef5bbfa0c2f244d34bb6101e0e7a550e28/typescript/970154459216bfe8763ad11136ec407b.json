{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/pages/logs/logs.tsx","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/pages/logs/logs.tsx","mtime":1567631711986},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport * as tslib_1 from \"tslib\";\nvar _a;\nimport { EuiButton, EuiFlexGroup, EuiFlexItem } from '@elastic/eui';\nimport { injectI18n } from '@kbn/i18n/react';\nimport React from 'react';\nimport { LogsPageContent } from './page_content';\nimport { LogsToolbar } from './toolbar';\nimport { NoIndices } from '../../components/empty_states/no_indices';\nimport { Header } from '../../components/header';\nimport { LogFlyout } from '../../components/logging/log_flyout';\nimport { ColumnarPage } from '../../components/page';\nimport { InfraHeaderFeedbackLink } from '../../components/header_feedback_link';\nimport { SourceConfigurationFlyout } from '../../components/source_configuration';\nimport { WithSourceConfigurationFlyoutState } from '../../components/source_configuration/source_configuration_flyout_state';\nimport { WithLogFilter, WithLogFilterUrlState } from '../../containers/logs/with_log_filter';\nimport { WithLogFlyout } from '../../containers/logs/with_log_flyout';\nimport { WithFlyoutOptions } from '../../containers/logs/with_log_flyout_options';\nimport { WithFlyoutOptionsUrlState } from '../../containers/logs/with_log_flyout_options';\nimport { WithLogMinimapUrlState } from '../../containers/logs/with_log_minimap';\nimport { WithLogPositionUrlState } from '../../containers/logs/with_log_position';\nimport { WithLogTextviewUrlState } from '../../containers/logs/with_log_textview';\nimport { WithKibanaChrome } from '../../containers/with_kibana_chrome';\nimport { SourceErrorPage, SourceLoadingPage, WithSource } from '../../containers/with_source';\nexport var LogsPage = injectI18n((_a = /** @class */ (function (_super) {\n        tslib_1.__extends(class_1, _super);\n        function class_1() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        class_1.prototype.render = function () {\n            var intl = this.props.intl;\n            return (React.createElement(ColumnarPage, null,\n                React.createElement(Header, { appendSections: React.createElement(InfraHeaderFeedbackLink, { url: \"https://discuss.elastic.co/c/logs\" }), breadcrumbs: [\n                        {\n                            text: intl.formatMessage({\n                                id: 'xpack.infra.logsPage.logsBreadcrumbsText',\n                                defaultMessage: 'Logs',\n                            }),\n                        },\n                    ] }),\n                React.createElement(WithSource, null, function (_a) {\n                    var derivedIndexPattern = _a.derivedIndexPattern, hasFailed = _a.hasFailed, isLoading = _a.isLoading, lastFailureMessage = _a.lastFailureMessage, load = _a.load, logIndicesExist = _a.logIndicesExist, sourceId = _a.sourceId;\n                    return (React.createElement(React.Fragment, null,\n                        React.createElement(SourceConfigurationFlyout, null),\n                        isLoading ? (React.createElement(SourceLoadingPage, null)) : logIndicesExist ? (React.createElement(React.Fragment, null,\n                            React.createElement(WithLogFilterUrlState, { indexPattern: derivedIndexPattern }),\n                            React.createElement(WithLogPositionUrlState, null),\n                            React.createElement(WithLogMinimapUrlState, null),\n                            React.createElement(WithLogTextviewUrlState, null),\n                            React.createElement(WithFlyoutOptionsUrlState, null),\n                            React.createElement(LogsToolbar, null),\n                            React.createElement(WithLogFilter, { indexPattern: derivedIndexPattern }, function (_a) {\n                                var applyFilterQueryFromKueryExpression = _a.applyFilterQueryFromKueryExpression;\n                                return (React.createElement(React.Fragment, null,\n                                    React.createElement(WithFlyoutOptions, null, function (_a) {\n                                        var showFlyout = _a.showFlyout, setFlyoutItem = _a.setFlyoutItem;\n                                        return (React.createElement(LogsPageContent, { showFlyout: showFlyout, setFlyoutItem: setFlyoutItem }));\n                                    }),\n                                    React.createElement(WithLogFlyout, { sourceId: sourceId }, function (_a) {\n                                        var flyoutItem = _a.flyoutItem, hideFlyout = _a.hideFlyout, loading = _a.loading;\n                                        return (React.createElement(LogFlyout, { setFilter: applyFilterQueryFromKueryExpression, flyoutItem: flyoutItem, hideFlyout: hideFlyout, loading: loading }));\n                                    })));\n                            }))) : hasFailed ? (React.createElement(SourceErrorPage, { errorMessage: lastFailureMessage || '', retry: load })) : (React.createElement(WithKibanaChrome, null, function (_a) {\n                            var basePath = _a.basePath;\n                            return (React.createElement(NoIndices, { title: intl.formatMessage({\n                                    id: 'xpack.infra.logsPage.noLoggingIndicesTitle',\n                                    defaultMessage: \"Looks like you don't have any logging indices.\",\n                                }), message: intl.formatMessage({\n                                    id: 'xpack.infra.logsPage.noLoggingIndicesDescription',\n                                    defaultMessage: \"Let's add some!\",\n                                }), actions: React.createElement(EuiFlexGroup, null,\n                                    React.createElement(EuiFlexItem, null,\n                                        React.createElement(EuiButton, { href: basePath + \"/app/kibana#/home/tutorial_directory/logging\", color: \"primary\", fill: true }, intl.formatMessage({\n                                            id: 'xpack.infra.logsPage.noLoggingIndicesInstructionsActionLabel',\n                                            defaultMessage: 'View setup instructions',\n                                        }))),\n                                    React.createElement(EuiFlexItem, null,\n                                        React.createElement(WithSourceConfigurationFlyoutState, null, function (_a) {\n                                            var enable = _a.enable;\n                                            return (React.createElement(EuiButton, { color: \"primary\", onClick: enable }, intl.formatMessage({\n                                                id: 'xpack.infra.configureSourceActionLabel',\n                                                defaultMessage: 'Change source configuration',\n                                            })));\n                                        }))) }));\n                        }))));\n                })));\n        };\n        return class_1;\n    }(React.Component)),\n    _a.displayName = 'LogsPage',\n    _a));\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/pages/logs/logs.tsx","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/pages/logs/logs.tsx"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport { EuiButton, EuiFlexGroup, EuiFlexItem } from '@elastic/eui';\nimport { InjectedIntl, injectI18n } from '@kbn/i18n/react';\nimport React from 'react';\n\nimport { LogsPageContent } from './page_content';\nimport { LogsToolbar } from './toolbar';\n\nimport { NoIndices } from '../../components/empty_states/no_indices';\nimport { Header } from '../../components/header';\nimport { LogFlyout } from '../../components/logging/log_flyout';\nimport { ColumnarPage } from '../../components/page';\n\nimport { InfraHeaderFeedbackLink } from '../../components/header_feedback_link';\nimport { SourceConfigurationFlyout } from '../../components/source_configuration';\nimport { WithSourceConfigurationFlyoutState } from '../../components/source_configuration/source_configuration_flyout_state';\nimport { WithLogFilter, WithLogFilterUrlState } from '../../containers/logs/with_log_filter';\nimport { WithLogFlyout } from '../../containers/logs/with_log_flyout';\nimport { WithFlyoutOptions } from '../../containers/logs/with_log_flyout_options';\nimport { WithFlyoutOptionsUrlState } from '../../containers/logs/with_log_flyout_options';\nimport { WithLogMinimapUrlState } from '../../containers/logs/with_log_minimap';\nimport { WithLogPositionUrlState } from '../../containers/logs/with_log_position';\nimport { WithLogTextviewUrlState } from '../../containers/logs/with_log_textview';\nimport { WithKibanaChrome } from '../../containers/with_kibana_chrome';\nimport { SourceErrorPage, SourceLoadingPage, WithSource } from '../../containers/with_source';\n\ninterface Props {\n  intl: InjectedIntl;\n}\n\nexport const LogsPage = injectI18n(\n  class extends React.Component<Props> {\n    public static displayName = 'LogsPage';\n\n    public render() {\n      const { intl } = this.props;\n\n      return (\n        <ColumnarPage>\n          <Header\n            appendSections={<InfraHeaderFeedbackLink url=\"https://discuss.elastic.co/c/logs\" />}\n            breadcrumbs={[\n              {\n                text: intl.formatMessage({\n                  id: 'xpack.infra.logsPage.logsBreadcrumbsText',\n                  defaultMessage: 'Logs',\n                }),\n              },\n            ]}\n          />\n          <WithSource>\n            {({\n              derivedIndexPattern,\n              hasFailed,\n              isLoading,\n              lastFailureMessage,\n              load,\n              logIndicesExist,\n              sourceId,\n            }) => (\n              <>\n                <SourceConfigurationFlyout />\n                {isLoading ? (\n                  <SourceLoadingPage />\n                ) : logIndicesExist ? (\n                  <>\n                    <WithLogFilterUrlState indexPattern={derivedIndexPattern} />\n                    <WithLogPositionUrlState />\n                    <WithLogMinimapUrlState />\n                    <WithLogTextviewUrlState />\n                    <WithFlyoutOptionsUrlState />\n                    <LogsToolbar />\n                    <WithLogFilter indexPattern={derivedIndexPattern}>\n                      {({ applyFilterQueryFromKueryExpression }) => (\n                        <React.Fragment>\n                          <WithFlyoutOptions>\n                            {({ showFlyout, setFlyoutItem }) => (\n                              <LogsPageContent\n                                showFlyout={showFlyout}\n                                setFlyoutItem={setFlyoutItem}\n                              />\n                            )}\n                          </WithFlyoutOptions>\n                          <WithLogFlyout sourceId={sourceId}>\n                            {({ flyoutItem, hideFlyout, loading }) => (\n                              <LogFlyout\n                                setFilter={applyFilterQueryFromKueryExpression}\n                                flyoutItem={flyoutItem}\n                                hideFlyout={hideFlyout}\n                                loading={loading}\n                              />\n                            )}\n                          </WithLogFlyout>\n                        </React.Fragment>\n                      )}\n                    </WithLogFilter>\n                  </>\n                ) : hasFailed ? (\n                  <SourceErrorPage errorMessage={lastFailureMessage || ''} retry={load} />\n                ) : (\n                  <WithKibanaChrome>\n                    {({ basePath }) => (\n                      <NoIndices\n                        title={intl.formatMessage({\n                          id: 'xpack.infra.logsPage.noLoggingIndicesTitle',\n                          defaultMessage: \"Looks like you don't have any logging indices.\",\n                        })}\n                        message={intl.formatMessage({\n                          id: 'xpack.infra.logsPage.noLoggingIndicesDescription',\n                          defaultMessage: \"Let's add some!\",\n                        })}\n                        actions={\n                          <EuiFlexGroup>\n                            <EuiFlexItem>\n                              <EuiButton\n                                href={`${basePath}/app/kibana#/home/tutorial_directory/logging`}\n                                color=\"primary\"\n                                fill\n                              >\n                                {intl.formatMessage({\n                                  id:\n                                    'xpack.infra.logsPage.noLoggingIndicesInstructionsActionLabel',\n                                  defaultMessage: 'View setup instructions',\n                                })}\n                              </EuiButton>\n                            </EuiFlexItem>\n                            <EuiFlexItem>\n                              <WithSourceConfigurationFlyoutState>\n                                {({ enable }) => (\n                                  <EuiButton color=\"primary\" onClick={enable}>\n                                    {intl.formatMessage({\n                                      id: 'xpack.infra.configureSourceActionLabel',\n                                      defaultMessage: 'Change source configuration',\n                                    })}\n                                  </EuiButton>\n                                )}\n                              </WithSourceConfigurationFlyoutState>\n                            </EuiFlexItem>\n                          </EuiFlexGroup>\n                        }\n                      />\n                    )}\n                  </WithKibanaChrome>\n                )}\n              </>\n            )}\n          </WithSource>\n        </ColumnarPage>\n      );\n    }\n  }\n);\n"]}]}