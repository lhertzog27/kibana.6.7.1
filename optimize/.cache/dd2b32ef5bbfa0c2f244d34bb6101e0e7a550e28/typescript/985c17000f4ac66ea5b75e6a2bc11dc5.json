{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/containers/logs/with_log_filter.tsx","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/containers/logs/with_log_filter.tsx","mtime":1567631711983},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { logFilterActions, logFilterSelectors } from '../../store';\nimport { convertKueryToElasticSearchQuery } from '../../utils/kuery';\nimport { asChildFunctionRenderer } from '../../utils/typed_react';\nimport { bindPlainActionCreators } from '../../utils/typed_redux';\nimport { replaceStateKeyInQueryString, UrlStateContainer } from '../../utils/url_state';\nvar withLogFilter = connect(function (state) { return ({\n    filterQuery: logFilterSelectors.selectLogFilterQuery(state),\n    filterQueryDraft: logFilterSelectors.selectLogFilterQueryDraft(state),\n    isFilterQueryDraftValid: logFilterSelectors.selectIsLogFilterQueryDraftValid(state),\n}); }, function (dispatch, ownProps) {\n    return bindPlainActionCreators({\n        applyFilterQuery: function (query) {\n            return logFilterActions.applyLogFilterQuery({\n                query: query,\n                serializedQuery: convertKueryToElasticSearchQuery(query.expression, ownProps.indexPattern),\n            });\n        },\n        applyFilterQueryFromKueryExpression: function (expression) {\n            return logFilterActions.applyLogFilterQuery({\n                query: {\n                    kind: 'kuery',\n                    expression: expression,\n                },\n                serializedQuery: convertKueryToElasticSearchQuery(expression, ownProps.indexPattern),\n            });\n        },\n        setFilterQueryDraft: logFilterActions.setLogFilterQueryDraft,\n        setFilterQueryDraftFromKueryExpression: function (expression) {\n            return logFilterActions.setLogFilterQueryDraft({\n                kind: 'kuery',\n                expression: expression,\n            });\n        },\n    })(dispatch);\n});\nexport var WithLogFilter = asChildFunctionRenderer(withLogFilter);\nexport var WithLogFilterUrlState = function (_a) {\n    var indexPattern = _a.indexPattern;\n    return (React.createElement(WithLogFilter, { indexPattern: indexPattern }, function (_a) {\n        var applyFilterQuery = _a.applyFilterQuery, filterQuery = _a.filterQuery;\n        return (React.createElement(UrlStateContainer, { urlState: filterQuery, urlStateKey: \"logFilter\", mapToUrlState: mapToFilterQuery, onChange: function (urlState) {\n                if (urlState) {\n                    applyFilterQuery(urlState);\n                }\n            }, onInitialize: function (urlState) {\n                if (urlState) {\n                    applyFilterQuery(urlState);\n                }\n            } }));\n    }));\n};\nvar mapToFilterQuery = function (value) {\n    return value && value.kind === 'kuery' && typeof value.expression === 'string'\n        ? {\n            kind: value.kind,\n            expression: value.expression,\n        }\n        : undefined;\n};\nexport var replaceLogFilterInQueryString = function (expression) {\n    return replaceStateKeyInQueryString('logFilter', {\n        kind: 'kuery',\n        expression: expression,\n    });\n};\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/containers/logs/with_log_filter.tsx","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/containers/logs/with_log_filter.tsx"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport React from 'react';\nimport { connect } from 'react-redux';\n\nimport { StaticIndexPattern } from 'ui/index_patterns';\nimport { logFilterActions, logFilterSelectors, State } from '../../store';\nimport { FilterQuery } from '../../store/local/log_filter';\nimport { convertKueryToElasticSearchQuery } from '../../utils/kuery';\nimport { asChildFunctionRenderer } from '../../utils/typed_react';\nimport { bindPlainActionCreators } from '../../utils/typed_redux';\nimport { replaceStateKeyInQueryString, UrlStateContainer } from '../../utils/url_state';\n\ninterface WithLogFilterProps {\n  indexPattern: StaticIndexPattern;\n}\n\nconst withLogFilter = connect(\n  (state: State) => ({\n    filterQuery: logFilterSelectors.selectLogFilterQuery(state),\n    filterQueryDraft: logFilterSelectors.selectLogFilterQueryDraft(state),\n    isFilterQueryDraftValid: logFilterSelectors.selectIsLogFilterQueryDraftValid(state),\n  }),\n  (dispatch, ownProps: WithLogFilterProps) =>\n    bindPlainActionCreators({\n      applyFilterQuery: (query: FilterQuery) =>\n        logFilterActions.applyLogFilterQuery({\n          query,\n          serializedQuery: convertKueryToElasticSearchQuery(\n            query.expression,\n            ownProps.indexPattern\n          ),\n        }),\n      applyFilterQueryFromKueryExpression: (expression: string) =>\n        logFilterActions.applyLogFilterQuery({\n          query: {\n            kind: 'kuery',\n            expression,\n          },\n          serializedQuery: convertKueryToElasticSearchQuery(expression, ownProps.indexPattern),\n        }),\n      setFilterQueryDraft: logFilterActions.setLogFilterQueryDraft,\n      setFilterQueryDraftFromKueryExpression: (expression: string) =>\n        logFilterActions.setLogFilterQueryDraft({\n          kind: 'kuery',\n          expression,\n        }),\n    })(dispatch)\n);\n\nexport const WithLogFilter = asChildFunctionRenderer(withLogFilter);\n\n/**\n * Url State\n */\n\ntype LogFilterUrlState = ReturnType<typeof logFilterSelectors.selectLogFilterQuery>;\n\ntype WithLogFilterUrlStateProps = WithLogFilterProps;\n\nexport const WithLogFilterUrlState: React.SFC<WithLogFilterUrlStateProps> = ({ indexPattern }) => (\n  <WithLogFilter indexPattern={indexPattern}>\n    {({ applyFilterQuery, filterQuery }) => (\n      <UrlStateContainer\n        urlState={filterQuery}\n        urlStateKey=\"logFilter\"\n        mapToUrlState={mapToFilterQuery}\n        onChange={urlState => {\n          if (urlState) {\n            applyFilterQuery(urlState);\n          }\n        }}\n        onInitialize={urlState => {\n          if (urlState) {\n            applyFilterQuery(urlState);\n          }\n        }}\n      />\n    )}\n  </WithLogFilter>\n);\n\nconst mapToFilterQuery = (value: any): LogFilterUrlState | undefined =>\n  value && value.kind === 'kuery' && typeof value.expression === 'string'\n    ? {\n        kind: value.kind,\n        expression: value.expression,\n      }\n    : undefined;\n\nexport const replaceLogFilterInQueryString = (expression: string) =>\n  replaceStateKeyInQueryString<LogFilterUrlState>('logFilter', {\n    kind: 'kuery',\n    expression,\n  });\n"]}]}