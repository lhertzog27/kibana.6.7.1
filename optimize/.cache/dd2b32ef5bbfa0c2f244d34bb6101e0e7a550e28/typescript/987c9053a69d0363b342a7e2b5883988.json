{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/common/log_entry/log_entry.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/common/log_entry/log_entry.ts","mtime":1567631711977},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nexport function getLogEntryKey(entry) {\n    return {\n        gid: entry.gid,\n        tiebreaker: entry.fields.tiebreaker,\n        time: entry.fields.time,\n    };\n}\nexport function isEqual(time1, time2) {\n    return time1.time === time2.time && time1.tiebreaker === time2.tiebreaker;\n}\nexport function isLess(time1, time2) {\n    return (time1.time < time2.time || (time1.time === time2.time && time1.tiebreaker < time2.tiebreaker));\n}\nexport function isLessOrEqual(time1, time2) {\n    return (time1.time < time2.time || (time1.time === time2.time && time1.tiebreaker <= time2.tiebreaker));\n}\nexport function isBetween(min, max, operand) {\n    return isLessOrEqual(min, operand) && isLessOrEqual(operand, max);\n}\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/common/log_entry/log_entry.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/common/log_entry/log_entry.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAgCH,MAAM,UAAU,cAAc,CAAC,KAAe;IAC5C,OAAO;QACL,GAAG,EAAE,KAAK,CAAC,GAAG;QACd,UAAU,EAAE,KAAK,CAAC,MAAM,CAAC,UAAU;QACnC,IAAI,EAAE,KAAK,CAAC,MAAM,CAAC,IAAI;KACxB,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,OAAO,CAAC,KAAmB,EAAE,KAAmB;IAC9D,OAAO,KAAK,CAAC,IAAI,KAAK,KAAK,CAAC,IAAI,IAAI,KAAK,CAAC,UAAU,KAAK,KAAK,CAAC,UAAU,CAAC;AAC5E,CAAC;AAED,MAAM,UAAU,MAAM,CAAC,KAAmB,EAAE,KAAmB;IAC7D,OAAO,CACL,KAAK,CAAC,IAAI,GAAG,KAAK,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,KAAK,KAAK,CAAC,IAAI,IAAI,KAAK,CAAC,UAAU,GAAG,KAAK,CAAC,UAAU,CAAC,CAC9F,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,aAAa,CAAC,KAAmB,EAAE,KAAmB;IACpE,OAAO,CACL,KAAK,CAAC,IAAI,GAAG,KAAK,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,KAAK,KAAK,CAAC,IAAI,IAAI,KAAK,CAAC,UAAU,IAAI,KAAK,CAAC,UAAU,CAAC,CAC/F,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,SAAS,CAAC,GAAiB,EAAE,GAAiB,EAAE,OAAqB;IACnF,OAAO,aAAa,CAAC,GAAG,EAAE,OAAO,CAAC,IAAI,aAAa,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;AACpE,CAAC","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport { TimeKey } from '../time';\n\nexport interface LogEntry {\n  gid: string;\n  origin: LogEntryOrigin;\n  fields: LogEntryFields;\n}\n\nexport interface LogEntryOrigin {\n  id: string;\n  index: string;\n  type: string;\n}\n\nexport interface LogEntryFields extends LogEntryTime {\n  message: string;\n}\n\nexport type LogEntryTime = TimeKey;\n// export interface LogEntryTime {\n//   tiebreaker: number;\n//   time: number;\n// }\n\nexport interface LogEntryFieldsMapping {\n  message: string;\n  tiebreaker: string;\n  time: string;\n}\n\nexport function getLogEntryKey(entry: LogEntry) {\n  return {\n    gid: entry.gid,\n    tiebreaker: entry.fields.tiebreaker,\n    time: entry.fields.time,\n  };\n}\n\nexport function isEqual(time1: LogEntryTime, time2: LogEntryTime) {\n  return time1.time === time2.time && time1.tiebreaker === time2.tiebreaker;\n}\n\nexport function isLess(time1: LogEntryTime, time2: LogEntryTime) {\n  return (\n    time1.time < time2.time || (time1.time === time2.time && time1.tiebreaker < time2.tiebreaker)\n  );\n}\n\nexport function isLessOrEqual(time1: LogEntryTime, time2: LogEntryTime) {\n  return (\n    time1.time < time2.time || (time1.time === time2.time && time1.tiebreaker <= time2.tiebreaker)\n  );\n}\n\nexport function isBetween(min: LogEntryTime, max: LogEntryTime, operand: LogEntryTime) {\n  return isLessOrEqual(min, operand) && isLessOrEqual(operand, max);\n}\n"]}]}