{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/containers/metrics/with_metrics.tsx","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/containers/metrics/with_metrics.tsx","mtime":1567631711983},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport React from 'react';\nimport { Query } from 'react-apollo';\nimport { metricsQuery } from './metrics.gql_query';\nexport var WithMetrics = function (_a) {\n    var children = _a.children, layouts = _a.layouts, sourceId = _a.sourceId, timerange = _a.timerange, nodeType = _a.nodeType, nodeId = _a.nodeId;\n    var metrics = layouts.reduce(function (acc, item) {\n        return acc.concat(item.sections.map(function (s) { return s.id; }));\n    }, []);\n    return (React.createElement(Query, { query: metricsQuery, fetchPolicy: \"no-cache\", notifyOnNetworkStatusChange: true, variables: {\n            sourceId: sourceId,\n            metrics: metrics,\n            nodeType: nodeType,\n            nodeId: nodeId,\n            timerange: timerange,\n        } }, function (_a) {\n        var data = _a.data, error = _a.error, loading = _a.loading, refetch = _a.refetch;\n        return children({\n            metrics: filterOnlyInfraMetricData(data && data.source && data.source.metrics),\n            error: error && error.message,\n            loading: loading,\n            refetch: refetch,\n        });\n    }));\n};\nvar filterOnlyInfraMetricData = function (metrics) {\n    if (!metrics) {\n        return [];\n    }\n    return metrics.filter(function (m) { return m !== null; }).map(function (m) { return m; });\n};\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/containers/metrics/with_metrics.tsx","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/containers/metrics/with_metrics.tsx"],"names":[],"mappings":"AAAA;;;;GAIG;AAEH,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,KAAK,EAAE,MAAM,cAAc,CAAC;AASrC,OAAO,EAAE,YAAY,EAAE,MAAM,qBAAqB,CAAC;AAkBnD,MAAM,CAAC,IAAM,WAAW,GAAG,UAAC,EAOT;QANjB,sBAAQ,EACR,oBAAO,EACP,sBAAQ,EACR,wBAAS,EACT,sBAAQ,EACR,kBAAM;IAEN,IAAM,OAAO,GAAG,OAAO,CAAC,MAAM,CAC5B,UAAC,GAAG,EAAE,IAAI;QACR,OAAO,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,EAAE,EAAJ,CAAI,CAAC,CAAC,CAAC;IAClD,CAAC,EACD,EAAmB,CACpB,CAAC;IAEF,OAAO,CACL,oBAAC,KAAK,IACJ,KAAK,EAAE,YAAY,EACnB,WAAW,EAAC,UAAU,EACtB,2BAA2B,QAC3B,SAAS,EAAE;YACT,QAAQ,UAAA;YACR,OAAO,SAAA;YACP,QAAQ,UAAA;YACR,MAAM,QAAA;YACN,SAAS,WAAA;SACV,IAEA,UAAC,EAAiC;YAA/B,cAAI,EAAE,gBAAK,EAAE,oBAAO,EAAE,oBAAO;QAC/B,OAAO,QAAQ,CAAC;YACd,OAAO,EAAE,yBAAyB,CAAC,IAAI,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;YAC9E,KAAK,EAAE,KAAK,IAAI,KAAK,CAAC,OAAO;YAC7B,OAAO,SAAA;YACP,OAAO,SAAA;SACR,CAAC,CAAC;IACL,CAAC,CACK,CACT,CAAC;AACJ,CAAC,CAAC;AAEF,IAAM,yBAAyB,GAAG,UAChC,OAAuD;IAEvD,IAAI,CAAC,OAAO,EAAE;QACZ,OAAO,EAAE,CAAC;KACX;IACD,OAAO,OAAO,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,KAAK,IAAI,EAAV,CAAU,CAAC,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAoB,EAApB,CAAoB,CAAC,CAAC;AACxE,CAAC,CAAC","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport React from 'react';\nimport { Query } from 'react-apollo';\nimport {\n  InfraMetric,\n  InfraMetricData,\n  InfraNodeType,\n  InfraTimerangeInput,\n  MetricsQuery,\n} from '../../graphql/types';\nimport { InfraMetricLayout } from '../../pages/metrics/layouts/types';\nimport { metricsQuery } from './metrics.gql_query';\n\ninterface WithMetricsArgs {\n  metrics: InfraMetricData[];\n  error?: string | undefined;\n  loading: boolean;\n  refetch: () => void;\n}\n\ninterface WithMetricsProps {\n  children: (args: WithMetricsArgs) => React.ReactNode;\n  layouts: InfraMetricLayout[];\n  nodeType: InfraNodeType;\n  nodeId: string;\n  sourceId: string;\n  timerange: InfraTimerangeInput;\n}\n\nexport const WithMetrics = ({\n  children,\n  layouts,\n  sourceId,\n  timerange,\n  nodeType,\n  nodeId,\n}: WithMetricsProps) => {\n  const metrics = layouts.reduce(\n    (acc, item) => {\n      return acc.concat(item.sections.map(s => s.id));\n    },\n    [] as InfraMetric[]\n  );\n\n  return (\n    <Query<MetricsQuery.Query, MetricsQuery.Variables>\n      query={metricsQuery}\n      fetchPolicy=\"no-cache\"\n      notifyOnNetworkStatusChange\n      variables={{\n        sourceId,\n        metrics,\n        nodeType,\n        nodeId,\n        timerange,\n      }}\n    >\n      {({ data, error, loading, refetch }) => {\n        return children({\n          metrics: filterOnlyInfraMetricData(data && data.source && data.source.metrics),\n          error: error && error.message,\n          loading,\n          refetch,\n        });\n      }}\n    </Query>\n  );\n};\n\nconst filterOnlyInfraMetricData = (\n  metrics: Array<MetricsQuery.Metrics | null> | undefined\n): InfraMetricData[] => {\n  if (!metrics) {\n    return [];\n  }\n  return metrics.filter(m => m !== null).map(m => m as InfraMetricData);\n};\n"]}]}