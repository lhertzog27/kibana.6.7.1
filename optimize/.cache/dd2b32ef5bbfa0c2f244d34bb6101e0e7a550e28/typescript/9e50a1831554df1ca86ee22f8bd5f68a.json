{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/upgrade_assistant/public/components/tabs.tsx","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/upgrade_assistant/public/components/tabs.tsx","mtime":1567631712320},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport * as tslib_1 from \"tslib\";\nimport axios from 'axios';\nimport { findIndex, get, set } from 'lodash';\nimport React from 'react';\nimport { EuiEmptyPrompt, EuiPageContent, EuiPageContentBody, EuiTabbedContent, } from '@elastic/eui';\nimport { FormattedMessage, injectI18n } from '@kbn/i18n/react';\nimport chrome from 'ui/chrome';\nimport { kfetch } from 'ui/kfetch';\nimport { CheckupTab } from './tabs/checkup';\nimport { OverviewTab } from './tabs/overview';\nimport { LoadingState, TelemetryState } from './types';\nvar ClusterUpgradeState;\n(function (ClusterUpgradeState) {\n    ClusterUpgradeState[ClusterUpgradeState[\"needsUpgrade\"] = 0] = \"needsUpgrade\";\n    ClusterUpgradeState[ClusterUpgradeState[\"partiallyUpgraded\"] = 1] = \"partiallyUpgraded\";\n    ClusterUpgradeState[ClusterUpgradeState[\"upgraded\"] = 2] = \"upgraded\";\n})(ClusterUpgradeState || (ClusterUpgradeState = {}));\nvar UpgradeAssistantTabsUI = /** @class */ (function (_super) {\n    tslib_1.__extends(UpgradeAssistantTabsUI, _super);\n    function UpgradeAssistantTabsUI(props) {\n        var _this = _super.call(this, props) || this;\n        _this.onTabClick = function (selectedTab) {\n            var selectedTabIndex = findIndex(_this.tabs, { id: selectedTab.id });\n            if (selectedTabIndex === -1) {\n                throw new Error(\"Clicked tab did not exist in tabs array\");\n            }\n            // Send telemetry info about the current selected tab\n            // only in case the clicked tab id it's different from the\n            // current selected tab id\n            if (_this.tabs[_this.state.selectedTabIndex].id !== selectedTab.id) {\n                _this.sendTelemetryInfo(selectedTab.id);\n            }\n            _this.setSelectedTabIndex(selectedTabIndex);\n        };\n        _this.setSelectedTabIndex = function (selectedTabIndex) {\n            _this.setState({ selectedTabIndex: selectedTabIndex });\n        };\n        _this.loadData = function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n            var resp, e_1;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        this.setState({ loadingState: LoadingState.Loading });\n                        return [4 /*yield*/, axios.get(chrome.addBasePath('/api/upgrade_assistant/status'))];\n                    case 1:\n                        resp = _a.sent();\n                        this.setState({\n                            loadingState: LoadingState.Success,\n                            checkupData: resp.data,\n                        });\n                        return [3 /*break*/, 3];\n                    case 2:\n                        e_1 = _a.sent();\n                        if (get(e_1, 'response.status') === 426) {\n                            this.setState({\n                                loadingState: LoadingState.Success,\n                                clusterUpgradeState: get(e_1, 'response.data.attributes.allNodesUpgraded', false)\n                                    ? ClusterUpgradeState.upgraded\n                                    : ClusterUpgradeState.partiallyUpgraded,\n                            });\n                        }\n                        else {\n                            this.setState({ loadingState: LoadingState.Error, loadingError: e_1 });\n                        }\n                        return [3 /*break*/, 3];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        }); };\n        _this.state = {\n            loadingState: LoadingState.Loading,\n            clusterUpgradeState: ClusterUpgradeState.needsUpgrade,\n            selectedTabIndex: 0,\n            telemetryState: TelemetryState.Complete,\n        };\n        return _this;\n    }\n    UpgradeAssistantTabsUI.prototype.componentDidMount = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.loadData()];\n                    case 1:\n                        _a.sent();\n                        // Send telemetry info about the default selected tab\n                        this.sendTelemetryInfo(this.tabs[this.state.selectedTabIndex].id);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    UpgradeAssistantTabsUI.prototype.render = function () {\n        var _a = this.state, selectedTabIndex = _a.selectedTabIndex, telemetryState = _a.telemetryState, clusterUpgradeState = _a.clusterUpgradeState;\n        var tabs = this.tabs;\n        if (clusterUpgradeState === ClusterUpgradeState.partiallyUpgraded) {\n            return (React.createElement(EuiPageContent, null,\n                React.createElement(EuiPageContentBody, null,\n                    React.createElement(EuiEmptyPrompt, { iconType: \"logoElasticsearch\", title: React.createElement(\"h2\", null,\n                            React.createElement(FormattedMessage, { id: \"xpack.upgradeAssistant.tabs.upgradingInterstitial.upgradingTitle\", defaultMessage: \"Your cluster is upgrading\" })), body: React.createElement(\"p\", null,\n                            React.createElement(FormattedMessage, { id: \"xpack.upgradeAssistant.tabs.upgradingInterstitial.upgradingDescription\", defaultMessage: \"One or more Elasticsearch nodes have a newer version of\\n                      Elasticsearch than Kibana. Once all your nodes are upgraded, upgrade Kibana.\" })) }))));\n        }\n        else if (clusterUpgradeState === ClusterUpgradeState.upgraded) {\n            return (React.createElement(EuiPageContent, null,\n                React.createElement(EuiPageContentBody, null,\n                    React.createElement(EuiEmptyPrompt, { iconType: \"logoElasticsearch\", title: React.createElement(\"h2\", null,\n                            React.createElement(FormattedMessage, { id: \"xpack.upgradeAssistant.tabs.upgradingInterstitial.upgradeCompleteTitle\", defaultMessage: \"Your cluster has been upgraded\" })), body: React.createElement(\"p\", null,\n                            React.createElement(FormattedMessage, { id: \"xpack.upgradeAssistant.tabs.upgradingInterstitial.upgradeCompleteDescription\", defaultMessage: \"All Elasticsearch nodes have been upgraded. You may now upgrade Kibana.\" })) }))));\n        }\n        return (React.createElement(EuiTabbedContent, { \"data-test-subj\": telemetryState === TelemetryState.Running ? 'upgradeAssistantTelemetryRunning' : undefined, tabs: tabs, onTabClick: this.onTabClick, selectedTab: tabs[selectedTabIndex] }));\n    };\n    Object.defineProperty(UpgradeAssistantTabsUI.prototype, \"tabs\", {\n        get: function () {\n            var intl = this.props.intl;\n            var _a = this.state, loadingError = _a.loadingError, loadingState = _a.loadingState, checkupData = _a.checkupData;\n            var commonProps = {\n                loadingError: loadingError,\n                loadingState: loadingState,\n                refreshCheckupData: this.loadData,\n                setSelectedTabIndex: this.setSelectedTabIndex,\n            };\n            return [\n                {\n                    id: 'overview',\n                    name: intl.formatMessage({\n                        id: 'xpack.upgradeAssistant.overviewTab.overviewTabTitle',\n                        defaultMessage: 'Overview',\n                    }),\n                    content: React.createElement(OverviewTab, tslib_1.__assign({ checkupData: checkupData }, commonProps)),\n                },\n                {\n                    id: 'cluster',\n                    name: intl.formatMessage({\n                        id: 'xpack.upgradeAssistant.checkupTab.clusterTabLabel',\n                        defaultMessage: 'Cluster',\n                    }),\n                    content: (React.createElement(CheckupTab, tslib_1.__assign({ key: \"cluster\", deprecations: checkupData ? checkupData.cluster : undefined, checkupLabel: intl.formatMessage({\n                            id: 'xpack.upgradeAssistant.tabs.checkupTab.clusterLabel',\n                            defaultMessage: 'cluster',\n                        }) }, commonProps))),\n                },\n                {\n                    id: 'indices',\n                    name: intl.formatMessage({\n                        id: 'xpack.upgradeAssistant.checkupTab.indicesTabLabel',\n                        defaultMessage: 'Indices',\n                    }),\n                    content: (React.createElement(CheckupTab, tslib_1.__assign({ key: \"indices\", deprecations: checkupData ? checkupData.indices : undefined, checkupLabel: intl.formatMessage({\n                            id: 'xpack.upgradeAssistant.checkupTab.indexLabel',\n                            defaultMessage: 'index',\n                        }), showBackupWarning: true }, commonProps))),\n                },\n            ];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    UpgradeAssistantTabsUI.prototype.sendTelemetryInfo = function (tabName) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        // In case we don't have any data yet, we wanna to ignore the\n                        // telemetry info update\n                        if (this.state.loadingState !== LoadingState.Success) {\n                            return [2 /*return*/];\n                        }\n                        this.setState({ telemetryState: TelemetryState.Running });\n                        return [4 /*yield*/, kfetch({\n                                pathname: '/api/upgrade_assistant/telemetry/ui_open',\n                                method: 'PUT',\n                                body: JSON.stringify(set({}, tabName, true)),\n                            })];\n                    case 1:\n                        _a.sent();\n                        this.setState({ telemetryState: TelemetryState.Complete });\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    return UpgradeAssistantTabsUI;\n}(React.Component));\nexport { UpgradeAssistantTabsUI };\nexport var UpgradeAssistantTabs = injectI18n(UpgradeAssistantTabsUI);\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/upgrade_assistant/public/components/tabs.tsx","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/upgrade_assistant/public/components/tabs.tsx"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport axios from 'axios';\nimport { findIndex, get, set } from 'lodash';\nimport React from 'react';\n\nimport {\n  EuiEmptyPrompt,\n  EuiPageContent,\n  EuiPageContentBody,\n  EuiTabbedContent,\n  EuiTabbedContentTab,\n} from '@elastic/eui';\nimport { FormattedMessage, injectI18n } from '@kbn/i18n/react';\n\nimport chrome from 'ui/chrome';\nimport { kfetch } from 'ui/kfetch';\n\nimport { UpgradeAssistantStatus } from '../../server/lib/es_migration_apis';\nimport { CheckupTab } from './tabs/checkup';\nimport { OverviewTab } from './tabs/overview';\nimport { LoadingState, TelemetryState, UpgradeAssistantTabProps } from './types';\n\nenum ClusterUpgradeState {\n  needsUpgrade,\n  partiallyUpgraded,\n  upgraded,\n}\n\ninterface TabsState {\n  loadingState: LoadingState;\n  loadingError?: Error;\n  checkupData?: UpgradeAssistantStatus;\n  selectedTabIndex: number;\n  telemetryState: TelemetryState;\n  clusterUpgradeState: ClusterUpgradeState;\n}\n\nexport class UpgradeAssistantTabsUI extends React.Component<\n  ReactIntl.InjectedIntlProps,\n  TabsState\n> {\n  constructor(props: ReactIntl.InjectedIntlProps) {\n    super(props);\n\n    this.state = {\n      loadingState: LoadingState.Loading,\n      clusterUpgradeState: ClusterUpgradeState.needsUpgrade,\n      selectedTabIndex: 0,\n      telemetryState: TelemetryState.Complete,\n    };\n  }\n\n  public async componentDidMount() {\n    await this.loadData();\n\n    // Send telemetry info about the default selected tab\n    this.sendTelemetryInfo(this.tabs[this.state.selectedTabIndex].id);\n  }\n\n  public render() {\n    const { selectedTabIndex, telemetryState, clusterUpgradeState } = this.state;\n    const tabs = this.tabs;\n\n    if (clusterUpgradeState === ClusterUpgradeState.partiallyUpgraded) {\n      return (\n        <EuiPageContent>\n          <EuiPageContentBody>\n            <EuiEmptyPrompt\n              iconType=\"logoElasticsearch\"\n              title={\n                <h2>\n                  <FormattedMessage\n                    id=\"xpack.upgradeAssistant.tabs.upgradingInterstitial.upgradingTitle\"\n                    defaultMessage=\"Your cluster is upgrading\"\n                  />\n                </h2>\n              }\n              body={\n                <p>\n                  <FormattedMessage\n                    id=\"xpack.upgradeAssistant.tabs.upgradingInterstitial.upgradingDescription\"\n                    defaultMessage=\"One or more Elasticsearch nodes have a newer version of\n                      Elasticsearch than Kibana. Once all your nodes are upgraded, upgrade Kibana.\"\n                  />\n                </p>\n              }\n            />\n          </EuiPageContentBody>\n        </EuiPageContent>\n      );\n    } else if (clusterUpgradeState === ClusterUpgradeState.upgraded) {\n      return (\n        <EuiPageContent>\n          <EuiPageContentBody>\n            <EuiEmptyPrompt\n              iconType=\"logoElasticsearch\"\n              title={\n                <h2>\n                  <FormattedMessage\n                    id=\"xpack.upgradeAssistant.tabs.upgradingInterstitial.upgradeCompleteTitle\"\n                    defaultMessage=\"Your cluster has been upgraded\"\n                  />\n                </h2>\n              }\n              body={\n                <p>\n                  <FormattedMessage\n                    id=\"xpack.upgradeAssistant.tabs.upgradingInterstitial.upgradeCompleteDescription\"\n                    defaultMessage=\"All Elasticsearch nodes have been upgraded. You may now upgrade Kibana.\"\n                  />\n                </p>\n              }\n            />\n          </EuiPageContentBody>\n        </EuiPageContent>\n      );\n    }\n\n    return (\n      <EuiTabbedContent\n        data-test-subj={\n          telemetryState === TelemetryState.Running ? 'upgradeAssistantTelemetryRunning' : undefined\n        }\n        tabs={tabs}\n        onTabClick={this.onTabClick}\n        selectedTab={tabs[selectedTabIndex]}\n      />\n    );\n  }\n\n  private onTabClick = (selectedTab: EuiTabbedContentTab) => {\n    const selectedTabIndex = findIndex(this.tabs, { id: selectedTab.id });\n    if (selectedTabIndex === -1) {\n      throw new Error(`Clicked tab did not exist in tabs array`);\n    }\n\n    // Send telemetry info about the current selected tab\n    // only in case the clicked tab id it's different from the\n    // current selected tab id\n    if (this.tabs[this.state.selectedTabIndex].id !== selectedTab.id) {\n      this.sendTelemetryInfo(selectedTab.id);\n    }\n\n    this.setSelectedTabIndex(selectedTabIndex);\n  };\n\n  private setSelectedTabIndex = (selectedTabIndex: number) => {\n    this.setState({ selectedTabIndex });\n  };\n\n  private loadData = async () => {\n    try {\n      this.setState({ loadingState: LoadingState.Loading });\n      const resp = await axios.get(chrome.addBasePath('/api/upgrade_assistant/status'));\n      this.setState({\n        loadingState: LoadingState.Success,\n        checkupData: resp.data,\n      });\n    } catch (e) {\n      if (get(e, 'response.status') === 426) {\n        this.setState({\n          loadingState: LoadingState.Success,\n          clusterUpgradeState: get(e, 'response.data.attributes.allNodesUpgraded', false)\n            ? ClusterUpgradeState.upgraded\n            : ClusterUpgradeState.partiallyUpgraded,\n        });\n      } else {\n        this.setState({ loadingState: LoadingState.Error, loadingError: e });\n      }\n    }\n  };\n\n  private get tabs() {\n    const { intl } = this.props;\n    const { loadingError, loadingState, checkupData } = this.state;\n    const commonProps: UpgradeAssistantTabProps = {\n      loadingError,\n      loadingState,\n      refreshCheckupData: this.loadData,\n      setSelectedTabIndex: this.setSelectedTabIndex,\n    };\n\n    return [\n      {\n        id: 'overview',\n        name: intl.formatMessage({\n          id: 'xpack.upgradeAssistant.overviewTab.overviewTabTitle',\n          defaultMessage: 'Overview',\n        }),\n        content: <OverviewTab checkupData={checkupData} {...commonProps} />,\n      },\n      {\n        id: 'cluster',\n        name: intl.formatMessage({\n          id: 'xpack.upgradeAssistant.checkupTab.clusterTabLabel',\n          defaultMessage: 'Cluster',\n        }),\n        content: (\n          <CheckupTab\n            key=\"cluster\"\n            deprecations={checkupData ? checkupData.cluster : undefined}\n            checkupLabel={intl.formatMessage({\n              id: 'xpack.upgradeAssistant.tabs.checkupTab.clusterLabel',\n              defaultMessage: 'cluster',\n            })}\n            {...commonProps}\n          />\n        ),\n      },\n      {\n        id: 'indices',\n        name: intl.formatMessage({\n          id: 'xpack.upgradeAssistant.checkupTab.indicesTabLabel',\n          defaultMessage: 'Indices',\n        }),\n        content: (\n          <CheckupTab\n            key=\"indices\"\n            deprecations={checkupData ? checkupData.indices : undefined}\n            checkupLabel={intl.formatMessage({\n              id: 'xpack.upgradeAssistant.checkupTab.indexLabel',\n              defaultMessage: 'index',\n            })}\n            showBackupWarning\n            {...commonProps}\n          />\n        ),\n      },\n    ];\n  }\n\n  private async sendTelemetryInfo(tabName: string) {\n    // In case we don't have any data yet, we wanna to ignore the\n    // telemetry info update\n    if (this.state.loadingState !== LoadingState.Success) {\n      return;\n    }\n\n    this.setState({ telemetryState: TelemetryState.Running });\n\n    await kfetch({\n      pathname: '/api/upgrade_assistant/telemetry/ui_open',\n      method: 'PUT',\n      body: JSON.stringify(set({}, tabName, true)),\n    });\n\n    this.setState({ telemetryState: TelemetryState.Complete });\n  }\n}\n\nexport const UpgradeAssistantTabs = injectI18n(UpgradeAssistantTabsUI);\n"]}]}