{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/src/ui/public/utils/math.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/utils/math.ts","mtime":1567631711765},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/**\n * Calculates the greates common divisor of two numbers. This will be the\n * greatest positive integer number, that both input values share as a divisor.\n *\n * This method does not properly work for fractional (non integer) numbers. If you\n * pass in fractional numbers there usually will be an output, but that's not necessarily\n * the greatest common divisor of those two numbers.\n */\nexport function greatestCommonDivisor(a, b) {\n    return a === 0 ? Math.abs(b) : greatestCommonDivisor(b % a, a);\n}\n/**\n * Calculates the least common multiple of two numbers. The least common multiple\n * is the smallest positive integer number, that is divisible by both input parameters.\n *\n * Since this calculation suffers from rounding issues in decimal values, this method\n * won't work for passing in fractional (non integer) numbers. It will return a value,\n * but that value won't necessarily be the mathematical correct least common multiple.\n */\nexport function leastCommonMultiple(a, b) {\n    return Math.abs((a * b) / greatestCommonDivisor(a, b));\n}\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/src/ui/public/utils/math.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/src/ui/public/utils/math.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;GAiBG;AAEH;;;;;;;GAOG;AACH,MAAM,UAAU,qBAAqB,CAAC,CAAS,EAAE,CAAS;IACxD,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,qBAAqB,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;AACjE,CAAC;AAED;;;;;;;GAOG;AACH,MAAM,UAAU,mBAAmB,CAAC,CAAS,EAAE,CAAS;IACtD,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,qBAAqB,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AACzD,CAAC","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/**\n * Calculates the greates common divisor of two numbers. This will be the\n * greatest positive integer number, that both input values share as a divisor.\n *\n * This method does not properly work for fractional (non integer) numbers. If you\n * pass in fractional numbers there usually will be an output, but that's not necessarily\n * the greatest common divisor of those two numbers.\n */\nexport function greatestCommonDivisor(a: number, b: number): number {\n  return a === 0 ? Math.abs(b) : greatestCommonDivisor(b % a, a);\n}\n\n/**\n * Calculates the least common multiple of two numbers. The least common multiple\n * is the smallest positive integer number, that is divisible by both input parameters.\n *\n * Since this calculation suffers from rounding issues in decimal values, this method\n * won't work for passing in fractional (non integer) numbers. It will return a value,\n * but that value won't necessarily be the mathematical correct least common multiple.\n */\nexport function leastCommonMultiple(a: number, b: number): number {\n  return Math.abs((a * b) / greatestCommonDivisor(a, b));\n}\n"]}]}