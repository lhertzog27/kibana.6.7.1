{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/src/ui/public/visualize/loader/visualize_loader.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/visualize/loader/visualize_loader.ts","mtime":1567631711782},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport * as tslib_1 from \"tslib\";\n/**\n * IMPORTANT: If you make changes to this API, please make sure to check that\n * the docs (docs/development/visualize/development-create-visualization.asciidoc)\n * are up to date.\n */\nimport chrome from '../../chrome';\nimport { FilterBarQueryFilterProvider } from '../../filter_bar/query_filter';\nimport { EmbeddedVisualizeHandler } from './embedded_visualize_handler';\nvar VisualizeLoader = /** @class */ (function () {\n    function VisualizeLoader(savedVisualizations, Private) {\n        this.savedVisualizations = savedVisualizations;\n        this.Private = Private;\n    }\n    /**\n     * Renders a saved visualization specified by its id into a DOM element.\n     *\n     * @param element The DOM element to render the visualization into.\n     *    You can alternatively pass a jQuery element instead.\n     * @param id The id of the saved visualization. This is the id of the\n     *    saved object that is stored in the .kibana index.\n     * @param params A list of parameters that will influence rendering.\n     *\n     * @return A promise that resolves to the\n     *    handler for this visualization as soon as the saved object could be found.\n     */\n    VisualizeLoader.prototype.embedVisualizationWithId = function (element, savedVisualizationId, params) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                return [2 /*return*/, new Promise(function (resolve, reject) {\n                        _this.savedVisualizations.get(savedVisualizationId).then(function (savedObj) {\n                            var handler = _this.renderVis(element, savedObj, params);\n                            resolve(handler);\n                        }, reject);\n                    })];\n            });\n        });\n    };\n    /**\n     * Renders a saved visualization specified by its savedObject into a DOM element.\n     * In most of the cases you will need this method, since it allows you to specify\n     * filters, handlers, queries, etc. on the savedObject before rendering.\n     *\n     * We do not encourage you to use this method, since it will most likely be changed\n     * or removed in a future version of Kibana. Rather embed a visualization by its id\n     * via the {@link #embedVisualizationWithId} method.\n     *\n     * @deprecated You should rather embed by id, since this method will be removed in the future.\n     * @param element The DOM element to render the visualization into.\n     *    You can alternatively pass a jQuery element instead.\n     * @param savedObj The savedObject as it could be retrieved by the\n     *    `savedVisualizations` service.\n     * @param params A list of parameters that will influence rendering.\n     *\n     * @return The handler to the visualization.\n     */\n    VisualizeLoader.prototype.embedVisualizationWithSavedObject = function (el, savedObj, params) {\n        return this.renderVis(el, savedObj, params);\n    };\n    /**\n     * Returns a promise, that resolves to a list of all saved visualizations.\n     *\n     * @return Resolves with a list of all saved visualizations as\n     *    returned by the `savedVisualizations` service in Kibana.\n     */\n    VisualizeLoader.prototype.getVisualizationList = function () {\n        return this.savedVisualizations.find().then(function (result) { return result.hits; });\n    };\n    VisualizeLoader.prototype.renderVis = function (container, savedObj, params) {\n        var vis = savedObj.vis, description = savedObj.description, searchSource = savedObj.searchSource;\n        vis.description = description;\n        vis.searchSource = searchSource;\n        if (!params.append) {\n            container.innerHTML = '';\n        }\n        var element = document.createElement('div');\n        element.className = 'visualize';\n        element.setAttribute('data-test-subj', 'visualizationLoader');\n        container.appendChild(element);\n        // We need the container to have display: flex so visualization will render correctly\n        container.style.display = 'flex';\n        // If params specified cssClass, we will set this to the element.\n        if (params.cssClass) {\n            params.cssClass.split(' ').forEach(function (cssClass) {\n                element.classList.add(cssClass);\n            });\n        }\n        // Apply data- attributes to the element if specified\n        var dataAttrs = params.dataAttrs;\n        if (dataAttrs) {\n            Object.keys(dataAttrs).forEach(function (key) {\n                element.setAttribute(\"data-\" + key, dataAttrs[key]);\n            });\n        }\n        var handlerParams = tslib_1.__assign({}, params, { \n            // lets add query filter angular service to the params\n            queryFilter: this.Private(FilterBarQueryFilterProvider), \n            // lets add Private to the params, we'll need to pass it to visualize later\n            Private: this.Private });\n        return new EmbeddedVisualizeHandler(element, savedObj, handlerParams);\n    };\n    return VisualizeLoader;\n}());\nexport { VisualizeLoader };\nfunction VisualizeLoaderProvider(savedVisualizations, Private) {\n    return new VisualizeLoader(savedVisualizations, Private);\n}\n/**\n * Returns a promise, that resolves with the visualize loader, once it's ready.\n * @return A promise, that resolves to the visualize loader.\n */\nfunction getVisualizeLoader() {\n    return chrome.dangerouslyGetActiveInjector().then(function ($injector) {\n        var Private = $injector.get('Private');\n        return Private(VisualizeLoaderProvider);\n    });\n}\nexport { getVisualizeLoader, VisualizeLoaderProvider };\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/src/ui/public/visualize/loader/visualize_loader.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/src/ui/public/visualize/loader/visualize_loader.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;GAiBG;;AAEH;;;;GAIG;AAEH,OAAO,MAAM,MAAM,cAAc,CAAC;AAClC,OAAO,EAAE,4BAA4B,EAAE,MAAM,+BAA+B,CAAC;AAE7E,OAAO,EAAE,wBAAwB,EAAE,MAAM,8BAA8B,CAAC;AAGxE;IACE,yBAA6B,mBAAwB,EAAmB,OAAiB;QAA5D,wBAAmB,GAAnB,mBAAmB,CAAK;QAAmB,YAAO,GAAP,OAAO,CAAU;IAAG,CAAC;IAE7F;;;;;;;;;;;OAWG;IACU,kDAAwB,GAArC,UACE,OAAoB,EACpB,oBAA4B,EAC5B,MAA6B;;;;gBAE7B,sBAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;wBACjC,KAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC,IAAI,CAAC,UAAC,QAAwB;4BAC/E,IAAM,OAAO,GAAG,KAAI,CAAC,SAAS,CAAC,OAAO,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC;4BAC1D,OAAO,CAAC,OAAO,CAAC,CAAC;wBACnB,CAAC,EAAE,MAAM,CAAC,CAAC;oBACb,CAAC,CAAC,EAAC;;;KACJ;IAED;;;;;;;;;;;;;;;;;OAiBG;IACI,2DAAiC,GAAxC,UACE,EAAe,EACf,QAAwB,EACxB,MAA6B;QAE7B,OAAO,IAAI,CAAC,SAAS,CAAC,EAAE,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC;IAC9C,CAAC;IAED;;;;;OAKG;IACI,8CAAoB,GAA3B;QACE,OAAO,IAAI,CAAC,mBAAmB,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,UAAC,MAAW,IAAK,OAAA,MAAM,CAAC,IAAI,EAAX,CAAW,CAAC,CAAC;IAC5E,CAAC;IAEO,mCAAS,GAAjB,UACE,SAAsB,EACtB,QAAwB,EACxB,MAA6B;QAErB,IAAA,kBAAG,EAAE,kCAAW,EAAE,oCAAY,CAAc;QAEpD,GAAG,CAAC,WAAW,GAAG,WAAW,CAAC;QAC9B,GAAG,CAAC,YAAY,GAAG,YAAY,CAAC;QAEhC,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE;YAClB,SAAS,CAAC,SAAS,GAAG,EAAE,CAAC;SAC1B;QAED,IAAM,OAAO,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAC9C,OAAO,CAAC,SAAS,GAAG,WAAW,CAAC;QAChC,OAAO,CAAC,YAAY,CAAC,gBAAgB,EAAE,qBAAqB,CAAC,CAAC;QAC9D,SAAS,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;QAC/B,qFAAqF;QACrF,SAAS,CAAC,KAAK,CAAC,OAAO,GAAG,MAAM,CAAC;QAEjC,iEAAiE;QACjE,IAAI,MAAM,CAAC,QAAQ,EAAE;YACnB,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,UAAA,QAAQ;gBACzC,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;YAClC,CAAC,CAAC,CAAC;SACJ;QAED,qDAAqD;QACrD,IAAM,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC;QACnC,IAAI,SAAS,EAAE;YACb,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,UAAA,GAAG;gBAChC,OAAO,CAAC,YAAY,CAAC,UAAQ,GAAK,EAAE,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;YACtD,CAAC,CAAC,CAAC;SACJ;QAED,IAAM,aAAa,wBACd,MAAM;YACT,sDAAsD;YACtD,WAAW,EAAE,IAAI,CAAC,OAAO,CAAC,4BAA4B,CAAC;YACvD,2EAA2E;YAC3E,OAAO,EAAE,IAAI,CAAC,OAAO,GACtB,CAAC;QAEF,OAAO,IAAI,wBAAwB,CAAC,OAAO,EAAE,QAAQ,EAAE,aAAa,CAAC,CAAC;IACxE,CAAC;IACH,sBAAC;AAAD,CAAC,AA9GD,IA8GC;;AAED,SAAS,uBAAuB,CAAC,mBAAwB,EAAE,OAAiB;IAC1E,OAAO,IAAI,eAAe,CAAC,mBAAmB,EAAE,OAAO,CAAC,CAAC;AAC3D,CAAC;AAED;;;GAGG;AACH,SAAS,kBAAkB;IACzB,OAAO,MAAM,CAAC,4BAA4B,EAAE,CAAC,IAAI,CAAC,UAAA,SAAS;QACzD,IAAM,OAAO,GAAa,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;QACnD,OAAO,OAAO,CAAC,uBAAuB,CAAC,CAAC;IAC1C,CAAC,CAAC,CAAC;AACL,CAAC;AAED,OAAO,EAAE,kBAAkB,EAAE,uBAAuB,EAAE,CAAC","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/**\n * IMPORTANT: If you make changes to this API, please make sure to check that\n * the docs (docs/development/visualize/development-create-visualization.asciidoc)\n * are up to date.\n */\n\nimport chrome from '../../chrome';\nimport { FilterBarQueryFilterProvider } from '../../filter_bar/query_filter';\nimport { IPrivate } from '../../private';\nimport { EmbeddedVisualizeHandler } from './embedded_visualize_handler';\nimport { VisSavedObject, VisualizeLoaderParams } from './types';\n\nexport class VisualizeLoader {\n  constructor(private readonly savedVisualizations: any, private readonly Private: IPrivate) {}\n\n  /**\n   * Renders a saved visualization specified by its id into a DOM element.\n   *\n   * @param element The DOM element to render the visualization into.\n   *    You can alternatively pass a jQuery element instead.\n   * @param id The id of the saved visualization. This is the id of the\n   *    saved object that is stored in the .kibana index.\n   * @param params A list of parameters that will influence rendering.\n   *\n   * @return A promise that resolves to the\n   *    handler for this visualization as soon as the saved object could be found.\n   */\n  public async embedVisualizationWithId(\n    element: HTMLElement,\n    savedVisualizationId: string,\n    params: VisualizeLoaderParams\n  ) {\n    return new Promise((resolve, reject) => {\n      this.savedVisualizations.get(savedVisualizationId).then((savedObj: VisSavedObject) => {\n        const handler = this.renderVis(element, savedObj, params);\n        resolve(handler);\n      }, reject);\n    });\n  }\n\n  /**\n   * Renders a saved visualization specified by its savedObject into a DOM element.\n   * In most of the cases you will need this method, since it allows you to specify\n   * filters, handlers, queries, etc. on the savedObject before rendering.\n   *\n   * We do not encourage you to use this method, since it will most likely be changed\n   * or removed in a future version of Kibana. Rather embed a visualization by its id\n   * via the {@link #embedVisualizationWithId} method.\n   *\n   * @deprecated You should rather embed by id, since this method will be removed in the future.\n   * @param element The DOM element to render the visualization into.\n   *    You can alternatively pass a jQuery element instead.\n   * @param savedObj The savedObject as it could be retrieved by the\n   *    `savedVisualizations` service.\n   * @param params A list of parameters that will influence rendering.\n   *\n   * @return The handler to the visualization.\n   */\n  public embedVisualizationWithSavedObject(\n    el: HTMLElement,\n    savedObj: VisSavedObject,\n    params: VisualizeLoaderParams\n  ) {\n    return this.renderVis(el, savedObj, params);\n  }\n\n  /**\n   * Returns a promise, that resolves to a list of all saved visualizations.\n   *\n   * @return Resolves with a list of all saved visualizations as\n   *    returned by the `savedVisualizations` service in Kibana.\n   */\n  public getVisualizationList(): Promise<any[]> {\n    return this.savedVisualizations.find().then((result: any) => result.hits);\n  }\n\n  private renderVis(\n    container: HTMLElement,\n    savedObj: VisSavedObject,\n    params: VisualizeLoaderParams\n  ) {\n    const { vis, description, searchSource } = savedObj;\n\n    vis.description = description;\n    vis.searchSource = searchSource;\n\n    if (!params.append) {\n      container.innerHTML = '';\n    }\n\n    const element = document.createElement('div');\n    element.className = 'visualize';\n    element.setAttribute('data-test-subj', 'visualizationLoader');\n    container.appendChild(element);\n    // We need the container to have display: flex so visualization will render correctly\n    container.style.display = 'flex';\n\n    // If params specified cssClass, we will set this to the element.\n    if (params.cssClass) {\n      params.cssClass.split(' ').forEach(cssClass => {\n        element.classList.add(cssClass);\n      });\n    }\n\n    // Apply data- attributes to the element if specified\n    const dataAttrs = params.dataAttrs;\n    if (dataAttrs) {\n      Object.keys(dataAttrs).forEach(key => {\n        element.setAttribute(`data-${key}`, dataAttrs[key]);\n      });\n    }\n\n    const handlerParams = {\n      ...params,\n      // lets add query filter angular service to the params\n      queryFilter: this.Private(FilterBarQueryFilterProvider),\n      // lets add Private to the params, we'll need to pass it to visualize later\n      Private: this.Private,\n    };\n\n    return new EmbeddedVisualizeHandler(element, savedObj, handlerParams);\n  }\n}\n\nfunction VisualizeLoaderProvider(savedVisualizations: any, Private: IPrivate) {\n  return new VisualizeLoader(savedVisualizations, Private);\n}\n\n/**\n * Returns a promise, that resolves with the visualize loader, once it's ready.\n * @return A promise, that resolves to the visualize loader.\n */\nfunction getVisualizeLoader(): Promise<VisualizeLoader> {\n  return chrome.dangerouslyGetActiveInjector().then($injector => {\n    const Private: IPrivate = $injector.get('Private');\n    return Private(VisualizeLoaderProvider);\n  });\n}\n\nexport { getVisualizeLoader, VisualizeLoaderProvider };\n"]}]}