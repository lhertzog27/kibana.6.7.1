{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/public/lib/aeroelastic/dom.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/public/lib/aeroelastic/dom.ts","mtime":1567631711931},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n// converts a transform matrix to a CSS string\nexport var matrixToCSS = function (transformMatrix) {\n    return transformMatrix ? 'matrix3d(' + transformMatrix.join(',') + ')' : 'translate3d(0,0,0)';\n};\n// converts to string, and adds `px` if non-zero\nexport var px = function (value) { return (value === 0 ? '0' : value + 'px'); };\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/public/lib/aeroelastic/dom.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/public/lib/aeroelastic/dom.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAIH,8CAA8C;AAC9C,MAAM,CAAC,IAAM,WAAW,GAAG,UAAC,eAAkC;IAC5D,OAAA,eAAe,CAAC,CAAC,CAAC,WAAW,GAAG,eAAe,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,oBAAoB;AAAtF,CAAsF,CAAC;AAEzF,gDAAgD;AAChD,MAAM,CAAC,IAAM,EAAE,GAAG,UAAC,KAAa,IAAa,OAAA,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,CAAC,EAAlC,CAAkC,CAAC","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport { transformMatrix3d } from './types';\n\n// converts a transform matrix to a CSS string\nexport const matrixToCSS = (transformMatrix: transformMatrix3d): string =>\n  transformMatrix ? 'matrix3d(' + transformMatrix.join(',') + ')' : 'translate3d(0,0,0)';\n\n// converts to string, and adds `px` if non-zero\nexport const px = (value: number): string => (value === 0 ? '0' : value + 'px');\n"]}]}