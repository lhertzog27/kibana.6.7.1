{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/components/waffle/node.tsx","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/components/waffle/node.tsx","mtime":1567631711982},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport * as tslib_1 from \"tslib\";\nimport { EuiToolTip } from '@elastic/eui';\nimport moment from 'moment';\nimport { darken, readableColor } from 'polished';\nimport React from 'react';\nimport styled from 'styled-components';\nimport { colorFromValue } from './lib/color_from_value';\nimport { NodeContextMenu } from './node_context_menu';\nvar initialState = {\n    isPopoverOpen: false,\n};\nvar Node = /** @class */ (function (_super) {\n    tslib_1.__extends(Node, _super);\n    function Node() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.state = initialState;\n        _this.togglePopover = function () {\n            _this.setState(function (prevState) { return ({ isPopoverOpen: !prevState.isPopoverOpen }); });\n        };\n        _this.closePopover = function () {\n            if (_this.state.isPopoverOpen) {\n                _this.setState({ isPopoverOpen: false });\n            }\n        };\n        return _this;\n    }\n    Node.prototype.render = function () {\n        var _a = this.props, nodeType = _a.nodeType, node = _a.node, options = _a.options, squareSize = _a.squareSize, bounds = _a.bounds, formatter = _a.formatter, timeRange = _a.timeRange;\n        var isPopoverOpen = this.state.isPopoverOpen;\n        var metric = node.metric;\n        var valueMode = squareSize > 70;\n        var ellipsisMode = squareSize > 30;\n        var rawValue = (metric && metric.value) || 0;\n        var color = colorFromValue(options.legend, rawValue, bounds);\n        var value = formatter(rawValue);\n        var newTimerange = tslib_1.__assign({}, timeRange, { from: moment(timeRange.to)\n                .subtract(1, 'hour')\n                .valueOf() });\n        return (React.createElement(NodeContextMenu, { node: node, nodeType: nodeType, isPopoverOpen: isPopoverOpen, closePopover: this.closePopover, options: options, timeRange: newTimerange },\n            React.createElement(EuiToolTip, { position: \"top\", content: node.name + \" | \" + value },\n                React.createElement(NodeContainer, { style: { width: squareSize || 0, height: squareSize || 0 }, onClick: this.togglePopover },\n                    React.createElement(SquareOuter, { color: color },\n                        React.createElement(SquareInner, { color: color }, valueMode ? (React.createElement(ValueInner, null,\n                            React.createElement(Label, { color: color }, node.name),\n                            React.createElement(Value, { color: color }, value))) : (ellipsisMode && (React.createElement(ValueInner, null,\n                            React.createElement(Label, { color: color }, \"...\"))))))))));\n    };\n    return Node;\n}(React.PureComponent));\nexport { Node };\nvar NodeContainer = styled.div(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([\"\\n  position: relative;\\n\"], [\"\\n  position: relative;\\n\"])));\nvar SquareOuter = styled('div')(templateObject_2 || (templateObject_2 = tslib_1.__makeTemplateObject([\"\\n  position: absolute;\\n  top: 4px;\\n  left: 4px;\\n  bottom: 4px;\\n  right: 4px;\\n  background-color: \", \";\\n  border-radius: 3px;\\n  box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.2);\\n\"], [\"\\n  position: absolute;\\n  top: 4px;\\n  left: 4px;\\n  bottom: 4px;\\n  right: 4px;\\n  background-color: \", \";\\n  border-radius: 3px;\\n  box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.2);\\n\"])), function (props) { return darken(0.1, props.color); });\nvar SquareInner = styled('div')(templateObject_3 || (templateObject_3 = tslib_1.__makeTemplateObject([\"\\n  cursor: pointer;\\n  position: absolute;\\n  top: 0;\\n  right: 0;\\n  bottom: 2px;\\n  left: 0;\\n  border-radius: 3px;\\n  background-color: \", \";\\n\"], [\"\\n  cursor: pointer;\\n  position: absolute;\\n  top: 0;\\n  right: 0;\\n  bottom: 2px;\\n  left: 0;\\n  border-radius: 3px;\\n  background-color: \", \";\\n\"])), function (props) { return props.color; });\nvar ValueInner = styled.div(templateObject_4 || (templateObject_4 = tslib_1.__makeTemplateObject([\"\\n  position: absolute;\\n  top: 0;\\n  left: 0;\\n  right: 0;\\n  bottom: 0;\\n  display: flex;\\n  line-height: 1.2em;\\n  align-items: center;\\n  align-content: center;\\n  padding: 1em;\\n  overflow: hidden;\\n  flex-wrap: wrap;\\n\"], [\"\\n  position: absolute;\\n  top: 0;\\n  left: 0;\\n  right: 0;\\n  bottom: 0;\\n  display: flex;\\n  line-height: 1.2em;\\n  align-items: center;\\n  align-content: center;\\n  padding: 1em;\\n  overflow: hidden;\\n  flex-wrap: wrap;\\n\"])));\nvar Value = styled('div')(templateObject_5 || (templateObject_5 = tslib_1.__makeTemplateObject([\"\\n  font-weight: bold;\\n  font-size: 0.9em;\\n  text-align: center;\\n  width: 100%;\\n  flex: 1 0 auto;\\n  line-height: 1.2em;\\n  color: \", \";\\n\"], [\"\\n  font-weight: bold;\\n  font-size: 0.9em;\\n  text-align: center;\\n  width: 100%;\\n  flex: 1 0 auto;\\n  line-height: 1.2em;\\n  color: \", \";\\n\"])), function (props) { return readableColor(props.color); });\nvar Label = styled('div')(templateObject_6 || (templateObject_6 = tslib_1.__makeTemplateObject([\"\\n  text-overflow: ellipsis;\\n  font-size: 0.7em;\\n  margin-bottom: 0.7em;\\n  text-align: center;\\n  width: 100%;\\n  flex: 1 0 auto;\\n  white-space: nowrap;\\n  overflow: hidden;\\n  color: \", \";\\n\"], [\"\\n  text-overflow: ellipsis;\\n  font-size: 0.7em;\\n  margin-bottom: 0.7em;\\n  text-align: center;\\n  width: 100%;\\n  flex: 1 0 auto;\\n  white-space: nowrap;\\n  overflow: hidden;\\n  color: \", \";\\n\"])), function (props) { return readableColor(props.color); });\nvar templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5, templateObject_6;\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/components/waffle/node.tsx","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/components/waffle/node.tsx"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport { EuiToolTip } from '@elastic/eui';\nimport moment from 'moment';\nimport { darken, readableColor } from 'polished';\nimport React from 'react';\nimport styled from 'styled-components';\n\nimport { InfraNodeType } from '../../../server/lib/adapters/nodes';\nimport { InfraTimerangeInput } from '../../graphql/types';\nimport { InfraWaffleMapBounds, InfraWaffleMapNode, InfraWaffleMapOptions } from '../../lib/lib';\nimport { colorFromValue } from './lib/color_from_value';\nimport { NodeContextMenu } from './node_context_menu';\n\nconst initialState = {\n  isPopoverOpen: false,\n};\n\ntype State = Readonly<typeof initialState>;\n\ninterface Props {\n  squareSize: number;\n  options: InfraWaffleMapOptions;\n  node: InfraWaffleMapNode;\n  formatter: (val: number) => string;\n  bounds: InfraWaffleMapBounds;\n  nodeType: InfraNodeType;\n  timeRange: InfraTimerangeInput;\n}\n\nexport class Node extends React.PureComponent<Props, State> {\n  public readonly state: State = initialState;\n  public render() {\n    const { nodeType, node, options, squareSize, bounds, formatter, timeRange } = this.props;\n    const { isPopoverOpen } = this.state;\n    const { metric } = node;\n    const valueMode = squareSize > 70;\n    const ellipsisMode = squareSize > 30;\n    const rawValue = (metric && metric.value) || 0;\n    const color = colorFromValue(options.legend, rawValue, bounds);\n    const value = formatter(rawValue);\n    const newTimerange = {\n      ...timeRange,\n      from: moment(timeRange.to)\n        .subtract(1, 'hour')\n        .valueOf(),\n    };\n    return (\n      <NodeContextMenu\n        node={node}\n        nodeType={nodeType}\n        isPopoverOpen={isPopoverOpen}\n        closePopover={this.closePopover}\n        options={options}\n        timeRange={newTimerange}\n      >\n        <EuiToolTip position=\"top\" content={`${node.name} | ${value}`}>\n          <NodeContainer\n            style={{ width: squareSize || 0, height: squareSize || 0 }}\n            onClick={this.togglePopover}\n          >\n            <SquareOuter color={color}>\n              <SquareInner color={color}>\n                {valueMode ? (\n                  <ValueInner>\n                    <Label color={color}>{node.name}</Label>\n                    <Value color={color}>{value}</Value>\n                  </ValueInner>\n                ) : (\n                  ellipsisMode && (\n                    <ValueInner>\n                      <Label color={color}>...</Label>\n                    </ValueInner>\n                  )\n                )}\n              </SquareInner>\n            </SquareOuter>\n          </NodeContainer>\n        </EuiToolTip>\n      </NodeContextMenu>\n    );\n  }\n\n  private togglePopover = () => {\n    this.setState(prevState => ({ isPopoverOpen: !prevState.isPopoverOpen }));\n  };\n\n  private closePopover = () => {\n    if (this.state.isPopoverOpen) {\n      this.setState({ isPopoverOpen: false });\n    }\n  };\n}\n\nconst NodeContainer = styled.div`\n  position: relative;\n`;\n\ninterface ColorProps {\n  color: string;\n}\n\nconst SquareOuter = styled<ColorProps, 'div'>('div')`\n  position: absolute;\n  top: 4px;\n  left: 4px;\n  bottom: 4px;\n  right: 4px;\n  background-color: ${props => darken(0.1, props.color)};\n  border-radius: 3px;\n  box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.2);\n`;\n\nconst SquareInner = styled<ColorProps, 'div'>('div')`\n  cursor: pointer;\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 2px;\n  left: 0;\n  border-radius: 3px;\n  background-color: ${props => props.color};\n`;\n\nconst ValueInner = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  display: flex;\n  line-height: 1.2em;\n  align-items: center;\n  align-content: center;\n  padding: 1em;\n  overflow: hidden;\n  flex-wrap: wrap;\n`;\n\nconst Value = styled<ColorProps, 'div'>('div')`\n  font-weight: bold;\n  font-size: 0.9em;\n  text-align: center;\n  width: 100%;\n  flex: 1 0 auto;\n  line-height: 1.2em;\n  color: ${props => readableColor(props.color)};\n`;\n\nconst Label = styled<ColorProps, 'div'>('div')`\n  text-overflow: ellipsis;\n  font-size: 0.7em;\n  margin-bottom: 0.7em;\n  text-align: center;\n  width: 100%;\n  flex: 1 0 auto;\n  white-space: nowrap;\n  overflow: hidden;\n  color: ${props => readableColor(props.color)};\n`;\n"]}]}