{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/src/ui/public/inspector/adapters/request/request_adapter.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/inspector/adapters/request/request_adapter.ts","mtime":1567631711740},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport * as tslib_1 from \"tslib\";\nimport { EventEmitter } from 'events';\nimport _ from 'lodash';\nimport uuid from 'uuid/v4';\nimport { RequestResponder } from './request_responder';\nimport { RequestStatus } from './types';\n/**\n * An generic inspector adapter to log requests.\n * These can be presented in the inspector using the requests view.\n * The adapter is not coupled to a specific implementation or even Elasticsearch\n * instead it offers a generic API to log requests of any kind.\n * @extends EventEmitter\n */\nvar RequestAdapter = /** @class */ (function (_super) {\n    tslib_1.__extends(RequestAdapter, _super);\n    function RequestAdapter() {\n        var _this = _super.call(this) || this;\n        _this.requests = new Map();\n        return _this;\n    }\n    /**\n     * Start logging a new request into this request adapter. The new request will\n     * by default be in a processing state unless you explicitly finish it via\n     * {@link RequestResponder#finish}, {@link RequestResponder#ok} or\n     * {@link RequestResponder#error}.\n     *\n     * @param  {string} name The name of this request as it should be shown in the UI.\n     * @param  {object} args Additional arguments for the request.\n     * @return {RequestResponder} An instance to add information to the request and finish it.\n     */\n    RequestAdapter.prototype.start = function (name, params) {\n        var _this = this;\n        if (params === void 0) { params = {}; }\n        var req = tslib_1.__assign({}, params, { name: name, startTime: Date.now(), status: RequestStatus.PENDING, id: _.get(params, 'id', uuid()) });\n        this.requests.set(req.id, req);\n        this._onChange();\n        return new RequestResponder(req, function () { return _this._onChange(); });\n    };\n    RequestAdapter.prototype.reset = function () {\n        this.requests = new Map();\n        this._onChange();\n    };\n    RequestAdapter.prototype.resetRequest = function (id) {\n        this.requests.delete(id);\n        this._onChange();\n    };\n    RequestAdapter.prototype.getRequests = function () {\n        return Array.from(this.requests.values());\n    };\n    RequestAdapter.prototype._onChange = function () {\n        this.emit('change');\n    };\n    return RequestAdapter;\n}(EventEmitter));\nexport { RequestAdapter };\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/src/ui/public/inspector/adapters/request/request_adapter.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/src/ui/public/inspector/adapters/request/request_adapter.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;GAiBG;;AAEH,OAAO,EAAE,YAAY,EAAE,MAAM,QAAQ,CAAC;AACtC,OAAO,CAAC,MAAM,QAAQ,CAAC;AACvB,OAAO,IAAI,MAAM,SAAS,CAAC;AAC3B,OAAO,EAAE,gBAAgB,EAAE,MAAM,qBAAqB,CAAC;AACvD,OAAO,EAA0B,aAAa,EAAE,MAAM,SAAS,CAAC;AAEhE;;;;;;GAMG;AACH;IAA6B,0CAAY;IAGvC;QAAA,YACE,iBAAO,SAER;QADC,KAAI,CAAC,QAAQ,GAAG,IAAI,GAAG,EAAE,CAAC;;IAC5B,CAAC;IAED;;;;;;;;;OASG;IACI,8BAAK,GAAZ,UAAa,IAAY,EAAE,MAA0B;QAArD,iBAWC;QAX0B,uBAAA,EAAA,WAA0B;QACnD,IAAM,GAAG,wBACJ,MAAM,IACT,IAAI,MAAA,EACJ,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE,EACrB,MAAM,EAAE,aAAa,CAAC,OAAO,EAC7B,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,GAChC,CAAC;QACF,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;QAC/B,IAAI,CAAC,SAAS,EAAE,CAAC;QACjB,OAAO,IAAI,gBAAgB,CAAC,GAAG,EAAE,cAAM,OAAA,KAAI,CAAC,SAAS,EAAE,EAAhB,CAAgB,CAAC,CAAC;IAC3D,CAAC;IAEM,8BAAK,GAAZ;QACE,IAAI,CAAC,QAAQ,GAAG,IAAI,GAAG,EAAE,CAAC;QAC1B,IAAI,CAAC,SAAS,EAAE,CAAC;IACnB,CAAC;IAEM,qCAAY,GAAnB,UAAoB,EAAU;QAC5B,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;QACzB,IAAI,CAAC,SAAS,EAAE,CAAC;IACnB,CAAC;IAEM,oCAAW,GAAlB;QACE,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC;IAC5C,CAAC;IAEO,kCAAS,GAAjB;QACE,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACtB,CAAC;IACH,qBAAC;AAAD,CAAC,AAhDD,CAA6B,YAAY,GAgDxC;AAED,OAAO,EAAE,cAAc,EAAE,CAAC","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { EventEmitter } from 'events';\nimport _ from 'lodash';\nimport uuid from 'uuid/v4';\nimport { RequestResponder } from './request_responder';\nimport { Request, RequestParams, RequestStatus } from './types';\n\n/**\n * An generic inspector adapter to log requests.\n * These can be presented in the inspector using the requests view.\n * The adapter is not coupled to a specific implementation or even Elasticsearch\n * instead it offers a generic API to log requests of any kind.\n * @extends EventEmitter\n */\nclass RequestAdapter extends EventEmitter {\n  private requests: Map<string, Request>;\n\n  constructor() {\n    super();\n    this.requests = new Map();\n  }\n\n  /**\n   * Start logging a new request into this request adapter. The new request will\n   * by default be in a processing state unless you explicitly finish it via\n   * {@link RequestResponder#finish}, {@link RequestResponder#ok} or\n   * {@link RequestResponder#error}.\n   *\n   * @param  {string} name The name of this request as it should be shown in the UI.\n   * @param  {object} args Additional arguments for the request.\n   * @return {RequestResponder} An instance to add information to the request and finish it.\n   */\n  public start(name: string, params: RequestParams = {}): RequestResponder {\n    const req: Request = {\n      ...params,\n      name,\n      startTime: Date.now(),\n      status: RequestStatus.PENDING,\n      id: _.get(params, 'id', uuid()),\n    };\n    this.requests.set(req.id, req);\n    this._onChange();\n    return new RequestResponder(req, () => this._onChange());\n  }\n\n  public reset(): void {\n    this.requests = new Map();\n    this._onChange();\n  }\n\n  public resetRequest(id: string): void {\n    this.requests.delete(id);\n    this._onChange();\n  }\n\n  public getRequests(): Request[] {\n    return Array.from(this.requests.values());\n  }\n\n  private _onChange(): void {\n    this.emit('change');\n  }\n}\n\nexport { RequestAdapter };\n"]}]}