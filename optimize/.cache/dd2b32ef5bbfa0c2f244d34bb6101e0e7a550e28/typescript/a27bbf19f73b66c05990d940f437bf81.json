{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/components/waffle/map.tsx","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/components/waffle/map.tsx","mtime":1567631711982},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["import * as tslib_1 from \"tslib\";\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport React from 'react';\nimport styled from 'styled-components';\nimport { nodesToWaffleMap } from '../../containers/waffle/nodes_to_wafflemap';\nimport { isWaffleMapGroupWithGroups, isWaffleMapGroupWithNodes, } from '../../containers/waffle/type_guards';\nimport { AutoSizer } from '../auto_sizer';\nimport { GroupOfGroups } from './group_of_groups';\nimport { GroupOfNodes } from './group_of_nodes';\nimport { Legend } from './legend';\nimport { applyWaffleMapLayout } from './lib/apply_wafflemap_layout';\nexport var Map = function (_a) {\n    var nodes = _a.nodes, options = _a.options, timeRange = _a.timeRange, onFilter = _a.onFilter, formatter = _a.formatter, bounds = _a.bounds, nodeType = _a.nodeType;\n    var map = nodesToWaffleMap(nodes);\n    return (React.createElement(AutoSizer, { content: true }, function (_a) {\n        var measureRef = _a.measureRef, _b = _a.content, _c = _b.width, width = _c === void 0 ? 0 : _c, _d = _b.height, height = _d === void 0 ? 0 : _d;\n        var groupsWithLayout = applyWaffleMapLayout(map, width, height);\n        return (React.createElement(WaffleMapOuterContainer, { innerRef: function (el) { return measureRef(el); }, \"data-test-subj\": \"waffleMap\" },\n            React.createElement(WaffleMapInnerContainer, null, groupsWithLayout.map(function (group) {\n                if (isWaffleMapGroupWithGroups(group)) {\n                    return (React.createElement(GroupOfGroups, { onDrilldown: onFilter, key: group.id, options: options, group: group, formatter: formatter, bounds: bounds, nodeType: nodeType, timeRange: timeRange }));\n                }\n                if (isWaffleMapGroupWithNodes(group)) {\n                    return (React.createElement(GroupOfNodes, { key: group.id, options: options, group: group, onDrilldown: onFilter, formatter: formatter, isChild: false, bounds: bounds, nodeType: nodeType, timeRange: timeRange }));\n                }\n            })),\n            React.createElement(Legend, { formatter: formatter, bounds: bounds, legend: options.legend })));\n    }));\n};\nvar WaffleMapOuterContainer = styled.div(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([\"\\n  flex: 1 0 0%;\\n  display: flex;\\n  justify-content: flex-start;\\n  flex-direction: column;\\n  overflow-x: hidden;\\n  overflow-y: auto;\\n\"], [\"\\n  flex: 1 0 0%;\\n  display: flex;\\n  justify-content: flex-start;\\n  flex-direction: column;\\n  overflow-x: hidden;\\n  overflow-y: auto;\\n\"])));\nvar WaffleMapInnerContainer = styled.div(templateObject_2 || (templateObject_2 = tslib_1.__makeTemplateObject([\"\\n  display: flex;\\n  flex-direction: row;\\n  flex-wrap: wrap;\\n  justify-content: center;\\n  align-content: flex-start;\\n  padding: 10px;\\n\"], [\"\\n  display: flex;\\n  flex-direction: row;\\n  flex-wrap: wrap;\\n  justify-content: center;\\n  align-content: flex-start;\\n  padding: 10px;\\n\"])));\nvar templateObject_1, templateObject_2;\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/components/waffle/map.tsx","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/components/waffle/map.tsx"],"names":[],"mappings":";AAAA;;;;GAIG;AACH,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,MAAM,MAAM,mBAAmB,CAAC;AACvC,OAAO,EAAE,gBAAgB,EAAE,MAAM,4CAA4C,CAAC;AAC9E,OAAO,EACL,0BAA0B,EAC1B,yBAAyB,GAC1B,MAAM,qCAAqC,CAAC;AAG7C,OAAO,EAAE,SAAS,EAAE,MAAM,eAAe,CAAC;AAC1C,OAAO,EAAE,aAAa,EAAE,MAAM,mBAAmB,CAAC;AAClD,OAAO,EAAE,YAAY,EAAE,MAAM,kBAAkB,CAAC;AAChD,OAAO,EAAE,MAAM,EAAE,MAAM,UAAU,CAAC;AAClC,OAAO,EAAE,oBAAoB,EAAE,MAAM,8BAA8B,CAAC;AAYpE,MAAM,CAAC,IAAM,GAAG,GAAqB,UAAC,EAQrC;QAPC,gBAAK,EACL,oBAAO,EACP,wBAAS,EACT,sBAAQ,EACR,wBAAS,EACT,kBAAM,EACN,sBAAQ;IAER,IAAM,GAAG,GAAG,gBAAgB,CAAC,KAAK,CAAC,CAAC;IACpC,OAAO,CACL,oBAAC,SAAS,IAAC,OAAO,UACf,UAAC,EAAkD;YAAhD,0BAAU,EAAE,eAAkC,EAAvB,aAAS,EAAT,8BAAS,EAAE,cAAU,EAAV,+BAAU;QAC9C,IAAM,gBAAgB,GAAG,oBAAoB,CAAC,GAAG,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;QAClE,OAAO,CACL,oBAAC,uBAAuB,IACtB,QAAQ,EAAE,UAAC,EAAO,IAAK,OAAA,UAAU,CAAC,EAAE,CAAC,EAAd,CAAc,oBACtB,WAAW;YAE1B,oBAAC,uBAAuB,QACrB,gBAAgB,CAAC,GAAG,CAAC,UAAA,KAAK;gBACzB,IAAI,0BAA0B,CAAC,KAAK,CAAC,EAAE;oBACrC,OAAO,CACL,oBAAC,aAAa,IACZ,WAAW,EAAE,QAAQ,EACrB,GAAG,EAAE,KAAK,CAAC,EAAE,EACb,OAAO,EAAE,OAAO,EAChB,KAAK,EAAE,KAAK,EACZ,SAAS,EAAE,SAAS,EACpB,MAAM,EAAE,MAAM,EACd,QAAQ,EAAE,QAAQ,EAClB,SAAS,EAAE,SAAS,GACpB,CACH,CAAC;iBACH;gBACD,IAAI,yBAAyB,CAAC,KAAK,CAAC,EAAE;oBACpC,OAAO,CACL,oBAAC,YAAY,IACX,GAAG,EAAE,KAAK,CAAC,EAAE,EACb,OAAO,EAAE,OAAO,EAChB,KAAK,EAAE,KAAK,EACZ,WAAW,EAAE,QAAQ,EACrB,SAAS,EAAE,SAAS,EACpB,OAAO,EAAE,KAAK,EACd,MAAM,EAAE,MAAM,EACd,QAAQ,EAAE,QAAQ,EAClB,SAAS,EAAE,SAAS,GACpB,CACH,CAAC;iBACH;YACH,CAAC,CAAC,CACsB;YAC1B,oBAAC,MAAM,IAAC,SAAS,EAAE,SAAS,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,CAAC,MAAM,GAAI,CAChD,CAC3B,CAAC;IACJ,CAAC,CACS,CACb,CAAC;AACJ,CAAC,CAAC;AAEF,IAAM,uBAAuB,GAAG,MAAM,CAAC,GAAG,yNAAA,8IAOzC,IAAA,CAAC;AAEF,IAAM,uBAAuB,GAAG,MAAM,CAAC,GAAG,yNAAA,8IAOzC,IAAA,CAAC","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport React from 'react';\nimport styled from 'styled-components';\nimport { nodesToWaffleMap } from '../../containers/waffle/nodes_to_wafflemap';\nimport {\n  isWaffleMapGroupWithGroups,\n  isWaffleMapGroupWithNodes,\n} from '../../containers/waffle/type_guards';\nimport { InfraNode, InfraNodeType, InfraTimerangeInput } from '../../graphql/types';\nimport { InfraWaffleMapBounds, InfraWaffleMapOptions } from '../../lib/lib';\nimport { AutoSizer } from '../auto_sizer';\nimport { GroupOfGroups } from './group_of_groups';\nimport { GroupOfNodes } from './group_of_nodes';\nimport { Legend } from './legend';\nimport { applyWaffleMapLayout } from './lib/apply_wafflemap_layout';\n\ninterface Props {\n  nodes: InfraNode[];\n  nodeType: InfraNodeType;\n  options: InfraWaffleMapOptions;\n  formatter: (subject: string | number) => string;\n  timeRange: InfraTimerangeInput;\n  onFilter: (filter: string) => void;\n  bounds: InfraWaffleMapBounds;\n}\n\nexport const Map: React.SFC<Props> = ({\n  nodes,\n  options,\n  timeRange,\n  onFilter,\n  formatter,\n  bounds,\n  nodeType,\n}) => {\n  const map = nodesToWaffleMap(nodes);\n  return (\n    <AutoSizer content>\n      {({ measureRef, content: { width = 0, height = 0 } }) => {\n        const groupsWithLayout = applyWaffleMapLayout(map, width, height);\n        return (\n          <WaffleMapOuterContainer\n            innerRef={(el: any) => measureRef(el)}\n            data-test-subj=\"waffleMap\"\n          >\n            <WaffleMapInnerContainer>\n              {groupsWithLayout.map(group => {\n                if (isWaffleMapGroupWithGroups(group)) {\n                  return (\n                    <GroupOfGroups\n                      onDrilldown={onFilter}\n                      key={group.id}\n                      options={options}\n                      group={group}\n                      formatter={formatter}\n                      bounds={bounds}\n                      nodeType={nodeType}\n                      timeRange={timeRange}\n                    />\n                  );\n                }\n                if (isWaffleMapGroupWithNodes(group)) {\n                  return (\n                    <GroupOfNodes\n                      key={group.id}\n                      options={options}\n                      group={group}\n                      onDrilldown={onFilter}\n                      formatter={formatter}\n                      isChild={false}\n                      bounds={bounds}\n                      nodeType={nodeType}\n                      timeRange={timeRange}\n                    />\n                  );\n                }\n              })}\n            </WaffleMapInnerContainer>\n            <Legend formatter={formatter} bounds={bounds} legend={options.legend} />\n          </WaffleMapOuterContainer>\n        );\n      }}\n    </AutoSizer>\n  );\n};\n\nconst WaffleMapOuterContainer = styled.div`\n  flex: 1 0 0%;\n  display: flex;\n  justify-content: flex-start;\n  flex-direction: column;\n  overflow-x: hidden;\n  overflow-y: auto;\n`;\n\nconst WaffleMapInnerContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-content: flex-start;\n  padding: 10px;\n`;\n"]}]}