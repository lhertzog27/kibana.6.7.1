{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/containers/waffle/with_waffle_options.tsx","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/containers/waffle/with_waffle_options.tsx","mtime":1567631711984},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\nimport { InfraMetricType, InfraNodeType, InfraPathType, } from '../../graphql/types';\nimport { waffleOptionsActions, waffleOptionsSelectors } from '../../store';\nimport { asChildFunctionRenderer } from '../../utils/typed_react';\nimport { bindPlainActionCreators } from '../../utils/typed_redux';\nimport { UrlStateContainer } from '../../utils/url_state';\nvar selectOptionsUrlState = createSelector(waffleOptionsSelectors.selectMetric, waffleOptionsSelectors.selectView, waffleOptionsSelectors.selectGroupBy, waffleOptionsSelectors.selectNodeType, waffleOptionsSelectors.selectCustomOptions, function (metric, view, groupBy, nodeType, customOptions) { return ({\n    metric: metric,\n    groupBy: groupBy,\n    nodeType: nodeType,\n    view: view,\n    customOptions: customOptions,\n}); });\nexport var withWaffleOptions = connect(function (state) { return ({\n    metric: waffleOptionsSelectors.selectMetric(state),\n    groupBy: waffleOptionsSelectors.selectGroupBy(state),\n    nodeType: waffleOptionsSelectors.selectNodeType(state),\n    view: waffleOptionsSelectors.selectView(state),\n    customOptions: waffleOptionsSelectors.selectCustomOptions(state),\n    urlState: selectOptionsUrlState(state),\n}); }, bindPlainActionCreators({\n    changeMetric: waffleOptionsActions.changeMetric,\n    changeGroupBy: waffleOptionsActions.changeGroupBy,\n    changeNodeType: waffleOptionsActions.changeNodeType,\n    changeView: waffleOptionsActions.changeView,\n    changeCustomOptions: waffleOptionsActions.changeCustomOptions,\n}));\nexport var WithWaffleOptions = asChildFunctionRenderer(withWaffleOptions);\nexport var WithWaffleOptionsUrlState = function () { return (React.createElement(WithWaffleOptions, null, function (_a) {\n    var changeMetric = _a.changeMetric, urlState = _a.urlState, changeGroupBy = _a.changeGroupBy, changeNodeType = _a.changeNodeType, changeView = _a.changeView, changeCustomOptions = _a.changeCustomOptions;\n    return (React.createElement(UrlStateContainer, { urlState: urlState, urlStateKey: \"waffleOptions\", mapToUrlState: mapToUrlState, onChange: function (newUrlState) {\n            if (newUrlState && newUrlState.metric) {\n                changeMetric(newUrlState.metric);\n            }\n            if (newUrlState && newUrlState.groupBy) {\n                changeGroupBy(newUrlState.groupBy);\n            }\n            if (newUrlState && newUrlState.nodeType) {\n                changeNodeType(newUrlState.nodeType);\n            }\n            if (newUrlState && newUrlState.view) {\n                changeView(newUrlState.view);\n            }\n            if (newUrlState && newUrlState.customOptions) {\n                changeCustomOptions(newUrlState.customOptions);\n            }\n        }, onInitialize: function (initialUrlState) {\n            if (initialUrlState && initialUrlState.metric) {\n                changeMetric(initialUrlState.metric);\n            }\n            if (initialUrlState && initialUrlState.groupBy) {\n                changeGroupBy(initialUrlState.groupBy);\n            }\n            if (initialUrlState && initialUrlState.nodeType) {\n                changeNodeType(initialUrlState.nodeType);\n            }\n            if (initialUrlState && initialUrlState.view) {\n                changeView(initialUrlState.view);\n            }\n            if (initialUrlState && initialUrlState.customOptions) {\n                changeCustomOptions(initialUrlState.customOptions);\n            }\n        } }));\n})); };\nvar mapToUrlState = function (value) {\n    return value\n        ? {\n            metric: mapToMetricUrlState(value.metric),\n            groupBy: mapToGroupByUrlState(value.groupBy),\n            nodeType: mapToNodeTypeUrlState(value.nodeType),\n            view: mapToViewUrlState(value.view),\n            customOptions: mapToCustomOptionsUrlState(value.customOptions),\n        }\n        : undefined;\n};\nvar isInfraMetricInput = function (subject) {\n    return subject != null && subject.type != null && InfraMetricType[subject.type] != null;\n};\nvar isInfraPathInput = function (subject) {\n    return subject != null && subject.type != null && InfraPathType[subject.type] != null;\n};\nvar isInfraGroupByOption = function (subject) {\n    return (subject != null &&\n        subject.text != null &&\n        subject.field != null &&\n        InfraPathType[subject.type] != null);\n};\nvar mapToMetricUrlState = function (subject) {\n    return subject && isInfraMetricInput(subject) ? subject : undefined;\n};\nvar mapToGroupByUrlState = function (subject) {\n    return subject && Array.isArray(subject) && subject.every(isInfraPathInput) ? subject : undefined;\n};\nvar mapToNodeTypeUrlState = function (subject) {\n    return subject && InfraNodeType[subject] ? subject : undefined;\n};\nvar mapToViewUrlState = function (subject) {\n    return subject && ['map', 'table'].includes(subject) ? subject : undefined;\n};\nvar mapToCustomOptionsUrlState = function (subject) {\n    return subject && Array.isArray(subject) && subject.every(isInfraGroupByOption)\n        ? subject\n        : undefined;\n};\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/containers/waffle/with_waffle_options.tsx","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/containers/waffle/with_waffle_options.tsx"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\n\nimport {\n  InfraMetricInput,\n  InfraMetricType,\n  InfraNodeType,\n  InfraPathType,\n} from '../../graphql/types';\nimport { InfraGroupByOptions } from '../../lib/lib';\nimport { State, waffleOptionsActions, waffleOptionsSelectors } from '../../store';\nimport { asChildFunctionRenderer } from '../../utils/typed_react';\nimport { bindPlainActionCreators } from '../../utils/typed_redux';\nimport { UrlStateContainer } from '../../utils/url_state';\n\nconst selectOptionsUrlState = createSelector(\n  waffleOptionsSelectors.selectMetric,\n  waffleOptionsSelectors.selectView,\n  waffleOptionsSelectors.selectGroupBy,\n  waffleOptionsSelectors.selectNodeType,\n  waffleOptionsSelectors.selectCustomOptions,\n  (metric, view, groupBy, nodeType, customOptions) => ({\n    metric,\n    groupBy,\n    nodeType,\n    view,\n    customOptions,\n  })\n);\n\nexport const withWaffleOptions = connect(\n  (state: State) => ({\n    metric: waffleOptionsSelectors.selectMetric(state),\n    groupBy: waffleOptionsSelectors.selectGroupBy(state),\n    nodeType: waffleOptionsSelectors.selectNodeType(state),\n    view: waffleOptionsSelectors.selectView(state),\n    customOptions: waffleOptionsSelectors.selectCustomOptions(state),\n    urlState: selectOptionsUrlState(state),\n  }),\n  bindPlainActionCreators({\n    changeMetric: waffleOptionsActions.changeMetric,\n    changeGroupBy: waffleOptionsActions.changeGroupBy,\n    changeNodeType: waffleOptionsActions.changeNodeType,\n    changeView: waffleOptionsActions.changeView,\n    changeCustomOptions: waffleOptionsActions.changeCustomOptions,\n  })\n);\n\nexport const WithWaffleOptions = asChildFunctionRenderer(withWaffleOptions);\n\n/**\n * Url State\n */\n\ninterface WaffleOptionsUrlState {\n  metric?: ReturnType<typeof waffleOptionsSelectors.selectMetric>;\n  groupBy?: ReturnType<typeof waffleOptionsSelectors.selectGroupBy>;\n  nodeType?: ReturnType<typeof waffleOptionsSelectors.selectNodeType>;\n  view?: ReturnType<typeof waffleOptionsSelectors.selectView>;\n  customOptions?: ReturnType<typeof waffleOptionsSelectors.selectCustomOptions>;\n}\n\nexport const WithWaffleOptionsUrlState = () => (\n  <WithWaffleOptions>\n    {({\n      changeMetric,\n      urlState,\n      changeGroupBy,\n      changeNodeType,\n      changeView,\n      changeCustomOptions,\n    }) => (\n      <UrlStateContainer\n        urlState={urlState}\n        urlStateKey=\"waffleOptions\"\n        mapToUrlState={mapToUrlState}\n        onChange={newUrlState => {\n          if (newUrlState && newUrlState.metric) {\n            changeMetric(newUrlState.metric);\n          }\n          if (newUrlState && newUrlState.groupBy) {\n            changeGroupBy(newUrlState.groupBy);\n          }\n          if (newUrlState && newUrlState.nodeType) {\n            changeNodeType(newUrlState.nodeType);\n          }\n          if (newUrlState && newUrlState.view) {\n            changeView(newUrlState.view);\n          }\n          if (newUrlState && newUrlState.customOptions) {\n            changeCustomOptions(newUrlState.customOptions);\n          }\n        }}\n        onInitialize={initialUrlState => {\n          if (initialUrlState && initialUrlState.metric) {\n            changeMetric(initialUrlState.metric);\n          }\n          if (initialUrlState && initialUrlState.groupBy) {\n            changeGroupBy(initialUrlState.groupBy);\n          }\n          if (initialUrlState && initialUrlState.nodeType) {\n            changeNodeType(initialUrlState.nodeType);\n          }\n          if (initialUrlState && initialUrlState.view) {\n            changeView(initialUrlState.view);\n          }\n          if (initialUrlState && initialUrlState.customOptions) {\n            changeCustomOptions(initialUrlState.customOptions);\n          }\n        }}\n      />\n    )}\n  </WithWaffleOptions>\n);\n\nconst mapToUrlState = (value: any): WaffleOptionsUrlState | undefined =>\n  value\n    ? {\n        metric: mapToMetricUrlState(value.metric),\n        groupBy: mapToGroupByUrlState(value.groupBy),\n        nodeType: mapToNodeTypeUrlState(value.nodeType),\n        view: mapToViewUrlState(value.view),\n        customOptions: mapToCustomOptionsUrlState(value.customOptions),\n      }\n    : undefined;\n\nconst isInfraMetricInput = (subject: any): subject is InfraMetricInput => {\n  return subject != null && subject.type != null && InfraMetricType[subject.type] != null;\n};\n\nconst isInfraPathInput = (subject: any): subject is InfraPathType => {\n  return subject != null && subject.type != null && InfraPathType[subject.type] != null;\n};\n\nconst isInfraGroupByOption = (subject: any): subject is InfraGroupByOptions => {\n  return (\n    subject != null &&\n    subject.text != null &&\n    subject.field != null &&\n    InfraPathType[subject.type] != null\n  );\n};\n\nconst mapToMetricUrlState = (subject: any) => {\n  return subject && isInfraMetricInput(subject) ? subject : undefined;\n};\n\nconst mapToGroupByUrlState = (subject: any) => {\n  return subject && Array.isArray(subject) && subject.every(isInfraPathInput) ? subject : undefined;\n};\n\nconst mapToNodeTypeUrlState = (subject: any) => {\n  return subject && InfraNodeType[subject] ? subject : undefined;\n};\n\nconst mapToViewUrlState = (subject: any) => {\n  return subject && ['map', 'table'].includes(subject) ? subject : undefined;\n};\n\nconst mapToCustomOptionsUrlState = (subject: any) => {\n  return subject && Array.isArray(subject) && subject.every(isInfraGroupByOption)\n    ? subject\n    : undefined;\n};\n"]}]}