{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/src/ui/public/notify/fatal_error.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/notify/fatal_error.ts","mtime":1567631711745},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { formatAngularHttpError, isAngularHttpError, } from './lib/format_angular_http_error';\nvar newPlatformFatalErrors;\nexport function __newPlatformInit__(instance) {\n    if (newPlatformFatalErrors) {\n        throw new Error('ui/notify/fatal_error already initialized with new platform apis');\n    }\n    newPlatformFatalErrors = instance;\n}\nexport function addFatalErrorCallback(callback) {\n    newPlatformFatalErrors.get$().subscribe(function () {\n        callback();\n    });\n}\nexport function fatalError(error, location) {\n    // add support for angular http errors to newPlatformFatalErrors\n    if (isAngularHttpError(error)) {\n        error = formatAngularHttpError(error);\n    }\n    newPlatformFatalErrors.add(error, location);\n}\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/src/ui/public/notify/fatal_error.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/src/ui/public/notify/fatal_error.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;GAiBG;AAGH,OAAO,EAEL,sBAAsB,EACtB,kBAAkB,GACnB,MAAM,iCAAiC,CAAC;AAEzC,IAAI,sBAAgD,CAAC;AAErD,MAAM,UAAU,mBAAmB,CAAC,QAAkC;IACpE,IAAI,sBAAsB,EAAE;QAC1B,MAAM,IAAI,KAAK,CAAC,kEAAkE,CAAC,CAAC;KACrF;IAED,sBAAsB,GAAG,QAAQ,CAAC;AACpC,CAAC;AAED,MAAM,UAAU,qBAAqB,CAAC,QAAoB;IACxD,sBAAsB,CAAC,IAAI,EAAE,CAAC,SAAS,CAAC;QACtC,QAAQ,EAAE,CAAC;IACb,CAAC,CAAC,CAAC;AACL,CAAC;AAED,MAAM,UAAU,UAAU,CAAC,KAAwC,EAAE,QAAiB;IACpF,gEAAgE;IAChE,IAAI,kBAAkB,CAAC,KAAK,CAAC,EAAE;QAC7B,KAAK,GAAG,sBAAsB,CAAC,KAAK,CAAC,CAAC;KACvC;IAED,sBAAsB,CAAC,GAAG,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;AAC9C,CAAC","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { FatalErrorsStartContract } from '../../../core/public/fatal_errors';\nimport {\n  AngularHttpError,\n  formatAngularHttpError,\n  isAngularHttpError,\n} from './lib/format_angular_http_error';\n\nlet newPlatformFatalErrors: FatalErrorsStartContract;\n\nexport function __newPlatformInit__(instance: FatalErrorsStartContract) {\n  if (newPlatformFatalErrors) {\n    throw new Error('ui/notify/fatal_error already initialized with new platform apis');\n  }\n\n  newPlatformFatalErrors = instance;\n}\n\nexport function addFatalErrorCallback(callback: () => void) {\n  newPlatformFatalErrors.get$().subscribe(() => {\n    callback();\n  });\n}\n\nexport function fatalError(error: AngularHttpError | Error | string, location?: string) {\n  // add support for angular http errors to newPlatformFatalErrors\n  if (isAngularHttpError(error)) {\n    error = formatAngularHttpError(error);\n  }\n\n  newPlatformFatalErrors.add(error, location);\n}\n"]}]}