{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/beats_management/public/lib/adapters/rest_api/axios_rest_api_adapter.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/beats_management/public/lib/adapters/rest_api/axios_rest_api_adapter.ts","mtime":1567631711882},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport * as tslib_1 from \"tslib\";\nimport axios from 'axios';\nvar globalAPI;\nvar AxiosRestAPIAdapter = /** @class */ (function () {\n    function AxiosRestAPIAdapter(xsrfToken, basePath) {\n        this.xsrfToken = xsrfToken;\n        this.basePath = basePath;\n    }\n    AxiosRestAPIAdapter.prototype.get = function (url, query) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.REST.get(url, query ? { params: query } : {}).then(function (resp) { return resp.data; })];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    AxiosRestAPIAdapter.prototype.post = function (url, body) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.REST.post(url, body).then(function (resp) { return resp.data; })];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    AxiosRestAPIAdapter.prototype.delete = function (url) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.REST.delete(url).then(function (resp) { return resp.data; })];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    AxiosRestAPIAdapter.prototype.put = function (url, body) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.REST.put(url, body).then(function (resp) { return resp.data; })];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    Object.defineProperty(AxiosRestAPIAdapter.prototype, \"REST\", {\n        get: function () {\n            if (globalAPI) {\n                return globalAPI;\n            }\n            globalAPI = axios.create({\n                baseURL: this.basePath,\n                withCredentials: true,\n                responseType: 'json',\n                timeout: 30000,\n                headers: {\n                    Accept: 'application/json',\n                    credentials: 'same-origin',\n                    'Content-Type': 'application/json',\n                    'kbn-version': this.xsrfToken,\n                    'kbn-xsrf': this.xsrfToken,\n                },\n            });\n            // Add a request interceptor\n            globalAPI.interceptors.request.use(function (config) {\n                // Do something before request is sent\n                return config;\n            }, function (error) {\n                // Do something with request error\n                return Promise.reject(error);\n            });\n            // Add a response interceptor\n            globalAPI.interceptors.response.use(function (response) {\n                // Do something with response data\n                return response;\n            }, function (error) {\n                // Do something with response error\n                return Promise.reject(error);\n            });\n            return globalAPI;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return AxiosRestAPIAdapter;\n}());\nexport { AxiosRestAPIAdapter };\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/beats_management/public/lib/adapters/rest_api/axios_rest_api_adapter.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/beats_management/public/lib/adapters/rest_api/axios_rest_api_adapter.ts"],"names":[],"mappings":"AAAA;;;;GAIG;;AAEH,OAAO,KAAwB,MAAM,OAAO,CAAC;AAG7C,IAAI,SAAwB,CAAC;AAE7B;IACE,6BAA6B,SAAiB,EAAmB,QAAgB;QAApD,cAAS,GAAT,SAAS,CAAQ;QAAmB,aAAQ,GAAR,QAAQ,CAAQ;IAAG,CAAC;IAExE,iCAAG,GAAhB,UAA+B,GAAW,EAAE,KAA0B;+CAAG,OAAO;;;4BACvE,qBAAM,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,IAAI,EAAT,CAAS,CAAC,EAAA;4BAAvF,sBAAO,SAAgF,EAAC;;;;KACzF;IAEY,kCAAI,GAAjB,UACE,GAAW,EACX,IAA6B;+CAC5B,OAAO;;;4BACD,qBAAM,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,IAAI,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,IAAI,EAAT,CAAS,CAAC,EAAA;4BAA9D,sBAAO,SAAuD,EAAC;;;;KAChE;IAEY,oCAAM,GAAnB,UAAuB,GAAW;+CAAG,OAAO;;;4BACnC,qBAAM,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,IAAI,EAAT,CAAS,CAAC,EAAA;4BAA1D,sBAAO,SAAmD,EAAC;;;;KAC5D;IAEY,iCAAG,GAAhB,UAA+B,GAAW,EAAE,IAAU;+CAAG,OAAO;;;4BACvD,qBAAM,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,IAAI,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,IAAI,EAAT,CAAS,CAAC,EAAA;4BAA7D,sBAAO,SAAsD,EAAC;;;;KAC/D;IAED,sBAAY,qCAAI;aAAhB;YACE,IAAI,SAAS,EAAE;gBACb,OAAO,SAAS,CAAC;aAClB;YAED,SAAS,GAAG,KAAK,CAAC,MAAM,CAAC;gBACvB,OAAO,EAAE,IAAI,CAAC,QAAQ;gBACtB,eAAe,EAAE,IAAI;gBACrB,YAAY,EAAE,MAAM;gBACpB,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE;oBACP,MAAM,EAAE,kBAAkB;oBAC1B,WAAW,EAAE,aAAa;oBAC1B,cAAc,EAAE,kBAAkB;oBAClC,aAAa,EAAE,IAAI,CAAC,SAAS;oBAC7B,UAAU,EAAE,IAAI,CAAC,SAAS;iBAC3B;aACF,CAAC,CAAC;YACH,4BAA4B;YAC5B,SAAS,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAChC,UAAA,MAAM;gBACJ,sCAAsC;gBACtC,OAAO,MAAM,CAAC;YAChB,CAAC,EACD,UAAA,KAAK;gBACH,kCAAkC;gBAClC,OAAO,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YAC/B,CAAC,CACF,CAAC;YAEF,6BAA6B;YAC7B,SAAS,CAAC,YAAY,CAAC,QAAQ,CAAC,GAAG,CACjC,UAAA,QAAQ;gBACN,kCAAkC;gBAClC,OAAO,QAAQ,CAAC;YAClB,CAAC,EACD,UAAA,KAAK;gBACH,mCAAmC;gBACnC,OAAO,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YAC/B,CAAC,CACF,CAAC;YAEF,OAAO,SAAS,CAAC;QACnB,CAAC;;;OAAA;IACH,0BAAC;AAAD,CAAC,AAlED,IAkEC","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport axios, { AxiosInstance } from 'axios';\nimport { FlatObject } from '../../../frontend_types';\nimport { RestAPIAdapter } from './adapter_types';\nlet globalAPI: AxiosInstance;\n\nexport class AxiosRestAPIAdapter implements RestAPIAdapter {\n  constructor(private readonly xsrfToken: string, private readonly basePath: string) {}\n\n  public async get<ResponseData>(url: string, query?: FlatObject<object>): Promise<ResponseData> {\n    return await this.REST.get(url, query ? { params: query } : {}).then(resp => resp.data);\n  }\n\n  public async post<ResponseData>(\n    url: string,\n    body?: { [key: string]: any }\n  ): Promise<ResponseData> {\n    return await this.REST.post(url, body).then(resp => resp.data);\n  }\n\n  public async delete<T>(url: string): Promise<T> {\n    return await this.REST.delete(url).then(resp => resp.data);\n  }\n\n  public async put<ResponseData>(url: string, body?: any): Promise<ResponseData> {\n    return await this.REST.put(url, body).then(resp => resp.data);\n  }\n\n  private get REST() {\n    if (globalAPI) {\n      return globalAPI;\n    }\n\n    globalAPI = axios.create({\n      baseURL: this.basePath,\n      withCredentials: true,\n      responseType: 'json',\n      timeout: 30000,\n      headers: {\n        Accept: 'application/json',\n        credentials: 'same-origin',\n        'Content-Type': 'application/json',\n        'kbn-version': this.xsrfToken,\n        'kbn-xsrf': this.xsrfToken,\n      },\n    });\n    // Add a request interceptor\n    globalAPI.interceptors.request.use(\n      config => {\n        // Do something before request is sent\n        return config;\n      },\n      error => {\n        // Do something with request error\n        return Promise.reject(error);\n      }\n    );\n\n    // Add a response interceptor\n    globalAPI.interceptors.response.use(\n      response => {\n        // Do something with response data\n        return response;\n      },\n      error => {\n        // Do something with response error\n        return Promise.reject(error);\n      }\n    );\n\n    return globalAPI;\n  }\n}\n"]}]}