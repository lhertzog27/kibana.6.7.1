{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/apm/public/store/reactReduxRequest/serviceMetricsCharts.tsx","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/apm/public/store/reactReduxRequest/serviceMetricsCharts.tsx","mtime":1567631711871},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport * as tslib_1 from \"tslib\";\nimport React from 'react';\nimport { Request } from 'react-redux-request';\nimport { createSelector } from 'reselect';\nimport { loadMetricsChartDataForService } from 'x-pack/plugins/apm/public/services/rest/apm/metrics';\nimport { getCPUSeries, getMemorySeries } from '../selectors/chartSelectors';\nimport { getUrlParams } from '../urlParams';\nimport { createInitialDataSelector } from './helpers';\nvar ID = 'metricsChartData';\nvar INITIAL_DATA = {\n    memory: {\n        series: {\n            memoryUsedAvg: [],\n            memoryUsedMax: []\n        },\n        overallValues: {\n            memoryUsedAvg: null,\n            memoryUsedMax: null\n        },\n        totalHits: 0\n    },\n    cpu: {\n        series: {\n            systemCPUAverage: [],\n            systemCPUMax: [],\n            processCPUAverage: [],\n            processCPUMax: []\n        },\n        overallValues: {\n            systemCPUAverage: null,\n            systemCPUMax: null,\n            processCPUAverage: null,\n            processCPUMax: null\n        },\n        totalHits: 0\n    }\n};\nvar withInitialData = createInitialDataSelector(INITIAL_DATA);\nvar selectMetricsChartData = function (state) {\n    return withInitialData(state.reactReduxRequest[ID]);\n};\nexport var selectTransformedMetricsChartData = createSelector([getUrlParams, selectMetricsChartData], function (urlParams, response) { return (tslib_1.__assign({}, response, { data: tslib_1.__assign({}, response.data, { memory: getMemorySeries(urlParams, response.data.memory), cpu: getCPUSeries(response.data.cpu) }) })); });\nexport function MetricsChartDataRequest(_a) {\n    var urlParams = _a.urlParams, render = _a.render;\n    var serviceName = urlParams.serviceName, start = urlParams.start, end = urlParams.end;\n    if (!(serviceName && start && end)) {\n        return null;\n    }\n    return (React.createElement(Request, { id: ID, fn: loadMetricsChartDataForService, args: [urlParams], selector: selectTransformedMetricsChartData, render: render }));\n}\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/apm/public/store/reactReduxRequest/serviceMetricsCharts.tsx","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/apm/public/store/reactReduxRequest/serviceMetricsCharts.tsx"],"names":[],"mappings":"AAAA;;;;GAIG;;AAEH,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,OAAO,EAAgC,MAAM,qBAAqB,CAAC;AAC5E,OAAO,EAAE,cAAc,EAAE,MAAM,UAAU,CAAC;AAC1C,OAAO,EAAE,8BAA8B,EAAE,MAAM,qDAAqD,CAAC;AAIrG,OAAO,EAAE,YAAY,EAAE,eAAe,EAAE,MAAM,6BAA6B,CAAC;AAC5E,OAAO,EAAE,YAAY,EAAc,MAAM,cAAc,CAAC;AACxD,OAAO,EAAE,yBAAyB,EAAE,MAAM,WAAW,CAAC;AAEtD,IAAM,EAAE,GAAG,kBAAkB,CAAC;AAC9B,IAAM,YAAY,GAA4B;IAC5C,MAAM,EAAE;QACN,MAAM,EAAE;YACN,aAAa,EAAE,EAAE;YACjB,aAAa,EAAE,EAAE;SAClB;QACD,aAAa,EAAE;YACb,aAAa,EAAE,IAAI;YACnB,aAAa,EAAE,IAAI;SACpB;QACD,SAAS,EAAE,CAAC;KACb;IACD,GAAG,EAAE;QACH,MAAM,EAAE;YACN,gBAAgB,EAAE,EAAE;YACpB,YAAY,EAAE,EAAE;YAChB,iBAAiB,EAAE,EAAE;YACrB,aAAa,EAAE,EAAE;SAClB;QACD,aAAa,EAAE;YACb,gBAAgB,EAAE,IAAI;YACtB,YAAY,EAAE,IAAI;YAClB,iBAAiB,EAAE,IAAI;YACvB,aAAa,EAAE,IAAI;SACpB;QACD,SAAS,EAAE,CAAC;KACb;CACF,CAAC;AAMF,IAAM,eAAe,GAAG,yBAAyB,CAC/C,YAAY,CACb,CAAC;AAEF,IAAM,sBAAsB,GAA6B,UAAA,KAAK;IAC5D,OAAA,eAAe,CAAC,KAAK,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAC;AAA5C,CAA4C,CAAC;AAE/C,MAAM,CAAC,IAAM,iCAAiC,GAAG,cAAc,CAC7D,CAAC,YAAY,EAAE,sBAAsB,CAAC,EACtC,UAAC,SAAS,EAAE,QAAQ,IAAK,OAAA,sBACpB,QAAQ,IACX,IAAI,uBACC,QAAQ,CAAC,IAAI,IAChB,MAAM,EAAE,eAAe,CAAC,SAAS,EAAE,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,EACxD,GAAG,EAAE,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,OAEtC,EAPuB,CAOvB,CACH,CAAC;AAOF,MAAM,UAAU,uBAAuB,CAAC,EAA4B;QAA1B,wBAAS,EAAE,kBAAM;IACjD,IAAA,mCAAW,EAAE,uBAAK,EAAE,mBAAG,CAAe;IAE9C,IAAI,CAAC,CAAC,WAAW,IAAI,KAAK,IAAI,GAAG,CAAC,EAAE;QAClC,OAAO,IAAI,CAAC;KACb;IAED,OAAO,CACL,oBAAC,OAAO,IACN,EAAE,EAAE,EAAE,EACN,EAAE,EAAE,8BAA8B,EAClC,IAAI,EAAE,CAAC,SAAS,CAAC,EACjB,QAAQ,EAAE,iCAAiC,EAC3C,MAAM,EAAE,MAAM,GACd,CACH,CAAC;AACJ,CAAC","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport React from 'react';\nimport { Request, RRRRender, RRRRenderResponse } from 'react-redux-request';\nimport { createSelector } from 'reselect';\nimport { loadMetricsChartDataForService } from 'x-pack/plugins/apm/public/services/rest/apm/metrics';\nimport { IMemoryChartData } from 'x-pack/plugins/apm/public/store/selectors/chartSelectors';\nimport { MetricsChartAPIResponse } from 'x-pack/plugins/apm/server/lib/metrics/get_all_metrics_chart_data';\nimport { IReduxState } from '../rootReducer';\nimport { getCPUSeries, getMemorySeries } from '../selectors/chartSelectors';\nimport { getUrlParams, IUrlParams } from '../urlParams';\nimport { createInitialDataSelector } from './helpers';\n\nconst ID = 'metricsChartData';\nconst INITIAL_DATA: MetricsChartAPIResponse = {\n  memory: {\n    series: {\n      memoryUsedAvg: [],\n      memoryUsedMax: []\n    },\n    overallValues: {\n      memoryUsedAvg: null,\n      memoryUsedMax: null\n    },\n    totalHits: 0\n  },\n  cpu: {\n    series: {\n      systemCPUAverage: [],\n      systemCPUMax: [],\n      processCPUAverage: [],\n      processCPUMax: []\n    },\n    overallValues: {\n      systemCPUAverage: null,\n      systemCPUMax: null,\n      processCPUAverage: null,\n      processCPUMax: null\n    },\n    totalHits: 0\n  }\n};\n\ntype MetricsChartDataSelector = (\n  state: IReduxState\n) => RRRRenderResponse<MetricsChartAPIResponse>;\n\nconst withInitialData = createInitialDataSelector<MetricsChartAPIResponse>(\n  INITIAL_DATA\n);\n\nconst selectMetricsChartData: MetricsChartDataSelector = state =>\n  withInitialData(state.reactReduxRequest[ID]);\n\nexport const selectTransformedMetricsChartData = createSelector(\n  [getUrlParams, selectMetricsChartData],\n  (urlParams, response) => ({\n    ...response,\n    data: {\n      ...response.data,\n      memory: getMemorySeries(urlParams, response.data.memory),\n      cpu: getCPUSeries(response.data.cpu)\n    }\n  })\n);\n\ninterface Props {\n  urlParams: IUrlParams;\n  render: RRRRender<IMemoryChartData>;\n}\n\nexport function MetricsChartDataRequest({ urlParams, render }: Props) {\n  const { serviceName, start, end } = urlParams;\n\n  if (!(serviceName && start && end)) {\n    return null;\n  }\n\n  return (\n    <Request\n      id={ID}\n      fn={loadMetricsChartDataForService}\n      args={[urlParams]}\n      selector={selectTransformedMetricsChartData}\n      render={render}\n    />\n  );\n}\n"]}]}