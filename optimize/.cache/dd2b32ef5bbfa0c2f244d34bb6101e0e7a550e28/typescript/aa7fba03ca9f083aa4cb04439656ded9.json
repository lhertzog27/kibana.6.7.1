{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/uptime/public/components/queries/empty_state/empty_state_query.tsx","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/uptime/public/components/queries/empty_state/empty_state_query.tsx","mtime":1567631712329},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport { i18n } from '@kbn/i18n';\nimport { get } from 'lodash';\nimport React from 'react';\nimport { Query } from 'react-apollo';\nimport { EmptyState } from '../../functional/empty_state';\nimport { getDocCountQuery } from './get_doc_count';\nexport var EmptyStateQuery = function (_a) {\n    var autorefreshInterval = _a.autorefreshInterval, autorefreshIsPaused = _a.autorefreshIsPaused, children = _a.children;\n    return (React.createElement(Query, { query: getDocCountQuery, pollInterval: autorefreshIsPaused ? undefined : autorefreshInterval }, function (_a) {\n        var loading = _a.loading, error = _a.error, data = _a.data;\n        if (loading) {\n            return i18n.translate('xpack.uptime.emptyState.loadingMessage', {\n                defaultMessage: 'Loading…',\n            });\n        }\n        if (error) {\n            return i18n.translate('xpack.uptime.emptyState.errorMessage', {\n                values: { message: error.message },\n                defaultMessage: 'Error {message}',\n            });\n        }\n        var count = get(data, 'getDocCount.count', 0);\n        return React.createElement(EmptyState, { children: children, count: count });\n    }));\n};\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/uptime/public/components/queries/empty_state/empty_state_query.tsx","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/uptime/public/components/queries/empty_state/empty_state_query.tsx"],"names":[],"mappings":"AAAA;;;;GAIG;AAEH,OAAO,EAAE,IAAI,EAAE,MAAM,WAAW,CAAC;AACjC,OAAO,EAAE,GAAG,EAAE,MAAM,QAAQ,CAAC;AAC7B,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,KAAK,EAAE,MAAM,cAAc,CAAC;AAErC,OAAO,EAAE,UAAU,EAAE,MAAM,8BAA8B,CAAC;AAC1D,OAAO,EAAE,gBAAgB,EAAE,MAAM,iBAAiB,CAAC;AAQnD,MAAM,CAAC,IAAM,eAAe,GAAG,UAAC,EAA6D;QAA3D,4CAAmB,EAAE,4CAAmB,EAAE,sBAAQ;IAAc,OAAA,CAChG,oBAAC,KAAK,IACJ,KAAK,EAAE,gBAAgB,EACvB,YAAY,EAAE,mBAAmB,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,mBAAmB,IAElE,UAAC,EAAwB;YAAtB,oBAAO,EAAE,gBAAK,EAAE,cAAI;QACtB,IAAI,OAAO,EAAE;YACX,OAAO,IAAI,CAAC,SAAS,CAAC,wCAAwC,EAAE;gBAC9D,cAAc,EAAE,UAAU;aAC3B,CAAC,CAAC;SACJ;QACD,IAAI,KAAK,EAAE;YACT,OAAO,IAAI,CAAC,SAAS,CAAC,sCAAsC,EAAE;gBAC5D,MAAM,EAAE,EAAE,OAAO,EAAE,KAAK,CAAC,OAAO,EAAE;gBAClC,cAAc,EAAE,iBAAiB;aAClC,CAAC,CAAC;SACJ;QAED,IAAM,KAAK,GAAG,GAAG,CAAC,IAAI,EAAE,mBAAmB,EAAE,CAAC,CAAC,CAAC;QAChD,OAAO,oBAAC,UAAU,IAAC,QAAQ,EAAE,QAAQ,EAAE,KAAK,EAAE,KAAK,GAAI,CAAC;IAC1D,CAAC,CACK,CACT;AAtBiG,CAsBjG,CAAC","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport { i18n } from '@kbn/i18n';\nimport { get } from 'lodash';\nimport React from 'react';\nimport { Query } from 'react-apollo';\nimport { UptimeCommonProps } from '../../../uptime_app';\nimport { EmptyState } from '../../functional/empty_state';\nimport { getDocCountQuery } from './get_doc_count';\n\ninterface EmptyStateProps {\n  children: JSX.Element[];\n}\n\ntype Props = EmptyStateProps & UptimeCommonProps;\n\nexport const EmptyStateQuery = ({ autorefreshInterval, autorefreshIsPaused, children }: Props) => (\n  <Query\n    query={getDocCountQuery}\n    pollInterval={autorefreshIsPaused ? undefined : autorefreshInterval}\n  >\n    {({ loading, error, data }) => {\n      if (loading) {\n        return i18n.translate('xpack.uptime.emptyState.loadingMessage', {\n          defaultMessage: 'Loading…',\n        });\n      }\n      if (error) {\n        return i18n.translate('xpack.uptime.emptyState.errorMessage', {\n          values: { message: error.message },\n          defaultMessage: 'Error {message}',\n        });\n      }\n\n      const count = get(data, 'getDocCount.count', 0);\n      return <EmptyState children={children} count={count} />;\n    }}\n  </Query>\n);\n"]}]}