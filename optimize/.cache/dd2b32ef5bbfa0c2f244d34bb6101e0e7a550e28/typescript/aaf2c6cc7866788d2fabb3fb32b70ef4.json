{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/beats_management/public/components/table/table_type_configs.tsx","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/beats_management/public/components/table/table_type_configs.tsx","mtime":1567631711880},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport { EuiFlexGroup, EuiFlexItem, EuiHealth, EuiToolTip } from '@elastic/eui';\nimport { i18n } from '@kbn/i18n';\nimport { sortBy, uniq } from 'lodash';\nimport moment from 'moment';\nimport React from 'react';\nimport { ConnectedLink } from '../navigation/connected_link';\nimport { TagBadge } from '../tag';\nvar dynamicStatuses = {\n    STARTING: {\n        color: 'success',\n        status: i18n.translate('xpack.beatsManagement.beatsTable.startingStatusLabel', {\n            defaultMessage: 'Starting',\n        }),\n        details: i18n.translate('xpack.beatsManagement.beatsTable.configStatus.startingTooltip', {\n            defaultMessage: 'This Beat is starting.',\n        }),\n    },\n    IN_PROGRESS: {\n        color: 'warning',\n        status: i18n.translate('xpack.beatsManagement.beatsTable.updatingStatusLabel', {\n            defaultMessage: 'Updating',\n        }),\n        details: i18n.translate('xpack.beatsManagement.beatsTable.configStatus.progressTooltip', {\n            defaultMessage: 'This Beat is currently reloading config from CM.',\n        }),\n    },\n    RUNNING: {\n        color: 'success',\n        status: i18n.translate('xpack.beatsManagement.beatsTable.runningStatusLabel', {\n            defaultMessage: 'Running',\n        }),\n        details: i18n.translate('xpack.beatsManagement.beatsTable.configStatus.runningTooltip', {\n            defaultMessage: 'This Beat is running without issues.',\n        }),\n    },\n    CONFIG: {\n        color: 'danger',\n        status: i18n.translate('xpack.beatsManagement.beatsTable.configErrorStatusLabel', {\n            defaultMessage: 'Config error',\n        }),\n    },\n    FAILED: {\n        color: 'danger',\n        status: i18n.translate('xpack.beatsManagement.beatsTable.failedStatusLabel', {\n            defaultMessage: 'Error',\n        }),\n        details: i18n.translate('xpack.beatsManagement.beatsTable.configStatus.errorTooltip', {\n            defaultMessage: 'There is an error on this beat, please check the logs for this host.',\n        }),\n    },\n    STOPPED: {\n        color: 'danger',\n        status: i18n.translate('xpack.beatsManagement.beatsTable.stoppedStatusLabel', {\n            defaultMessage: 'stopped',\n        }),\n        details: i18n.translate('xpack.beatsManagement.beatsTable.configStatus.errorTooltip', {\n            defaultMessage: 'There is an error on this beat, please check the logs for this host.',\n        }),\n    },\n};\nexport var BeatsTableType = {\n    itemType: 'Beats',\n    columnDefinitions: [\n        {\n            field: 'name',\n            name: i18n.translate('xpack.beatsManagement.beatsTable.beatNameTitle', {\n                defaultMessage: 'Beat name',\n            }),\n            render: function (name, beat) { return (React.createElement(ConnectedLink, { path: \"/beat/\" + beat.id + \"/details\" }, name)); },\n            sortable: true,\n        },\n        {\n            field: 'type',\n            name: i18n.translate('xpack.beatsManagement.beatsTable.typeTitle', {\n                defaultMessage: 'Type',\n            }),\n            sortable: true,\n        },\n        {\n            field: 'full_tags',\n            name: i18n.translate('xpack.beatsManagement.beatsTable.tagsTitle', {\n                defaultMessage: 'Tags',\n            }),\n            render: function (value, beat) { return (React.createElement(EuiFlexGroup, { wrap: true, responsive: true, gutterSize: \"xs\" }, (sortBy(beat.tags, 'id') || []).map(function (tag) { return (React.createElement(EuiFlexItem, { key: tag.id, grow: false },\n                React.createElement(ConnectedLink, { path: \"/tag/edit/\" + tag.id },\n                    React.createElement(TagBadge, { tag: tag })))); }))); },\n            sortable: false,\n        },\n        {\n            field: 'config_status',\n            name: i18n.translate('xpack.beatsManagement.beatsTable.configStatusTitle', {\n                defaultMessage: 'Config Status',\n            }),\n            render: function (value, beat) {\n                var color = 'success';\n                var statusText = i18n.translate('xpack.beatsManagement.beatsTable.configStatus.okLabel', {\n                    defaultMessage: 'OK',\n                });\n                var tooltipText = i18n.translate('xpack.beatsManagement.beatsTable.configStatus.okTooltip', {\n                    defaultMessage: 'Beat successfully applied latest config',\n                });\n                if (beat.status && moment().diff(beat.last_checkin, 'minutes') < 10) {\n                    color = dynamicStatuses[beat.status.event.type].color;\n                    statusText = dynamicStatuses[beat.status.event.type].status;\n                    tooltipText =\n                        dynamicStatuses[beat.status.event.type].details || beat.status.event.message;\n                }\n                else if (!beat.status && moment().diff(beat.last_checkin, 'minutes') >= 10) {\n                    color = 'danger';\n                    statusText = i18n.translate('xpack.beatsManagement.beatsTable.configStatus.offlineLabel', {\n                        defaultMessage: 'Offline',\n                    });\n                    tooltipText = i18n.translate('xpack.beatsManagement.beatsTable.configStatus.noConnectionTooltip', {\n                        defaultMessage: 'This Beat has not connected to kibana in over 10min',\n                    });\n                }\n                else if (beat.status && moment().diff(beat.last_checkin, 'minutes') >= 10) {\n                    color = 'subdued';\n                    tooltipText = i18n.translate('xpack.beatsManagement.beatsTable.configStatus.notStartedTooltip', {\n                        defaultMessage: 'This Beat has not yet been started.',\n                    });\n                    statusText = i18n.translate('xpack.beatsManagement.beatsTable.configStatus.notStartedLabel', {\n                        defaultMessage: 'Not started',\n                    });\n                }\n                else {\n                    color = 'subdued';\n                    statusText = i18n.translate('xpack.beatsManagement.beatsTable.configStatus.offlineLabel', {\n                        defaultMessage: 'Offline',\n                    });\n                }\n                return (React.createElement(EuiFlexGroup, { wrap: true, responsive: true, gutterSize: \"xs\" },\n                    React.createElement(EuiToolTip, { content: tooltipText },\n                        React.createElement(EuiHealth, { color: color }, statusText))));\n            },\n            sortable: false,\n        },\n    ],\n    controlDefinitions: function (data) { return ({\n        actions: [\n            {\n                name: i18n.translate('xpack.beatsManagement.beatsTable.disenrollSelectedLabel', {\n                    defaultMessage: 'Unenroll Selected',\n                }),\n                action: 'delete',\n                danger: true,\n            },\n        ],\n        filters: [\n            {\n                type: 'field_value_selection',\n                field: 'type',\n                name: i18n.translate('xpack.beatsManagement.beatsTable.typeLabel', {\n                    defaultMessage: 'Type',\n                }),\n                options: uniq(data.map(function (_a) {\n                    var type = _a.type;\n                    return ({ value: type });\n                }), 'value'),\n            },\n        ],\n    }); },\n};\nexport var TagsTableType = {\n    itemType: 'Tags',\n    columnDefinitions: [\n        {\n            field: 'id',\n            name: i18n.translate('xpack.beatsManagement.tagsTable.tagNameTitle', {\n                defaultMessage: 'Tag name',\n            }),\n            render: function (id, tag) { return (React.createElement(ConnectedLink, { path: \"/tag/edit/\" + tag.id },\n                React.createElement(TagBadge, { tag: tag }))); },\n            sortable: true,\n            width: '45%',\n        },\n        {\n            align: 'right',\n            field: 'last_updated',\n            name: i18n.translate('xpack.beatsManagement.tagsTable.lastUpdateTitle', {\n                defaultMessage: 'Last update',\n            }),\n            render: function (lastUpdate) { return React.createElement(\"div\", null, moment(lastUpdate).fromNow()); },\n            sortable: true,\n        },\n    ],\n    controlDefinitions: function (data) { return ({\n        actions: [\n            {\n                name: i18n.translate('xpack.beatsManagement.tagsTable.removeSelectedLabel', {\n                    defaultMessage: 'Remove Selected',\n                }),\n                action: 'delete',\n                danger: true,\n            },\n        ],\n        filters: [],\n    }); },\n};\nexport var BeatDetailTagsTable = {\n    itemType: 'Tags',\n    columnDefinitions: [\n        {\n            field: 'id',\n            name: i18n.translate('xpack.beatsManagement.beatTagsTable.tagNameTitle', {\n                defaultMessage: 'Tag name',\n            }),\n            render: function (id, tag) { return (React.createElement(ConnectedLink, { path: \"/tag/edit/\" + tag.id },\n                React.createElement(TagBadge, { tag: tag }))); },\n            sortable: true,\n            width: '55%',\n        },\n        {\n            align: 'right',\n            field: 'last_updated',\n            name: i18n.translate('xpack.beatsManagement.beatTagsTable.lastUpdateTitle', {\n                defaultMessage: 'Last update',\n            }),\n            render: function (lastUpdate) { return React.createElement(\"span\", null, moment(lastUpdate).fromNow()); },\n            sortable: true,\n        },\n    ],\n    controlDefinitions: function (data) { return ({\n        actions: [],\n        filters: [],\n        primaryActions: [\n            {\n                name: i18n.translate('xpack.beatsManagement.beatTagsTable.addTagLabel', {\n                    defaultMessage: 'Add Tag',\n                }),\n                action: 'add',\n                danger: false,\n            },\n            {\n                name: i18n.translate('xpack.beatsManagement.beatTagsTable.removeSelectedLabel', {\n                    defaultMessage: 'Remove Selected',\n                }),\n                action: 'remove',\n                danger: true,\n            },\n        ],\n    }); },\n};\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/beats_management/public/components/table/table_type_configs.tsx","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/beats_management/public/components/table/table_type_configs.tsx"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport { EuiFlexGroup, EuiFlexItem, EuiHealth, EuiToolTip, IconColor } from '@elastic/eui';\nimport { i18n } from '@kbn/i18n';\nimport { sortBy, uniq } from 'lodash';\nimport moment from 'moment';\nimport React from 'react';\nimport { BeatTag, CMBeat } from '../../../common/domain_types';\nimport { ConnectedLink } from '../navigation/connected_link';\nimport { TagBadge } from '../tag';\n\nexport interface ColumnDefinition {\n  align?: string;\n  field: string;\n  name: string;\n  sortable?: boolean;\n  width?: string;\n  render?(value: any, object?: any): any;\n}\n\nexport interface ActionDefinition {\n  action: string;\n  danger?: boolean;\n  icon?: any;\n  name: string;\n}\n\ninterface FilterOption {\n  value: string;\n}\n\nexport interface FilterDefinition {\n  field: string;\n  name: string;\n  options?: FilterOption[];\n  type: string;\n}\n\nexport interface ControlDefinitions {\n  actions: ActionDefinition[];\n  filters: FilterDefinition[];\n  primaryActions?: ActionDefinition[];\n}\n\nexport interface TableType {\n  itemType: 'Beats' | 'Tags';\n  columnDefinitions: ColumnDefinition[];\n  controlDefinitions(items: any[]): ControlDefinitions;\n}\n\nconst dynamicStatuses = {\n  STARTING: {\n    color: 'success',\n    status: i18n.translate('xpack.beatsManagement.beatsTable.startingStatusLabel', {\n      defaultMessage: 'Starting',\n    }),\n    details: i18n.translate('xpack.beatsManagement.beatsTable.configStatus.startingTooltip', {\n      defaultMessage: 'This Beat is starting.',\n    }),\n  },\n  IN_PROGRESS: {\n    color: 'warning',\n    status: i18n.translate('xpack.beatsManagement.beatsTable.updatingStatusLabel', {\n      defaultMessage: 'Updating',\n    }),\n    details: i18n.translate('xpack.beatsManagement.beatsTable.configStatus.progressTooltip', {\n      defaultMessage: 'This Beat is currently reloading config from CM.',\n    }),\n  },\n  RUNNING: {\n    color: 'success',\n    status: i18n.translate('xpack.beatsManagement.beatsTable.runningStatusLabel', {\n      defaultMessage: 'Running',\n    }),\n    details: i18n.translate('xpack.beatsManagement.beatsTable.configStatus.runningTooltip', {\n      defaultMessage: 'This Beat is running without issues.',\n    }),\n  },\n  CONFIG: {\n    color: 'danger',\n    status: i18n.translate('xpack.beatsManagement.beatsTable.configErrorStatusLabel', {\n      defaultMessage: 'Config error',\n    }),\n  },\n  FAILED: {\n    color: 'danger',\n    status: i18n.translate('xpack.beatsManagement.beatsTable.failedStatusLabel', {\n      defaultMessage: 'Error',\n    }),\n    details: i18n.translate('xpack.beatsManagement.beatsTable.configStatus.errorTooltip', {\n      defaultMessage: 'There is an error on this beat, please check the logs for this host.',\n    }),\n  },\n  STOPPED: {\n    color: 'danger',\n    status: i18n.translate('xpack.beatsManagement.beatsTable.stoppedStatusLabel', {\n      defaultMessage: 'stopped',\n    }),\n    details: i18n.translate('xpack.beatsManagement.beatsTable.configStatus.errorTooltip', {\n      defaultMessage: 'There is an error on this beat, please check the logs for this host.',\n    }),\n  },\n};\n\nexport const BeatsTableType: TableType = {\n  itemType: 'Beats',\n  columnDefinitions: [\n    {\n      field: 'name',\n      name: i18n.translate('xpack.beatsManagement.beatsTable.beatNameTitle', {\n        defaultMessage: 'Beat name',\n      }),\n      render: (name: string, beat: CMBeat) => (\n        <ConnectedLink path={`/beat/${beat.id}/details`}>{name}</ConnectedLink>\n      ),\n      sortable: true,\n    },\n    {\n      field: 'type',\n      name: i18n.translate('xpack.beatsManagement.beatsTable.typeTitle', {\n        defaultMessage: 'Type',\n      }),\n      sortable: true,\n    },\n    {\n      field: 'full_tags',\n      name: i18n.translate('xpack.beatsManagement.beatsTable.tagsTitle', {\n        defaultMessage: 'Tags',\n      }),\n      render: (value: string, beat: CMBeat & { tags: BeatTag[] }) => (\n        <EuiFlexGroup wrap responsive={true} gutterSize=\"xs\">\n          {(sortBy(beat.tags, 'id') || []).map(tag => (\n            <EuiFlexItem key={tag.id} grow={false}>\n              <ConnectedLink path={`/tag/edit/${tag.id}`}>\n                <TagBadge tag={tag} />\n              </ConnectedLink>\n            </EuiFlexItem>\n          ))}\n        </EuiFlexGroup>\n      ),\n      sortable: false,\n    },\n    {\n      field: 'config_status',\n      name: i18n.translate('xpack.beatsManagement.beatsTable.configStatusTitle', {\n        defaultMessage: 'Config Status',\n      }),\n      render: (value: string, beat: CMBeat) => {\n        let color: IconColor = 'success';\n        let statusText = i18n.translate('xpack.beatsManagement.beatsTable.configStatus.okLabel', {\n          defaultMessage: 'OK',\n        });\n        let tooltipText = i18n.translate(\n          'xpack.beatsManagement.beatsTable.configStatus.okTooltip',\n          {\n            defaultMessage: 'Beat successfully applied latest config',\n          }\n        );\n\n        if (beat.status && moment().diff(beat.last_checkin, 'minutes') < 10) {\n          color = dynamicStatuses[beat.status.event.type].color;\n          statusText = dynamicStatuses[beat.status.event.type].status;\n          tooltipText =\n            (dynamicStatuses[beat.status.event.type] as any).details || beat.status.event.message;\n        } else if (!beat.status && moment().diff(beat.last_checkin, 'minutes') >= 10) {\n          color = 'danger';\n          statusText = i18n.translate(\n            'xpack.beatsManagement.beatsTable.configStatus.offlineLabel',\n            {\n              defaultMessage: 'Offline',\n            }\n          );\n          tooltipText = i18n.translate(\n            'xpack.beatsManagement.beatsTable.configStatus.noConnectionTooltip',\n            {\n              defaultMessage: 'This Beat has not connected to kibana in over 10min',\n            }\n          );\n        } else if (beat.status && moment().diff(beat.last_checkin, 'minutes') >= 10) {\n          color = 'subdued';\n\n          tooltipText = i18n.translate(\n            'xpack.beatsManagement.beatsTable.configStatus.notStartedTooltip',\n            {\n              defaultMessage: 'This Beat has not yet been started.',\n            }\n          );\n          statusText = i18n.translate(\n            'xpack.beatsManagement.beatsTable.configStatus.notStartedLabel',\n            {\n              defaultMessage: 'Not started',\n            }\n          );\n        } else {\n          color = 'subdued';\n          statusText = i18n.translate(\n            'xpack.beatsManagement.beatsTable.configStatus.offlineLabel',\n            {\n              defaultMessage: 'Offline',\n            }\n          );\n        }\n\n        return (\n          <EuiFlexGroup wrap responsive={true} gutterSize=\"xs\">\n            <EuiToolTip content={tooltipText}>\n              <EuiHealth color={color}>{statusText}</EuiHealth>\n            </EuiToolTip>\n          </EuiFlexGroup>\n        );\n      },\n      sortable: false,\n    },\n    // {\n    //   field: 'full_tags',\n    //   name: i18n.translate('xpack.beatsManagement.beatsTable.lastConfigUpdateTitle', {\n    //     defaultMessage: 'Last config update',\n    //   }),\n    //   render: (tags?: BeatTag[]) =>\n    //     tags && tags.length ? (\n    //       <span>\n    //         {moment(first(sortByOrder(tags, ['last_updated'], ['desc'])).last_updated).fromNow()}\n    //       </span>\n    //     ) : null,\n    //   sortable: true,\n    // },\n  ],\n  controlDefinitions: (data: any[]) => ({\n    actions: [\n      {\n        name: i18n.translate('xpack.beatsManagement.beatsTable.disenrollSelectedLabel', {\n          defaultMessage: 'Unenroll Selected',\n        }),\n        action: 'delete',\n        danger: true,\n      },\n    ],\n    filters: [\n      {\n        type: 'field_value_selection',\n        field: 'type',\n        name: i18n.translate('xpack.beatsManagement.beatsTable.typeLabel', {\n          defaultMessage: 'Type',\n        }),\n        options: uniq(data.map(({ type }: { type: any }) => ({ value: type })), 'value'),\n      },\n    ],\n  }),\n};\n\nexport const TagsTableType: TableType = {\n  itemType: 'Tags',\n  columnDefinitions: [\n    {\n      field: 'id',\n      name: i18n.translate('xpack.beatsManagement.tagsTable.tagNameTitle', {\n        defaultMessage: 'Tag name',\n      }),\n      render: (id: string, tag: BeatTag) => (\n        <ConnectedLink path={`/tag/edit/${tag.id}`}>\n          <TagBadge tag={tag} />\n        </ConnectedLink>\n      ),\n      sortable: true,\n      width: '45%',\n    },\n    {\n      align: 'right',\n      field: 'last_updated',\n      name: i18n.translate('xpack.beatsManagement.tagsTable.lastUpdateTitle', {\n        defaultMessage: 'Last update',\n      }),\n      render: (lastUpdate: Date) => <div>{moment(lastUpdate).fromNow()}</div>,\n      sortable: true,\n    },\n  ],\n  controlDefinitions: (data: any) => ({\n    actions: [\n      {\n        name: i18n.translate('xpack.beatsManagement.tagsTable.removeSelectedLabel', {\n          defaultMessage: 'Remove Selected',\n        }),\n        action: 'delete',\n        danger: true,\n      },\n    ],\n    filters: [],\n  }),\n};\n\nexport const BeatDetailTagsTable: TableType = {\n  itemType: 'Tags',\n  columnDefinitions: [\n    {\n      field: 'id',\n      name: i18n.translate('xpack.beatsManagement.beatTagsTable.tagNameTitle', {\n        defaultMessage: 'Tag name',\n      }),\n      render: (id: string, tag: BeatTag) => (\n        <ConnectedLink path={`/tag/edit/${tag.id}`}>\n          <TagBadge tag={tag} />\n        </ConnectedLink>\n      ),\n      sortable: true,\n      width: '55%',\n    },\n    {\n      align: 'right',\n      field: 'last_updated',\n      name: i18n.translate('xpack.beatsManagement.beatTagsTable.lastUpdateTitle', {\n        defaultMessage: 'Last update',\n      }),\n      render: (lastUpdate: string) => <span>{moment(lastUpdate).fromNow()}</span>,\n      sortable: true,\n    },\n  ],\n  controlDefinitions: (data: any) => ({\n    actions: [],\n    filters: [],\n    primaryActions: [\n      {\n        name: i18n.translate('xpack.beatsManagement.beatTagsTable.addTagLabel', {\n          defaultMessage: 'Add Tag',\n        }),\n        action: 'add',\n        danger: false,\n      },\n      {\n        name: i18n.translate('xpack.beatsManagement.beatTagsTable.removeSelectedLabel', {\n          defaultMessage: 'Remove Selected',\n        }),\n        action: 'remove',\n        danger: true,\n      },\n    ],\n  }),\n};\n"]}]}