{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/store/local/log_position/epic.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/store/local/log_position/epic.ts","mtime":1567631711987},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport { timer } from 'rxjs';\nimport { exhaustMap, filter, map, takeUntil } from 'rxjs/operators';\nimport { jumpToTargetPositionTime, startAutoReload, stopAutoReload } from './actions';\nexport var createLogPositionEpic = function () { return function (action$) {\n    return action$.pipe(filter(startAutoReload.match), exhaustMap(function (_a) {\n        var payload = _a.payload;\n        return timer(0, payload).pipe(map(function () { return jumpToTargetPositionTime(Date.now()); }), takeUntil(action$.pipe(filter(stopAutoReload.match))));\n    }));\n}; };\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/store/local/log_position/epic.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/store/local/log_position/epic.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAIH,OAAO,EAAE,KAAK,EAAE,MAAM,MAAM,CAAC;AAC7B,OAAO,EAAE,UAAU,EAAE,MAAM,EAAE,GAAG,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;AAEpE,OAAO,EAAE,wBAAwB,EAAE,eAAe,EAAE,cAAc,EAAE,MAAM,WAAW,CAAC;AAEtF,MAAM,CAAC,IAAM,qBAAqB,GAAG,cAA8C,OAAA,UAAA,OAAO;IACxF,OAAA,OAAO,CAAC,IAAI,CACV,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,EAC7B,UAAU,CAAC,UAAC,EAAW;YAAT,oBAAO;QACnB,OAAA,KAAK,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,IAAI,CACpB,GAAG,CAAC,cAAM,OAAA,wBAAwB,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,EAApC,CAAoC,CAAC,EAC/C,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC,CACtD;IAHD,CAGC,CACF,CACF;AARD,CAQC,EATgF,CAShF,CAAC","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport { Action } from 'redux';\nimport { Epic } from 'redux-observable';\nimport { timer } from 'rxjs';\nimport { exhaustMap, filter, map, takeUntil } from 'rxjs/operators';\n\nimport { jumpToTargetPositionTime, startAutoReload, stopAutoReload } from './actions';\n\nexport const createLogPositionEpic = <State>(): Epic<Action, Action, State, {}> => action$ =>\n  action$.pipe(\n    filter(startAutoReload.match),\n    exhaustMap(({ payload }) =>\n      timer(0, payload).pipe(\n        map(() => jumpToTargetPositionTime(Date.now())),\n        takeUntil(action$.pipe(filter(stopAutoReload.match)))\n      )\n    )\n  );\n"]}]}