{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/security/public/views/management/edit_role/components/edit_role_page.tsx","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/security/public/views/management/edit_role/components/edit_role_page.tsx","mtime":1567631712299},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport * as tslib_1 from \"tslib\";\nimport { EuiButton, EuiButtonEmpty, EuiFieldText, EuiFlexGroup, EuiFlexItem, \n// @ts-ignore\nEuiForm, EuiFormRow, EuiPanel, EuiSpacer, EuiText, EuiTitle, } from '@elastic/eui';\nimport { FormattedMessage, injectI18n } from '@kbn/i18n/react';\nimport { get } from 'lodash';\nimport React, { Component, Fragment } from 'react';\nimport { toastNotifications } from 'ui/notify';\nimport { isReservedRole } from '../../../../lib/role';\nimport { deleteRole, saveRole } from '../../../../objects';\nimport { ROLES_PATH } from '../../management_urls';\nimport { RoleValidator } from '../lib/validate_role';\nimport { DeleteRoleButton } from './delete_role_button';\nimport { ElasticsearchPrivileges, KibanaPrivileges } from './privileges';\nimport { ReservedRoleBadge } from './reserved_role_badge';\nvar EditRolePageUI = /** @class */ (function (_super) {\n    tslib_1.__extends(EditRolePageUI, _super);\n    function EditRolePageUI(props) {\n        var _this = _super.call(this, props) || this;\n        _this.getFormTitle = function () {\n            var titleText;\n            var props = {\n                tabIndex: 0,\n            };\n            if (isReservedRole(_this.props.role)) {\n                titleText = (React.createElement(FormattedMessage, { id: \"xpack.security.management.editRole.viewingRoleTitle\", defaultMessage: \"Viewing role\" }));\n                props['aria-describedby'] = 'reservedRoleDescription';\n            }\n            else if (_this.editingExistingRole()) {\n                titleText = (React.createElement(FormattedMessage, { id: \"xpack.security.management.editRole.editRoleTitle\", defaultMessage: \"Edit role\" }));\n            }\n            else {\n                titleText = (React.createElement(FormattedMessage, { id: \"xpack.security.management.editRole.createRoleTitle\", defaultMessage: \"Create role\" }));\n            }\n            return (React.createElement(EuiTitle, { size: \"l\" },\n                React.createElement(\"h1\", tslib_1.__assign({}, props),\n                    titleText,\n                    \" \",\n                    React.createElement(ReservedRoleBadge, { role: _this.props.role }))));\n        };\n        _this.getActionButton = function () {\n            if (_this.editingExistingRole() && !isReservedRole(_this.props.role)) {\n                return (React.createElement(EuiFlexItem, { grow: false },\n                    React.createElement(DeleteRoleButton, { canDelete: true, onDelete: _this.handleDeleteRole })));\n            }\n            return null;\n        };\n        _this.getRoleName = function () {\n            return (React.createElement(EuiPanel, null,\n                React.createElement(EuiFormRow, tslib_1.__assign({ label: React.createElement(FormattedMessage, { id: \"xpack.security.management.editRole.roleNameFormRowTitle\", defaultMessage: \"Role name\" }), helpText: !isReservedRole(_this.props.role) && _this.editingExistingRole() ? (React.createElement(FormattedMessage, { id: \"xpack.security.management.editRole.roleNameFormRowHelpText\", defaultMessage: \"A role's name cannot be changed once it has been created.\" })) : (undefined) }, _this.validator.validateRoleName(_this.state.role)),\n                    React.createElement(EuiFieldText, { name: 'name', value: _this.state.role.name || '', onChange: _this.onNameChange, \"data-test-subj\": 'roleFormNameInput', readOnly: isReservedRole(_this.props.role) || _this.editingExistingRole() }))));\n        };\n        _this.onNameChange = function (e) {\n            var rawValue = e.target.value;\n            var name = rawValue.replace(/\\s/g, '_');\n            _this.setState({\n                role: tslib_1.__assign({}, _this.state.role, { name: name }),\n            });\n        };\n        _this.onRoleChange = function (role) {\n            _this.setState({\n                role: role,\n            });\n        };\n        _this.getKibanaPrivileges = function () {\n            return (React.createElement(\"div\", null,\n                React.createElement(EuiSpacer, null),\n                React.createElement(KibanaPrivileges, { kibanaAppPrivileges: _this.props.kibanaAppPrivileges, spaces: _this.props.spaces, spacesEnabled: _this.props.spacesEnabled, userProfile: _this.props.userProfile, editable: !isReservedRole(_this.state.role), role: _this.state.role, onChange: _this.onRoleChange, validator: _this.validator })));\n        };\n        _this.getFormButtons = function () {\n            if (isReservedRole(_this.props.role)) {\n                return (React.createElement(EuiButton, { onClick: _this.backToRoleList },\n                    React.createElement(FormattedMessage, { id: \"xpack.security.management.editRole.returnToRoleListButtonLabel\", defaultMessage: \"Return to role list\" })));\n            }\n            var saveText = _this.editingExistingRole() ? (React.createElement(FormattedMessage, { id: \"xpack.security.management.editRole.updateRoleText\", defaultMessage: \"Update role\" })) : (React.createElement(FormattedMessage, { id: \"xpack.security.management.editRole.createRoleText\", defaultMessage: \"Create role\" }));\n            return (React.createElement(EuiFlexGroup, { responsive: false },\n                React.createElement(EuiFlexItem, { grow: false },\n                    React.createElement(EuiButton, { \"data-test-subj\": \"roleFormSaveButton\", fill: true, onClick: _this.saveRole, disabled: isReservedRole(_this.props.role) }, saveText)),\n                React.createElement(EuiFlexItem, { grow: false },\n                    React.createElement(EuiButtonEmpty, { \"data-test-subj\": \"roleFormCancelButton\", onClick: _this.backToRoleList },\n                        React.createElement(FormattedMessage, { id: \"xpack.security.management.editRole.cancelButtonLabel\", defaultMessage: \"Cancel\" }))),\n                React.createElement(EuiFlexItem, { grow: true }),\n                _this.getActionButton()));\n        };\n        _this.editingExistingRole = function () {\n            return !!_this.props.role.name;\n        };\n        _this.isPlaceholderPrivilege = function (indexPrivilege) {\n            return indexPrivilege.names.length === 0;\n        };\n        _this.saveRole = function () {\n            _this.validator.enableValidation();\n            var result = _this.validator.validateForSave(_this.state.role);\n            if (result.isInvalid) {\n                _this.setState({\n                    formError: result,\n                });\n            }\n            else {\n                _this.setState({\n                    formError: null,\n                });\n                var _a = _this.props, httpClient = _a.httpClient, intl_1 = _a.intl;\n                var role = tslib_1.__assign({}, _this.state.role);\n                role.elasticsearch.indices = role.elasticsearch.indices.filter(function (i) { return !_this.isPlaceholderPrivilege(i); });\n                role.elasticsearch.indices.forEach(function (index) { return index.query || delete index.query; });\n                saveRole(httpClient, role)\n                    .then(function () {\n                    toastNotifications.addSuccess(intl_1.formatMessage({\n                        id: 'xpack.security.management.editRole.roleSuccessfullySavedNotificationMessage',\n                        defaultMessage: 'Saved role',\n                    }));\n                    _this.backToRoleList();\n                })\n                    .catch(function (error) {\n                    toastNotifications.addDanger(get(error, 'data.message'));\n                });\n            }\n        };\n        _this.handleDeleteRole = function () {\n            var _a = _this.props, httpClient = _a.httpClient, role = _a.role, intl = _a.intl;\n            deleteRole(httpClient, role.name)\n                .then(function () {\n                toastNotifications.addSuccess(intl.formatMessage({\n                    id: 'xpack.security.management.editRole.roleSuccessfullyDeletedNotificationMessage',\n                    defaultMessage: 'Deleted role',\n                }));\n                _this.backToRoleList();\n            })\n                .catch(function (error) {\n                toastNotifications.addDanger(get(error, 'data.message'));\n            });\n        };\n        _this.backToRoleList = function () {\n            window.location.hash = ROLES_PATH;\n        };\n        _this.state = {\n            role: props.role,\n            formError: null,\n        };\n        _this.validator = new RoleValidator({ shouldValidate: false });\n        return _this;\n    }\n    EditRolePageUI.prototype.render = function () {\n        var description = this.props.spacesEnabled ? (React.createElement(FormattedMessage, { id: \"xpack.security.management.editRole.setPrivilegesToKibanaSpacesDescription\", defaultMessage: \"Set privileges on your Elasticsearch data and control access to your Kibana spaces.\" })) : (React.createElement(FormattedMessage, { id: \"xpack.security.management.editRole.setPrivilegesToKibanaDescription\", defaultMessage: \"Set privileges on your Elasticsearch data and control access to Kibana.\" }));\n        return (React.createElement(\"div\", { className: \"editRolePage\" },\n            React.createElement(EuiForm, tslib_1.__assign({}, this.state.formError),\n                this.getFormTitle(),\n                React.createElement(EuiSpacer, null),\n                React.createElement(EuiText, { size: \"s\" }, description),\n                isReservedRole(this.props.role) && (React.createElement(Fragment, null,\n                    React.createElement(EuiSpacer, { size: \"s\" }),\n                    React.createElement(EuiText, { size: \"s\", color: \"subdued\" },\n                        React.createElement(\"p\", { id: \"reservedRoleDescription\", tabIndex: 0 },\n                            React.createElement(FormattedMessage, { id: \"xpack.security.management.editRole.modifyingReversedRolesDescription\", defaultMessage: \"Reserved roles are built-in and cannot be removed or modified.\" }))))),\n                React.createElement(EuiSpacer, null),\n                this.getRoleName(),\n                this.getElasticsearchPrivileges(),\n                this.getKibanaPrivileges(),\n                React.createElement(EuiSpacer, null),\n                this.getFormButtons())));\n    };\n    EditRolePageUI.prototype.getElasticsearchPrivileges = function () {\n        return (React.createElement(\"div\", null,\n            React.createElement(EuiSpacer, null),\n            React.createElement(ElasticsearchPrivileges, { role: this.state.role, editable: !isReservedRole(this.state.role), httpClient: this.props.httpClient, onChange: this.onRoleChange, runAsUsers: this.props.runAsUsers, validator: this.validator, indexPatterns: this.props.indexPatterns, allowDocumentLevelSecurity: this.props.allowDocumentLevelSecurity, allowFieldLevelSecurity: this.props.allowFieldLevelSecurity })));\n    };\n    return EditRolePageUI;\n}(Component));\nexport var EditRolePage = injectI18n(EditRolePageUI);\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/security/public/views/management/edit_role/components/edit_role_page.tsx","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/security/public/views/management/edit_role/components/edit_role_page.tsx"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport {\n  EuiButton,\n  EuiButtonEmpty,\n  EuiFieldText,\n  EuiFlexGroup,\n  EuiFlexItem,\n  // @ts-ignore\n  EuiForm,\n  EuiFormRow,\n  EuiPanel,\n  EuiSpacer,\n  EuiText,\n  EuiTitle,\n} from '@elastic/eui';\nimport { FormattedMessage, InjectedIntl, injectI18n } from '@kbn/i18n/react';\nimport { get } from 'lodash';\nimport React, { ChangeEvent, Component, Fragment, HTMLProps } from 'react';\nimport { toastNotifications } from 'ui/notify';\nimport { Space } from '../../../../../../spaces/common/model/space';\nimport { UserProfile } from '../../../../../../xpack_main/public/services/user_profile';\nimport { IndexPrivilege } from '../../../../../common/model/index_privilege';\nimport { KibanaPrivilege } from '../../../../../common/model/kibana_privilege';\nimport { Role } from '../../../../../common/model/role';\nimport { isReservedRole } from '../../../../lib/role';\nimport { deleteRole, saveRole } from '../../../../objects';\nimport { ROLES_PATH } from '../../management_urls';\nimport { RoleValidationResult, RoleValidator } from '../lib/validate_role';\nimport { DeleteRoleButton } from './delete_role_button';\nimport { ElasticsearchPrivileges, KibanaPrivileges } from './privileges';\nimport { ReservedRoleBadge } from './reserved_role_badge';\n\ninterface Props {\n  role: Role;\n  runAsUsers: string[];\n  indexPatterns: string[];\n  httpClient: any;\n  rbacEnabled: boolean;\n  allowDocumentLevelSecurity: boolean;\n  allowFieldLevelSecurity: boolean;\n  kibanaAppPrivileges: KibanaPrivilege[];\n  spaces?: Space[];\n  spacesEnabled: boolean;\n  userProfile: UserProfile;\n  intl: InjectedIntl;\n}\n\ninterface State {\n  role: Role;\n  formError: RoleValidationResult | null;\n}\n\nclass EditRolePageUI extends Component<Props, State> {\n  private validator: RoleValidator;\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      role: props.role,\n      formError: null,\n    };\n    this.validator = new RoleValidator({ shouldValidate: false });\n  }\n\n  public render() {\n    const description = this.props.spacesEnabled ? (\n      <FormattedMessage\n        id=\"xpack.security.management.editRole.setPrivilegesToKibanaSpacesDescription\"\n        defaultMessage=\"Set privileges on your Elasticsearch data and control access to your Kibana spaces.\"\n      />\n    ) : (\n      <FormattedMessage\n        id=\"xpack.security.management.editRole.setPrivilegesToKibanaDescription\"\n        defaultMessage=\"Set privileges on your Elasticsearch data and control access to Kibana.\"\n      />\n    );\n\n    return (\n      <div className=\"editRolePage\">\n        <EuiForm {...this.state.formError}>\n          {this.getFormTitle()}\n\n          <EuiSpacer />\n\n          <EuiText size=\"s\">{description}</EuiText>\n\n          {isReservedRole(this.props.role) && (\n            <Fragment>\n              <EuiSpacer size=\"s\" />\n              <EuiText size=\"s\" color=\"subdued\">\n                <p id=\"reservedRoleDescription\" tabIndex={0}>\n                  <FormattedMessage\n                    id=\"xpack.security.management.editRole.modifyingReversedRolesDescription\"\n                    defaultMessage=\"Reserved roles are built-in and cannot be removed or modified.\"\n                  />\n                </p>\n              </EuiText>\n            </Fragment>\n          )}\n\n          <EuiSpacer />\n\n          {this.getRoleName()}\n\n          {this.getElasticsearchPrivileges()}\n\n          {this.getKibanaPrivileges()}\n\n          <EuiSpacer />\n\n          {this.getFormButtons()}\n        </EuiForm>\n      </div>\n    );\n  }\n\n  public getFormTitle = () => {\n    let titleText;\n    const props: HTMLProps<HTMLDivElement> = {\n      tabIndex: 0,\n    };\n    if (isReservedRole(this.props.role)) {\n      titleText = (\n        <FormattedMessage\n          id=\"xpack.security.management.editRole.viewingRoleTitle\"\n          defaultMessage=\"Viewing role\"\n        />\n      );\n      props['aria-describedby'] = 'reservedRoleDescription';\n    } else if (this.editingExistingRole()) {\n      titleText = (\n        <FormattedMessage\n          id=\"xpack.security.management.editRole.editRoleTitle\"\n          defaultMessage=\"Edit role\"\n        />\n      );\n    } else {\n      titleText = (\n        <FormattedMessage\n          id=\"xpack.security.management.editRole.createRoleTitle\"\n          defaultMessage=\"Create role\"\n        />\n      );\n    }\n\n    return (\n      <EuiTitle size=\"l\">\n        <h1 {...props}>\n          {titleText} <ReservedRoleBadge role={this.props.role} />\n        </h1>\n      </EuiTitle>\n    );\n  };\n\n  public getActionButton = () => {\n    if (this.editingExistingRole() && !isReservedRole(this.props.role)) {\n      return (\n        <EuiFlexItem grow={false}>\n          <DeleteRoleButton canDelete={true} onDelete={this.handleDeleteRole} />\n        </EuiFlexItem>\n      );\n    }\n\n    return null;\n  };\n\n  public getRoleName = () => {\n    return (\n      <EuiPanel>\n        <EuiFormRow\n          label={\n            <FormattedMessage\n              id=\"xpack.security.management.editRole.roleNameFormRowTitle\"\n              defaultMessage=\"Role name\"\n            />\n          }\n          helpText={\n            !isReservedRole(this.props.role) && this.editingExistingRole() ? (\n              <FormattedMessage\n                id=\"xpack.security.management.editRole.roleNameFormRowHelpText\"\n                defaultMessage=\"A role's name cannot be changed once it has been created.\"\n              />\n            ) : (\n              undefined\n            )\n          }\n          {...this.validator.validateRoleName(this.state.role)}\n        >\n          <EuiFieldText\n            name={'name'}\n            value={this.state.role.name || ''}\n            onChange={this.onNameChange}\n            data-test-subj={'roleFormNameInput'}\n            readOnly={isReservedRole(this.props.role) || this.editingExistingRole()}\n          />\n        </EuiFormRow>\n      </EuiPanel>\n    );\n  };\n\n  public onNameChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const rawValue = e.target.value;\n    const name = rawValue.replace(/\\s/g, '_');\n\n    this.setState({\n      role: {\n        ...this.state.role,\n        name,\n      },\n    });\n  };\n\n  public getElasticsearchPrivileges() {\n    return (\n      <div>\n        <EuiSpacer />\n        <ElasticsearchPrivileges\n          role={this.state.role}\n          editable={!isReservedRole(this.state.role)}\n          httpClient={this.props.httpClient}\n          onChange={this.onRoleChange}\n          runAsUsers={this.props.runAsUsers}\n          validator={this.validator}\n          indexPatterns={this.props.indexPatterns}\n          allowDocumentLevelSecurity={this.props.allowDocumentLevelSecurity}\n          allowFieldLevelSecurity={this.props.allowFieldLevelSecurity}\n        />\n      </div>\n    );\n  }\n\n  public onRoleChange = (role: Role) => {\n    this.setState({\n      role,\n    });\n  };\n\n  public getKibanaPrivileges = () => {\n    return (\n      <div>\n        <EuiSpacer />\n        <KibanaPrivileges\n          kibanaAppPrivileges={this.props.kibanaAppPrivileges}\n          spaces={this.props.spaces}\n          spacesEnabled={this.props.spacesEnabled}\n          userProfile={this.props.userProfile}\n          editable={!isReservedRole(this.state.role)}\n          role={this.state.role}\n          onChange={this.onRoleChange}\n          validator={this.validator}\n        />\n      </div>\n    );\n  };\n\n  public getFormButtons = () => {\n    if (isReservedRole(this.props.role)) {\n      return (\n        <EuiButton onClick={this.backToRoleList}>\n          <FormattedMessage\n            id=\"xpack.security.management.editRole.returnToRoleListButtonLabel\"\n            defaultMessage=\"Return to role list\"\n          />\n        </EuiButton>\n      );\n    }\n\n    const saveText = this.editingExistingRole() ? (\n      <FormattedMessage\n        id=\"xpack.security.management.editRole.updateRoleText\"\n        defaultMessage=\"Update role\"\n      />\n    ) : (\n      <FormattedMessage\n        id=\"xpack.security.management.editRole.createRoleText\"\n        defaultMessage=\"Create role\"\n      />\n    );\n\n    return (\n      <EuiFlexGroup responsive={false}>\n        <EuiFlexItem grow={false}>\n          <EuiButton\n            data-test-subj={`roleFormSaveButton`}\n            fill\n            onClick={this.saveRole}\n            disabled={isReservedRole(this.props.role)}\n          >\n            {saveText}\n          </EuiButton>\n        </EuiFlexItem>\n        <EuiFlexItem grow={false}>\n          <EuiButtonEmpty data-test-subj={`roleFormCancelButton`} onClick={this.backToRoleList}>\n            <FormattedMessage\n              id=\"xpack.security.management.editRole.cancelButtonLabel\"\n              defaultMessage=\"Cancel\"\n            />\n          </EuiButtonEmpty>\n        </EuiFlexItem>\n        <EuiFlexItem grow={true} />\n        {this.getActionButton()}\n      </EuiFlexGroup>\n    );\n  };\n\n  public editingExistingRole = () => {\n    return !!this.props.role.name;\n  };\n\n  public isPlaceholderPrivilege = (indexPrivilege: IndexPrivilege) => {\n    return indexPrivilege.names.length === 0;\n  };\n\n  public saveRole = () => {\n    this.validator.enableValidation();\n\n    const result = this.validator.validateForSave(this.state.role);\n    if (result.isInvalid) {\n      this.setState({\n        formError: result,\n      });\n    } else {\n      this.setState({\n        formError: null,\n      });\n\n      const { httpClient, intl } = this.props;\n\n      const role = {\n        ...this.state.role,\n      };\n\n      role.elasticsearch.indices = role.elasticsearch.indices.filter(\n        i => !this.isPlaceholderPrivilege(i)\n      );\n      role.elasticsearch.indices.forEach(index => index.query || delete index.query);\n\n      saveRole(httpClient, role)\n        .then(() => {\n          toastNotifications.addSuccess(\n            intl.formatMessage({\n              id: 'xpack.security.management.editRole.roleSuccessfullySavedNotificationMessage',\n              defaultMessage: 'Saved role',\n            })\n          );\n          this.backToRoleList();\n        })\n        .catch((error: any) => {\n          toastNotifications.addDanger(get(error, 'data.message'));\n        });\n    }\n  };\n\n  public handleDeleteRole = () => {\n    const { httpClient, role, intl } = this.props;\n\n    deleteRole(httpClient, role.name)\n      .then(() => {\n        toastNotifications.addSuccess(\n          intl.formatMessage({\n            id: 'xpack.security.management.editRole.roleSuccessfullyDeletedNotificationMessage',\n            defaultMessage: 'Deleted role',\n          })\n        );\n        this.backToRoleList();\n      })\n      .catch((error: any) => {\n        toastNotifications.addDanger(get(error, 'data.message'));\n      });\n  };\n\n  public backToRoleList = () => {\n    window.location.hash = ROLES_PATH;\n  };\n}\n\nexport const EditRolePage = injectI18n(EditRolePageUI);\n"]}]}