{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/src/legacy/core_plugins/kibana/public/dashboard/selectors/dashboard.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/legacy/core_plugins/kibana/public/dashboard/selectors/dashboard.ts","mtime":1567631711561},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport _ from 'lodash';\nexport var getPanels = function (dashboard) { return dashboard.panels; };\nexport var getPanel = function (dashboard, panelId) {\n    return getPanels(dashboard)[panelId];\n};\nexport var getPanelType = function (dashboard, panelId) {\n    return getPanel(dashboard, panelId).type;\n};\nexport var getEmbeddables = function (dashboard) { return dashboard.embeddables; };\n// TODO: rename panel.embeddableConfig to embeddableCustomization. Because it's on the panel that's stored on a\n// dashboard, renaming this will require a migration step.\nexport var getEmbeddableCustomization = function (dashboard, panelId) { return getPanel(dashboard, panelId).embeddableConfig; };\nexport var getEmbeddable = function (dashboard, panelId) {\n    return dashboard.embeddables[panelId];\n};\nexport var getEmbeddableError = function (dashboard, panelId) { return getEmbeddable(dashboard, panelId).error; };\nexport var getEmbeddableTitle = function (dashboard, panelId) {\n    var embeddable = getEmbeddable(dashboard, panelId);\n    return embeddable && embeddable.initialized && embeddable.metadata\n        ? embeddable.metadata.title\n        : '';\n};\nexport var getEmbeddableInitialized = function (dashboard, panelId) {\n    return getEmbeddable(dashboard, panelId).initialized;\n};\nexport var getEmbeddableStagedFilter = function (dashboard, panelId) { return getEmbeddable(dashboard, panelId).stagedFilter; };\nexport var getEmbeddableMetadata = function (dashboard, panelId) { return getEmbeddable(dashboard, panelId).metadata; };\nexport var getEmbeddableEditUrl = function (dashboard, panelId) {\n    var embeddable = getEmbeddable(dashboard, panelId);\n    return embeddable && embeddable.initialized && embeddable.metadata\n        ? embeddable.metadata.editUrl\n        : '';\n};\nexport var getVisibleContextMenuPanelId = function (dashboard) {\n    return dashboard.view.visibleContextMenuPanelId;\n};\nexport var getUseMargins = function (dashboard) { return dashboard.view.useMargins; };\nexport var getViewMode = function (dashboard) {\n    return dashboard.view.viewMode;\n};\nexport var getFullScreenMode = function (dashboard) {\n    return dashboard.view.isFullScreenMode;\n};\nexport var getHidePanelTitles = function (dashboard) {\n    return dashboard.view.hidePanelTitles;\n};\nexport var getMaximizedPanelId = function (dashboard) {\n    return dashboard.view.maximizedPanelId;\n};\nexport var getTimeRange = function (dashboard) { return dashboard.view.timeRange; };\nexport var getFilters = function (dashboard) { return dashboard.view.filters; };\nexport var getQuery = function (dashboard) { return dashboard.view.query; };\nexport var getMetadata = function (dashboard) { return dashboard.metadata; };\nexport var getTitle = function (dashboard) { return dashboard.metadata.title; };\nexport var getDescription = function (dashboard) {\n    return dashboard.metadata.description;\n};\nexport var getContainerState = function (dashboard, panelId) {\n    var time = getTimeRange(dashboard);\n    return {\n        customTitle: getPanel(dashboard, panelId).title,\n        embeddableCustomization: _.cloneDeep(getEmbeddableCustomization(dashboard, panelId) || {}),\n        filters: getFilters(dashboard),\n        hidePanelTitles: getHidePanelTitles(dashboard),\n        isPanelExpanded: getMaximizedPanelId(dashboard) === panelId,\n        query: getQuery(dashboard),\n        timeRange: {\n            from: time.from,\n            to: time.to,\n        },\n        viewMode: getViewMode(dashboard),\n    };\n};\n/**\n * @return an array of filters any embeddables wish dashboard to apply\n */\nexport var getStagedFilters = function (dashboard) {\n    return _.compact(_.map(dashboard.embeddables, 'stagedFilter'));\n};\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/src/legacy/core_plugins/kibana/public/dashboard/selectors/dashboard.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/src/legacy/core_plugins/kibana/public/dashboard/selectors/dashboard.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport _ from 'lodash';\nimport { ContainerState, EmbeddableMetadata, Filters, Query, TimeRange } from 'ui/embeddable';\nimport { EmbeddableCustomization } from 'ui/embeddable/types';\nimport { DashboardViewMode } from '../dashboard_view_mode';\nimport {\n  DashboardMetadata,\n  DashboardState,\n  EmbeddableReduxState,\n  EmbeddablesMap,\n  PanelId,\n  PanelsMap,\n  PanelState,\n} from './types';\n\nexport const getPanels = (dashboard: DashboardState): PanelsMap => dashboard.panels;\n\nexport const getPanel = (dashboard: DashboardState, panelId: PanelId): PanelState =>\n  getPanels(dashboard)[panelId];\n\nexport const getPanelType = (dashboard: DashboardState, panelId: PanelId): string =>\n  getPanel(dashboard, panelId).type;\n\nexport const getEmbeddables = (dashboard: DashboardState): EmbeddablesMap => dashboard.embeddables;\n\n// TODO: rename panel.embeddableConfig to embeddableCustomization. Because it's on the panel that's stored on a\n// dashboard, renaming this will require a migration step.\nexport const getEmbeddableCustomization = (\n  dashboard: DashboardState,\n  panelId: PanelId\n): EmbeddableCustomization => getPanel(dashboard, panelId).embeddableConfig;\n\nexport const getEmbeddable = (dashboard: DashboardState, panelId: PanelId): EmbeddableReduxState =>\n  dashboard.embeddables[panelId];\n\nexport const getEmbeddableError = (\n  dashboard: DashboardState,\n  panelId: PanelId\n): string | object | undefined => getEmbeddable(dashboard, panelId).error;\n\nexport const getEmbeddableTitle = (\n  dashboard: DashboardState,\n  panelId: PanelId\n): string | undefined => {\n  const embeddable = getEmbeddable(dashboard, panelId);\n  return embeddable && embeddable.initialized && embeddable.metadata\n    ? embeddable.metadata.title\n    : '';\n};\n\nexport const getEmbeddableInitialized = (dashboard: DashboardState, panelId: PanelId): boolean =>\n  getEmbeddable(dashboard, panelId).initialized;\n\nexport const getEmbeddableStagedFilter = (\n  dashboard: DashboardState,\n  panelId: PanelId\n): object | undefined => getEmbeddable(dashboard, panelId).stagedFilter;\n\nexport const getEmbeddableMetadata = (\n  dashboard: DashboardState,\n  panelId: PanelId\n): EmbeddableMetadata | undefined => getEmbeddable(dashboard, panelId).metadata;\n\nexport const getEmbeddableEditUrl = (\n  dashboard: DashboardState,\n  panelId: PanelId\n): string | undefined => {\n  const embeddable = getEmbeddable(dashboard, panelId);\n  return embeddable && embeddable.initialized && embeddable.metadata\n    ? embeddable.metadata.editUrl\n    : '';\n};\n\nexport const getVisibleContextMenuPanelId = (dashboard: DashboardState): PanelId | undefined =>\n  dashboard.view.visibleContextMenuPanelId;\n\nexport const getUseMargins = (dashboard: DashboardState): boolean => dashboard.view.useMargins;\n\nexport const getViewMode = (dashboard: DashboardState): DashboardViewMode =>\n  dashboard.view.viewMode;\n\nexport const getFullScreenMode = (dashboard: DashboardState): boolean =>\n  dashboard.view.isFullScreenMode;\n\nexport const getHidePanelTitles = (dashboard: DashboardState): boolean =>\n  dashboard.view.hidePanelTitles;\n\nexport const getMaximizedPanelId = (dashboard: DashboardState): PanelId | undefined =>\n  dashboard.view.maximizedPanelId;\n\nexport const getTimeRange = (dashboard: DashboardState): TimeRange => dashboard.view.timeRange;\n\nexport const getFilters = (dashboard: DashboardState): Filters => dashboard.view.filters;\n\nexport const getQuery = (dashboard: DashboardState): Query => dashboard.view.query;\n\nexport const getMetadata = (dashboard: DashboardState): DashboardMetadata => dashboard.metadata;\n\nexport const getTitle = (dashboard: DashboardState): string => dashboard.metadata.title;\n\nexport const getDescription = (dashboard: DashboardState): string | undefined =>\n  dashboard.metadata.description;\n\nexport const getContainerState = (dashboard: DashboardState, panelId: PanelId): ContainerState => {\n  const time = getTimeRange(dashboard);\n  return {\n    customTitle: getPanel(dashboard, panelId).title,\n    embeddableCustomization: _.cloneDeep(getEmbeddableCustomization(dashboard, panelId) || {}),\n    filters: getFilters(dashboard),\n    hidePanelTitles: getHidePanelTitles(dashboard),\n    isPanelExpanded: getMaximizedPanelId(dashboard) === panelId,\n    query: getQuery(dashboard),\n    timeRange: {\n      from: time.from,\n      to: time.to,\n    },\n    viewMode: getViewMode(dashboard),\n  };\n};\n\n/**\n * @return an array of filters any embeddables wish dashboard to apply\n */\nexport const getStagedFilters = (dashboard: DashboardState): Filters =>\n  _.compact(_.map(dashboard.embeddables, 'stagedFilter'));\n"]}]}