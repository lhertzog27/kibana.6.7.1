{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/utils/styles.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/utils/styles.ts","mtime":1567631711990},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport get from 'lodash/fp/get';\nimport getOr from 'lodash/fp/getOr';\nimport { parseToHsl, shade, tint } from 'polished';\nvar asPropReader = function (reader) {\n    return typeof reader === 'function'\n        ? reader\n        : function (props, defaultValue) { return getOr(defaultValue, reader, props); };\n};\nexport var switchProp = Object.assign(function (propName, options) { return function (props) {\n    var propValue = asPropReader(propName)(props, switchProp.default);\n    if (typeof propValue === 'undefined') {\n        return;\n    }\n    return options instanceof Map ? options.get(propValue) : get(propValue, options);\n}; }, {\n    default: Symbol('default'),\n});\nexport var ifProp = function (propName, pass, fail) { return function (props) { return (asPropReader(propName)(props) ? pass : fail); }; };\nexport var tintOrShade = function (textColor, color, fraction) {\n    return parseToHsl(textColor).lightness > 0.5 ? shade(fraction, color) : tint(fraction, color);\n};\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/utils/styles.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/utils/styles.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAEH,OAAO,GAAG,MAAM,eAAe,CAAC;AAChC,OAAO,KAAK,MAAM,iBAAiB,CAAC;AACpC,OAAO,EAAE,UAAU,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,UAAU,CAAC;AAInD,IAAM,YAAY,GAAG,UAAC,MAAsC;IAC1D,OAAA,OAAO,MAAM,KAAK,UAAU;QAC1B,CAAC,CAAC,MAAM;QACR,CAAC,CAAC,UACE,KAAY,EACZ,YAAsB,IACnB,OAAA,KAAK,CAAC,YAAY,EAAE,MAAc,EAAE,KAAK,CAAC,EAA1C,CAA0C;AALnD,CAKmD,CAAC;AAEtD,MAAM,CAAC,IAAM,UAAU,GAAG,MAAM,CAAC,MAAM,CACrC,UAAC,QAAwC,EAAE,OAA+B,IAAK,OAAA,UAC7E,KAAa;IAEb,IAAM,SAAS,GAAG,YAAY,CAAC,QAAQ,CAAC,CAAC,KAAK,EAAE,UAAU,CAAC,OAAO,CAAC,CAAC;IACpE,IAAI,OAAO,SAAS,KAAK,WAAW,EAAE;QACpC,OAAO;KACR;IACD,OAAO,OAAO,YAAY,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;AACnF,CAAC,EAR8E,CAQ9E,EACD;IACE,OAAO,EAAE,MAAM,CAAC,SAAS,CAAC;CAC3B,CACF,CAAC;AAEF,MAAM,CAAC,IAAM,MAAM,GAAG,UACpB,QAAwC,EACxC,IAAU,EACV,IAAU,IACP,OAAA,UAAC,KAAa,IAAK,OAAA,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,EAA7C,CAA6C,EAAhE,CAAgE,CAAC;AAEtE,MAAM,CAAC,IAAM,WAAW,GAAG,UAAC,SAAmB,EAAE,KAAe,EAAE,QAAgB;IAChF,OAAO,UAAU,CAAC,SAAS,CAAC,CAAC,SAAS,GAAG,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;AAChG,CAAC,CAAC","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport get from 'lodash/fp/get';\nimport getOr from 'lodash/fp/getOr';\nimport { parseToHsl, shade, tint } from 'polished';\n\ntype PropReader = <Prop, Default = any>(props: object, defaultValue?: Default) => Prop;\n\nconst asPropReader = (reader: string | string[] | PropReader) =>\n  typeof reader === 'function'\n    ? reader\n    : <Props extends object, Prop extends keyof Props, Default>(\n        props: Props,\n        defaultValue?: Default\n      ) => getOr(defaultValue, reader as Prop, props);\n\nexport const switchProp = Object.assign(\n  (propName: string | string[] | PropReader, options: Map<any, any> | object) => (\n    props: object\n  ) => {\n    const propValue = asPropReader(propName)(props, switchProp.default);\n    if (typeof propValue === 'undefined') {\n      return;\n    }\n    return options instanceof Map ? options.get(propValue) : get(propValue, options);\n  },\n  {\n    default: Symbol('default'),\n  }\n);\n\nexport const ifProp = <Pass, Fail>(\n  propName: string | string[] | PropReader,\n  pass: Pass,\n  fail: Fail\n) => (props: object) => (asPropReader(propName)(props) ? pass : fail);\n\nexport const tintOrShade = (textColor: 'string', color: 'string', fraction: number) => {\n  return parseToHsl(textColor).lightness > 0.5 ? shade(fraction, color) : tint(fraction, color);\n};\n"]}]}