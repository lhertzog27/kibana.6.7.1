{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/utils/formatters/data.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/utils/formatters/data.ts","mtime":1567631711990},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nvar _a, _b;\nimport { InfraWaffleMapDataFormat } from '../../lib/lib';\nimport { formatNumber } from './number';\n/**\n * The labels are derived from these two Wikipedia articles.\n * https://en.wikipedia.org/wiki/Kilobit\n * https://en.wikipedia.org/wiki/Kilobyte\n */\nvar LABELS = (_a = {},\n    _a[InfraWaffleMapDataFormat.bytesDecimal] = ['B', 'kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],\n    _a[InfraWaffleMapDataFormat.bytesBinaryIEC] = [\n        'b',\n        'Kib',\n        'Mib',\n        'Gib',\n        'Tib',\n        'Pib',\n        'Eib',\n        'Zib',\n        'Yib',\n    ],\n    _a[InfraWaffleMapDataFormat.bytesBinaryJEDEC] = ['B', 'KB', 'MB', 'GB'],\n    _a[InfraWaffleMapDataFormat.bitsDecimal] = [\n        'bit',\n        'kbit',\n        'Mbit',\n        'Gbit',\n        'Tbit',\n        'Pbit',\n        'Ebit',\n        'Zbit',\n        'Ybit',\n    ],\n    _a[InfraWaffleMapDataFormat.bitsBinaryIEC] = [\n        'bit',\n        'Kibit',\n        'Mibit',\n        'Gibit',\n        'Tibit',\n        'Pibit',\n        'Eibit',\n        'Zibit',\n        'Yibit',\n    ],\n    _a[InfraWaffleMapDataFormat.bitsBinaryJEDEC] = ['bit', 'Kbit', 'Mbit', 'Gbit'],\n    _a[InfraWaffleMapDataFormat.abbreviatedNumber] = ['', 'K', 'M', 'B', 'T'],\n    _a);\nvar BASES = (_b = {},\n    _b[InfraWaffleMapDataFormat.bytesDecimal] = 1000,\n    _b[InfraWaffleMapDataFormat.bytesBinaryIEC] = 1024,\n    _b[InfraWaffleMapDataFormat.bytesBinaryJEDEC] = 1024,\n    _b[InfraWaffleMapDataFormat.bitsDecimal] = 1000,\n    _b[InfraWaffleMapDataFormat.bitsBinaryIEC] = 1024,\n    _b[InfraWaffleMapDataFormat.bitsBinaryJEDEC] = 1024,\n    _b[InfraWaffleMapDataFormat.abbreviatedNumber] = 1000,\n    _b);\nexport var createDataFormatter = function (format) { return function (val) {\n    var labels = LABELS[format];\n    var base = BASES[format];\n    var power = Math.min(Math.floor(Math.log(Math.abs(val)) / Math.log(base)), labels.length - 1);\n    if (power < 0) {\n        return \"\" + formatNumber(val) + labels[0];\n    }\n    return \"\" + formatNumber(val / Math.pow(base, power)) + labels[power];\n}; };\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/utils/formatters/data.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/utils/formatters/data.ts"],"names":[],"mappings":"AAAA;;;;GAIG;;AAEH,OAAO,EAAE,wBAAwB,EAAE,MAAM,eAAe,CAAC;AACzD,OAAO,EAAE,YAAY,EAAE,MAAM,UAAU,CAAC;AAExC;;;;GAIG;AACH,IAAM,MAAM;IACV,GAAC,wBAAwB,CAAC,YAAY,IAAG,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;IAC9F,GAAC,wBAAwB,CAAC,cAAc,IAAG;QACzC,GAAG;QACH,KAAK;QACL,KAAK;QACL,KAAK;QACL,KAAK;QACL,KAAK;QACL,KAAK;QACL,KAAK;QACL,KAAK;KACN;IACD,GAAC,wBAAwB,CAAC,gBAAgB,IAAG,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;IACpE,GAAC,wBAAwB,CAAC,WAAW,IAAG;QACtC,KAAK;QACL,MAAM;QACN,MAAM;QACN,MAAM;QACN,MAAM;QACN,MAAM;QACN,MAAM;QACN,MAAM;QACN,MAAM;KACP;IACD,GAAC,wBAAwB,CAAC,aAAa,IAAG;QACxC,KAAK;QACL,OAAO;QACP,OAAO;QACP,OAAO;QACP,OAAO;QACP,OAAO;QACP,OAAO;QACP,OAAO;QACP,OAAO;KACR;IACD,GAAC,wBAAwB,CAAC,eAAe,IAAG,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC;IAC3E,GAAC,wBAAwB,CAAC,iBAAiB,IAAG,CAAC,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;OACvE,CAAC;AAEF,IAAM,KAAK;IACT,GAAC,wBAAwB,CAAC,YAAY,IAAG,IAAI;IAC7C,GAAC,wBAAwB,CAAC,cAAc,IAAG,IAAI;IAC/C,GAAC,wBAAwB,CAAC,gBAAgB,IAAG,IAAI;IACjD,GAAC,wBAAwB,CAAC,WAAW,IAAG,IAAI;IAC5C,GAAC,wBAAwB,CAAC,aAAa,IAAG,IAAI;IAC9C,GAAC,wBAAwB,CAAC,eAAe,IAAG,IAAI;IAChD,GAAC,wBAAwB,CAAC,iBAAiB,IAAG,IAAI;OACnD,CAAC;AAEF,MAAM,CAAC,IAAM,mBAAmB,GAAG,UAAC,MAAgC,IAAK,OAAA,UAAC,GAAW;IACnF,IAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC;IAC9B,IAAM,IAAI,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC;IAC3B,IAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,EAAE,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;IAChG,IAAI,KAAK,GAAG,CAAC,EAAE;QACb,OAAO,KAAG,YAAY,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,CAAC,CAAG,CAAC;KAC3C;IACD,OAAO,KAAG,YAAY,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,GAAG,MAAM,CAAC,KAAK,CAAG,CAAC;AACxE,CAAC,EARwE,CAQxE,CAAC","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport { InfraWaffleMapDataFormat } from '../../lib/lib';\nimport { formatNumber } from './number';\n\n/**\n * The labels are derived from these two Wikipedia articles.\n * https://en.wikipedia.org/wiki/Kilobit\n * https://en.wikipedia.org/wiki/Kilobyte\n */\nconst LABELS = {\n  [InfraWaffleMapDataFormat.bytesDecimal]: ['B', 'kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],\n  [InfraWaffleMapDataFormat.bytesBinaryIEC]: [\n    'b',\n    'Kib',\n    'Mib',\n    'Gib',\n    'Tib',\n    'Pib',\n    'Eib',\n    'Zib',\n    'Yib',\n  ],\n  [InfraWaffleMapDataFormat.bytesBinaryJEDEC]: ['B', 'KB', 'MB', 'GB'],\n  [InfraWaffleMapDataFormat.bitsDecimal]: [\n    'bit',\n    'kbit',\n    'Mbit',\n    'Gbit',\n    'Tbit',\n    'Pbit',\n    'Ebit',\n    'Zbit',\n    'Ybit',\n  ],\n  [InfraWaffleMapDataFormat.bitsBinaryIEC]: [\n    'bit',\n    'Kibit',\n    'Mibit',\n    'Gibit',\n    'Tibit',\n    'Pibit',\n    'Eibit',\n    'Zibit',\n    'Yibit',\n  ],\n  [InfraWaffleMapDataFormat.bitsBinaryJEDEC]: ['bit', 'Kbit', 'Mbit', 'Gbit'],\n  [InfraWaffleMapDataFormat.abbreviatedNumber]: ['', 'K', 'M', 'B', 'T'],\n};\n\nconst BASES = {\n  [InfraWaffleMapDataFormat.bytesDecimal]: 1000,\n  [InfraWaffleMapDataFormat.bytesBinaryIEC]: 1024,\n  [InfraWaffleMapDataFormat.bytesBinaryJEDEC]: 1024,\n  [InfraWaffleMapDataFormat.bitsDecimal]: 1000,\n  [InfraWaffleMapDataFormat.bitsBinaryIEC]: 1024,\n  [InfraWaffleMapDataFormat.bitsBinaryJEDEC]: 1024,\n  [InfraWaffleMapDataFormat.abbreviatedNumber]: 1000,\n};\n\nexport const createDataFormatter = (format: InfraWaffleMapDataFormat) => (val: number) => {\n  const labels = LABELS[format];\n  const base = BASES[format];\n  const power = Math.min(Math.floor(Math.log(Math.abs(val)) / Math.log(base)), labels.length - 1);\n  if (power < 0) {\n    return `${formatNumber(val)}${labels[0]}`;\n  }\n  return `${formatNumber(val / Math.pow(base, power))}${labels[power]}`;\n};\n"]}]}