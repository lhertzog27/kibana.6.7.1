{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/src/core/public/base_path/base_path_service.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/core/public/base_path/base_path_service.ts","mtime":1567631711496},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { modifyUrl } from '../utils';\nvar BasePathService = /** @class */ (function () {\n    function BasePathService() {\n    }\n    BasePathService.prototype.start = function (_a) {\n        var injectedMetadata = _a.injectedMetadata;\n        var basePath = injectedMetadata.getBasePath() || '';\n        return {\n            /**\n             * Get the current basePath as defined by the server\n             */\n            get: function () {\n                return basePath;\n            },\n            /**\n             * Add the current basePath to a path string.\n             * @param path A relative url including the leading `/`, otherwise it will be returned without modification\n             */\n            addToPath: function (path) {\n                return modifyUrl(path, function (parts) {\n                    if (!parts.hostname && parts.pathname && parts.pathname.startsWith('/')) {\n                        parts.pathname = \"\" + basePath + parts.pathname;\n                    }\n                });\n            },\n            /**\n             * Remove the basePath from a path that starts with it\n             * @param path A relative url that starts with the basePath, which will be stripped\n             */\n            removeFromPath: function (path) {\n                if (!basePath) {\n                    return path;\n                }\n                if (path === basePath) {\n                    return '/';\n                }\n                if (path.startsWith(basePath + '/')) {\n                    return path.slice(basePath.length);\n                }\n                return path;\n            },\n        };\n    };\n    return BasePathService;\n}());\nexport { BasePathService };\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/src/core/public/base_path/base_path_service.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/src/core/public/base_path/base_path_service.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;GAiBG;AAGH,OAAO,EAAE,SAAS,EAAE,MAAM,UAAU,CAAC;AAMrC;IAAA;IA6CA,CAAC;IA5CQ,+BAAK,GAAZ,UAAa,EAA0B;YAAxB,sCAAgB;QAC7B,IAAM,QAAQ,GAAG,gBAAgB,CAAC,WAAW,EAAE,IAAI,EAAE,CAAC;QAEtD,OAAO;YACL;;eAEG;YACH,GAAG;gBACD,OAAO,QAAQ,CAAC;YAClB,CAAC;YAED;;;eAGG;YACH,SAAS,YAAC,IAAY;gBACpB,OAAO,SAAS,CAAC,IAAI,EAAE,UAAA,KAAK;oBAC1B,IAAI,CAAC,KAAK,CAAC,QAAQ,IAAI,KAAK,CAAC,QAAQ,IAAI,KAAK,CAAC,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;wBACvE,KAAK,CAAC,QAAQ,GAAG,KAAG,QAAQ,GAAG,KAAK,CAAC,QAAU,CAAC;qBACjD;gBACH,CAAC,CAAC,CAAC;YACL,CAAC;YAED;;;eAGG;YACH,cAAc,YAAC,IAAY;gBACzB,IAAI,CAAC,QAAQ,EAAE;oBACb,OAAO,IAAI,CAAC;iBACb;gBAED,IAAI,IAAI,KAAK,QAAQ,EAAE;oBACrB,OAAO,GAAG,CAAC;iBACZ;gBAED,IAAI,IAAI,CAAC,UAAU,CAAC,QAAQ,GAAG,GAAG,CAAC,EAAE;oBACnC,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;iBACpC;gBAED,OAAO,IAAI,CAAC;YACd,CAAC;SACF,CAAC;IACJ,CAAC;IACH,sBAAC;AAAD,CAAC,AA7CD,IA6CC","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { InjectedMetadataStartContract } from '../injected_metadata';\nimport { modifyUrl } from '../utils';\n\ninterface Deps {\n  injectedMetadata: InjectedMetadataStartContract;\n}\n\nexport class BasePathService {\n  public start({ injectedMetadata }: Deps) {\n    const basePath = injectedMetadata.getBasePath() || '';\n\n    return {\n      /**\n       * Get the current basePath as defined by the server\n       */\n      get() {\n        return basePath;\n      },\n\n      /**\n       * Add the current basePath to a path string.\n       * @param path A relative url including the leading `/`, otherwise it will be returned without modification\n       */\n      addToPath(path: string) {\n        return modifyUrl(path, parts => {\n          if (!parts.hostname && parts.pathname && parts.pathname.startsWith('/')) {\n            parts.pathname = `${basePath}${parts.pathname}`;\n          }\n        });\n      },\n\n      /**\n       * Remove the basePath from a path that starts with it\n       * @param path A relative url that starts with the basePath, which will be stripped\n       */\n      removeFromPath(path: string) {\n        if (!basePath) {\n          return path;\n        }\n\n        if (path === basePath) {\n          return '/';\n        }\n\n        if (path.startsWith(basePath + '/')) {\n          return path.slice(basePath.length);\n        }\n\n        return path;\n      },\n    };\n  }\n}\n\nexport type BasePathStartContract = ReturnType<BasePathService['start']>;\n"]}]}