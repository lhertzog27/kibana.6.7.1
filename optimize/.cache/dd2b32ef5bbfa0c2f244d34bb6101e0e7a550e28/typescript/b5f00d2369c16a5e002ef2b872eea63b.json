{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/security/public/views/management/edit_role/lib/validate_role.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/security/public/views/management/edit_role/lib/validate_role.ts","mtime":1567631712302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport * as tslib_1 from \"tslib\";\n/*\n * Copyright Elasticsearch B.V. ../../../../../common/model/index_privileger one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport { i18n } from '@kbn/i18n';\nvar RoleValidator = /** @class */ (function () {\n    function RoleValidator(options) {\n        if (options === void 0) { options = {}; }\n        this.inProgressSpacePrivileges = [];\n        this.shouldValidate = options.shouldValidate;\n    }\n    RoleValidator.prototype.enableValidation = function () {\n        this.shouldValidate = true;\n    };\n    RoleValidator.prototype.disableValidation = function () {\n        this.shouldValidate = false;\n    };\n    RoleValidator.prototype.validateRoleName = function (role) {\n        if (!this.shouldValidate) {\n            return valid();\n        }\n        if (!role.name) {\n            return invalid(i18n.translate('xpack.security.management.editRoles.validateRole.provideRoleNameWarningMessage', {\n                defaultMessage: 'Please provide a role name',\n            }));\n        }\n        if (role.name.length > 1024) {\n            return invalid(i18n.translate('xpack.security.management.editRoles.validateRole.nameLengthWarningMessage', {\n                defaultMessage: 'Name must not exceed 1024 characters',\n            }));\n        }\n        if (!role.name.match(/^[a-zA-Z_][a-zA-Z0-9_@\\-\\$\\.]*$/)) {\n            return invalid(i18n.translate('xpack.security.management.editRoles.validateRole.nameAllowedCharactersWarningMessage', {\n                defaultMessage: 'Name must begin with a letter or underscore and contain only letters, underscores, and numbers.',\n            }));\n        }\n        return valid();\n    };\n    RoleValidator.prototype.validateIndexPrivileges = function (role) {\n        var _this = this;\n        if (!this.shouldValidate) {\n            return valid();\n        }\n        if (!Array.isArray(role.elasticsearch.indices)) {\n            throw new TypeError(i18n.translate('xpack.security.management.editRoles.validateRole.indicesTypeErrorMessage', {\n                defaultMessage: 'Expected {elasticIndices} to be an array',\n                values: {\n                    elasticIndices: '\"role.elasticsearch.indices\"',\n                },\n            }));\n        }\n        var areIndicesValid = role.elasticsearch.indices\n            .map(function (indexPriv) { return _this.validateIndexPrivilege(indexPriv); })\n            .find(function (result) { return result.isInvalid; }) == null;\n        if (areIndicesValid) {\n            return valid();\n        }\n        return invalid();\n    };\n    RoleValidator.prototype.validateIndexPrivilege = function (indexPrivilege) {\n        if (!this.shouldValidate) {\n            return valid();\n        }\n        if (indexPrivilege.names.length && !indexPrivilege.privileges.length) {\n            return invalid(i18n.translate('xpack.security.management.editRoles.validateRole.onePrivilegeRequiredWarningMessage', {\n                defaultMessage: 'At least one privilege is required',\n            }));\n        }\n        return valid();\n    };\n    RoleValidator.prototype.validateSelectedSpaces = function (spaceIds, privilege) {\n        if (!this.shouldValidate) {\n            return valid();\n        }\n        // If no assigned privilege, then no spaces are OK\n        if (!privilege) {\n            return valid();\n        }\n        if (Array.isArray(spaceIds) && spaceIds.length > 0) {\n            return valid();\n        }\n        return invalid(i18n.translate('xpack.security.management.editRoles.validateRole.oneSpaceRequiredWarningMessage', {\n            defaultMessage: 'At least one space is required',\n        }));\n    };\n    RoleValidator.prototype.validateSelectedPrivilege = function (spaceIds, privilege) {\n        if (!this.shouldValidate) {\n            return valid();\n        }\n        // If no assigned spaces, then a missing privilege is OK\n        if (!spaceIds || spaceIds.length === 0) {\n            return valid();\n        }\n        if (privilege) {\n            return valid();\n        }\n        return invalid(i18n.translate('xpack.security.management.editRoles.validateRole.privilegeRequiredWarningMessage', {\n            defaultMessage: 'Privilege is required',\n        }));\n    };\n    RoleValidator.prototype.setInProgressSpacePrivileges = function (inProgressSpacePrivileges) {\n        this.inProgressSpacePrivileges = tslib_1.__spread(inProgressSpacePrivileges);\n    };\n    RoleValidator.prototype.validateInProgressSpacePrivileges = function (role) {\n        var _this = this;\n        var global = role.kibana.global;\n        // A Global privilege of \"all\" will ignore all in progress privileges,\n        // so the form should not block saving in this scenario.\n        var shouldValidate = this.shouldValidate && !global.includes('all');\n        if (!shouldValidate) {\n            return valid();\n        }\n        var allInProgressValid = this.inProgressSpacePrivileges.every(function (_a) {\n            var spaces = _a.spaces, privilege = _a.privilege;\n            return (!_this.validateSelectedSpaces(spaces, privilege).isInvalid &&\n                !_this.validateSelectedPrivilege(spaces, privilege).isInvalid);\n        });\n        if (allInProgressValid) {\n            return valid();\n        }\n        return invalid();\n    };\n    RoleValidator.prototype.validateSpacePrivileges = function (role) {\n        if (!this.shouldValidate) {\n            return valid();\n        }\n        var privileges = Object.values(role.kibana.space || {});\n        var arePrivilegesValid = privileges.every(function (assignedPrivilege) { return !!assignedPrivilege; });\n        var areInProgressPrivilegesValid = !this.validateInProgressSpacePrivileges(role).isInvalid;\n        if (arePrivilegesValid && areInProgressPrivilegesValid) {\n            return valid();\n        }\n        return invalid();\n    };\n    RoleValidator.prototype.validateForSave = function (role) {\n        var isNameInvalid = this.validateRoleName(role).isInvalid;\n        var areIndicesInvalid = this.validateIndexPrivileges(role).isInvalid;\n        var areSpacePrivilegesInvalid = this.validateSpacePrivileges(role).isInvalid;\n        if (isNameInvalid || areIndicesInvalid || areSpacePrivilegesInvalid) {\n            return invalid();\n        }\n        return valid();\n    };\n    return RoleValidator;\n}());\nexport { RoleValidator };\nfunction invalid(error) {\n    return {\n        isInvalid: true,\n        error: error,\n    };\n}\nfunction valid() {\n    return {\n        isInvalid: false,\n    };\n}\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/security/public/views/management/edit_role/lib/validate_role.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/security/public/views/management/edit_role/lib/validate_role.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\n/*\n * Copyright Elasticsearch B.V. ../../../../../common/model/index_privileger one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport { i18n } from '@kbn/i18n';\nimport { IndexPrivilege } from '../../../../../common/model/index_privilege';\nimport { KibanaPrivilege } from '../../../../../common/model/kibana_privilege';\nimport { Role } from '../../../../../common/model/role';\n\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\ninterface RoleValidatorOptions {\n  shouldValidate?: boolean;\n}\n\nexport interface RoleValidationResult {\n  isInvalid: boolean;\n  error?: string;\n}\n\nexport class RoleValidator {\n  private shouldValidate?: boolean;\n\n  private inProgressSpacePrivileges: any[] = [];\n\n  constructor(options: RoleValidatorOptions = {}) {\n    this.shouldValidate = options.shouldValidate;\n  }\n\n  public enableValidation() {\n    this.shouldValidate = true;\n  }\n\n  public disableValidation() {\n    this.shouldValidate = false;\n  }\n\n  public validateRoleName(role: Role): RoleValidationResult {\n    if (!this.shouldValidate) {\n      return valid();\n    }\n\n    if (!role.name) {\n      return invalid(\n        i18n.translate(\n          'xpack.security.management.editRoles.validateRole.provideRoleNameWarningMessage',\n          {\n            defaultMessage: 'Please provide a role name',\n          }\n        )\n      );\n    }\n    if (role.name.length > 1024) {\n      return invalid(\n        i18n.translate(\n          'xpack.security.management.editRoles.validateRole.nameLengthWarningMessage',\n          {\n            defaultMessage: 'Name must not exceed 1024 characters',\n          }\n        )\n      );\n    }\n    if (!role.name.match(/^[a-zA-Z_][a-zA-Z0-9_@\\-\\$\\.]*$/)) {\n      return invalid(\n        i18n.translate(\n          'xpack.security.management.editRoles.validateRole.nameAllowedCharactersWarningMessage',\n          {\n            defaultMessage:\n              'Name must begin with a letter or underscore and contain only letters, underscores, and numbers.',\n          }\n        )\n      );\n    }\n    return valid();\n  }\n\n  public validateIndexPrivileges(role: Role): RoleValidationResult {\n    if (!this.shouldValidate) {\n      return valid();\n    }\n\n    if (!Array.isArray(role.elasticsearch.indices)) {\n      throw new TypeError(\n        i18n.translate('xpack.security.management.editRoles.validateRole.indicesTypeErrorMessage', {\n          defaultMessage: 'Expected {elasticIndices} to be an array',\n          values: {\n            elasticIndices: '\"role.elasticsearch.indices\"',\n          },\n        })\n      );\n    }\n\n    const areIndicesValid =\n      role.elasticsearch.indices\n        .map(indexPriv => this.validateIndexPrivilege(indexPriv))\n        .find((result: RoleValidationResult) => result.isInvalid) == null;\n\n    if (areIndicesValid) {\n      return valid();\n    }\n    return invalid();\n  }\n\n  public validateIndexPrivilege(indexPrivilege: IndexPrivilege): RoleValidationResult {\n    if (!this.shouldValidate) {\n      return valid();\n    }\n\n    if (indexPrivilege.names.length && !indexPrivilege.privileges.length) {\n      return invalid(\n        i18n.translate(\n          'xpack.security.management.editRoles.validateRole.onePrivilegeRequiredWarningMessage',\n          {\n            defaultMessage: 'At least one privilege is required',\n          }\n        )\n      );\n    }\n    return valid();\n  }\n\n  public validateSelectedSpaces(\n    spaceIds: string[],\n    privilege: KibanaPrivilege | null\n  ): RoleValidationResult {\n    if (!this.shouldValidate) {\n      return valid();\n    }\n\n    // If no assigned privilege, then no spaces are OK\n    if (!privilege) {\n      return valid();\n    }\n\n    if (Array.isArray(spaceIds) && spaceIds.length > 0) {\n      return valid();\n    }\n    return invalid(\n      i18n.translate(\n        'xpack.security.management.editRoles.validateRole.oneSpaceRequiredWarningMessage',\n        {\n          defaultMessage: 'At least one space is required',\n        }\n      )\n    );\n  }\n\n  public validateSelectedPrivilege(\n    spaceIds: string[],\n    privilege: KibanaPrivilege | null\n  ): RoleValidationResult {\n    if (!this.shouldValidate) {\n      return valid();\n    }\n\n    // If no assigned spaces, then a missing privilege is OK\n    if (!spaceIds || spaceIds.length === 0) {\n      return valid();\n    }\n\n    if (privilege) {\n      return valid();\n    }\n    return invalid(\n      i18n.translate(\n        'xpack.security.management.editRoles.validateRole.privilegeRequiredWarningMessage',\n        {\n          defaultMessage: 'Privilege is required',\n        }\n      )\n    );\n  }\n\n  public setInProgressSpacePrivileges(inProgressSpacePrivileges: any[]) {\n    this.inProgressSpacePrivileges = [...inProgressSpacePrivileges];\n  }\n\n  public validateInProgressSpacePrivileges(role: Role): RoleValidationResult {\n    const { global } = role.kibana;\n\n    // A Global privilege of \"all\" will ignore all in progress privileges,\n    // so the form should not block saving in this scenario.\n    const shouldValidate = this.shouldValidate && !global.includes('all');\n\n    if (!shouldValidate) {\n      return valid();\n    }\n\n    const allInProgressValid = this.inProgressSpacePrivileges.every(({ spaces, privilege }) => {\n      return (\n        !this.validateSelectedSpaces(spaces, privilege).isInvalid &&\n        !this.validateSelectedPrivilege(spaces, privilege).isInvalid\n      );\n    });\n\n    if (allInProgressValid) {\n      return valid();\n    }\n    return invalid();\n  }\n\n  public validateSpacePrivileges(role: Role): RoleValidationResult {\n    if (!this.shouldValidate) {\n      return valid();\n    }\n\n    const privileges = Object.values(role.kibana.space || {});\n\n    const arePrivilegesValid = privileges.every(assignedPrivilege => !!assignedPrivilege);\n    const areInProgressPrivilegesValid = !this.validateInProgressSpacePrivileges(role).isInvalid;\n\n    if (arePrivilegesValid && areInProgressPrivilegesValid) {\n      return valid();\n    }\n    return invalid();\n  }\n\n  public validateForSave(role: Role): RoleValidationResult {\n    const { isInvalid: isNameInvalid } = this.validateRoleName(role);\n    const { isInvalid: areIndicesInvalid } = this.validateIndexPrivileges(role);\n    const { isInvalid: areSpacePrivilegesInvalid } = this.validateSpacePrivileges(role);\n\n    if (isNameInvalid || areIndicesInvalid || areSpacePrivilegesInvalid) {\n      return invalid();\n    }\n\n    return valid();\n  }\n}\n\nfunction invalid(error?: string): RoleValidationResult {\n  return {\n    isInvalid: true,\n    error,\n  };\n}\n\nfunction valid(): RoleValidationResult {\n  return {\n    isInvalid: false,\n  };\n}\n"]}]}