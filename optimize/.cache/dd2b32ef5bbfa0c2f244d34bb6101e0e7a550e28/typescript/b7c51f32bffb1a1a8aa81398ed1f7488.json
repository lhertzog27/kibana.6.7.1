{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/src/ui/public/query_bar/components/query_bar.tsx","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/query_bar/components/query_bar.tsx","mtime":1567631711749},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport * as tslib_1 from \"tslib\";\nimport classNames from 'classnames';\nimport _ from 'lodash';\nimport { compact, debounce, get, isEqual } from 'lodash';\nimport React, { Component } from 'react';\nimport { getFromLegacyIndexPattern } from 'ui/index_patterns/static_utils';\nimport { kfetch } from 'ui/kfetch';\nimport { PersistedLog } from 'ui/persisted_log';\nimport { timeHistory } from 'ui/timefilter/time_history';\nimport { getAutocompleteProvider, } from '../../autocomplete_providers';\nimport chrome from '../../chrome';\nimport { fromUser, toUser } from '../../parse_query';\nimport { matchPairs } from '../lib/match_pairs';\nimport { QueryLanguageSwitcher } from './language_switcher';\nimport { SuggestionsComponent } from './typeahead/suggestions_component';\nimport { EuiFieldText, EuiFlexGroup, EuiFlexItem, EuiOutsideClickDetector } from '@elastic/eui';\n// @ts-ignore\nimport { EuiSuperDatePicker, EuiSuperUpdateButton } from '@elastic/eui';\nimport { injectI18n } from '@kbn/i18n/react';\nvar KEY_CODES = {\n    LEFT: 37,\n    UP: 38,\n    RIGHT: 39,\n    DOWN: 40,\n    ENTER: 13,\n    ESC: 27,\n    TAB: 9,\n    HOME: 36,\n    END: 35,\n};\nvar config = chrome.getUiSettingsClient();\nvar recentSearchType = 'recentSearch';\nvar QueryBarUI = /** @class */ (function (_super) {\n    tslib_1.__extends(QueryBarUI, _super);\n    function QueryBarUI() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /*\n         Keep the \"draft\" value in local state until the user actually submits the query. There are a couple advantages:\n      \n          1. Each app doesn't have to maintain its own \"draft\" value if it wants to put off updating the query in app state\n          until the user manually submits their changes. Most apps have watches on the query value in app state so we don't\n          want to trigger those on every keypress. Also, some apps (e.g. dashboard) already juggle multiple query values,\n          each with slightly different semantics and I'd rather not add yet another variable to the mix.\n      \n          2. Changes to the local component state won't trigger an Angular digest cycle. Triggering digest cycles on every\n          keypress has been a major source of performance issues for us in previous implementations of the query bar.\n          See https://github.com/elastic/kibana/issues/14086\n        */\n        _this.state = {\n            query: {\n                query: toUser(_this.props.query.query),\n                language: _this.props.query.language,\n            },\n            inputIsPristine: true,\n            isSuggestionsVisible: false,\n            currentProps: _this.props,\n            index: null,\n            suggestions: [],\n            suggestionLimit: 50,\n            dateRangeFrom: _.get(_this.props, 'dateRangeFrom', 'now-15m'),\n            dateRangeTo: _.get(_this.props, 'dateRangeTo', 'now'),\n            isDateRangeInvalid: false,\n        };\n        _this.updateSuggestions = debounce(function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n            var suggestions;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.getSuggestions()];\n                    case 1:\n                        suggestions = (_a.sent()) || [];\n                        if (!this.componentIsUnmounting) {\n                            this.setState({ suggestions: suggestions });\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        }); }, 100);\n        _this.inputRef = null;\n        _this.componentIsUnmounting = false;\n        _this.persistedLog = null;\n        _this.isDirty = function () {\n            if (!_this.props.showDatePicker) {\n                return _this.state.query.query !== _this.props.query.query;\n            }\n            return (_this.state.query.query !== _this.props.query.query ||\n                _this.state.dateRangeFrom !== _this.props.dateRangeFrom ||\n                _this.state.dateRangeTo !== _this.props.dateRangeTo);\n        };\n        _this.increaseLimit = function () {\n            _this.setState({\n                suggestionLimit: _this.state.suggestionLimit + 50,\n            });\n        };\n        _this.incrementIndex = function (currentIndex) {\n            var nextIndex = currentIndex + 1;\n            if (currentIndex === null || nextIndex >= _this.state.suggestions.length) {\n                nextIndex = 0;\n            }\n            _this.setState({ index: nextIndex });\n        };\n        _this.decrementIndex = function (currentIndex) {\n            var previousIndex = currentIndex - 1;\n            if (previousIndex < 0) {\n                _this.setState({ index: _this.state.suggestions.length - 1 });\n            }\n            else {\n                _this.setState({ index: previousIndex });\n            }\n        };\n        _this.getSuggestions = function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n            var _a, query, language, recentSearchSuggestions, autocompleteProvider, indexPatterns, getAutocompleteSuggestions, _b, selectionStart, selectionEnd, suggestions;\n            return tslib_1.__generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        if (!this.inputRef) {\n                            return [2 /*return*/];\n                        }\n                        _a = this.state.query, query = _a.query, language = _a.language;\n                        recentSearchSuggestions = this.getRecentSearchSuggestions(query);\n                        autocompleteProvider = getAutocompleteProvider(language);\n                        if (!autocompleteProvider ||\n                            !Array.isArray(this.props.indexPatterns) ||\n                            compact(this.props.indexPatterns).length === 0) {\n                            return [2 /*return*/, recentSearchSuggestions];\n                        }\n                        indexPatterns = getFromLegacyIndexPattern(this.props.indexPatterns);\n                        getAutocompleteSuggestions = autocompleteProvider({ config: config, indexPatterns: indexPatterns });\n                        _b = this.inputRef, selectionStart = _b.selectionStart, selectionEnd = _b.selectionEnd;\n                        if (selectionStart === null || selectionEnd === null) {\n                            return [2 /*return*/];\n                        }\n                        return [4 /*yield*/, getAutocompleteSuggestions({\n                                query: query,\n                                selectionStart: selectionStart,\n                                selectionEnd: selectionEnd,\n                            })];\n                    case 1:\n                        suggestions = _c.sent();\n                        return [2 /*return*/, tslib_1.__spread(suggestions, recentSearchSuggestions)];\n                }\n            });\n        }); };\n        _this.selectSuggestion = function (_a) {\n            var type = _a.type, text = _a.text, start = _a.start, end = _a.end;\n            if (!_this.inputRef) {\n                return;\n            }\n            var query = _this.state.query.query;\n            var _b = _this.inputRef, selectionStart = _b.selectionStart, selectionEnd = _b.selectionEnd;\n            if (selectionStart === null || selectionEnd === null) {\n                return;\n            }\n            var value = query.substr(0, selectionStart) + query.substr(selectionEnd);\n            _this.setState({\n                query: tslib_1.__assign({}, _this.state.query, { query: value.substr(0, start) + text + value.substr(end) }),\n                index: null,\n            }, function () {\n                if (!_this.inputRef) {\n                    return;\n                }\n                _this.inputRef.setSelectionRange(start + text.length, start + text.length);\n                if (type === recentSearchType) {\n                    _this.onSubmit();\n                }\n                else {\n                    _this.updateSuggestions();\n                }\n            });\n        };\n        _this.getRecentSearchSuggestions = function (query) {\n            if (!_this.persistedLog) {\n                return [];\n            }\n            var recentSearches = _this.persistedLog.get();\n            var matchingRecentSearches = recentSearches.filter(function (recentQuery) {\n                var recentQueryString = typeof recentQuery === 'object' ? toUser(recentQuery) : recentQuery;\n                return recentQueryString.includes(query);\n            });\n            return matchingRecentSearches.map(function (recentSearch) {\n                var text = recentSearch;\n                var start = 0;\n                var end = query.length;\n                return { type: recentSearchType, text: text, start: start, end: end };\n            });\n        };\n        _this.onOutsideClick = function () {\n            if (_this.state.isSuggestionsVisible) {\n                _this.setState({ isSuggestionsVisible: false, index: null });\n            }\n        };\n        _this.onClickInput = function (event) {\n            if (event.target instanceof HTMLInputElement) {\n                _this.onInputChange(event.target.value);\n            }\n        };\n        _this.onClickSubmitButton = function (event) {\n            _this.onSubmit(function () { return event.preventDefault(); });\n        };\n        _this.onClickSuggestion = function (suggestion) {\n            if (!_this.inputRef) {\n                return;\n            }\n            _this.selectSuggestion(suggestion);\n            _this.inputRef.focus();\n        };\n        _this.onMouseEnterSuggestion = function (index) {\n            _this.setState({ index: index });\n        };\n        _this.onInputChange = function (value) {\n            var hasValue = Boolean(value.trim());\n            _this.setState({\n                query: {\n                    query: value,\n                    language: _this.state.query.language,\n                },\n                inputIsPristine: false,\n                isSuggestionsVisible: hasValue,\n                index: null,\n                suggestionLimit: 50,\n            });\n        };\n        _this.onChange = function (event) {\n            _this.updateSuggestions();\n            _this.onInputChange(event.target.value);\n        };\n        _this.onTimeChange = function (_a) {\n            var start = _a.start, end = _a.end, isInvalid = _a.isInvalid;\n            _this.setState({\n                dateRangeFrom: start,\n                dateRangeTo: end,\n                isDateRangeInvalid: isInvalid,\n            });\n        };\n        _this.onKeyUp = function (event) {\n            if ([KEY_CODES.LEFT, KEY_CODES.RIGHT, KEY_CODES.HOME, KEY_CODES.END].includes(event.keyCode)) {\n                _this.setState({ isSuggestionsVisible: true });\n                if (event.target instanceof HTMLInputElement) {\n                    _this.onInputChange(event.target.value);\n                }\n            }\n        };\n        _this.onKeyDown = function (event) {\n            if (event.target instanceof HTMLInputElement) {\n                var _a = _this.state, isSuggestionsVisible = _a.isSuggestionsVisible, index = _a.index;\n                var preventDefault = event.preventDefault.bind(event);\n                var target_1 = event.target, key = event.key, metaKey = event.metaKey;\n                var value = target_1.value, selectionStart = target_1.selectionStart, selectionEnd = target_1.selectionEnd;\n                var updateQuery = function (query, newSelectionStart, newSelectionEnd) {\n                    _this.setState({\n                        query: tslib_1.__assign({}, _this.state.query, { query: query }),\n                    }, function () {\n                        target_1.setSelectionRange(newSelectionStart, newSelectionEnd);\n                    });\n                };\n                switch (event.keyCode) {\n                    case KEY_CODES.DOWN:\n                        event.preventDefault();\n                        if (isSuggestionsVisible && index !== null) {\n                            _this.incrementIndex(index);\n                        }\n                        else {\n                            _this.setState({ isSuggestionsVisible: true, index: 0 });\n                        }\n                        break;\n                    case KEY_CODES.UP:\n                        event.preventDefault();\n                        if (isSuggestionsVisible && index !== null) {\n                            _this.decrementIndex(index);\n                        }\n                        break;\n                    case KEY_CODES.ENTER:\n                        event.preventDefault();\n                        if (isSuggestionsVisible && index !== null && _this.state.suggestions[index]) {\n                            _this.selectSuggestion(_this.state.suggestions[index]);\n                        }\n                        else {\n                            _this.onSubmit(function () { return event.preventDefault(); });\n                        }\n                        break;\n                    case KEY_CODES.ESC:\n                        event.preventDefault();\n                        _this.setState({ isSuggestionsVisible: false, index: null });\n                        break;\n                    case KEY_CODES.TAB:\n                        _this.setState({ isSuggestionsVisible: false, index: null });\n                        break;\n                    default:\n                        if (selectionStart !== null && selectionEnd !== null) {\n                            matchPairs({\n                                value: value,\n                                selectionStart: selectionStart,\n                                selectionEnd: selectionEnd,\n                                key: key,\n                                metaKey: metaKey,\n                                updateQuery: updateQuery,\n                                preventDefault: preventDefault,\n                            });\n                        }\n                        break;\n                }\n            }\n        };\n        _this.onSubmit = function (preventDefault) {\n            if (preventDefault) {\n                preventDefault();\n            }\n            if (_this.persistedLog) {\n                _this.persistedLog.add(_this.state.query.query);\n            }\n            timeHistory.add({\n                from: _this.state.dateRangeFrom,\n                to: _this.state.dateRangeTo,\n            });\n            _this.props.onSubmit({\n                query: {\n                    query: fromUser(_this.state.query.query),\n                    language: _this.state.query.language,\n                },\n                dateRange: {\n                    from: _this.state.dateRangeFrom,\n                    to: _this.state.dateRangeTo,\n                },\n            });\n            _this.setState({ isSuggestionsVisible: false });\n        };\n        _this.onSelectLanguage = function (language) {\n            // Send telemetry info every time the user opts in or out of kuery\n            // As a result it is important this function only ever gets called in the\n            // UI component's change handler.\n            kfetch({\n                pathname: '/api/kibana/kql_opt_in_telemetry',\n                method: 'POST',\n                body: JSON.stringify({ opt_in: language === 'kuery' }),\n            });\n            _this.props.store.set('kibana.userQueryLanguage', language);\n            _this.props.onSubmit({\n                query: {\n                    query: '',\n                    language: language,\n                },\n                dateRange: {\n                    from: _this.state.dateRangeFrom,\n                    to: _this.state.dateRangeTo,\n                },\n            });\n        };\n        return _this;\n    }\n    QueryBarUI.getDerivedStateFromProps = function (nextProps, prevState) {\n        if (isEqual(prevState.currentProps, nextProps)) {\n            return null;\n        }\n        var nextQuery = null;\n        if (nextProps.query.query !== prevState.query.query) {\n            nextQuery = {\n                query: toUser(nextProps.query.query),\n                language: nextProps.query.language,\n            };\n        }\n        else if (nextProps.query.language !== prevState.query.language) {\n            nextQuery = {\n                query: '',\n                language: nextProps.query.language,\n            };\n        }\n        var nextDateRange = null;\n        if (nextProps.dateRangeFrom !== get(prevState, 'currentProps.dateRangeFrom') ||\n            nextProps.dateRangeTo !== get(prevState, 'currentProps.dateRangeTo')) {\n            nextDateRange = {\n                dateRangeFrom: nextProps.dateRangeFrom,\n                dateRangeTo: nextProps.dateRangeTo,\n            };\n        }\n        var nextState = {\n            currentProps: nextProps,\n        };\n        if (nextQuery) {\n            nextState.query = nextQuery;\n        }\n        if (nextDateRange) {\n            nextState.dateRangeFrom = nextDateRange.dateRangeFrom;\n            nextState.dateRangeTo = nextDateRange.dateRangeTo;\n        }\n        return nextState;\n    };\n    QueryBarUI.prototype.componentDidMount = function () {\n        this.persistedLog = new PersistedLog(\"typeahead:\" + this.props.appName + \"-\" + this.state.query.language, {\n            maxLength: config.get('history:limit'),\n            filterDuplicates: true,\n        });\n        this.updateSuggestions();\n    };\n    QueryBarUI.prototype.componentDidUpdate = function (prevProps) {\n        if (prevProps.query.language !== this.props.query.language) {\n            this.persistedLog = new PersistedLog(\"typeahead:\" + this.props.appName + \"-\" + this.state.query.language, {\n                maxLength: config.get('history:limit'),\n                filterDuplicates: true,\n            });\n            this.updateSuggestions();\n        }\n    };\n    QueryBarUI.prototype.componentWillUnmount = function () {\n        this.updateSuggestions.cancel();\n        this.componentIsUnmounting = true;\n    };\n    QueryBarUI.prototype.render = function () {\n        var _this = this;\n        var classes = classNames('kbnQueryBar', {\n            'kbnQueryBar--withDatePicker': this.props.showDatePicker,\n        });\n        return (React.createElement(EuiFlexGroup, { className: classes, responsive: this.props.showDatePicker ? true : false, gutterSize: \"s\" },\n            React.createElement(EuiFlexItem, null,\n                React.createElement(EuiOutsideClickDetector, { onOutsideClick: this.onOutsideClick },\n                    React.createElement(\"div\", { style: { position: 'relative' }, role: \"combobox\", \"aria-haspopup\": \"true\", \"aria-expanded\": this.state.isSuggestionsVisible, \"aria-owns\": \"kbnTypeahead__items\", \"aria-controls\": \"kbnTypeahead__items\" },\n                        React.createElement(\"form\", { role: \"form\", name: \"queryBarForm\" },\n                            React.createElement(\"div\", { className: \"kuiLocalSearch\", role: \"search\" },\n                                React.createElement(\"div\", { className: \"kuiLocalSearchAssistedInput\" },\n                                    React.createElement(EuiFieldText, { className: \"kuiLocalSearchAssistedInput__input\", placeholder: this.props.intl.formatMessage({\n                                            id: 'common.ui.queryBar.searchInputPlaceholder',\n                                            defaultMessage: 'Search… (e.g. status:200 AND extension:PHP)',\n                                        }), value: this.state.query.query, onKeyDown: this.onKeyDown, onKeyUp: this.onKeyUp, onChange: this.onChange, onClick: this.onClickInput, fullWidth: true, autoFocus: !this.props.disableAutoFocus, inputRef: function (node) {\n                                            if (node) {\n                                                _this.inputRef = node;\n                                            }\n                                        }, autoComplete: \"off\", spellCheck: false, icon: \"console\", \"aria-label\": this.props.intl.formatMessage({\n                                            id: 'common.ui.queryBar.searchInputAriaLabel',\n                                            defaultMessage: 'Search input',\n                                        }), type: \"text\", \"data-test-subj\": \"queryInput\", \"aria-autocomplete\": \"list\", \"aria-controls\": \"kbnTypeahead__items\", \"aria-activedescendant\": this.state.isSuggestionsVisible ? 'suggestion-' + this.state.index : '', role: \"textbox\" }),\n                                    React.createElement(\"div\", { className: \"kuiLocalSearchAssistedInput__assistance\" },\n                                        React.createElement(QueryLanguageSwitcher, { language: this.state.query.language, onSelectLanguage: this.onSelectLanguage }))))),\n                        React.createElement(SuggestionsComponent, { show: this.state.isSuggestionsVisible, suggestions: this.state.suggestions.slice(0, this.state.suggestionLimit), index: this.state.index, onClick: this.onClickSuggestion, onMouseEnter: this.onMouseEnterSuggestion, loadMore: this.increaseLimit })))),\n            React.createElement(EuiFlexItem, { grow: false }, this.renderUpdateButton())));\n    };\n    QueryBarUI.prototype.renderUpdateButton = function () {\n        var button = (React.createElement(EuiSuperUpdateButton, { needsUpdate: this.isDirty(), isDisabled: this.state.isDateRangeInvalid, onClick: this.onClickSubmitButton, \"data-test-subj\": \"querySubmitButton\" }));\n        if (this.props.showDatePicker) {\n            return (React.createElement(EuiFlexGroup, { responsive: false, gutterSize: \"s\" },\n                this.renderDatePicker(),\n                React.createElement(EuiFlexItem, { grow: false }, button)));\n        }\n        else {\n            return button;\n        }\n    };\n    QueryBarUI.prototype.renderDatePicker = function () {\n        if (!this.props.showDatePicker) {\n            return null;\n        }\n        var recentlyUsedRanges = timeHistory\n            .get()\n            .map(function (_a) {\n            var from = _a.from, to = _a.to;\n            return {\n                start: from,\n                end: to,\n            };\n        });\n        var commonlyUsedRanges = config\n            .get('timepicker:quickRanges')\n            .map(function (_a) {\n            var from = _a.from, to = _a.to, display = _a.display;\n            return {\n                start: from,\n                end: to,\n                label: display,\n            };\n        });\n        return (React.createElement(EuiFlexItem, { className: \"kbnQueryBar__datePickerWrapper\" },\n            React.createElement(EuiSuperDatePicker, { start: this.state.dateRangeFrom, end: this.state.dateRangeTo, isPaused: this.props.isRefreshPaused, refreshInterval: this.props.refreshInterval, onTimeChange: this.onTimeChange, onRefreshChange: this.props.onRefreshChange, showUpdateButton: false, recentlyUsedRanges: recentlyUsedRanges, commonlyUsedRanges: commonlyUsedRanges, dateFormat: config.get('dateFormat') })));\n    };\n    return QueryBarUI;\n}(Component));\nexport { QueryBarUI };\n// @ts-ignore\nexport var QueryBar = injectI18n(QueryBarUI);\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/src/ui/public/query_bar/components/query_bar.tsx","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/src/ui/public/query_bar/components/query_bar.tsx"],"names":[],"mappings":"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","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { IndexPattern } from 'ui/index_patterns';\n\nimport classNames from 'classnames';\nimport _ from 'lodash';\nimport { compact, debounce, get, isEqual } from 'lodash';\nimport React, { Component } from 'react';\nimport { getFromLegacyIndexPattern } from 'ui/index_patterns/static_utils';\nimport { kfetch } from 'ui/kfetch';\nimport { PersistedLog } from 'ui/persisted_log';\nimport { Storage } from 'ui/storage';\nimport { timeHistory } from 'ui/timefilter/time_history';\nimport {\n  AutocompleteSuggestion,\n  AutocompleteSuggestionType,\n  getAutocompleteProvider,\n} from '../../autocomplete_providers';\nimport chrome from '../../chrome';\nimport { fromUser, toUser } from '../../parse_query';\nimport { matchPairs } from '../lib/match_pairs';\nimport { QueryLanguageSwitcher } from './language_switcher';\nimport { SuggestionsComponent } from './typeahead/suggestions_component';\n\nimport { EuiFieldText, EuiFlexGroup, EuiFlexItem, EuiOutsideClickDetector } from '@elastic/eui';\n\n// @ts-ignore\nimport { EuiSuperDatePicker, EuiSuperUpdateButton } from '@elastic/eui';\n\nimport { InjectedIntl, injectI18n } from '@kbn/i18n/react';\n\nconst KEY_CODES = {\n  LEFT: 37,\n  UP: 38,\n  RIGHT: 39,\n  DOWN: 40,\n  ENTER: 13,\n  ESC: 27,\n  TAB: 9,\n  HOME: 36,\n  END: 35,\n};\n\nconst config = chrome.getUiSettingsClient();\nconst recentSearchType: AutocompleteSuggestionType = 'recentSearch';\n\ninterface Query {\n  query: string;\n  language: string;\n}\n\ninterface DateRange {\n  from: string;\n  to: string;\n}\n\ninterface Props {\n  query: Query;\n  onSubmit: (payload: { dateRange: DateRange; query: Query }) => void;\n  disableAutoFocus?: boolean;\n  appName: string;\n  indexPatterns: IndexPattern[];\n  store: Storage;\n  intl: InjectedIntl;\n  showDatePicker?: boolean;\n  dateRangeFrom?: string;\n  dateRangeTo?: string;\n  isRefreshPaused?: boolean;\n  refreshInterval?: number;\n  onRefreshChange?: (options: { isPaused: boolean; refreshInterval: number }) => void;\n}\n\ninterface State {\n  query: Query;\n  inputIsPristine: boolean;\n  isSuggestionsVisible: boolean;\n  index: number | null;\n  suggestions: AutocompleteSuggestion[];\n  suggestionLimit: number;\n  currentProps?: Props;\n  dateRangeFrom: string;\n  dateRangeTo: string;\n  isDateRangeInvalid: boolean;\n}\n\nexport class QueryBarUI extends Component<Props, State> {\n  public static getDerivedStateFromProps(nextProps: Props, prevState: State) {\n    if (isEqual(prevState.currentProps, nextProps)) {\n      return null;\n    }\n\n    let nextQuery = null;\n    if (nextProps.query.query !== prevState.query.query) {\n      nextQuery = {\n        query: toUser(nextProps.query.query),\n        language: nextProps.query.language,\n      };\n    } else if (nextProps.query.language !== prevState.query.language) {\n      nextQuery = {\n        query: '',\n        language: nextProps.query.language,\n      };\n    }\n\n    let nextDateRange = null;\n    if (\n      nextProps.dateRangeFrom !== get(prevState, 'currentProps.dateRangeFrom') ||\n      nextProps.dateRangeTo !== get(prevState, 'currentProps.dateRangeTo')\n    ) {\n      nextDateRange = {\n        dateRangeFrom: nextProps.dateRangeFrom,\n        dateRangeTo: nextProps.dateRangeTo,\n      };\n    }\n\n    const nextState: any = {\n      currentProps: nextProps,\n    };\n    if (nextQuery) {\n      nextState.query = nextQuery;\n    }\n    if (nextDateRange) {\n      nextState.dateRangeFrom = nextDateRange.dateRangeFrom;\n      nextState.dateRangeTo = nextDateRange.dateRangeTo;\n    }\n    return nextState;\n  }\n\n  /*\n   Keep the \"draft\" value in local state until the user actually submits the query. There are a couple advantages:\n\n    1. Each app doesn't have to maintain its own \"draft\" value if it wants to put off updating the query in app state\n    until the user manually submits their changes. Most apps have watches on the query value in app state so we don't\n    want to trigger those on every keypress. Also, some apps (e.g. dashboard) already juggle multiple query values,\n    each with slightly different semantics and I'd rather not add yet another variable to the mix.\n\n    2. Changes to the local component state won't trigger an Angular digest cycle. Triggering digest cycles on every\n    keypress has been a major source of performance issues for us in previous implementations of the query bar.\n    See https://github.com/elastic/kibana/issues/14086\n  */\n  public state = {\n    query: {\n      query: toUser(this.props.query.query),\n      language: this.props.query.language,\n    },\n    inputIsPristine: true,\n    isSuggestionsVisible: false,\n    currentProps: this.props,\n    index: null,\n    suggestions: [],\n    suggestionLimit: 50,\n    dateRangeFrom: _.get(this.props, 'dateRangeFrom', 'now-15m'),\n    dateRangeTo: _.get(this.props, 'dateRangeTo', 'now'),\n    isDateRangeInvalid: false,\n  };\n\n  public updateSuggestions = debounce(async () => {\n    const suggestions = (await this.getSuggestions()) || [];\n    if (!this.componentIsUnmounting) {\n      this.setState({ suggestions });\n    }\n  }, 100);\n\n  public inputRef: HTMLInputElement | null = null;\n\n  private componentIsUnmounting = false;\n  private persistedLog: PersistedLog | null = null;\n\n  public isDirty = () => {\n    if (!this.props.showDatePicker) {\n      return this.state.query.query !== this.props.query.query;\n    }\n\n    return (\n      this.state.query.query !== this.props.query.query ||\n      this.state.dateRangeFrom !== this.props.dateRangeFrom ||\n      this.state.dateRangeTo !== this.props.dateRangeTo\n    );\n  };\n\n  public increaseLimit = () => {\n    this.setState({\n      suggestionLimit: this.state.suggestionLimit + 50,\n    });\n  };\n\n  public incrementIndex = (currentIndex: number) => {\n    let nextIndex = currentIndex + 1;\n    if (currentIndex === null || nextIndex >= this.state.suggestions.length) {\n      nextIndex = 0;\n    }\n    this.setState({ index: nextIndex });\n  };\n\n  public decrementIndex = (currentIndex: number) => {\n    const previousIndex = currentIndex - 1;\n    if (previousIndex < 0) {\n      this.setState({ index: this.state.suggestions.length - 1 });\n    } else {\n      this.setState({ index: previousIndex });\n    }\n  };\n\n  public getSuggestions = async () => {\n    if (!this.inputRef) {\n      return;\n    }\n\n    const {\n      query: { query, language },\n    } = this.state;\n    const recentSearchSuggestions = this.getRecentSearchSuggestions(query);\n\n    const autocompleteProvider = getAutocompleteProvider(language);\n    if (\n      !autocompleteProvider ||\n      !Array.isArray(this.props.indexPatterns) ||\n      compact(this.props.indexPatterns).length === 0\n    ) {\n      return recentSearchSuggestions;\n    }\n\n    const indexPatterns = getFromLegacyIndexPattern(this.props.indexPatterns);\n    const getAutocompleteSuggestions = autocompleteProvider({ config, indexPatterns });\n\n    const { selectionStart, selectionEnd } = this.inputRef;\n    if (selectionStart === null || selectionEnd === null) {\n      return;\n    }\n\n    const suggestions: AutocompleteSuggestion[] = await getAutocompleteSuggestions({\n      query,\n      selectionStart,\n      selectionEnd,\n    });\n    return [...suggestions, ...recentSearchSuggestions];\n  };\n\n  public selectSuggestion = ({\n    type,\n    text,\n    start,\n    end,\n  }: {\n    type: AutocompleteSuggestionType;\n    text: string;\n    start: number;\n    end: number;\n  }) => {\n    if (!this.inputRef) {\n      return;\n    }\n\n    const query = this.state.query.query;\n    const { selectionStart, selectionEnd } = this.inputRef;\n    if (selectionStart === null || selectionEnd === null) {\n      return;\n    }\n\n    const value = query.substr(0, selectionStart) + query.substr(selectionEnd);\n\n    this.setState(\n      {\n        query: {\n          ...this.state.query,\n          query: value.substr(0, start) + text + value.substr(end),\n        },\n        index: null,\n      },\n      () => {\n        if (!this.inputRef) {\n          return;\n        }\n\n        this.inputRef.setSelectionRange(start + text.length, start + text.length);\n\n        if (type === recentSearchType) {\n          this.onSubmit();\n        } else {\n          this.updateSuggestions();\n        }\n      }\n    );\n  };\n\n  public getRecentSearchSuggestions = (query: string) => {\n    if (!this.persistedLog) {\n      return [];\n    }\n    const recentSearches = this.persistedLog.get();\n    const matchingRecentSearches = recentSearches.filter(recentQuery => {\n      const recentQueryString = typeof recentQuery === 'object' ? toUser(recentQuery) : recentQuery;\n      return recentQueryString.includes(query);\n    });\n    return matchingRecentSearches.map(recentSearch => {\n      const text = recentSearch;\n      const start = 0;\n      const end = query.length;\n      return { type: recentSearchType, text, start, end };\n    });\n  };\n\n  public onOutsideClick = () => {\n    if (this.state.isSuggestionsVisible) {\n      this.setState({ isSuggestionsVisible: false, index: null });\n    }\n  };\n\n  public onClickInput = (event: React.MouseEvent<HTMLInputElement>) => {\n    if (event.target instanceof HTMLInputElement) {\n      this.onInputChange(event.target.value);\n    }\n  };\n\n  public onClickSubmitButton = (event: React.MouseEvent<HTMLButtonElement>) => {\n    this.onSubmit(() => event.preventDefault());\n  };\n\n  public onClickSuggestion = (suggestion: AutocompleteSuggestion) => {\n    if (!this.inputRef) {\n      return;\n    }\n    this.selectSuggestion(suggestion);\n    this.inputRef.focus();\n  };\n\n  public onMouseEnterSuggestion = (index: number) => {\n    this.setState({ index });\n  };\n\n  public onInputChange = (value: string) => {\n    const hasValue = Boolean(value.trim());\n\n    this.setState({\n      query: {\n        query: value,\n        language: this.state.query.language,\n      },\n      inputIsPristine: false,\n      isSuggestionsVisible: hasValue,\n      index: null,\n      suggestionLimit: 50,\n    });\n  };\n\n  public onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.updateSuggestions();\n    this.onInputChange(event.target.value);\n  };\n\n  public onTimeChange = ({\n    start,\n    end,\n    isInvalid,\n  }: {\n    start: string;\n    end: string;\n    isInvalid: boolean;\n  }) => {\n    this.setState({\n      dateRangeFrom: start,\n      dateRangeTo: end,\n      isDateRangeInvalid: isInvalid,\n    });\n  };\n\n  public onKeyUp = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if ([KEY_CODES.LEFT, KEY_CODES.RIGHT, KEY_CODES.HOME, KEY_CODES.END].includes(event.keyCode)) {\n      this.setState({ isSuggestionsVisible: true });\n      if (event.target instanceof HTMLInputElement) {\n        this.onInputChange(event.target.value);\n      }\n    }\n  };\n\n  public onKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.target instanceof HTMLInputElement) {\n      const { isSuggestionsVisible, index } = this.state;\n      const preventDefault = event.preventDefault.bind(event);\n      const { target, key, metaKey } = event;\n      const { value, selectionStart, selectionEnd } = target;\n      const updateQuery = (query: string, newSelectionStart: number, newSelectionEnd: number) => {\n        this.setState(\n          {\n            query: {\n              ...this.state.query,\n              query,\n            },\n          },\n          () => {\n            target.setSelectionRange(newSelectionStart, newSelectionEnd);\n          }\n        );\n      };\n\n      switch (event.keyCode) {\n        case KEY_CODES.DOWN:\n          event.preventDefault();\n          if (isSuggestionsVisible && index !== null) {\n            this.incrementIndex(index);\n          } else {\n            this.setState({ isSuggestionsVisible: true, index: 0 });\n          }\n          break;\n        case KEY_CODES.UP:\n          event.preventDefault();\n          if (isSuggestionsVisible && index !== null) {\n            this.decrementIndex(index);\n          }\n          break;\n        case KEY_CODES.ENTER:\n          event.preventDefault();\n          if (isSuggestionsVisible && index !== null && this.state.suggestions[index]) {\n            this.selectSuggestion(this.state.suggestions[index]);\n          } else {\n            this.onSubmit(() => event.preventDefault());\n          }\n          break;\n        case KEY_CODES.ESC:\n          event.preventDefault();\n          this.setState({ isSuggestionsVisible: false, index: null });\n          break;\n        case KEY_CODES.TAB:\n          this.setState({ isSuggestionsVisible: false, index: null });\n          break;\n        default:\n          if (selectionStart !== null && selectionEnd !== null) {\n            matchPairs({\n              value,\n              selectionStart,\n              selectionEnd,\n              key,\n              metaKey,\n              updateQuery,\n              preventDefault,\n            });\n          }\n\n          break;\n      }\n    }\n  };\n\n  public onSubmit = (preventDefault?: () => void) => {\n    if (preventDefault) {\n      preventDefault();\n    }\n\n    if (this.persistedLog) {\n      this.persistedLog.add(this.state.query.query);\n    }\n\n    timeHistory.add({\n      from: this.state.dateRangeFrom,\n      to: this.state.dateRangeTo,\n    });\n\n    this.props.onSubmit({\n      query: {\n        query: fromUser(this.state.query.query),\n        language: this.state.query.language,\n      },\n      dateRange: {\n        from: this.state.dateRangeFrom,\n        to: this.state.dateRangeTo,\n      },\n    });\n    this.setState({ isSuggestionsVisible: false });\n  };\n\n  public onSelectLanguage = (language: string) => {\n    // Send telemetry info every time the user opts in or out of kuery\n    // As a result it is important this function only ever gets called in the\n    // UI component's change handler.\n    kfetch({\n      pathname: '/api/kibana/kql_opt_in_telemetry',\n      method: 'POST',\n      body: JSON.stringify({ opt_in: language === 'kuery' }),\n    });\n\n    this.props.store.set('kibana.userQueryLanguage', language);\n    this.props.onSubmit({\n      query: {\n        query: '',\n        language,\n      },\n      dateRange: {\n        from: this.state.dateRangeFrom,\n        to: this.state.dateRangeTo,\n      },\n    });\n  };\n\n  public componentDidMount() {\n    this.persistedLog = new PersistedLog(\n      `typeahead:${this.props.appName}-${this.state.query.language}`,\n      {\n        maxLength: config.get('history:limit'),\n        filterDuplicates: true,\n      }\n    );\n    this.updateSuggestions();\n  }\n\n  public componentDidUpdate(prevProps: Props) {\n    if (prevProps.query.language !== this.props.query.language) {\n      this.persistedLog = new PersistedLog(\n        `typeahead:${this.props.appName}-${this.state.query.language}`,\n        {\n          maxLength: config.get('history:limit'),\n          filterDuplicates: true,\n        }\n      );\n      this.updateSuggestions();\n    }\n  }\n\n  public componentWillUnmount() {\n    this.updateSuggestions.cancel();\n    this.componentIsUnmounting = true;\n  }\n\n  public render() {\n    const classes = classNames('kbnQueryBar', {\n      'kbnQueryBar--withDatePicker': this.props.showDatePicker,\n    });\n\n    return (\n      <EuiFlexGroup\n        className={classes}\n        responsive={this.props.showDatePicker ? true : false}\n        gutterSize=\"s\"\n      >\n        <EuiFlexItem>\n          <EuiOutsideClickDetector onOutsideClick={this.onOutsideClick}>\n            {/* position:relative required on container so the suggestions appear under the query bar*/}\n            <div\n              style={{ position: 'relative' }}\n              role=\"combobox\"\n              aria-haspopup=\"true\"\n              aria-expanded={this.state.isSuggestionsVisible}\n              aria-owns=\"kbnTypeahead__items\"\n              aria-controls=\"kbnTypeahead__items\"\n            >\n              <form role=\"form\" name=\"queryBarForm\">\n                <div className=\"kuiLocalSearch\" role=\"search\">\n                  <div className=\"kuiLocalSearchAssistedInput\">\n                    <EuiFieldText\n                      className=\"kuiLocalSearchAssistedInput__input\"\n                      placeholder={this.props.intl.formatMessage({\n                        id: 'common.ui.queryBar.searchInputPlaceholder',\n                        defaultMessage: 'Search… (e.g. status:200 AND extension:PHP)',\n                      })}\n                      value={this.state.query.query}\n                      onKeyDown={this.onKeyDown}\n                      onKeyUp={this.onKeyUp}\n                      onChange={this.onChange}\n                      onClick={this.onClickInput}\n                      fullWidth\n                      autoFocus={!this.props.disableAutoFocus}\n                      inputRef={node => {\n                        if (node) {\n                          this.inputRef = node;\n                        }\n                      }}\n                      autoComplete=\"off\"\n                      spellCheck={false}\n                      icon=\"console\"\n                      aria-label={this.props.intl.formatMessage({\n                        id: 'common.ui.queryBar.searchInputAriaLabel',\n                        defaultMessage: 'Search input',\n                      })}\n                      type=\"text\"\n                      data-test-subj=\"queryInput\"\n                      aria-autocomplete=\"list\"\n                      aria-controls=\"kbnTypeahead__items\"\n                      aria-activedescendant={\n                        this.state.isSuggestionsVisible ? 'suggestion-' + this.state.index : ''\n                      }\n                      role=\"textbox\"\n                    />\n                    <div className=\"kuiLocalSearchAssistedInput__assistance\">\n                      <QueryLanguageSwitcher\n                        language={this.state.query.language}\n                        onSelectLanguage={this.onSelectLanguage}\n                      />\n                    </div>\n                  </div>\n                </div>\n              </form>\n\n              <SuggestionsComponent\n                show={this.state.isSuggestionsVisible}\n                suggestions={this.state.suggestions.slice(0, this.state.suggestionLimit)}\n                index={this.state.index}\n                onClick={this.onClickSuggestion}\n                onMouseEnter={this.onMouseEnterSuggestion}\n                loadMore={this.increaseLimit}\n              />\n            </div>\n          </EuiOutsideClickDetector>\n        </EuiFlexItem>\n        <EuiFlexItem grow={false}>{this.renderUpdateButton()}</EuiFlexItem>\n      </EuiFlexGroup>\n    );\n  }\n\n  private renderUpdateButton() {\n    const button = (\n      <EuiSuperUpdateButton\n        needsUpdate={this.isDirty()}\n        isDisabled={this.state.isDateRangeInvalid}\n        onClick={this.onClickSubmitButton}\n        data-test-subj=\"querySubmitButton\"\n      />\n    );\n    if (this.props.showDatePicker) {\n      return (\n        <EuiFlexGroup responsive={false} gutterSize=\"s\">\n          {this.renderDatePicker()}\n          <EuiFlexItem grow={false}>{button}</EuiFlexItem>\n        </EuiFlexGroup>\n      );\n    } else {\n      return button;\n    }\n  }\n\n  private renderDatePicker() {\n    if (!this.props.showDatePicker) {\n      return null;\n    }\n\n    const recentlyUsedRanges = timeHistory\n      .get()\n      .map(({ from, to }: { from: string; to: string }) => {\n        return {\n          start: from,\n          end: to,\n        };\n      });\n\n    const commonlyUsedRanges = config\n      .get('timepicker:quickRanges')\n      .map(({ from, to, display }: { from: string; to: string; display: string }) => {\n        return {\n          start: from,\n          end: to,\n          label: display,\n        };\n      });\n\n    return (\n      <EuiFlexItem className=\"kbnQueryBar__datePickerWrapper\">\n        <EuiSuperDatePicker\n          start={this.state.dateRangeFrom}\n          end={this.state.dateRangeTo}\n          isPaused={this.props.isRefreshPaused}\n          refreshInterval={this.props.refreshInterval}\n          onTimeChange={this.onTimeChange}\n          onRefreshChange={this.props.onRefreshChange}\n          showUpdateButton={false}\n          recentlyUsedRanges={recentlyUsedRanges}\n          commonlyUsedRanges={commonlyUsedRanges}\n          dateFormat={config.get('dateFormat')}\n        />\n      </EuiFlexItem>\n    );\n  }\n}\n\n// @ts-ignore\nexport const QueryBar = injectI18n(QueryBarUI);\n"]}]}