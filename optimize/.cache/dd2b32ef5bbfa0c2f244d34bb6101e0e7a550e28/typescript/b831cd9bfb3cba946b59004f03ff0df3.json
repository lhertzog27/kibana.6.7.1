{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/reporting/public/components/report_error_button.tsx","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/reporting/public/components/report_error_button.tsx","mtime":1567631712280},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport * as tslib_1 from \"tslib\";\nimport { EuiButtonIcon, EuiCallOut, EuiPopover } from '@elastic/eui';\nimport { injectI18n } from '@kbn/i18n/react';\nimport React, { Component } from 'react';\nimport { jobQueueClient } from '../lib/job_queue_client';\nvar ReportErrorButtonUi = /** @class */ (function (_super) {\n    tslib_1.__extends(ReportErrorButtonUi, _super);\n    function ReportErrorButtonUi(props) {\n        var _this = _super.call(this, props) || this;\n        _this.togglePopover = function () {\n            _this.setState(function (prevState) {\n                return { isPopoverOpen: !prevState.isPopoverOpen };\n            });\n            if (!_this.state.error) {\n                _this.loadError();\n            }\n        };\n        _this.closePopover = function () {\n            _this.setState({ isPopoverOpen: false });\n        };\n        _this.loadError = function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n            var reportContent, kfetchError_1;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        this.setState({ isLoading: true });\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 3, , 4]);\n                        return [4 /*yield*/, jobQueueClient.getContent(this.props.jobId)];\n                    case 2:\n                        reportContent = _a.sent();\n                        if (this.mounted) {\n                            this.setState({ isLoading: false, error: reportContent.content });\n                        }\n                        return [3 /*break*/, 4];\n                    case 3:\n                        kfetchError_1 = _a.sent();\n                        if (this.mounted) {\n                            this.setState({\n                                isLoading: false,\n                                calloutTitle: this.props.intl.formatMessage({\n                                    id: 'xpack.reporting.errorButton.unableToFetchReportContentTitle',\n                                    defaultMessage: 'Unable to fetch report content',\n                                }),\n                                error: kfetchError_1.message,\n                            });\n                        }\n                        return [3 /*break*/, 4];\n                    case 4: return [2 /*return*/];\n                }\n            });\n        }); };\n        _this.state = {\n            isLoading: false,\n            isPopoverOpen: false,\n            calloutTitle: props.intl.formatMessage({\n                id: 'xpack.reporting.errorButton.unableToGenerateReportTitle',\n                defaultMessage: 'Unable to generate report',\n            }),\n        };\n        return _this;\n    }\n    ReportErrorButtonUi.prototype.render = function () {\n        var button = (React.createElement(EuiButtonIcon, { onClick: this.togglePopover, iconType: \"alert\", color: 'danger', \"aria-label\": this.props.intl.formatMessage({\n                id: 'xpack.reporting.errorButton.showReportErrorAriaLabel',\n                defaultMessage: 'Show report error',\n            }) }));\n        return (React.createElement(EuiPopover, { id: \"popover\", button: button, isOpen: this.state.isPopoverOpen, closePopover: this.closePopover, anchorPosition: \"downRight\" },\n            React.createElement(EuiCallOut, { color: \"danger\", title: this.state.calloutTitle },\n                React.createElement(\"p\", null, this.state.error))));\n    };\n    ReportErrorButtonUi.prototype.componentWillUnmount = function () {\n        this.mounted = false;\n    };\n    ReportErrorButtonUi.prototype.componentDidMount = function () {\n        this.mounted = true;\n    };\n    return ReportErrorButtonUi;\n}(Component));\nexport var ReportErrorButton = injectI18n(ReportErrorButtonUi);\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/reporting/public/components/report_error_button.tsx","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/reporting/public/components/report_error_button.tsx"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport { EuiButtonIcon, EuiCallOut, EuiPopover } from '@elastic/eui';\nimport { InjectedIntl, injectI18n } from '@kbn/i18n/react';\nimport React, { Component } from 'react';\nimport { JobContent, jobQueueClient } from '../lib/job_queue_client';\n\ninterface Props {\n  jobId: string;\n  intl: InjectedIntl;\n}\n\ninterface State {\n  isLoading: boolean;\n  isPopoverOpen: boolean;\n  calloutTitle: string;\n  error?: string;\n}\n\nclass ReportErrorButtonUi extends Component<Props, State> {\n  private mounted?: boolean;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      isLoading: false,\n      isPopoverOpen: false,\n      calloutTitle: props.intl.formatMessage({\n        id: 'xpack.reporting.errorButton.unableToGenerateReportTitle',\n        defaultMessage: 'Unable to generate report',\n      }),\n    };\n  }\n\n  public render() {\n    const button = (\n      <EuiButtonIcon\n        onClick={this.togglePopover}\n        iconType=\"alert\"\n        color={'danger'}\n        aria-label={this.props.intl.formatMessage({\n          id: 'xpack.reporting.errorButton.showReportErrorAriaLabel',\n          defaultMessage: 'Show report error',\n        })}\n      />\n    );\n\n    return (\n      <EuiPopover\n        id=\"popover\"\n        button={button}\n        isOpen={this.state.isPopoverOpen}\n        closePopover={this.closePopover}\n        anchorPosition=\"downRight\"\n      >\n        <EuiCallOut color=\"danger\" title={this.state.calloutTitle}>\n          <p>{this.state.error}</p>\n        </EuiCallOut>\n      </EuiPopover>\n    );\n  }\n\n  public componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  public componentDidMount() {\n    this.mounted = true;\n  }\n\n  private togglePopover = () => {\n    this.setState(prevState => {\n      return { isPopoverOpen: !prevState.isPopoverOpen };\n    });\n\n    if (!this.state.error) {\n      this.loadError();\n    }\n  };\n\n  private closePopover = () => {\n    this.setState({ isPopoverOpen: false });\n  };\n\n  private loadError = async () => {\n    this.setState({ isLoading: true });\n    try {\n      const reportContent: JobContent = await jobQueueClient.getContent(this.props.jobId);\n      if (this.mounted) {\n        this.setState({ isLoading: false, error: reportContent.content });\n      }\n    } catch (kfetchError) {\n      if (this.mounted) {\n        this.setState({\n          isLoading: false,\n          calloutTitle: this.props.intl.formatMessage({\n            id: 'xpack.reporting.errorButton.unableToFetchReportContentTitle',\n            defaultMessage: 'Unable to fetch report content',\n          }),\n          error: kfetchError.message,\n        });\n      }\n    }\n  };\n}\n\nexport const ReportErrorButton = injectI18n(ReportErrorButtonUi);\n"]}]}