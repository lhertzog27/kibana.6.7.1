{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/apm/public/store/reactReduxRequest/waterfallV2.tsx","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/apm/public/store/reactReduxRequest/waterfallV2.tsx","mtime":1567631711872},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport { get } from 'lodash';\nimport React from 'react';\nimport { Request } from 'react-redux-request';\nimport { TRACE_ID } from 'x-pack/plugins/apm/common/constants';\nimport { getWaterfall } from '../../components/app/TransactionDetails/Transaction/WaterfallContainer/Waterfall/waterfall_helpers/waterfall_helpers';\nimport { loadTrace } from '../../services/rest/apm/traces';\nexport var ID = 'waterfallV2';\nexport function WaterfallV2Request(_a) {\n    var urlParams = _a.urlParams, transaction = _a.transaction, render = _a.render;\n    var start = urlParams.start, end = urlParams.end;\n    var traceId = get(transaction, TRACE_ID);\n    if (!(traceId && start && end)) {\n        return null;\n    }\n    return (React.createElement(Request, { id: ID, fn: loadTrace, args: [{ traceId: traceId, start: start, end: end }], render: function (_a) {\n            var args = _a.args, _b = _a.data, data = _b === void 0 ? [] : _b, status = _a.status;\n            var waterfall = getWaterfall(data, transaction);\n            return render({ args: args, data: waterfall, status: status });\n        } }));\n}\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/apm/public/store/reactReduxRequest/waterfallV2.tsx","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/apm/public/store/reactReduxRequest/waterfallV2.tsx"],"names":[],"mappings":"AAAA;;;;GAIG;AAEH,OAAO,EAAE,GAAG,EAAE,MAAM,QAAQ,CAAC;AAC7B,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,OAAO,EAAa,MAAM,qBAAqB,CAAC;AACzD,OAAO,EAAE,QAAQ,EAAE,MAAM,qCAAqC,CAAC;AAG/D,OAAO,EACL,YAAY,EAEb,MAAM,sHAAsH,CAAC;AAC9H,OAAO,EAAE,SAAS,EAAE,MAAM,gCAAgC,CAAC;AAK3D,MAAM,CAAC,IAAM,EAAE,GAAG,aAAa,CAAC;AAQhC,MAAM,UAAU,kBAAkB,CAAC,EAAyC;QAAvC,wBAAS,EAAE,4BAAW,EAAE,kBAAM;IACzD,IAAA,uBAAK,EAAE,mBAAG,CAAe;IACjC,IAAM,OAAO,GAAW,GAAG,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;IAEnD,IAAI,CAAC,CAAC,OAAO,IAAI,KAAK,IAAI,GAAG,CAAC,EAAE;QAC9B,OAAO,IAAI,CAAC;KACb;IAED,OAAO,CACL,oBAAC,OAAO,IACN,EAAE,EAAE,EAAE,EACN,EAAE,EAAE,SAAS,EACb,IAAI,EAAE,CAAC,EAAE,OAAO,SAAA,EAAE,KAAK,OAAA,EAAE,GAAG,KAAA,EAAE,CAAC,EAC/B,MAAM,EAAE,UAAC,EAA2B;gBAAzB,cAAI,EAAE,YAAS,EAAT,8BAAS,EAAE,kBAAM;YAChC,IAAM,SAAS,GAAG,YAAY,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;YAClD,OAAO,MAAM,CAAC,EAAE,IAAI,MAAA,EAAE,IAAI,EAAE,SAAS,EAAE,MAAM,QAAA,EAAE,CAAC,CAAC;QACnD,CAAC,GACD,CACH,CAAC;AACJ,CAAC","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport { get } from 'lodash';\nimport React from 'react';\nimport { Request, RRRRender } from 'react-redux-request';\nimport { TRACE_ID } from 'x-pack/plugins/apm/common/constants';\nimport { TraceAPIResponse } from 'x-pack/plugins/apm/server/lib/traces/get_trace';\nimport { Transaction } from 'x-pack/plugins/apm/typings/es_schemas/Transaction';\nimport {\n  getWaterfall,\n  IWaterfall\n} from '../../components/app/TransactionDetails/Transaction/WaterfallContainer/Waterfall/waterfall_helpers/waterfall_helpers';\nimport { loadTrace } from '../../services/rest/apm/traces';\nimport { IUrlParams } from '../urlParams';\n// @ts-ignore\nimport { createInitialDataSelector } from './helpers';\n\nexport const ID = 'waterfallV2';\n\ninterface Props {\n  urlParams: IUrlParams;\n  transaction: Transaction;\n  render: RRRRender<IWaterfall>;\n}\n\nexport function WaterfallV2Request({ urlParams, transaction, render }: Props) {\n  const { start, end } = urlParams;\n  const traceId: string = get(transaction, TRACE_ID);\n\n  if (!(traceId && start && end)) {\n    return null;\n  }\n\n  return (\n    <Request<TraceAPIResponse>\n      id={ID}\n      fn={loadTrace}\n      args={[{ traceId, start, end }]}\n      render={({ args, data = [], status }) => {\n        const waterfall = getWaterfall(data, transaction);\n        return render({ args, data: waterfall, status });\n      }}\n    />\n  );\n}\n"]}]}