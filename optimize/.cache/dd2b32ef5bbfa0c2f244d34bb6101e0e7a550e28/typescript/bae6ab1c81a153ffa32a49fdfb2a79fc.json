{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/lib/lib.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/lib/lib.ts","mtime":1567631711985},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nexport var InfraWaffleMapLegendMode;\n(function (InfraWaffleMapLegendMode) {\n    InfraWaffleMapLegendMode[\"step\"] = \"step\";\n    InfraWaffleMapLegendMode[\"gradient\"] = \"gradient\";\n})(InfraWaffleMapLegendMode || (InfraWaffleMapLegendMode = {}));\nexport var InfraWaffleMapRuleOperator;\n(function (InfraWaffleMapRuleOperator) {\n    InfraWaffleMapRuleOperator[\"gt\"] = \"gt\";\n    InfraWaffleMapRuleOperator[\"gte\"] = \"gte\";\n    InfraWaffleMapRuleOperator[\"lt\"] = \"lt\";\n    InfraWaffleMapRuleOperator[\"lte\"] = \"lte\";\n    InfraWaffleMapRuleOperator[\"eq\"] = \"eq\";\n})(InfraWaffleMapRuleOperator || (InfraWaffleMapRuleOperator = {}));\nexport var InfraFormatterType;\n(function (InfraFormatterType) {\n    InfraFormatterType[\"number\"] = \"number\";\n    InfraFormatterType[\"abbreviatedNumber\"] = \"abbreviatedNumber\";\n    InfraFormatterType[\"bytes\"] = \"bytes\";\n    InfraFormatterType[\"bits\"] = \"bits\";\n    InfraFormatterType[\"percent\"] = \"percent\";\n})(InfraFormatterType || (InfraFormatterType = {}));\nexport var InfraWaffleMapDataFormat;\n(function (InfraWaffleMapDataFormat) {\n    InfraWaffleMapDataFormat[\"bytesDecimal\"] = \"bytesDecimal\";\n    InfraWaffleMapDataFormat[\"bytesBinaryIEC\"] = \"bytesBinaryIEC\";\n    InfraWaffleMapDataFormat[\"bytesBinaryJEDEC\"] = \"bytesBinaryJEDEC\";\n    InfraWaffleMapDataFormat[\"bitsDecimal\"] = \"bitsDecimal\";\n    InfraWaffleMapDataFormat[\"bitsBinaryIEC\"] = \"bitsBinaryIEC\";\n    InfraWaffleMapDataFormat[\"bitsBinaryJEDEC\"] = \"bitsBinaryJEDEC\";\n    InfraWaffleMapDataFormat[\"abbreviatedNumber\"] = \"abbreviatedNumber\";\n})(InfraWaffleMapDataFormat || (InfraWaffleMapDataFormat = {}));\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/lib/lib.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/lib/lib.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAyIH,MAAM,CAAN,IAAY,wBAGX;AAHD,WAAY,wBAAwB;IAClC,yCAAa,CAAA;IACb,iDAAqB,CAAA;AACvB,CAAC,EAHW,wBAAwB,KAAxB,wBAAwB,QAGnC;AAcD,MAAM,CAAN,IAAY,0BAMX;AAND,WAAY,0BAA0B;IACpC,uCAAS,CAAA;IACT,yCAAW,CAAA;IACX,uCAAS,CAAA;IACT,yCAAW,CAAA;IACX,uCAAS,CAAA;AACX,CAAC,EANW,0BAA0B,KAA1B,0BAA0B,QAMrC;AAyBD,MAAM,CAAN,IAAY,kBAMX;AAND,WAAY,kBAAkB;IAC5B,uCAAiB,CAAA;IACjB,6DAAuC,CAAA;IACvC,qCAAe,CAAA;IACf,mCAAa,CAAA;IACb,yCAAmB,CAAA;AACrB,CAAC,EANW,kBAAkB,KAAlB,kBAAkB,QAM7B;AAED,MAAM,CAAN,IAAY,wBAQX;AARD,WAAY,wBAAwB;IAClC,yDAA6B,CAAA;IAC7B,6DAAiC,CAAA;IACjC,iEAAqC,CAAA;IACrC,uDAA2B,CAAA;IAC3B,2DAA+B,CAAA;IAC/B,+DAAmC,CAAA;IACnC,mEAAuC,CAAA;AACzC,CAAC,EARW,wBAAwB,KAAxB,wBAAwB,QAQnC","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport { IModule, IScope } from 'angular';\nimport { NormalizedCacheObject } from 'apollo-cache-inmemory';\nimport ApolloClient from 'apollo-client';\nimport { AxiosRequestConfig } from 'axios';\nimport React from 'react';\nimport { Observable } from 'rxjs';\nimport {\n  InfraMetricInput,\n  InfraNodeMetric,\n  InfraNodePath,\n  InfraPathInput,\n  InfraPathType,\n  InfraTimerangeInput,\n  SourceQuery,\n} from '../graphql/types';\n\nexport interface InfraFrontendLibs {\n  framework: InfraFrameworkAdapter;\n  apolloClient: InfraApolloClient;\n  observableApi: InfraObservableApi;\n}\n\nexport type InfraTimezoneProvider = () => string;\n\nexport type InfraApolloClient = ApolloClient<NormalizedCacheObject>;\n\nexport interface InfraFrameworkAdapter {\n  // Insstance vars\n  appState?: object;\n  dateFormat?: string;\n  kbnVersion?: string;\n  scaledDateFormat?: string;\n  timezone?: string;\n  darkMode?: boolean;\n\n  // Methods\n  setUISettings(key: string, value: any): void;\n  render(component: React.ReactElement<any>): void;\n  renderBreadcrumbs(component: React.ReactElement<any>): void;\n}\n\nexport interface InfraFramworkAdapterConstructable {\n  new (uiModule: IModule, timezoneProvider: InfraTimezoneProvider): InfraFrameworkAdapter;\n}\n\n// TODO: replace AxiosRequestConfig with something more defined\nexport type InfraRequestConfig = AxiosRequestConfig;\n\nexport interface InfraApiAdapter {\n  get<T>(url: string, config?: InfraRequestConfig | undefined): Promise<T>;\n  post(url: string, data?: any, config?: AxiosRequestConfig | undefined): Promise<object>;\n  delete(url: string, config?: InfraRequestConfig | undefined): Promise<object>;\n  put(url: string, data?: any, config?: InfraRequestConfig | undefined): Promise<object>;\n}\n\nexport interface InfraObservableApiPostParams<RequestBody extends {} = {}> {\n  url: string;\n  body?: RequestBody;\n}\n\nexport type InfraObservableApiResponse<BodyType extends {} = {}> = Observable<{\n  status: number;\n  response: BodyType;\n}>;\n\nexport interface InfraObservableApi {\n  post<RequestBody extends {} = {}, ResponseBody extends {} = {}>(\n    params: InfraObservableApiPostParams<RequestBody>\n  ): InfraObservableApiResponse<ResponseBody>;\n}\n\nexport interface InfraUiKibanaAdapterScope extends IScope {\n  breadcrumbs: any[];\n  topNavMenu: any[];\n}\n\nexport interface InfraKibanaUIConfig {\n  get(key: string): any;\n  set(key: string, value: any): Promise<boolean>;\n}\n\nexport interface InfraKibanaAdapterServiceRefs {\n  config: InfraKibanaUIConfig;\n  rootScope: IScope;\n}\n\nexport type InfraBufferedKibanaServiceCall<ServiceRefs> = (serviceRefs: ServiceRefs) => void;\n\nexport interface InfraField {\n  name: string;\n  type: string;\n  searchable: boolean;\n  aggregatable: boolean;\n}\n\nexport type InfraWaffleData = InfraWaffleMapGroup[];\n\nexport interface InfraWaffleMapNode {\n  pathId: string;\n  id: string;\n  name: string;\n  path: InfraNodePath[];\n  metric: InfraNodeMetric;\n}\n\nexport type InfraWaffleMapGroup = InfraWaffleMapGroupOfNodes | InfraWaffleMapGroupOfGroups;\n\nexport interface InfraWaffleMapGroupBase {\n  id: string;\n  name: string;\n  count: number;\n  width: number;\n  squareSize: number;\n}\n\nexport interface InfraWaffleMapGroupOfGroups extends InfraWaffleMapGroupBase {\n  groups: InfraWaffleMapGroupOfNodes[];\n}\n\nexport interface InfraWaffleMapGroupOfNodes extends InfraWaffleMapGroupBase {\n  nodes: InfraWaffleMapNode[];\n}\n\nexport interface InfraWaffleMapStepRule {\n  value: number;\n  operator: InfraWaffleMapRuleOperator;\n  color: string;\n  label?: string;\n}\n\nexport interface InfraWaffleMapGradientRule {\n  value: number;\n  color: string;\n}\n\nexport enum InfraWaffleMapLegendMode {\n  step = 'step',\n  gradient = 'gradient',\n}\n\nexport interface InfraWaffleMapStepLegend {\n  type: InfraWaffleMapLegendMode.step;\n  rules: InfraWaffleMapStepRule[];\n}\n\nexport interface InfraWaffleMapGradientLegend {\n  type: InfraWaffleMapLegendMode.gradient;\n  rules: InfraWaffleMapGradientRule[];\n}\n\nexport type InfraWaffleMapLegend = InfraWaffleMapStepLegend | InfraWaffleMapGradientLegend;\n\nexport enum InfraWaffleMapRuleOperator {\n  gt = 'gt',\n  gte = 'gte',\n  lt = 'lt',\n  lte = 'lte',\n  eq = 'eq',\n}\n\nexport interface InfraWaffleMapOptions {\n  fields?: SourceQuery.Query['source']['configuration']['fields'] | null;\n  formatter: InfraFormatterType;\n  formatTemplate: string;\n  metric: InfraMetricInput;\n  path: InfraPathInput[];\n  groupBy: InfraPathInput[];\n  legend: InfraWaffleMapLegend;\n}\n\nexport interface InfraOptions {\n  timerange: InfraTimerangeInput;\n  wafflemap: InfraWaffleMapOptions;\n}\n\nexport type Omit<T1, T2> = Pick<T1, Exclude<keyof T1, keyof T2>>;\n\nexport interface InfraWaffleMapBounds {\n  min: number;\n  max: number;\n}\n\nexport type InfraFormatter = (value: string | number) => string;\nexport enum InfraFormatterType {\n  number = 'number',\n  abbreviatedNumber = 'abbreviatedNumber',\n  bytes = 'bytes',\n  bits = 'bits',\n  percent = 'percent',\n}\n\nexport enum InfraWaffleMapDataFormat {\n  bytesDecimal = 'bytesDecimal',\n  bytesBinaryIEC = 'bytesBinaryIEC',\n  bytesBinaryJEDEC = 'bytesBinaryJEDEC',\n  bitsDecimal = 'bitsDecimal',\n  bitsBinaryIEC = 'bitsBinaryIEC',\n  bitsBinaryJEDEC = 'bitsBinaryJEDEC',\n  abbreviatedNumber = 'abbreviatedNumber',\n}\n\nexport interface InfraGroupByOptions {\n  text: string;\n  type: InfraPathType;\n  field: string;\n}\n"]}]}