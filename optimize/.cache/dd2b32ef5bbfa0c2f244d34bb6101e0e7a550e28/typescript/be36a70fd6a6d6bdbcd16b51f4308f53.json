{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/store/local/waffle_time/epic.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/store/local/waffle_time/epic.ts","mtime":1567631711988},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport * as tslib_1 from \"tslib\";\nimport { timer } from 'rxjs';\nimport { exhaustMap, filter, map, takeUntil, withLatestFrom } from 'rxjs/operators';\nimport { jumpToTime, startAutoReload, stopAutoReload } from './actions';\nexport var createWaffleTimeEpic = function () { return function (action$, state$, _a) {\n    var selectWaffleTimeUpdatePolicyInterval = _a.selectWaffleTimeUpdatePolicyInterval;\n    var updateInterval$ = state$.pipe(map(selectWaffleTimeUpdatePolicyInterval), filter(isNotNull));\n    return action$.pipe(filter(startAutoReload.match), withLatestFrom(updateInterval$), exhaustMap(function (_a) {\n        var _b = tslib_1.__read(_a, 2), action = _b[0], updateInterval = _b[1];\n        return timer(0, updateInterval).pipe(map(function () { return jumpToTime(Date.now()); }), takeUntil(action$.pipe(filter(stopAutoReload.match))));\n    }));\n}; };\nvar isNotNull = function (value) { return value !== null; };\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/store/local/waffle_time/epic.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/store/local/waffle_time/epic.ts"],"names":[],"mappings":"AAAA;;;;GAIG;;AAIH,OAAO,EAAE,KAAK,EAAE,MAAM,MAAM,CAAC;AAC7B,OAAO,EAAE,UAAU,EAAE,MAAM,EAAE,GAAG,EAAE,SAAS,EAAE,cAAc,EAAE,MAAM,gBAAgB,CAAC;AAEpF,OAAO,EAAE,UAAU,EAAE,eAAe,EAAE,cAAc,EAAE,MAAM,WAAW,CAAC;AAMxE,MAAM,CAAC,IAAM,oBAAoB,GAAG,cAK/B,OAAA,UAAC,OAAO,EAAE,MAAM,EAAE,EAAwC;QAAtC,8EAAoC;IAC3D,IAAM,eAAe,GAAG,MAAM,CAAC,IAAI,CACjC,GAAG,CAAC,oCAAoC,CAAC,EACzC,MAAM,CAAC,SAAS,CAAC,CAClB,CAAC;IAEF,OAAO,OAAO,CAAC,IAAI,CACjB,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,EAC7B,cAAc,CAAC,eAAe,CAAC,EAC/B,UAAU,CAAC,UAAC,EAAwB;YAAxB,0BAAwB,EAAvB,cAAM,EAAE,sBAAc;QACjC,OAAA,KAAK,CAAC,CAAC,EAAE,cAAc,CAAC,CAAC,IAAI,CAC3B,GAAG,CAAC,cAAM,OAAA,UAAU,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,EAAtB,CAAsB,CAAC,EACjC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC,CACtD;IAHD,CAGC,CACF,CACF,CAAC;AACJ,CAAC,EAhBI,CAgBJ,CAAC;AAEF,IAAM,SAAS,GAAG,UAAI,KAAe,IAAiB,OAAA,KAAK,KAAK,IAAI,EAAd,CAAc,CAAC","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport { Action } from 'redux';\nimport { Epic } from 'redux-observable';\nimport { timer } from 'rxjs';\nimport { exhaustMap, filter, map, takeUntil, withLatestFrom } from 'rxjs/operators';\n\nimport { jumpToTime, startAutoReload, stopAutoReload } from './actions';\n\ninterface WaffleTimeEpicDependencies<State> {\n  selectWaffleTimeUpdatePolicyInterval: (state: State) => number | null;\n}\n\nexport const createWaffleTimeEpic = <State>(): Epic<\n  Action,\n  Action,\n  State,\n  WaffleTimeEpicDependencies<State>\n> => (action$, state$, { selectWaffleTimeUpdatePolicyInterval }) => {\n  const updateInterval$ = state$.pipe(\n    map(selectWaffleTimeUpdatePolicyInterval),\n    filter(isNotNull)\n  );\n\n  return action$.pipe(\n    filter(startAutoReload.match),\n    withLatestFrom(updateInterval$),\n    exhaustMap(([action, updateInterval]) =>\n      timer(0, updateInterval).pipe(\n        map(() => jumpToTime(Date.now())),\n        takeUntil(action$.pipe(filter(stopAutoReload.match)))\n      )\n    )\n  );\n};\n\nconst isNotNull = <T>(value: T | null): value is T => value !== null;\n"]}]}