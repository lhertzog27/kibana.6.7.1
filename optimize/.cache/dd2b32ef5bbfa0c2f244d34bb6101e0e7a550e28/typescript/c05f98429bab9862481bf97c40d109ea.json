{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/security/public/views/management/edit_role/components/privileges/kibana/space_aware_privilege_form.tsx","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/security/public/views/management/edit_role/components/privileges/kibana/space_aware_privilege_form.tsx","mtime":1567631712301},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport * as tslib_1 from \"tslib\";\nimport { EuiButton, EuiCallOut, \n// @ts-ignore\nEuiDescribedFormGroup, EuiFlexGroup, EuiFlexItem, EuiFormRow, EuiSpacer, EuiText, EuiTitle, } from '@elastic/eui';\nimport { FormattedMessage, injectI18n } from '@kbn/i18n/react';\nimport React, { Component, Fragment } from 'react';\nimport { isReservedRole } from '../../../../../../lib/role';\nimport { NO_PRIVILEGE_VALUE } from '../../../lib/constants';\nimport { copyRole } from '../../../lib/copy_role';\nimport { getAvailablePrivileges } from '../../../lib/get_available_privileges';\nimport { ImpactedSpacesFlyout } from './impacted_spaces_flyout';\nimport { PrivilegeCalloutWarning } from './privilege_callout_warning';\nimport { PrivilegeSelector } from './privilege_selector';\nimport { PrivilegeSpaceForm } from './privilege_space_form';\nimport { PrivilegeSpaceTable } from './privilege_space_table';\nvar SpaceAwarePrivilegeFormUI = /** @class */ (function (_super) {\n    tslib_1.__extends(SpaceAwarePrivilegeFormUI, _super);\n    function SpaceAwarePrivilegeFormUI(props) {\n        var _this = _super.call(this, props) || this;\n        _this.renderSpacePrivileges = function (basePrivilege, availablePrivileges) {\n            var _a = _this.props, role = _a.role, spaces = _a.spaces;\n            var spacePrivileges = _this.state.spacePrivileges;\n            var availableSpaces = _this.getAvailableSpaces();\n            var canAssignSpacePrivileges = basePrivilege !== 'all';\n            var hasAssignedSpacePrivileges = Object.keys(_this.state.spacePrivileges).length > 0;\n            var showAddPrivilegeButton = canAssignSpacePrivileges && _this.props.editable && availableSpaces.length > 0;\n            return (React.createElement(Fragment, null,\n                React.createElement(EuiTitle, { size: 'xs' },\n                    React.createElement(\"h3\", null,\n                        React.createElement(FormattedMessage, { id: \"xpack.security.management.editRoles.spaceAwarePrivilegeForm.higherPrivilegesForIndividualSpacesTitle\", defaultMessage: \"Higher privileges for individual spaces\" }))),\n                React.createElement(EuiSpacer, { size: 's' }),\n                React.createElement(EuiText\n                // @ts-ignore\n                , { \n                    // @ts-ignore\n                    grow: false, size: 's', color: 'subdued' },\n                    React.createElement(\"p\", null,\n                        React.createElement(FormattedMessage, { id: \"xpack.security.management.editRoles.spaceAwarePrivilegeForm.grantMorePrivilegesTitle\", defaultMessage: \"Grant more privileges on a per space basis. For example, if the privileges are\\n              {read} for all spaces, you can set the privileges to {all}\\n              for an individual space.\", values: {\n                                read: (React.createElement(\"strong\", null,\n                                    React.createElement(FormattedMessage, { id: \"xpack.security.management.editRoles.spaceAwarePrivilegeForm.readText\", defaultMessage: \"read\" }))),\n                                all: (React.createElement(\"strong\", null,\n                                    React.createElement(FormattedMessage, { id: \"xpack.security.management.editRoles.spaceAwarePrivilegeForm.allText\", defaultMessage: \"all\" }))),\n                            } }))),\n                React.createElement(EuiSpacer, { size: 's' }),\n                (basePrivilege !== NO_PRIVILEGE_VALUE || isReservedRole(_this.props.role)) && (React.createElement(PrivilegeCalloutWarning, { basePrivilege: basePrivilege, isReservedRole: isReservedRole(_this.props.role) })),\n                basePrivilege === 'read' && _this.props.editable && React.createElement(EuiSpacer, null),\n                canAssignSpacePrivileges && (React.createElement(Fragment, null,\n                    React.createElement(PrivilegeSpaceTable, { role: role, spaces: spaces, availablePrivileges: availablePrivileges, spacePrivileges: spacePrivileges, onChange: _this.onExistingSpacePrivilegesChange }),\n                    hasAssignedSpacePrivileges && React.createElement(EuiSpacer, null),\n                    _this.getSpaceForms(basePrivilege))),\n                React.createElement(EuiFlexGroup\n                // @ts-ignore\n                , { \n                    // @ts-ignore\n                    alignItems: 'baseline' },\n                    showAddPrivilegeButton && (React.createElement(EuiFlexItem, { grow: false },\n                        React.createElement(EuiButton, { \"data-test-subj\": \"addSpacePrivilegeButton\", size: 's', iconType: 'plusInCircle', onClick: _this.addSpacePrivilege },\n                            React.createElement(FormattedMessage, { id: \"xpack.security.management.editRoles.spaceAwarePrivilegeForm.addSpacePrivilegeTitle\", defaultMessage: \"Add space privilege\" })))),\n                    React.createElement(EuiFlexItem, null,\n                        React.createElement(ImpactedSpacesFlyout, { role: role, spaces: spaces, userProfile: _this.props.userProfile })))));\n        };\n        _this.getSpaceForms = function (basePrivilege) {\n            if (!_this.props.editable) {\n                return null;\n            }\n            return _this.state.privilegeForms.map(function (form, index) {\n                return _this.getSpaceForm(form, index, basePrivilege);\n            });\n        };\n        _this.addSpacePrivilege = function () {\n            _this.setState({\n                privilegeForms: tslib_1.__spread(_this.state.privilegeForms, [\n                    {\n                        spaces: [],\n                        privilege: null,\n                    },\n                ]),\n            });\n        };\n        _this.getAvailableSpaces = function (omitIndex) {\n            var spacePrivileges = _this.state.spacePrivileges;\n            return _this.props.spaces.filter(function (space) {\n                var alreadyAssigned = Object.keys(spacePrivileges).indexOf(space.id) >= 0;\n                if (alreadyAssigned) {\n                    return false;\n                }\n                var otherForms = tslib_1.__spread(_this.state.privilegeForms);\n                if (typeof omitIndex === 'number') {\n                    otherForms.splice(omitIndex, 1);\n                }\n                var inAnotherForm = otherForms.some(function (_a) {\n                    var spaces = _a.spaces;\n                    return spaces.indexOf(space.id) >= 0;\n                });\n                return !inAnotherForm;\n            });\n        };\n        _this.getSpaceForm = function (form, index, basePrivilege) {\n            var selectedSpaceIds = form.spaces, privilege = form.privilege;\n            var availableSpaces = _this.getAvailableSpaces(index);\n            return (React.createElement(Fragment, { key: index },\n                React.createElement(PrivilegeSpaceForm, { key: index, availableSpaces: availableSpaces, selectedSpaceIds: selectedSpaceIds, availablePrivileges: getAvailablePrivileges(basePrivilege), selectedPrivilege: privilege, onChange: _this.onPrivilegeSpacePermissionChange(index), onDelete: _this.onPrivilegeSpacePermissionDelete(index), validator: _this.props.validator }),\n                React.createElement(EuiSpacer, null)));\n        };\n        _this.onPrivilegeSpacePermissionChange = function (index) { return function (form) {\n            var existingPrivilegeForm = tslib_1.__assign({}, _this.state.privilegeForms[index]);\n            var updatedPrivileges = tslib_1.__spread(_this.state.privilegeForms);\n            updatedPrivileges[index] = {\n                spaces: form.spaces,\n                privilege: form.privilege,\n            };\n            _this.setState({\n                privilegeForms: updatedPrivileges,\n            });\n            var role = copyRole(_this.props.role);\n            existingPrivilegeForm.spaces.forEach(function (spaceId) {\n                role.kibana.space[spaceId] = [];\n            });\n            if (form.spaces.length) {\n                var privilege_1 = form.privilege;\n                if (privilege_1) {\n                    form.spaces.forEach(function (spaceId) {\n                        role.kibana.space[spaceId] = [privilege_1];\n                    });\n                }\n            }\n            _this.props.validator.setInProgressSpacePrivileges(updatedPrivileges);\n            _this.props.onChange(role);\n        }; };\n        _this.onPrivilegeSpacePermissionDelete = function (index) { return function () {\n            var updatedPrivileges = tslib_1.__spread(_this.state.privilegeForms);\n            var removedPrivilege = updatedPrivileges.splice(index, 1)[0];\n            _this.setState({\n                privilegeForms: updatedPrivileges,\n            });\n            var role = copyRole(_this.props.role);\n            removedPrivilege.spaces.forEach(function (spaceId) {\n                delete role.kibana.space[spaceId];\n            });\n            _this.props.validator.setInProgressSpacePrivileges(updatedPrivileges);\n            _this.props.onChange(role);\n        }; };\n        _this.onExistingSpacePrivilegesChange = function (assignedPrivileges) {\n            var role = copyRole(_this.props.role);\n            role.kibana.space = tslib_1.__assign({}, assignedPrivileges);\n            // Merge in-progress forms\n            _this.state.privilegeForms.forEach(function (inProgressForm) {\n                var privilege = inProgressForm.privilege;\n                if (privilege) {\n                    inProgressForm.spaces.forEach(function (spaceId) {\n                        role.kibana.space[spaceId] = [privilege];\n                    });\n                }\n            });\n            _this.setState({\n                spacePrivileges: assignedPrivileges,\n            });\n            _this.props.onChange(role);\n        };\n        _this.onKibanaBasePrivilegeChange = function (privilege) {\n            var role = copyRole(_this.props.role);\n            // Remove base privilege value\n            role.kibana.global = [];\n            if (privilege !== NO_PRIVILEGE_VALUE) {\n                role.kibana.global = [privilege];\n            }\n            _this.props.onChange(role);\n        };\n        var role = props.role;\n        var assignedPrivileges = role.kibana;\n        var spacePrivileges = tslib_1.__assign({}, assignedPrivileges.space);\n        _this.state = {\n            spacePrivileges: spacePrivileges,\n            privilegeForms: [],\n        };\n        return _this;\n    }\n    SpaceAwarePrivilegeFormUI.prototype.render = function () {\n        var _a = this.props, kibanaAppPrivileges = _a.kibanaAppPrivileges, role = _a.role, userProfile = _a.userProfile, intl = _a.intl;\n        if (!userProfile.hasCapability('manageSpaces')) {\n            return (React.createElement(EuiCallOut, { title: React.createElement(\"p\", null,\n                    React.createElement(FormattedMessage, { id: \"xpack.security.management.editRoles.spaceAwarePrivilegeForm.insufficientPrivilegesDescription\", defaultMessage: \"Insufficient Privileges\" })), iconType: \"alert\", color: \"danger\" },\n                React.createElement(\"p\", null,\n                    React.createElement(FormattedMessage, { id: \"xpack.security.management.editRoles.spaceAwarePrivilegeForm.howToViewAllAvailableSpacesDescription\", defaultMessage: \"You are not authorized to view all available spaces.\" })),\n                React.createElement(\"p\", null,\n                    React.createElement(FormattedMessage, { id: \"xpack.security.management.editRoles.spaceAwarePrivilegeForm.ensureAccountHasAllPrivilegesGrantedDescription\", defaultMessage: \"Please ensure your account has all privileges granted by the\\n              {kibanaUser} role, and try again.\", values: {\n                            kibanaUser: (React.createElement(\"strong\", null,\n                                React.createElement(FormattedMessage, { id: \"xpack.security.management.editRoles.spaceAwarePrivilegeForm.kibanaUserTitle\", defaultMessage: \"kibana_user\" }))),\n                        } }))));\n        }\n        var assignedPrivileges = role.kibana;\n        var basePrivilege = assignedPrivileges.global.length > 0 ? assignedPrivileges.global[0] : NO_PRIVILEGE_VALUE;\n        var description = (React.createElement(\"p\", null,\n            React.createElement(FormattedMessage, { id: \"xpack.security.management.editRoles.spaceAwarePrivilegeForm.minimumActionsUserCanPerformInYourSpacesDescription\", defaultMessage: \"Specify the minimum actions users can perform in your spaces.\" })));\n        var helptext;\n        if (basePrivilege === NO_PRIVILEGE_VALUE) {\n            helptext = intl.formatMessage({\n                id: 'xpack.security.management.editRoles.spaceAwarePrivilegeForm.noAccessToSpacesHelpText',\n                defaultMessage: 'No access to spaces',\n            });\n        }\n        else if (basePrivilege === 'all') {\n            helptext = intl.formatMessage({\n                id: 'xpack.security.management.editRoles.spaceAwarePrivilegeForm.viewEditShareAppsWithinAllSpacesHelpText',\n                defaultMessage: 'View, edit, and share objects and apps within all spaces',\n            });\n        }\n        else if (basePrivilege === 'read') {\n            helptext = intl.formatMessage({\n                id: 'xpack.security.management.editRoles.spaceAwarePrivilegeForm.viewObjectsAndAppsWithinAllSpacesHelpText',\n                defaultMessage: 'View objects and apps within all spaces',\n            });\n        }\n        return (React.createElement(Fragment, null,\n            React.createElement(EuiDescribedFormGroup, { title: React.createElement(\"h3\", null,\n                    React.createElement(FormattedMessage, { id: \"xpack.security.management.editRoles.spaceAwarePrivilegeForm.minPrivilegesForAllSpacesTitle\", defaultMessage: \"Minimum privileges for all spaces\" })), description: description },\n                React.createElement(EuiFormRow, { hasEmptyLabelSpace: true, helpText: helptext },\n                    React.createElement(PrivilegeSelector, { \"data-test-subj\": 'kibanaMinimumPrivilege', availablePrivileges: kibanaAppPrivileges, value: basePrivilege, disabled: isReservedRole(role), allowNone: true, onChange: this.onKibanaBasePrivilegeChange }))),\n            React.createElement(EuiSpacer, null),\n            this.renderSpacePrivileges(basePrivilege, kibanaAppPrivileges)));\n    };\n    return SpaceAwarePrivilegeFormUI;\n}(Component));\nexport var SpaceAwarePrivilegeForm = injectI18n(SpaceAwarePrivilegeFormUI);\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/security/public/views/management/edit_role/components/privileges/kibana/space_aware_privilege_form.tsx","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/security/public/views/management/edit_role/components/privileges/kibana/space_aware_privilege_form.tsx"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport {\n  EuiButton,\n  EuiCallOut,\n  // @ts-ignore\n  EuiDescribedFormGroup,\n  EuiFlexGroup,\n  EuiFlexItem,\n  EuiFormRow,\n  EuiSpacer,\n  EuiText,\n  EuiTitle,\n} from '@elastic/eui';\nimport { FormattedMessage, InjectedIntl, injectI18n } from '@kbn/i18n/react';\nimport React, { Component, Fragment } from 'react';\nimport { Space } from '../../../../../../../../spaces/common/model/space';\nimport { UserProfile } from '../../../../../../../../xpack_main/public/services/user_profile';\nimport { KibanaPrivilege } from '../../../../../../../common/model/kibana_privilege';\nimport { Role } from '../../../../../../../common/model/role';\nimport { isReservedRole } from '../../../../../../lib/role';\nimport { NO_PRIVILEGE_VALUE } from '../../../lib/constants';\nimport { copyRole } from '../../../lib/copy_role';\nimport { getAvailablePrivileges } from '../../../lib/get_available_privileges';\nimport { RoleValidator } from '../../../lib/validate_role';\nimport { ImpactedSpacesFlyout } from './impacted_spaces_flyout';\nimport { PrivilegeCalloutWarning } from './privilege_callout_warning';\nimport { PrivilegeSelector } from './privilege_selector';\nimport { PrivilegeSpaceForm } from './privilege_space_form';\nimport { PrivilegeSpaceTable } from './privilege_space_table';\n\ninterface Props {\n  kibanaAppPrivileges: KibanaPrivilege[];\n  role: Role;\n  spaces: Space[];\n  onChange: (role: Role) => void;\n  editable: boolean;\n  validator: RoleValidator;\n  userProfile: UserProfile;\n  intl: InjectedIntl;\n}\n\ninterface PrivilegeForm {\n  spaces: string[];\n  privilege: KibanaPrivilege | null;\n}\n\ninterface SpacePrivileges {\n  [spaceId: string]: KibanaPrivilege[];\n}\n\ninterface State {\n  spacePrivileges: SpacePrivileges;\n  privilegeForms: PrivilegeForm[];\n}\n\nclass SpaceAwarePrivilegeFormUI extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    const { role } = props;\n\n    const assignedPrivileges = role.kibana;\n    const spacePrivileges = {\n      ...assignedPrivileges.space,\n    };\n\n    this.state = {\n      spacePrivileges,\n      privilegeForms: [],\n    };\n  }\n\n  public render() {\n    const { kibanaAppPrivileges, role, userProfile, intl } = this.props;\n\n    if (!userProfile.hasCapability('manageSpaces')) {\n      return (\n        <EuiCallOut\n          title={\n            <p>\n              <FormattedMessage\n                id=\"xpack.security.management.editRoles.spaceAwarePrivilegeForm.insufficientPrivilegesDescription\"\n                defaultMessage=\"Insufficient Privileges\"\n              />\n            </p>\n          }\n          iconType=\"alert\"\n          color=\"danger\"\n        >\n          <p>\n            <FormattedMessage\n              id=\"xpack.security.management.editRoles.spaceAwarePrivilegeForm.howToViewAllAvailableSpacesDescription\"\n              defaultMessage=\"You are not authorized to view all available spaces.\"\n            />\n          </p>\n          <p>\n            <FormattedMessage\n              id=\"xpack.security.management.editRoles.spaceAwarePrivilegeForm.ensureAccountHasAllPrivilegesGrantedDescription\"\n              defaultMessage=\"Please ensure your account has all privileges granted by the\n              {kibanaUser} role, and try again.\"\n              values={{\n                kibanaUser: (\n                  <strong>\n                    <FormattedMessage\n                      id=\"xpack.security.management.editRoles.spaceAwarePrivilegeForm.kibanaUserTitle\"\n                      defaultMessage=\"kibana_user\"\n                    />\n                  </strong>\n                ),\n              }}\n            />\n          </p>\n        </EuiCallOut>\n      );\n    }\n\n    const assignedPrivileges = role.kibana;\n\n    const basePrivilege =\n      assignedPrivileges.global.length > 0 ? assignedPrivileges.global[0] : NO_PRIVILEGE_VALUE;\n\n    const description = (\n      <p>\n        <FormattedMessage\n          id=\"xpack.security.management.editRoles.spaceAwarePrivilegeForm.minimumActionsUserCanPerformInYourSpacesDescription\"\n          defaultMessage=\"Specify the minimum actions users can perform in your spaces.\"\n        />\n      </p>\n    );\n\n    let helptext;\n    if (basePrivilege === NO_PRIVILEGE_VALUE) {\n      helptext = intl.formatMessage({\n        id: 'xpack.security.management.editRoles.spaceAwarePrivilegeForm.noAccessToSpacesHelpText',\n        defaultMessage: 'No access to spaces',\n      });\n    } else if (basePrivilege === 'all') {\n      helptext = intl.formatMessage({\n        id:\n          'xpack.security.management.editRoles.spaceAwarePrivilegeForm.viewEditShareAppsWithinAllSpacesHelpText',\n        defaultMessage: 'View, edit, and share objects and apps within all spaces',\n      });\n    } else if (basePrivilege === 'read') {\n      helptext = intl.formatMessage({\n        id:\n          'xpack.security.management.editRoles.spaceAwarePrivilegeForm.viewObjectsAndAppsWithinAllSpacesHelpText',\n        defaultMessage: 'View objects and apps within all spaces',\n      });\n    }\n\n    return (\n      <Fragment>\n        <EuiDescribedFormGroup\n          title={\n            <h3>\n              <FormattedMessage\n                id=\"xpack.security.management.editRoles.spaceAwarePrivilegeForm.minPrivilegesForAllSpacesTitle\"\n                defaultMessage=\"Minimum privileges for all spaces\"\n              />\n            </h3>\n          }\n          description={description}\n        >\n          <EuiFormRow hasEmptyLabelSpace helpText={helptext}>\n            <PrivilegeSelector\n              data-test-subj={'kibanaMinimumPrivilege'}\n              availablePrivileges={kibanaAppPrivileges}\n              value={basePrivilege}\n              disabled={isReservedRole(role)}\n              allowNone={true}\n              onChange={this.onKibanaBasePrivilegeChange}\n            />\n          </EuiFormRow>\n        </EuiDescribedFormGroup>\n\n        <EuiSpacer />\n\n        {this.renderSpacePrivileges(basePrivilege, kibanaAppPrivileges)}\n      </Fragment>\n    );\n  }\n\n  public renderSpacePrivileges = (\n    basePrivilege: KibanaPrivilege,\n    availablePrivileges: KibanaPrivilege[]\n  ) => {\n    const { role, spaces } = this.props;\n\n    const { spacePrivileges } = this.state;\n\n    const availableSpaces = this.getAvailableSpaces();\n\n    const canAssignSpacePrivileges = basePrivilege !== 'all';\n    const hasAssignedSpacePrivileges = Object.keys(this.state.spacePrivileges).length > 0;\n\n    const showAddPrivilegeButton =\n      canAssignSpacePrivileges && this.props.editable && availableSpaces.length > 0;\n\n    return (\n      <Fragment>\n        <EuiTitle size={'xs'}>\n          <h3>\n            <FormattedMessage\n              id=\"xpack.security.management.editRoles.spaceAwarePrivilegeForm.higherPrivilegesForIndividualSpacesTitle\"\n              defaultMessage=\"Higher privileges for individual spaces\"\n            />\n          </h3>\n        </EuiTitle>\n        <EuiSpacer size={'s'} />\n        <EuiText\n          // @ts-ignore\n          grow={false}\n          size={'s'}\n          color={'subdued'}\n        >\n          <p>\n            <FormattedMessage\n              id=\"xpack.security.management.editRoles.spaceAwarePrivilegeForm.grantMorePrivilegesTitle\"\n              defaultMessage=\"Grant more privileges on a per space basis. For example, if the privileges are\n              {read} for all spaces, you can set the privileges to {all}\n              for an individual space.\"\n              values={{\n                read: (\n                  <strong>\n                    <FormattedMessage\n                      id=\"xpack.security.management.editRoles.spaceAwarePrivilegeForm.readText\"\n                      defaultMessage=\"read\"\n                    />\n                  </strong>\n                ),\n                all: (\n                  <strong>\n                    <FormattedMessage\n                      id=\"xpack.security.management.editRoles.spaceAwarePrivilegeForm.allText\"\n                      defaultMessage=\"all\"\n                    />\n                  </strong>\n                ),\n              }}\n            />\n          </p>\n        </EuiText>\n        <EuiSpacer size={'s'} />\n        {(basePrivilege !== NO_PRIVILEGE_VALUE || isReservedRole(this.props.role)) && (\n          <PrivilegeCalloutWarning\n            basePrivilege={basePrivilege}\n            isReservedRole={isReservedRole(this.props.role)}\n          />\n        )}\n\n        {basePrivilege === 'read' && this.props.editable && <EuiSpacer />}\n\n        {canAssignSpacePrivileges && (\n          <Fragment>\n            <PrivilegeSpaceTable\n              role={role}\n              spaces={spaces}\n              availablePrivileges={availablePrivileges}\n              spacePrivileges={spacePrivileges}\n              onChange={this.onExistingSpacePrivilegesChange}\n            />\n\n            {hasAssignedSpacePrivileges && <EuiSpacer />}\n\n            {this.getSpaceForms(basePrivilege)}\n          </Fragment>\n        )}\n\n        <EuiFlexGroup\n          // @ts-ignore\n          alignItems={'baseline'}\n        >\n          {showAddPrivilegeButton && (\n            <EuiFlexItem grow={false}>\n              <EuiButton\n                data-test-subj=\"addSpacePrivilegeButton\"\n                size={'s'}\n                iconType={'plusInCircle'}\n                onClick={this.addSpacePrivilege}\n              >\n                <FormattedMessage\n                  id=\"xpack.security.management.editRoles.spaceAwarePrivilegeForm.addSpacePrivilegeTitle\"\n                  defaultMessage=\"Add space privilege\"\n                />\n              </EuiButton>\n            </EuiFlexItem>\n          )}\n          <EuiFlexItem>\n            <ImpactedSpacesFlyout\n              role={role}\n              spaces={spaces}\n              userProfile={this.props.userProfile}\n            />\n          </EuiFlexItem>\n        </EuiFlexGroup>\n      </Fragment>\n    );\n  };\n\n  public getSpaceForms = (basePrivilege: KibanaPrivilege) => {\n    if (!this.props.editable) {\n      return null;\n    }\n\n    return this.state.privilegeForms.map((form, index) =>\n      this.getSpaceForm(form, index, basePrivilege)\n    );\n  };\n\n  public addSpacePrivilege = () => {\n    this.setState({\n      privilegeForms: [\n        ...this.state.privilegeForms,\n        {\n          spaces: [],\n          privilege: null,\n        },\n      ],\n    });\n  };\n\n  public getAvailableSpaces = (omitIndex?: number): Space[] => {\n    const { spacePrivileges } = this.state;\n\n    return this.props.spaces.filter(space => {\n      const alreadyAssigned = Object.keys(spacePrivileges).indexOf(space.id) >= 0;\n\n      if (alreadyAssigned) {\n        return false;\n      }\n\n      const otherForms = [...this.state.privilegeForms];\n      if (typeof omitIndex === 'number') {\n        otherForms.splice(omitIndex, 1);\n      }\n\n      const inAnotherForm = otherForms.some(({ spaces }) => spaces.indexOf(space.id) >= 0);\n\n      return !inAnotherForm;\n    });\n  };\n\n  public getSpaceForm = (form: PrivilegeForm, index: number, basePrivilege: KibanaPrivilege) => {\n    const { spaces: selectedSpaceIds, privilege } = form;\n\n    const availableSpaces = this.getAvailableSpaces(index);\n\n    return (\n      <Fragment key={index}>\n        <PrivilegeSpaceForm\n          key={index}\n          availableSpaces={availableSpaces}\n          selectedSpaceIds={selectedSpaceIds}\n          availablePrivileges={getAvailablePrivileges(basePrivilege)}\n          selectedPrivilege={privilege}\n          onChange={this.onPrivilegeSpacePermissionChange(index)}\n          onDelete={this.onPrivilegeSpacePermissionDelete(index)}\n          validator={this.props.validator}\n        />\n        <EuiSpacer />\n      </Fragment>\n    );\n  };\n\n  public onPrivilegeSpacePermissionChange = (index: number) => (form: PrivilegeForm) => {\n    const existingPrivilegeForm = { ...this.state.privilegeForms[index] };\n    const updatedPrivileges = [...this.state.privilegeForms];\n    updatedPrivileges[index] = {\n      spaces: form.spaces,\n      privilege: form.privilege,\n    };\n\n    this.setState({\n      privilegeForms: updatedPrivileges,\n    });\n\n    const role = copyRole(this.props.role);\n\n    existingPrivilegeForm.spaces.forEach(spaceId => {\n      role.kibana.space[spaceId] = [];\n    });\n\n    if (form.spaces.length) {\n      const privilege = form.privilege;\n      if (privilege) {\n        form.spaces.forEach(spaceId => {\n          role.kibana.space[spaceId] = [privilege];\n        });\n      }\n    }\n\n    this.props.validator.setInProgressSpacePrivileges(updatedPrivileges);\n    this.props.onChange(role);\n  };\n\n  public onPrivilegeSpacePermissionDelete = (index: number) => () => {\n    const updatedPrivileges = [...this.state.privilegeForms];\n    const removedPrivilege = updatedPrivileges.splice(index, 1)[0];\n\n    this.setState({\n      privilegeForms: updatedPrivileges,\n    });\n\n    const role = copyRole(this.props.role);\n\n    removedPrivilege.spaces.forEach(spaceId => {\n      delete role.kibana.space[spaceId];\n    });\n\n    this.props.validator.setInProgressSpacePrivileges(updatedPrivileges);\n    this.props.onChange(role);\n  };\n\n  public onExistingSpacePrivilegesChange = (assignedPrivileges: SpacePrivileges) => {\n    const role = copyRole(this.props.role);\n\n    role.kibana.space = {\n      ...assignedPrivileges,\n    };\n\n    // Merge in-progress forms\n    this.state.privilegeForms.forEach(inProgressForm => {\n      const { privilege } = inProgressForm;\n      if (privilege) {\n        inProgressForm.spaces.forEach(spaceId => {\n          role.kibana.space[spaceId] = [privilege];\n        });\n      }\n    });\n\n    this.setState({\n      spacePrivileges: assignedPrivileges,\n    });\n\n    this.props.onChange(role);\n  };\n\n  public onKibanaBasePrivilegeChange = (privilege: KibanaPrivilege) => {\n    const role = copyRole(this.props.role);\n\n    // Remove base privilege value\n    role.kibana.global = [];\n\n    if (privilege !== NO_PRIVILEGE_VALUE) {\n      role.kibana.global = [privilege];\n    }\n\n    this.props.onChange(role);\n  };\n}\n\nexport const SpaceAwarePrivilegeForm = injectI18n(SpaceAwarePrivilegeFormUI);\n"]}]}