{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/containers/waffle/with_waffle_nodes.tsx","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/containers/waffle/with_waffle_nodes.tsx","mtime":1567631711984},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport * as tslib_1 from \"tslib\";\nvar _a;\nimport React from 'react';\nimport { Query } from 'react-apollo';\nimport { InfraNodeType, InfraPathType, } from '../../graphql/types';\nimport { waffleNodesQuery } from './waffle_nodes.gql_query';\nvar NODE_TYPE_TO_PATH_TYPE = (_a = {},\n    _a[InfraNodeType.container] = InfraPathType.containers,\n    _a[InfraNodeType.host] = InfraPathType.hosts,\n    _a[InfraNodeType.pod] = InfraPathType.pods,\n    _a);\nexport var WithWaffleNodes = function (_a) {\n    var children = _a.children, filterQuery = _a.filterQuery, metric = _a.metric, groupBy = _a.groupBy, nodeType = _a.nodeType, sourceId = _a.sourceId, timerange = _a.timerange;\n    return (React.createElement(Query, { query: waffleNodesQuery, fetchPolicy: \"no-cache\", notifyOnNetworkStatusChange: true, variables: {\n            sourceId: sourceId,\n            metric: metric,\n            path: tslib_1.__spread(groupBy, [{ type: NODE_TYPE_TO_PATH_TYPE[nodeType] }]),\n            timerange: timerange,\n            filterQuery: filterQuery,\n        } }, function (_a) {\n        var data = _a.data, loading = _a.loading, refetch = _a.refetch;\n        return children({\n            loading: loading,\n            nodes: data && data.source && data.source.map && data.source.map.nodes\n                ? data.source.map.nodes\n                : [],\n            refetch: refetch,\n        });\n    }));\n};\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/containers/waffle/with_waffle_nodes.tsx","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/containers/waffle/with_waffle_nodes.tsx"],"names":[],"mappings":"AAAA;;;;GAIG;;;AAEH,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,KAAK,EAAE,MAAM,cAAc,CAAC;AAErC,OAAO,EAGL,aAAa,EAEb,aAAa,GAGd,MAAM,qBAAqB,CAAC;AAC7B,OAAO,EAAE,gBAAgB,EAAE,MAAM,0BAA0B,CAAC;AAkB5D,IAAM,sBAAsB;IAC1B,GAAC,aAAa,CAAC,SAAS,IAAG,aAAa,CAAC,UAAU;IACnD,GAAC,aAAa,CAAC,IAAI,IAAG,aAAa,CAAC,KAAK;IACzC,GAAC,aAAa,CAAC,GAAG,IAAG,aAAa,CAAC,IAAI;OACxC,CAAC;AAEF,MAAM,CAAC,IAAM,eAAe,GAAG,UAAC,EAQT;QAPrB,sBAAQ,EACR,4BAAW,EACX,kBAAM,EACN,oBAAO,EACP,sBAAQ,EACR,sBAAQ,EACR,wBAAS;IACiB,OAAA,CAC1B,oBAAC,KAAK,IACJ,KAAK,EAAE,gBAAgB,EACvB,WAAW,EAAC,UAAU,EACtB,2BAA2B,QAC3B,SAAS,EAAE;YACT,QAAQ,UAAA;YACR,MAAM,QAAA;YACN,IAAI,mBAAM,OAAO,GAAE,EAAE,IAAI,EAAE,sBAAsB,CAAC,QAAQ,CAAC,EAAE,EAAC;YAC9D,SAAS,WAAA;YACT,WAAW,aAAA;SACZ,IAEA,UAAC,EAA0B;YAAxB,cAAI,EAAE,oBAAO,EAAE,oBAAO;QACxB,OAAA,QAAQ,CAAC;YACP,OAAO,SAAA;YACP,KAAK,EACH,IAAI,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,GAAG,IAAI,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK;gBAC7D,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK;gBACvB,CAAC,CAAC,EAAE;YACR,OAAO,SAAA;SACR,CAAC;IAPF,CAOE,CAEE,CACT;AAxB2B,CAwB3B,CAAC","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport React from 'react';\nimport { Query } from 'react-apollo';\n\nimport {\n  InfraMetricInput,\n  InfraNode,\n  InfraNodeType,\n  InfraPathInput,\n  InfraPathType,\n  InfraTimerangeInput,\n  WaffleNodesQuery,\n} from '../../graphql/types';\nimport { waffleNodesQuery } from './waffle_nodes.gql_query';\n\ninterface WithWaffleNodesArgs {\n  nodes: InfraNode[];\n  loading: boolean;\n  refetch: () => void;\n}\n\ninterface WithWaffleNodesProps {\n  children: (args: WithWaffleNodesArgs) => React.ReactNode;\n  filterQuery: string | null | undefined;\n  metric: InfraMetricInput;\n  groupBy: InfraPathInput[];\n  nodeType: InfraNodeType;\n  sourceId: string;\n  timerange: InfraTimerangeInput;\n}\n\nconst NODE_TYPE_TO_PATH_TYPE = {\n  [InfraNodeType.container]: InfraPathType.containers,\n  [InfraNodeType.host]: InfraPathType.hosts,\n  [InfraNodeType.pod]: InfraPathType.pods,\n};\n\nexport const WithWaffleNodes = ({\n  children,\n  filterQuery,\n  metric,\n  groupBy,\n  nodeType,\n  sourceId,\n  timerange,\n}: WithWaffleNodesProps) => (\n  <Query<WaffleNodesQuery.Query, WaffleNodesQuery.Variables>\n    query={waffleNodesQuery}\n    fetchPolicy=\"no-cache\"\n    notifyOnNetworkStatusChange\n    variables={{\n      sourceId,\n      metric,\n      path: [...groupBy, { type: NODE_TYPE_TO_PATH_TYPE[nodeType] }],\n      timerange,\n      filterQuery,\n    }}\n  >\n    {({ data, loading, refetch }) =>\n      children({\n        loading,\n        nodes:\n          data && data.source && data.source.map && data.source.map.nodes\n            ? data.source.map.nodes\n            : [],\n        refetch,\n      })\n    }\n  </Query>\n);\n"]}]}