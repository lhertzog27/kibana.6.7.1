{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/upgrade_assistant/public/components/tabs/checkup/deprecations/health.tsx","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/upgrade_assistant/public/components/tabs/checkup/deprecations/health.tsx","mtime":1567631712322},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport * as tslib_1 from \"tslib\";\nimport { countBy } from 'lodash';\nimport React from 'react';\nimport { EuiBadge, EuiToolTip } from '@elastic/eui';\nimport { i18n } from '@kbn/i18n';\nimport { COLOR_MAP, LEVEL_MAP, REVERSE_LEVEL_MAP } from '../constants';\nvar LocalizedLevels = {\n    warning: i18n.translate('xpack.upgradeAssistant.checkupTab.deprecations.warningLabel', {\n        defaultMessage: 'warning',\n    }),\n    critical: i18n.translate('xpack.upgradeAssistant.checkupTab.deprecations.criticalLabel', {\n        defaultMessage: 'critical',\n    }),\n};\nexport var LocalizedActions = {\n    warning: i18n.translate('xpack.upgradeAssistant.checkupTab.deprecations.warningActionTooltip', {\n        defaultMessage: 'Resolving this issue before upgrading is advised, but not required.',\n    }),\n    critical: i18n.translate('xpack.upgradeAssistant.checkupTab.deprecations.criticalActionTooltip', {\n        defaultMessage: 'Resolve this issue before upgrading.',\n    }),\n};\nvar SingleHealth = function (_a) {\n    var level = _a.level, label = _a.label;\n    return (React.createElement(React.Fragment, null,\n        React.createElement(EuiToolTip, { content: LocalizedActions[level] },\n            React.createElement(EuiBadge, { color: COLOR_MAP[level] }, label)),\n        \"\\u2003\"));\n};\n/**\n * Displays a summary health for a list of deprecations that shows the number and level of severity\n * deprecations in the list.\n */\nexport var DeprecationHealth = function (_a) {\n    var deprecations = _a.deprecations, _b = _a.single, single = _b === void 0 ? false : _b;\n    if (deprecations.length === 0) {\n        return React.createElement(\"span\", null);\n    }\n    var levels = deprecations.map(function (d) { return LEVEL_MAP[d.level]; });\n    if (single) {\n        var highest = Math.max.apply(Math, tslib_1.__spread(levels));\n        var highestLevel = REVERSE_LEVEL_MAP[highest];\n        return React.createElement(SingleHealth, { level: highestLevel, label: LocalizedLevels[highestLevel] });\n    }\n    var countByLevel = countBy(levels);\n    return (React.createElement(React.Fragment, null, Object.keys(countByLevel)\n        .map(function (k) { return parseInt(k, 10); })\n        .sort()\n        .map(function (level) { return [level, REVERSE_LEVEL_MAP[level]]; })\n        .map(function (_a) {\n        var _b = tslib_1.__read(_a, 2), numLevel = _b[0], stringLevel = _b[1];\n        return (React.createElement(SingleHealth, { key: stringLevel, level: stringLevel, label: countByLevel[numLevel] + \" \" + LocalizedLevels[stringLevel] }));\n    })));\n};\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/upgrade_assistant/public/components/tabs/checkup/deprecations/health.tsx","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/upgrade_assistant/public/components/tabs/checkup/deprecations/health.tsx"],"names":[],"mappings":"AAAA;;;;GAIG;;AAEH,OAAO,EAAE,OAAO,EAAE,MAAM,QAAQ,CAAC;AACjC,OAAO,KAA6B,MAAM,OAAO,CAAC;AAElD,OAAO,EAAE,QAAQ,EAAE,UAAU,EAAE,MAAM,cAAc,CAAC;AACpD,OAAO,EAAE,IAAI,EAAE,MAAM,WAAW,CAAC;AAGjC,OAAO,EAAE,SAAS,EAAE,SAAS,EAAE,iBAAiB,EAAE,MAAM,cAAc,CAAC;AAEvE,IAAM,eAAe,GAAgC;IACnD,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,6DAA6D,EAAE;QACrF,cAAc,EAAE,SAAS;KAC1B,CAAC;IACF,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,8DAA8D,EAAE;QACvF,cAAc,EAAE,UAAU;KAC3B,CAAC;CACH,CAAC;AAEF,MAAM,CAAC,IAAM,gBAAgB,GAAgC;IAC3D,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,qEAAqE,EAAE;QAC7F,cAAc,EAAE,qEAAqE;KACtF,CAAC;IACF,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,sEAAsE,EAAE;QAC/F,cAAc,EAAE,sCAAsC;KACvD,CAAC;CACH,CAAC;AAOF,IAAM,YAAY,GAA2E,UAAC,EAG7F;QAFC,gBAAK,EACL,gBAAK;IACD,OAAA,CACJ,oBAAC,KAAK,CAAC,QAAQ;QACb,oBAAC,UAAU,IAAC,OAAO,EAAE,gBAAgB,CAAC,KAAK,CAAC;YAC1C,oBAAC,QAAQ,IAAC,KAAK,EAAE,SAAS,CAAC,KAAK,CAAC,IAAG,KAAK,CAAY,CAC1C;iBAEE,CAClB;AAPK,CAOL,CAAC;AAEF;;;GAGG;AACH,MAAM,CAAC,IAAM,iBAAiB,GAA+C,UAAC,EAG7E;QAFC,8BAAY,EACZ,cAAc,EAAd,mCAAc;IAEd,IAAI,YAAY,CAAC,MAAM,KAAK,CAAC,EAAE;QAC7B,OAAO,iCAAQ,CAAC;KACjB;IAED,IAAM,MAAM,GAAG,YAAY,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,EAAlB,CAAkB,CAAC,CAAC;IAEzD,IAAI,MAAM,EAAE;QACV,IAAM,OAAO,GAAG,IAAI,CAAC,GAAG,OAAR,IAAI,mBAAQ,MAAM,EAAC,CAAC;QACpC,IAAM,YAAY,GAAG,iBAAiB,CAAC,OAAO,CAAC,CAAC;QAEhD,OAAO,oBAAC,YAAY,IAAC,KAAK,EAAE,YAAY,EAAE,KAAK,EAAE,eAAe,CAAC,YAAY,CAAC,GAAI,CAAC;KACpF;IAED,IAAM,YAAY,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;IAErC,OAAO,CACL,oBAAC,KAAK,CAAC,QAAQ,QACZ,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC;SACvB,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,EAAf,CAAe,CAAC;SACzB,IAAI,EAAE;SACN,GAAG,CAAC,UAAA,KAAK,IAAI,OAAA,CAAC,KAAK,EAAE,iBAAiB,CAAC,KAAK,CAAC,CAAC,EAAjC,CAAiC,CAAC;SAC/C,GAAG,CAAC,UAAC,EAAuB;YAAvB,0BAAuB,EAAtB,gBAAQ,EAAE,mBAAW;QAAM,OAAA,CAChC,oBAAC,YAAY,IACX,GAAG,EAAE,WAAW,EAChB,KAAK,EAAE,WAAuC,EAC9C,KAAK,EAAK,YAAY,CAAC,QAAQ,CAAC,SAAI,eAAe,CAAC,WAAW,CAAG,GAClE,CACH;IANiC,CAMjC,CAAC,CACW,CAClB,CAAC;AACJ,CAAC,CAAC","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport { countBy } from 'lodash';\nimport React, { StatelessComponent } from 'react';\n\nimport { EuiBadge, EuiToolTip } from '@elastic/eui';\nimport { i18n } from '@kbn/i18n';\n\nimport { DeprecationInfo } from 'src/legacy/core_plugins/elasticsearch';\nimport { COLOR_MAP, LEVEL_MAP, REVERSE_LEVEL_MAP } from '../constants';\n\nconst LocalizedLevels: { [level: string]: string } = {\n  warning: i18n.translate('xpack.upgradeAssistant.checkupTab.deprecations.warningLabel', {\n    defaultMessage: 'warning',\n  }),\n  critical: i18n.translate('xpack.upgradeAssistant.checkupTab.deprecations.criticalLabel', {\n    defaultMessage: 'critical',\n  }),\n};\n\nexport const LocalizedActions: { [level: string]: string } = {\n  warning: i18n.translate('xpack.upgradeAssistant.checkupTab.deprecations.warningActionTooltip', {\n    defaultMessage: 'Resolving this issue before upgrading is advised, but not required.',\n  }),\n  critical: i18n.translate('xpack.upgradeAssistant.checkupTab.deprecations.criticalActionTooltip', {\n    defaultMessage: 'Resolve this issue before upgrading.',\n  }),\n};\n\ninterface DeprecationHealthProps {\n  deprecations: DeprecationInfo[];\n  single?: boolean;\n}\n\nconst SingleHealth: StatelessComponent<{ level: DeprecationInfo['level']; label: string }> = ({\n  level,\n  label,\n}) => (\n  <React.Fragment>\n    <EuiToolTip content={LocalizedActions[level]}>\n      <EuiBadge color={COLOR_MAP[level]}>{label}</EuiBadge>\n    </EuiToolTip>\n    &emsp;\n  </React.Fragment>\n);\n\n/**\n * Displays a summary health for a list of deprecations that shows the number and level of severity\n * deprecations in the list.\n */\nexport const DeprecationHealth: StatelessComponent<DeprecationHealthProps> = ({\n  deprecations,\n  single = false,\n}) => {\n  if (deprecations.length === 0) {\n    return <span />;\n  }\n\n  const levels = deprecations.map(d => LEVEL_MAP[d.level]);\n\n  if (single) {\n    const highest = Math.max(...levels);\n    const highestLevel = REVERSE_LEVEL_MAP[highest];\n\n    return <SingleHealth level={highestLevel} label={LocalizedLevels[highestLevel]} />;\n  }\n\n  const countByLevel = countBy(levels);\n\n  return (\n    <React.Fragment>\n      {Object.keys(countByLevel)\n        .map(k => parseInt(k, 10))\n        .sort()\n        .map(level => [level, REVERSE_LEVEL_MAP[level]])\n        .map(([numLevel, stringLevel]) => (\n          <SingleHealth\n            key={stringLevel}\n            level={stringLevel as DeprecationInfo['level']}\n            label={`${countByLevel[numLevel]} ${LocalizedLevels[stringLevel]}`}\n          />\n        ))}\n    </React.Fragment>\n  );\n};\n"]}]}