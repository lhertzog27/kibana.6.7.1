{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/beats_management/public/components/tag/config_view/config_form.tsx","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/beats_management/public/components/tag/config_view/config_form.tsx","mtime":1567631711881},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["import * as tslib_1 from \"tslib\";\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n// @ts-ignore\nimport { i18n } from '@kbn/i18n';\nimport Formsy from 'formsy-react';\nimport { get } from 'lodash';\nimport React from 'react';\nimport { FormsyEuiCodeEditor, FormsyEuiFieldText, FormsyEuiMultiFieldText, FormsyEuiPasswordText, FormsyEuiSelect, } from '../../inputs';\nvar ConfigFormUi = /** @class */ (function (_super) {\n    tslib_1.__extends(ConfigFormUi, _super);\n    function ConfigFormUi(props) {\n        var _this = _super.call(this, props) || this;\n        _this.form = React.createRef();\n        _this.enableButton = function () {\n            _this.setState({\n                canSubmit: true,\n            });\n            _this.props.canSubmit(true);\n        };\n        _this.disableButton = function () {\n            _this.setState({\n                canSubmit: false,\n            });\n            _this.props.canSubmit(false);\n        };\n        _this.submit = function () {\n            if (_this.form.current && _this.props.onSubmit) {\n                _this.form.current.click();\n            }\n        };\n        _this.onValidSubmit = function (model) {\n            if (!_this.props.onSubmit) {\n                return;\n            }\n            _this.props.onSubmit(model);\n        };\n        _this.state = {\n            canSubmit: false,\n        };\n        return _this;\n    }\n    ConfigFormUi.prototype.render = function () {\n        var _this = this;\n        return (React.createElement(\"div\", null,\n            React.createElement(\"br\", null),\n            React.createElement(Formsy, { onValidSubmit: this.onValidSubmit, onValid: this.enableButton, onInvalid: this.disableButton },\n                this.props.schema.configs.map(function (schema) {\n                    switch (schema.ui.type) {\n                        case 'input':\n                            return (React.createElement(FormsyEuiFieldText, { key: schema.id, id: schema.id, defaultValue: get(_this.props, \"values.config.\" + schema.id, schema.defaultValue), name: schema.id, disabled: !_this.props.onSubmit, helpText: schema.ui.helpText, placeholder: schema.ui.placeholder, label: schema.ui.label, validationError: schema.error, required: schema.required || false }));\n                        case 'password':\n                            return (React.createElement(FormsyEuiPasswordText, { key: schema.id, id: schema.id, disabled: !_this.props.onSubmit, defaultValue: get(_this.props, \"values.config.\" + schema.id, schema.defaultValue), name: schema.id, placeholder: schema.ui.placeholder, helpText: schema.ui.helpText, label: schema.ui.label, validationError: schema.error, required: schema.required || false }));\n                        case 'multi-input':\n                            return (React.createElement(FormsyEuiMultiFieldText, { key: schema.id, id: schema.id, disabled: !_this.props.onSubmit, defaultValue: get(_this.props, \"values.config.\" + schema.id, schema.defaultValue), name: schema.id, placeholder: schema.ui.placeholder, helpText: schema.ui.helpText, label: schema.ui.label, validationError: schema.error, required: schema.required }));\n                        case 'select':\n                            return (React.createElement(FormsyEuiSelect, { key: schema.id, id: schema.id, name: schema.id, disabled: !_this.props.onSubmit, defaultValue: get(_this.props, \"values.config.\" + schema.id, schema.defaultValue), helpText: schema.ui.helpText, label: schema.ui.label, options: [\n                                    {\n                                        value: '',\n                                        text: i18n.translate('xpack.beatsManagement.table.selectOptionLabel', {\n                                            defaultMessage: 'Please Select An Option',\n                                        }),\n                                    },\n                                ].concat(schema.options || []), validationError: schema.error, required: schema.required }));\n                        case 'code':\n                            return (React.createElement(FormsyEuiCodeEditor, { key: schema.id + \"-\" + _this.props.id, mode: \"yaml\", disabled: !_this.props.onSubmit, id: schema.id, defaultValue: get(_this.props, \"values.config.\" + schema.id, schema.defaultValue), name: schema.id, helpText: schema.ui.helpText, label: schema.ui.label, options: schema.options ? schema.options : [], validationError: schema.error, required: schema.required }));\n                    }\n                }),\n                this.props.schema && (React.createElement(FormsyEuiCodeEditor, { mode: \"yaml\", disabled: !this.props.onSubmit, id: 'other', defaultValue: get(this.props, \"values.config.other\", ''), name: 'other', helpText: i18n.translate('xpack.beatsManagement.config.otherConfigDescription', {\n                        defaultMessage: 'Use YAML format to specify other settings for the Filebeat Input',\n                    }), label: i18n.translate('xpack.beatsManagement.config.otherConfigLabel', {\n                        defaultMessage: 'Other Config',\n                    }), validationError: i18n.translate('xpack.beatsManagement.config.other.error', {\n                        defaultMessage: 'Use valid YAML format',\n                    }), required: false })),\n                this.props.onSubmit && (React.createElement(\"button\", { type: \"submit\", style: { display: 'none' }, disabled: !this.state.canSubmit, ref: this.form })))));\n    };\n    return ConfigFormUi;\n}(React.Component));\nexport var ConfigForm = ConfigFormUi;\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/beats_management/public/components/tag/config_view/config_form.tsx","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/beats_management/public/components/tag/config_view/config_form.tsx"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n// @ts-ignore\nimport { i18n } from '@kbn/i18n';\nimport Formsy from 'formsy-react';\nimport { get } from 'lodash';\nimport React from 'react';\nimport { ConfigBlockSchema, ConfigurationBlock } from '../../../../common/domain_types';\nimport {\n  FormsyEuiCodeEditor,\n  FormsyEuiFieldText,\n  FormsyEuiMultiFieldText,\n  FormsyEuiPasswordText,\n  FormsyEuiSelect,\n} from '../../inputs';\n\ninterface ComponentProps {\n  values: ConfigurationBlock;\n  schema: ConfigBlockSchema;\n  id: string;\n  onSubmit?: (modal: any) => any;\n  canSubmit(canIt: boolean): any;\n}\n\ninterface ComponentState {\n  canSubmit: boolean;\n}\n\nclass ConfigFormUi extends React.Component<ComponentProps, ComponentState> {\n  private form = React.createRef<HTMLButtonElement>();\n  constructor(props: ComponentProps) {\n    super(props);\n\n    this.state = {\n      canSubmit: false,\n    };\n  }\n\n  public enableButton = () => {\n    this.setState({\n      canSubmit: true,\n    });\n    this.props.canSubmit(true);\n  };\n  public disableButton = () => {\n    this.setState({\n      canSubmit: false,\n    });\n    this.props.canSubmit(false);\n  };\n  public submit = () => {\n    if (this.form.current && this.props.onSubmit) {\n      this.form.current.click();\n    }\n  };\n  public onValidSubmit = <ModelType extends any>(model: ModelType) => {\n    if (!this.props.onSubmit) {\n      return;\n    }\n\n    this.props.onSubmit(model);\n  };\n  public render() {\n    return (\n      <div>\n        <br />\n        <Formsy\n          onValidSubmit={this.onValidSubmit}\n          onValid={this.enableButton}\n          onInvalid={this.disableButton}\n        >\n          {this.props.schema.configs.map(schema => {\n            switch (schema.ui.type) {\n              case 'input':\n                return (\n                  <FormsyEuiFieldText\n                    key={schema.id}\n                    id={schema.id}\n                    defaultValue={get(\n                      this.props,\n                      `values.config.${schema.id}`,\n                      schema.defaultValue\n                    )}\n                    name={schema.id}\n                    disabled={!this.props.onSubmit}\n                    helpText={schema.ui.helpText}\n                    placeholder={schema.ui.placeholder}\n                    label={schema.ui.label}\n                    validationError={schema.error}\n                    required={schema.required || false}\n                  />\n                );\n              case 'password':\n                return (\n                  <FormsyEuiPasswordText\n                    key={schema.id}\n                    id={schema.id}\n                    disabled={!this.props.onSubmit}\n                    defaultValue={get(\n                      this.props,\n                      `values.config.${schema.id}`,\n                      schema.defaultValue\n                    )}\n                    name={schema.id}\n                    placeholder={schema.ui.placeholder}\n                    helpText={schema.ui.helpText}\n                    label={schema.ui.label}\n                    validationError={schema.error}\n                    required={schema.required || false}\n                  />\n                );\n              case 'multi-input':\n                return (\n                  <FormsyEuiMultiFieldText\n                    key={schema.id}\n                    id={schema.id}\n                    disabled={!this.props.onSubmit}\n                    defaultValue={get(\n                      this.props,\n                      `values.config.${schema.id}`,\n                      schema.defaultValue\n                    )}\n                    name={schema.id}\n                    placeholder={schema.ui.placeholder}\n                    helpText={schema.ui.helpText}\n                    label={schema.ui.label}\n                    validationError={schema.error}\n                    required={schema.required}\n                  />\n                );\n              case 'select':\n                return (\n                  <FormsyEuiSelect\n                    key={schema.id}\n                    id={schema.id}\n                    name={schema.id}\n                    disabled={!this.props.onSubmit}\n                    defaultValue={get(\n                      this.props,\n                      `values.config.${schema.id}`,\n                      schema.defaultValue\n                    )}\n                    helpText={schema.ui.helpText}\n                    label={schema.ui.label}\n                    options={[\n                      {\n                        value: '',\n                        text: i18n.translate('xpack.beatsManagement.table.selectOptionLabel', {\n                          defaultMessage: 'Please Select An Option',\n                        }),\n                      },\n                    ].concat(schema.options || [])}\n                    validationError={schema.error}\n                    required={schema.required}\n                  />\n                );\n              case 'code':\n                return (\n                  <FormsyEuiCodeEditor\n                    key={`${schema.id}-${this.props.id}`}\n                    mode=\"yaml\"\n                    disabled={!this.props.onSubmit}\n                    id={schema.id}\n                    defaultValue={get(\n                      this.props,\n                      `values.config.${schema.id}`,\n                      schema.defaultValue\n                    )}\n                    name={schema.id}\n                    helpText={schema.ui.helpText}\n                    label={schema.ui.label}\n                    options={schema.options ? schema.options : []}\n                    validationError={schema.error}\n                    required={schema.required}\n                  />\n                );\n            }\n          })}\n          {this.props.schema && (\n            <FormsyEuiCodeEditor\n              mode=\"yaml\"\n              disabled={!this.props.onSubmit}\n              id={'other'}\n              defaultValue={get(this.props, `values.config.other`, '')}\n              name={'other'}\n              helpText={i18n.translate('xpack.beatsManagement.config.otherConfigDescription', {\n                defaultMessage: 'Use YAML format to specify other settings for the Filebeat Input',\n              })}\n              label={i18n.translate('xpack.beatsManagement.config.otherConfigLabel', {\n                defaultMessage: 'Other Config',\n              })}\n              validationError={i18n.translate('xpack.beatsManagement.config.other.error', {\n                defaultMessage: 'Use valid YAML format',\n              })}\n              required={false}\n            />\n          )}\n          {this.props.onSubmit && (\n            <button\n              type=\"submit\"\n              style={{ display: 'none' }}\n              disabled={!this.state.canSubmit}\n              ref={this.form}\n            />\n          )}\n        </Formsy>\n      </div>\n    );\n  }\n}\nexport const ConfigForm = ConfigFormUi;\n"]}]}