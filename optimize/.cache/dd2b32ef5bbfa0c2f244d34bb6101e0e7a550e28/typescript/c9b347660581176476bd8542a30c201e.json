{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/apm/public/components/app/ServiceDetails/ServiceIntegrations/MachineLearningFlyout.tsx","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/apm/public/components/app/ServiceDetails/ServiceIntegrations/MachineLearningFlyout.tsx","mtime":1567631711860},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport * as tslib_1 from \"tslib\";\nimport { EuiButton, EuiCallOut, EuiFlexGroup, EuiFlexItem, EuiFlyout, EuiFlyoutBody, EuiFlyoutFooter, EuiFlyoutHeader, EuiFormRow, EuiSpacer, EuiText, EuiTitle } from '@elastic/eui';\nimport { i18n } from '@kbn/i18n';\nimport { FormattedMessage } from '@kbn/i18n/react';\nimport React, { Component } from 'react';\nimport { toastNotifications } from 'ui/notify';\nimport { KibanaLink } from 'x-pack/plugins/apm/public/components/shared/Links/KibanaLink';\nimport { MLJobLink } from 'x-pack/plugins/apm/public/components/shared/Links/MLJobLink';\nimport { getMlPrefix, startMLJob } from 'x-pack/plugins/apm/public/services/rest/ml';\nimport { getAPMIndexPattern } from 'x-pack/plugins/apm/public/services/rest/savedObjects';\nimport { MLJobsRequest } from 'x-pack/plugins/apm/public/store/reactReduxRequest/machineLearningJobs';\nimport { TransactionSelect } from './TransactionSelect';\nvar MachineLearningFlyout = /** @class */ (function (_super) {\n    tslib_1.__extends(MachineLearningFlyout, _super);\n    function MachineLearningFlyout() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.state = {\n            isLoading: false,\n            hasIndexPattern: false,\n            hasMLJob: false,\n            selectedTransactionType: _this.props.urlParams.transactionType\n        };\n        _this.createJob = function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n            var _a, serviceName, transactionType, res, didSucceed, e_1;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        this.setState({ isLoading: true });\n                        _b.label = 1;\n                    case 1:\n                        _b.trys.push([1, 4, , 5]);\n                        _a = this.props.urlParams, serviceName = _a.serviceName, transactionType = _a.transactionType;\n                        if (!serviceName) return [3 /*break*/, 3];\n                        return [4 /*yield*/, startMLJob({ serviceName: serviceName, transactionType: transactionType })];\n                    case 2:\n                        res = _b.sent();\n                        didSucceed = res.datafeeds[0].success && res.jobs[0].success;\n                        if (!didSucceed) {\n                            throw new Error('Creating ML job failed');\n                        }\n                        this.addSuccessToast();\n                        _b.label = 3;\n                    case 3: return [3 /*break*/, 5];\n                    case 4:\n                        e_1 = _b.sent();\n                        this.addErrorToast();\n                        return [3 /*break*/, 5];\n                    case 5:\n                        this.setState({ isLoading: false });\n                        this.props.onClose();\n                        return [2 /*return*/];\n                }\n            });\n        }); };\n        _this.addErrorToast = function () {\n            var urlParams = _this.props.urlParams;\n            var _a = urlParams.serviceName, serviceName = _a === void 0 ? 'unknown' : _a;\n            if (!serviceName) {\n                return;\n            }\n            toastNotifications.addWarning({\n                title: i18n.translate('xpack.apm.serviceDetails.enableAnomalyDetectionPanel.jobCreationFailedNotificationTitle', {\n                    defaultMessage: 'Job creation failed'\n                }),\n                text: (React.createElement(\"p\", null, i18n.translate('xpack.apm.serviceDetails.enableAnomalyDetectionPanel.jobCreationFailedNotificationText', {\n                    defaultMessage: 'Your current license may not allow for creating machine learning jobs, or this job may already exist.'\n                })))\n            });\n        };\n        _this.addSuccessToast = function () {\n            var _a = _this.props, location = _a.location, urlParams = _a.urlParams;\n            var _b = urlParams.serviceName, serviceName = _b === void 0 ? 'unknown' : _b, transactionType = urlParams.transactionType;\n            toastNotifications.addSuccess({\n                title: i18n.translate('xpack.apm.serviceDetails.enableAnomalyDetectionPanel.jobCreatedNotificationTitle', {\n                    defaultMessage: 'Job successfully created'\n                }),\n                text: (React.createElement(\"p\", null,\n                    i18n.translate('xpack.apm.serviceDetails.enableAnomalyDetectionPanel.jobCreatedNotificationText', {\n                        defaultMessage: 'The analysis is now running for {serviceName} ({transactionType}). It might take a while before results are added to the response times graph.',\n                        values: {\n                            serviceName: serviceName,\n                            transactionType: transactionType\n                        }\n                    }),\n                    ' ',\n                    React.createElement(MLJobLink, { serviceName: serviceName, transactionType: transactionType, location: location }, i18n.translate('xpack.apm.serviceDetails.enableAnomalyDetectionPanel.jobCreatedNotificationText.viewJobLinkText', {\n                        defaultMessage: 'View job'\n                    }))))\n            });\n        };\n        return _this;\n    }\n    MachineLearningFlyout.prototype.componentDidMount = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var indexPattern;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, getAPMIndexPattern()];\n                    case 1:\n                        indexPattern = _a.sent();\n                        this.setState({ hasIndexPattern: !!indexPattern });\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    MachineLearningFlyout.prototype.componentDidUpdate = function (prevProps) {\n        if (prevProps.urlParams.transactionType !==\n            this.props.urlParams.transactionType) {\n            this.setState({\n                selectedTransactionType: this.props.urlParams.transactionType\n            });\n        }\n    };\n    MachineLearningFlyout.prototype.render = function () {\n        var _this = this;\n        var _a = this.props, isOpen = _a.isOpen, onClose = _a.onClose, urlParams = _a.urlParams, location = _a.location;\n        var serviceName = urlParams.serviceName, transactionType = urlParams.transactionType;\n        var _b = this.state, isLoading = _b.isLoading, hasIndexPattern = _b.hasIndexPattern, selectedTransactionType = _b.selectedTransactionType;\n        if (!isOpen || !serviceName) {\n            return null;\n        }\n        return (React.createElement(MLJobsRequest, { serviceName: serviceName, render: function (_a) {\n                var data = _a.data, status = _a.status;\n                if (status === 'LOADING') {\n                    return null;\n                }\n                var hasMLJob = data.jobs.some(function (job) {\n                    return job.jobId &&\n                        job.jobId.startsWith(getMlPrefix(serviceName, selectedTransactionType));\n                });\n                return (React.createElement(EuiFlyout, { onClose: onClose, size: \"s\" },\n                    React.createElement(EuiFlyoutHeader, null,\n                        React.createElement(EuiTitle, null,\n                            React.createElement(\"h2\", null, i18n.translate('xpack.apm.serviceDetails.enableAnomalyDetectionPanel.enableAnomalyDetectionTitle', {\n                                defaultMessage: 'Enable anomaly detection'\n                            }))),\n                        React.createElement(EuiSpacer, { size: \"s\" })),\n                    React.createElement(EuiFlyoutBody, null,\n                        hasMLJob && (React.createElement(\"div\", null,\n                            React.createElement(EuiCallOut, { title: i18n.translate('xpack.apm.serviceDetails.enableAnomalyDetectionPanel.callout.jobExistsTitle', {\n                                    defaultMessage: 'Job already exists'\n                                }), color: \"success\", iconType: \"check\" },\n                                React.createElement(\"p\", null,\n                                    i18n.translate('xpack.apm.serviceDetails.enableAnomalyDetectionPanel.callout.jobExistsDescription', {\n                                        defaultMessage: 'There is currently a job running for {serviceName} ({transactionType}).',\n                                        values: {\n                                            serviceName: serviceName,\n                                            transactionType: transactionType\n                                        }\n                                    }),\n                                    ' ',\n                                    React.createElement(MLJobLink, { serviceName: serviceName, transactionType: transactionType, location: location }, i18n.translate('xpack.apm.serviceDetails.enableAnomalyDetectionPanel.callout.jobExistsDescription.viewJobLinkText', {\n                                        defaultMessage: 'View existing job'\n                                    })))),\n                            React.createElement(EuiSpacer, { size: \"m\" }))),\n                        !hasIndexPattern && (React.createElement(\"div\", null,\n                            React.createElement(EuiCallOut, { title: React.createElement(\"span\", null,\n                                    React.createElement(FormattedMessage, { id: \"xpack.apm.serviceDetails.enableAnomalyDetectionPanel.callout.noPatternTitle\", defaultMessage: \"No APM index pattern available. To create a job, please import the APM index pattern via the {setupInstructionLink}\", values: {\n                                            setupInstructionLink: (React.createElement(KibanaLink, { pathname: '/app/kibana', hash: \"/home/tutorial/apm\" }, i18n.translate('xpack.apm.serviceDetails.enableAnomalyDetectionPanel.callout.noPatternTitle.setupInstructionLinkText', {\n                                                defaultMessage: 'Setup Instructions'\n                                            })))\n                                        } })), color: \"warning\", iconType: \"alert\" }),\n                            React.createElement(EuiSpacer, { size: \"m\" }))),\n                        React.createElement(EuiText, null,\n                            React.createElement(\"p\", null,\n                                React.createElement(FormattedMessage, { id: \"xpack.apm.serviceDetails.enableAnomalyDetectionPanel.createMLJobDescription\", defaultMessage: \"Here you can create a machine learning job to calculate anomaly scores on durations for APM transactions\\n                        within the {serviceName} service. Once enabled, {transactionDurationGraphText} will show the expected bounds and annotate\\n                        the graph once the anomaly score is >=75.\", values: {\n                                        serviceName: serviceName,\n                                        transactionDurationGraphText: (React.createElement(\"b\", null, i18n.translate('xpack.apm.serviceDetails.enableAnomalyDetectionPanel.createMLJobDescription.transactionDurationGraphText', {\n                                            defaultMessage: 'the transaction duration graph'\n                                        })))\n                                    } })),\n                            React.createElement(\"p\", null,\n                                React.createElement(FormattedMessage, { id: \"xpack.apm.serviceDetails.enableAnomalyDetectionPanel.manageMLJobDescription\", defaultMessage: \"Jobs can be created for each service + transaction type combination.\\n                        Once a job is created, you can manage it and see more details in the {mlJobsPageLink}.\", values: {\n                                        mlJobsPageLink: (React.createElement(KibanaLink, { pathname: '/app/ml' }, i18n.translate('xpack.apm.serviceDetails.enableAnomalyDetectionPanel.manageMLJobDescription.mlJobsPageLinkText', {\n                                            defaultMessage: 'Machine Learning jobs management page'\n                                        })))\n                                    } }),\n                                ' ',\n                                React.createElement(\"em\", null, i18n.translate('xpack.apm.serviceDetails.enableAnomalyDetectionPanel.manageMLJobDescription.noteText', {\n                                    defaultMessage: 'Note: It might take a few minutes for the job to begin calculating results.'\n                                })))),\n                        React.createElement(EuiSpacer, null)),\n                    React.createElement(EuiFlyoutFooter, null,\n                        React.createElement(EuiFlexGroup, { justifyContent: \"spaceBetween\", alignItems: \"flexEnd\" },\n                            React.createElement(EuiFlexItem, null, _this.props.serviceTransactionTypes.length > 1 ? (React.createElement(TransactionSelect, { types: _this.props.serviceTransactionTypes, selected: _this.state.selectedTransactionType, existingJobs: data.jobs, onChange: function (value) {\n                                    return _this.setState({\n                                        selectedTransactionType: value\n                                    });\n                                } })) : null),\n                            React.createElement(EuiFlexItem, { grow: false },\n                                React.createElement(EuiFormRow, null,\n                                    React.createElement(EuiButton, { onClick: _this.createJob, fill: true, disabled: isLoading || hasMLJob || !hasIndexPattern }, i18n.translate('xpack.apm.serviceDetails.enableAnomalyDetectionPanel.createNewJobButtonLabel', {\n                                        defaultMessage: 'Create new job'\n                                    }))))))));\n            } }));\n    };\n    return MachineLearningFlyout;\n}(Component));\nexport { MachineLearningFlyout };\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/apm/public/components/app/ServiceDetails/ServiceIntegrations/MachineLearningFlyout.tsx","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/apm/public/components/app/ServiceDetails/ServiceIntegrations/MachineLearningFlyout.tsx"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport {\n  EuiButton,\n  EuiCallOut,\n  EuiFlexGroup,\n  EuiFlexItem,\n  EuiFlyout,\n  EuiFlyoutBody,\n  EuiFlyoutFooter,\n  EuiFlyoutHeader,\n  EuiFormRow,\n  EuiSpacer,\n  EuiText,\n  EuiTitle\n} from '@elastic/eui';\nimport { i18n } from '@kbn/i18n';\nimport { FormattedMessage } from '@kbn/i18n/react';\nimport { Location } from 'history';\nimport React, { Component } from 'react';\nimport { toastNotifications } from 'ui/notify';\nimport { KibanaLink } from 'x-pack/plugins/apm/public/components/shared/Links/KibanaLink';\nimport { MLJobLink } from 'x-pack/plugins/apm/public/components/shared/Links/MLJobLink';\nimport {\n  getMlPrefix,\n  startMLJob\n} from 'x-pack/plugins/apm/public/services/rest/ml';\nimport { getAPMIndexPattern } from 'x-pack/plugins/apm/public/services/rest/savedObjects';\nimport { MLJobsRequest } from 'x-pack/plugins/apm/public/store/reactReduxRequest/machineLearningJobs';\nimport { IUrlParams } from 'x-pack/plugins/apm/public/store/urlParams';\nimport { TransactionSelect } from './TransactionSelect';\n\ninterface FlyoutProps {\n  isOpen: boolean;\n  onClose: () => void;\n  urlParams: IUrlParams;\n  location: Location;\n  serviceTransactionTypes: string[];\n}\n\ninterface FlyoutState {\n  isLoading: boolean;\n  hasMLJob: boolean;\n  hasIndexPattern: boolean;\n  selectedTransactionType?: string;\n}\n\nexport class MachineLearningFlyout extends Component<FlyoutProps, FlyoutState> {\n  public state = {\n    isLoading: false,\n    hasIndexPattern: false,\n    hasMLJob: false,\n    selectedTransactionType: this.props.urlParams.transactionType\n  };\n\n  public async componentDidMount() {\n    const indexPattern = await getAPMIndexPattern();\n    this.setState({ hasIndexPattern: !!indexPattern });\n  }\n\n  public componentDidUpdate(prevProps: FlyoutProps) {\n    if (\n      prevProps.urlParams.transactionType !==\n      this.props.urlParams.transactionType\n    ) {\n      this.setState({\n        selectedTransactionType: this.props.urlParams.transactionType\n      });\n    }\n  }\n\n  public createJob = async () => {\n    this.setState({ isLoading: true });\n    try {\n      const { serviceName, transactionType } = this.props.urlParams;\n      if (serviceName) {\n        const res = await startMLJob({ serviceName, transactionType });\n        const didSucceed = res.datafeeds[0].success && res.jobs[0].success;\n        if (!didSucceed) {\n          throw new Error('Creating ML job failed');\n        }\n        this.addSuccessToast();\n      }\n    } catch (e) {\n      this.addErrorToast();\n    }\n\n    this.setState({ isLoading: false });\n    this.props.onClose();\n  };\n\n  public addErrorToast = () => {\n    const { urlParams } = this.props;\n    const { serviceName = 'unknown' } = urlParams;\n\n    if (!serviceName) {\n      return;\n    }\n\n    toastNotifications.addWarning({\n      title: i18n.translate(\n        'xpack.apm.serviceDetails.enableAnomalyDetectionPanel.jobCreationFailedNotificationTitle',\n        {\n          defaultMessage: 'Job creation failed'\n        }\n      ),\n      text: (\n        <p>\n          {i18n.translate(\n            'xpack.apm.serviceDetails.enableAnomalyDetectionPanel.jobCreationFailedNotificationText',\n            {\n              defaultMessage:\n                'Your current license may not allow for creating machine learning jobs, or this job may already exist.'\n            }\n          )}\n        </p>\n      )\n    });\n  };\n\n  public addSuccessToast = () => {\n    const { location, urlParams } = this.props;\n    const { serviceName = 'unknown', transactionType } = urlParams;\n\n    toastNotifications.addSuccess({\n      title: i18n.translate(\n        'xpack.apm.serviceDetails.enableAnomalyDetectionPanel.jobCreatedNotificationTitle',\n        {\n          defaultMessage: 'Job successfully created'\n        }\n      ),\n      text: (\n        <p>\n          {i18n.translate(\n            'xpack.apm.serviceDetails.enableAnomalyDetectionPanel.jobCreatedNotificationText',\n            {\n              defaultMessage:\n                'The analysis is now running for {serviceName} ({transactionType}). It might take a while before results are added to the response times graph.',\n              values: {\n                serviceName,\n                transactionType\n              }\n            }\n          )}{' '}\n          <MLJobLink\n            serviceName={serviceName}\n            transactionType={transactionType}\n            location={location}\n          >\n            {i18n.translate(\n              'xpack.apm.serviceDetails.enableAnomalyDetectionPanel.jobCreatedNotificationText.viewJobLinkText',\n              {\n                defaultMessage: 'View job'\n              }\n            )}\n          </MLJobLink>\n        </p>\n      )\n    });\n  };\n\n  public render() {\n    const { isOpen, onClose, urlParams, location } = this.props;\n    const { serviceName, transactionType } = urlParams;\n    const { isLoading, hasIndexPattern, selectedTransactionType } = this.state;\n\n    if (!isOpen || !serviceName) {\n      return null;\n    }\n\n    return (\n      <MLJobsRequest\n        serviceName={serviceName}\n        render={({ data, status }) => {\n          if (status === 'LOADING') {\n            return null;\n          }\n\n          const hasMLJob = data.jobs.some(\n            job =>\n              job.jobId &&\n              job.jobId.startsWith(\n                getMlPrefix(serviceName, selectedTransactionType)\n              )\n          );\n\n          return (\n            <EuiFlyout onClose={onClose} size=\"s\">\n              <EuiFlyoutHeader>\n                <EuiTitle>\n                  <h2>\n                    {i18n.translate(\n                      'xpack.apm.serviceDetails.enableAnomalyDetectionPanel.enableAnomalyDetectionTitle',\n                      {\n                        defaultMessage: 'Enable anomaly detection'\n                      }\n                    )}\n                  </h2>\n                </EuiTitle>\n                <EuiSpacer size=\"s\" />\n              </EuiFlyoutHeader>\n              <EuiFlyoutBody>\n                {hasMLJob && (\n                  <div>\n                    <EuiCallOut\n                      title={i18n.translate(\n                        'xpack.apm.serviceDetails.enableAnomalyDetectionPanel.callout.jobExistsTitle',\n                        {\n                          defaultMessage: 'Job already exists'\n                        }\n                      )}\n                      color=\"success\"\n                      iconType=\"check\"\n                    >\n                      <p>\n                        {i18n.translate(\n                          'xpack.apm.serviceDetails.enableAnomalyDetectionPanel.callout.jobExistsDescription',\n                          {\n                            defaultMessage:\n                              'There is currently a job running for {serviceName} ({transactionType}).',\n                            values: {\n                              serviceName,\n                              transactionType\n                            }\n                          }\n                        )}{' '}\n                        <MLJobLink\n                          serviceName={serviceName}\n                          transactionType={transactionType}\n                          location={location}\n                        >\n                          {i18n.translate(\n                            'xpack.apm.serviceDetails.enableAnomalyDetectionPanel.callout.jobExistsDescription.viewJobLinkText',\n                            {\n                              defaultMessage: 'View existing job'\n                            }\n                          )}\n                        </MLJobLink>\n                      </p>\n                    </EuiCallOut>\n                    <EuiSpacer size=\"m\" />\n                  </div>\n                )}\n\n                {!hasIndexPattern && (\n                  <div>\n                    <EuiCallOut\n                      title={\n                        <span>\n                          <FormattedMessage\n                            id=\"xpack.apm.serviceDetails.enableAnomalyDetectionPanel.callout.noPatternTitle\"\n                            defaultMessage=\"No APM index pattern available. To create a job, please import the APM index pattern via the {setupInstructionLink}\"\n                            values={{\n                              setupInstructionLink: (\n                                <KibanaLink\n                                  pathname={'/app/kibana'}\n                                  hash={`/home/tutorial/apm`}\n                                >\n                                  {i18n.translate(\n                                    'xpack.apm.serviceDetails.enableAnomalyDetectionPanel.callout.noPatternTitle.setupInstructionLinkText',\n                                    {\n                                      defaultMessage: 'Setup Instructions'\n                                    }\n                                  )}\n                                </KibanaLink>\n                              )\n                            }}\n                          />\n                        </span>\n                      }\n                      color=\"warning\"\n                      iconType=\"alert\"\n                    />\n                    <EuiSpacer size=\"m\" />\n                  </div>\n                )}\n\n                <EuiText>\n                  <p>\n                    <FormattedMessage\n                      id=\"xpack.apm.serviceDetails.enableAnomalyDetectionPanel.createMLJobDescription\"\n                      defaultMessage=\"Here you can create a machine learning job to calculate anomaly scores on durations for APM transactions\n                        within the {serviceName} service. Once enabled, {transactionDurationGraphText} will show the expected bounds and annotate\n                        the graph once the anomaly score is &gt;=75.\"\n                      values={{\n                        serviceName,\n                        transactionDurationGraphText: (\n                          <b>\n                            {i18n.translate(\n                              'xpack.apm.serviceDetails.enableAnomalyDetectionPanel.createMLJobDescription.transactionDurationGraphText',\n                              {\n                                defaultMessage: 'the transaction duration graph'\n                              }\n                            )}\n                          </b>\n                        )\n                      }}\n                    />\n                  </p>\n                  <p>\n                    <FormattedMessage\n                      id=\"xpack.apm.serviceDetails.enableAnomalyDetectionPanel.manageMLJobDescription\"\n                      defaultMessage=\"Jobs can be created for each service + transaction type combination.\n                        Once a job is created, you can manage it and see more details in the {mlJobsPageLink}.\"\n                      values={{\n                        mlJobsPageLink: (\n                          <KibanaLink pathname={'/app/ml'}>\n                            {i18n.translate(\n                              'xpack.apm.serviceDetails.enableAnomalyDetectionPanel.manageMLJobDescription.mlJobsPageLinkText',\n                              {\n                                defaultMessage:\n                                  'Machine Learning jobs management page'\n                              }\n                            )}\n                          </KibanaLink>\n                        )\n                      }}\n                    />{' '}\n                    <em>\n                      {i18n.translate(\n                        'xpack.apm.serviceDetails.enableAnomalyDetectionPanel.manageMLJobDescription.noteText',\n                        {\n                          defaultMessage:\n                            'Note: It might take a few minutes for the job to begin calculating results.'\n                        }\n                      )}\n                    </em>\n                  </p>\n                </EuiText>\n\n                <EuiSpacer />\n              </EuiFlyoutBody>\n              <EuiFlyoutFooter>\n                <EuiFlexGroup\n                  justifyContent=\"spaceBetween\"\n                  alignItems=\"flexEnd\"\n                >\n                  <EuiFlexItem>\n                    {this.props.serviceTransactionTypes.length > 1 ? (\n                      <TransactionSelect\n                        types={this.props.serviceTransactionTypes}\n                        selected={this.state.selectedTransactionType}\n                        existingJobs={data.jobs}\n                        onChange={value =>\n                          this.setState({\n                            selectedTransactionType: value\n                          })\n                        }\n                      />\n                    ) : null}\n                  </EuiFlexItem>\n                  <EuiFlexItem grow={false}>\n                    <EuiFormRow>\n                      <EuiButton\n                        onClick={this.createJob}\n                        fill\n                        disabled={isLoading || hasMLJob || !hasIndexPattern}\n                      >\n                        {i18n.translate(\n                          'xpack.apm.serviceDetails.enableAnomalyDetectionPanel.createNewJobButtonLabel',\n                          {\n                            defaultMessage: 'Create new job'\n                          }\n                        )}\n                      </EuiButton>\n                    </EuiFormRow>\n                  </EuiFlexItem>\n                </EuiFlexGroup>\n              </EuiFlyoutFooter>\n            </EuiFlyout>\n          );\n        }}\n      />\n    );\n  }\n}\n"]}]}