{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/pages/link_to/redirect_to_node_logs.tsx","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/pages/link_to/redirect_to_node_logs.tsx","mtime":1567631711986},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport * as tslib_1 from \"tslib\";\nimport { injectI18n } from '@kbn/i18n/react';\nimport compose from 'lodash/fp/compose';\nimport React from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { LoadingPage } from '../../components/loading_page';\nimport { replaceLogFilterInQueryString } from '../../containers/logs/with_log_filter';\nimport { replaceLogPositionInQueryString } from '../../containers/logs/with_log_position';\nimport { WithSource } from '../../containers/with_source';\nimport { getTimeFromLocation } from './query_params';\nexport var RedirectToNodeLogs = injectI18n(function (_a) {\n    var _b = _a.match.params, nodeId = _b.nodeId, nodeType = _b.nodeType, location = _a.location, intl = _a.intl;\n    return (React.createElement(WithSource, null, function (_a) {\n        var configuration = _a.configuration, isLoading = _a.isLoading;\n        if (isLoading) {\n            return (React.createElement(LoadingPage, { message: intl.formatMessage({\n                    id: 'xpack.infra.redirectToNodeLogs.loadingNodeLogsMessage',\n                    defaultMessage: 'Loading {nodeType} logs',\n                }, {\n                    nodeType: nodeType,\n                }) }));\n        }\n        if (!configuration) {\n            return null;\n        }\n        var searchString = compose(replaceLogFilterInQueryString(configuration.fields[nodeType] + \": \" + nodeId), replaceLogPositionInQueryString(getTimeFromLocation(location)))('');\n        return React.createElement(Redirect, { to: \"/logs?\" + searchString });\n    }));\n});\nexport var getNodeLogsUrl = function (_a) {\n    var nodeId = _a.nodeId, nodeType = _a.nodeType, time = _a.time;\n    return tslib_1.__spread([\"#/link-to/\" + nodeType + \"-logs/\", nodeId], (time ? [\"?time=\" + time] : [])).join('');\n};\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/pages/link_to/redirect_to_node_logs.tsx","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/pages/link_to/redirect_to_node_logs.tsx"],"names":[],"mappings":"AAAA;;;;GAIG;;AAEH,OAAO,EAAgB,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAC3D,OAAO,OAAO,MAAM,mBAAmB,CAAC;AACxC,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,QAAQ,EAAuB,MAAM,kBAAkB,CAAC;AAEjE,OAAO,EAAE,WAAW,EAAE,MAAM,+BAA+B,CAAC;AAC5D,OAAO,EAAE,6BAA6B,EAAE,MAAM,uCAAuC,CAAC;AACtF,OAAO,EAAE,+BAA+B,EAAE,MAAM,yCAAyC,CAAC;AAC1F,OAAO,EAAE,UAAU,EAAE,MAAM,8BAA8B,CAAC;AAE1D,OAAO,EAAE,mBAAmB,EAAE,MAAM,gBAAgB,CAAC;AAWrD,MAAM,CAAC,IAAM,kBAAkB,GAAG,UAAU,CAC1C,UAAC,EAMyB;QAJtB,oBAA4B,EAAlB,kBAAM,EAAE,sBAAQ,EAE5B,sBAAQ,EACR,cAAI;IACyB,OAAA,CAC7B,oBAAC,UAAU,QACR,UAAC,EAA4B;YAA1B,gCAAa,EAAE,wBAAS;QAC1B,IAAI,SAAS,EAAE;YACb,OAAO,CACL,oBAAC,WAAW,IACV,OAAO,EAAE,IAAI,CAAC,aAAa,CACzB;oBACE,EAAE,EAAE,uDAAuD;oBAC3D,cAAc,EAAE,yBAAyB;iBAC1C,EACD;oBACE,QAAQ,UAAA;iBACT,CACF,GACD,CACH,CAAC;SACH;QAED,IAAI,CAAC,aAAa,EAAE;YAClB,OAAO,IAAI,CAAC;SACb;QAED,IAAM,YAAY,GAAG,OAAO,CAC1B,6BAA6B,CAAI,aAAa,CAAC,MAAM,CAAC,QAAQ,CAAC,UAAK,MAAQ,CAAC,EAC7E,+BAA+B,CAAC,mBAAmB,CAAC,QAAQ,CAAC,CAAC,CAC/D,CAAC,EAAE,CAAC,CAAC;QAEN,OAAO,oBAAC,QAAQ,IAAC,EAAE,EAAE,WAAS,YAAc,GAAI,CAAC;IACnD,CAAC,CACU,CACd;AA/B8B,CA+B9B,CACF,CAAC;AAEF,MAAM,CAAC,IAAM,cAAc,GAAG,UAAC,EAQ9B;QAPC,kBAAM,EACN,sBAAQ,EACR,cAAI;IAKA,OAAA,kBAAC,eAAa,QAAQ,WAAQ,EAAE,MAAM,GAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,WAAS,IAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,EAAE,CAAC;AAApF,CAAoF,CAAC","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport { InjectedIntl, injectI18n } from '@kbn/i18n/react';\nimport compose from 'lodash/fp/compose';\nimport React from 'react';\nimport { Redirect, RouteComponentProps } from 'react-router-dom';\n\nimport { LoadingPage } from '../../components/loading_page';\nimport { replaceLogFilterInQueryString } from '../../containers/logs/with_log_filter';\nimport { replaceLogPositionInQueryString } from '../../containers/logs/with_log_position';\nimport { WithSource } from '../../containers/with_source';\nimport { InfraNodeType } from '../../graphql/types';\nimport { getTimeFromLocation } from './query_params';\n\ntype RedirectToNodeLogsType = RouteComponentProps<{\n  nodeId: string;\n  nodeType: InfraNodeType;\n}>;\n\ninterface RedirectToNodeLogsProps extends RedirectToNodeLogsType {\n  intl: InjectedIntl;\n}\n\nexport const RedirectToNodeLogs = injectI18n(\n  ({\n    match: {\n      params: { nodeId, nodeType },\n    },\n    location,\n    intl,\n  }: RedirectToNodeLogsProps) => (\n    <WithSource>\n      {({ configuration, isLoading }) => {\n        if (isLoading) {\n          return (\n            <LoadingPage\n              message={intl.formatMessage(\n                {\n                  id: 'xpack.infra.redirectToNodeLogs.loadingNodeLogsMessage',\n                  defaultMessage: 'Loading {nodeType} logs',\n                },\n                {\n                  nodeType,\n                }\n              )}\n            />\n          );\n        }\n\n        if (!configuration) {\n          return null;\n        }\n\n        const searchString = compose(\n          replaceLogFilterInQueryString(`${configuration.fields[nodeType]}: ${nodeId}`),\n          replaceLogPositionInQueryString(getTimeFromLocation(location))\n        )('');\n\n        return <Redirect to={`/logs?${searchString}`} />;\n      }}\n    </WithSource>\n  )\n);\n\nexport const getNodeLogsUrl = ({\n  nodeId,\n  nodeType,\n  time,\n}: {\n  nodeId: string;\n  nodeType: InfraNodeType;\n  time?: number;\n}) => [`#/link-to/${nodeType}-logs/`, nodeId, ...(time ? [`?time=${time}`] : [])].join('');\n"]}]}