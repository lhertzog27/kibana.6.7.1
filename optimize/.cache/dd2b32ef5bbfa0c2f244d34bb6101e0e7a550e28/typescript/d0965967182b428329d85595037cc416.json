{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/src/legacy/core_plugins/kibana/public/dashboard/actions/embeddables.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/legacy/core_plugins/kibana/public/dashboard/actions/embeddables.ts","mtime":1567631711541},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport * as tslib_1 from \"tslib\";\nimport _ from 'lodash';\nimport { createAction } from 'redux-actions';\nimport { getEmbeddableCustomization, getPanel } from '../../selectors';\nimport { updatePanel } from './panels';\nexport var EmbeddableActionTypeKeys;\n(function (EmbeddableActionTypeKeys) {\n    EmbeddableActionTypeKeys[\"EMBEDDABLE_IS_INITIALIZING\"] = \"EMBEDDABLE_IS_INITIALIZING\";\n    EmbeddableActionTypeKeys[\"EMBEDDABLE_IS_INITIALIZED\"] = \"EMBEDDABLE_IS_INITIALIZED\";\n    EmbeddableActionTypeKeys[\"SET_STAGED_FILTER\"] = \"SET_STAGED_FILTER\";\n    EmbeddableActionTypeKeys[\"CLEAR_STAGED_FILTERS\"] = \"CLEAR_STAGED_FILTERS\";\n    EmbeddableActionTypeKeys[\"EMBEDDABLE_ERROR\"] = \"EMBEDDABLE_ERROR\";\n    EmbeddableActionTypeKeys[\"REQUEST_RELOAD\"] = \"REQUEST_RELOAD\";\n})(EmbeddableActionTypeKeys || (EmbeddableActionTypeKeys = {}));\nexport var embeddableIsInitializing = createAction(EmbeddableActionTypeKeys.EMBEDDABLE_IS_INITIALIZING);\nexport var embeddableIsInitialized = createAction(EmbeddableActionTypeKeys.EMBEDDABLE_IS_INITIALIZED);\nexport var setStagedFilter = createAction(EmbeddableActionTypeKeys.SET_STAGED_FILTER);\nexport var clearStagedFilters = createAction(EmbeddableActionTypeKeys.CLEAR_STAGED_FILTERS);\nexport var embeddableError = createAction(EmbeddableActionTypeKeys.EMBEDDABLE_ERROR);\nexport var requestReload = createAction(EmbeddableActionTypeKeys.REQUEST_RELOAD);\n/**\n * The main point of communication from the embeddable to the dashboard. Any time state in the embeddable\n * changes, this function will be called. The data is then extracted from EmbeddableState and stored in\n * redux so the appropriate actions are taken and UI updated.\n *\n * @param changeData.panelId - the id of the panel whose state has changed.\n * @param changeData.embeddableState - the new state of the embeddable.\n */\nexport function embeddableStateChanged(changeData) {\n    var panelId = changeData.panelId, embeddableState = changeData.embeddableState;\n    return function (dispatch, getState) {\n        // Translate embeddableState to things redux cares about.\n        var customization = getEmbeddableCustomization(getState(), panelId);\n        if (!_.isEqual(embeddableState.customization, customization)) {\n            var originalPanelState = getPanel(getState(), panelId);\n            var newPanelState = tslib_1.__assign({}, originalPanelState, { embeddableConfig: _.cloneDeep(embeddableState.customization) });\n            dispatch(updatePanel(newPanelState));\n        }\n        if (embeddableState.stagedFilter) {\n            dispatch(setStagedFilter({ stagedFilter: embeddableState.stagedFilter, panelId: panelId }));\n        }\n    };\n}\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/src/legacy/core_plugins/kibana/public/dashboard/actions/embeddables.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/src/legacy/core_plugins/kibana/public/dashboard/actions/embeddables.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;GAiBG;;AAEH,OAAO,CAAC,MAAM,QAAQ,CAAC;AACvB,OAAO,EAAE,YAAY,EAAE,MAAM,eAAe,CAAC;AAC7C,OAAO,EAAE,0BAA0B,EAAE,QAAQ,EAAE,MAAM,iBAAiB,CAAC;AAEvE,OAAO,EAAE,WAAW,EAAE,MAAM,UAAU,CAAC;AAKvC,MAAM,CAAN,IAAY,wBAOX;AAPD,WAAY,wBAAwB;IAClC,qFAAyD,CAAA;IACzD,mFAAuD,CAAA;IACvD,mEAAuC,CAAA;IACvC,yEAA6C,CAAA;IAC7C,iEAAqC,CAAA;IACrC,6DAAiC,CAAA;AACnC,CAAC,EAPW,wBAAwB,KAAxB,wBAAwB,QAOnC;AA4CD,MAAM,CAAC,IAAM,wBAAwB,GAAG,YAAY,CAClD,wBAAwB,CAAC,0BAA0B,CACpD,CAAC;AACF,MAAM,CAAC,IAAM,uBAAuB,GAAG,YAAY,CACjD,wBAAwB,CAAC,yBAAyB,CACnD,CAAC;AACF,MAAM,CAAC,IAAM,eAAe,GAAG,YAAY,CACzC,wBAAwB,CAAC,iBAAiB,CAC3C,CAAC;AACF,MAAM,CAAC,IAAM,kBAAkB,GAAG,YAAY,CAAC,wBAAwB,CAAC,oBAAoB,CAAC,CAAC;AAC9F,MAAM,CAAC,IAAM,eAAe,GAAG,YAAY,CACzC,wBAAwB,CAAC,gBAAgB,CAC1C,CAAC;AAEF,MAAM,CAAC,IAAM,aAAa,GAAG,YAAY,CAAC,wBAAwB,CAAC,cAAc,CAAC,CAAC;AAEnF;;;;;;;GAOG;AACH,MAAM,UAAU,sBAAsB,CAAC,UAGtC;IACS,IAAA,4BAAO,EAAE,4CAAe,CAAgB;IAChD,OAAO,UAAC,QAAQ,EAAE,QAAQ;QACxB,yDAAyD;QACzD,IAAM,aAAa,GAAG,0BAA0B,CAAC,QAAQ,EAAE,EAAE,OAAO,CAAC,CAAC;QACtE,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,eAAe,CAAC,aAAa,EAAE,aAAa,CAAC,EAAE;YAC5D,IAAM,kBAAkB,GAAG,QAAQ,CAAC,QAAQ,EAAE,EAAE,OAAO,CAAC,CAAC;YACzD,IAAM,aAAa,wBACd,kBAAkB,IACrB,gBAAgB,EAAE,CAAC,CAAC,SAAS,CAAC,eAAe,CAAC,aAAa,CAAC,GAC7D,CAAC;YACF,QAAQ,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC,CAAC;SACtC;QAED,IAAI,eAAe,CAAC,YAAY,EAAE;YAChC,QAAQ,CAAC,eAAe,CAAC,EAAE,YAAY,EAAE,eAAe,CAAC,YAAY,EAAE,OAAO,SAAA,EAAE,CAAC,CAAC,CAAC;SACpF;IACH,CAAC,CAAC;AACJ,CAAC","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport _ from 'lodash';\nimport { createAction } from 'redux-actions';\nimport { getEmbeddableCustomization, getPanel } from '../../selectors';\nimport { PanelId, PanelState } from '../selectors';\nimport { updatePanel } from './panels';\n\nimport { EmbeddableMetadata, EmbeddableState } from 'ui/embeddable';\nimport { KibanaAction, KibanaThunk } from '../../selectors/types';\n\nexport enum EmbeddableActionTypeKeys {\n  EMBEDDABLE_IS_INITIALIZING = 'EMBEDDABLE_IS_INITIALIZING',\n  EMBEDDABLE_IS_INITIALIZED = 'EMBEDDABLE_IS_INITIALIZED',\n  SET_STAGED_FILTER = 'SET_STAGED_FILTER',\n  CLEAR_STAGED_FILTERS = 'CLEAR_STAGED_FILTERS',\n  EMBEDDABLE_ERROR = 'EMBEDDABLE_ERROR',\n  REQUEST_RELOAD = 'REQUEST_RELOAD',\n}\n\nexport interface EmbeddableIsInitializingAction\n  extends KibanaAction<EmbeddableActionTypeKeys.EMBEDDABLE_IS_INITIALIZING, PanelId> {}\n\nexport interface EmbeddableIsInitializedActionPayload {\n  panelId: PanelId;\n  metadata: EmbeddableMetadata;\n}\n\nexport interface EmbeddableIsInitializedAction\n  extends KibanaAction<\n    EmbeddableActionTypeKeys.EMBEDDABLE_IS_INITIALIZED,\n    EmbeddableIsInitializedActionPayload\n  > {}\n\nexport interface SetStagedFilterActionPayload {\n  panelId: PanelId;\n  stagedFilter: object;\n}\n\nexport interface SetStagedFilterAction\n  extends KibanaAction<EmbeddableActionTypeKeys.SET_STAGED_FILTER, SetStagedFilterActionPayload> {}\n\nexport interface ClearStagedFiltersAction\n  extends KibanaAction<EmbeddableActionTypeKeys.CLEAR_STAGED_FILTERS, undefined> {}\nexport interface RequestReload\n  extends KibanaAction<EmbeddableActionTypeKeys.REQUEST_RELOAD, undefined> {}\n\nexport interface EmbeddableErrorActionPayload {\n  error: string | object;\n  panelId: PanelId;\n}\n\nexport interface EmbeddableErrorAction\n  extends KibanaAction<EmbeddableActionTypeKeys.EMBEDDABLE_ERROR, EmbeddableErrorActionPayload> {}\n\nexport type EmbeddableActions =\n  | EmbeddableIsInitializingAction\n  | EmbeddableIsInitializedAction\n  | ClearStagedFiltersAction\n  | SetStagedFilterAction\n  | EmbeddableErrorAction;\n\nexport const embeddableIsInitializing = createAction<PanelId>(\n  EmbeddableActionTypeKeys.EMBEDDABLE_IS_INITIALIZING\n);\nexport const embeddableIsInitialized = createAction<EmbeddableIsInitializedActionPayload>(\n  EmbeddableActionTypeKeys.EMBEDDABLE_IS_INITIALIZED\n);\nexport const setStagedFilter = createAction<SetStagedFilterActionPayload>(\n  EmbeddableActionTypeKeys.SET_STAGED_FILTER\n);\nexport const clearStagedFilters = createAction(EmbeddableActionTypeKeys.CLEAR_STAGED_FILTERS);\nexport const embeddableError = createAction<EmbeddableErrorActionPayload>(\n  EmbeddableActionTypeKeys.EMBEDDABLE_ERROR\n);\n\nexport const requestReload = createAction(EmbeddableActionTypeKeys.REQUEST_RELOAD);\n\n/**\n * The main point of communication from the embeddable to the dashboard. Any time state in the embeddable\n * changes, this function will be called. The data is then extracted from EmbeddableState and stored in\n * redux so the appropriate actions are taken and UI updated.\n *\n * @param changeData.panelId - the id of the panel whose state has changed.\n * @param changeData.embeddableState - the new state of the embeddable.\n */\nexport function embeddableStateChanged(changeData: {\n  panelId: PanelId;\n  embeddableState: EmbeddableState;\n}): KibanaThunk {\n  const { panelId, embeddableState } = changeData;\n  return (dispatch, getState) => {\n    // Translate embeddableState to things redux cares about.\n    const customization = getEmbeddableCustomization(getState(), panelId);\n    if (!_.isEqual(embeddableState.customization, customization)) {\n      const originalPanelState = getPanel(getState(), panelId);\n      const newPanelState: PanelState = {\n        ...originalPanelState,\n        embeddableConfig: _.cloneDeep(embeddableState.customization),\n      };\n      dispatch(updatePanel(newPanelState));\n    }\n\n    if (embeddableState.stagedFilter) {\n      dispatch(setStagedFilter({ stagedFilter: embeddableState.stagedFilter, panelId }));\n    }\n  };\n}\n"]}]}