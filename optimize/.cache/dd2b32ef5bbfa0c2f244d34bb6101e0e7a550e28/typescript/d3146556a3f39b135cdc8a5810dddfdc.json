{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/src/ui/public/utils/memoize.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/utils/memoize.ts","mtime":1567631711765},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n// A symbol expressing, that the memoized function has never been called\nvar neverCalled = Symbol();\n/**\n * A simple memoize function, that only stores the last returned value\n * and uses the identity of all passed parameters as a cache key.\n */\nfunction memoizeLast(func) {\n    var prevCall = neverCalled;\n    // We need to use a `function` here for proper this passing.\n    // tslint:disable-next-line:only-arrow-functions\n    var memoizedFunction = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if (prevCall !== neverCalled &&\n            prevCall.this === this &&\n            prevCall.args.length === args.length &&\n            prevCall.args.every(function (arg, index) { return arg === args[index]; })) {\n            return prevCall.returnValue;\n        }\n        prevCall = {\n            args: args,\n            this: this,\n            returnValue: func.apply(this, args),\n        };\n        return prevCall.returnValue;\n    };\n    return memoizedFunction;\n}\nexport { memoizeLast };\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/src/ui/public/utils/memoize.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/src/ui/public/utils/memoize.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;GAiBG;AAQH,wEAAwE;AACxE,IAAM,WAAW,GAAkB,MAAM,EAAE,CAAC;AAG5C;;;GAGG;AACH,SAAS,WAAW,CAAoC,IAAO;IAC7D,IAAI,QAAQ,GAA+B,WAAW,CAAC;IAEvD,4DAA4D;IAC5D,gDAAgD;IAChD,IAAM,gBAAgB,GAAG;QAAoB,cAAc;aAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;YAAd,yBAAc;;QACzD,IACE,QAAQ,KAAK,WAAW;YACxB,QAAQ,CAAC,IAAI,KAAK,IAAI;YACtB,QAAQ,CAAC,IAAI,CAAC,MAAM,KAAK,IAAI,CAAC,MAAM;YACpC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,UAAC,GAAG,EAAE,KAAK,IAAK,OAAA,GAAG,KAAK,IAAI,CAAC,KAAK,CAAC,EAAnB,CAAmB,CAAC,EACxD;YACA,OAAO,QAAQ,CAAC,WAAW,CAAC;SAC7B;QAED,QAAQ,GAAG;YACT,IAAI,MAAA;YACJ,IAAI,EAAE,IAAI;YACV,WAAW,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC;SACpC,CAAC;QAEF,OAAO,QAAQ,CAAC,WAAW,CAAC;IAC9B,CAAM,CAAC;IAEP,OAAO,gBAAgB,CAAC;AAC1B,CAAC;AAED,OAAO,EAAE,WAAW,EAAE,CAAC","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\ninterface MemoizedCall {\n  args: any[];\n  returnValue: any;\n  this: any;\n}\n\n// A symbol expressing, that the memoized function has never been called\nconst neverCalled: unique symbol = Symbol();\ntype NeverCalled = typeof neverCalled;\n\n/**\n * A simple memoize function, that only stores the last returned value\n * and uses the identity of all passed parameters as a cache key.\n */\nfunction memoizeLast<T extends (...args: any[]) => any>(func: T): T {\n  let prevCall: MemoizedCall | NeverCalled = neverCalled;\n\n  // We need to use a `function` here for proper this passing.\n  // tslint:disable-next-line:only-arrow-functions\n  const memoizedFunction = function(this: any, ...args: any[]) {\n    if (\n      prevCall !== neverCalled &&\n      prevCall.this === this &&\n      prevCall.args.length === args.length &&\n      prevCall.args.every((arg, index) => arg === args[index])\n    ) {\n      return prevCall.returnValue;\n    }\n\n    prevCall = {\n      args,\n      this: this,\n      returnValue: func.apply(this, args),\n    };\n\n    return prevCall.returnValue;\n  } as T;\n\n  return memoizedFunction;\n}\n\nexport { memoizeLast };\n"]}]}