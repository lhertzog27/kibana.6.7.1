{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/containers/logs/with_stream_items.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/containers/logs/with_stream_items.ts","mtime":1567631711983},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\nimport { logEntriesActions, logEntriesSelectors, logPositionSelectors } from '../../store';\nimport { asChildFunctionRenderer } from '../../utils/typed_react';\nimport { bindPlainActionCreators } from '../../utils/typed_redux';\nexport var withStreamItems = connect(function (state) { return ({\n    isReloading: logEntriesSelectors.selectIsReloadingEntries(state),\n    isLoadingMore: logEntriesSelectors.selectIsLoadingMoreEntries(state),\n    hasMoreBeforeStart: logEntriesSelectors.selectHasMoreBeforeStart(state),\n    hasMoreAfterEnd: logEntriesSelectors.selectHasMoreAfterEnd(state),\n    lastLoadedTime: logEntriesSelectors.selectEntriesLastLoadedTime(state),\n    items: selectItems(state),\n}); }, bindPlainActionCreators({\n    loadNewerEntries: logEntriesActions.loadNewerEntries,\n}));\nexport var WithStreamItems = asChildFunctionRenderer(withStreamItems);\nvar selectItems = createSelector(logEntriesSelectors.selectEntries, logEntriesSelectors.selectIsReloadingEntries, logPositionSelectors.selectIsAutoReloading, \n// searchResultsSelectors.selectSearchResultsById,\nfunction (logEntries, isReloading, isAutoReloading /*, searchResults*/) {\n    return isReloading && !isAutoReloading\n        ? []\n        : logEntries.map(function (logEntry) {\n            return createLogEntryStreamItem(logEntry /*, searchResults[logEntry.gid] || null*/);\n        });\n});\nvar createLogEntryStreamItem = function (logEntry, searchResult) { return ({\n    kind: 'logEntry',\n    logEntry: {\n        gid: logEntry.gid,\n        origin: {\n            id: logEntry.gid,\n            index: '',\n            type: '',\n        },\n        fields: {\n            time: logEntry.key.time,\n            tiebreaker: logEntry.key.tiebreaker,\n            message: logEntry.message.map(formatMessageSegment).join(''),\n        },\n    },\n    searchResult: searchResult,\n}); };\nvar formatMessageSegment = function (messageSegment) {\n    return messageSegment.__typename === 'InfraLogMessageFieldSegment'\n        ? messageSegment.value\n        : messageSegment.__typename === 'InfraLogMessageConstantSegment'\n            ? messageSegment.constant\n            : 'failed to format message';\n};\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/containers/logs/with_stream_items.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/containers/logs/with_stream_items.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAEH,OAAO,EAAE,OAAO,EAAE,MAAM,aAAa,CAAC;AACtC,OAAO,EAAE,cAAc,EAAE,MAAM,UAAU,CAAC;AAG1C,OAAO,EAAE,iBAAiB,EAAE,mBAAmB,EAAE,oBAAoB,EAAS,MAAM,aAAa,CAAC;AAElG,OAAO,EAAE,uBAAuB,EAAE,MAAM,yBAAyB,CAAC;AAClE,OAAO,EAAE,uBAAuB,EAAE,MAAM,yBAAyB,CAAC;AAElE,MAAM,CAAC,IAAM,eAAe,GAAG,OAAO,CACpC,UAAC,KAAY,IAAK,OAAA,CAAC;IACjB,WAAW,EAAE,mBAAmB,CAAC,wBAAwB,CAAC,KAAK,CAAC;IAChE,aAAa,EAAE,mBAAmB,CAAC,0BAA0B,CAAC,KAAK,CAAC;IACpE,kBAAkB,EAAE,mBAAmB,CAAC,wBAAwB,CAAC,KAAK,CAAC;IACvE,eAAe,EAAE,mBAAmB,CAAC,qBAAqB,CAAC,KAAK,CAAC;IACjE,cAAc,EAAE,mBAAmB,CAAC,2BAA2B,CAAC,KAAK,CAAC;IACtE,KAAK,EAAE,WAAW,CAAC,KAAK,CAAC;CAC1B,CAAC,EAPgB,CAOhB,EACF,uBAAuB,CAAC;IACtB,gBAAgB,EAAE,iBAAiB,CAAC,gBAAgB;CACrD,CAAC,CACH,CAAC;AAEF,MAAM,CAAC,IAAM,eAAe,GAAG,uBAAuB,CAAC,eAAe,CAAC,CAAC;AAExE,IAAM,WAAW,GAAG,cAAc,CAChC,mBAAmB,CAAC,aAAa,EACjC,mBAAmB,CAAC,wBAAwB,EAC5C,oBAAoB,CAAC,qBAAqB;AAC1C,kDAAkD;AAClD,UAAC,UAAU,EAAE,WAAW,EAAE,eAAe,CAAC,mBAAmB;IAC3D,OAAA,WAAW,IAAI,CAAC,eAAe;QAC7B,CAAC,CAAC,EAAE;QACJ,CAAC,CAAC,UAAU,CAAC,GAAG,CAAC,UAAA,QAAQ;YACrB,OAAA,wBAAwB,CAAC,QAAQ,CAAC,yCAAyC,CAAC;QAA5E,CAA4E,CAC7E;AAJL,CAIK,CACR,CAAC;AAEF,IAAM,wBAAwB,GAAG,UAAC,QAAkB,EAAE,YAA2B,IAAK,OAAA,CAAC;IACrF,IAAI,EAAE,UAAwB;IAC9B,QAAQ,EAAE;QACR,GAAG,EAAE,QAAQ,CAAC,GAAG;QACjB,MAAM,EAAE;YACN,EAAE,EAAE,QAAQ,CAAC,GAAG;YAChB,KAAK,EAAE,EAAE;YACT,IAAI,EAAE,EAAE;SACT;QACD,MAAM,EAAE;YACN,IAAI,EAAE,QAAQ,CAAC,GAAG,CAAC,IAAI;YACvB,UAAU,EAAE,QAAQ,CAAC,GAAG,CAAC,UAAU;YACnC,OAAO,EAAE,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC;SAC7D;KACF;IACD,YAAY,cAAA;CACb,CAAC,EAhBoF,CAgBpF,CAAC;AAEH,IAAM,oBAAoB,GAAG,UAAC,cAAsC;IAClE,OAAA,cAAc,CAAC,UAAU,KAAK,6BAA6B;QACzD,CAAC,CAAC,cAAc,CAAC,KAAK;QACtB,CAAC,CAAC,cAAc,CAAC,UAAU,KAAK,gCAAgC;YAChE,CAAC,CAAC,cAAc,CAAC,QAAQ;YACzB,CAAC,CAAC,0BAA0B;AAJ9B,CAI8B,CAAC","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\n\nimport { SearchResult } from '../../../common/log_search_result';\nimport { logEntriesActions, logEntriesSelectors, logPositionSelectors, State } from '../../store';\nimport { LogEntry, LogEntryMessageSegment } from '../../utils/log_entry';\nimport { asChildFunctionRenderer } from '../../utils/typed_react';\nimport { bindPlainActionCreators } from '../../utils/typed_redux';\n\nexport const withStreamItems = connect(\n  (state: State) => ({\n    isReloading: logEntriesSelectors.selectIsReloadingEntries(state),\n    isLoadingMore: logEntriesSelectors.selectIsLoadingMoreEntries(state),\n    hasMoreBeforeStart: logEntriesSelectors.selectHasMoreBeforeStart(state),\n    hasMoreAfterEnd: logEntriesSelectors.selectHasMoreAfterEnd(state),\n    lastLoadedTime: logEntriesSelectors.selectEntriesLastLoadedTime(state),\n    items: selectItems(state),\n  }),\n  bindPlainActionCreators({\n    loadNewerEntries: logEntriesActions.loadNewerEntries,\n  })\n);\n\nexport const WithStreamItems = asChildFunctionRenderer(withStreamItems);\n\nconst selectItems = createSelector(\n  logEntriesSelectors.selectEntries,\n  logEntriesSelectors.selectIsReloadingEntries,\n  logPositionSelectors.selectIsAutoReloading,\n  // searchResultsSelectors.selectSearchResultsById,\n  (logEntries, isReloading, isAutoReloading /*, searchResults*/) =>\n    isReloading && !isAutoReloading\n      ? []\n      : logEntries.map(logEntry =>\n          createLogEntryStreamItem(logEntry /*, searchResults[logEntry.gid] || null*/)\n        )\n);\n\nconst createLogEntryStreamItem = (logEntry: LogEntry, searchResult?: SearchResult) => ({\n  kind: 'logEntry' as 'logEntry',\n  logEntry: {\n    gid: logEntry.gid,\n    origin: {\n      id: logEntry.gid,\n      index: '',\n      type: '',\n    },\n    fields: {\n      time: logEntry.key.time,\n      tiebreaker: logEntry.key.tiebreaker,\n      message: logEntry.message.map(formatMessageSegment).join(''),\n    },\n  },\n  searchResult,\n});\n\nconst formatMessageSegment = (messageSegment: LogEntryMessageSegment): string =>\n  messageSegment.__typename === 'InfraLogMessageFieldSegment'\n    ? messageSegment.value\n    : messageSegment.__typename === 'InfraLogMessageConstantSegment'\n    ? messageSegment.constant\n    : 'failed to format message';\n"]}]}