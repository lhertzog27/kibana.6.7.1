{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/reporting/public/lib/reporting_client.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/reporting/public/lib/reporting_client.ts","mtime":1567631712281},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport * as tslib_1 from \"tslib\";\nimport { kfetch } from 'ui/kfetch';\n// @ts-ignore\nimport rison from 'rison-node';\nimport chrome from 'ui/chrome';\nimport { QueryString } from 'ui/utils/query_string';\nimport { jobCompletionNotifications } from './job_completion_notifications';\nvar API_BASE_URL = '/api/reporting/generate';\nvar ReportingClient = /** @class */ (function () {\n    function ReportingClient() {\n        var _this = this;\n        this.getReportingJobPath = function (exportType, jobParams) {\n            return chrome.addBasePath(API_BASE_URL) + \"/\" + exportType + \"?\" + QueryString.param('jobParams', rison.encode(jobParams));\n        };\n        this.createReportingJob = function (exportType, jobParams) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n            var query, resp;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        query = {\n                            jobParams: rison.encode(jobParams),\n                        };\n                        return [4 /*yield*/, kfetch({ method: 'POST', pathname: API_BASE_URL + \"/\" + exportType, query: query })];\n                    case 1:\n                        resp = _a.sent();\n                        jobCompletionNotifications.add(resp.job.id);\n                        return [2 /*return*/, resp];\n                }\n            });\n        }); };\n    }\n    return ReportingClient;\n}());\nexport var reportingClient = new ReportingClient();\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/reporting/public/lib/reporting_client.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/reporting/public/lib/reporting_client.ts"],"names":[],"mappings":"AAAA;;;;GAIG;;AAEH,OAAO,EAAE,MAAM,EAAE,MAAM,WAAW,CAAC;AAEnC,aAAa;AACb,OAAO,KAAK,MAAM,YAAY,CAAC;AAC/B,OAAO,MAAM,MAAM,WAAW,CAAC;AAC/B,OAAO,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAC;AACpD,OAAO,EAAE,0BAA0B,EAAE,MAAM,gCAAgC,CAAC;AAE5E,IAAM,YAAY,GAAG,yBAAyB,CAAC;AAM/C;IAAA;QAAA,iBAgBC;QAfQ,wBAAmB,GAAG,UAAC,UAAkB,EAAE,SAAoB;YACpE,OAAU,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,SAAI,UAAU,SAAI,WAAW,CAAC,KAAK,CAC3E,WAAW,EACX,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,CACtB,CAAC;QACN,CAAC,CAAC;QAEK,uBAAkB,GAAG,UAAO,UAAkB,EAAE,SAAc;;;;;wBAC7D,KAAK,GAAG;4BACZ,SAAS,EAAE,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC;yBACnC,CAAC;wBACW,qBAAM,MAAM,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAK,YAAY,SAAI,UAAY,EAAE,KAAK,OAAA,EAAE,CAAC,EAAA;;wBAAzF,IAAI,GAAG,SAAkF;wBAC/F,0BAA0B,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;wBAC5C,sBAAO,IAAI,EAAC;;;aACb,CAAC;IACJ,CAAC;IAAD,sBAAC;AAAD,CAAC,AAhBD,IAgBC;AAED,MAAM,CAAC,IAAM,eAAe,GAAG,IAAI,eAAe,EAAE,CAAC","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport { kfetch } from 'ui/kfetch';\n\n// @ts-ignore\nimport rison from 'rison-node';\nimport chrome from 'ui/chrome';\nimport { QueryString } from 'ui/utils/query_string';\nimport { jobCompletionNotifications } from './job_completion_notifications';\n\nconst API_BASE_URL = '/api/reporting/generate';\n\ninterface JobParams {\n  [paramName: string]: any;\n}\n\nclass ReportingClient {\n  public getReportingJobPath = (exportType: string, jobParams: JobParams) => {\n    return `${chrome.addBasePath(API_BASE_URL)}/${exportType}?${QueryString.param(\n      'jobParams',\n      rison.encode(jobParams)\n    )}`;\n  };\n\n  public createReportingJob = async (exportType: string, jobParams: any) => {\n    const query = {\n      jobParams: rison.encode(jobParams),\n    };\n    const resp = await kfetch({ method: 'POST', pathname: `${API_BASE_URL}/${exportType}`, query });\n    jobCompletionNotifications.add(resp.job.id);\n    return resp;\n  };\n}\n\nexport const reportingClient = new ReportingClient();\n"]}]}