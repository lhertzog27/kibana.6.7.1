{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/src/ui/public/embeddable/context_menu_actions/context_menu_action.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/embeddable/context_menu_actions/context_menu_action.ts","mtime":1567631711721},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["var ContextMenuAction = /** @class */ (function () {\n    /**\n     *\n     * @param {string} config.id\n     * @param {string} config.displayName\n     * @param {string} config.parentPanelId - set if this action belongs on a nested child panel\n     * @param {function} options.onClick\n     * @param {ContextMenuPanel} options.childContextMenuPanel - optional child panel to open when clicked.\n     * @param {function} options.isDisabled - optionally set a custom disabled function\n     * @param {function} options.isVisible - optionally set a custom isVisible function\n     * @param {function} options.getHref\n     * @param {Element} options.icon\n     */\n    function ContextMenuAction(config, options) {\n        if (options === void 0) { options = {}; }\n        this.id = config.id;\n        this.displayName = config.displayName;\n        this.parentPanelId = config.parentPanelId;\n        this.icon = options.icon;\n        this.childContextMenuPanel = options.childContextMenuPanel;\n        if ('onClick' in options) {\n            this.onClick = options.onClick;\n        }\n        if (options.isDisabled) {\n            this.isDisabled = options.isDisabled;\n        }\n        if (options.isVisible) {\n            this.isVisible = options.isVisible;\n        }\n        if ('getHref' in options) {\n            this.getHref = options.getHref;\n        }\n    }\n    /**\n     * Whether this action should be visible based on the parameters given.  Defaults to always visible.\n     * @param {PanelActionAPI} panelActionAPI\n     * @return {boolean}\n     */\n    ContextMenuAction.prototype.isVisible = function (panelActionAPI) {\n        return true;\n    };\n    /**\n     * Whether this action should be disabled based on the parameters given. Defaults to always enabled.\n     * @param {PanelActionAPI} panelActionAPI\n     */\n    ContextMenuAction.prototype.isDisabled = function (panelActionAPI) {\n        return false;\n    };\n    return ContextMenuAction;\n}());\nexport { ContextMenuAction };\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/src/ui/public/embeddable/context_menu_actions/context_menu_action.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/src/ui/public/embeddable/context_menu_actions/context_menu_action.ts"],"names":[],"mappings":"AAkFA;IAiCE;;;;;;;;;;;OAWG;IACH,2BACE,MAAgC,EAChC,OAA+D;QAA/D,wBAAA,EAAA,YAA+D;QAE/D,IAAI,CAAC,EAAE,GAAG,MAAM,CAAC,EAAE,CAAC;QACpB,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC,WAAW,CAAC;QACtC,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC,aAAa,CAAC;QAE1C,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;QACzB,IAAI,CAAC,qBAAqB,GAAG,OAAO,CAAC,qBAAqB,CAAC;QAE3D,IAAI,SAAS,IAAI,OAAO,EAAE;YACxB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;SAChC;QAED,IAAI,OAAO,CAAC,UAAU,EAAE;YACtB,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC;SACtC;QAED,IAAI,OAAO,CAAC,SAAS,EAAE;YACrB,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC;SACpC;QAED,IAAI,SAAS,IAAI,OAAO,EAAE;YACxB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;SAChC;IACH,CAAC;IAED;;;;OAIG;IACI,qCAAS,GAAhB,UAAiB,cAA8B;QAC7C,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;OAGG;IACI,sCAAU,GAAjB,UAAkB,cAA8B;QAC9C,OAAO,KAAK,CAAC;IACf,CAAC;IACH,wBAAC;AAAD,CAAC,AAzFD,IAyFC","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { EuiContextMenuItemIcon } from '@elastic/eui';\nimport { ContextMenuPanel } from './context_menu_panel';\nimport { PanelActionAPI } from './types';\n\ninterface ContextMenuActionOptions {\n  /**\n   * An optional child context menu to display when the action is clicked.\n   */\n  childContextMenuPanel?: ContextMenuPanel;\n\n  /**\n   * Whether this action should be disabled based on the parameters given.\n   * @param {PanelActionAPI} panelActionAPI\n   * @return {boolean}\n   */\n  isDisabled?: (actionAPI: PanelActionAPI) => boolean;\n\n  /**\n   * Whether this action should be visible based on the parameters given.\n   * @param {PanelActionAPI} panelActionAPI\n   * @return {boolean}\n   */\n  isVisible?: (panelActionAPI: PanelActionAPI) => boolean;\n\n  /**\n   * Determines which ContextMenuPanel this action is displayed on.\n   */\n  parentPanelId?: string;\n\n  /**\n   * Optional icon to display to the left of the action.\n   */\n  icon?: EuiContextMenuItemIcon;\n}\n\ninterface ContextMenuButtonOptions extends ContextMenuActionOptions {\n  /**\n   * An optional action to take when the action is clicked on. Either this or childContextMenuPanel should be\n   * given.\n   */\n  onClick?: (actionAPI: PanelActionAPI) => void;\n}\n\ninterface ContextMenuLinkOptions extends ContextMenuActionOptions {\n  /**\n   * An optional href to use as navigation when the action is clicked on.\n   */\n  getHref?: (actionAPI: PanelActionAPI) => string;\n}\n\ninterface ContextMenuActionsConfig {\n  id: string;\n\n  /**\n   * Display name of the action in the menu\n   */\n  displayName: string;\n\n  /**\n   * Determines which ContextMenuPanel this action is displayed on.\n   */\n  parentPanelId: string;\n}\n\nexport class ContextMenuAction {\n  public readonly id: string;\n\n  /**\n   * Optional icon to display to the left of the action.\n   */\n  public readonly icon?: EuiContextMenuItemIcon;\n\n  /**\n   * Display name of the action in the menu\n   */\n  public readonly displayName: string;\n\n  /**\n   * Optional child context menu to open when the action is clicked.\n   */\n  public readonly childContextMenuPanel?: ContextMenuPanel;\n\n  /**\n   * Determines which ContextMenuPanel this action is displayed on.\n   */\n  public readonly parentPanelId: string;\n\n  /**\n   * @param {PanelActionAPI} panelActionAPI\n   */\n  public readonly onClick?: (panelActionAPI: PanelActionAPI) => void;\n\n  /**\n   * @param {PanelActionAPI} panelActionAPI\n   */\n  public readonly getHref?: (panelActionAPI: PanelActionAPI) => string;\n\n  /**\n   *\n   * @param {string} config.id\n   * @param {string} config.displayName\n   * @param {string} config.parentPanelId - set if this action belongs on a nested child panel\n   * @param {function} options.onClick\n   * @param {ContextMenuPanel} options.childContextMenuPanel - optional child panel to open when clicked.\n   * @param {function} options.isDisabled - optionally set a custom disabled function\n   * @param {function} options.isVisible - optionally set a custom isVisible function\n   * @param {function} options.getHref\n   * @param {Element} options.icon\n   */\n  public constructor(\n    config: ContextMenuActionsConfig,\n    options: ContextMenuButtonOptions | ContextMenuLinkOptions = {}\n  ) {\n    this.id = config.id;\n    this.displayName = config.displayName;\n    this.parentPanelId = config.parentPanelId;\n\n    this.icon = options.icon;\n    this.childContextMenuPanel = options.childContextMenuPanel;\n\n    if ('onClick' in options) {\n      this.onClick = options.onClick;\n    }\n\n    if (options.isDisabled) {\n      this.isDisabled = options.isDisabled;\n    }\n\n    if (options.isVisible) {\n      this.isVisible = options.isVisible;\n    }\n\n    if ('getHref' in options) {\n      this.getHref = options.getHref;\n    }\n  }\n\n  /**\n   * Whether this action should be visible based on the parameters given.  Defaults to always visible.\n   * @param {PanelActionAPI} panelActionAPI\n   * @return {boolean}\n   */\n  public isVisible(panelActionAPI: PanelActionAPI): boolean {\n    return true;\n  }\n\n  /**\n   * Whether this action should be disabled based on the parameters given. Defaults to always enabled.\n   * @param {PanelActionAPI} panelActionAPI\n   */\n  public isDisabled(panelActionAPI: PanelActionAPI): boolean {\n    return false;\n  }\n}\n"]}]}