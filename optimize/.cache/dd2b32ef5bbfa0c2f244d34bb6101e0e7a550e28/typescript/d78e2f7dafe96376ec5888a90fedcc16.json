{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/common/time/time_scale.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/common/time/time_scale.ts","mtime":1567631711977},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport * as tslib_1 from \"tslib\";\nimport { timeUnitLabels } from './time_unit';\nexport var getMillisOfScale = function (scale) { return scale.unit * scale.value; };\nexport var getLabelOfScale = function (scale) { return \"\" + scale.value + timeUnitLabels[scale.unit]; };\nexport var decomposeIntoUnits = function (time, units) {\n    return units.reduce(function (result, unitMillis) {\n        var offset = result.reduce(function (accumulatedOffset, timeScale) { return accumulatedOffset + getMillisOfScale(timeScale); }, 0);\n        var value = Math.floor((time - offset) / unitMillis);\n        if (value > 0) {\n            return tslib_1.__spread(result, [\n                {\n                    unit: unitMillis,\n                    value: value,\n                },\n            ]);\n        }\n        else {\n            return result;\n        }\n    }, []);\n};\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/common/time/time_scale.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/common/time/time_scale.ts"],"names":[],"mappings":"AAAA;;;;GAIG;;AAEH,OAAO,EAAY,cAAc,EAAE,MAAM,aAAa,CAAC;AAOvD,MAAM,CAAC,IAAM,gBAAgB,GAAG,UAAC,KAAgB,IAAK,OAAA,KAAK,CAAC,IAAI,GAAG,KAAK,CAAC,KAAK,EAAxB,CAAwB,CAAC;AAE/E,MAAM,CAAC,IAAM,eAAe,GAAG,UAAC,KAAgB,IAAK,OAAA,KAAG,KAAK,CAAC,KAAK,GAAG,cAAc,CAAC,KAAK,CAAC,IAAI,CAAG,EAA7C,CAA6C,CAAC;AAEnG,MAAM,CAAC,IAAM,kBAAkB,GAAG,UAAC,IAAY,EAAE,KAAiB;IAChE,OAAA,KAAK,CAAC,MAAM,CAAc,UAAC,MAAM,EAAE,UAAU;QAC3C,IAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAC1B,UAAC,iBAAiB,EAAE,SAAS,IAAK,OAAA,iBAAiB,GAAG,gBAAgB,CAAC,SAAS,CAAC,EAA/C,CAA+C,EACjF,CAAC,CACF,CAAC;QACF,IAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,GAAG,MAAM,CAAC,GAAG,UAAU,CAAC,CAAC;QAEvD,IAAI,KAAK,GAAG,CAAC,EAAE;YACb,wBACK,MAAM;gBACT;oBACE,IAAI,EAAE,UAAU;oBAChB,KAAK,OAAA;iBACN;eACD;SACH;aAAM;YACL,OAAO,MAAM,CAAC;SACf;IACH,CAAC,EAAE,EAAE,CAAC;AAlBN,CAkBM,CAAC","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport { TimeUnit, timeUnitLabels } from './time_unit';\n\nexport interface TimeScale {\n  unit: TimeUnit;\n  value: number;\n}\n\nexport const getMillisOfScale = (scale: TimeScale) => scale.unit * scale.value;\n\nexport const getLabelOfScale = (scale: TimeScale) => `${scale.value}${timeUnitLabels[scale.unit]}`;\n\nexport const decomposeIntoUnits = (time: number, units: TimeUnit[]) =>\n  units.reduce<TimeScale[]>((result, unitMillis) => {\n    const offset = result.reduce(\n      (accumulatedOffset, timeScale) => accumulatedOffset + getMillisOfScale(timeScale),\n      0\n    );\n    const value = Math.floor((time - offset) / unitMillis);\n\n    if (value > 0) {\n      return [\n        ...result,\n        {\n          unit: unitMillis,\n          value,\n        },\n      ];\n    } else {\n      return result;\n    }\n  }, []);\n"]}]}