{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/store/local/metric_time/epic.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/store/local/metric_time/epic.ts","mtime":1567631711988},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["import * as tslib_1 from \"tslib\";\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport moment from 'moment';\nimport { timer } from 'rxjs';\nimport { exhaustMap, filter, map, takeUntil, withLatestFrom } from 'rxjs/operators';\nimport { setRangeTime, startMetricsAutoReload, stopMetricsAutoReload } from './actions';\nexport var createMetricTimeEpic = function () { return function (action$, state$, _a) {\n    var selectMetricTimeUpdatePolicyInterval = _a.selectMetricTimeUpdatePolicyInterval, selectMetricRangeFromTimeRange = _a.selectMetricRangeFromTimeRange;\n    var updateInterval$ = state$.pipe(map(selectMetricTimeUpdatePolicyInterval), filter(isNotNull));\n    var range$ = state$.pipe(map(selectMetricRangeFromTimeRange), filter(isNotNull));\n    return action$.pipe(filter(startMetricsAutoReload.match), withLatestFrom(updateInterval$, range$), exhaustMap(function (_a) {\n        var _b = tslib_1.__read(_a, 3), action = _b[0], updateInterval = _b[1], range = _b[2];\n        return timer(0, updateInterval).pipe(map(function () {\n            return setRangeTime({\n                from: moment()\n                    .subtract(range, 'ms')\n                    .valueOf(),\n                to: moment().valueOf(),\n                interval: '1m',\n            });\n        }), takeUntil(action$.pipe(filter(stopMetricsAutoReload.match))));\n    }));\n}; };\nvar isNotNull = function (value) { return value !== null; };\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/store/local/metric_time/epic.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/store/local/metric_time/epic.ts"],"names":[],"mappings":";AAAA;;;;GAIG;AACH,OAAO,MAAM,MAAM,QAAQ,CAAC;AAG5B,OAAO,EAAE,KAAK,EAAE,MAAM,MAAM,CAAC;AAC7B,OAAO,EAAE,UAAU,EAAE,MAAM,EAAE,GAAG,EAAE,SAAS,EAAE,cAAc,EAAE,MAAM,gBAAgB,CAAC;AAEpF,OAAO,EAAE,YAAY,EAAE,sBAAsB,EAAE,qBAAqB,EAAE,MAAM,WAAW,CAAC;AAOxF,MAAM,CAAC,IAAM,oBAAoB,GAAG,cAK/B,OAAA,UACH,OAAO,EACP,MAAM,EACN,EAAwE;QAAtE,8EAAoC,EAAE,kEAA8B;IAEtE,IAAM,eAAe,GAAG,MAAM,CAAC,IAAI,CACjC,GAAG,CAAC,oCAAoC,CAAC,EACzC,MAAM,CAAC,SAAS,CAAC,CAClB,CAAC;IAEF,IAAM,MAAM,GAAG,MAAM,CAAC,IAAI,CACxB,GAAG,CAAC,8BAA8B,CAAC,EACnC,MAAM,CAAC,SAAS,CAAC,CAClB,CAAC;IAEF,OAAO,OAAO,CAAC,IAAI,CACjB,MAAM,CAAC,sBAAsB,CAAC,KAAK,CAAC,EACpC,cAAc,CAAC,eAAe,EAAE,MAAM,CAAC,EACvC,UAAU,CAAC,UAAC,EAA+B;YAA/B,0BAA+B,EAA9B,cAAM,EAAE,sBAAc,EAAE,aAAK;QACxC,OAAA,KAAK,CAAC,CAAC,EAAE,cAAc,CAAC,CAAC,IAAI,CAC3B,GAAG,CAAC;YACF,OAAA,YAAY,CAAC;gBACX,IAAI,EAAE,MAAM,EAAE;qBACX,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC;qBACrB,OAAO,EAAE;gBACZ,EAAE,EAAE,MAAM,EAAE,CAAC,OAAO,EAAE;gBACtB,QAAQ,EAAE,IAAI;aACf,CAAC;QANF,CAME,CACH,EACD,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAC,CAAC,CAC7D;IAXD,CAWC,CACF,CACF,CAAC;AACJ,CAAC,EAjCI,CAiCJ,CAAC;AAEF,IAAM,SAAS,GAAG,UAAI,KAAe,IAAiB,OAAA,KAAK,KAAK,IAAI,EAAd,CAAc,CAAC","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport moment from 'moment';\nimport { Action } from 'redux';\nimport { Epic } from 'redux-observable';\nimport { timer } from 'rxjs';\nimport { exhaustMap, filter, map, takeUntil, withLatestFrom } from 'rxjs/operators';\n\nimport { setRangeTime, startMetricsAutoReload, stopMetricsAutoReload } from './actions';\n\ninterface MetricTimeEpicDependencies<State> {\n  selectMetricTimeUpdatePolicyInterval: (state: State) => number | null;\n  selectMetricRangeFromTimeRange: (state: State) => number | null;\n}\n\nexport const createMetricTimeEpic = <State>(): Epic<\n  Action,\n  Action,\n  State,\n  MetricTimeEpicDependencies<State>\n> => (\n  action$,\n  state$,\n  { selectMetricTimeUpdatePolicyInterval, selectMetricRangeFromTimeRange }\n) => {\n  const updateInterval$ = state$.pipe(\n    map(selectMetricTimeUpdatePolicyInterval),\n    filter(isNotNull)\n  );\n\n  const range$ = state$.pipe(\n    map(selectMetricRangeFromTimeRange),\n    filter(isNotNull)\n  );\n\n  return action$.pipe(\n    filter(startMetricsAutoReload.match),\n    withLatestFrom(updateInterval$, range$),\n    exhaustMap(([action, updateInterval, range]) =>\n      timer(0, updateInterval).pipe(\n        map(() =>\n          setRangeTime({\n            from: moment()\n              .subtract(range, 'ms')\n              .valueOf(),\n            to: moment().valueOf(),\n            interval: '1m',\n          })\n        ),\n        takeUntil(action$.pipe(filter(stopMetricsAutoReload.match)))\n      )\n    )\n  );\n};\n\nconst isNotNull = <T>(value: T | null): value is T => value !== null;\n"]}]}