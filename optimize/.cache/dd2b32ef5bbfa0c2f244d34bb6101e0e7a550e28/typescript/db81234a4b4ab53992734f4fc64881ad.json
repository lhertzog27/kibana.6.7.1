{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/spaces/public/views/management/components/confirm_delete_modal.tsx","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/spaces/public/views/management/components/confirm_delete_modal.tsx","mtime":1567631712310},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport * as tslib_1 from \"tslib\";\nimport { EuiButton, EuiButtonEmpty, EuiCallOut, EuiFieldText, EuiFormRow, EuiModal, EuiModalBody, EuiModalFooter, EuiModalHeader, EuiModalHeaderTitle, EuiOverlayMask, EuiText, } from '@elastic/eui';\nimport { FormattedMessage, injectI18n } from '@kbn/i18n/react';\nimport React, { Component } from 'react';\nvar ConfirmDeleteModalUI = /** @class */ (function (_super) {\n    tslib_1.__extends(ConfirmDeleteModalUI, _super);\n    function ConfirmDeleteModalUI() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.state = {\n            confirmSpaceName: '',\n            error: null,\n            deleteInProgress: false,\n        };\n        _this.onSpaceNameChange = function (e) {\n            if (typeof _this.state.error === 'boolean') {\n                _this.setState({\n                    confirmSpaceName: e.target.value,\n                    error: e.target.value !== _this.props.space.name,\n                });\n            }\n            else {\n                _this.setState({\n                    confirmSpaceName: e.target.value,\n                });\n            }\n        };\n        _this.onConfirm = function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n            var needsRedirect, spacesManager;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!(this.state.confirmSpaceName === this.props.space.name)) return [3 /*break*/, 2];\n                        needsRedirect = isDeletingCurrentSpace(this.props.space, this.props.spacesNavState);\n                        spacesManager = this.props.spacesManager;\n                        this.setState({\n                            deleteInProgress: true,\n                        });\n                        return [4 /*yield*/, this.props.onConfirm()];\n                    case 1:\n                        _a.sent();\n                        this.setState({\n                            deleteInProgress: false,\n                        });\n                        if (needsRedirect) {\n                            spacesManager.redirectToSpaceSelector();\n                        }\n                        return [3 /*break*/, 3];\n                    case 2:\n                        this.setState({\n                            error: true,\n                        });\n                        _a.label = 3;\n                    case 3: return [2 /*return*/];\n                }\n            });\n        }); };\n        return _this;\n    }\n    ConfirmDeleteModalUI.prototype.render = function () {\n        var _a = this.props, space = _a.space, spacesNavState = _a.spacesNavState, onCancel = _a.onCancel, intl = _a.intl;\n        var warning = null;\n        if (isDeletingCurrentSpace(space, spacesNavState)) {\n            var name = (React.createElement(\"span\", null,\n                \"(\",\n                React.createElement(\"strong\", null, space.name),\n                \")\"));\n            warning = (React.createElement(EuiCallOut, { color: \"warning\" },\n                React.createElement(EuiText, null,\n                    React.createElement(FormattedMessage, { id: \"xpack.spaces.management.confirmDeleteModal.redirectAfterDeletingCurrentSpaceWarningMessage\", defaultMessage: \"You are about to delete your current space {name}. You will be redirected to choose a different space if you continue.\", values: { name: name } }))));\n        }\n        // This is largely the same as the built-in EuiConfirmModal component, but we needed the ability\n        // to disable the buttons since this could be a long-running operation\n        return (React.createElement(EuiOverlayMask, null,\n            React.createElement(EuiModal, { onClose: onCancel, className: 'spcConfirmDeleteModal' },\n                React.createElement(EuiModalHeader, null,\n                    React.createElement(EuiModalHeaderTitle, { \"data-test-subj\": \"confirmModalTitleText\" },\n                        React.createElement(FormattedMessage, { id: \"xpack.spaces.management.confirmDeleteModal.confirmDeleteSpaceButtonLabel\", defaultMessage: \"Delete space {spaceName}\", values: {\n                                spaceName: \"'\" + space.name + \"'\",\n                            } }))),\n                React.createElement(EuiModalBody, null,\n                    React.createElement(EuiText, { \"data-test-subj\": \"confirmModalBodyText\" },\n                        React.createElement(\"p\", null,\n                            React.createElement(FormattedMessage, { id: \"xpack.spaces.management.confirmDeleteModal.deletingSpaceWarningMessage\", defaultMessage: \"Deleting a space permanently removes the space and {allContents}. You can't undo this action.\", values: {\n                                    allContents: (React.createElement(\"strong\", null,\n                                        React.createElement(FormattedMessage, { id: \"xpack.spaces.management.confirmDeleteModal.allContentsText\", defaultMessage: \"all of its contents\" }))),\n                                } })),\n                        React.createElement(EuiFormRow, { label: intl.formatMessage({\n                                id: 'xpack.spaces.management.confirmDeleteModal.confirmSpaceNameFormRowLabel',\n                                defaultMessage: 'Confirm space name',\n                            }), isInvalid: !!this.state.error, error: intl.formatMessage({\n                                id: 'xpack.spaces.management.confirmDeleteModal.spaceNamesDoNoMatchErrorMessage',\n                                defaultMessage: 'Space names do not match.',\n                            }) },\n                            React.createElement(EuiFieldText, { value: this.state.confirmSpaceName, onChange: this.onSpaceNameChange, disabled: this.state.deleteInProgress })),\n                        warning)),\n                React.createElement(EuiModalFooter, null,\n                    React.createElement(EuiButtonEmpty, { \"data-test-subj\": \"confirmModalCancelButton\", onClick: onCancel, isDisabled: this.state.deleteInProgress },\n                        React.createElement(FormattedMessage, { id: \"xpack.spaces.management.confirmDeleteModal.cancelButtonLabel\", defaultMessage: \"Cancel\" })),\n                    React.createElement(EuiButton, { \"data-test-subj\": \"confirmModalConfirmButton\", onClick: this.onConfirm, fill: true, color: 'danger', isLoading: this.state.deleteInProgress },\n                        React.createElement(FormattedMessage, { id: \"xpack.spaces.management.confirmDeleteModal.deleteSpaceAndAllContentsButtonLabel\", defaultMessage: \" Delete space and all contents\" }))))));\n    };\n    return ConfirmDeleteModalUI;\n}(Component));\nfunction isDeletingCurrentSpace(space, spacesNavState) {\n    return space.id === spacesNavState.getActiveSpace().id;\n}\nexport var ConfirmDeleteModal = injectI18n(ConfirmDeleteModalUI);\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/spaces/public/views/management/components/confirm_delete_modal.tsx","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/spaces/public/views/management/components/confirm_delete_modal.tsx"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport {\n  EuiButton,\n  EuiButtonEmpty,\n  EuiCallOut,\n  // @ts-ignore\n  EuiConfirmModal,\n  EuiFieldText,\n  EuiFormRow,\n  EuiModal,\n  EuiModalBody,\n  EuiModalFooter,\n  EuiModalHeader,\n  EuiModalHeaderTitle,\n  EuiOverlayMask,\n  EuiText,\n} from '@elastic/eui';\nimport { FormattedMessage, InjectedIntl, injectI18n } from '@kbn/i18n/react';\nimport { SpacesNavState } from 'plugins/spaces/views/nav_control';\nimport React, { ChangeEvent, Component } from 'react';\nimport { Space } from '../../../../common/model/space';\nimport { SpacesManager } from '../../../lib';\n\ninterface Props {\n  space: Space;\n  spacesManager: SpacesManager;\n  spacesNavState: SpacesNavState;\n  onCancel: () => void;\n  onConfirm: () => void;\n  intl: InjectedIntl;\n}\n\ninterface State {\n  confirmSpaceName: string;\n  error: boolean | null;\n  deleteInProgress: boolean;\n}\n\nclass ConfirmDeleteModalUI extends Component<Props, State> {\n  public state = {\n    confirmSpaceName: '',\n    error: null,\n    deleteInProgress: false,\n  };\n\n  public render() {\n    const { space, spacesNavState, onCancel, intl } = this.props;\n\n    let warning = null;\n    if (isDeletingCurrentSpace(space, spacesNavState)) {\n      const name = (\n        <span>\n          (<strong>{space.name}</strong>)\n        </span>\n      );\n      warning = (\n        <EuiCallOut color=\"warning\">\n          <EuiText>\n            <FormattedMessage\n              id=\"xpack.spaces.management.confirmDeleteModal.redirectAfterDeletingCurrentSpaceWarningMessage\"\n              defaultMessage=\"You are about to delete your current space {name}. You will be redirected to choose a different space if you continue.\"\n              values={{ name }}\n            />\n          </EuiText>\n        </EuiCallOut>\n      );\n    }\n\n    // This is largely the same as the built-in EuiConfirmModal component, but we needed the ability\n    // to disable the buttons since this could be a long-running operation\n\n    return (\n      <EuiOverlayMask>\n        <EuiModal onClose={onCancel} className={'spcConfirmDeleteModal'}>\n          <EuiModalHeader>\n            <EuiModalHeaderTitle data-test-subj=\"confirmModalTitleText\">\n              <FormattedMessage\n                id=\"xpack.spaces.management.confirmDeleteModal.confirmDeleteSpaceButtonLabel\"\n                defaultMessage=\"Delete space {spaceName}\"\n                values={{\n                  spaceName: \"'\" + space.name + \"'\",\n                }}\n              />\n            </EuiModalHeaderTitle>\n          </EuiModalHeader>\n          <EuiModalBody>\n            <EuiText data-test-subj=\"confirmModalBodyText\">\n              <p>\n                <FormattedMessage\n                  id=\"xpack.spaces.management.confirmDeleteModal.deletingSpaceWarningMessage\"\n                  defaultMessage=\"Deleting a space permanently removes the space and {allContents}. You can't undo this action.\"\n                  values={{\n                    allContents: (\n                      <strong>\n                        <FormattedMessage\n                          id=\"xpack.spaces.management.confirmDeleteModal.allContentsText\"\n                          defaultMessage=\"all of its contents\"\n                        />\n                      </strong>\n                    ),\n                  }}\n                />\n              </p>\n\n              <EuiFormRow\n                label={intl.formatMessage({\n                  id: 'xpack.spaces.management.confirmDeleteModal.confirmSpaceNameFormRowLabel',\n                  defaultMessage: 'Confirm space name',\n                })}\n                isInvalid={!!this.state.error}\n                error={intl.formatMessage({\n                  id: 'xpack.spaces.management.confirmDeleteModal.spaceNamesDoNoMatchErrorMessage',\n                  defaultMessage: 'Space names do not match.',\n                })}\n              >\n                <EuiFieldText\n                  value={this.state.confirmSpaceName}\n                  onChange={this.onSpaceNameChange}\n                  disabled={this.state.deleteInProgress}\n                />\n              </EuiFormRow>\n\n              {warning}\n            </EuiText>\n          </EuiModalBody>\n          <EuiModalFooter>\n            <EuiButtonEmpty\n              data-test-subj=\"confirmModalCancelButton\"\n              onClick={onCancel}\n              isDisabled={this.state.deleteInProgress}\n            >\n              <FormattedMessage\n                id=\"xpack.spaces.management.confirmDeleteModal.cancelButtonLabel\"\n                defaultMessage=\"Cancel\"\n              />\n            </EuiButtonEmpty>\n\n            <EuiButton\n              data-test-subj=\"confirmModalConfirmButton\"\n              onClick={this.onConfirm}\n              fill\n              color={'danger'}\n              isLoading={this.state.deleteInProgress}\n            >\n              <FormattedMessage\n                id=\"xpack.spaces.management.confirmDeleteModal.deleteSpaceAndAllContentsButtonLabel\"\n                defaultMessage=\" Delete space and all contents\"\n              />\n            </EuiButton>\n          </EuiModalFooter>\n        </EuiModal>\n      </EuiOverlayMask>\n    );\n  }\n\n  private onSpaceNameChange = (e: ChangeEvent<HTMLInputElement>) => {\n    if (typeof this.state.error === 'boolean') {\n      this.setState({\n        confirmSpaceName: e.target.value,\n        error: e.target.value !== this.props.space.name,\n      });\n    } else {\n      this.setState({\n        confirmSpaceName: e.target.value,\n      });\n    }\n  };\n\n  private onConfirm = async () => {\n    if (this.state.confirmSpaceName === this.props.space.name) {\n      const needsRedirect = isDeletingCurrentSpace(this.props.space, this.props.spacesNavState);\n      const spacesManager = this.props.spacesManager;\n\n      this.setState({\n        deleteInProgress: true,\n      });\n\n      await this.props.onConfirm();\n\n      this.setState({\n        deleteInProgress: false,\n      });\n\n      if (needsRedirect) {\n        spacesManager.redirectToSpaceSelector();\n      }\n    } else {\n      this.setState({\n        error: true,\n      });\n    }\n  };\n}\n\nfunction isDeletingCurrentSpace(space: Space, spacesNavState: SpacesNavState) {\n  return space.id === spacesNavState.getActiveSpace().id;\n}\n\nexport const ConfirmDeleteModal = injectI18n(ConfirmDeleteModalUI);\n"]}]}