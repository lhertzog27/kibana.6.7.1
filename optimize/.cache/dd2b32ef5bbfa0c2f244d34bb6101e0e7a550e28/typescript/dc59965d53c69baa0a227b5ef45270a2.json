{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/uptime/public/lib/adapters/framework/kibana_framework_adapter.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/uptime/public/lib/adapters/framework/kibana_framework_adapter.ts","mtime":1567631712330},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport ReactDOM from 'react-dom';\nimport { unmountComponentAtNode } from 'react-dom';\nimport chrome from 'ui/chrome';\nimport { PLUGIN } from '../../../../common/constants';\nvar UMKibanaFrameworkAdapter = /** @class */ (function () {\n    function UMKibanaFrameworkAdapter(uiRoutes, dateRangeStart, dateRangeEnd, autorefreshInterval, autorefreshIsPaused) {\n        var _this = this;\n        this.render = function (renderComponent, createGraphQLClient) {\n            var route = {\n                controllerAs: 'uptime',\n                // @ts-ignore angular\n                controller: function ($scope, $route, $http, config) {\n                    var graphQLClient = createGraphQLClient(_this.uriPath, _this.xsrfHeader);\n                    config.bindToScope($scope, 'k7design');\n                    $scope.$$postDigest(function () {\n                        var elem = document.getElementById('uptimeReactRoot');\n                        var kibanaBreadcrumbs = [];\n                        if ($scope.k7design) {\n                            chrome.breadcrumbs.get$().subscribe(function (breadcrumbs) {\n                                kibanaBreadcrumbs = breadcrumbs;\n                            });\n                        }\n                        var basePath = chrome.getBasePath();\n                        var routerBasename = basePath.endsWith('/')\n                            ? basePath + \"/\" + PLUGIN.ROUTER_BASE_NAME\n                            : basePath + PLUGIN.ROUTER_BASE_NAME;\n                        var persistedState = _this.initializePersistedState();\n                        var darkMode = config.get('theme:darkMode', false) || false;\n                        var autorefreshIsPaused = persistedState.autorefreshIsPaused, autorefreshInterval = persistedState.autorefreshInterval, dateRangeStart = persistedState.dateRangeStart, dateRangeEnd = persistedState.dateRangeEnd;\n                        ReactDOM.render(renderComponent({\n                            darkMode: darkMode,\n                            isUsingK7Design: $scope.k7design,\n                            updateBreadcrumbs: chrome.breadcrumbs.set,\n                            kibanaBreadcrumbs: kibanaBreadcrumbs,\n                            routerBasename: routerBasename,\n                            graphQLClient: graphQLClient,\n                            initialAutorefreshIsPaused: autorefreshIsPaused,\n                            initialAutorefreshInterval: autorefreshInterval,\n                            initialDateRangeStart: dateRangeStart,\n                            initialDateRangeEnd: dateRangeEnd,\n                            persistState: _this.updatePersistedState,\n                        }), elem);\n                        _this.manageAngularLifecycle($scope, $route, elem);\n                    });\n                },\n                template: '<uptime-app section=\"kibana\" id=\"uptimeReactRoot\" class=\"app-wrapper-panel\"></uptime-app>',\n            };\n            _this.uiRoutes.enable();\n            // TODO: hack to refer all routes to same endpoint, use a more proper way of achieving this\n            _this.uiRoutes.otherwise(route);\n        };\n        // @ts-ignore angular params\n        this.manageAngularLifecycle = function ($scope, $route, elem) {\n            var lastRoute = $route.current;\n            var deregister = $scope.$on('$locationChangeSuccess', function () {\n                var currentRoute = $route.current;\n                if (lastRoute.$$route && lastRoute.$$route.template === currentRoute.$$route.template) {\n                    $route.current = lastRoute;\n                }\n            });\n            $scope.$on('$destroy', function () {\n                deregister();\n                unmountComponentAtNode(elem);\n            });\n        };\n        this.initializePersistedState = function () {\n            var uptimeConfigurationData = window.localStorage.getItem(PLUGIN.LOCAL_STORAGE_KEY);\n            var defaultState = {\n                autorefreshIsPaused: _this.defaultAutorefreshIsPaused,\n                autorefreshInterval: _this.defaultAutorefreshInterval,\n                dateRangeStart: _this.defaultDateRangeStart,\n                dateRangeEnd: _this.defaultDateRangeEnd,\n            };\n            try {\n                if (uptimeConfigurationData) {\n                    var parsed = JSON.parse(uptimeConfigurationData) || {};\n                    var dateRangeStart = parsed.dateRangeStart, dateRangeEnd = parsed.dateRangeEnd;\n                    // TODO: this is defensive code to ensure we don't encounter problems\n                    // when encountering older versions of the localStorage values.\n                    // The old code has never been released, so users don't need it, and this\n                    // code should be removed eventually.\n                    if ((dateRangeEnd && typeof dateRangeEnd === 'number') ||\n                        (dateRangeStart && typeof dateRangeStart === 'number')) {\n                        _this.updatePersistedState(defaultState);\n                        return defaultState;\n                    }\n                    return parsed;\n                }\n            }\n            catch (e) {\n                // TODO: this should result in a redirect to error page\n                throw e;\n            }\n            _this.updatePersistedState(defaultState);\n            return defaultState;\n        };\n        this.updatePersistedState = function (state) {\n            window.localStorage.setItem(PLUGIN.LOCAL_STORAGE_KEY, JSON.stringify(state));\n        };\n        this.uiRoutes = uiRoutes;\n        this.xsrfHeader = chrome.getXsrfToken();\n        this.uriPath = chrome.getBasePath() + \"/api/uptime/graphql\";\n        this.defaultDateRangeStart = dateRangeStart || 'now-15m';\n        this.defaultDateRangeEnd = dateRangeEnd || 'now';\n        this.defaultAutorefreshInterval = autorefreshInterval || 60 * 1000;\n        this.defaultAutorefreshIsPaused = autorefreshIsPaused || true;\n    }\n    return UMKibanaFrameworkAdapter;\n}());\nexport { UMKibanaFrameworkAdapter };\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/uptime/public/lib/adapters/framework/kibana_framework_adapter.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/uptime/public/lib/adapters/framework/kibana_framework_adapter.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport ReactDOM from 'react-dom';\nimport { unmountComponentAtNode } from 'react-dom';\nimport chrome from 'ui/chrome';\nimport { PLUGIN } from '../../../../common/constants';\nimport { UMBreadcrumb } from '../../../breadcrumbs';\nimport { UptimePersistedState } from '../../../uptime_app';\nimport { BootstrapUptimeApp, UMFrameworkAdapter } from '../../lib';\nimport { CreateGraphQLClient } from './framework_adapter_types';\n\nexport class UMKibanaFrameworkAdapter implements UMFrameworkAdapter {\n  private uiRoutes: any;\n  private xsrfHeader: string;\n  private uriPath: string;\n  private defaultDateRangeStart: string;\n  private defaultDateRangeEnd: string;\n  private defaultAutorefreshInterval: number;\n  private defaultAutorefreshIsPaused: boolean;\n\n  constructor(\n    uiRoutes: any,\n    dateRangeStart?: string,\n    dateRangeEnd?: string,\n    autorefreshInterval?: number,\n    autorefreshIsPaused?: boolean\n  ) {\n    this.uiRoutes = uiRoutes;\n    this.xsrfHeader = chrome.getXsrfToken();\n    this.uriPath = `${chrome.getBasePath()}/api/uptime/graphql`;\n    this.defaultDateRangeStart = dateRangeStart || 'now-15m';\n    this.defaultDateRangeEnd = dateRangeEnd || 'now';\n    this.defaultAutorefreshInterval = autorefreshInterval || 60 * 1000;\n    this.defaultAutorefreshIsPaused = autorefreshIsPaused || true;\n  }\n\n  public render = (\n    renderComponent: BootstrapUptimeApp,\n    createGraphQLClient: CreateGraphQLClient\n  ) => {\n    const route = {\n      controllerAs: 'uptime',\n      // @ts-ignore angular\n      controller: ($scope, $route, $http, config) => {\n        const graphQLClient = createGraphQLClient(this.uriPath, this.xsrfHeader);\n        config.bindToScope($scope, 'k7design');\n        $scope.$$postDigest(() => {\n          const elem = document.getElementById('uptimeReactRoot');\n          let kibanaBreadcrumbs: UMBreadcrumb[] = [];\n          if ($scope.k7design) {\n            chrome.breadcrumbs.get$().subscribe((breadcrumbs: UMBreadcrumb[]) => {\n              kibanaBreadcrumbs = breadcrumbs;\n            });\n          }\n          const basePath = chrome.getBasePath();\n          const routerBasename = basePath.endsWith('/')\n            ? `${basePath}/${PLUGIN.ROUTER_BASE_NAME}`\n            : basePath + PLUGIN.ROUTER_BASE_NAME;\n          const persistedState = this.initializePersistedState();\n          const darkMode = config.get('theme:darkMode', false) || false;\n          const {\n            autorefreshIsPaused,\n            autorefreshInterval,\n            dateRangeStart,\n            dateRangeEnd,\n          } = persistedState;\n          ReactDOM.render(\n            renderComponent({\n              darkMode,\n              isUsingK7Design: $scope.k7design,\n              updateBreadcrumbs: chrome.breadcrumbs.set,\n              kibanaBreadcrumbs,\n              routerBasename,\n              graphQLClient,\n              initialAutorefreshIsPaused: autorefreshIsPaused,\n              initialAutorefreshInterval: autorefreshInterval,\n              initialDateRangeStart: dateRangeStart,\n              initialDateRangeEnd: dateRangeEnd,\n              persistState: this.updatePersistedState,\n            }),\n            elem\n          );\n          this.manageAngularLifecycle($scope, $route, elem);\n        });\n      },\n      template:\n        '<uptime-app section=\"kibana\" id=\"uptimeReactRoot\" class=\"app-wrapper-panel\"></uptime-app>',\n    };\n    this.uiRoutes.enable();\n    // TODO: hack to refer all routes to same endpoint, use a more proper way of achieving this\n    this.uiRoutes.otherwise(route);\n  };\n\n  // @ts-ignore angular params\n  private manageAngularLifecycle = ($scope, $route, elem) => {\n    const lastRoute = $route.current;\n    const deregister = $scope.$on('$locationChangeSuccess', () => {\n      const currentRoute = $route.current;\n      if (lastRoute.$$route && lastRoute.$$route.template === currentRoute.$$route.template) {\n        $route.current = lastRoute;\n      }\n    });\n    $scope.$on('$destroy', () => {\n      deregister();\n      unmountComponentAtNode(elem);\n    });\n  };\n\n  private initializePersistedState = (): UptimePersistedState => {\n    const uptimeConfigurationData = window.localStorage.getItem(PLUGIN.LOCAL_STORAGE_KEY);\n    const defaultState: UptimePersistedState = {\n      autorefreshIsPaused: this.defaultAutorefreshIsPaused,\n      autorefreshInterval: this.defaultAutorefreshInterval,\n      dateRangeStart: this.defaultDateRangeStart,\n      dateRangeEnd: this.defaultDateRangeEnd,\n    };\n    try {\n      if (uptimeConfigurationData) {\n        const parsed = JSON.parse(uptimeConfigurationData) || {};\n        const { dateRangeStart, dateRangeEnd } = parsed;\n        // TODO: this is defensive code to ensure we don't encounter problems\n        // when encountering older versions of the localStorage values.\n        // The old code has never been released, so users don't need it, and this\n        // code should be removed eventually.\n        if (\n          (dateRangeEnd && typeof dateRangeEnd === 'number') ||\n          (dateRangeStart && typeof dateRangeStart === 'number')\n        ) {\n          this.updatePersistedState(defaultState);\n          return defaultState;\n        }\n        return parsed;\n      }\n    } catch (e) {\n      // TODO: this should result in a redirect to error page\n      throw e;\n    }\n    this.updatePersistedState(defaultState);\n    return defaultState;\n  };\n\n  private updatePersistedState = (state: UptimePersistedState) => {\n    window.localStorage.setItem(PLUGIN.LOCAL_STORAGE_KEY, JSON.stringify(state));\n  };\n}\n"]}]}