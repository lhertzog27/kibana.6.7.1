{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/components/waffle/waffle_node_type_switcher.tsx","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/components/waffle/waffle_node_type_switcher.tsx","mtime":1567631711983},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport * as tslib_1 from \"tslib\";\nimport { EuiKeyPadMenu, EuiKeyPadMenuItem } from '@elastic/eui';\nimport { FormattedMessage } from '@kbn/i18n/react';\nimport React from 'react';\nimport { InfraMetricType, InfraNodeType, } from '../../graphql/types';\nvar WaffleNodeTypeSwitcher = /** @class */ (function (_super) {\n    tslib_1.__extends(WaffleNodeTypeSwitcher, _super);\n    function WaffleNodeTypeSwitcher() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.handleClick = function (nodeType) { return function () {\n            _this.props.changeNodeType(nodeType);\n            _this.props.changeGroupBy([]);\n            _this.props.changeMetric({ type: InfraMetricType.cpu });\n        }; };\n        return _this;\n    }\n    WaffleNodeTypeSwitcher.prototype.render = function () {\n        return (React.createElement(EuiKeyPadMenu, null,\n            React.createElement(EuiKeyPadMenuItem, { label: React.createElement(FormattedMessage, { id: \"xpack.infra.waffle.nodeTypeSwitcher.hostsLabel\", defaultMessage: \"Hosts\" }), onClick: this.handleClick(InfraNodeType.host) },\n                React.createElement(\"img\", { src: \"../plugins/infra/images/hosts.svg\", role: \"presentation\", alt: \"\", className: \"euiIcon euiIcon--large\" })),\n            React.createElement(EuiKeyPadMenuItem, { label: \"Kubernetes\", onClick: this.handleClick(InfraNodeType.pod) },\n                React.createElement(\"img\", { src: \"../plugins/infra/images/k8.svg\", role: \"presentation\", alt: \"\", className: \"euiIcon euiIcon--large\" })),\n            React.createElement(EuiKeyPadMenuItem, { label: \"Docker\", onClick: this.handleClick(InfraNodeType.container) },\n                React.createElement(\"img\", { src: \"../plugins/infra/images/docker.svg\", role: \"presentation\", alt: \"\", className: \"euiIcon euiIcon--large\" }))));\n    };\n    return WaffleNodeTypeSwitcher;\n}(React.PureComponent));\nexport { WaffleNodeTypeSwitcher };\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/components/waffle/waffle_node_type_switcher.tsx","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/components/waffle/waffle_node_type_switcher.tsx"],"names":[],"mappings":"AAAA;;;;GAIG;;AAEH,OAAO,EAAE,aAAa,EAAE,iBAAiB,EAAE,MAAM,cAAc,CAAC;AAChE,OAAO,EAAE,gBAAgB,EAAE,MAAM,iBAAiB,CAAC;AACnD,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAEL,eAAe,EACf,aAAa,GAEd,MAAM,qBAAqB,CAAC;AAS7B;IAA4C,kDAA0B;IAAtE;QAAA,qEA6CC;QALS,iBAAW,GAAG,UAAC,QAAuB,IAAK,OAAA;YACjD,KAAI,CAAC,KAAK,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;YACpC,KAAI,CAAC,KAAK,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC;YAC7B,KAAI,CAAC,KAAK,CAAC,YAAY,CAAC,EAAE,IAAI,EAAE,eAAe,CAAC,GAAG,EAAE,CAAC,CAAC;QACzD,CAAC,EAJkD,CAIlD,CAAC;;IACJ,CAAC;IA5CQ,uCAAM,GAAb;QACE,OAAO,CACL,oBAAC,aAAa;YACZ,oBAAC,iBAAiB,IAChB,KAAK,EACH,oBAAC,gBAAgB,IACf,EAAE,EAAC,gDAAgD,EACnD,cAAc,EAAC,OAAO,GACtB,EAEJ,OAAO,EAAE,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,IAAI,CAAC;gBAE7C,6BACE,GAAG,EAAC,mCAAmC,EACvC,IAAI,EAAC,cAAc,EACnB,GAAG,EAAC,EAAE,EACN,SAAS,EAAC,wBAAwB,GAClC,CACgB;YACpB,oBAAC,iBAAiB,IAAC,KAAK,EAAC,YAAY,EAAC,OAAO,EAAE,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,GAAG,CAAC;gBAChF,6BACE,GAAG,EAAC,gCAAgC,EACpC,IAAI,EAAC,cAAc,EACnB,GAAG,EAAC,EAAE,EACN,SAAS,EAAC,wBAAwB,GAClC,CACgB;YACpB,oBAAC,iBAAiB,IAAC,KAAK,EAAC,QAAQ,EAAC,OAAO,EAAE,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,SAAS,CAAC;gBAClF,6BACE,GAAG,EAAC,oCAAoC,EACxC,IAAI,EAAC,cAAc,EACnB,GAAG,EAAC,EAAE,EACN,SAAS,EAAC,wBAAwB,GAClC,CACgB,CACN,CACjB,CAAC;IACJ,CAAC;IAOH,6BAAC;AAAD,CAAC,AA7CD,CAA4C,KAAK,CAAC,aAAa,GA6C9D","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport { EuiKeyPadMenu, EuiKeyPadMenuItem } from '@elastic/eui';\nimport { FormattedMessage } from '@kbn/i18n/react';\nimport React from 'react';\nimport {\n  InfraMetricInput,\n  InfraMetricType,\n  InfraNodeType,\n  InfraPathInput,\n} from '../../graphql/types';\n\ninterface Props {\n  nodeType: InfraNodeType;\n  changeNodeType: (nodeType: InfraNodeType) => void;\n  changeGroupBy: (groupBy: InfraPathInput[]) => void;\n  changeMetric: (metric: InfraMetricInput) => void;\n}\n\nexport class WaffleNodeTypeSwitcher extends React.PureComponent<Props> {\n  public render() {\n    return (\n      <EuiKeyPadMenu>\n        <EuiKeyPadMenuItem\n          label={\n            <FormattedMessage\n              id=\"xpack.infra.waffle.nodeTypeSwitcher.hostsLabel\"\n              defaultMessage=\"Hosts\"\n            />\n          }\n          onClick={this.handleClick(InfraNodeType.host)}\n        >\n          <img\n            src=\"../plugins/infra/images/hosts.svg\"\n            role=\"presentation\"\n            alt=\"\"\n            className=\"euiIcon euiIcon--large\"\n          />\n        </EuiKeyPadMenuItem>\n        <EuiKeyPadMenuItem label=\"Kubernetes\" onClick={this.handleClick(InfraNodeType.pod)}>\n          <img\n            src=\"../plugins/infra/images/k8.svg\"\n            role=\"presentation\"\n            alt=\"\"\n            className=\"euiIcon euiIcon--large\"\n          />\n        </EuiKeyPadMenuItem>\n        <EuiKeyPadMenuItem label=\"Docker\" onClick={this.handleClick(InfraNodeType.container)}>\n          <img\n            src=\"../plugins/infra/images/docker.svg\"\n            role=\"presentation\"\n            alt=\"\"\n            className=\"euiIcon euiIcon--large\"\n          />\n        </EuiKeyPadMenuItem>\n      </EuiKeyPadMenu>\n    );\n  }\n\n  private handleClick = (nodeType: InfraNodeType) => () => {\n    this.props.changeNodeType(nodeType);\n    this.props.changeGroupBy([]);\n    this.props.changeMetric({ type: InfraMetricType.cpu });\n  };\n}\n"]}]}