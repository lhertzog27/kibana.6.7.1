{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/components/auto_sizer.tsx","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/components/auto_sizer.tsx","mtime":1567631711978},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport * as tslib_1 from \"tslib\";\nimport isEqual from 'lodash/fp/isEqual';\nimport React from 'react';\nimport ResizeObserver from 'resize-observer-polyfill';\nvar AutoSizer = /** @class */ (function (_super) {\n    tslib_1.__extends(AutoSizer, _super);\n    function AutoSizer(props) {\n        var _this = _super.call(this, props) || this;\n        _this.element = null;\n        _this.resizeObserver = null;\n        _this.windowWidth = -1;\n        _this.state = {\n            boundsMeasurement: {\n                height: void 0,\n                width: void 0,\n            },\n            contentMeasurement: {\n                height: void 0,\n                width: void 0,\n            },\n        };\n        _this.measure = function (entry) {\n            if (!_this.element) {\n                return;\n            }\n            var _a = _this.props, _b = _a.content, content = _b === void 0 ? true : _b, _c = _a.bounds, bounds = _c === void 0 ? false : _c;\n            var _d = _this.state, previousBoundsMeasurement = _d.boundsMeasurement, previousContentMeasurement = _d.contentMeasurement;\n            var boundsRect = bounds ? _this.element.getBoundingClientRect() : null;\n            var boundsMeasurement = boundsRect\n                ? {\n                    height: _this.element.getBoundingClientRect().height,\n                    width: _this.element.getBoundingClientRect().width,\n                }\n                : previousBoundsMeasurement;\n            if (_this.props.detectAnyWindowResize &&\n                boundsMeasurement &&\n                boundsMeasurement.width &&\n                _this.windowWidth !== -1 &&\n                _this.windowWidth > window.innerWidth) {\n                var gap = _this.windowWidth - window.innerWidth;\n                boundsMeasurement.width = boundsMeasurement.width - gap;\n            }\n            _this.windowWidth = window.innerWidth;\n            var contentRect = content && entry ? entry.contentRect : null;\n            var contentMeasurement = contentRect && entry\n                ? {\n                    height: entry.contentRect.height,\n                    width: entry.contentRect.width,\n                }\n                : previousContentMeasurement;\n            if (isEqual(boundsMeasurement, previousBoundsMeasurement) &&\n                isEqual(contentMeasurement, previousContentMeasurement)) {\n                return;\n            }\n            requestAnimationFrame(function () {\n                if (!_this.resizeObserver) {\n                    return;\n                }\n                _this.setState({ boundsMeasurement: boundsMeasurement, contentMeasurement: contentMeasurement });\n                if (_this.props.onResize) {\n                    _this.props.onResize({\n                        bounds: boundsMeasurement,\n                        content: contentMeasurement,\n                    });\n                }\n            });\n        };\n        _this.updateMeasurement = function () {\n            window.setTimeout(function () {\n                _this.measure(null);\n            }, 0);\n        };\n        _this.storeRef = function (element) {\n            if (_this.element && _this.resizeObserver) {\n                _this.resizeObserver.unobserve(_this.element);\n            }\n            if (element && _this.resizeObserver) {\n                _this.resizeObserver.observe(element);\n            }\n            _this.element = element;\n        };\n        if (_this.props.detectAnyWindowResize) {\n            window.addEventListener('resize', _this.updateMeasurement);\n        }\n        _this.resizeObserver = new ResizeObserver(function (entries) {\n            entries.forEach(function (entry) {\n                if (entry.target === _this.element) {\n                    _this.measure(entry);\n                }\n            });\n        });\n        return _this;\n    }\n    AutoSizer.prototype.componentWillUnmount = function () {\n        if (this.resizeObserver) {\n            this.resizeObserver.disconnect();\n            this.resizeObserver = null;\n        }\n        if (this.props.detectAnyWindowResize) {\n            window.removeEventListener('resize', this.updateMeasurement);\n        }\n    };\n    AutoSizer.prototype.render = function () {\n        var children = this.props.children;\n        var _a = this.state, boundsMeasurement = _a.boundsMeasurement, contentMeasurement = _a.contentMeasurement;\n        return children({\n            bounds: boundsMeasurement,\n            content: contentMeasurement,\n            measureRef: this.storeRef,\n        });\n    };\n    return AutoSizer;\n}(React.PureComponent));\nexport { AutoSizer };\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/components/auto_sizer.tsx","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/components/auto_sizer.tsx"],"names":[],"mappings":"AAAA;;;;GAIG;;AAEH,OAAO,OAAO,MAAM,mBAAmB,CAAC;AACxC,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,cAAc,MAAM,0BAA0B,CAAC;AA2BtD;IAA+B,qCAAmD;IAgBhF,mBAAY,KAAqB;QAAjC,YACE,kBAAM,KAAK,CAAC,SAWb;QA3BM,aAAO,GAAuB,IAAI,CAAC;QACnC,oBAAc,GAA0B,IAAI,CAAC;QAC7C,iBAAW,GAAW,CAAC,CAAC,CAAC;QAEhB,WAAK,GAAG;YACtB,iBAAiB,EAAE;gBACjB,MAAM,EAAE,KAAK,CAAC;gBACd,KAAK,EAAE,KAAK,CAAC;aACd;YACD,kBAAkB,EAAE;gBAClB,MAAM,EAAE,KAAK,CAAC;gBACd,KAAK,EAAE,KAAK,CAAC;aACd;SACF,CAAC;QA0BK,aAAO,GAAG,UAAC,KAAiC;YACjD,IAAI,CAAC,KAAI,CAAC,OAAO,EAAE;gBACjB,OAAO;aACR;YAEK,IAAA,gBAA+C,EAA7C,eAAc,EAAd,mCAAc,EAAE,cAAc,EAAd,mCAAc,CAAgB;YAChD,IAAA,gBAGQ,EAFZ,gDAA4C,EAC5C,kDAA8C,CACjC;YAEf,IAAM,UAAU,GAAG,MAAM,CAAC,CAAC,CAAC,KAAI,CAAC,OAAO,CAAC,qBAAqB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;YACxE,IAAM,iBAAiB,GAAG,UAAU;gBAClC,CAAC,CAAC;oBACE,MAAM,EAAE,KAAI,CAAC,OAAO,CAAC,qBAAqB,EAAE,CAAC,MAAM;oBACnD,KAAK,EAAE,KAAI,CAAC,OAAO,CAAC,qBAAqB,EAAE,CAAC,KAAK;iBAClD;gBACH,CAAC,CAAC,yBAAyB,CAAC;YAE9B,IACE,KAAI,CAAC,KAAK,CAAC,qBAAqB;gBAChC,iBAAiB;gBACjB,iBAAiB,CAAC,KAAK;gBACvB,KAAI,CAAC,WAAW,KAAK,CAAC,CAAC;gBACvB,KAAI,CAAC,WAAW,GAAG,MAAM,CAAC,UAAU,EACpC;gBACA,IAAM,GAAG,GAAG,KAAI,CAAC,WAAW,GAAG,MAAM,CAAC,UAAU,CAAC;gBACjD,iBAAiB,CAAC,KAAK,GAAG,iBAAiB,CAAC,KAAK,GAAG,GAAG,CAAC;aACzD;YACD,KAAI,CAAC,WAAW,GAAG,MAAM,CAAC,UAAU,CAAC;YACrC,IAAM,WAAW,GAAG,OAAO,IAAI,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC;YAChE,IAAM,kBAAkB,GACtB,WAAW,IAAI,KAAK;gBAClB,CAAC,CAAC;oBACE,MAAM,EAAE,KAAK,CAAC,WAAW,CAAC,MAAM;oBAChC,KAAK,EAAE,KAAK,CAAC,WAAW,CAAC,KAAK;iBAC/B;gBACH,CAAC,CAAC,0BAA0B,CAAC;YAEjC,IACE,OAAO,CAAC,iBAAiB,EAAE,yBAAyB,CAAC;gBACrD,OAAO,CAAC,kBAAkB,EAAE,0BAA0B,CAAC,EACvD;gBACA,OAAO;aACR;YAED,qBAAqB,CAAC;gBACpB,IAAI,CAAC,KAAI,CAAC,cAAc,EAAE;oBACxB,OAAO;iBACR;gBAED,KAAI,CAAC,QAAQ,CAAC,EAAE,iBAAiB,mBAAA,EAAE,kBAAkB,oBAAA,EAAE,CAAC,CAAC;gBAEzD,IAAI,KAAI,CAAC,KAAK,CAAC,QAAQ,EAAE;oBACvB,KAAI,CAAC,KAAK,CAAC,QAAQ,CAAC;wBAClB,MAAM,EAAE,iBAAiB;wBACzB,OAAO,EAAE,kBAAkB;qBAC5B,CAAC,CAAC;iBACJ;YACH,CAAC,CAAC,CAAC;QACL,CAAC,CAAC;QAaM,uBAAiB,GAAG;YAC1B,MAAM,CAAC,UAAU,CAAC;gBAChB,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACrB,CAAC,EAAE,CAAC,CAAC,CAAC;QACR,CAAC,CAAC;QAEM,cAAQ,GAAG,UAAC,OAA2B;YAC7C,IAAI,KAAI,CAAC,OAAO,IAAI,KAAI,CAAC,cAAc,EAAE;gBACvC,KAAI,CAAC,cAAc,CAAC,SAAS,CAAC,KAAI,CAAC,OAAO,CAAC,CAAC;aAC7C;YAED,IAAI,OAAO,IAAI,KAAI,CAAC,cAAc,EAAE;gBAClC,KAAI,CAAC,cAAc,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;aACtC;YAED,KAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACzB,CAAC,CAAC;QA/GA,IAAI,KAAI,CAAC,KAAK,CAAC,qBAAqB,EAAE;YACpC,MAAM,CAAC,gBAAgB,CAAC,QAAQ,EAAE,KAAI,CAAC,iBAAiB,CAAC,CAAC;SAC3D;QACD,KAAI,CAAC,cAAc,GAAG,IAAI,cAAc,CAAC,UAAA,OAAO;YAC9C,OAAO,CAAC,OAAO,CAAC,UAAA,KAAK;gBACnB,IAAI,KAAK,CAAC,MAAM,KAAK,KAAI,CAAC,OAAO,EAAE;oBACjC,KAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;iBACrB;YACH,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;;IACL,CAAC;IAEM,wCAAoB,GAA3B;QACE,IAAI,IAAI,CAAC,cAAc,EAAE;YACvB,IAAI,CAAC,cAAc,CAAC,UAAU,EAAE,CAAC;YACjC,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;SAC5B;QACD,IAAI,IAAI,CAAC,KAAK,CAAC,qBAAqB,EAAE;YACpC,MAAM,CAAC,mBAAmB,CAAC,QAAQ,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;SAC9D;IACH,CAAC;IAgEM,0BAAM,GAAb;QACU,IAAA,8BAAQ,CAAgB;QAC1B,IAAA,eAAsD,EAApD,wCAAiB,EAAE,0CAAkB,CAAgB;QAE7D,OAAO,QAAQ,CAAC;YACd,MAAM,EAAE,iBAAiB;YACzB,OAAO,EAAE,kBAAkB;YAC3B,UAAU,EAAE,IAAI,CAAC,QAAQ;SAC1B,CAAC,CAAC;IACL,CAAC;IAmBH,gBAAC;AAAD,CAAC,AAlID,CAA+B,KAAK,CAAC,aAAa,GAkIjD","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport isEqual from 'lodash/fp/isEqual';\nimport React from 'react';\nimport ResizeObserver from 'resize-observer-polyfill';\n\ninterface Measurement {\n  width?: number;\n  height?: number;\n}\n\ninterface Measurements {\n  bounds: Measurement;\n  content: Measurement;\n}\n\ninterface AutoSizerProps {\n  detectAnyWindowResize?: boolean;\n  bounds?: boolean;\n  content?: boolean;\n  onResize?: (size: Measurements) => void;\n  children: (\n    args: { measureRef: (instance: HTMLElement | null) => any } & Measurements\n  ) => React.ReactNode;\n}\n\ninterface AutoSizerState {\n  boundsMeasurement: Measurement;\n  contentMeasurement: Measurement;\n}\n\nexport class AutoSizer extends React.PureComponent<AutoSizerProps, AutoSizerState> {\n  public element: HTMLElement | null = null;\n  public resizeObserver: ResizeObserver | null = null;\n  public windowWidth: number = -1;\n\n  public readonly state = {\n    boundsMeasurement: {\n      height: void 0,\n      width: void 0,\n    },\n    contentMeasurement: {\n      height: void 0,\n      width: void 0,\n    },\n  };\n\n  constructor(props: AutoSizerProps) {\n    super(props);\n    if (this.props.detectAnyWindowResize) {\n      window.addEventListener('resize', this.updateMeasurement);\n    }\n    this.resizeObserver = new ResizeObserver(entries => {\n      entries.forEach(entry => {\n        if (entry.target === this.element) {\n          this.measure(entry);\n        }\n      });\n    });\n  }\n\n  public componentWillUnmount() {\n    if (this.resizeObserver) {\n      this.resizeObserver.disconnect();\n      this.resizeObserver = null;\n    }\n    if (this.props.detectAnyWindowResize) {\n      window.removeEventListener('resize', this.updateMeasurement);\n    }\n  }\n\n  public measure = (entry: ResizeObserverEntry | null) => {\n    if (!this.element) {\n      return;\n    }\n\n    const { content = true, bounds = false } = this.props;\n    const {\n      boundsMeasurement: previousBoundsMeasurement,\n      contentMeasurement: previousContentMeasurement,\n    } = this.state;\n\n    const boundsRect = bounds ? this.element.getBoundingClientRect() : null;\n    const boundsMeasurement = boundsRect\n      ? {\n          height: this.element.getBoundingClientRect().height,\n          width: this.element.getBoundingClientRect().width,\n        }\n      : previousBoundsMeasurement;\n\n    if (\n      this.props.detectAnyWindowResize &&\n      boundsMeasurement &&\n      boundsMeasurement.width &&\n      this.windowWidth !== -1 &&\n      this.windowWidth > window.innerWidth\n    ) {\n      const gap = this.windowWidth - window.innerWidth;\n      boundsMeasurement.width = boundsMeasurement.width - gap;\n    }\n    this.windowWidth = window.innerWidth;\n    const contentRect = content && entry ? entry.contentRect : null;\n    const contentMeasurement =\n      contentRect && entry\n        ? {\n            height: entry.contentRect.height,\n            width: entry.contentRect.width,\n          }\n        : previousContentMeasurement;\n\n    if (\n      isEqual(boundsMeasurement, previousBoundsMeasurement) &&\n      isEqual(contentMeasurement, previousContentMeasurement)\n    ) {\n      return;\n    }\n\n    requestAnimationFrame(() => {\n      if (!this.resizeObserver) {\n        return;\n      }\n\n      this.setState({ boundsMeasurement, contentMeasurement });\n\n      if (this.props.onResize) {\n        this.props.onResize({\n          bounds: boundsMeasurement,\n          content: contentMeasurement,\n        });\n      }\n    });\n  };\n\n  public render() {\n    const { children } = this.props;\n    const { boundsMeasurement, contentMeasurement } = this.state;\n\n    return children({\n      bounds: boundsMeasurement,\n      content: contentMeasurement,\n      measureRef: this.storeRef,\n    });\n  }\n\n  private updateMeasurement = () => {\n    window.setTimeout(() => {\n      this.measure(null);\n    }, 0);\n  };\n\n  private storeRef = (element: HTMLElement | null) => {\n    if (this.element && this.resizeObserver) {\n      this.resizeObserver.unobserve(this.element);\n    }\n\n    if (element && this.resizeObserver) {\n      this.resizeObserver.observe(element);\n    }\n\n    this.element = element;\n  };\n}\n"]}]}