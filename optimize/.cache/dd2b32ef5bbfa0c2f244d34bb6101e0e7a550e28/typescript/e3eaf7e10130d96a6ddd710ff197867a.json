{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/components/waffle/waffle_group_by_controls.tsx","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/components/waffle/waffle_group_by_controls.tsx","mtime":1567631711983},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport * as tslib_1 from \"tslib\";\nvar _a;\nimport { EuiBadge, EuiContextMenu, EuiFilterButton, EuiFilterGroup, EuiPopover, } from '@elastic/eui';\nimport { FormattedMessage, injectI18n } from '@kbn/i18n/react';\nimport React from 'react';\nimport { InfraNodeType, InfraPathType } from '../../graphql/types';\nimport { CustomFieldPanel } from './custom_field_panel';\nimport { fieldToName } from './lib/field_to_display_name';\nvar createFieldToOptionMapper = function (intl) { return function (field) { return ({\n    text: fieldToName(field, intl),\n    type: InfraPathType.terms,\n    field: field,\n}); }; };\nvar OPTIONS;\nvar getOptions = function (nodeType, intl) {\n    var _a;\n    if (!OPTIONS) {\n        var mapFieldToOption = createFieldToOptionMapper(intl);\n        OPTIONS = (_a = {},\n            _a[InfraNodeType.pod] = ['kubernetes.namespace', 'kubernetes.node.name'].map(mapFieldToOption),\n            _a[InfraNodeType.container] = [\n                'host.name',\n                'meta.cloud.availability_zone',\n                'meta.cloud.machine_type',\n                'meta.cloud.project_id',\n                'meta.cloud.provider',\n            ].map(mapFieldToOption),\n            _a[InfraNodeType.host] = [\n                'meta.cloud.availability_zone',\n                'meta.cloud.machine_type',\n                'meta.cloud.project_id',\n                'meta.cloud.provider',\n            ].map(mapFieldToOption),\n            _a);\n    }\n    return OPTIONS[nodeType];\n};\nvar initialState = {\n    isPopoverOpen: false,\n};\nexport var WaffleGroupByControls = injectI18n((_a = /** @class */ (function (_super) {\n        tslib_1.__extends(class_1, _super);\n        function class_1() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this.state = initialState;\n            _this.handleRemove = function (field) { return function () {\n                var groupBy = _this.props.groupBy;\n                _this.props.onChange(groupBy.filter(function (g) { return g.field !== field; }));\n                var options = _this.props.customOptions.filter(function (g) { return g.field !== field; });\n                _this.props.onChangeCustomOptions(options);\n                // We need to close the panel after we rmeove the pill icon otherwise\n                // it will remain open because the click is still captured by the EuiFilterButton\n                setTimeout(function () { return _this.handleClose(); });\n            }; };\n            _this.handleClose = function () {\n                _this.setState({ isPopoverOpen: false });\n            };\n            _this.handleToggle = function () {\n                _this.setState(function (state) { return ({ isPopoverOpen: !state.isPopoverOpen }); });\n            };\n            _this.handleCustomField = function (field) {\n                var options = tslib_1.__spread(_this.props.customOptions, [\n                    {\n                        text: field,\n                        field: field,\n                        type: InfraPathType.custom,\n                    },\n                ]);\n                _this.props.onChangeCustomOptions(options);\n                var fn = _this.handleClick(field);\n                fn();\n            };\n            _this.handleClick = function (field) { return function () {\n                var groupBy = _this.props.groupBy;\n                if (groupBy.some(function (g) { return g.field === field; })) {\n                    _this.handleRemove(field)();\n                }\n                else if (_this.props.groupBy.length < 2) {\n                    _this.props.onChange(tslib_1.__spread(groupBy, [{ type: InfraPathType.terms, field: field }]));\n                    _this.handleClose();\n                }\n            }; };\n            return _this;\n        }\n        class_1.prototype.render = function () {\n            var _this = this;\n            var _a = this.props, nodeType = _a.nodeType, groupBy = _a.groupBy, intl = _a.intl;\n            var options = getOptions(nodeType, intl).concat(this.props.customOptions);\n            if (!options.length) {\n                throw Error(intl.formatMessage({\n                    id: 'xpack.infra.waffle.unableToSelectGroupErrorMessage',\n                    defaultMessage: 'Unable to select group by options for {nodeType}',\n                }, {\n                    nodeType: nodeType,\n                }));\n            }\n            var panels = [\n                {\n                    id: 'firstPanel',\n                    title: intl.formatMessage({\n                        id: 'xpack.infra.waffle.selectTwoGroupingsTitle',\n                        defaultMessage: 'Select up to two groupings',\n                    }),\n                    items: tslib_1.__spread([\n                        {\n                            name: intl.formatMessage({\n                                id: 'xpack.infra.waffle.customGroupByOptionName',\n                                defaultMessage: 'Custom Field',\n                            }),\n                            icon: 'empty',\n                            panel: 'customPanel',\n                        }\n                    ], options.map(function (o) {\n                        var icon = groupBy.some(function (g) { return g.field === o.field; }) ? 'check' : 'empty';\n                        var panel = {\n                            name: o.text,\n                            onClick: _this.handleClick(o.field),\n                            icon: icon,\n                        };\n                        return panel;\n                    })),\n                },\n                {\n                    id: 'customPanel',\n                    title: intl.formatMessage({\n                        id: 'xpack.infra.waffle.customGroupByPanelTitle',\n                        defaultMessage: 'Group By Custom Field',\n                    }),\n                    content: (React.createElement(CustomFieldPanel, { onSubmit: this.handleCustomField, fields: this.props.fields })),\n                },\n            ];\n            var buttonBody = groupBy.length > 0 ? (groupBy\n                .map(function (g) { return options.find(function (o) { return o.field === g.field; }); })\n                .filter(function (o) { return o != null; })\n                // In this map the `o && o.field` is totally unnecessary but Typescript is\n                // too stupid to realize that the filter above prevents the next map from being null\n                .map(function (o) { return (React.createElement(EuiBadge, { key: o && o.field, iconType: \"cross\", iconOnClick: _this.handleRemove((o && o.field) || ''), iconOnClickAriaLabel: intl.formatMessage({\n                    id: 'xpack.infra.waffle.removeGroupingItemAriaLabel',\n                    defaultMessage: 'Remove {groupingItem} grouping',\n                }, {\n                    groupingItem: o && o.text,\n                }) }, o && o.text)); })) : (React.createElement(FormattedMessage, { id: \"xpack.infra.waffle.groupByAllTitle\", defaultMessage: \"All\" }));\n            var button = (React.createElement(EuiFilterButton, { iconType: \"arrowDown\", onClick: this.handleToggle },\n                React.createElement(FormattedMessage, { id: \"xpack.infra.waffle.groupByButtonLabel\", defaultMessage: \"Group By: \" }),\n                buttonBody));\n            return (React.createElement(EuiFilterGroup, null,\n                React.createElement(EuiPopover, { isOpen: this.state.isPopoverOpen, id: \"groupByPanel\", button: button, panelPaddingSize: \"none\", closePopover: this.handleClose },\n                    React.createElement(EuiContextMenu, { initialPanelId: \"firstPanel\", panels: panels }))));\n        };\n        return class_1;\n    }(React.PureComponent)),\n    _a.displayName = 'WaffleGroupByControls',\n    _a));\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/components/waffle/waffle_group_by_controls.tsx","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/components/waffle/waffle_group_by_controls.tsx"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport {\n  EuiBadge,\n  EuiContextMenu,\n  EuiContextMenuPanelDescriptor,\n  EuiContextMenuPanelItemDescriptor,\n  EuiFilterButton,\n  EuiFilterGroup,\n  EuiPopover,\n} from '@elastic/eui';\nimport { FormattedMessage, InjectedIntl, injectI18n } from '@kbn/i18n/react';\nimport React from 'react';\nimport { InfraIndexField, InfraNodeType, InfraPathInput, InfraPathType } from '../../graphql/types';\nimport { InfraGroupByOptions } from '../../lib/lib';\nimport { CustomFieldPanel } from './custom_field_panel';\nimport { fieldToName } from './lib/field_to_display_name';\n\ninterface Props {\n  nodeType: InfraNodeType;\n  groupBy: InfraPathInput[];\n  onChange: (groupBy: InfraPathInput[]) => void;\n  onChangeCustomOptions: (options: InfraGroupByOptions[]) => void;\n  fields: InfraIndexField[];\n  intl: InjectedIntl;\n  customOptions: InfraGroupByOptions[];\n}\n\nconst createFieldToOptionMapper = (intl: InjectedIntl) => (field: string) => ({\n  text: fieldToName(field, intl),\n  type: InfraPathType.terms,\n  field,\n});\n\nlet OPTIONS: { [P in InfraNodeType]: InfraGroupByOptions[] };\nconst getOptions = (\n  nodeType: InfraNodeType,\n  intl: InjectedIntl\n): Array<{ text: string; type: InfraPathType; field: string }> => {\n  if (!OPTIONS) {\n    const mapFieldToOption = createFieldToOptionMapper(intl);\n    OPTIONS = {\n      [InfraNodeType.pod]: ['kubernetes.namespace', 'kubernetes.node.name'].map(mapFieldToOption),\n      [InfraNodeType.container]: [\n        'host.name',\n        'meta.cloud.availability_zone',\n        'meta.cloud.machine_type',\n        'meta.cloud.project_id',\n        'meta.cloud.provider',\n      ].map(mapFieldToOption),\n      [InfraNodeType.host]: [\n        'meta.cloud.availability_zone',\n        'meta.cloud.machine_type',\n        'meta.cloud.project_id',\n        'meta.cloud.provider',\n      ].map(mapFieldToOption),\n    };\n  }\n\n  return OPTIONS[nodeType];\n};\n\nconst initialState = {\n  isPopoverOpen: false,\n};\n\ntype State = Readonly<typeof initialState>;\n\nexport const WaffleGroupByControls = injectI18n(\n  class extends React.PureComponent<Props, State> {\n    public static displayName = 'WaffleGroupByControls';\n    public readonly state: State = initialState;\n\n    public render() {\n      const { nodeType, groupBy, intl } = this.props;\n      const options = getOptions(nodeType, intl).concat(this.props.customOptions);\n\n      if (!options.length) {\n        throw Error(\n          intl.formatMessage(\n            {\n              id: 'xpack.infra.waffle.unableToSelectGroupErrorMessage',\n              defaultMessage: 'Unable to select group by options for {nodeType}',\n            },\n            {\n              nodeType,\n            }\n          )\n        );\n      }\n      const panels: EuiContextMenuPanelDescriptor[] = [\n        {\n          id: 'firstPanel',\n          title: intl.formatMessage({\n            id: 'xpack.infra.waffle.selectTwoGroupingsTitle',\n            defaultMessage: 'Select up to two groupings',\n          }),\n          items: [\n            {\n              name: intl.formatMessage({\n                id: 'xpack.infra.waffle.customGroupByOptionName',\n                defaultMessage: 'Custom Field',\n              }),\n              icon: 'empty',\n              panel: 'customPanel',\n            },\n            ...options.map(o => {\n              const icon = groupBy.some(g => g.field === o.field) ? 'check' : 'empty';\n              const panel = {\n                name: o.text,\n                onClick: this.handleClick(o.field),\n                icon,\n              } as EuiContextMenuPanelItemDescriptor;\n              return panel;\n            }),\n          ],\n        },\n        {\n          id: 'customPanel',\n          title: intl.formatMessage({\n            id: 'xpack.infra.waffle.customGroupByPanelTitle',\n            defaultMessage: 'Group By Custom Field',\n          }),\n          content: (\n            <CustomFieldPanel onSubmit={this.handleCustomField} fields={this.props.fields} />\n          ),\n        },\n      ];\n      const buttonBody =\n        groupBy.length > 0 ? (\n          groupBy\n            .map(g => options.find(o => o.field === g.field))\n            .filter(o => o != null)\n            // In this map the `o && o.field` is totally unnecessary but Typescript is\n            // too stupid to realize that the filter above prevents the next map from being null\n            .map(o => (\n              <EuiBadge\n                key={o && o.field}\n                iconType=\"cross\"\n                iconOnClick={this.handleRemove((o && o.field) || '')}\n                iconOnClickAriaLabel={intl.formatMessage(\n                  {\n                    id: 'xpack.infra.waffle.removeGroupingItemAriaLabel',\n                    defaultMessage: 'Remove {groupingItem} grouping',\n                  },\n                  {\n                    groupingItem: o && o.text,\n                  }\n                )}\n              >\n                {o && o.text}\n              </EuiBadge>\n            ))\n        ) : (\n          <FormattedMessage id=\"xpack.infra.waffle.groupByAllTitle\" defaultMessage=\"All\" />\n        );\n      const button = (\n        <EuiFilterButton iconType=\"arrowDown\" onClick={this.handleToggle}>\n          <FormattedMessage\n            id=\"xpack.infra.waffle.groupByButtonLabel\"\n            defaultMessage=\"Group By: \"\n          />\n          {buttonBody}\n        </EuiFilterButton>\n      );\n\n      return (\n        <EuiFilterGroup>\n          <EuiPopover\n            isOpen={this.state.isPopoverOpen}\n            id=\"groupByPanel\"\n            button={button}\n            panelPaddingSize=\"none\"\n            closePopover={this.handleClose}\n          >\n            <EuiContextMenu initialPanelId=\"firstPanel\" panels={panels} />\n          </EuiPopover>\n        </EuiFilterGroup>\n      );\n    }\n\n    private handleRemove = (field: string) => () => {\n      const { groupBy } = this.props;\n      this.props.onChange(groupBy.filter(g => g.field !== field));\n      const options = this.props.customOptions.filter(g => g.field !== field);\n      this.props.onChangeCustomOptions(options);\n      // We need to close the panel after we rmeove the pill icon otherwise\n      // it will remain open because the click is still captured by the EuiFilterButton\n      setTimeout(() => this.handleClose());\n    };\n\n    private handleClose = () => {\n      this.setState({ isPopoverOpen: false });\n    };\n\n    private handleToggle = () => {\n      this.setState(state => ({ isPopoverOpen: !state.isPopoverOpen }));\n    };\n\n    private handleCustomField = (field: string) => {\n      const options = [\n        ...this.props.customOptions,\n        {\n          text: field,\n          field,\n          type: InfraPathType.custom,\n        },\n      ];\n      this.props.onChangeCustomOptions(options);\n      const fn = this.handleClick(field);\n      fn();\n    };\n\n    private handleClick = (field: string) => () => {\n      const { groupBy } = this.props;\n      if (groupBy.some(g => g.field === field)) {\n        this.handleRemove(field)();\n      } else if (this.props.groupBy.length < 2) {\n        this.props.onChange([...groupBy, { type: InfraPathType.terms, field }]);\n        this.handleClose();\n      }\n    };\n  }\n);\n"]}]}