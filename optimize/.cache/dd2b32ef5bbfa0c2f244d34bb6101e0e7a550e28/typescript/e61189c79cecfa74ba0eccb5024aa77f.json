{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/apm/public/store/reactReduxRequest/transactionDistribution.tsx","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/apm/public/store/reactReduxRequest/transactionDistribution.tsx","mtime":1567631711872},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport React from 'react';\nimport { Request } from 'react-redux-request';\nimport { createSelector } from 'reselect';\nimport { loadTransactionDistribution } from '../../services/rest/apm/transaction_groups';\nimport { createInitialDataSelector } from './helpers';\nvar ID = 'transactionDistribution';\nvar INITIAL_DATA = { buckets: [], totalHits: 0, bucketSize: 0 };\nvar withInitialData = createInitialDataSelector(INITIAL_DATA);\nexport function getTransactionDistribution(state) {\n    return withInitialData(state.reactReduxRequest[ID]);\n}\nexport var getDefaultDistributionSample = createSelector(getTransactionDistribution, function (distribution) {\n    var _a = distribution.data.defaultSample, defaultSample = _a === void 0 ? {} : _a;\n    return {\n        traceId: defaultSample.traceId,\n        transactionId: defaultSample.transactionId\n    };\n});\nexport function TransactionDistributionRequest(_a) {\n    var urlParams = _a.urlParams, render = _a.render;\n    var serviceName = urlParams.serviceName, transactionType = urlParams.transactionType, transactionId = urlParams.transactionId, traceId = urlParams.traceId, start = urlParams.start, end = urlParams.end, transactionName = urlParams.transactionName, kuery = urlParams.kuery;\n    if (!(serviceName && transactionType && start && end && transactionName)) {\n        return null;\n    }\n    return (React.createElement(Request, { id: ID, fn: loadTransactionDistribution, args: [\n            {\n                serviceName: serviceName,\n                transactionType: transactionType,\n                transactionId: transactionId,\n                traceId: traceId,\n                start: start,\n                end: end,\n                transactionName: transactionName,\n                kuery: kuery\n            }\n        ], selector: getTransactionDistribution, render: render }));\n}\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/apm/public/store/reactReduxRequest/transactionDistribution.tsx","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/apm/public/store/reactReduxRequest/transactionDistribution.tsx"],"names":[],"mappings":"AAAA;;;;GAIG;AAEH,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,OAAO,EAAgC,MAAM,qBAAqB,CAAC;AAC5E,OAAO,EAAE,cAAc,EAAE,MAAM,UAAU,CAAC;AAE1C,OAAO,EAAE,2BAA2B,EAAE,MAAM,4CAA4C,CAAC;AAGzF,OAAO,EAAE,yBAAyB,EAAE,MAAM,WAAW,CAAC;AAEtD,IAAM,EAAE,GAAG,yBAAyB,CAAC;AACrC,IAAM,YAAY,GAAG,EAAE,OAAO,EAAE,EAAE,EAAE,SAAS,EAAE,CAAC,EAAE,UAAU,EAAE,CAAC,EAAE,CAAC;AAClE,IAAM,eAAe,GAAG,yBAAyB,CAE/C,YAAY,CAAC,CAAC;AAEhB,MAAM,UAAU,0BAA0B,CACxC,KAAkB;IAElB,OAAO,eAAe,CAAC,KAAK,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAC,CAAC;AACtD,CAAC;AAED,MAAM,CAAC,IAAM,4BAA4B,GAAG,cAAc,CACxD,0BAA0B,EAC1B,UAAA,YAAY;IACF,IAAA,oCAAkB,EAAlB,uCAAkB,CAAuB;IACjD,OAAO;QACL,OAAO,EAAE,aAAa,CAAC,OAAO;QAC9B,aAAa,EAAE,aAAa,CAAC,aAAa;KAC3C,CAAC;AACJ,CAAC,CACF,CAAC;AAEF,MAAM,UAAU,8BAA8B,CAAC,EAM9C;QALC,wBAAS,EACT,kBAAM;IAMJ,IAAA,mCAAW,EACX,2CAAe,EACf,uCAAa,EACb,2BAAO,EACP,uBAAK,EACL,mBAAG,EACH,2CAAe,EACf,uBAAK,CACO;IAEd,IAAI,CAAC,CAAC,WAAW,IAAI,eAAe,IAAI,KAAK,IAAI,GAAG,IAAI,eAAe,CAAC,EAAE;QACxE,OAAO,IAAI,CAAC;KACb;IAED,OAAO,CACL,oBAAC,OAAO,IACN,EAAE,EAAE,EAAE,EACN,EAAE,EAAE,2BAA2B,EAC/B,IAAI,EAAE;YACJ;gBACE,WAAW,aAAA;gBACX,eAAe,iBAAA;gBACf,aAAa,eAAA;gBACb,OAAO,SAAA;gBACP,KAAK,OAAA;gBACL,GAAG,KAAA;gBACH,eAAe,iBAAA;gBACf,KAAK,OAAA;aACN;SACF,EACD,QAAQ,EAAE,0BAA0B,EACpC,MAAM,EAAE,MAAM,GACd,CACH,CAAC;AACJ,CAAC","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport React from 'react';\nimport { Request, RRRRender, RRRRenderResponse } from 'react-redux-request';\nimport { createSelector } from 'reselect';\nimport { ITransactionDistributionAPIResponse } from 'x-pack/plugins/apm/server/lib/transactions/distribution';\nimport { loadTransactionDistribution } from '../../services/rest/apm/transaction_groups';\nimport { IReduxState } from '../rootReducer';\nimport { IUrlParams } from '../urlParams';\nimport { createInitialDataSelector } from './helpers';\n\nconst ID = 'transactionDistribution';\nconst INITIAL_DATA = { buckets: [], totalHits: 0, bucketSize: 0 };\nconst withInitialData = createInitialDataSelector<\n  ITransactionDistributionAPIResponse\n>(INITIAL_DATA);\n\nexport function getTransactionDistribution(\n  state: IReduxState\n): RRRRenderResponse<ITransactionDistributionAPIResponse> {\n  return withInitialData(state.reactReduxRequest[ID]);\n}\n\nexport const getDefaultDistributionSample = createSelector(\n  getTransactionDistribution,\n  distribution => {\n    const { defaultSample = {} } = distribution.data;\n    return {\n      traceId: defaultSample.traceId,\n      transactionId: defaultSample.transactionId\n    };\n  }\n);\n\nexport function TransactionDistributionRequest({\n  urlParams,\n  render\n}: {\n  urlParams: IUrlParams;\n  render: RRRRender<ITransactionDistributionAPIResponse>;\n}) {\n  const {\n    serviceName,\n    transactionType,\n    transactionId,\n    traceId,\n    start,\n    end,\n    transactionName,\n    kuery\n  } = urlParams;\n\n  if (!(serviceName && transactionType && start && end && transactionName)) {\n    return null;\n  }\n\n  return (\n    <Request\n      id={ID}\n      fn={loadTransactionDistribution}\n      args={[\n        {\n          serviceName,\n          transactionType,\n          transactionId,\n          traceId,\n          start,\n          end,\n          transactionName,\n          kuery\n        }\n      ]}\n      selector={getTransactionDistribution}\n      render={render}\n    />\n  );\n}\n"]}]}