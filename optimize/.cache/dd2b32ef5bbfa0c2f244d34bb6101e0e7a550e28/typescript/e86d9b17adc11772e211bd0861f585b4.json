{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/src/ui/public/query_bar/lib/match_pairs.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/query_bar/lib/match_pairs.ts","mtime":1567631711750},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/**\n * This helper automatically handles matching pairs.\n * Specifically, it does the following:\n *\n * 1. If the key is a closer, and the character in front of the cursor is the\n *    same, simply move the cursor forward.\n * 2. If the key is an opener, insert the opener at the beginning of the\n *    selection, and the closer at the end of the selection, and move the\n *    selection forward.\n * 3. If the backspace is hit, and the characters before and after the cursor\n *    are a pair, remove both characters and move the cursor backward.\n */\nvar pairs = ['()', '[]', '{}', \"''\", '\"\"'];\nvar openers = pairs.map(function (pair) { return pair[0]; });\nvar closers = pairs.map(function (pair) { return pair[1]; });\nexport function matchPairs(_a) {\n    var value = _a.value, selectionStart = _a.selectionStart, selectionEnd = _a.selectionEnd, key = _a.key, metaKey = _a.metaKey, updateQuery = _a.updateQuery, preventDefault = _a.preventDefault;\n    if (shouldMoveCursorForward(key, value, selectionStart, selectionEnd)) {\n        preventDefault();\n        updateQuery(value, selectionStart + 1, selectionEnd + 1);\n    }\n    else if (shouldInsertMatchingCloser(key, value, selectionStart, selectionEnd)) {\n        preventDefault();\n        var newValue = value.substr(0, selectionStart) +\n            key +\n            value.substring(selectionStart, selectionEnd) +\n            closers[openers.indexOf(key)] +\n            value.substr(selectionEnd);\n        updateQuery(newValue, selectionStart + 1, selectionEnd + 1);\n    }\n    else if (shouldRemovePair(key, metaKey, value, selectionStart, selectionEnd)) {\n        preventDefault();\n        var newValue = value.substr(0, selectionEnd - 1) + value.substr(selectionEnd + 1);\n        updateQuery(newValue, selectionStart - 1, selectionEnd - 1);\n    }\n}\nfunction shouldMoveCursorForward(key, value, selectionStart, selectionEnd) {\n    if (!closers.includes(key)) {\n        return false;\n    }\n    // Never move selection forward for multi-character selections\n    if (selectionStart !== selectionEnd) {\n        return false;\n    }\n    // Move selection forward if the key is the same as the closer in front of the selection\n    return value.charAt(selectionEnd) === key;\n}\nfunction shouldInsertMatchingCloser(key, value, selectionStart, selectionEnd) {\n    if (!openers.includes(key)) {\n        return false;\n    }\n    // Always insert for multi-character selections\n    if (selectionStart !== selectionEnd) {\n        return true;\n    }\n    var precedingCharacter = value.charAt(selectionStart - 1);\n    var followingCharacter = value.charAt(selectionStart + 1);\n    // Don't insert if the preceding character is a backslash\n    if (precedingCharacter === '\\\\') {\n        return false;\n    }\n    // Don't insert if it's a quote and the either of the preceding/following characters is alphanumeric\n    return !(['\"', \"'\"].includes(key) &&\n        (isAlphanumeric(precedingCharacter) || isAlphanumeric(followingCharacter)));\n}\nfunction shouldRemovePair(key, metaKey, value, selectionStart, selectionEnd) {\n    if (key !== 'Backspace' || metaKey) {\n        return false;\n    }\n    // Never remove for multi-character selections\n    if (selectionStart !== selectionEnd) {\n        return false;\n    }\n    // Remove if the preceding/following characters are a pair\n    return pairs.includes(value.substr(selectionEnd - 1, 2));\n}\nfunction isAlphanumeric(value) {\n    if (value === void 0) { value = ''; }\n    return value.match(/[a-zA-Z0-9_]/);\n}\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/src/ui/public/query_bar/lib/match_pairs.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/src/ui/public/query_bar/lib/match_pairs.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/**\n * This helper automatically handles matching pairs.\n * Specifically, it does the following:\n *\n * 1. If the key is a closer, and the character in front of the cursor is the\n *    same, simply move the cursor forward.\n * 2. If the key is an opener, insert the opener at the beginning of the\n *    selection, and the closer at the end of the selection, and move the\n *    selection forward.\n * 3. If the backspace is hit, and the characters before and after the cursor\n *    are a pair, remove both characters and move the cursor backward.\n */\n\nconst pairs = ['()', '[]', '{}', `''`, '\"\"'];\nconst openers = pairs.map(pair => pair[0]);\nconst closers = pairs.map(pair => pair[1]);\n\ninterface MatchPairsOptions {\n  value: string;\n  selectionStart: number;\n  selectionEnd: number;\n  key: string;\n  metaKey: boolean;\n  updateQuery: (query: string, selectionStart: number, selectionEnd: number) => void;\n  preventDefault: () => void;\n}\n\nexport function matchPairs({\n  value,\n  selectionStart,\n  selectionEnd,\n  key,\n  metaKey,\n  updateQuery,\n  preventDefault,\n}: MatchPairsOptions) {\n  if (shouldMoveCursorForward(key, value, selectionStart, selectionEnd)) {\n    preventDefault();\n    updateQuery(value, selectionStart + 1, selectionEnd + 1);\n  } else if (shouldInsertMatchingCloser(key, value, selectionStart, selectionEnd)) {\n    preventDefault();\n    const newValue =\n      value.substr(0, selectionStart) +\n      key +\n      value.substring(selectionStart, selectionEnd) +\n      closers[openers.indexOf(key)] +\n      value.substr(selectionEnd);\n    updateQuery(newValue, selectionStart + 1, selectionEnd + 1);\n  } else if (shouldRemovePair(key, metaKey, value, selectionStart, selectionEnd)) {\n    preventDefault();\n    const newValue = value.substr(0, selectionEnd - 1) + value.substr(selectionEnd + 1);\n    updateQuery(newValue, selectionStart - 1, selectionEnd - 1);\n  }\n}\n\nfunction shouldMoveCursorForward(\n  key: string,\n  value: string,\n  selectionStart: number,\n  selectionEnd: number\n) {\n  if (!closers.includes(key)) {\n    return false;\n  }\n\n  // Never move selection forward for multi-character selections\n  if (selectionStart !== selectionEnd) {\n    return false;\n  }\n\n  // Move selection forward if the key is the same as the closer in front of the selection\n  return value.charAt(selectionEnd) === key;\n}\n\nfunction shouldInsertMatchingCloser(\n  key: string,\n  value: string,\n  selectionStart: number,\n  selectionEnd: number\n) {\n  if (!openers.includes(key)) {\n    return false;\n  }\n\n  // Always insert for multi-character selections\n  if (selectionStart !== selectionEnd) {\n    return true;\n  }\n\n  const precedingCharacter = value.charAt(selectionStart - 1);\n  const followingCharacter = value.charAt(selectionStart + 1);\n\n  // Don't insert if the preceding character is a backslash\n  if (precedingCharacter === '\\\\') {\n    return false;\n  }\n\n  // Don't insert if it's a quote and the either of the preceding/following characters is alphanumeric\n  return !(\n    ['\"', `'`].includes(key) &&\n    (isAlphanumeric(precedingCharacter) || isAlphanumeric(followingCharacter))\n  );\n}\n\nfunction shouldRemovePair(\n  key: string,\n  metaKey: boolean,\n  value: string,\n  selectionStart: number,\n  selectionEnd: number\n) {\n  if (key !== 'Backspace' || metaKey) {\n    return false;\n  }\n\n  // Never remove for multi-character selections\n  if (selectionStart !== selectionEnd) {\n    return false;\n  }\n\n  // Remove if the preceding/following characters are a pair\n  return pairs.includes(value.substr(selectionEnd - 1, 2));\n}\n\nfunction isAlphanumeric(value = '') {\n  return value.match(/[a-zA-Z0-9_]/);\n}\n"]}]}