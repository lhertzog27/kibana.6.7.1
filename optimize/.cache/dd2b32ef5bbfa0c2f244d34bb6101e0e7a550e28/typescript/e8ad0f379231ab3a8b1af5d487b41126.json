{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/utils/operation_status.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/utils/operation_status.ts","mtime":1567631711990},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport * as tslib_1 from \"tslib\";\nimport last from 'lodash/fp/last';\nvar isFailedStatus = function (status) { return status.status === 'failed'; };\nexport var createStatusSelectors = function (selectStatusHistory) { return ({\n    getIsInProgress: function () { return function (state) {\n        var lastStatus = last(selectStatusHistory(state));\n        return lastStatus ? lastStatus.status === 'in-progress' : false;\n    }; },\n    getHasSucceeded: function () { return function (state) {\n        var lastStatus = last(selectStatusHistory(state));\n        return lastStatus ? lastStatus.status === 'succeeded' : false;\n    }; },\n    getHasFailed: function () { return function (state) {\n        var lastStatus = last(selectStatusHistory(state));\n        return lastStatus ? lastStatus.status === 'failed' : false;\n    }; },\n    getLastFailureMessage: function () { return function (state) {\n        var lastStatus = last(selectStatusHistory(state).filter(isFailedStatus));\n        return lastStatus ? lastStatus.message : undefined;\n    }; },\n}); };\nexport var createStatusActions = function (updateStatusHistory) { return ({\n    startOperation: function (operation) {\n        return updateStatusHistory(function (statusHistory) { return tslib_1.__spread(statusHistory, [\n            {\n                operation: operation,\n                status: 'in-progress',\n                time: Date.now(),\n            },\n        ]); });\n    },\n    finishOperation: function (operation) {\n        return updateStatusHistory(function (statusHistory) { return tslib_1.__spread(statusHistory, [\n            {\n                operation: operation,\n                status: 'succeeded',\n                time: Date.now(),\n            },\n        ]); });\n    },\n    failOperation: function (operation, message) {\n        return updateStatusHistory(function (statusHistory) { return tslib_1.__spread(statusHistory, [\n            {\n                message: message,\n                operation: operation,\n                status: 'failed',\n                time: Date.now(),\n            },\n        ]); });\n    },\n}); };\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/utils/operation_status.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/utils/operation_status.ts"],"names":[],"mappings":"AAAA;;;;GAIG;;AAEH,OAAO,IAAI,MAAM,gBAAgB,CAAC;AAqBlC,IAAM,cAAc,GAAG,UACrB,MAA0B,IACI,OAAA,MAAM,CAAC,MAAM,KAAK,QAAQ,EAA1B,CAA0B,CAAC;AAY3D,MAAM,CAAC,IAAM,qBAAqB,GAAG,UACnC,mBAA8D,IAC3D,OAAA,CAAC;IACJ,eAAe,EAAE,cAAM,OAAA,UAAC,KAAQ;QAC9B,IAAM,UAAU,GAAG,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC,CAAC;QACpD,OAAO,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,MAAM,KAAK,aAAa,CAAC,CAAC,CAAC,KAAK,CAAC;IAClE,CAAC,EAHsB,CAGtB;IACD,eAAe,EAAE,cAAM,OAAA,UAAC,KAAQ;QAC9B,IAAM,UAAU,GAAG,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC,CAAC;QACpD,OAAO,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,MAAM,KAAK,WAAW,CAAC,CAAC,CAAC,KAAK,CAAC;IAChE,CAAC,EAHsB,CAGtB;IACD,YAAY,EAAE,cAAM,OAAA,UAAC,KAAQ;QAC3B,IAAM,UAAU,GAAG,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC,CAAC;QACpD,OAAO,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,MAAM,KAAK,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC;IAC7D,CAAC,EAHmB,CAGnB;IACD,qBAAqB,EAAE,cAAM,OAAA,UAAC,KAAQ;QACpC,IAAM,UAAU,GAAG,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC;QAC3E,OAAO,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC;IACrD,CAAC,EAH4B,CAG5B;CACF,CAAC,EAjBG,CAiBH,CAAC;AAMH,MAAM,CAAC,IAAM,mBAAmB,GAAG,UACjC,mBAAmF,IAChF,OAAA,CAAC;IACJ,cAAc,EAAE,UAAC,SAAqB;QACpC,OAAA,mBAAmB,CAAC,UAAA,aAAa,IAAI,wBAChC,aAAa;YAChB;gBACE,SAAS,WAAA;gBACT,MAAM,EAAE,aAAa;gBACrB,IAAI,EAAE,IAAI,CAAC,GAAG,EAAE;aACjB;YANkC,CAOpC,CAAC;IAPF,CAOE;IACJ,eAAe,EAAE,UAAC,SAAqB;QACrC,OAAA,mBAAmB,CAAC,UAAA,aAAa,IAAI,wBAChC,aAAa;YAChB;gBACE,SAAS,WAAA;gBACT,MAAM,EAAE,WAAW;gBACnB,IAAI,EAAE,IAAI,CAAC,GAAG,EAAE;aACjB;YANkC,CAOpC,CAAC;IAPF,CAOE;IACJ,aAAa,EAAE,UAAC,SAAqB,EAAE,OAAe;QACpD,OAAA,mBAAmB,CAAC,UAAA,aAAa,IAAI,wBAChC,aAAa;YAChB;gBACE,OAAO,SAAA;gBACP,SAAS,WAAA;gBACT,MAAM,EAAE,QAAQ;gBAChB,IAAI,EAAE,IAAI,CAAC,GAAG,EAAE;aACjB;YAPkC,CAQpC,CAAC;IARF,CAQE;CACL,CAAC,EA7BG,CA6BH,CAAC","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport last from 'lodash/fp/last';\n\nexport interface InProgressStatus<O extends Operation<string, any>> {\n  operation: O;\n  status: 'in-progress';\n  time: number;\n}\n\nexport interface SucceededStatus<O extends Operation<string, any>> {\n  operation: O;\n  status: 'succeeded';\n  time: number;\n}\n\nexport interface FailedStatus<O extends Operation<string, any>> {\n  message: string;\n  operation: O;\n  status: 'failed';\n  time: number;\n}\n\nconst isFailedStatus = <O extends Operation<string, any>>(\n  status: OperationStatus<O>\n): status is FailedStatus<O> => status.status === 'failed';\n\nexport type OperationStatus<O extends Operation<string, any>> =\n  | InProgressStatus<O>\n  | SucceededStatus<O>\n  | FailedStatus<O>;\n\nexport interface Operation<Name extends string, Parameters> {\n  name: Name;\n  parameters: Parameters;\n}\n\nexport const createStatusSelectors = <S extends {}>(\n  selectStatusHistory: (state: S) => Array<OperationStatus<any>>\n) => ({\n  getIsInProgress: () => (state: S) => {\n    const lastStatus = last(selectStatusHistory(state));\n    return lastStatus ? lastStatus.status === 'in-progress' : false;\n  },\n  getHasSucceeded: () => (state: S) => {\n    const lastStatus = last(selectStatusHistory(state));\n    return lastStatus ? lastStatus.status === 'succeeded' : false;\n  },\n  getHasFailed: () => (state: S) => {\n    const lastStatus = last(selectStatusHistory(state));\n    return lastStatus ? lastStatus.status === 'failed' : false;\n  },\n  getLastFailureMessage: () => (state: S) => {\n    const lastStatus = last(selectStatusHistory(state).filter(isFailedStatus));\n    return lastStatus ? lastStatus.message : undefined;\n  },\n});\n\nexport type StatusHistoryUpdater<Operations extends Operation<string, any>> = (\n  statusHistory: Array<OperationStatus<Operations>>\n) => Array<OperationStatus<Operations>>;\n\nexport const createStatusActions = <S extends {}, Operations extends Operation<string, any>>(\n  updateStatusHistory: (updater: StatusHistoryUpdater<Operations>) => (state: S) => S\n) => ({\n  startOperation: (operation: Operations) =>\n    updateStatusHistory(statusHistory => [\n      ...statusHistory,\n      {\n        operation,\n        status: 'in-progress',\n        time: Date.now(),\n      },\n    ]),\n  finishOperation: (operation: Operations) =>\n    updateStatusHistory(statusHistory => [\n      ...statusHistory,\n      {\n        operation,\n        status: 'succeeded',\n        time: Date.now(),\n      },\n    ]),\n  failOperation: (operation: Operations, message: string) =>\n    updateStatusHistory(statusHistory => [\n      ...statusHistory,\n      {\n        message,\n        operation,\n        status: 'failed',\n        time: Date.now(),\n      },\n    ]),\n});\n"]}]}