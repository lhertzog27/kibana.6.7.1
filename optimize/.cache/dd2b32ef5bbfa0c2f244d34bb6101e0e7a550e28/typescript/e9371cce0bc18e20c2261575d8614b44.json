{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/spaces/public/views/management/edit_space/manage_space_page.tsx","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/spaces/public/views/management/edit_space/manage_space_page.tsx","mtime":1567631712311},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport * as tslib_1 from \"tslib\";\nimport { EuiButton, EuiButtonEmpty, EuiFieldText, EuiFlexGroup, EuiFlexItem, EuiForm, EuiFormRow, EuiHorizontalRule, EuiLoadingSpinner, EuiPageContent, EuiPageContentBody, EuiSpacer, EuiTitle, } from '@elastic/eui';\nimport { FormattedMessage, injectI18n } from '@kbn/i18n/react';\nimport React, { Component, Fragment } from 'react';\n// @ts-ignore\nimport { toastNotifications } from 'ui/notify';\nimport { isReservedSpace } from '../../../../common';\nimport { SpaceAvatar } from '../../../components';\nimport { SecureSpaceMessage } from '../components/secure_space_message';\nimport { UnauthorizedPrompt } from '../components/unauthorized_prompt';\nimport { toSpaceIdentifier } from '../lib';\nimport { SpaceValidator } from '../lib/validate_space';\nimport { CustomizeSpaceAvatar } from './customize_space_avatar';\nimport { DeleteSpacesButton } from './delete_spaces_button';\nimport { ReservedSpaceBadge } from './reserved_space_badge';\nimport { SpaceIdentifier } from './space_identifier';\nvar ManageSpacePageUI = /** @class */ (function (_super) {\n    tslib_1.__extends(ManageSpacePageUI, _super);\n    function ManageSpacePageUI(props) {\n        var _this = _super.call(this, props) || this;\n        _this.getLoadingIndicator = function () {\n            return (React.createElement(\"div\", null,\n                React.createElement(EuiLoadingSpinner, { size: 'xl' }),\n                ' ',\n                React.createElement(EuiTitle, null,\n                    React.createElement(\"h1\", null,\n                        React.createElement(FormattedMessage, { id: \"xpack.spaces.management.manageSpacePage.loadingTitle\", defaultMessage: \"Loading\\u2026\" })))));\n        };\n        _this.getForm = function () {\n            var _a = _this.props, userProfile = _a.userProfile, intl = _a.intl;\n            if (!userProfile.hasCapability('manageSpaces')) {\n                return React.createElement(UnauthorizedPrompt, null);\n            }\n            var _b = _this.state.space, _c = _b.name, name = _c === void 0 ? '' : _c, _d = _b.description, description = _d === void 0 ? '' : _d;\n            return (React.createElement(EuiForm, null,\n                _this.getFormHeading(),\n                React.createElement(EuiSpacer, null),\n                React.createElement(EuiFormRow, tslib_1.__assign({ label: intl.formatMessage({\n                        id: 'xpack.spaces.management.manageSpacePage.nameFormRowLabel',\n                        defaultMessage: 'Name',\n                    }) }, _this.validator.validateSpaceName(_this.state.space), { fullWidth: true }),\n                    React.createElement(EuiFieldText, { name: \"name\", placeholder: intl.formatMessage({\n                            id: 'xpack.spaces.management.manageSpacePage.awesomeSpacePlaceholder',\n                            defaultMessage: 'Awesome space',\n                        }), value: name, onChange: _this.onNameChange, fullWidth: true })),\n                name && (React.createElement(Fragment, null,\n                    React.createElement(EuiFlexGroup, { responsive: false },\n                        React.createElement(EuiFlexItem, { grow: false },\n                            React.createElement(EuiFormRow, { label: React.createElement(FormattedMessage, { id: \"xpack.spaces.management.manageSpacePage.avatarLabel\", defaultMessage: \"Avatar\" }) },\n                                React.createElement(SpaceAvatar, { space: _this.state.space, size: \"l\" }))),\n                        React.createElement(CustomizeSpaceAvatar, { space: _this.state.space, onChange: _this.onAvatarChange })),\n                    React.createElement(EuiSpacer, null))),\n                _this.state.space && isReservedSpace(_this.state.space) ? null : (React.createElement(Fragment, null,\n                    React.createElement(SpaceIdentifier, { space: _this.state.space, editable: !_this.editingExistingSpace(), onChange: _this.onSpaceIdentifierChange, validator: _this.validator }))),\n                React.createElement(EuiFormRow, tslib_1.__assign({ label: intl.formatMessage({\n                        id: 'xpack.spaces.management.editSpace.manageSpacePage.optionalDescriptionFormRowLabel',\n                        defaultMessage: 'Description (optional)',\n                    }) }, _this.validator.validateSpaceDescription(_this.state.space), { fullWidth: true }),\n                    React.createElement(EuiFieldText, { name: \"description\", placeholder: intl.formatMessage({\n                            id: 'xpack.spaces.management.manageSpacePage.hereMagicHappensPlaceholder',\n                            defaultMessage: 'This is where the magic happens.',\n                        }), value: description, onChange: _this.onDescriptionChange, fullWidth: true })),\n                React.createElement(EuiHorizontalRule, null),\n                _this.getFormButtons()));\n        };\n        _this.getFormHeading = function () {\n            return (React.createElement(EuiTitle, { size: \"m\" },\n                React.createElement(\"h1\", null,\n                    _this.getTitle(),\n                    \" \",\n                    React.createElement(ReservedSpaceBadge, { space: _this.state.space }))));\n        };\n        _this.getTitle = function () {\n            if (_this.editingExistingSpace()) {\n                return (React.createElement(FormattedMessage, { id: \"xpack.spaces.management.manageSpacePage.editSpaceTitle\", defaultMessage: \"Edit space\" }));\n            }\n            return (React.createElement(FormattedMessage, { id: \"xpack.spaces.management.manageSpacePage.createSpaceTitle\", defaultMessage: \"Create a space\" }));\n        };\n        _this.maybeGetSecureSpacesMessage = function () {\n            if (_this.editingExistingSpace()) {\n                return React.createElement(SecureSpaceMessage, { userProfile: _this.props.userProfile });\n            }\n            return null;\n        };\n        _this.getFormButtons = function () {\n            var saveText = _this.editingExistingSpace() ? (React.createElement(FormattedMessage, { id: \"xpack.spaces.management.manageSpacePage.updateSpaceButtonLabel\", defaultMessage: \"Update space\" })) : (React.createElement(FormattedMessage, { id: \"xpack.spaces.management.manageSpacePage.createSpaceButtonLabel\", defaultMessage: \"Create space\" }));\n            return (React.createElement(EuiFlexGroup, { responsive: false },\n                React.createElement(EuiFlexItem, { grow: false },\n                    React.createElement(EuiButton, { fill: true, onClick: _this.saveSpace, \"data-test-subj\": \"save-space-button\" }, saveText)),\n                React.createElement(EuiFlexItem, { grow: false },\n                    React.createElement(EuiButtonEmpty, { onClick: _this.backToSpacesList, \"data-test-subj\": \"cancel-space-button\" },\n                        React.createElement(FormattedMessage, { id: \"xpack.spaces.management.manageSpacePage.cancelButtonLabel\", defaultMessage: \"Cancel\" }))),\n                React.createElement(EuiFlexItem, { grow: true }),\n                _this.getActionButton()));\n        };\n        _this.getActionButton = function () {\n            if (_this.state.space && _this.editingExistingSpace() && !isReservedSpace(_this.state.space)) {\n                return (React.createElement(EuiFlexItem, { grow: false },\n                    React.createElement(DeleteSpacesButton, { \"data-test-subj\": \"delete-space-button\", space: _this.state.space, spacesManager: _this.props.spacesManager, spacesNavState: _this.props.spacesNavState, onDelete: _this.backToSpacesList })));\n            }\n            return null;\n        };\n        _this.onNameChange = function (e) {\n            if (!_this.state.space) {\n                return;\n            }\n            var canUpdateId = !_this.editingExistingSpace();\n            var id = _this.state.space.id;\n            if (canUpdateId) {\n                id = toSpaceIdentifier(e.target.value);\n            }\n            _this.setState({\n                space: tslib_1.__assign({}, _this.state.space, { name: e.target.value, id: id }),\n            });\n        };\n        _this.onDescriptionChange = function (e) {\n            _this.setState({\n                space: tslib_1.__assign({}, _this.state.space, { description: e.target.value }),\n            });\n        };\n        _this.onSpaceIdentifierChange = function (e) {\n            _this.setState({\n                space: tslib_1.__assign({}, _this.state.space, { id: toSpaceIdentifier(e.target.value) }),\n            });\n        };\n        _this.onAvatarChange = function (space) {\n            _this.setState({\n                space: space,\n            });\n        };\n        _this.saveSpace = function () {\n            _this.validator.enableValidation();\n            var result = _this.validator.validateForSave(_this.state.space);\n            if (result.isInvalid) {\n                _this.setState({\n                    formError: result,\n                });\n                return;\n            }\n            _this.performSave();\n        };\n        _this.performSave = function () {\n            var intl = _this.props.intl;\n            if (!_this.state.space) {\n                return;\n            }\n            var name = _this.state.space.name || '';\n            var _a = _this.state.space, _b = _a.id, id = _b === void 0 ? toSpaceIdentifier(name) : _b, description = _a.description, initials = _a.initials, color = _a.color;\n            var params = {\n                name: name,\n                id: id,\n                description: description,\n                initials: initials,\n                color: color,\n            };\n            var action;\n            if (_this.editingExistingSpace()) {\n                action = _this.props.spacesManager.updateSpace(params);\n            }\n            else {\n                action = _this.props.spacesManager.createSpace(params);\n            }\n            action\n                .then(function () {\n                _this.props.spacesNavState.refreshSpacesList();\n                toastNotifications.addSuccess(intl.formatMessage({\n                    id: 'xpack.spaces.management.manageSpacePage.spaceSuccessfullySavedNotificationMessage',\n                    defaultMessage: \"Space {name} was saved.\",\n                }, {\n                    name: \"'\" + name + \"'\",\n                }));\n                window.location.hash = \"#/management/spaces/list\";\n            })\n                .catch(function (error) {\n                var _a = (error.data || {}).message, message = _a === void 0 ? '' : _a;\n                toastNotifications.addDanger(intl.formatMessage({\n                    id: 'xpack.spaces.management.manageSpacePage.errorSavingSpaceTitle',\n                    defaultMessage: 'Error saving space: {message}',\n                }, {\n                    message: message,\n                }));\n            });\n        };\n        _this.backToSpacesList = function () {\n            window.location.hash = \"#/management/spaces/list\";\n        };\n        _this.editingExistingSpace = function () { return !!_this.props.spaceId; };\n        _this.validator = new SpaceValidator({ shouldValidate: false });\n        _this.state = {\n            isLoading: true,\n            space: {},\n        };\n        return _this;\n    }\n    ManageSpacePageUI.prototype.componentDidMount = function () {\n        var _this = this;\n        var _a = this.props, spaceId = _a.spaceId, spacesManager = _a.spacesManager, intl = _a.intl;\n        if (spaceId) {\n            spacesManager\n                .getSpace(spaceId)\n                .then(function (result) {\n                if (result.data) {\n                    _this.setState({\n                        space: result.data,\n                        isLoading: false,\n                    });\n                }\n            })\n                .catch(function (error) {\n                var _a = (error.data || {}).message, message = _a === void 0 ? '' : _a;\n                toastNotifications.addDanger(intl.formatMessage({\n                    id: 'xpack.spaces.management.manageSpacePage.errorLoadingSpaceTitle',\n                    defaultMessage: 'Error loading space: {message}',\n                }, {\n                    message: message,\n                }));\n                _this.backToSpacesList();\n            });\n        }\n        else {\n            this.setState({ isLoading: false });\n        }\n    };\n    ManageSpacePageUI.prototype.render = function () {\n        var content = this.state.isLoading ? this.getLoadingIndicator() : this.getForm();\n        return (React.createElement(\"div\", { className: \"spcManagePage\" },\n            React.createElement(EuiPageContent, { className: \"spcManagePage__content\" },\n                React.createElement(EuiPageContentBody, null, content)),\n            this.maybeGetSecureSpacesMessage()));\n    };\n    return ManageSpacePageUI;\n}(Component));\nexport var ManageSpacePage = injectI18n(ManageSpacePageUI);\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/spaces/public/views/management/edit_space/manage_space_page.tsx","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/spaces/public/views/management/edit_space/manage_space_page.tsx"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport {\n  EuiButton,\n  EuiButtonEmpty,\n  EuiFieldText,\n  EuiFlexGroup,\n  EuiFlexItem,\n  EuiForm,\n  EuiFormRow,\n  EuiHorizontalRule,\n  EuiLoadingSpinner,\n  EuiPageContent,\n  EuiPageContentBody,\n  EuiSpacer,\n  EuiTitle,\n} from '@elastic/eui';\nimport { FormattedMessage, InjectedIntl, injectI18n } from '@kbn/i18n/react';\nimport React, { ChangeEvent, Component, Fragment } from 'react';\n\nimport { SpacesNavState } from 'plugins/spaces/views/nav_control';\nimport { UserProfile } from 'plugins/xpack_main/services/user_profile';\n// @ts-ignore\nimport { toastNotifications } from 'ui/notify';\nimport { isReservedSpace } from '../../../../common';\nimport { Space } from '../../../../common/model/space';\nimport { SpaceAvatar } from '../../../components';\nimport { SpacesManager } from '../../../lib';\nimport { SecureSpaceMessage } from '../components/secure_space_message';\nimport { UnauthorizedPrompt } from '../components/unauthorized_prompt';\nimport { toSpaceIdentifier } from '../lib';\nimport { SpaceValidator } from '../lib/validate_space';\nimport { CustomizeSpaceAvatar } from './customize_space_avatar';\nimport { DeleteSpacesButton } from './delete_spaces_button';\nimport { ReservedSpaceBadge } from './reserved_space_badge';\nimport { SpaceIdentifier } from './space_identifier';\n\ninterface Props {\n  spacesManager: SpacesManager;\n  spaceId?: string;\n  userProfile: UserProfile;\n  spacesNavState: SpacesNavState;\n  intl: InjectedIntl;\n}\n\ninterface State {\n  space: Partial<Space>;\n  isLoading: boolean;\n  formError?: {\n    isInvalid: boolean;\n    error?: string;\n  };\n}\n\nclass ManageSpacePageUI extends Component<Props, State> {\n  private readonly validator: SpaceValidator;\n\n  constructor(props: Props) {\n    super(props);\n    this.validator = new SpaceValidator({ shouldValidate: false });\n    this.state = {\n      isLoading: true,\n      space: {},\n    };\n  }\n\n  public componentDidMount() {\n    const { spaceId, spacesManager, intl } = this.props;\n\n    if (spaceId) {\n      spacesManager\n        .getSpace(spaceId)\n        .then((result: any) => {\n          if (result.data) {\n            this.setState({\n              space: result.data,\n              isLoading: false,\n            });\n          }\n        })\n        .catch(error => {\n          const { message = '' } = error.data || {};\n\n          toastNotifications.addDanger(\n            intl.formatMessage(\n              {\n                id: 'xpack.spaces.management.manageSpacePage.errorLoadingSpaceTitle',\n                defaultMessage: 'Error loading space: {message}',\n              },\n              {\n                message,\n              }\n            )\n          );\n          this.backToSpacesList();\n        });\n    } else {\n      this.setState({ isLoading: false });\n    }\n  }\n\n  public render() {\n    const content = this.state.isLoading ? this.getLoadingIndicator() : this.getForm();\n\n    return (\n      <div className=\"spcManagePage\">\n        <EuiPageContent className=\"spcManagePage__content\">\n          <EuiPageContentBody>{content}</EuiPageContentBody>\n        </EuiPageContent>\n        {this.maybeGetSecureSpacesMessage()}\n      </div>\n    );\n  }\n\n  public getLoadingIndicator = () => {\n    return (\n      <div>\n        <EuiLoadingSpinner size={'xl'} />{' '}\n        <EuiTitle>\n          <h1>\n            <FormattedMessage\n              id=\"xpack.spaces.management.manageSpacePage.loadingTitle\"\n              defaultMessage=\"Loading…\"\n            />\n          </h1>\n        </EuiTitle>\n      </div>\n    );\n  };\n\n  public getForm = () => {\n    const { userProfile, intl } = this.props;\n\n    if (!userProfile.hasCapability('manageSpaces')) {\n      return <UnauthorizedPrompt />;\n    }\n\n    const { name = '', description = '' } = this.state.space;\n\n    return (\n      <EuiForm>\n        {this.getFormHeading()}\n\n        <EuiSpacer />\n\n        <EuiFormRow\n          label={intl.formatMessage({\n            id: 'xpack.spaces.management.manageSpacePage.nameFormRowLabel',\n            defaultMessage: 'Name',\n          })}\n          {...this.validator.validateSpaceName(this.state.space)}\n          fullWidth\n        >\n          <EuiFieldText\n            name=\"name\"\n            placeholder={intl.formatMessage({\n              id: 'xpack.spaces.management.manageSpacePage.awesomeSpacePlaceholder',\n              defaultMessage: 'Awesome space',\n            })}\n            value={name}\n            onChange={this.onNameChange}\n            fullWidth\n          />\n        </EuiFormRow>\n        {name && (\n          <Fragment>\n            <EuiFlexGroup responsive={false}>\n              <EuiFlexItem grow={false}>\n                <EuiFormRow\n                  label={\n                    <FormattedMessage\n                      id=\"xpack.spaces.management.manageSpacePage.avatarLabel\"\n                      defaultMessage=\"Avatar\"\n                    />\n                  }\n                >\n                  <SpaceAvatar space={this.state.space} size=\"l\" />\n                </EuiFormRow>\n              </EuiFlexItem>\n              <CustomizeSpaceAvatar space={this.state.space} onChange={this.onAvatarChange} />\n            </EuiFlexGroup>\n            <EuiSpacer />\n          </Fragment>\n        )}\n\n        {this.state.space && isReservedSpace(this.state.space) ? null : (\n          <Fragment>\n            <SpaceIdentifier\n              space={this.state.space}\n              editable={!this.editingExistingSpace()}\n              onChange={this.onSpaceIdentifierChange}\n              validator={this.validator}\n            />\n          </Fragment>\n        )}\n\n        <EuiFormRow\n          label={intl.formatMessage({\n            id: 'xpack.spaces.management.editSpace.manageSpacePage.optionalDescriptionFormRowLabel',\n            defaultMessage: 'Description (optional)',\n          })}\n          {...this.validator.validateSpaceDescription(this.state.space)}\n          fullWidth\n        >\n          <EuiFieldText\n            name=\"description\"\n            placeholder={intl.formatMessage({\n              id: 'xpack.spaces.management.manageSpacePage.hereMagicHappensPlaceholder',\n              defaultMessage: 'This is where the magic happens.',\n            })}\n            value={description}\n            onChange={this.onDescriptionChange}\n            fullWidth\n          />\n        </EuiFormRow>\n\n        <EuiHorizontalRule />\n\n        {this.getFormButtons()}\n      </EuiForm>\n    );\n  };\n\n  public getFormHeading = () => {\n    return (\n      <EuiTitle size=\"m\">\n        <h1>\n          {this.getTitle()} <ReservedSpaceBadge space={this.state.space as Space} />\n        </h1>\n      </EuiTitle>\n    );\n  };\n\n  public getTitle = () => {\n    if (this.editingExistingSpace()) {\n      return (\n        <FormattedMessage\n          id=\"xpack.spaces.management.manageSpacePage.editSpaceTitle\"\n          defaultMessage=\"Edit space\"\n        />\n      );\n    }\n    return (\n      <FormattedMessage\n        id=\"xpack.spaces.management.manageSpacePage.createSpaceTitle\"\n        defaultMessage=\"Create a space\"\n      />\n    );\n  };\n\n  public maybeGetSecureSpacesMessage = () => {\n    if (this.editingExistingSpace()) {\n      return <SecureSpaceMessage userProfile={this.props.userProfile} />;\n    }\n    return null;\n  };\n\n  public getFormButtons = () => {\n    const saveText = this.editingExistingSpace() ? (\n      <FormattedMessage\n        id=\"xpack.spaces.management.manageSpacePage.updateSpaceButtonLabel\"\n        defaultMessage=\"Update space\"\n      />\n    ) : (\n      <FormattedMessage\n        id=\"xpack.spaces.management.manageSpacePage.createSpaceButtonLabel\"\n        defaultMessage=\"Create space\"\n      />\n    );\n    return (\n      <EuiFlexGroup responsive={false}>\n        <EuiFlexItem grow={false}>\n          <EuiButton fill onClick={this.saveSpace} data-test-subj=\"save-space-button\">\n            {saveText}\n          </EuiButton>\n        </EuiFlexItem>\n        <EuiFlexItem grow={false}>\n          <EuiButtonEmpty onClick={this.backToSpacesList} data-test-subj=\"cancel-space-button\">\n            <FormattedMessage\n              id=\"xpack.spaces.management.manageSpacePage.cancelButtonLabel\"\n              defaultMessage=\"Cancel\"\n            />\n          </EuiButtonEmpty>\n        </EuiFlexItem>\n        <EuiFlexItem grow={true} />\n        {this.getActionButton()}\n      </EuiFlexGroup>\n    );\n  };\n\n  public getActionButton = () => {\n    if (this.state.space && this.editingExistingSpace() && !isReservedSpace(this.state.space)) {\n      return (\n        <EuiFlexItem grow={false}>\n          <DeleteSpacesButton\n            data-test-subj=\"delete-space-button\"\n            space={this.state.space as Space}\n            spacesManager={this.props.spacesManager}\n            spacesNavState={this.props.spacesNavState}\n            onDelete={this.backToSpacesList}\n          />\n        </EuiFlexItem>\n      );\n    }\n\n    return null;\n  };\n\n  public onNameChange = (e: ChangeEvent<HTMLInputElement>) => {\n    if (!this.state.space) {\n      return;\n    }\n\n    const canUpdateId = !this.editingExistingSpace();\n\n    let { id } = this.state.space;\n\n    if (canUpdateId) {\n      id = toSpaceIdentifier(e.target.value);\n    }\n\n    this.setState({\n      space: {\n        ...this.state.space,\n        name: e.target.value,\n        id,\n      },\n    });\n  };\n\n  public onDescriptionChange = (e: ChangeEvent<HTMLInputElement>) => {\n    this.setState({\n      space: {\n        ...this.state.space,\n        description: e.target.value,\n      },\n    });\n  };\n\n  public onSpaceIdentifierChange = (e: ChangeEvent<HTMLInputElement>) => {\n    this.setState({\n      space: {\n        ...this.state.space,\n        id: toSpaceIdentifier(e.target.value),\n      },\n    });\n  };\n\n  public onAvatarChange = (space: Partial<Space>) => {\n    this.setState({\n      space,\n    });\n  };\n\n  public saveSpace = () => {\n    this.validator.enableValidation();\n\n    const result = this.validator.validateForSave(this.state.space as Space);\n    if (result.isInvalid) {\n      this.setState({\n        formError: result,\n      });\n\n      return;\n    }\n\n    this.performSave();\n  };\n\n  private performSave = () => {\n    const { intl } = this.props;\n    if (!this.state.space) {\n      return;\n    }\n\n    const name = this.state.space.name || '';\n    const { id = toSpaceIdentifier(name), description, initials, color } = this.state.space;\n\n    const params = {\n      name,\n      id,\n      description,\n      initials,\n      color,\n    };\n\n    let action;\n    if (this.editingExistingSpace()) {\n      action = this.props.spacesManager.updateSpace(params);\n    } else {\n      action = this.props.spacesManager.createSpace(params);\n    }\n\n    action\n      .then(() => {\n        this.props.spacesNavState.refreshSpacesList();\n        toastNotifications.addSuccess(\n          intl.formatMessage(\n            {\n              id:\n                'xpack.spaces.management.manageSpacePage.spaceSuccessfullySavedNotificationMessage',\n              defaultMessage: `Space {name} was saved.`,\n            },\n            {\n              name: `'${name}'`,\n            }\n          )\n        );\n        window.location.hash = `#/management/spaces/list`;\n      })\n      .catch(error => {\n        const { message = '' } = error.data || {};\n\n        toastNotifications.addDanger(\n          intl.formatMessage(\n            {\n              id: 'xpack.spaces.management.manageSpacePage.errorSavingSpaceTitle',\n              defaultMessage: 'Error saving space: {message}',\n            },\n            {\n              message,\n            }\n          )\n        );\n      });\n  };\n\n  private backToSpacesList = () => {\n    window.location.hash = `#/management/spaces/list`;\n  };\n\n  private editingExistingSpace = () => !!this.props.spaceId;\n}\n\nexport const ManageSpacePage = injectI18n(ManageSpacePageUI);\n"]}]}