{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/upgrade_assistant/public/components/tabs/checkup/deprecations/reindex/flyout/progress.tsx","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/upgrade_assistant/public/components/tabs/checkup/deprecations/reindex/flyout/progress.tsx","mtime":1567631712323},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport * as tslib_1 from \"tslib\";\nimport React from 'react';\nimport { EuiButtonEmpty, EuiCallOut, EuiFlexGroup, EuiFlexItem, EuiProgress, EuiText, } from '@elastic/eui';\nimport { FormattedMessage } from '@kbn/i18n/react';\nimport { IndexGroup, ReindexStatus, ReindexStep } from '../../../../../../../common/types';\nimport { LoadingState } from '../../../../../types';\nimport { StepProgress } from './step_progress';\nvar ErrorCallout = function (_a) {\n    var errorMessage = _a.errorMessage;\n    return (React.createElement(EuiCallOut, { color: \"danger\", title: \"There was an error\" },\n        React.createElement(EuiText, null,\n            React.createElement(\"p\", null, errorMessage))));\n};\nvar PausedCallout = function () { return (React.createElement(EuiCallOut, { color: \"warning\", title: \"This step was paused due to a Kibana restart. Click 'Resume' below to continue.\" })); };\nvar ReindexProgressBar = function (_a) {\n    var _b = _a.reindexState, lastCompletedStep = _b.lastCompletedStep, status = _b.status, reindexTaskPercComplete = _b.reindexTaskPercComplete, cancelLoadingState = _b.cancelLoadingState, cancelReindex = _a.cancelReindex;\n    var progressBar = reindexTaskPercComplete ? (React.createElement(EuiProgress, { size: \"s\", value: reindexTaskPercComplete, max: 1 })) : (React.createElement(EuiProgress, { size: \"s\" }));\n    var cancelText;\n    switch (cancelLoadingState) {\n        case LoadingState.Loading:\n            cancelText = (React.createElement(FormattedMessage, { id: \"xpack.upgradeAssistant.checkupTab.reindexing.flyout.checklistStep.reindexingChecklist.cancelButton.cancellingLabel\", defaultMessage: \"Cancelling\\u2026\" }));\n            break;\n        case LoadingState.Success:\n            cancelText = (React.createElement(FormattedMessage, { id: \"xpack.upgradeAssistant.checkupTab.reindexing.flyout.checklistStep.reindexingChecklist.cancelButton.cancelledLabel\", defaultMessage: \"Cancelled\" }));\n            break;\n        case LoadingState.Error:\n            cancelText = 'Could not cancel';\n            cancelText = (React.createElement(FormattedMessage, { id: \"xpack.upgradeAssistant.checkupTab.reindexing.flyout.checklistStep.reindexingChecklist.cancelButton.errorLabel\", defaultMessage: \"Could not cancel\" }));\n            break;\n        default:\n            cancelText = (React.createElement(FormattedMessage, { id: \"xpack.upgradeAssistant.checkupTab.reindexing.flyout.checklistStep.reindexingChecklist.cancelButton.cancelLabel\", defaultMessage: \"Cancel\" }));\n    }\n    return (React.createElement(EuiFlexGroup, { alignItems: 'center' },\n        React.createElement(EuiFlexItem, null, progressBar),\n        React.createElement(EuiFlexItem, { grow: false },\n            React.createElement(EuiButtonEmpty, { onClick: cancelReindex, disabled: cancelLoadingState === LoadingState.Loading ||\n                    status !== ReindexStatus.inProgress ||\n                    lastCompletedStep !== ReindexStep.reindexStarted, isLoading: cancelLoadingState === LoadingState.Loading }, cancelText))));\n};\nvar orderedSteps = Object.values(ReindexStep).sort();\n/**\n * Displays a list of steps in the reindex operation, the current status, a progress bar,\n * and any error messages that are encountered.\n */\nexport var ReindexProgress = function (props) {\n    var _a = props.reindexState, errorMessage = _a.errorMessage, indexGroup = _a.indexGroup, _b = _a.lastCompletedStep, lastCompletedStep = _b === void 0 ? -1 : _b, status = _a.status;\n    var stepDetails = function (thisStep) {\n        var previousStep = orderedSteps[orderedSteps.indexOf(thisStep) - 1];\n        if (status === ReindexStatus.failed && lastCompletedStep === previousStep) {\n            return {\n                status: 'failed',\n                children: React.createElement(ErrorCallout, tslib_1.__assign({}, { errorMessage: errorMessage })),\n            };\n        }\n        else if (status === ReindexStatus.paused && lastCompletedStep === previousStep) {\n            return {\n                status: 'paused',\n                children: React.createElement(PausedCallout, null),\n            };\n        }\n        else if (status === ReindexStatus.cancelled && lastCompletedStep === previousStep) {\n            return {\n                status: 'cancelled',\n            };\n        }\n        else if (status === undefined || lastCompletedStep < previousStep) {\n            return {\n                status: 'incomplete',\n            };\n        }\n        else if (lastCompletedStep === previousStep) {\n            return {\n                status: 'inProgress',\n            };\n        }\n        else {\n            return {\n                status: 'complete',\n            };\n        }\n    };\n    // The reindexing step is special because it combines the starting and complete statuses into a single UI\n    // with a progress bar.\n    var reindexingDocsStep = {\n        title: (React.createElement(FormattedMessage, { id: \"xpack.upgradeAssistant.checkupTab.reindexing.flyout.checklistStep.reindexingChecklist.reindexingDocumentsStepTitle\", defaultMessage: \"Reindexing documents\" })),\n    };\n    if (status === ReindexStatus.failed &&\n        (lastCompletedStep === ReindexStep.newIndexCreated ||\n            lastCompletedStep === ReindexStep.reindexStarted)) {\n        reindexingDocsStep.status = 'failed';\n        reindexingDocsStep.children = React.createElement(ErrorCallout, tslib_1.__assign({}, { errorMessage: errorMessage }));\n    }\n    else if (status === ReindexStatus.paused &&\n        (lastCompletedStep === ReindexStep.newIndexCreated ||\n            lastCompletedStep === ReindexStep.reindexStarted)) {\n        reindexingDocsStep.status = 'paused';\n        reindexingDocsStep.children = React.createElement(PausedCallout, null);\n    }\n    else if (status === ReindexStatus.cancelled &&\n        (lastCompletedStep === ReindexStep.newIndexCreated ||\n            lastCompletedStep === ReindexStep.reindexStarted)) {\n        reindexingDocsStep.status = 'cancelled';\n    }\n    else if (status === undefined || lastCompletedStep < ReindexStep.newIndexCreated) {\n        reindexingDocsStep.status = 'incomplete';\n    }\n    else if (lastCompletedStep === ReindexStep.newIndexCreated ||\n        lastCompletedStep === ReindexStep.reindexStarted) {\n        reindexingDocsStep.status = 'inProgress';\n        reindexingDocsStep.children = React.createElement(ReindexProgressBar, tslib_1.__assign({}, props));\n    }\n    else {\n        reindexingDocsStep.status = 'complete';\n    }\n    var steps = [\n        tslib_1.__assign({ title: (React.createElement(FormattedMessage, { id: \"xpack.upgradeAssistant.checkupTab.reindexing.flyout.checklistStep.reindexingChecklist.readonlyStepTitle\", defaultMessage: \"Setting old index to read-only\" })) }, stepDetails(ReindexStep.readonly)),\n        tslib_1.__assign({ title: (React.createElement(FormattedMessage, { id: \"xpack.upgradeAssistant.checkupTab.reindexing.flyout.checklistStep.reindexingChecklist.createIndexStepTitle\", defaultMessage: \"Creating new index\" })) }, stepDetails(ReindexStep.newIndexCreated)),\n        reindexingDocsStep,\n        tslib_1.__assign({ title: (React.createElement(FormattedMessage, { id: \"xpack.upgradeAssistant.checkupTab.reindexing.flyout.checklistStep.reindexingChecklist.aliasSwapStepTitle\", defaultMessage: \"Swapping original index with alias\" })) }, stepDetails(ReindexStep.aliasCreated)),\n    ];\n    // If this index is part of an index group, add the approriate group services steps.\n    if (indexGroup === IndexGroup.ml) {\n        steps.unshift(tslib_1.__assign({ title: (React.createElement(FormattedMessage, { id: \"xpack.upgradeAssistant.checkupTab.reindexing.flyout.checklistStep.reindexingChecklist.pauseMlStepTitle\", defaultMessage: \"Pausing Machine Learning jobs\" })) }, stepDetails(ReindexStep.indexGroupServicesStopped)));\n        steps.push(tslib_1.__assign({ title: (React.createElement(FormattedMessage, { id: \"xpack.upgradeAssistant.checkupTab.reindexing.flyout.checklistStep.reindexingChecklist.resumeMlStepTitle\", defaultMessage: \"Resuming Machine Learning jobs\" })) }, stepDetails(ReindexStep.indexGroupServicesStarted)));\n    }\n    else if (indexGroup === IndexGroup.watcher) {\n        steps.unshift(tslib_1.__assign({ title: (React.createElement(FormattedMessage, { id: \"xpack.upgradeAssistant.checkupTab.reindexing.flyout.checklistStep.reindexingChecklist.stopWatcherStepTitle\", defaultMessage: \"Stopping Watcher\" })) }, stepDetails(ReindexStep.indexGroupServicesStopped)));\n        steps.push(tslib_1.__assign({ title: (React.createElement(FormattedMessage, { id: \"xpack.upgradeAssistant.checkupTab.reindexing.flyout.checklistStep.reindexingChecklist.resumeWatcherStepTitle\", defaultMessage: \"Resuming Watcher\" })) }, stepDetails(ReindexStep.indexGroupServicesStarted)));\n    }\n    return React.createElement(StepProgress, { steps: steps });\n};\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/upgrade_assistant/public/components/tabs/checkup/deprecations/reindex/flyout/progress.tsx","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/upgrade_assistant/public/components/tabs/checkup/deprecations/reindex/flyout/progress.tsx"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport React from 'react';\n\nimport {\n  EuiButtonEmpty,\n  EuiCallOut,\n  EuiFlexGroup,\n  EuiFlexItem,\n  EuiProgress,\n  EuiText,\n} from '@elastic/eui';\nimport { FormattedMessage } from '@kbn/i18n/react';\n\nimport { IndexGroup, ReindexStatus, ReindexStep } from '../../../../../../../common/types';\nimport { LoadingState } from '../../../../../types';\nimport { ReindexState } from '../polling_service';\nimport { StepProgress, StepProgressStep } from './step_progress';\n\nconst ErrorCallout: React.StatelessComponent<{ errorMessage: string | null }> = ({\n  errorMessage,\n}) => (\n  <EuiCallOut color=\"danger\" title=\"There was an error\">\n    <EuiText>\n      <p>{errorMessage}</p>\n    </EuiText>\n  </EuiCallOut>\n);\n\nconst PausedCallout = () => (\n  <EuiCallOut\n    color=\"warning\"\n    title=\"This step was paused due to a Kibana restart. Click 'Resume' below to continue.\"\n  />\n);\n\nconst ReindexProgressBar: React.StatelessComponent<{\n  reindexState: ReindexState;\n  cancelReindex: () => void;\n}> = ({\n  reindexState: { lastCompletedStep, status, reindexTaskPercComplete, cancelLoadingState },\n  cancelReindex,\n}) => {\n  const progressBar = reindexTaskPercComplete ? (\n    <EuiProgress size=\"s\" value={reindexTaskPercComplete} max={1} />\n  ) : (\n    <EuiProgress size=\"s\" />\n  );\n\n  let cancelText: React.ReactNode;\n  switch (cancelLoadingState) {\n    case LoadingState.Loading:\n      cancelText = (\n        <FormattedMessage\n          id=\"xpack.upgradeAssistant.checkupTab.reindexing.flyout.checklistStep.reindexingChecklist.cancelButton.cancellingLabel\"\n          defaultMessage=\"Cancelling…\"\n        />\n      );\n      break;\n    case LoadingState.Success:\n      cancelText = (\n        <FormattedMessage\n          id=\"xpack.upgradeAssistant.checkupTab.reindexing.flyout.checklistStep.reindexingChecklist.cancelButton.cancelledLabel\"\n          defaultMessage=\"Cancelled\"\n        />\n      );\n      break;\n    case LoadingState.Error:\n      cancelText = 'Could not cancel';\n      cancelText = (\n        <FormattedMessage\n          id=\"xpack.upgradeAssistant.checkupTab.reindexing.flyout.checklistStep.reindexingChecklist.cancelButton.errorLabel\"\n          defaultMessage=\"Could not cancel\"\n        />\n      );\n      break;\n    default:\n      cancelText = (\n        <FormattedMessage\n          id=\"xpack.upgradeAssistant.checkupTab.reindexing.flyout.checklistStep.reindexingChecklist.cancelButton.cancelLabel\"\n          defaultMessage=\"Cancel\"\n        />\n      );\n  }\n\n  return (\n    <EuiFlexGroup alignItems={'center'}>\n      <EuiFlexItem>{progressBar}</EuiFlexItem>\n      <EuiFlexItem grow={false}>\n        <EuiButtonEmpty\n          onClick={cancelReindex}\n          disabled={\n            cancelLoadingState === LoadingState.Loading ||\n            status !== ReindexStatus.inProgress ||\n            lastCompletedStep !== ReindexStep.reindexStarted\n          }\n          isLoading={cancelLoadingState === LoadingState.Loading}\n        >\n          {cancelText}\n        </EuiButtonEmpty>\n      </EuiFlexItem>\n    </EuiFlexGroup>\n  );\n};\n\nconst orderedSteps = Object.values(ReindexStep).sort() as number[];\n\n/**\n * Displays a list of steps in the reindex operation, the current status, a progress bar,\n * and any error messages that are encountered.\n */\nexport const ReindexProgress: React.StatelessComponent<{\n  reindexState: ReindexState;\n  cancelReindex: () => void;\n}> = props => {\n  const { errorMessage, indexGroup, lastCompletedStep = -1, status } = props.reindexState;\n  const stepDetails = (thisStep: ReindexStep): Pick<StepProgressStep, 'status' | 'children'> => {\n    const previousStep = orderedSteps[orderedSteps.indexOf(thisStep) - 1];\n\n    if (status === ReindexStatus.failed && lastCompletedStep === previousStep) {\n      return {\n        status: 'failed',\n        children: <ErrorCallout {...{ errorMessage }} />,\n      };\n    } else if (status === ReindexStatus.paused && lastCompletedStep === previousStep) {\n      return {\n        status: 'paused',\n        children: <PausedCallout />,\n      };\n    } else if (status === ReindexStatus.cancelled && lastCompletedStep === previousStep) {\n      return {\n        status: 'cancelled',\n      };\n    } else if (status === undefined || lastCompletedStep < previousStep) {\n      return {\n        status: 'incomplete',\n      };\n    } else if (lastCompletedStep === previousStep) {\n      return {\n        status: 'inProgress',\n      };\n    } else {\n      return {\n        status: 'complete',\n      };\n    }\n  };\n\n  // The reindexing step is special because it combines the starting and complete statuses into a single UI\n  // with a progress bar.\n  const reindexingDocsStep = {\n    title: (\n      <FormattedMessage\n        id=\"xpack.upgradeAssistant.checkupTab.reindexing.flyout.checklistStep.reindexingChecklist.reindexingDocumentsStepTitle\"\n        defaultMessage=\"Reindexing documents\"\n      />\n    ),\n  } as StepProgressStep;\n\n  if (\n    status === ReindexStatus.failed &&\n    (lastCompletedStep === ReindexStep.newIndexCreated ||\n      lastCompletedStep === ReindexStep.reindexStarted)\n  ) {\n    reindexingDocsStep.status = 'failed';\n    reindexingDocsStep.children = <ErrorCallout {...{ errorMessage }} />;\n  } else if (\n    status === ReindexStatus.paused &&\n    (lastCompletedStep === ReindexStep.newIndexCreated ||\n      lastCompletedStep === ReindexStep.reindexStarted)\n  ) {\n    reindexingDocsStep.status = 'paused';\n    reindexingDocsStep.children = <PausedCallout />;\n  } else if (\n    status === ReindexStatus.cancelled &&\n    (lastCompletedStep === ReindexStep.newIndexCreated ||\n      lastCompletedStep === ReindexStep.reindexStarted)\n  ) {\n    reindexingDocsStep.status = 'cancelled';\n  } else if (status === undefined || lastCompletedStep < ReindexStep.newIndexCreated) {\n    reindexingDocsStep.status = 'incomplete';\n  } else if (\n    lastCompletedStep === ReindexStep.newIndexCreated ||\n    lastCompletedStep === ReindexStep.reindexStarted\n  ) {\n    reindexingDocsStep.status = 'inProgress';\n    reindexingDocsStep.children = <ReindexProgressBar {...props} />;\n  } else {\n    reindexingDocsStep.status = 'complete';\n  }\n\n  const steps = [\n    {\n      title: (\n        <FormattedMessage\n          id=\"xpack.upgradeAssistant.checkupTab.reindexing.flyout.checklistStep.reindexingChecklist.readonlyStepTitle\"\n          defaultMessage=\"Setting old index to read-only\"\n        />\n      ),\n      ...stepDetails(ReindexStep.readonly),\n    },\n    {\n      title: (\n        <FormattedMessage\n          id=\"xpack.upgradeAssistant.checkupTab.reindexing.flyout.checklistStep.reindexingChecklist.createIndexStepTitle\"\n          defaultMessage=\"Creating new index\"\n        />\n      ),\n      ...stepDetails(ReindexStep.newIndexCreated),\n    },\n    reindexingDocsStep,\n    {\n      title: (\n        <FormattedMessage\n          id=\"xpack.upgradeAssistant.checkupTab.reindexing.flyout.checklistStep.reindexingChecklist.aliasSwapStepTitle\"\n          defaultMessage=\"Swapping original index with alias\"\n        />\n      ),\n      ...stepDetails(ReindexStep.aliasCreated),\n    },\n  ];\n\n  // If this index is part of an index group, add the approriate group services steps.\n  if (indexGroup === IndexGroup.ml) {\n    steps.unshift({\n      title: (\n        <FormattedMessage\n          id=\"xpack.upgradeAssistant.checkupTab.reindexing.flyout.checklistStep.reindexingChecklist.pauseMlStepTitle\"\n          defaultMessage=\"Pausing Machine Learning jobs\"\n        />\n      ),\n      ...stepDetails(ReindexStep.indexGroupServicesStopped),\n    });\n    steps.push({\n      title: (\n        <FormattedMessage\n          id=\"xpack.upgradeAssistant.checkupTab.reindexing.flyout.checklistStep.reindexingChecklist.resumeMlStepTitle\"\n          defaultMessage=\"Resuming Machine Learning jobs\"\n        />\n      ),\n      ...stepDetails(ReindexStep.indexGroupServicesStarted),\n    });\n  } else if (indexGroup === IndexGroup.watcher) {\n    steps.unshift({\n      title: (\n        <FormattedMessage\n          id=\"xpack.upgradeAssistant.checkupTab.reindexing.flyout.checklistStep.reindexingChecklist.stopWatcherStepTitle\"\n          defaultMessage=\"Stopping Watcher\"\n        />\n      ),\n      ...stepDetails(ReindexStep.indexGroupServicesStopped),\n    });\n    steps.push({\n      title: (\n        <FormattedMessage\n          id=\"xpack.upgradeAssistant.checkupTab.reindexing.flyout.checklistStep.reindexingChecklist.resumeWatcherStepTitle\"\n          defaultMessage=\"Resuming Watcher\"\n        />\n      ),\n      ...stepDetails(ReindexStep.indexGroupServicesStarted),\n    });\n  }\n\n  return <StepProgress steps={steps} />;\n};\n"]}]}