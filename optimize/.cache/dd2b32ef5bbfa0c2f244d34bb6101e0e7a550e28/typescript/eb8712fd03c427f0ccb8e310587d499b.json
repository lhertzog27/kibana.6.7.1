{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/beats_management/public/lib/adapters/framework/kibana_framework_adapter.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/beats_management/public/lib/adapters/framework/kibana_framework_adapter.ts","mtime":1567631711882},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport * as tslib_1 from \"tslib\";\nimport { PathReporter } from 'io-ts/lib/PathReporter';\nimport * as ReactDOM from 'react-dom';\nimport { RuntimeFrameworkInfo, RuntimeFrameworkUser, } from './adapter_types';\nvar KibanaFrameworkAdapter = /** @class */ (function () {\n    function KibanaFrameworkAdapter(PLUGIN_ID, management, routes, getBasePath, onKibanaReady, XPackInfoProvider, uiSettings, version) {\n        var _this = this;\n        this.PLUGIN_ID = PLUGIN_ID;\n        this.management = management;\n        this.routes = routes;\n        this.getBasePath = getBasePath;\n        this.onKibanaReady = onKibanaReady;\n        this.XPackInfoProvider = XPackInfoProvider;\n        this.uiSettings = uiSettings;\n        this.version = version;\n        this.xpackInfo = null;\n        this.shieldUser = null;\n        this.setUISettings = function (key, value) {\n            _this.adapterService.callOrBuffer(function (_a) {\n                var config = _a.config;\n                config.set(key, value);\n            });\n        };\n        this.adapterService = new KibanaAdapterServiceProvider();\n    }\n    Object.defineProperty(KibanaFrameworkAdapter.prototype, \"info\", {\n        get: function () {\n            if (this.xpackInfo) {\n                return this.xpackInfo;\n            }\n            else {\n                throw new Error('framework adapter must have init called before anything else');\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(KibanaFrameworkAdapter.prototype, \"currentUser\", {\n        get: function () {\n            return this.shieldUser;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // We dont really want to have this, but it's needed to conditionaly render for k7 due to\n    // when that data is needed.\n    KibanaFrameworkAdapter.prototype.getUISetting = function (key) {\n        return this.uiSettings.get(key);\n    };\n    KibanaFrameworkAdapter.prototype.waitUntilFrameworkReady = function () {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var $injector, Private, xpackInfo, xpackInfoUnpacked, assertData, _a, assertUser, e_1;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0: return [4 /*yield*/, this.onKibanaReady()];\n                    case 1:\n                        $injector = _b.sent();\n                        Private = $injector.get('Private');\n                        try {\n                            xpackInfo = Private(this.XPackInfoProvider);\n                        }\n                        catch (e) {\n                            xpackInfo = false;\n                        }\n                        try {\n                            xpackInfoUnpacked = {\n                                basePath: this.getBasePath(),\n                                license: {\n                                    type: xpackInfo ? xpackInfo.getLicense().type : 'oss',\n                                    expired: xpackInfo ? !xpackInfo.getLicense().isActive : false,\n                                    expiry_date_in_millis: xpackInfo.getLicense().expiryDateInMillis !== undefined\n                                        ? xpackInfo.getLicense().expiryDateInMillis\n                                        : -1,\n                                },\n                                security: {\n                                    enabled: xpackInfo\n                                        ? xpackInfo.get(\"features.\" + this.PLUGIN_ID + \".security.enabled\", false)\n                                        : false,\n                                    available: xpackInfo\n                                        ? xpackInfo.get(\"features.\" + this.PLUGIN_ID + \".security.available\", false)\n                                        : false,\n                                },\n                                settings: xpackInfo ? xpackInfo.get(\"features.\" + this.PLUGIN_ID + \".settings\") : {},\n                            };\n                        }\n                        catch (e) {\n                            throw new Error(\"Unexpected data structure from XPackInfoProvider, \" + JSON.stringify(e));\n                        }\n                        assertData = RuntimeFrameworkInfo.decode(xpackInfoUnpacked);\n                        if (assertData.isLeft()) {\n                            throw new Error(\"Error parsing xpack info in \" + this.PLUGIN_ID + \",   \" + PathReporter.report(assertData)[0]);\n                        }\n                        this.xpackInfo = xpackInfoUnpacked;\n                        _b.label = 2;\n                    case 2:\n                        _b.trys.push([2, 4, , 5]);\n                        _a = this;\n                        return [4 /*yield*/, $injector.get('ShieldUser').getCurrent().$promise];\n                    case 3:\n                        _a.shieldUser = _b.sent();\n                        assertUser = RuntimeFrameworkUser.decode(this.shieldUser);\n                        if (assertUser.isLeft()) {\n                            throw new Error(\"Error parsing user info in \" + this.PLUGIN_ID + \",   \" + PathReporter.report(assertUser)[0]);\n                        }\n                        return [3 /*break*/, 5];\n                    case 4:\n                        e_1 = _b.sent();\n                        this.shieldUser = null;\n                        return [3 /*break*/, 5];\n                    case 5: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    KibanaFrameworkAdapter.prototype.renderUIAtPath = function (path, component, toController) {\n        var _this = this;\n        if (toController === void 0) { toController = 'self'; }\n        var adapter = this;\n        this.routes.when(\"\" + path + tslib_1.__spread(Array(6)).map(function (e, n) { return \"/:arg\" + n + \"?\"; }).join(''), // Hack because angular 1 does not support wildcards\n        {\n            template: toController === 'self'\n                ? \"<\" + this.PLUGIN_ID + \"><div id=\\\"\" + this.PLUGIN_ID + \"ReactRoot\\\"></div></\" + this.PLUGIN_ID + \">\"\n                : \"<kbn-management-app section=\\\"\" + this.PLUGIN_ID.replace('_', '-') + \"\\\">\\n                <div id=\\\"management-sidenav\\\" class=\\\"euiPageSideBar\\\" style=\\\"position: static;\\\"></div>\\n                <div id=\\\"\" + this.PLUGIN_ID + \"ReactRoot\\\" />\\n               </kbn-management-app>\",\n            // tslint:disable-next-line: max-classes-per-file\n            controller: function ($scope, $route) {\n                try {\n                    $scope.$$postDigest(function () {\n                        var elem = document.getElementById(_this.PLUGIN_ID + \"ReactRoot\");\n                        ReactDOM.render(component, elem);\n                        adapter.manageAngularLifecycle($scope, $route, elem);\n                    });\n                    $scope.$onInit = function () {\n                        $scope.topNavMenu = [];\n                    };\n                }\n                catch (e) {\n                    throw new Error(\"Error rendering Beats CM to the dom, \" + e.message);\n                }\n            },\n        });\n    };\n    KibanaFrameworkAdapter.prototype.registerManagementSection = function (settings) {\n        var sectionId = settings.id || this.PLUGIN_ID;\n        if (!this.management.hasItem(sectionId)) {\n            this.management.register(sectionId, {\n                display: settings.name,\n                icon: settings.iconName,\n                order: settings.order || 30,\n            });\n        }\n    };\n    KibanaFrameworkAdapter.prototype.registerManagementUI = function (settings) {\n        var sectionId = settings.sectionId || this.PLUGIN_ID;\n        if (!this.management.hasItem(sectionId)) {\n            throw new Error(\"registerManagementUI was called with a sectionId of \" + sectionId + \", and that is is not yet regestered as a section\");\n        }\n        var section = this.management.getSection(sectionId);\n        section.register(sectionId, {\n            visible: settings.visable || true,\n            display: settings.name,\n            order: settings.order || 30,\n            url: \"#\" + settings.basePath,\n        });\n    };\n    KibanaFrameworkAdapter.prototype.manageAngularLifecycle = function ($scope, $route, elem) {\n        var _this = this;\n        var lastRoute = $route.current;\n        var deregister = $scope.$on('$locationChangeSuccess', function () {\n            var currentRoute = $route.current;\n            // if templates are the same we are on the same route\n            if (lastRoute.$$route.template === currentRoute.$$route.template) {\n                // this prevents angular from destroying scope\n                $route.current = lastRoute;\n            }\n            else {\n                if (elem) {\n                    ReactDOM.unmountComponentAtNode(elem);\n                    elem.remove();\n                    _this.settingSubscription.unsubscribe();\n                }\n            }\n        });\n        $scope.$on('$destroy', function () {\n            if (deregister) {\n                deregister();\n            }\n            // manually unmount component when scope is destroyed\n            if (elem) {\n                ReactDOM.unmountComponentAtNode(elem);\n                elem.remove();\n                _this.settingSubscription.unsubscribe();\n            }\n        });\n    };\n    return KibanaFrameworkAdapter;\n}());\nexport { KibanaFrameworkAdapter };\n// tslint:disable-next-line: max-classes-per-file\nvar KibanaAdapterServiceProvider = /** @class */ (function () {\n    function KibanaAdapterServiceProvider() {\n        this.serviceRefs = null;\n        this.bufferedCalls = [];\n    }\n    KibanaAdapterServiceProvider.prototype.$get = function ($rootScope, config) {\n        this.serviceRefs = {\n            config: config,\n            rootScope: $rootScope,\n        };\n        this.applyBufferedCalls(this.bufferedCalls);\n        return this;\n    };\n    KibanaAdapterServiceProvider.prototype.callOrBuffer = function (serviceCall) {\n        if (this.serviceRefs !== null) {\n            this.applyBufferedCalls([serviceCall]);\n        }\n        else {\n            this.bufferedCalls.push(serviceCall);\n        }\n    };\n    KibanaAdapterServiceProvider.prototype.applyBufferedCalls = function (bufferedCalls) {\n        var _this = this;\n        if (!this.serviceRefs) {\n            return;\n        }\n        this.serviceRefs.rootScope.$apply(function () {\n            bufferedCalls.forEach(function (serviceCall) {\n                if (!_this.serviceRefs) {\n                    return;\n                }\n                return serviceCall(_this.serviceRefs);\n            });\n        });\n    };\n    return KibanaAdapterServiceProvider;\n}());\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/beats_management/public/lib/adapters/framework/kibana_framework_adapter.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/beats_management/public/lib/adapters/framework/kibana_framework_adapter.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport { IScope } from 'angular';\nimport { PathReporter } from 'io-ts/lib/PathReporter';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { UIRoutes } from 'ui/routes';\nimport { BufferedKibanaServiceCall, KibanaAdapterServiceRefs, KibanaUIConfig } from '../../types';\nimport {\n  FrameworkAdapter,\n  FrameworkInfo,\n  FrameworkUser,\n  ManagementAPI,\n  RuntimeFrameworkInfo,\n  RuntimeFrameworkUser,\n} from './adapter_types';\ninterface IInjector {\n  get(injectable: string): any;\n}\n\nexport class KibanaFrameworkAdapter implements FrameworkAdapter {\n  public get info() {\n    if (this.xpackInfo) {\n      return this.xpackInfo;\n    } else {\n      throw new Error('framework adapter must have init called before anything else');\n    }\n  }\n\n  public get currentUser() {\n    return this.shieldUser!;\n  }\n  private xpackInfo: FrameworkInfo | null = null;\n  private adapterService: KibanaAdapterServiceProvider;\n  private shieldUser: FrameworkUser | null = null;\n  private settingSubscription: any;\n  constructor(\n    private readonly PLUGIN_ID: string,\n    private readonly management: ManagementAPI,\n    private readonly routes: UIRoutes,\n    private readonly getBasePath: () => string,\n    private readonly onKibanaReady: () => Promise<IInjector>,\n    private readonly XPackInfoProvider: unknown,\n    private readonly uiSettings: any,\n    public readonly version: string\n  ) {\n    this.adapterService = new KibanaAdapterServiceProvider();\n  }\n\n  // We dont really want to have this, but it's needed to conditionaly render for k7 due to\n  // when that data is needed.\n  public getUISetting(key: string): boolean {\n    return this.uiSettings.get(key);\n  }\n\n  public setUISettings = (key: string, value: any) => {\n    this.adapterService.callOrBuffer(({ config }) => {\n      config.set(key, value);\n    });\n  };\n\n  public async waitUntilFrameworkReady(): Promise<void> {\n    const $injector = await this.onKibanaReady();\n    const Private: any = $injector.get('Private');\n\n    let xpackInfo: any;\n    try {\n      xpackInfo = Private(this.XPackInfoProvider);\n    } catch (e) {\n      xpackInfo = false;\n    }\n\n    let xpackInfoUnpacked: FrameworkInfo;\n    try {\n      xpackInfoUnpacked = {\n        basePath: this.getBasePath(),\n        license: {\n          type: xpackInfo ? xpackInfo.getLicense().type : 'oss',\n          expired: xpackInfo ? !xpackInfo.getLicense().isActive : false,\n          expiry_date_in_millis:\n            xpackInfo.getLicense().expiryDateInMillis !== undefined\n              ? xpackInfo.getLicense().expiryDateInMillis\n              : -1,\n        },\n        security: {\n          enabled: xpackInfo\n            ? xpackInfo.get(`features.${this.PLUGIN_ID}.security.enabled`, false)\n            : false,\n          available: xpackInfo\n            ? xpackInfo.get(`features.${this.PLUGIN_ID}.security.available`, false)\n            : false,\n        },\n        settings: xpackInfo ? xpackInfo.get(`features.${this.PLUGIN_ID}.settings`) : {},\n      };\n    } catch (e) {\n      throw new Error(`Unexpected data structure from XPackInfoProvider, ${JSON.stringify(e)}`);\n    }\n\n    const assertData = RuntimeFrameworkInfo.decode(xpackInfoUnpacked);\n    if (assertData.isLeft()) {\n      throw new Error(\n        `Error parsing xpack info in ${this.PLUGIN_ID},   ${PathReporter.report(assertData)[0]}`\n      );\n    }\n    this.xpackInfo = xpackInfoUnpacked;\n\n    try {\n      this.shieldUser = await $injector.get('ShieldUser').getCurrent().$promise;\n      const assertUser = RuntimeFrameworkUser.decode(this.shieldUser);\n\n      if (assertUser.isLeft()) {\n        throw new Error(\n          `Error parsing user info in ${this.PLUGIN_ID},   ${PathReporter.report(assertUser)[0]}`\n        );\n      }\n    } catch (e) {\n      this.shieldUser = null;\n    }\n  }\n\n  public renderUIAtPath(\n    path: string,\n    component: React.ReactElement<any>,\n    toController: 'management' | 'self' = 'self'\n  ) {\n    const adapter = this;\n    this.routes.when(\n      `${path}${[...Array(6)].map((e, n) => `/:arg${n}?`).join('')}`, // Hack because angular 1 does not support wildcards\n      {\n        template:\n          toController === 'self'\n            ? `<${this.PLUGIN_ID}><div id=\"${this.PLUGIN_ID}ReactRoot\"></div></${this.PLUGIN_ID}>`\n            : `<kbn-management-app section=\"${this.PLUGIN_ID.replace('_', '-')}\">\n                <div id=\"management-sidenav\" class=\"euiPageSideBar\" style=\"position: static;\"></div>\n                <div id=\"${this.PLUGIN_ID}ReactRoot\" />\n               </kbn-management-app>`,\n        // tslint:disable-next-line: max-classes-per-file\n        controller: ($scope: any, $route: any) => {\n          try {\n            $scope.$$postDigest(() => {\n              const elem = document.getElementById(`${this.PLUGIN_ID}ReactRoot`);\n              ReactDOM.render(component, elem);\n              adapter.manageAngularLifecycle($scope, $route, elem);\n            });\n            $scope.$onInit = () => {\n              $scope.topNavMenu = [];\n            };\n          } catch (e) {\n            throw new Error(`Error rendering Beats CM to the dom, ${e.message}`);\n          }\n        },\n      }\n    );\n  }\n\n  public registerManagementSection(settings: {\n    id?: string;\n    name: string;\n    iconName: string;\n    order?: number;\n  }) {\n    const sectionId = settings.id || this.PLUGIN_ID;\n\n    if (!this.management.hasItem(sectionId)) {\n      this.management.register(sectionId, {\n        display: settings.name,\n        icon: settings.iconName,\n        order: settings.order || 30,\n      });\n    }\n  }\n\n  public registerManagementUI(settings: {\n    sectionId?: string;\n    name: string;\n    basePath: string;\n    visable?: boolean;\n    order?: number;\n  }) {\n    const sectionId = settings.sectionId || this.PLUGIN_ID;\n\n    if (!this.management.hasItem(sectionId)) {\n      throw new Error(\n        `registerManagementUI was called with a sectionId of ${sectionId}, and that is is not yet regestered as a section`\n      );\n    }\n\n    const section = this.management.getSection(sectionId);\n\n    section.register(sectionId, {\n      visible: settings.visable || true,\n      display: settings.name,\n      order: settings.order || 30,\n      url: `#${settings.basePath}`,\n    });\n  }\n\n  private manageAngularLifecycle($scope: any, $route: any, elem: any) {\n    const lastRoute = $route.current;\n    const deregister = $scope.$on('$locationChangeSuccess', () => {\n      const currentRoute = $route.current;\n      // if templates are the same we are on the same route\n      if (lastRoute.$$route.template === currentRoute.$$route.template) {\n        // this prevents angular from destroying scope\n        $route.current = lastRoute;\n      } else {\n        if (elem) {\n          ReactDOM.unmountComponentAtNode(elem);\n          elem.remove();\n          this.settingSubscription.unsubscribe();\n        }\n      }\n    });\n    $scope.$on('$destroy', () => {\n      if (deregister) {\n        deregister();\n      }\n\n      // manually unmount component when scope is destroyed\n      if (elem) {\n        ReactDOM.unmountComponentAtNode(elem);\n        elem.remove();\n        this.settingSubscription.unsubscribe();\n      }\n    });\n  }\n}\n\n// tslint:disable-next-line: max-classes-per-file\nclass KibanaAdapterServiceProvider {\n  public serviceRefs: KibanaAdapterServiceRefs | null = null;\n  public bufferedCalls: Array<BufferedKibanaServiceCall<KibanaAdapterServiceRefs>> = [];\n\n  public $get($rootScope: IScope, config: KibanaUIConfig) {\n    this.serviceRefs = {\n      config,\n      rootScope: $rootScope,\n    };\n\n    this.applyBufferedCalls(this.bufferedCalls);\n\n    return this;\n  }\n\n  public callOrBuffer(serviceCall: (serviceRefs: KibanaAdapterServiceRefs) => void) {\n    if (this.serviceRefs !== null) {\n      this.applyBufferedCalls([serviceCall]);\n    } else {\n      this.bufferedCalls.push(serviceCall);\n    }\n  }\n\n  public applyBufferedCalls(\n    bufferedCalls: Array<BufferedKibanaServiceCall<KibanaAdapterServiceRefs>>\n  ) {\n    if (!this.serviceRefs) {\n      return;\n    }\n\n    this.serviceRefs.rootScope.$apply(() => {\n      bufferedCalls.forEach(serviceCall => {\n        if (!this.serviceRefs) {\n          return;\n        }\n        return serviceCall(this.serviceRefs);\n      });\n    });\n  }\n}\n"]}]}