{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/containers/waffle/waffle_nodes.gql_query.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/containers/waffle/waffle_nodes.gql_query.ts","mtime":1567631711984},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport * as tslib_1 from \"tslib\";\nimport gql from 'graphql-tag';\nexport var waffleNodesQuery = gql(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([\"\\n  query WaffleNodesQuery(\\n    $sourceId: ID!\\n    $timerange: InfraTimerangeInput!\\n    $filterQuery: String\\n    $metric: InfraMetricInput!\\n    $path: [InfraPathInput!]!\\n  ) {\\n    source(id: $sourceId) {\\n      id\\n      map(timerange: $timerange, filterQuery: $filterQuery) {\\n        nodes(path: $path, metric: $metric) {\\n          path {\\n            value\\n            label\\n          }\\n          metric {\\n            name\\n            value\\n            avg\\n            max\\n          }\\n        }\\n      }\\n    }\\n  }\\n\"], [\"\\n  query WaffleNodesQuery(\\n    $sourceId: ID!\\n    $timerange: InfraTimerangeInput!\\n    $filterQuery: String\\n    $metric: InfraMetricInput!\\n    $path: [InfraPathInput!]!\\n  ) {\\n    source(id: $sourceId) {\\n      id\\n      map(timerange: $timerange, filterQuery: $filterQuery) {\\n        nodes(path: $path, metric: $metric) {\\n          path {\\n            value\\n            label\\n          }\\n          metric {\\n            name\\n            value\\n            avg\\n            max\\n          }\\n        }\\n      }\\n    }\\n  }\\n\"])));\nvar templateObject_1;\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/containers/waffle/waffle_nodes.gql_query.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/containers/waffle/waffle_nodes.gql_query.ts"],"names":[],"mappings":"AAAA;;;;GAIG;;AAEH,OAAO,GAAG,MAAM,aAAa,CAAC;AAE9B,MAAM,CAAC,IAAM,gBAAgB,GAAG,GAAG,smBAAA,2hBA0BlC,IAAA,CAAC","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport gql from 'graphql-tag';\n\nexport const waffleNodesQuery = gql`\n  query WaffleNodesQuery(\n    $sourceId: ID!\n    $timerange: InfraTimerangeInput!\n    $filterQuery: String\n    $metric: InfraMetricInput!\n    $path: [InfraPathInput!]!\n  ) {\n    source(id: $sourceId) {\n      id\n      map(timerange: $timerange, filterQuery: $filterQuery) {\n        nodes(path: $path, metric: $metric) {\n          path {\n            value\n            label\n          }\n          metric {\n            name\n            value\n            avg\n            max\n          }\n        }\n      }\n    }\n  }\n`;\n"]}]}