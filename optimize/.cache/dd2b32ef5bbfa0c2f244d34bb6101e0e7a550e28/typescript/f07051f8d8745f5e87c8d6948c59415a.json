{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/lib/compose/kibana_compose.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/lib/compose/kibana_compose.ts","mtime":1567631711985},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport 'ui/autoload/all';\n// @ts-ignore: path dynamic for kibana\nimport chrome from 'ui/chrome';\n// @ts-ignore: path dynamic for kibana\nimport { uiModules } from 'ui/modules';\nimport uiRoutes from 'ui/routes';\n// @ts-ignore: path dynamic for kibana\nimport { timezoneProvider } from 'ui/vis/lib/timezone';\nimport { InfraKibanaObservableApiAdapter } from '../adapters/observable_api/kibana_observable_api';\nimport introspectionQueryResultData from '../../graphql/introspection.json';\nimport { InfraKibanaFrameworkAdapter } from '../adapters/framework/kibana_framework_adapter';\nimport { InMemoryCache, IntrospectionFragmentMatcher } from 'apollo-cache-inmemory';\nimport ApolloClient from 'apollo-client';\nimport { ApolloLink } from 'apollo-link';\nimport { HttpLink } from 'apollo-link-http';\nimport { withClientState } from 'apollo-link-state';\nexport function compose() {\n    var cache = new InMemoryCache({\n        fragmentMatcher: new IntrospectionFragmentMatcher({\n            introspectionQueryResultData: introspectionQueryResultData,\n        }),\n    });\n    var observableApi = new InfraKibanaObservableApiAdapter({\n        basePath: chrome.getBasePath(),\n        xsrfToken: chrome.getXsrfToken(),\n    });\n    var graphQLOptions = {\n        cache: cache,\n        link: ApolloLink.from([\n            withClientState({\n                cache: cache,\n                resolvers: {},\n            }),\n            new HttpLink({\n                credentials: 'same-origin',\n                headers: {\n                    'kbn-xsrf': chrome.getXsrfToken(),\n                },\n                uri: chrome.getBasePath() + \"/api/infra/graphql\",\n            }),\n        ]),\n    };\n    var apolloClient = new ApolloClient(graphQLOptions);\n    var infraModule = uiModules.get('app/infa');\n    var framework = new InfraKibanaFrameworkAdapter(infraModule, uiRoutes, timezoneProvider);\n    var libs = {\n        apolloClient: apolloClient,\n        framework: framework,\n        observableApi: observableApi,\n    };\n    return libs;\n}\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/lib/compose/kibana_compose.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/lib/compose/kibana_compose.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAEH,OAAO,iBAAiB,CAAC;AACzB,sCAAsC;AACtC,OAAO,MAAM,MAAM,WAAW,CAAC;AAC/B,sCAAsC;AACtC,OAAO,EAAE,SAAS,EAAE,MAAM,YAAY,CAAC;AACvC,OAAO,QAAQ,MAAM,WAAW,CAAC;AACjC,sCAAsC;AACtC,OAAO,EAAE,gBAAgB,EAAE,MAAM,qBAAqB,CAAC;AAEvD,OAAO,EAAE,+BAA+B,EAAE,MAAM,kDAAkD,CAAC;AAEnG,OAAO,4BAA4B,MAAM,kCAAkC,CAAC;AAC5E,OAAO,EAAE,2BAA2B,EAAE,MAAM,gDAAgD,CAAC;AAG7F,OAAO,EAAE,aAAa,EAAE,4BAA4B,EAAE,MAAM,uBAAuB,CAAC;AACpF,OAAO,YAAY,MAAM,eAAe,CAAC;AACzC,OAAO,EAAE,UAAU,EAAE,MAAM,aAAa,CAAC;AACzC,OAAO,EAAE,QAAQ,EAAE,MAAM,kBAAkB,CAAC;AAC5C,OAAO,EAAE,eAAe,EAAE,MAAM,mBAAmB,CAAC;AAEpD,MAAM,UAAU,OAAO;IACrB,IAAM,KAAK,GAAG,IAAI,aAAa,CAAC;QAC9B,eAAe,EAAE,IAAI,4BAA4B,CAAC;YAChD,4BAA4B,8BAAA;SAC7B,CAAC;KACH,CAAC,CAAC;IAEH,IAAM,aAAa,GAAG,IAAI,+BAA+B,CAAC;QACxD,QAAQ,EAAE,MAAM,CAAC,WAAW,EAAE;QAC9B,SAAS,EAAE,MAAM,CAAC,YAAY,EAAE;KACjC,CAAC,CAAC;IAEH,IAAM,cAAc,GAAG;QACrB,KAAK,OAAA;QACL,IAAI,EAAE,UAAU,CAAC,IAAI,CAAC;YACpB,eAAe,CAAC;gBACd,KAAK,OAAA;gBACL,SAAS,EAAE,EAAE;aACd,CAAC;YACF,IAAI,QAAQ,CAAC;gBACX,WAAW,EAAE,aAAa;gBAC1B,OAAO,EAAE;oBACP,UAAU,EAAE,MAAM,CAAC,YAAY,EAAE;iBAClC;gBACD,GAAG,EAAK,MAAM,CAAC,WAAW,EAAE,uBAAoB;aACjD,CAAC;SACH,CAAC;KACH,CAAC;IAEF,IAAM,YAAY,GAAG,IAAI,YAAY,CAAC,cAAc,CAAC,CAAC;IAEtD,IAAM,WAAW,GAAG,SAAS,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;IAE9C,IAAM,SAAS,GAAG,IAAI,2BAA2B,CAAC,WAAW,EAAE,QAAQ,EAAE,gBAAgB,CAAC,CAAC;IAE3F,IAAM,IAAI,GAAsB;QAC9B,YAAY,cAAA;QACZ,SAAS,WAAA;QACT,aAAa,eAAA;KACd,CAAC;IACF,OAAO,IAAI,CAAC;AACd,CAAC","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport 'ui/autoload/all';\n// @ts-ignore: path dynamic for kibana\nimport chrome from 'ui/chrome';\n// @ts-ignore: path dynamic for kibana\nimport { uiModules } from 'ui/modules';\nimport uiRoutes from 'ui/routes';\n// @ts-ignore: path dynamic for kibana\nimport { timezoneProvider } from 'ui/vis/lib/timezone';\n\nimport { InfraKibanaObservableApiAdapter } from '../adapters/observable_api/kibana_observable_api';\n\nimport introspectionQueryResultData from '../../graphql/introspection.json';\nimport { InfraKibanaFrameworkAdapter } from '../adapters/framework/kibana_framework_adapter';\nimport { InfraFrontendLibs } from '../lib';\n\nimport { InMemoryCache, IntrospectionFragmentMatcher } from 'apollo-cache-inmemory';\nimport ApolloClient from 'apollo-client';\nimport { ApolloLink } from 'apollo-link';\nimport { HttpLink } from 'apollo-link-http';\nimport { withClientState } from 'apollo-link-state';\n\nexport function compose(): InfraFrontendLibs {\n  const cache = new InMemoryCache({\n    fragmentMatcher: new IntrospectionFragmentMatcher({\n      introspectionQueryResultData,\n    }),\n  });\n\n  const observableApi = new InfraKibanaObservableApiAdapter({\n    basePath: chrome.getBasePath(),\n    xsrfToken: chrome.getXsrfToken(),\n  });\n\n  const graphQLOptions = {\n    cache,\n    link: ApolloLink.from([\n      withClientState({\n        cache,\n        resolvers: {},\n      }),\n      new HttpLink({\n        credentials: 'same-origin',\n        headers: {\n          'kbn-xsrf': chrome.getXsrfToken(),\n        },\n        uri: `${chrome.getBasePath()}/api/infra/graphql`,\n      }),\n    ]),\n  };\n\n  const apolloClient = new ApolloClient(graphQLOptions);\n\n  const infraModule = uiModules.get('app/infa');\n\n  const framework = new InfraKibanaFrameworkAdapter(infraModule, uiRoutes, timezoneProvider);\n\n  const libs: InfraFrontendLibs = {\n    apolloClient,\n    framework,\n    observableApi,\n  };\n  return libs;\n}\n"]}]}