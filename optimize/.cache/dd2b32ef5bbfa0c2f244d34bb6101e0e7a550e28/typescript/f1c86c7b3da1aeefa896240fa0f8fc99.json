{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/apm/public/store/reactReduxRequest/transactionDetailsCharts.tsx","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/apm/public/store/reactReduxRequest/transactionDetailsCharts.tsx","mtime":1567631711872},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport * as tslib_1 from \"tslib\";\nimport React from 'react';\nimport { Request } from 'react-redux-request';\nimport { createSelector } from 'reselect';\nimport { loadDetailsCharts } from '../../services/rest/apm/transaction_groups';\nimport { getTransactionCharts } from '../selectors/chartSelectors';\nimport { getUrlParams } from '../urlParams';\nvar ID = 'transactionDetailsCharts';\nvar INITIAL_DATA = {\n    apmTimeseries: {\n        totalHits: 0,\n        responseTimes: {\n            avg: [],\n            p95: [],\n            p99: []\n        },\n        tpmBuckets: [],\n        overallAvgDuration: undefined\n    },\n    anomalyTimeseries: undefined\n};\nexport var getTransactionDetailsCharts = createSelector(getUrlParams, function (state) { return state.reactReduxRequest[ID]; }, function (urlParams, detailCharts) {\n    if (detailCharts === void 0) { detailCharts = {}; }\n    return tslib_1.__assign({}, detailCharts, { data: getTransactionCharts(urlParams, detailCharts.data || INITIAL_DATA) });\n});\nexport function TransactionDetailsChartsRequest(_a) {\n    var urlParams = _a.urlParams, render = _a.render;\n    var serviceName = urlParams.serviceName, start = urlParams.start, end = urlParams.end, transactionType = urlParams.transactionType, transactionName = urlParams.transactionName, kuery = urlParams.kuery;\n    if (!(serviceName && start && end && transactionType && transactionName)) {\n        return null;\n    }\n    return (React.createElement(Request, { id: ID, fn: loadDetailsCharts, args: [\n            { serviceName: serviceName, start: start, end: end, transactionType: transactionType, transactionName: transactionName, kuery: kuery }\n        ], selector: getTransactionDetailsCharts, render: render }));\n}\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/apm/public/store/reactReduxRequest/transactionDetailsCharts.tsx","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/apm/public/store/reactReduxRequest/transactionDetailsCharts.tsx"],"names":[],"mappings":"AAAA;;;;GAIG;;AAEH,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,OAAO,EAAa,MAAM,qBAAqB,CAAC;AACzD,OAAO,EAAE,cAAc,EAAE,MAAM,UAAU,CAAC;AAG1C,OAAO,EAAE,iBAAiB,EAAE,MAAM,4CAA4C,CAAC;AAE/E,OAAO,EAAE,oBAAoB,EAAE,MAAM,6BAA6B,CAAC;AACnE,OAAO,EAAE,YAAY,EAAc,MAAM,cAAc,CAAC;AAExD,IAAM,EAAE,GAAG,0BAA0B,CAAC;AACtC,IAAM,YAAY,GAA0B;IAC1C,aAAa,EAAE;QACb,SAAS,EAAE,CAAC;QACZ,aAAa,EAAE;YACb,GAAG,EAAE,EAAE;YACP,GAAG,EAAE,EAAE;YACP,GAAG,EAAE,EAAE;SACR;QACD,UAAU,EAAE,EAAE;QACd,kBAAkB,EAAE,SAAS;KAC9B;IACD,iBAAiB,EAAE,SAAS;CAC7B,CAAC;AAEF,MAAM,CAAC,IAAM,2BAA2B,GAAG,cAAc,CACvD,YAAY,EACZ,UAAC,KAAkB,IAAK,OAAA,KAAK,CAAC,iBAAiB,CAAC,EAAE,CAAC,EAA3B,CAA2B,EACnD,UAAC,SAAS,EAAE,YAAiB;IAAjB,6BAAA,EAAA,iBAAiB;IAC3B,4BACK,YAAY,IACf,IAAI,EAAE,oBAAoB,CAAC,SAAS,EAAE,YAAY,CAAC,IAAI,IAAI,YAAY,CAAC,IACxE;AACJ,CAAC,CACF,CAAC;AAOF,MAAM,UAAU,+BAA+B,CAAC,EAA4B;QAA1B,wBAAS,EAAE,kBAAM;IAE/D,IAAA,mCAAW,EACX,uBAAK,EACL,mBAAG,EACH,2CAAe,EACf,2CAAe,EACf,uBAAK,CACO;IAEd,IAAI,CAAC,CAAC,WAAW,IAAI,KAAK,IAAI,GAAG,IAAI,eAAe,IAAI,eAAe,CAAC,EAAE;QACxE,OAAO,IAAI,CAAC;KACb;IAED,OAAO,CACL,oBAAC,OAAO,IACN,EAAE,EAAE,EAAE,EACN,EAAE,EAAE,iBAAiB,EACrB,IAAI,EAAE;YACJ,EAAE,WAAW,aAAA,EAAE,KAAK,OAAA,EAAE,GAAG,KAAA,EAAE,eAAe,iBAAA,EAAE,eAAe,iBAAA,EAAE,KAAK,OAAA,EAAE;SACrE,EACD,QAAQ,EAAE,2BAA2B,EACrC,MAAM,EAAE,MAAM,GACd,CACH,CAAC;AACJ,CAAC","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport React from 'react';\nimport { Request, RRRRender } from 'react-redux-request';\nimport { createSelector } from 'reselect';\nimport { ITransactionChartData } from 'x-pack/plugins/apm/public/store/selectors/chartSelectors';\nimport { TimeSeriesAPIResponse } from 'x-pack/plugins/apm/server/lib/transactions/charts';\nimport { loadDetailsCharts } from '../../services/rest/apm/transaction_groups';\nimport { IReduxState } from '../rootReducer';\nimport { getTransactionCharts } from '../selectors/chartSelectors';\nimport { getUrlParams, IUrlParams } from '../urlParams';\n\nconst ID = 'transactionDetailsCharts';\nconst INITIAL_DATA: TimeSeriesAPIResponse = {\n  apmTimeseries: {\n    totalHits: 0,\n    responseTimes: {\n      avg: [],\n      p95: [],\n      p99: []\n    },\n    tpmBuckets: [],\n    overallAvgDuration: undefined\n  },\n  anomalyTimeseries: undefined\n};\n\nexport const getTransactionDetailsCharts = createSelector(\n  getUrlParams,\n  (state: IReduxState) => state.reactReduxRequest[ID],\n  (urlParams, detailCharts = {}) => {\n    return {\n      ...detailCharts,\n      data: getTransactionCharts(urlParams, detailCharts.data || INITIAL_DATA)\n    };\n  }\n);\n\ninterface Props {\n  urlParams: IUrlParams;\n  render: RRRRender<ITransactionChartData>;\n}\n\nexport function TransactionDetailsChartsRequest({ urlParams, render }: Props) {\n  const {\n    serviceName,\n    start,\n    end,\n    transactionType,\n    transactionName,\n    kuery\n  } = urlParams;\n\n  if (!(serviceName && start && end && transactionType && transactionName)) {\n    return null;\n  }\n\n  return (\n    <Request\n      id={ID}\n      fn={loadDetailsCharts}\n      args={[\n        { serviceName, start, end, transactionType, transactionName, kuery }\n      ]}\n      selector={getTransactionDetailsCharts}\n      render={render}\n    />\n  );\n}\n"]}]}