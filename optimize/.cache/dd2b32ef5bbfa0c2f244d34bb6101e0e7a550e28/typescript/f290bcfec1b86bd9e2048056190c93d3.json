{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/src/legacy/core_plugins/kibana/public/visualize/embeddable/visualize_embeddable_factory.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/legacy/core_plugins/kibana/public/visualize/embeddable/visualize_embeddable_factory.ts","mtime":1567631711601},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport * as tslib_1 from \"tslib\";\nimport { EmbeddableFactory } from 'ui/embeddable';\nimport { getVisualizeLoader } from 'ui/visualize/loader';\nimport { VisualizeEmbeddable } from './visualize_embeddable';\nimport { DisabledLabEmbeddable } from './disabled_lab_embeddable';\nvar VisualizeEmbeddableFactory = /** @class */ (function (_super) {\n    tslib_1.__extends(VisualizeEmbeddableFactory, _super);\n    function VisualizeEmbeddableFactory(savedVisualizations, config) {\n        var _this = _super.call(this, { name: 'visualization' }) || this;\n        _this.config = config;\n        _this.savedVisualizations = savedVisualizations;\n        return _this;\n    }\n    VisualizeEmbeddableFactory.prototype.getEditPath = function (panelId) {\n        return this.savedVisualizations.urlFor(panelId);\n    };\n    /**\n     *\n     * @param {Object} panelMetadata. Currently just passing in panelState but it's more than we need, so we should\n     * decouple this to only include data given to us from the embeddable when it's added to the dashboard. Generally\n     * will be just the object id, but could be anything depending on the plugin.\n     * @param {function} onEmbeddableStateChanged\n     * @return {Promise.<{ metadata, onContainerStateChanged, render, destroy }>}\n     */\n    VisualizeEmbeddableFactory.prototype.create = function (panelMetadata, onEmbeddableStateChanged) {\n        var _this = this;\n        var visId = panelMetadata.id;\n        var editUrl = this.getEditPath(visId);\n        var waitFor = [\n            getVisualizeLoader(),\n            this.savedVisualizations.get(visId),\n        ];\n        return Promise.all(waitFor).then(function (_a) {\n            var _b = tslib_1.__read(_a, 2), loader = _b[0], savedObject = _b[1];\n            var isLabsEnabled = _this.config.get('visualize:enableLabs');\n            if (!isLabsEnabled && savedObject.vis.type.stage === 'experimental') {\n                return new DisabledLabEmbeddable(savedObject.title);\n            }\n            else {\n                return new VisualizeEmbeddable({\n                    onEmbeddableStateChanged: onEmbeddableStateChanged,\n                    savedVisualization: savedObject,\n                    editUrl: editUrl,\n                    loader: loader,\n                });\n            }\n        });\n    };\n    return VisualizeEmbeddableFactory;\n}(EmbeddableFactory));\nexport { VisualizeEmbeddableFactory };\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/src/legacy/core_plugins/kibana/public/visualize/embeddable/visualize_embeddable_factory.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/src/legacy/core_plugins/kibana/public/visualize/embeddable/visualize_embeddable_factory.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;GAiBG;;AAEH,OAAO,EAAE,iBAAiB,EAAE,MAAM,eAAe,CAAC;AAClD,OAAO,EAAE,kBAAkB,EAAmB,MAAM,qBAAqB,CAAC;AAC1E,OAAO,EAAE,mBAAmB,EAAE,MAAM,wBAAwB,CAAC;AAM7D,OAAO,EAAE,qBAAqB,EAAE,MAAM,2BAA2B,CAAC;AAMlE;IAAgD,sDAAiB;IAI/D,oCAAY,mBAAwC,EAAE,MAA2B;QAAjF,YACE,kBAAM,EAAE,IAAI,EAAE,eAAe,EAAE,CAAC,SAGjC;QAFC,KAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,KAAI,CAAC,mBAAmB,GAAG,mBAAmB,CAAC;;IACjD,CAAC;IAEM,gDAAW,GAAlB,UAAmB,OAAe;QAChC,OAAO,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IAClD,CAAC;IAED;;;;;;;OAOG;IACI,2CAAM,GAAb,UACE,aAAuD,EACvD,wBAAkD;QAFpD,iBAyBC;QArBC,IAAM,KAAK,GAAG,aAAa,CAAC,EAAE,CAAC;QAC/B,IAAM,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QAExC,IAAM,OAAO,GAAwD;YACnE,kBAAkB,EAAE;YACpB,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,KAAK,CAAC;SACpC,CAAC;QACF,OAAO,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,EAAwD;gBAAxD,0BAAwD,EAAvD,cAAM,EAAE,mBAAW;YACpD,IAAM,aAAa,GAAG,KAAI,CAAC,MAAM,CAAC,GAAG,CAAU,sBAAsB,CAAC,CAAC;YAEvE,IAAI,CAAC,aAAa,IAAI,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,KAAK,cAAc,EAAE;gBACnE,OAAO,IAAI,qBAAqB,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;aACrD;iBAAM;gBACL,OAAO,IAAI,mBAAmB,CAAC;oBAC7B,wBAAwB,0BAAA;oBACxB,kBAAkB,EAAE,WAAW;oBAC/B,OAAO,SAAA;oBACP,MAAM,QAAA;iBACP,CAAC,CAAC;aACJ;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IACH,iCAAC;AAAD,CAAC,AAhDD,CAAgD,iBAAiB,GAgDhE","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { EmbeddableFactory } from 'ui/embeddable';\nimport { getVisualizeLoader, VisualizeLoader } from 'ui/visualize/loader';\nimport { VisualizeEmbeddable } from './visualize_embeddable';\n\nimport { Legacy } from 'kibana';\nimport { OnEmbeddableStateChanged } from 'ui/embeddable/embeddable_factory';\nimport { VisSavedObject } from 'ui/visualize/loader/types';\nimport { SavedVisualizations } from '../types';\nimport { DisabledLabEmbeddable } from './disabled_lab_embeddable';\n\nexport interface VisualizeEmbeddableInstanceConfiguration {\n  id: string;\n}\n\nexport class VisualizeEmbeddableFactory extends EmbeddableFactory {\n  private savedVisualizations: SavedVisualizations;\n  private config: Legacy.KibanaConfig;\n\n  constructor(savedVisualizations: SavedVisualizations, config: Legacy.KibanaConfig) {\n    super({ name: 'visualization' });\n    this.config = config;\n    this.savedVisualizations = savedVisualizations;\n  }\n\n  public getEditPath(panelId: string) {\n    return this.savedVisualizations.urlFor(panelId);\n  }\n\n  /**\n   *\n   * @param {Object} panelMetadata. Currently just passing in panelState but it's more than we need, so we should\n   * decouple this to only include data given to us from the embeddable when it's added to the dashboard. Generally\n   * will be just the object id, but could be anything depending on the plugin.\n   * @param {function} onEmbeddableStateChanged\n   * @return {Promise.<{ metadata, onContainerStateChanged, render, destroy }>}\n   */\n  public create(\n    panelMetadata: VisualizeEmbeddableInstanceConfiguration,\n    onEmbeddableStateChanged: OnEmbeddableStateChanged\n  ) {\n    const visId = panelMetadata.id;\n    const editUrl = this.getEditPath(visId);\n\n    const waitFor: [Promise<VisualizeLoader>, Promise<VisSavedObject>] = [\n      getVisualizeLoader(),\n      this.savedVisualizations.get(visId),\n    ];\n    return Promise.all(waitFor).then(([loader, savedObject]: [VisualizeLoader, VisSavedObject]) => {\n      const isLabsEnabled = this.config.get<boolean>('visualize:enableLabs');\n\n      if (!isLabsEnabled && savedObject.vis.type.stage === 'experimental') {\n        return new DisabledLabEmbeddable(savedObject.title);\n      } else {\n        return new VisualizeEmbeddable({\n          onEmbeddableStateChanged,\n          savedVisualization: savedObject,\n          editUrl,\n          loader,\n        });\n      }\n    });\n  }\n}\n"]}]}