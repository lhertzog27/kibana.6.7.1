{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/public/lib/aeroelastic/state.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/public/lib/aeroelastic/state.ts","mtime":1567631711932},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport * as tslib_1 from \"tslib\";\nexport var shallowEqual = function (a, b) {\n    if (a === b) {\n        return true;\n    }\n    if (a.length !== b.length) {\n        return false;\n    }\n    for (var i = 0; i < a.length; i++) {\n        if (a[i] !== b[i]) {\n            return false;\n        }\n    }\n    return true;\n};\nvar makeUid = function () { return 1e11 + Math.floor((1e12 - 1e11) * Math.random()); };\nexport var selectReduce = function (fun, previousValue) { return function () {\n    var inputs = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        inputs[_i] = arguments[_i];\n    }\n    // last-value memoizing version of this single line function:\n    // (fun, previousValue) => (...inputs) => state => previousValue = fun(previousValue, ...inputs.map(input => input(state)))\n    var argumentValues = [];\n    var value = previousValue;\n    var prevValue = previousValue;\n    return function (state) {\n        if (shallowEqual(argumentValues, (argumentValues = inputs.map(function (input) { return input(state); }))) &&\n            value === prevValue) {\n            return value;\n        }\n        prevValue = value;\n        value = fun.apply(void 0, tslib_1.__spread([prevValue], argumentValues));\n        return value;\n    };\n}; };\nexport var select = function (fun) { return function () {\n    var inputs = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        inputs[_i] = arguments[_i];\n    }\n    // last-value memoizing version of this single line function:\n    // fun => (...inputs) => state => fun(...inputs.map(input => input(state)))\n    var argumentValues = [];\n    var value;\n    var actionId;\n    return function (state) {\n        var lastActionId = state.primaryUpdate.payload.uid;\n        if (actionId === lastActionId ||\n            shallowEqual(argumentValues, (argumentValues = inputs.map(function (input) { return input(state); })))) {\n            return value;\n        }\n        value = fun.apply(void 0, tslib_1.__spread(argumentValues));\n        actionId = lastActionId;\n        return value;\n    };\n}; };\nexport var createStore = function (initialState, onChangeCallback) {\n    var currentState = initialState;\n    var updater = function (state) { return state; }; // default: no side effect\n    var getCurrentState = function () { return currentState; };\n    // const setCurrentState = newState => (currentState = newState);\n    var setUpdater = function (updaterFunction) {\n        updater = updaterFunction;\n    };\n    var commit = function (type, payload, meta) {\n        if (meta === void 0) { meta = { silent: false }; }\n        currentState = updater(tslib_1.__assign({}, currentState, { primaryUpdate: {\n                type: type,\n                payload: tslib_1.__assign({}, payload, { uid: makeUid() }),\n            } }));\n        if (!meta.silent) {\n            onChangeCallback({ type: type, state: currentState }, meta);\n        }\n    };\n    var dispatch = function (type, payload) { return commit(type, payload); };\n    return { getCurrentState: getCurrentState, setUpdater: setUpdater, commit: commit, dispatch: dispatch };\n};\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/public/lib/aeroelastic/state.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/canvas/public/lib/aeroelastic/state.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport {\n  ActionId,\n  ChangeCallbackFunction,\n  Meta,\n  NodeFunction,\n  NodeResult,\n  Payload,\n  TypeName,\n  UpdaterFunction,\n} from './types';\n\nexport const shallowEqual = (a: any, b: any): boolean => {\n  if (a === b) {\n    return true;\n  }\n  if (a.length !== b.length) {\n    return false;\n  }\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst makeUid = (): ActionId => 1e11 + Math.floor((1e12 - 1e11) * Math.random());\n\nexport const selectReduce = (fun: NodeFunction, previousValue: NodeResult): NodeFunction => (\n  ...inputs: NodeFunction[]\n): NodeResult => {\n  // last-value memoizing version of this single line function:\n  // (fun, previousValue) => (...inputs) => state => previousValue = fun(previousValue, ...inputs.map(input => input(state)))\n  let argumentValues = [] as NodeResult[];\n  let value = previousValue;\n  let prevValue = previousValue;\n  return (state: NodeResult) => {\n    if (\n      shallowEqual(argumentValues, (argumentValues = inputs.map(input => input(state)))) &&\n      value === prevValue\n    ) {\n      return value;\n    }\n\n    prevValue = value;\n    value = fun(prevValue, ...argumentValues);\n    return value;\n  };\n};\n\nexport const select = (fun: NodeFunction): NodeFunction => (\n  ...inputs: NodeFunction[]\n): NodeResult => {\n  // last-value memoizing version of this single line function:\n  // fun => (...inputs) => state => fun(...inputs.map(input => input(state)))\n  let argumentValues = [] as NodeResult[];\n  let value: NodeResult;\n  let actionId: ActionId;\n  return (state: NodeResult) => {\n    const lastActionId: ActionId = state.primaryUpdate.payload.uid;\n    if (\n      actionId === lastActionId ||\n      shallowEqual(argumentValues, (argumentValues = inputs.map(input => input(state))))\n    ) {\n      return value;\n    }\n\n    value = fun(...argumentValues);\n    actionId = lastActionId;\n    return value;\n  };\n};\n\nexport const createStore = (initialState: NodeResult, onChangeCallback: ChangeCallbackFunction) => {\n  let currentState = initialState;\n  let updater: UpdaterFunction = (state: NodeResult): NodeResult => state; // default: no side effect\n  const getCurrentState = () => currentState;\n  // const setCurrentState = newState => (currentState = newState);\n  const setUpdater = (updaterFunction: UpdaterFunction) => {\n    updater = updaterFunction;\n  };\n\n  const commit = (type: TypeName, payload: Payload, meta: Meta = { silent: false }) => {\n    currentState = updater({\n      ...currentState,\n      primaryUpdate: {\n        type,\n        payload: { ...payload, uid: makeUid() },\n      },\n    });\n    if (!meta.silent) {\n      onChangeCallback({ type, state: currentState }, meta);\n    }\n  };\n\n  const dispatch = (type: TypeName, payload: Payload) => commit(type, payload);\n\n  return { getCurrentState, setUpdater, commit, dispatch };\n};\n"]}]}