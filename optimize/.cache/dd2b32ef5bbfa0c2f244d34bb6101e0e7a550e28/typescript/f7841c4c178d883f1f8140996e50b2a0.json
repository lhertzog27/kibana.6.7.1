{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/apm/public/services/rest/apm/transactions.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/apm/public/services/rest/apm/transactions.ts","mtime":1567631711870},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport * as tslib_1 from \"tslib\";\nimport { callApi } from '../callApi';\nimport { addVersion, getEncodedEsQuery } from './apm';\nexport function loadSpans(_a) {\n    var serviceName = _a.serviceName, start = _a.start, end = _a.end, transactionId = _a.transactionId;\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n        var hits;\n        return tslib_1.__generator(this, function (_b) {\n            switch (_b.label) {\n                case 0: return [4 /*yield*/, callApi({\n                        pathname: \"/api/apm/services/\" + serviceName + \"/transactions/\" + transactionId + \"/spans\",\n                        query: {\n                            start: start,\n                            end: end\n                        }\n                    })];\n                case 1:\n                    hits = _b.sent();\n                    return [2 /*return*/, hits.map(addVersion).map(addSpanId)];\n            }\n        });\n    });\n}\nfunction addSpanId(hit, i) {\n    if (!hit.span.id) {\n        hit.span.id = i;\n    }\n    return hit;\n}\nexport function loadTransaction(_a) {\n    var serviceName = _a.serviceName, start = _a.start, end = _a.end, transactionId = _a.transactionId, traceId = _a.traceId, kuery = _a.kuery;\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n        var result, _b, _c, _d, e_1, err;\n        return tslib_1.__generator(this, function (_e) {\n            switch (_e.label) {\n                case 0:\n                    _e.trys.push([0, 3, , 4]);\n                    _b = callApi;\n                    _c = {\n                        pathname: \"/api/apm/services/\" + serviceName + \"/transactions/\" + transactionId\n                    };\n                    _d = {\n                        traceId: traceId,\n                        start: start,\n                        end: end\n                    };\n                    return [4 /*yield*/, getEncodedEsQuery(kuery)];\n                case 1: return [4 /*yield*/, _b.apply(void 0, [(_c.query = (_d.esFilterQuery = _e.sent(),\n                            _d),\n                            _c)])];\n                case 2:\n                    result = _e.sent();\n                    return [2 /*return*/, addVersion(result)];\n                case 3:\n                    e_1 = _e.sent();\n                    err = e_1;\n                    // swallow 404 errors\n                    if (err.res.status === 404) {\n                        return [2 /*return*/];\n                    }\n                    // re-throw all other errors\n                    throw err;\n                case 4: return [2 /*return*/];\n            }\n        });\n    });\n}\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/apm/public/services/rest/apm/transactions.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/apm/public/services/rest/apm/transactions.ts"],"names":[],"mappings":"AAAA;;;;GAIG;;AAOH,OAAO,EAAE,OAAO,EAAE,MAAM,YAAY,CAAC;AACrC,OAAO,EAAE,UAAU,EAAE,iBAAiB,EAAE,MAAM,OAAO,CAAC;AAEtD,MAAM,UAAgB,SAAS,CAAC,EAKnB;QAJX,4BAAW,EACX,gBAAK,EACL,YAAG,EACH,gCAAa;;;;;wBAEA,qBAAM,OAAO,CAAsB;wBAC9C,QAAQ,EAAE,uBAAqB,WAAW,sBAAiB,aAAa,WAAQ;wBAChF,KAAK,EAAE;4BACL,KAAK,OAAA;4BACL,GAAG,KAAA;yBACJ;qBACF,CAAC,EAAA;;oBANI,IAAI,GAAG,SAMX;oBAEF,sBAAO,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,EAAC;;;;CAC5C;AAED,SAAS,SAAS,CAAC,GAAS,EAAE,CAAS;IACrC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,EAAE;QAChB,GAAG,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC;KACjB;IACD,OAAO,GAAG,CAAC;AACb,CAAC;AAED,MAAM,UAAgB,eAAe,CAAC,EAOzB;QANX,4BAAW,EACX,gBAAK,EACL,YAAG,EACH,gCAAa,EACb,oBAAO,EACP,gBAAK;;;;;;;oBAGkB,KAAA,OAAO,CAAA;;wBAC1B,QAAQ,EAAE,uBAAqB,WAAW,sBAAiB,aAAe;;;wBAExE,OAAO,SAAA;wBACP,KAAK,OAAA;wBACL,GAAG,KAAA;;oBACY,qBAAM,iBAAiB,CAAC,KAAK,CAAC,EAAA;wBANlC,qBAAM,mBAEnB,QAAK,IAIH,gBAAa,GAAE,SAA8B;+BAC9C;iCACD,EAAA;;oBARI,MAAM,GAAG,SAQb;oBACF,sBAAO,UAAU,CAAC,MAAM,CAAC,EAAC;;;oBAEpB,GAAG,GAAgB,GAAC,CAAC;oBAE3B,qBAAqB;oBACrB,IAAI,GAAG,CAAC,GAAG,CAAC,MAAM,KAAK,GAAG,EAAE;wBAC1B,sBAAO;qBACR;oBAED,4BAA4B;oBAC5B,MAAM,GAAG,CAAC;;;;;CAEb","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport { KFetchError } from 'ui/kfetch/kfetch_error';\nimport { TransactionAPIResponse } from 'x-pack/plugins/apm/server/lib/transactions/get_transaction';\nimport { SpanListAPIResponse } from 'x-pack/plugins/apm/server/lib/transactions/spans/get_spans';\nimport { Span } from 'x-pack/plugins/apm/typings/es_schemas/Span';\nimport { IUrlParams } from '../../../store/urlParams';\nimport { callApi } from '../callApi';\nimport { addVersion, getEncodedEsQuery } from './apm';\n\nexport async function loadSpans({\n  serviceName,\n  start,\n  end,\n  transactionId\n}: IUrlParams) {\n  const hits = await callApi<SpanListAPIResponse>({\n    pathname: `/api/apm/services/${serviceName}/transactions/${transactionId}/spans`,\n    query: {\n      start,\n      end\n    }\n  });\n\n  return hits.map(addVersion).map(addSpanId);\n}\n\nfunction addSpanId(hit: Span, i: number) {\n  if (!hit.span.id) {\n    hit.span.id = i;\n  }\n  return hit;\n}\n\nexport async function loadTransaction({\n  serviceName,\n  start,\n  end,\n  transactionId,\n  traceId,\n  kuery\n}: IUrlParams) {\n  try {\n    const result = await callApi<TransactionAPIResponse>({\n      pathname: `/api/apm/services/${serviceName}/transactions/${transactionId}`,\n      query: {\n        traceId,\n        start,\n        end,\n        esFilterQuery: await getEncodedEsQuery(kuery)\n      }\n    });\n    return addVersion(result);\n  } catch (e) {\n    const err: KFetchError = e;\n\n    // swallow 404 errors\n    if (err.res.status === 404) {\n      return;\n    }\n\n    // re-throw all other errors\n    throw err;\n  }\n}\n"]}]}