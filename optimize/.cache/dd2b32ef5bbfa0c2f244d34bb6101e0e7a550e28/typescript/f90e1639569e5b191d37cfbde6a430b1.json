{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/src/legacy/core_plugins/kibana/public/dashboard/panel/panel_state.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/legacy/core_plugins/kibana/public/dashboard/panel/panel_state.ts","mtime":1567631711560},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport chrome from 'ui/chrome';\nimport { DASHBOARD_GRID_COLUMN_COUNT, DEFAULT_PANEL_HEIGHT, DEFAULT_PANEL_WIDTH, } from '../dashboard_constants';\n/**\n * Represents a panel on a grid. Keeps track of position in the grid and what visualization it\n * contains.\n *\n * @typedef {Object} PanelState\n * @property {number} id - Id of the visualization contained in the panel.\n * @property {string} version - Version of Kibana this panel was created in.\n * @property {string} type - Type of the visualization in the panel.\n * @property {number} panelIndex - Unique id to represent this panel in the grid. Note that this is\n * NOT the index in the panels array. While it may initially represent that, it is not\n * updated with changes in a dashboard, and is simply used as a unique identifier.  The name\n * remains as panelIndex for backward compatibility reasons - changing it can break reporting.\n * @property {Object} gridData\n * @property {number} gridData.w - Width of the panel.\n * @property {number} gridData.h - Height of the panel.\n * @property {number} gridData.x - Column position of the panel.\n * @property {number} gridData.y - Row position of the panel.\n */\n// Look for the smallest y and x value where the default panel will fit.\nfunction findTopLeftMostOpenSpace(width, height, currentPanels) {\n    var maxY = -1;\n    currentPanels.forEach(function (panel) {\n        maxY = Math.max(panel.gridData.y + panel.gridData.h, maxY);\n    });\n    // Handle case of empty grid.\n    if (maxY < 0) {\n        return { x: 0, y: 0 };\n    }\n    var grid = new Array(maxY);\n    for (var y = 0; y < maxY; y++) {\n        grid[y] = new Array(DASHBOARD_GRID_COLUMN_COUNT).fill(0);\n    }\n    currentPanels.forEach(function (panel) {\n        for (var x = panel.gridData.x; x < panel.gridData.x + panel.gridData.w; x++) {\n            for (var y = panel.gridData.y; y < panel.gridData.y + panel.gridData.h; y++) {\n                grid[y][x] = 1;\n            }\n        }\n    });\n    for (var y = 0; y < maxY; y++) {\n        for (var x = 0; x < DASHBOARD_GRID_COLUMN_COUNT; x++) {\n            if (grid[y][x] === 1) {\n                // Space is filled\n                continue;\n            }\n            else {\n                for (var h = y; h < Math.min(y + height, maxY); h++) {\n                    for (var w = x; w < Math.min(x + width, DASHBOARD_GRID_COLUMN_COUNT); w++) {\n                        var spaceIsEmpty = grid[h][w] === 0;\n                        var fitsPanelWidth = w === x + width - 1;\n                        // If the panel is taller than any other panel in the current grid, it can still fit in the space, hence\n                        // we check the minimum of maxY and the panel height.\n                        var fitsPanelHeight = h === Math.min(y + height - 1, maxY - 1);\n                        if (spaceIsEmpty && fitsPanelWidth && fitsPanelHeight) {\n                            // Found space\n                            return { x: x, y: y };\n                        }\n                        else if (grid[h][w] === 1) {\n                            // x, y spot doesn't work, break.\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return { x: 0, y: Infinity };\n}\n/**\n * Creates and initializes a basic panel state.\n * @param {number} id\n * @param {string} type\n * @param {number} panelIndex\n * @param {Array} currentPanels\n * @return {PanelState}\n */\nexport function createPanelState(id, type, panelIndex, currentPanels) {\n    var _a = findTopLeftMostOpenSpace(DEFAULT_PANEL_WIDTH, DEFAULT_PANEL_HEIGHT, currentPanels), x = _a.x, y = _a.y;\n    return {\n        gridData: {\n            w: DEFAULT_PANEL_WIDTH,\n            h: DEFAULT_PANEL_HEIGHT,\n            x: x,\n            y: y,\n            i: panelIndex.toString(),\n        },\n        version: chrome.getKibanaVersion(),\n        panelIndex: panelIndex.toString(),\n        type: type,\n        id: id,\n        embeddableConfig: {},\n    };\n}\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/src/legacy/core_plugins/kibana/public/dashboard/panel/panel_state.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/src/legacy/core_plugins/kibana/public/dashboard/panel/panel_state.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport chrome from 'ui/chrome';\nimport {\n  DASHBOARD_GRID_COLUMN_COUNT,\n  DEFAULT_PANEL_HEIGHT,\n  DEFAULT_PANEL_WIDTH,\n} from '../dashboard_constants';\nimport { PanelState } from '../selectors';\n\n/**\n * Represents a panel on a grid. Keeps track of position in the grid and what visualization it\n * contains.\n *\n * @typedef {Object} PanelState\n * @property {number} id - Id of the visualization contained in the panel.\n * @property {string} version - Version of Kibana this panel was created in.\n * @property {string} type - Type of the visualization in the panel.\n * @property {number} panelIndex - Unique id to represent this panel in the grid. Note that this is\n * NOT the index in the panels array. While it may initially represent that, it is not\n * updated with changes in a dashboard, and is simply used as a unique identifier.  The name\n * remains as panelIndex for backward compatibility reasons - changing it can break reporting.\n * @property {Object} gridData\n * @property {number} gridData.w - Width of the panel.\n * @property {number} gridData.h - Height of the panel.\n * @property {number} gridData.x - Column position of the panel.\n * @property {number} gridData.y - Row position of the panel.\n */\n\n// Look for the smallest y and x value where the default panel will fit.\nfunction findTopLeftMostOpenSpace(width: number, height: number, currentPanels: PanelState[]) {\n  let maxY = -1;\n\n  currentPanels.forEach(panel => {\n    maxY = Math.max(panel.gridData.y + panel.gridData.h, maxY);\n  });\n\n  // Handle case of empty grid.\n  if (maxY < 0) {\n    return { x: 0, y: 0 };\n  }\n\n  const grid = new Array(maxY);\n  for (let y = 0; y < maxY; y++) {\n    grid[y] = new Array(DASHBOARD_GRID_COLUMN_COUNT).fill(0);\n  }\n\n  currentPanels.forEach(panel => {\n    for (let x = panel.gridData.x; x < panel.gridData.x + panel.gridData.w; x++) {\n      for (let y = panel.gridData.y; y < panel.gridData.y + panel.gridData.h; y++) {\n        grid[y][x] = 1;\n      }\n    }\n  });\n\n  for (let y = 0; y < maxY; y++) {\n    for (let x = 0; x < DASHBOARD_GRID_COLUMN_COUNT; x++) {\n      if (grid[y][x] === 1) {\n        // Space is filled\n        continue;\n      } else {\n        for (let h = y; h < Math.min(y + height, maxY); h++) {\n          for (let w = x; w < Math.min(x + width, DASHBOARD_GRID_COLUMN_COUNT); w++) {\n            const spaceIsEmpty = grid[h][w] === 0;\n            const fitsPanelWidth = w === x + width - 1;\n            // If the panel is taller than any other panel in the current grid, it can still fit in the space, hence\n            // we check the minimum of maxY and the panel height.\n            const fitsPanelHeight = h === Math.min(y + height - 1, maxY - 1);\n\n            if (spaceIsEmpty && fitsPanelWidth && fitsPanelHeight) {\n              // Found space\n              return { x, y };\n            } else if (grid[h][w] === 1) {\n              // x, y spot doesn't work, break.\n              break;\n            }\n          }\n        }\n      }\n    }\n  }\n  return { x: 0, y: Infinity };\n}\n\n/**\n * Creates and initializes a basic panel state.\n * @param {number} id\n * @param {string} type\n * @param {number} panelIndex\n * @param {Array} currentPanels\n * @return {PanelState}\n */\nexport function createPanelState(\n  id: string,\n  type: string,\n  panelIndex: string,\n  currentPanels: PanelState[]\n) {\n  const { x, y } = findTopLeftMostOpenSpace(\n    DEFAULT_PANEL_WIDTH,\n    DEFAULT_PANEL_HEIGHT,\n    currentPanels\n  );\n  return {\n    gridData: {\n      w: DEFAULT_PANEL_WIDTH,\n      h: DEFAULT_PANEL_HEIGHT,\n      x,\n      y,\n      i: panelIndex.toString(),\n    },\n    version: chrome.getKibanaVersion(),\n    panelIndex: panelIndex.toString(),\n    type,\n    id,\n    embeddableConfig: {},\n  };\n}\n"]}]}