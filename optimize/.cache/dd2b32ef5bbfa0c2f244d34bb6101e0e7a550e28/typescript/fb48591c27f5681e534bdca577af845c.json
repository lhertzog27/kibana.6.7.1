{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/components/metrics/section.tsx","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/components/metrics/section.tsx","mtime":1567631711981},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport * as tslib_1 from \"tslib\";\nimport React from 'react';\nimport { sections } from './sections';\nvar Section = /** @class */ (function (_super) {\n    tslib_1.__extends(Section, _super);\n    function Section() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Section.prototype.render = function () {\n        var _this = this;\n        var metric = this.props.metrics.find(function (m) { return m.id === _this.props.section.id; });\n        if (!metric) {\n            return null;\n        }\n        var sectionProps = {};\n        if (this.props.section.type === 'chart') {\n            sectionProps = {\n                onChangeRangeTime: this.props.onChangeRangeTime,\n                crosshairValue: this.props.crosshairValue,\n                onCrosshairUpdate: this.props.onCrosshairUpdate,\n                isLiveStreaming: this.props.isLiveStreaming,\n                stopLiveStreaming: this.props.stopLiveStreaming,\n            };\n        }\n        var Component = sections[this.props.section.type];\n        return React.createElement(Component, tslib_1.__assign({ section: this.props.section, metric: metric }, sectionProps));\n    };\n    return Section;\n}(React.PureComponent));\nexport { Section };\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/components/metrics/section.tsx","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/components/metrics/section.tsx"],"names":[],"mappings":"AAAA;;;;GAIG;;AAEH,OAAO,KAAK,MAAM,OAAO,CAAC;AAI1B,OAAO,EAAE,QAAQ,EAAE,MAAM,YAAY,CAAC;AAYtC;IAA6B,mCAA0B;IAAvD;;IAmBA,CAAC;IAlBQ,wBAAM,GAAb;QAAA,iBAiBC;QAhBC,IAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,EAAE,KAAK,KAAI,CAAC,KAAK,CAAC,OAAO,CAAC,EAAE,EAA9B,CAA8B,CAAC,CAAC;QAC5E,IAAI,CAAC,MAAM,EAAE;YACX,OAAO,IAAI,CAAC;SACb;QACD,IAAI,YAAY,GAAG,EAAE,CAAC;QACtB,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,KAAK,OAAO,EAAE;YACvC,YAAY,GAAG;gBACb,iBAAiB,EAAE,IAAI,CAAC,KAAK,CAAC,iBAAiB;gBAC/C,cAAc,EAAE,IAAI,CAAC,KAAK,CAAC,cAAc;gBACzC,iBAAiB,EAAE,IAAI,CAAC,KAAK,CAAC,iBAAiB;gBAC/C,eAAe,EAAE,IAAI,CAAC,KAAK,CAAC,eAAe;gBAC3C,iBAAiB,EAAE,IAAI,CAAC,KAAK,CAAC,iBAAiB;aAChD,CAAC;SACH;QACD,IAAM,SAAS,GAAG,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACpD,OAAO,oBAAC,SAAS,qBAAC,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,MAAM,EAAE,MAAM,IAAM,YAAY,EAAI,CAAC;IACtF,CAAC;IACH,cAAC;AAAD,CAAC,AAnBD,CAA6B,KAAK,CAAC,aAAa,GAmB/C","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport React from 'react';\nimport { InfraMetricData } from '../../graphql/types';\nimport { InfraMetricLayoutSection } from '../../pages/metrics/layouts/types';\nimport { metricTimeActions } from '../../store';\nimport { sections } from './sections';\n\ninterface Props {\n  section: InfraMetricLayoutSection;\n  metrics: InfraMetricData[];\n  onChangeRangeTime?: (time: metricTimeActions.MetricRangeTimeState) => void;\n  crosshairValue?: number;\n  onCrosshairUpdate?: (crosshairValue: number) => void;\n  isLiveStreaming?: boolean;\n  stopLiveStreaming?: () => void;\n}\n\nexport class Section extends React.PureComponent<Props> {\n  public render() {\n    const metric = this.props.metrics.find(m => m.id === this.props.section.id);\n    if (!metric) {\n      return null;\n    }\n    let sectionProps = {};\n    if (this.props.section.type === 'chart') {\n      sectionProps = {\n        onChangeRangeTime: this.props.onChangeRangeTime,\n        crosshairValue: this.props.crosshairValue,\n        onCrosshairUpdate: this.props.onCrosshairUpdate,\n        isLiveStreaming: this.props.isLiveStreaming,\n        stopLiveStreaming: this.props.stopLiveStreaming,\n      };\n    }\n    const Component = sections[this.props.section.type];\n    return <Component section={this.props.section} metric={metric} {...sectionProps} />;\n  }\n}\n"]}]}