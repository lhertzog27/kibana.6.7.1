{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/utils/log_entry/log_entry.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/utils/log_entry/log_entry.ts","mtime":1567631711990},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport { bisector } from 'd3-array';\nimport { compareToTimeKey, getIndexAtTimeKey } from '../../../common/time';\nexport var getLogEntryKey = function (entry) { return entry.key; };\nvar logEntryTimeBisector = bisector(compareToTimeKey(getLogEntryKey));\nexport var getLogEntryIndexBeforeTime = logEntryTimeBisector.left;\nexport var getLogEntryIndexAfterTime = logEntryTimeBisector.right;\nexport var getLogEntryIndexAtTime = getIndexAtTimeKey(getLogEntryKey);\nexport var getLogEntryAtTime = function (entries, time) {\n    var entryIndex = getLogEntryIndexAtTime(entries, time);\n    return entryIndex !== null ? entries[entryIndex] : null;\n};\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/utils/log_entry/log_entry.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/utils/log_entry/log_entry.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAEH,OAAO,EAAE,QAAQ,EAAE,MAAM,UAAU,CAAC;AAEpC,OAAO,EAAE,gBAAgB,EAAE,iBAAiB,EAAW,MAAM,sBAAsB,CAAC;AAOpF,MAAM,CAAC,IAAM,cAAc,GAAG,UAAC,KAAe,IAAK,OAAA,KAAK,CAAC,GAAG,EAAT,CAAS,CAAC;AAE7D,IAAM,oBAAoB,GAAG,QAAQ,CAAC,gBAAgB,CAAC,cAAc,CAAC,CAAC,CAAC;AAExE,MAAM,CAAC,IAAM,0BAA0B,GAAG,oBAAoB,CAAC,IAAI,CAAC;AACpE,MAAM,CAAC,IAAM,yBAAyB,GAAG,oBAAoB,CAAC,KAAK,CAAC;AACpE,MAAM,CAAC,IAAM,sBAAsB,GAAG,iBAAiB,CAAC,cAAc,CAAC,CAAC;AAExE,MAAM,CAAC,IAAM,iBAAiB,GAAG,UAAC,OAAmB,EAAE,IAAa;IAClE,IAAM,UAAU,GAAG,sBAAsB,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;IAEzD,OAAO,UAAU,KAAK,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;AAC1D,CAAC,CAAC","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport { bisector } from 'd3-array';\n\nimport { compareToTimeKey, getIndexAtTimeKey, TimeKey } from '../../../common/time';\nimport { LogEntries as LogEntriesQuery } from '../../graphql/types';\n\nexport type LogEntry = LogEntriesQuery.Entries;\n\nexport type LogEntryMessageSegment = LogEntriesQuery.Message;\n\nexport const getLogEntryKey = (entry: LogEntry) => entry.key;\n\nconst logEntryTimeBisector = bisector(compareToTimeKey(getLogEntryKey));\n\nexport const getLogEntryIndexBeforeTime = logEntryTimeBisector.left;\nexport const getLogEntryIndexAfterTime = logEntryTimeBisector.right;\nexport const getLogEntryIndexAtTime = getIndexAtTimeKey(getLogEntryKey);\n\nexport const getLogEntryAtTime = (entries: LogEntry[], time: TimeKey) => {\n  const entryIndex = getLogEntryIndexAtTime(entries, time);\n\n  return entryIndex !== null ? entries[entryIndex] : null;\n};\n"]}]}