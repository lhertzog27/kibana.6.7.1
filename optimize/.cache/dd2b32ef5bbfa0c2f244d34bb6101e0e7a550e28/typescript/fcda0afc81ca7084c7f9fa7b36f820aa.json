{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/utils/remote_state/remote_graphql_state.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/utils/remote_state/remote_graphql_state.ts","mtime":1567631711990},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport * as tslib_1 from \"tslib\";\nimport { from } from 'rxjs';\nimport { catchError, filter, map, startWith, switchMap, withLatestFrom } from 'rxjs/operators';\nimport { actionCreatorFactory } from 'typescript-fsa';\nimport { reducerWithInitialState } from 'typescript-fsa-reducers/dist';\nimport { createSelector } from 'reselect';\nimport { isFailureLoadingResult, isIdleLoadingProgress, isRunningLoadingProgress, isSuccessLoadingResult, isUninitializedLoadingResult, } from '../loading_state';\nexport var createGraphqlInitialState = function (initialData) { return ({\n    current: {\n        progress: 'idle',\n    },\n    last: {\n        result: 'uninitialized',\n    },\n    data: initialData,\n}); };\nexport var createGraphqlOperationActionCreators = function (stateKey, operationKey) {\n    var actionCreator = actionCreatorFactory(\"x-pack/infra/remote/\" + stateKey + \"/\" + operationKey);\n    var resolve = actionCreator('RESOLVE');\n    var resolveEffect = actionCreator.async('RESOLVE');\n    return {\n        resolve: resolve,\n        resolveStarted: resolveEffect.started,\n        resolveDone: resolveEffect.done,\n        resolveFailed: resolveEffect.failed,\n    };\n};\nexport var createGraphqlOperationReducer = function (operationKey, initialState, actionCreators, reduceSuccess) {\n    if (reduceSuccess === void 0) { reduceSuccess = function (state) { return state; }; }\n    return reducerWithInitialState(initialState)\n        .caseWithAction(actionCreators.resolveStarted, function (state, action) { return (tslib_1.__assign({}, state, { current: {\n            progress: 'running',\n            time: Date.now(),\n            parameters: {\n                operationKey: operationKey,\n                variables: action.payload,\n            },\n        } })); })\n        .caseWithAction(actionCreators.resolveDone, function (state, action) { return (tslib_1.__assign({}, state, { current: {\n            progress: 'idle',\n        }, last: {\n            result: 'success',\n            parameters: {\n                operationKey: operationKey,\n                variables: action.payload.params,\n            },\n            time: Date.now(),\n            isExhausted: false,\n        }, data: reduceSuccess(state.data, action) })); })\n        .caseWithAction(actionCreators.resolveFailed, function (state, action) { return (tslib_1.__assign({}, state, { current: {\n            progress: 'idle',\n        }, last: {\n            result: 'failure',\n            reason: \"\" + action.payload,\n            time: Date.now(),\n            parameters: {\n                operationKey: operationKey,\n                variables: action.payload.params,\n            },\n        } })); })\n        .build();\n};\nexport var createGraphqlQueryEpic = function (graphqlQuery, actionCreators) { return function (action$, state$, _a) {\n    var apolloClient$ = _a.apolloClient$;\n    return action$.pipe(filter(actionCreators.resolve.match), withLatestFrom(apolloClient$), switchMap(function (_a) {\n        var _b = tslib_1.__read(_a, 2), variables = _b[0].payload, apolloClient = _b[1];\n        return from(apolloClient.query({\n            query: graphqlQuery,\n            variables: variables,\n            fetchPolicy: 'no-cache',\n        })).pipe(map(function (result) { return actionCreators.resolveDone({ params: variables, result: result }); }), catchError(function (error) { return [actionCreators.resolveFailed({ params: variables, error: error })]; }), startWith(actionCreators.resolveStarted(variables)));\n    }));\n}; };\nexport var createGraphqlStateSelectors = function (selectState) {\n    if (selectState === void 0) { selectState = function (parentState) { return parentState; }; }\n    var selectData = createSelector(selectState, function (state) { return state.data; });\n    var selectLoadingProgress = createSelector(selectState, function (state) { return state.current; });\n    var selectLoadingProgressOperationInfo = createSelector(selectLoadingProgress, function (progress) { return (isRunningLoadingProgress(progress) ? progress.parameters : null); });\n    var selectIsLoading = createSelector(selectLoadingProgress, isRunningLoadingProgress);\n    var selectIsIdle = createSelector(selectLoadingProgress, isIdleLoadingProgress);\n    var selectLoadingResult = createSelector(selectState, function (state) { return state.last; });\n    var selectLoadingResultOperationInfo = createSelector(selectLoadingResult, function (result) { return (!isUninitializedLoadingResult(result) ? result.parameters : null); });\n    var selectLoadingResultTime = createSelector(selectLoadingResult, function (result) { return (!isUninitializedLoadingResult(result) ? result.time : null); });\n    var selectIsUninitialized = createSelector(selectLoadingResult, isUninitializedLoadingResult);\n    var selectIsSuccess = createSelector(selectLoadingResult, isSuccessLoadingResult);\n    var selectIsFailure = createSelector(selectLoadingResult, isFailureLoadingResult);\n    var selectLoadingState = createSelector(selectLoadingProgress, selectLoadingResult, function (loadingProgress, loadingResult) { return ({\n        current: loadingProgress,\n        last: loadingResult,\n        policy: {\n            policy: 'manual',\n        },\n    }); });\n    return {\n        selectData: selectData,\n        selectIsFailure: selectIsFailure,\n        selectIsIdle: selectIsIdle,\n        selectIsLoading: selectIsLoading,\n        selectIsSuccess: selectIsSuccess,\n        selectIsUninitialized: selectIsUninitialized,\n        selectLoadingProgress: selectLoadingProgress,\n        selectLoadingProgressOperationInfo: selectLoadingProgressOperationInfo,\n        selectLoadingResult: selectLoadingResult,\n        selectLoadingResultOperationInfo: selectLoadingResultOperationInfo,\n        selectLoadingResultTime: selectLoadingResultTime,\n        selectLoadingState: selectLoadingState,\n    };\n};\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/utils/remote_state/remote_graphql_state.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/utils/remote_state/remote_graphql_state.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport { ApolloError, ApolloQueryResult } from 'apollo-client';\nimport { DocumentNode } from 'graphql';\nimport { Action as ReduxAction } from 'redux';\nimport { Epic } from 'redux-observable';\nimport { from, Observable } from 'rxjs';\nimport { catchError, filter, map, startWith, switchMap, withLatestFrom } from 'rxjs/operators';\nimport { Action, ActionCreator, actionCreatorFactory, Failure, Success } from 'typescript-fsa';\nimport { reducerWithInitialState } from 'typescript-fsa-reducers/dist';\n\nimport { createSelector } from 'reselect';\nimport { InfraApolloClient } from '../../lib/lib';\nimport {\n  isFailureLoadingResult,\n  isIdleLoadingProgress,\n  isRunningLoadingProgress,\n  isSuccessLoadingResult,\n  isUninitializedLoadingResult,\n  LoadingPolicy,\n  LoadingProgress,\n  LoadingResult,\n} from '../loading_state';\n\nexport interface GraphqlState<State> {\n  current: LoadingProgress<OperationInfo<any>>;\n  last: LoadingResult<OperationInfo<any>>;\n  data: State | undefined;\n}\n\ninterface OperationInfo<Variables> {\n  operationKey: string;\n  variables: Variables;\n}\n\ntype ResolveDonePayload<Variables, Data> = Success<Variables, ApolloQueryResult<Data>>;\ntype ResolveFailedPayload<Variables, Error> = Failure<Variables, Error>;\n\ninterface OperationActionCreators<Data, Variables, Error = ApolloError> {\n  resolve: ActionCreator<Variables>;\n  resolveStarted: ActionCreator<Variables>;\n  resolveDone: ActionCreator<ResolveDonePayload<Variables, Data>>;\n  resolveFailed: ActionCreator<ResolveFailedPayload<Variables, Error>>;\n}\n\nexport const createGraphqlInitialState = <State>(initialData?: State): GraphqlState<State> => ({\n  current: {\n    progress: 'idle',\n  },\n  last: {\n    result: 'uninitialized',\n  },\n  data: initialData,\n});\n\nexport const createGraphqlOperationActionCreators = <Data, Variables, Error = ApolloError>(\n  stateKey: string,\n  operationKey: string\n): OperationActionCreators<Data, Variables, Error> => {\n  const actionCreator = actionCreatorFactory(`x-pack/infra/remote/${stateKey}/${operationKey}`);\n\n  const resolve = actionCreator<Variables>('RESOLVE');\n  const resolveEffect = actionCreator.async<Variables, ApolloQueryResult<Data>>('RESOLVE');\n\n  return {\n    resolve,\n    resolveStarted: resolveEffect.started,\n    resolveDone: resolveEffect.done,\n    resolveFailed: resolveEffect.failed,\n  };\n};\n\nexport const createGraphqlOperationReducer = <State, Data, Variables, Error = ApolloError>(\n  operationKey: string,\n  initialState: GraphqlState<State>,\n  actionCreators: OperationActionCreators<Data, Variables, Error>,\n  reduceSuccess: (\n    state: State | undefined,\n    action: Action<ResolveDonePayload<Variables, Data>>\n  ) => State | undefined = state => state\n) =>\n  reducerWithInitialState(initialState)\n    .caseWithAction(actionCreators.resolveStarted, (state, action) => ({\n      ...state,\n      current: {\n        progress: 'running',\n        time: Date.now(),\n        parameters: {\n          operationKey,\n          variables: action.payload,\n        },\n      },\n    }))\n    .caseWithAction(actionCreators.resolveDone, (state, action) => ({\n      ...state,\n      current: {\n        progress: 'idle',\n      },\n      last: {\n        result: 'success',\n        parameters: {\n          operationKey,\n          variables: action.payload.params,\n        },\n        time: Date.now(),\n        isExhausted: false,\n      },\n      data: reduceSuccess(state.data, action),\n    }))\n    .caseWithAction(actionCreators.resolveFailed, (state, action) => ({\n      ...state,\n      current: {\n        progress: 'idle',\n      },\n      last: {\n        result: 'failure',\n        reason: `${action.payload}`,\n        time: Date.now(),\n        parameters: {\n          operationKey,\n          variables: action.payload.params,\n        },\n      },\n    }))\n    .build();\n\nexport const createGraphqlQueryEpic = <Data, Variables, Error = ApolloError>(\n  graphqlQuery: DocumentNode,\n  actionCreators: OperationActionCreators<Data, Variables, Error>\n): Epic<\n  ReduxAction,\n  ReduxAction,\n  any,\n  {\n    apolloClient$: Observable<InfraApolloClient>;\n  }\n> => (action$, state$, { apolloClient$ }) =>\n  action$.pipe(\n    filter(actionCreators.resolve.match),\n    withLatestFrom(apolloClient$),\n    switchMap(([{ payload: variables }, apolloClient]) =>\n      from(\n        apolloClient.query<Data>({\n          query: graphqlQuery,\n          variables,\n          fetchPolicy: 'no-cache',\n        })\n      ).pipe(\n        map(result => actionCreators.resolveDone({ params: variables, result })),\n        catchError(error => [actionCreators.resolveFailed({ params: variables, error })]),\n        startWith(actionCreators.resolveStarted(variables))\n      )\n    )\n  );\n\nexport const createGraphqlStateSelectors = <State>(\n  selectState: (parentState: any) => GraphqlState<State> = parentState => parentState\n) => {\n  const selectData = createSelector(\n    selectState,\n    state => state.data\n  );\n\n  const selectLoadingProgress = createSelector(\n    selectState,\n    state => state.current\n  );\n  const selectLoadingProgressOperationInfo = createSelector(\n    selectLoadingProgress,\n    progress => (isRunningLoadingProgress(progress) ? progress.parameters : null)\n  );\n  const selectIsLoading = createSelector(\n    selectLoadingProgress,\n    isRunningLoadingProgress\n  );\n  const selectIsIdle = createSelector(\n    selectLoadingProgress,\n    isIdleLoadingProgress\n  );\n\n  const selectLoadingResult = createSelector(\n    selectState,\n    state => state.last\n  );\n  const selectLoadingResultOperationInfo = createSelector(\n    selectLoadingResult,\n    result => (!isUninitializedLoadingResult(result) ? result.parameters : null)\n  );\n  const selectLoadingResultTime = createSelector(\n    selectLoadingResult,\n    result => (!isUninitializedLoadingResult(result) ? result.time : null)\n  );\n  const selectIsUninitialized = createSelector(\n    selectLoadingResult,\n    isUninitializedLoadingResult\n  );\n  const selectIsSuccess = createSelector(\n    selectLoadingResult,\n    isSuccessLoadingResult\n  );\n  const selectIsFailure = createSelector(\n    selectLoadingResult,\n    isFailureLoadingResult\n  );\n\n  const selectLoadingState = createSelector(\n    selectLoadingProgress,\n    selectLoadingResult,\n    (loadingProgress, loadingResult) => ({\n      current: loadingProgress,\n      last: loadingResult,\n      policy: {\n        policy: 'manual',\n      } as LoadingPolicy,\n    })\n  );\n\n  return {\n    selectData,\n    selectIsFailure,\n    selectIsIdle,\n    selectIsLoading,\n    selectIsSuccess,\n    selectIsUninitialized,\n    selectLoadingProgress,\n    selectLoadingProgressOperationInfo,\n    selectLoadingResult,\n    selectLoadingResultOperationInfo,\n    selectLoadingResultTime,\n    selectLoadingState,\n  };\n};\n"]}]}