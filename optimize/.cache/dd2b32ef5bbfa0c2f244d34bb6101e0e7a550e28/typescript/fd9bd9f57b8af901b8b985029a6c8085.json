{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/src/ui/public/visualize/loader/utils/query_geohash_bounds.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/src/ui/public/visualize/loader/utils/query_geohash_bounds.ts","mtime":1567631711782},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport * as tslib_1 from \"tslib\";\nimport { i18n } from '@kbn/i18n';\nimport { get } from 'lodash';\nimport { toastNotifications } from 'ui/notify';\n/**\n * Coordinate map visualization needs to be able to query for the latest geohash\n * bounds when a user clicks the \"fit to data\" map icon, which requires knowing\n * about global filters & queries. This logic has been extracted here so we can\n * keep `searchSource` out of the vis, but ultimately we need to design a\n * long-term solution for situations like this.\n *\n * TODO: Remove this as a part of elastic/kibana#30593\n */\nexport function queryGeohashBounds(vis, params) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n        var agg, searchSource, filters_1, query, esResp, error_1;\n        return tslib_1.__generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    agg = vis.getAggConfig().find(function (a) {\n                        return get(a, 'type.dslName') === 'geohash_grid';\n                    });\n                    if (!agg) return [3 /*break*/, 4];\n                    searchSource = vis.searchSource.createChild();\n                    searchSource.setField('size', 0);\n                    searchSource.setField('aggs', function () {\n                        var geoBoundsAgg = vis.getAggConfig().createAggConfig({\n                            type: 'geo_bounds',\n                            enabled: true,\n                            params: {\n                                field: agg.getField(),\n                            },\n                            schema: 'metric',\n                        }, {\n                            addToAggConfigs: false,\n                        });\n                        return {\n                            '1': geoBoundsAgg.toDsl(),\n                        };\n                    });\n                    filters_1 = params.filters, query = params.query;\n                    if (filters_1) {\n                        searchSource.setField('filter', function () {\n                            var activeFilters = tslib_1.__spread(filters_1);\n                            var indexPattern = agg.getIndexPattern();\n                            var useTimeFilter = !!indexPattern.timeFieldName;\n                            if (useTimeFilter) {\n                                activeFilters.push(vis.API.timeFilter.createFilter(indexPattern));\n                            }\n                            return activeFilters;\n                        });\n                    }\n                    if (query) {\n                        searchSource.setField('query', query);\n                    }\n                    _a.label = 1;\n                case 1:\n                    _a.trys.push([1, 3, , 4]);\n                    return [4 /*yield*/, searchSource.fetch()];\n                case 2:\n                    esResp = _a.sent();\n                    return [2 /*return*/, get(esResp, 'aggregations.1.bounds')];\n                case 3:\n                    error_1 = _a.sent();\n                    toastNotifications.addDanger({\n                        title: i18n.translate('common.ui.visualize.queryGeohashBounds.unableToGetBoundErrorTitle', {\n                            defaultMessage: 'Unable to get bounds',\n                        }),\n                        text: \"\" + error_1.message,\n                    });\n                    return [2 /*return*/];\n                case 4: return [2 /*return*/];\n            }\n        });\n    });\n}\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/src/ui/public/visualize/loader/utils/query_geohash_bounds.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/src/ui/public/visualize/loader/utils/query_geohash_bounds.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;GAiBG;;AAEH,OAAO,EAAE,IAAI,EAAE,MAAM,WAAW,CAAC;AACjC,OAAO,EAAE,GAAG,EAAE,MAAM,QAAQ,CAAC;AAC7B,OAAO,EAAE,kBAAkB,EAAE,MAAM,WAAW,CAAC;AAW/C;;;;;;;;GAQG;AACH,MAAM,UAAgB,kBAAkB,CAAC,GAAQ,EAAE,MAAgC;;;;;;oBAC3E,GAAG,GAAG,GAAG,CAAC,YAAY,EAAE,CAAC,IAAI,CAAC,UAAC,CAAY;wBAC/C,OAAO,GAAG,CAAC,CAAC,EAAE,cAAc,CAAC,KAAK,cAAc,CAAC;oBACnD,CAAC,CAAC,CAAC;yBAEC,GAAG,EAAH,wBAAG;oBACC,YAAY,GAAG,GAAG,CAAC,YAAY,CAAC,WAAW,EAAE,CAAC;oBACpD,YAAY,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;oBACjC,YAAY,CAAC,QAAQ,CAAC,MAAM,EAAE;wBAC5B,IAAM,YAAY,GAAG,GAAG,CAAC,YAAY,EAAE,CAAC,eAAe,CACrD;4BACE,IAAI,EAAE,YAAY;4BAClB,OAAO,EAAE,IAAI;4BACb,MAAM,EAAE;gCACN,KAAK,EAAE,GAAG,CAAC,QAAQ,EAAE;6BACtB;4BACD,MAAM,EAAE,QAAQ;yBACjB,EACD;4BACE,eAAe,EAAE,KAAK;yBACvB,CACF,CAAC;wBACF,OAAO;4BACL,GAAG,EAAE,YAAY,CAAC,KAAK,EAAE;yBAC1B,CAAC;oBACJ,CAAC,CAAC,CAAC;oBAEK,YAAmB,MAAM,QAAlB,EAAE,KAAK,GAAK,MAAM,MAAX,CAAY;oBAClC,IAAI,SAAO,EAAE;wBACX,YAAY,CAAC,QAAQ,CAAC,QAAQ,EAAE;4BAC9B,IAAM,aAAa,oBAAO,SAAO,CAAC,CAAC;4BACnC,IAAM,YAAY,GAAG,GAAG,CAAC,eAAe,EAAE,CAAC;4BAC3C,IAAM,aAAa,GAAG,CAAC,CAAC,YAAY,CAAC,aAAa,CAAC;4BACnD,IAAI,aAAa,EAAE;gCACjB,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,UAAU,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC,CAAC;6BACnE;4BACD,OAAO,aAAa,CAAC;wBACvB,CAAC,CAAC,CAAC;qBACJ;oBACD,IAAI,KAAK,EAAE;wBACT,YAAY,CAAC,QAAQ,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;qBACvC;;;;oBAGgB,qBAAM,YAAY,CAAC,KAAK,EAAE,EAAA;;oBAAnC,MAAM,GAAG,SAA0B;oBACzC,sBAAO,GAAG,CAAC,MAAM,EAAE,uBAAuB,CAAC,EAAC;;;oBAE5C,kBAAkB,CAAC,SAAS,CAAC;wBAC3B,KAAK,EAAE,IAAI,CAAC,SAAS,CAAC,mEAAmE,EAAE;4BACzF,cAAc,EAAE,sBAAsB;yBACvC,CAAC;wBACF,IAAI,EAAE,KAAG,OAAK,CAAC,OAAS;qBACzB,CAAC,CAAC;oBACH,sBAAO;;;;;CAGZ","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { i18n } from '@kbn/i18n';\nimport { get } from 'lodash';\nimport { toastNotifications } from 'ui/notify';\n\nimport { AggConfig } from 'ui/vis';\nimport { Vis } from '../../../vis';\nimport { Filters, Query } from '../types';\n\ninterface QueryGeohashBoundsParams {\n  filters?: Filters;\n  query?: Query;\n}\n\n/**\n * Coordinate map visualization needs to be able to query for the latest geohash\n * bounds when a user clicks the \"fit to data\" map icon, which requires knowing\n * about global filters & queries. This logic has been extracted here so we can\n * keep `searchSource` out of the vis, but ultimately we need to design a\n * long-term solution for situations like this.\n *\n * TODO: Remove this as a part of elastic/kibana#30593\n */\nexport async function queryGeohashBounds(vis: Vis, params: QueryGeohashBoundsParams) {\n  const agg = vis.getAggConfig().find((a: AggConfig) => {\n    return get(a, 'type.dslName') === 'geohash_grid';\n  });\n\n  if (agg) {\n    const searchSource = vis.searchSource.createChild();\n    searchSource.setField('size', 0);\n    searchSource.setField('aggs', () => {\n      const geoBoundsAgg = vis.getAggConfig().createAggConfig(\n        {\n          type: 'geo_bounds',\n          enabled: true,\n          params: {\n            field: agg.getField(),\n          },\n          schema: 'metric',\n        },\n        {\n          addToAggConfigs: false,\n        }\n      );\n      return {\n        '1': geoBoundsAgg.toDsl(),\n      };\n    });\n\n    const { filters, query } = params;\n    if (filters) {\n      searchSource.setField('filter', () => {\n        const activeFilters = [...filters];\n        const indexPattern = agg.getIndexPattern();\n        const useTimeFilter = !!indexPattern.timeFieldName;\n        if (useTimeFilter) {\n          activeFilters.push(vis.API.timeFilter.createFilter(indexPattern));\n        }\n        return activeFilters;\n      });\n    }\n    if (query) {\n      searchSource.setField('query', query);\n    }\n\n    try {\n      const esResp = await searchSource.fetch();\n      return get(esResp, 'aggregations.1.bounds');\n    } catch (error) {\n      toastNotifications.addDanger({\n        title: i18n.translate('common.ui.visualize.queryGeohashBounds.unableToGetBoundErrorTitle', {\n          defaultMessage: 'Unable to get bounds',\n        }),\n        text: `${error.message}`,\n      });\n      return;\n    }\n  }\n}\n"]}]}