{"remainingRequest":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js??ref--10-1!/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js??ref--10-2!/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/store/remote/log_entries/operations/load_more.ts","dependencies":[{"path":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/store/remote/log_entries/operations/load_more.ts","mtime":1567631711989},{"path":"/home/anthony/git_workspaces/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1567666236302},{"path":"/home/anthony/git_workspaces/kibana/node_modules/thread-loader/dist/cjs.js","mtime":1567666239443},{"path":"/home/anthony/git_workspaces/kibana/node_modules/ts-loader/index.js","mtime":1567666229769}],"contextDependencies":[],"result":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\nimport * as tslib_1 from \"tslib\";\nimport { getLogEntryIndexAfterTime, getLogEntryIndexBeforeTime, getLogEntryKey, } from '../../../../utils/log_entry';\nimport { createGraphqlOperationActionCreators, createGraphqlOperationReducer, createGraphqlQueryEpic, } from '../../../../utils/remote_state/remote_graphql_state';\nimport { initialLogEntriesState } from '../state';\nimport { logEntriesQuery } from './log_entries.gql_query';\nvar operationKey = 'load_more';\nexport var loadMoreEntriesActionCreators = createGraphqlOperationActionCreators('log_entries', operationKey);\nexport var loadMoreEntriesReducer = createGraphqlOperationReducer(operationKey, initialLogEntriesState, loadMoreEntriesActionCreators, function (state, action) {\n    var logEntriesAround = action.payload.result.data.source.logEntriesAround;\n    var newEntries = logEntriesAround.entries;\n    var oldEntries = state && state.entries ? state.entries : [];\n    var oldStart = state && state.start ? state.start : null;\n    var oldEnd = state && state.end ? state.end : null;\n    if (newEntries.length <= 0) {\n        return state;\n    }\n    if ((action.payload.params.countBefore || 0) > 0) {\n        var lastLogEntry = newEntries[newEntries.length - 1];\n        var prependAtIndex = getLogEntryIndexAfterTime(oldEntries, getLogEntryKey(lastLogEntry));\n        return {\n            start: logEntriesAround.start,\n            end: oldEnd,\n            hasMoreBefore: logEntriesAround.hasMoreBefore,\n            hasMoreAfter: state ? state.hasMoreAfter : logEntriesAround.hasMoreAfter,\n            entries: tslib_1.__spread(newEntries, oldEntries.slice(prependAtIndex)),\n        };\n    }\n    else if ((action.payload.params.countAfter || 0) > 0) {\n        var firstLogEntry = newEntries[0];\n        var appendAtIndex = getLogEntryIndexBeforeTime(oldEntries, getLogEntryKey(firstLogEntry));\n        return {\n            start: oldStart,\n            end: logEntriesAround.end,\n            hasMoreBefore: state ? state.hasMoreBefore : logEntriesAround.hasMoreBefore,\n            hasMoreAfter: logEntriesAround.hasMoreAfter,\n            entries: tslib_1.__spread(oldEntries.slice(0, appendAtIndex), newEntries),\n        };\n    }\n    else {\n        return state;\n    }\n});\nexport var loadMoreEntriesEpic = createGraphqlQueryEpic(logEntriesQuery, loadMoreEntriesActionCreators);\n",{"version":3,"file":"/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/store/remote/log_entries/operations/load_more.ts","sourceRoot":"","sources":["/home/anthony/git_workspaces/kibana/x-pack/plugins/infra/public/store/remote/log_entries/operations/load_more.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License;\n * you may not use this file except in compliance with the Elastic License.\n */\n\nimport { LogEntries as LogEntriesQuery } from '../../../../graphql/types';\nimport {\n  getLogEntryIndexAfterTime,\n  getLogEntryIndexBeforeTime,\n  getLogEntryKey,\n} from '../../../../utils/log_entry';\nimport {\n  createGraphqlOperationActionCreators,\n  createGraphqlOperationReducer,\n  createGraphqlQueryEpic,\n} from '../../../../utils/remote_state/remote_graphql_state';\nimport { initialLogEntriesState } from '../state';\nimport { logEntriesQuery } from './log_entries.gql_query';\n\nconst operationKey = 'load_more';\n\nexport const loadMoreEntriesActionCreators = createGraphqlOperationActionCreators<\n  LogEntriesQuery.Query,\n  LogEntriesQuery.Variables\n>('log_entries', operationKey);\n\nexport const loadMoreEntriesReducer = createGraphqlOperationReducer(\n  operationKey,\n  initialLogEntriesState,\n  loadMoreEntriesActionCreators,\n  (state, action) => {\n    const logEntriesAround = action.payload.result.data.source.logEntriesAround;\n    const newEntries = logEntriesAround.entries;\n    const oldEntries = state && state.entries ? state.entries : [];\n    const oldStart = state && state.start ? state.start : null;\n    const oldEnd = state && state.end ? state.end : null;\n\n    if (newEntries.length <= 0) {\n      return state;\n    }\n\n    if ((action.payload.params.countBefore || 0) > 0) {\n      const lastLogEntry = newEntries[newEntries.length - 1];\n      const prependAtIndex = getLogEntryIndexAfterTime(oldEntries, getLogEntryKey(lastLogEntry));\n      return {\n        start: logEntriesAround.start,\n        end: oldEnd,\n        hasMoreBefore: logEntriesAround.hasMoreBefore,\n        hasMoreAfter: state ? state.hasMoreAfter : logEntriesAround.hasMoreAfter,\n        entries: [...newEntries, ...oldEntries.slice(prependAtIndex)],\n      };\n    } else if ((action.payload.params.countAfter || 0) > 0) {\n      const firstLogEntry = newEntries[0];\n      const appendAtIndex = getLogEntryIndexBeforeTime(oldEntries, getLogEntryKey(firstLogEntry));\n      return {\n        start: oldStart,\n        end: logEntriesAround.end,\n        hasMoreBefore: state ? state.hasMoreBefore : logEntriesAround.hasMoreBefore,\n        hasMoreAfter: logEntriesAround.hasMoreAfter,\n        entries: [...oldEntries.slice(0, appendAtIndex), ...newEntries],\n      };\n    } else {\n      return state;\n    }\n  }\n);\n\nexport const loadMoreEntriesEpic = createGraphqlQueryEpic(\n  logEntriesQuery,\n  loadMoreEntriesActionCreators\n);\n"]}]}