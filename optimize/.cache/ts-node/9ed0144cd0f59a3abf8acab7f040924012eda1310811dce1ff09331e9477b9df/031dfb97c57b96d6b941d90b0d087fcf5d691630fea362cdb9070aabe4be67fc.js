"use strict";
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = require("lodash");
// Support telemetry for additional agent types by appending definitions in
// mappings.json and the AgentName enum.
var AgentName;
(function (AgentName) {
    AgentName["Python"] = "python";
    AgentName["Java"] = "java";
    AgentName["NodeJs"] = "nodejs";
    AgentName["JsBase"] = "js-base";
    AgentName["Ruby"] = "ruby";
    AgentName["GoLang"] = "go";
})(AgentName = exports.AgentName || (exports.AgentName = {}));
exports.APM_TELEMETRY_DOC_ID = 'apm-telemetry';
function createApmTelementry(agentNames = []) {
    const validAgentNames = agentNames.filter(agentName => Object.values(AgentName).includes(agentName));
    return {
        has_any_services: validAgentNames.length > 0,
        services_per_agent: lodash_1.countBy(validAgentNames)
    };
}
exports.createApmTelementry = createApmTelementry;
function storeApmTelemetry(server, apmTelemetry) {
    const savedObjectsClient = getSavedObjectsClient(server);
    savedObjectsClient.create('apm-telemetry', apmTelemetry, {
        id: exports.APM_TELEMETRY_DOC_ID,
        overwrite: true
    });
}
exports.storeApmTelemetry = storeApmTelemetry;
function getSavedObjectsClient(server) {
    const { SavedObjectsClient, getSavedObjectsRepository } = server.savedObjects;
    const { callWithInternalUser } = server.plugins.elasticsearch.getCluster('admin');
    const internalRepository = getSavedObjectsRepository(callWithInternalUser);
    return new SavedObjectsClient(internalRepository);
}
exports.getSavedObjectsClient = getSavedObjectsClient;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2hvbWUvYW50aG9ueS9naXRfd29ya3NwYWNlcy9raWJhbmEveC1wYWNrL3BsdWdpbnMvYXBtL3NlcnZlci9saWIvYXBtX3RlbGVtZXRyeS9hcG1fdGVsZW1ldHJ5LnRzIiwic291cmNlcyI6WyIvaG9tZS9hbnRob255L2dpdF93b3Jrc3BhY2VzL2tpYmFuYS94LXBhY2svcGx1Z2lucy9hcG0vc2VydmVyL2xpYi9hcG1fdGVsZW1ldHJ5L2FwbV90ZWxlbWV0cnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7O0dBSUc7O0FBR0gsbUNBQWlDO0FBRWpDLDJFQUEyRTtBQUMzRSx3Q0FBd0M7QUFFeEMsSUFBWSxTQU9YO0FBUEQsV0FBWSxTQUFTO0lBQ25CLDhCQUFpQixDQUFBO0lBQ2pCLDBCQUFhLENBQUE7SUFDYiw4QkFBaUIsQ0FBQTtJQUNqQiwrQkFBa0IsQ0FBQTtJQUNsQiwwQkFBYSxDQUFBO0lBQ2IsMEJBQWEsQ0FBQTtBQUNmLENBQUMsRUFQVyxTQUFTLEdBQVQsaUJBQVMsS0FBVCxpQkFBUyxRQU9wQjtBQU9ZLFFBQUEsb0JBQW9CLEdBQUcsZUFBZSxDQUFDO0FBRXBELFNBQWdCLG1CQUFtQixDQUNqQyxhQUEwQixFQUFFO0lBRTVCLE1BQU0sZUFBZSxHQUFHLFVBQVUsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FDcEQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQzdDLENBQUM7SUFDRixPQUFPO1FBQ0wsZ0JBQWdCLEVBQUUsZUFBZSxDQUFDLE1BQU0sR0FBRyxDQUFDO1FBQzVDLGtCQUFrQixFQUFFLGdCQUFPLENBQUMsZUFBZSxDQUFDO0tBQzdDLENBQUM7QUFDSixDQUFDO0FBVkQsa0RBVUM7QUFFRCxTQUFnQixpQkFBaUIsQ0FDL0IsTUFBYyxFQUNkLFlBQTBCO0lBRTFCLE1BQU0sa0JBQWtCLEdBQUcscUJBQXFCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDekQsa0JBQWtCLENBQUMsTUFBTSxDQUFDLGVBQWUsRUFBRSxZQUFZLEVBQUU7UUFDdkQsRUFBRSxFQUFFLDRCQUFvQjtRQUN4QixTQUFTLEVBQUUsSUFBSTtLQUNoQixDQUFDLENBQUM7QUFDTCxDQUFDO0FBVEQsOENBU0M7QUFFRCxTQUFnQixxQkFBcUIsQ0FBQyxNQUFjO0lBQ2xELE1BQU0sRUFBRSxrQkFBa0IsRUFBRSx5QkFBeUIsRUFBRSxHQUFHLE1BQU0sQ0FBQyxZQUFZLENBQUM7SUFDOUUsTUFBTSxFQUFFLG9CQUFvQixFQUFFLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUN0RSxPQUFPLENBQ1IsQ0FBQztJQUNGLE1BQU0sa0JBQWtCLEdBQUcseUJBQXlCLENBQUMsb0JBQW9CLENBQUMsQ0FBQztJQUMzRSxPQUFPLElBQUksa0JBQWtCLENBQUMsa0JBQWtCLENBQUMsQ0FBQztBQUNwRCxDQUFDO0FBUEQsc0RBT0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IEVsYXN0aWNzZWFyY2ggQi5WLiBhbmQvb3IgbGljZW5zZWQgdG8gRWxhc3RpY3NlYXJjaCBCLlYuIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuIExpY2Vuc2VkIHVuZGVyIHRoZSBFbGFzdGljIExpY2Vuc2U7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIEVsYXN0aWMgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBTZXJ2ZXIgfSBmcm9tICdoYXBpJztcbmltcG9ydCB7IGNvdW50QnkgfSBmcm9tICdsb2Rhc2gnO1xuXG4vLyBTdXBwb3J0IHRlbGVtZXRyeSBmb3IgYWRkaXRpb25hbCBhZ2VudCB0eXBlcyBieSBhcHBlbmRpbmcgZGVmaW5pdGlvbnMgaW5cbi8vIG1hcHBpbmdzLmpzb24gYW5kIHRoZSBBZ2VudE5hbWUgZW51bS5cblxuZXhwb3J0IGVudW0gQWdlbnROYW1lIHtcbiAgUHl0aG9uID0gJ3B5dGhvbicsXG4gIEphdmEgPSAnamF2YScsXG4gIE5vZGVKcyA9ICdub2RlanMnLFxuICBKc0Jhc2UgPSAnanMtYmFzZScsXG4gIFJ1YnkgPSAncnVieScsXG4gIEdvTGFuZyA9ICdnbydcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBcG1UZWxlbWV0cnkge1xuICBoYXNfYW55X3NlcnZpY2VzOiBib29sZWFuO1xuICBzZXJ2aWNlc19wZXJfYWdlbnQ6IHsgW2FnZW50TmFtZSBpbiBBZ2VudE5hbWVdPzogbnVtYmVyIH07XG59XG5cbmV4cG9ydCBjb25zdCBBUE1fVEVMRU1FVFJZX0RPQ19JRCA9ICdhcG0tdGVsZW1ldHJ5JztcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUFwbVRlbGVtZW50cnkoXG4gIGFnZW50TmFtZXM6IEFnZW50TmFtZVtdID0gW11cbik6IEFwbVRlbGVtZXRyeSB7XG4gIGNvbnN0IHZhbGlkQWdlbnROYW1lcyA9IGFnZW50TmFtZXMuZmlsdGVyKGFnZW50TmFtZSA9PlxuICAgIE9iamVjdC52YWx1ZXMoQWdlbnROYW1lKS5pbmNsdWRlcyhhZ2VudE5hbWUpXG4gICk7XG4gIHJldHVybiB7XG4gICAgaGFzX2FueV9zZXJ2aWNlczogdmFsaWRBZ2VudE5hbWVzLmxlbmd0aCA+IDAsXG4gICAgc2VydmljZXNfcGVyX2FnZW50OiBjb3VudEJ5KHZhbGlkQWdlbnROYW1lcylcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0b3JlQXBtVGVsZW1ldHJ5KFxuICBzZXJ2ZXI6IFNlcnZlcixcbiAgYXBtVGVsZW1ldHJ5OiBBcG1UZWxlbWV0cnlcbik6IHZvaWQge1xuICBjb25zdCBzYXZlZE9iamVjdHNDbGllbnQgPSBnZXRTYXZlZE9iamVjdHNDbGllbnQoc2VydmVyKTtcbiAgc2F2ZWRPYmplY3RzQ2xpZW50LmNyZWF0ZSgnYXBtLXRlbGVtZXRyeScsIGFwbVRlbGVtZXRyeSwge1xuICAgIGlkOiBBUE1fVEVMRU1FVFJZX0RPQ19JRCxcbiAgICBvdmVyd3JpdGU6IHRydWVcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRTYXZlZE9iamVjdHNDbGllbnQoc2VydmVyOiBTZXJ2ZXIpOiBhbnkge1xuICBjb25zdCB7IFNhdmVkT2JqZWN0c0NsaWVudCwgZ2V0U2F2ZWRPYmplY3RzUmVwb3NpdG9yeSB9ID0gc2VydmVyLnNhdmVkT2JqZWN0cztcbiAgY29uc3QgeyBjYWxsV2l0aEludGVybmFsVXNlciB9ID0gc2VydmVyLnBsdWdpbnMuZWxhc3RpY3NlYXJjaC5nZXRDbHVzdGVyKFxuICAgICdhZG1pbidcbiAgKTtcbiAgY29uc3QgaW50ZXJuYWxSZXBvc2l0b3J5ID0gZ2V0U2F2ZWRPYmplY3RzUmVwb3NpdG9yeShjYWxsV2l0aEludGVybmFsVXNlcik7XG4gIHJldHVybiBuZXcgU2F2ZWRPYmplY3RzQ2xpZW50KGludGVybmFsUmVwb3NpdG9yeSk7XG59XG4iXX0=