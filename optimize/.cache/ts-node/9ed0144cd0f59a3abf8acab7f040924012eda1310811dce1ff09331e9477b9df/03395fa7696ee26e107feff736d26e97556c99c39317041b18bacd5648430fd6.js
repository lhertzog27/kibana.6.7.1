"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */
const constants_1 = require("../../../common/constants");
exports.getCustomLogo = async ({ job, conditionalHeaders, server, }) => {
    const serverBasePath = server.config().get('server.basePath');
    const fakeRequest = {
        headers: conditionalHeaders.headers,
        // This is used by the spaces SavedObjectClientWrapper to determine the existing space.
        // We use the basePath from the saved job, which we'll have post spaces being implemented;
        // or we use the server base path, which uses the default space
        getBasePath: () => job.basePath || serverBasePath,
    };
    if (server.plugins.security) {
        const { authorization } = server.plugins.security;
        await authorization.mode.initialize(fakeRequest);
    }
    const savedObjects = server.savedObjects;
    const savedObjectsClient = savedObjects.getScopedSavedObjectsClient(fakeRequest);
    const uiSettings = server.uiSettingsServiceFactory({ savedObjectsClient });
    const logo = await uiSettings.get(constants_1.UI_SETTINGS_CUSTOM_PDF_LOGO);
    return { job, conditionalHeaders, logo, server };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2hvbWUvYW50aG9ueS9naXRfd29ya3NwYWNlcy9raWJhbmEveC1wYWNrL3BsdWdpbnMvcmVwb3J0aW5nL2V4cG9ydF90eXBlcy9jb21tb24vZXhlY3V0ZV9qb2IvZ2V0X2N1c3RvbV9sb2dvLnRzIiwic291cmNlcyI6WyIvaG9tZS9hbnRob255L2dpdF93b3Jrc3BhY2VzL2tpYmFuYS94LXBhY2svcGx1Z2lucy9yZXBvcnRpbmcvZXhwb3J0X3R5cGVzL2NvbW1vbi9leGVjdXRlX2pvYi9nZXRfY3VzdG9tX2xvZ28udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7OztHQUlHO0FBQ0gseURBQXdFO0FBRzNELFFBQUEsYUFBYSxHQUFHLEtBQUssRUFBRSxFQUNsQyxHQUFHLEVBQ0gsa0JBQWtCLEVBQ2xCLE1BQU0sR0FLUCxFQUFFLEVBQUU7SUFDSCxNQUFNLGNBQWMsR0FBVyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLENBQUM7SUFFdEUsTUFBTSxXQUFXLEdBQVE7UUFDdkIsT0FBTyxFQUFFLGtCQUFrQixDQUFDLE9BQU87UUFDbkMsdUZBQXVGO1FBQ3ZGLDBGQUEwRjtRQUMxRiwrREFBK0Q7UUFDL0QsV0FBVyxFQUFFLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxRQUFRLElBQUksY0FBYztLQUNsRCxDQUFDO0lBRUYsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRTtRQUMzQixNQUFNLEVBQUUsYUFBYSxFQUFFLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUM7UUFDbEQsTUFBTSxhQUFhLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsQ0FBQztLQUNsRDtJQUVELE1BQU0sWUFBWSxHQUFHLE1BQU0sQ0FBQyxZQUFZLENBQUM7SUFFekMsTUFBTSxrQkFBa0IsR0FBRyxZQUFZLENBQUMsMkJBQTJCLENBQUMsV0FBVyxDQUFDLENBQUM7SUFFakYsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDLHdCQUF3QixDQUFDLEVBQUUsa0JBQWtCLEVBQUUsQ0FBQyxDQUFDO0lBRTNFLE1BQU0sSUFBSSxHQUFHLE1BQU0sVUFBVSxDQUFDLEdBQUcsQ0FBQyx1Q0FBMkIsQ0FBQyxDQUFDO0lBRS9ELE9BQU8sRUFBRSxHQUFHLEVBQUUsa0JBQWtCLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDO0FBQ25ELENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgRWxhc3RpY3NlYXJjaCBCLlYuIGFuZC9vciBsaWNlbnNlZCB0byBFbGFzdGljc2VhcmNoIEIuVi4gdW5kZXIgb25lXG4gKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gTGljZW5zZWQgdW5kZXIgdGhlIEVsYXN0aWMgTGljZW5zZTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgRWxhc3RpYyBMaWNlbnNlLlxuICovXG5pbXBvcnQgeyBVSV9TRVRUSU5HU19DVVNUT01fUERGX0xPR08gfSBmcm9tICcuLi8uLi8uLi9jb21tb24vY29uc3RhbnRzJztcbmltcG9ydCB7IENvbmRpdGlvbmFsSGVhZGVycywgS2JuU2VydmVyLCBSZXBvcnRpbmdKb2IgfSBmcm9tICcuLi8uLi8uLi90eXBlcyc7XG5cbmV4cG9ydCBjb25zdCBnZXRDdXN0b21Mb2dvID0gYXN5bmMgKHtcbiAgam9iLFxuICBjb25kaXRpb25hbEhlYWRlcnMsXG4gIHNlcnZlcixcbn06IHtcbiAgam9iOiBSZXBvcnRpbmdKb2I7XG4gIGNvbmRpdGlvbmFsSGVhZGVyczogQ29uZGl0aW9uYWxIZWFkZXJzO1xuICBzZXJ2ZXI6IEtiblNlcnZlcjtcbn0pID0+IHtcbiAgY29uc3Qgc2VydmVyQmFzZVBhdGg6IHN0cmluZyA9IHNlcnZlci5jb25maWcoKS5nZXQoJ3NlcnZlci5iYXNlUGF0aCcpO1xuXG4gIGNvbnN0IGZha2VSZXF1ZXN0OiBhbnkgPSB7XG4gICAgaGVhZGVyczogY29uZGl0aW9uYWxIZWFkZXJzLmhlYWRlcnMsXG4gICAgLy8gVGhpcyBpcyB1c2VkIGJ5IHRoZSBzcGFjZXMgU2F2ZWRPYmplY3RDbGllbnRXcmFwcGVyIHRvIGRldGVybWluZSB0aGUgZXhpc3Rpbmcgc3BhY2UuXG4gICAgLy8gV2UgdXNlIHRoZSBiYXNlUGF0aCBmcm9tIHRoZSBzYXZlZCBqb2IsIHdoaWNoIHdlJ2xsIGhhdmUgcG9zdCBzcGFjZXMgYmVpbmcgaW1wbGVtZW50ZWQ7XG4gICAgLy8gb3Igd2UgdXNlIHRoZSBzZXJ2ZXIgYmFzZSBwYXRoLCB3aGljaCB1c2VzIHRoZSBkZWZhdWx0IHNwYWNlXG4gICAgZ2V0QmFzZVBhdGg6ICgpID0+IGpvYi5iYXNlUGF0aCB8fCBzZXJ2ZXJCYXNlUGF0aCxcbiAgfTtcblxuICBpZiAoc2VydmVyLnBsdWdpbnMuc2VjdXJpdHkpIHtcbiAgICBjb25zdCB7IGF1dGhvcml6YXRpb24gfSA9IHNlcnZlci5wbHVnaW5zLnNlY3VyaXR5O1xuICAgIGF3YWl0IGF1dGhvcml6YXRpb24ubW9kZS5pbml0aWFsaXplKGZha2VSZXF1ZXN0KTtcbiAgfVxuXG4gIGNvbnN0IHNhdmVkT2JqZWN0cyA9IHNlcnZlci5zYXZlZE9iamVjdHM7XG5cbiAgY29uc3Qgc2F2ZWRPYmplY3RzQ2xpZW50ID0gc2F2ZWRPYmplY3RzLmdldFNjb3BlZFNhdmVkT2JqZWN0c0NsaWVudChmYWtlUmVxdWVzdCk7XG5cbiAgY29uc3QgdWlTZXR0aW5ncyA9IHNlcnZlci51aVNldHRpbmdzU2VydmljZUZhY3RvcnkoeyBzYXZlZE9iamVjdHNDbGllbnQgfSk7XG5cbiAgY29uc3QgbG9nbyA9IGF3YWl0IHVpU2V0dGluZ3MuZ2V0KFVJX1NFVFRJTkdTX0NVU1RPTV9QREZfTE9HTyk7XG5cbiAgcmV0dXJuIHsgam9iLCBjb25kaXRpb25hbEhlYWRlcnMsIGxvZ28sIHNlcnZlciB9O1xufTtcbiJdfQ==