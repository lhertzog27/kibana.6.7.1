"use strict";
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
class InfraMetadataDomain {
    constructor(adapter, libs) {
        this.adapter = adapter;
        this.libs = libs;
    }
    async getMetadata(req, sourceId, nodeId, nodeType) {
        const { configuration } = await this.libs.sources.getSourceConfiguration(req, sourceId);
        const metricsPromise = this.adapter.getMetricMetadata(req, configuration, nodeId, nodeType);
        const logsPromise = this.adapter.getLogMetadata(req, configuration, nodeId, nodeType);
        const metrics = await metricsPromise;
        const logs = await logsPromise;
        const metricMetadata = pickMetadata(metrics.buckets).map(entry => {
            return { name: entry, source: 'metrics' };
        });
        const logMetadata = pickMetadata(logs.buckets).map(entry => {
            return { name: entry, source: 'logs' };
        });
        const id = metrics.id || logs.id;
        const name = metrics.name || logs.name || id;
        return { id, name, features: metricMetadata.concat(logMetadata) };
    }
}
exports.InfraMetadataDomain = InfraMetadataDomain;
const pickMetadata = (buckets) => {
    if (buckets) {
        const metadata = buckets
            .map(module => {
            if (module.names) {
                return module.names.buckets.map(name => {
                    return `${module.key}.${name.key}`;
                });
            }
            else {
                return [];
            }
        })
            .reduce((a, b) => a.concat(b), []);
        return metadata;
    }
    else {
        return [];
    }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2hvbWUvYW50aG9ueS9naXRfd29ya3NwYWNlcy9raWJhbmEveC1wYWNrL3BsdWdpbnMvaW5mcmEvc2VydmVyL2xpYi9kb21haW5zL21ldGFkYXRhX2RvbWFpbi9tZXRhZGF0YV9kb21haW4udHMiLCJzb3VyY2VzIjpbIi9ob21lL2FudGhvbnkvZ2l0X3dvcmtzcGFjZXMva2liYW5hL3gtcGFjay9wbHVnaW5zL2luZnJhL3NlcnZlci9saWIvZG9tYWlucy9tZXRhZGF0YV9kb21haW4vbWV0YWRhdGFfZG9tYWluLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7OztHQUlHOztBQU1ILE1BQWEsbUJBQW1CO0lBQzlCLFlBQ21CLE9BQTZCLEVBQzdCLElBQStCO1FBRC9CLFlBQU8sR0FBUCxPQUFPLENBQXNCO1FBQzdCLFNBQUksR0FBSixJQUFJLENBQTJCO0lBQy9DLENBQUM7SUFFRyxLQUFLLENBQUMsV0FBVyxDQUN0QixHQUEwQixFQUMxQixRQUFnQixFQUNoQixNQUFjLEVBQ2QsUUFBZ0I7UUFFaEIsTUFBTSxFQUFFLGFBQWEsRUFBRSxHQUFHLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsc0JBQXNCLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQ3hGLE1BQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLGFBQWEsRUFBRSxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDNUYsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsR0FBRyxFQUFFLGFBQWEsRUFBRSxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFFdEYsTUFBTSxPQUFPLEdBQUcsTUFBTSxjQUFjLENBQUM7UUFDckMsTUFBTSxJQUFJLEdBQUcsTUFBTSxXQUFXLENBQUM7UUFFL0IsTUFBTSxjQUFjLEdBQUcsWUFBWSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDL0QsT0FBTyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxDQUFDO1FBQzVDLENBQUMsQ0FBQyxDQUFDO1FBRUgsTUFBTSxXQUFXLEdBQUcsWUFBWSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDekQsT0FBTyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxDQUFDO1FBQ3pDLENBQUMsQ0FBQyxDQUFDO1FBRUgsTUFBTSxFQUFFLEdBQUcsT0FBTyxDQUFDLEVBQUUsSUFBSSxJQUFJLENBQUMsRUFBRSxDQUFDO1FBQ2pDLE1BQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLElBQUksSUFBSSxFQUFFLENBQUM7UUFDN0MsT0FBTyxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLGNBQWMsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQztJQUNwRSxDQUFDO0NBQ0Y7QUEvQkQsa0RBK0JDO0FBRUQsTUFBTSxZQUFZLEdBQUcsQ0FBQyxPQUF5QyxFQUFZLEVBQUU7SUFDM0UsSUFBSSxPQUFPLEVBQUU7UUFDWCxNQUFNLFFBQVEsR0FBRyxPQUFPO2FBQ3JCLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUNaLElBQUksTUFBTSxDQUFDLEtBQUssRUFBRTtnQkFDaEIsT0FBTyxNQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUU7b0JBQ3JDLE9BQU8sR0FBRyxNQUFNLENBQUMsR0FBRyxJQUFJLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztnQkFDckMsQ0FBQyxDQUFDLENBQUM7YUFDSjtpQkFBTTtnQkFDTCxPQUFPLEVBQUUsQ0FBQzthQUNYO1FBQ0gsQ0FBQyxDQUFDO2FBQ0QsTUFBTSxDQUFDLENBQUMsQ0FBVyxFQUFFLENBQVcsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUN6RCxPQUFPLFFBQVEsQ0FBQztLQUNqQjtTQUFNO1FBQ0wsT0FBTyxFQUFFLENBQUM7S0FDWDtBQUNILENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgRWxhc3RpY3NlYXJjaCBCLlYuIGFuZC9vciBsaWNlbnNlZCB0byBFbGFzdGljc2VhcmNoIEIuVi4gdW5kZXIgb25lXG4gKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gTGljZW5zZWQgdW5kZXIgdGhlIEVsYXN0aWMgTGljZW5zZTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgRWxhc3RpYyBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEluZnJhRnJhbWV3b3JrUmVxdWVzdCwgSW5mcmFNZXRhZGF0YUFnZ3JlZ2F0aW9uQnVja2V0IH0gZnJvbSAnLi4vLi4vYWRhcHRlcnMvZnJhbWV3b3JrJztcbmltcG9ydCB7IEluZnJhTWV0YWRhdGFBZGFwdGVyIH0gZnJvbSAnLi4vLi4vYWRhcHRlcnMvbWV0YWRhdGEnO1xuaW1wb3J0IHsgSW5mcmFTb3VyY2VzIH0gZnJvbSAnLi4vLi4vc291cmNlcyc7XG5cbmV4cG9ydCBjbGFzcyBJbmZyYU1ldGFkYXRhRG9tYWluIHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWFkb25seSBhZGFwdGVyOiBJbmZyYU1ldGFkYXRhQWRhcHRlcixcbiAgICBwcml2YXRlIHJlYWRvbmx5IGxpYnM6IHsgc291cmNlczogSW5mcmFTb3VyY2VzIH1cbiAgKSB7fVxuXG4gIHB1YmxpYyBhc3luYyBnZXRNZXRhZGF0YShcbiAgICByZXE6IEluZnJhRnJhbWV3b3JrUmVxdWVzdCxcbiAgICBzb3VyY2VJZDogc3RyaW5nLFxuICAgIG5vZGVJZDogc3RyaW5nLFxuICAgIG5vZGVUeXBlOiBzdHJpbmdcbiAgKSB7XG4gICAgY29uc3QgeyBjb25maWd1cmF0aW9uIH0gPSBhd2FpdCB0aGlzLmxpYnMuc291cmNlcy5nZXRTb3VyY2VDb25maWd1cmF0aW9uKHJlcSwgc291cmNlSWQpO1xuICAgIGNvbnN0IG1ldHJpY3NQcm9taXNlID0gdGhpcy5hZGFwdGVyLmdldE1ldHJpY01ldGFkYXRhKHJlcSwgY29uZmlndXJhdGlvbiwgbm9kZUlkLCBub2RlVHlwZSk7XG4gICAgY29uc3QgbG9nc1Byb21pc2UgPSB0aGlzLmFkYXB0ZXIuZ2V0TG9nTWV0YWRhdGEocmVxLCBjb25maWd1cmF0aW9uLCBub2RlSWQsIG5vZGVUeXBlKTtcblxuICAgIGNvbnN0IG1ldHJpY3MgPSBhd2FpdCBtZXRyaWNzUHJvbWlzZTtcbiAgICBjb25zdCBsb2dzID0gYXdhaXQgbG9nc1Byb21pc2U7XG5cbiAgICBjb25zdCBtZXRyaWNNZXRhZGF0YSA9IHBpY2tNZXRhZGF0YShtZXRyaWNzLmJ1Y2tldHMpLm1hcChlbnRyeSA9PiB7XG4gICAgICByZXR1cm4geyBuYW1lOiBlbnRyeSwgc291cmNlOiAnbWV0cmljcycgfTtcbiAgICB9KTtcblxuICAgIGNvbnN0IGxvZ01ldGFkYXRhID0gcGlja01ldGFkYXRhKGxvZ3MuYnVja2V0cykubWFwKGVudHJ5ID0+IHtcbiAgICAgIHJldHVybiB7IG5hbWU6IGVudHJ5LCBzb3VyY2U6ICdsb2dzJyB9O1xuICAgIH0pO1xuXG4gICAgY29uc3QgaWQgPSBtZXRyaWNzLmlkIHx8IGxvZ3MuaWQ7XG4gICAgY29uc3QgbmFtZSA9IG1ldHJpY3MubmFtZSB8fCBsb2dzLm5hbWUgfHwgaWQ7XG4gICAgcmV0dXJuIHsgaWQsIG5hbWUsIGZlYXR1cmVzOiBtZXRyaWNNZXRhZGF0YS5jb25jYXQobG9nTWV0YWRhdGEpIH07XG4gIH1cbn1cblxuY29uc3QgcGlja01ldGFkYXRhID0gKGJ1Y2tldHM6IEluZnJhTWV0YWRhdGFBZ2dyZWdhdGlvbkJ1Y2tldFtdKTogc3RyaW5nW10gPT4ge1xuICBpZiAoYnVja2V0cykge1xuICAgIGNvbnN0IG1ldGFkYXRhID0gYnVja2V0c1xuICAgICAgLm1hcChtb2R1bGUgPT4ge1xuICAgICAgICBpZiAobW9kdWxlLm5hbWVzKSB7XG4gICAgICAgICAgcmV0dXJuIG1vZHVsZS5uYW1lcy5idWNrZXRzLm1hcChuYW1lID0+IHtcbiAgICAgICAgICAgIHJldHVybiBgJHttb2R1bGUua2V5fS4ke25hbWUua2V5fWA7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgLnJlZHVjZSgoYTogc3RyaW5nW10sIGI6IHN0cmluZ1tdKSA9PiBhLmNvbmNhdChiKSwgW10pO1xuICAgIHJldHVybiBtZXRhZGF0YTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gW107XG4gIH1cbn07XG4iXX0=