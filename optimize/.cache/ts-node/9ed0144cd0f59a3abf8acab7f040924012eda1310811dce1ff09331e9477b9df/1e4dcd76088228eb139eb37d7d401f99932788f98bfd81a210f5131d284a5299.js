"use strict";
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var ReindexStep;
(function (ReindexStep) {
    // Enum values are spaced out by 10 to give us room to insert steps in between.
    ReindexStep[ReindexStep["created"] = 0] = "created";
    ReindexStep[ReindexStep["indexGroupServicesStopped"] = 10] = "indexGroupServicesStopped";
    ReindexStep[ReindexStep["readonly"] = 20] = "readonly";
    ReindexStep[ReindexStep["newIndexCreated"] = 30] = "newIndexCreated";
    ReindexStep[ReindexStep["reindexStarted"] = 40] = "reindexStarted";
    ReindexStep[ReindexStep["reindexCompleted"] = 50] = "reindexCompleted";
    ReindexStep[ReindexStep["aliasCreated"] = 60] = "aliasCreated";
    ReindexStep[ReindexStep["indexGroupServicesStarted"] = 70] = "indexGroupServicesStarted";
})(ReindexStep = exports.ReindexStep || (exports.ReindexStep = {}));
var ReindexStatus;
(function (ReindexStatus) {
    ReindexStatus[ReindexStatus["inProgress"] = 0] = "inProgress";
    ReindexStatus[ReindexStatus["completed"] = 1] = "completed";
    ReindexStatus[ReindexStatus["failed"] = 2] = "failed";
    ReindexStatus[ReindexStatus["paused"] = 3] = "paused";
    ReindexStatus[ReindexStatus["cancelled"] = 4] = "cancelled";
})(ReindexStatus = exports.ReindexStatus || (exports.ReindexStatus = {}));
exports.REINDEX_OP_TYPE = 'upgrade-assistant-reindex-operation';
var ReindexWarning;
(function (ReindexWarning) {
    ReindexWarning[ReindexWarning["allField"] = 0] = "allField";
    ReindexWarning[ReindexWarning["booleanFields"] = 1] = "booleanFields";
})(ReindexWarning = exports.ReindexWarning || (exports.ReindexWarning = {}));
var IndexGroup;
(function (IndexGroup) {
    IndexGroup["ml"] = "___ML_REINDEX_LOCK___";
    IndexGroup["watcher"] = "___WATCHER_REINDEX_LOCK___";
})(IndexGroup = exports.IndexGroup || (exports.IndexGroup = {}));
// Telemetry types
exports.UPGRADE_ASSISTANT_TYPE = 'upgrade-assistant-telemetry';
exports.UPGRADE_ASSISTANT_DOC_ID = 'upgrade-assistant-telemetry';
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2hvbWUvYW50aG9ueS9naXRfd29ya3NwYWNlcy9raWJhbmEveC1wYWNrL3BsdWdpbnMvdXBncmFkZV9hc3Npc3RhbnQvY29tbW9uL3R5cGVzLnRzIiwic291cmNlcyI6WyIvaG9tZS9hbnRob255L2dpdF93b3Jrc3BhY2VzL2tpYmFuYS94LXBhY2svcGx1Z2lucy91cGdyYWRlX2Fzc2lzdGFudC9jb21tb24vdHlwZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7O0dBSUc7O0FBUUgsSUFBWSxXQVVYO0FBVkQsV0FBWSxXQUFXO0lBQ3JCLCtFQUErRTtJQUMvRSxtREFBVyxDQUFBO0lBQ1gsd0ZBQThCLENBQUE7SUFDOUIsc0RBQWEsQ0FBQTtJQUNiLG9FQUFvQixDQUFBO0lBQ3BCLGtFQUFtQixDQUFBO0lBQ25CLHNFQUFxQixDQUFBO0lBQ3JCLDhEQUFpQixDQUFBO0lBQ2pCLHdGQUE4QixDQUFBO0FBQ2hDLENBQUMsRUFWVyxXQUFXLEdBQVgsbUJBQVcsS0FBWCxtQkFBVyxRQVV0QjtBQUVELElBQVksYUFNWDtBQU5ELFdBQVksYUFBYTtJQUN2Qiw2REFBVSxDQUFBO0lBQ1YsMkRBQVMsQ0FBQTtJQUNULHFEQUFNLENBQUE7SUFDTixxREFBTSxDQUFBO0lBQ04sMkRBQVMsQ0FBQTtBQUNYLENBQUMsRUFOVyxhQUFhLEdBQWIscUJBQWEsS0FBYixxQkFBYSxRQU14QjtBQUVZLFFBQUEsZUFBZSxHQUFHLHFDQUFxQyxDQUFDO0FBaUJyRSxJQUFZLGNBR1g7QUFIRCxXQUFZLGNBQWM7SUFDeEIsMkRBQVEsQ0FBQTtJQUNSLHFFQUFhLENBQUE7QUFDZixDQUFDLEVBSFcsY0FBYyxHQUFkLHNCQUFjLEtBQWQsc0JBQWMsUUFHekI7QUFFRCxJQUFZLFVBR1g7QUFIRCxXQUFZLFVBQVU7SUFDcEIsMENBQTRCLENBQUE7SUFDNUIsb0RBQXNDLENBQUE7QUFDeEMsQ0FBQyxFQUhXLFVBQVUsR0FBVixrQkFBVSxLQUFWLGtCQUFVLFFBR3JCO0FBRUQsa0JBQWtCO0FBQ0wsUUFBQSxzQkFBc0IsR0FBRyw2QkFBNkIsQ0FBQztBQUN2RCxRQUFBLHdCQUF3QixHQUFHLDZCQUE2QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBFbGFzdGljc2VhcmNoIEIuVi4gYW5kL29yIGxpY2Vuc2VkIHRvIEVsYXN0aWNzZWFyY2ggQi5WLiB1bmRlciBvbmVcbiAqIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiBMaWNlbnNlZCB1bmRlciB0aGUgRWxhc3RpYyBMaWNlbnNlO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBFbGFzdGljIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgTGVnYWN5IH0gZnJvbSAna2liYW5hJztcbmltcG9ydCB7XG4gIFNhdmVkT2JqZWN0LFxuICBTYXZlZE9iamVjdEF0dHJpYnV0ZXMsXG59IGZyb20gJ3NyYy9zZXJ2ZXIvc2F2ZWRfb2JqZWN0cy9zZXJ2aWNlL3NhdmVkX29iamVjdHNfY2xpZW50JztcblxuZXhwb3J0IGVudW0gUmVpbmRleFN0ZXAge1xuICAvLyBFbnVtIHZhbHVlcyBhcmUgc3BhY2VkIG91dCBieSAxMCB0byBnaXZlIHVzIHJvb20gdG8gaW5zZXJ0IHN0ZXBzIGluIGJldHdlZW4uXG4gIGNyZWF0ZWQgPSAwLFxuICBpbmRleEdyb3VwU2VydmljZXNTdG9wcGVkID0gMTAsXG4gIHJlYWRvbmx5ID0gMjAsXG4gIG5ld0luZGV4Q3JlYXRlZCA9IDMwLFxuICByZWluZGV4U3RhcnRlZCA9IDQwLFxuICByZWluZGV4Q29tcGxldGVkID0gNTAsXG4gIGFsaWFzQ3JlYXRlZCA9IDYwLFxuICBpbmRleEdyb3VwU2VydmljZXNTdGFydGVkID0gNzAsXG59XG5cbmV4cG9ydCBlbnVtIFJlaW5kZXhTdGF0dXMge1xuICBpblByb2dyZXNzLFxuICBjb21wbGV0ZWQsXG4gIGZhaWxlZCxcbiAgcGF1c2VkLFxuICBjYW5jZWxsZWQsXG59XG5cbmV4cG9ydCBjb25zdCBSRUlOREVYX09QX1RZUEUgPSAndXBncmFkZS1hc3Npc3RhbnQtcmVpbmRleC1vcGVyYXRpb24nO1xuZXhwb3J0IGludGVyZmFjZSBSZWluZGV4T3BlcmF0aW9uIGV4dGVuZHMgU2F2ZWRPYmplY3RBdHRyaWJ1dGVzIHtcbiAgaW5kZXhOYW1lOiBzdHJpbmc7XG4gIG5ld0luZGV4TmFtZTogc3RyaW5nO1xuICBzdGF0dXM6IFJlaW5kZXhTdGF0dXM7XG4gIGxhc3RDb21wbGV0ZWRTdGVwOiBSZWluZGV4U3RlcDtcbiAgbG9ja2VkOiBzdHJpbmcgfCBudWxsO1xuICByZWluZGV4VGFza0lkOiBzdHJpbmcgfCBudWxsO1xuICByZWluZGV4VGFza1BlcmNDb21wbGV0ZTogbnVtYmVyIHwgbnVsbDtcbiAgZXJyb3JNZXNzYWdlOiBzdHJpbmcgfCBudWxsO1xuXG4gIC8vIFRoaXMgZmllbGQgaXMgb25seSB1c2VkIGZvciB0aGUgc2luZ2xldG9uIEluZGV4Q29uc3VtZXJUeXBlIGRvY3VtZW50cy5cbiAgcnVubmluZ1JlaW5kZXhDb3VudDogbnVtYmVyIHwgbnVsbDtcbn1cblxuZXhwb3J0IHR5cGUgUmVpbmRleFNhdmVkT2JqZWN0ID0gU2F2ZWRPYmplY3Q8UmVpbmRleE9wZXJhdGlvbj47XG5cbmV4cG9ydCBlbnVtIFJlaW5kZXhXYXJuaW5nIHtcbiAgYWxsRmllbGQsXG4gIGJvb2xlYW5GaWVsZHMsXG59XG5cbmV4cG9ydCBlbnVtIEluZGV4R3JvdXAge1xuICBtbCA9ICdfX19NTF9SRUlOREVYX0xPQ0tfX18nLFxuICB3YXRjaGVyID0gJ19fX1dBVENIRVJfUkVJTkRFWF9MT0NLX19fJyxcbn1cblxuLy8gVGVsZW1ldHJ5IHR5cGVzXG5leHBvcnQgY29uc3QgVVBHUkFERV9BU1NJU1RBTlRfVFlQRSA9ICd1cGdyYWRlLWFzc2lzdGFudC10ZWxlbWV0cnknO1xuZXhwb3J0IGNvbnN0IFVQR1JBREVfQVNTSVNUQU5UX0RPQ19JRCA9ICd1cGdyYWRlLWFzc2lzdGFudC10ZWxlbWV0cnknO1xuZXhwb3J0IHR5cGUgVUlPcGVuT3B0aW9uID0gJ292ZXJ2aWV3JyB8ICdjbHVzdGVyJyB8ICdpbmRpY2VzJztcbmV4cG9ydCB0eXBlIFVJUmVpbmRleE9wdGlvbiA9ICdjbG9zZScgfCAnb3BlbicgfCAnc3RhcnQnIHwgJ3N0b3AnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFVJT3BlbiB7XG4gIG92ZXJ2aWV3OiBib29sZWFuO1xuICBjbHVzdGVyOiBib29sZWFuO1xuICBpbmRpY2VzOiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFVJUmVpbmRleCB7XG4gIGNsb3NlOiBib29sZWFuO1xuICBvcGVuOiBib29sZWFuO1xuICBzdGFydDogYm9vbGVhbjtcbiAgc3RvcDogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBVcGdyYWRlQXNzaXN0YW50VGVsZW1ldHJ5U2VydmVyIGV4dGVuZHMgTGVnYWN5LlNlcnZlciB7XG4gIHVzYWdlOiB7XG4gICAgY29sbGVjdG9yU2V0OiB7XG4gICAgICBtYWtlVXNhZ2VDb2xsZWN0b3I6IGFueTtcbiAgICAgIHJlZ2lzdGVyOiBhbnk7XG4gICAgfTtcbiAgfTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBVcGdyYWRlQXNzaXN0YW50VGVsZW1ldHJ5U2F2ZWRPYmplY3Qge1xuICB1aV9vcGVuOiB7XG4gICAgb3ZlcnZpZXc6IG51bWJlcjtcbiAgICBjbHVzdGVyOiBudW1iZXI7XG4gICAgaW5kaWNlczogbnVtYmVyO1xuICB9O1xuICB1aV9yZWluZGV4OiB7XG4gICAgY2xvc2U6IG51bWJlcjtcbiAgICBvcGVuOiBudW1iZXI7XG4gICAgc3RhcnQ6IG51bWJlcjtcbiAgICBzdG9wOiBudW1iZXI7XG4gIH07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXBncmFkZUFzc2lzdGFudFRlbGVtZXRyeSB7XG4gIHVpX29wZW46IHtcbiAgICBvdmVydmlldzogbnVtYmVyO1xuICAgIGNsdXN0ZXI6IG51bWJlcjtcbiAgICBpbmRpY2VzOiBudW1iZXI7XG4gIH07XG4gIHVpX3JlaW5kZXg6IHtcbiAgICBjbG9zZTogbnVtYmVyO1xuICAgIG9wZW46IG51bWJlcjtcbiAgICBzdGFydDogbnVtYmVyO1xuICAgIHN0b3A6IG51bWJlcjtcbiAgfTtcbiAgZmVhdHVyZXM6IHtcbiAgICBkZXByZWNhdGlvbl9sb2dnaW5nOiB7XG4gICAgICBlbmFibGVkOiBib29sZWFuO1xuICAgIH07XG4gIH07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXBncmFkZUFzc2lzdGFudFRlbGVtZXRyeVNhdmVkT2JqZWN0QXR0cmlidXRlcyB7XG4gIFtrZXk6IHN0cmluZ106IGFueTtcbn1cbiJdfQ==