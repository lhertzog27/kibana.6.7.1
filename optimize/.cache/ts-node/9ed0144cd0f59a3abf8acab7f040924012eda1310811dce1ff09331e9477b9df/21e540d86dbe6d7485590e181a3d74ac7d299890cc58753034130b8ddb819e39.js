"use strict";
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.createMonitorsResolvers = (libs) => ({
    Query: {
        // @ts-ignore TODO update typings and remove this comment
        async getMonitors(resolver, { dateRangeStart, dateRangeEnd, filters }, { req }) {
            const result = await libs.monitors.getMonitors(req, dateRangeStart, dateRangeEnd, filters);
            return {
                monitors: result,
            };
        },
        async getSnapshot(resolver, { dateRangeStart, dateRangeEnd, filters }, { req }) {
            const { up, down, total } = await libs.monitors.getSnapshotCount(req, dateRangeStart, dateRangeEnd, filters);
            return {
                up,
                down,
                total,
                histogram: await libs.pings.getPingHistogram(req, dateRangeStart, dateRangeEnd, filters),
            };
        },
        async getMonitorChartsData(resolver, { monitorId, dateRangeStart, dateRangeEnd }, { req }) {
            return libs.monitors.getMonitorChartsData(req, monitorId, dateRangeStart, dateRangeEnd);
        },
        async getLatestMonitors(resolver, { dateRangeStart, dateRangeEnd, monitorId }, { req }) {
            return libs.pings.getLatestMonitorDocs(req, dateRangeStart, dateRangeEnd, monitorId);
        },
        async getFilterBar(resolver, { dateRangeStart, dateRangeEnd }, { req }) {
            return libs.monitors.getFilterBar(req, dateRangeStart, dateRangeEnd);
        },
        async getErrorsList(resolver, { dateRangeStart, dateRangeEnd, filters }, { req }) {
            return libs.monitors.getErrorsList(req, dateRangeStart, dateRangeEnd, filters);
        },
    },
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2hvbWUvYW50aG9ueS9naXRfd29ya3NwYWNlcy9raWJhbmEveC1wYWNrL3BsdWdpbnMvdXB0aW1lL3NlcnZlci9ncmFwaHFsL21vbml0b3JzL3Jlc29sdmVycy50cyIsInNvdXJjZXMiOlsiL2hvbWUvYW50aG9ueS9naXRfd29ya3NwYWNlcy9raWJhbmEveC1wYWNrL3BsdWdpbnMvdXB0aW1lL3NlcnZlci9ncmFwaHFsL21vbml0b3JzL3Jlc29sdmVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7R0FJRzs7QUE4RFUsUUFBQSx1QkFBdUIsR0FBNkIsQ0FDL0QsSUFBa0IsRUFVbEIsRUFBRSxDQUFDLENBQUM7SUFDSixLQUFLLEVBQUU7UUFDTCx5REFBeUQ7UUFDekQsS0FBSyxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsRUFBRSxjQUFjLEVBQUUsWUFBWSxFQUFFLE9BQU8sRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFO1lBQzVFLE1BQU0sTUFBTSxHQUFHLE1BQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsR0FBRyxFQUFFLGNBQWMsRUFBRSxZQUFZLEVBQUUsT0FBTyxDQUFDLENBQUM7WUFDM0YsT0FBTztnQkFDTCxRQUFRLEVBQUUsTUFBTTthQUNqQixDQUFDO1FBQ0osQ0FBQztRQUNELEtBQUssQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFLEVBQUUsY0FBYyxFQUFFLFlBQVksRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRTtZQUM1RSxNQUFNLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsR0FBRyxNQUFNLElBQUksQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQzlELEdBQUcsRUFDSCxjQUFjLEVBQ2QsWUFBWSxFQUNaLE9BQU8sQ0FDUixDQUFDO1lBRUYsT0FBTztnQkFDTCxFQUFFO2dCQUNGLElBQUk7Z0JBQ0osS0FBSztnQkFDTCxTQUFTLEVBQUUsTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLEdBQUcsRUFBRSxjQUFjLEVBQUUsWUFBWSxFQUFFLE9BQU8sQ0FBQzthQUN6RixDQUFDO1FBQ0osQ0FBQztRQUNELEtBQUssQ0FBQyxvQkFBb0IsQ0FDeEIsUUFBUSxFQUNSLEVBQUUsU0FBUyxFQUFFLGNBQWMsRUFBRSxZQUFZLEVBQUUsRUFDM0MsRUFBRSxHQUFHLEVBQUU7WUFFUCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsb0JBQW9CLENBQUMsR0FBRyxFQUFFLFNBQVMsRUFBRSxjQUFjLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFDMUYsQ0FBQztRQUNELEtBQUssQ0FBQyxpQkFBaUIsQ0FDckIsUUFBUSxFQUNSLEVBQUUsY0FBYyxFQUFFLFlBQVksRUFBRSxTQUFTLEVBQUUsRUFDM0MsRUFBRSxHQUFHLEVBQUU7WUFFUCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsb0JBQW9CLENBQUMsR0FBRyxFQUFFLGNBQWMsRUFBRSxZQUFZLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDdkYsQ0FBQztRQUNELEtBQUssQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFLEVBQUUsY0FBYyxFQUFFLFlBQVksRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFO1lBQ3BFLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsR0FBRyxFQUFFLGNBQWMsRUFBRSxZQUFZLENBQUMsQ0FBQztRQUN2RSxDQUFDO1FBQ0QsS0FBSyxDQUFDLGFBQWEsQ0FDakIsUUFBUSxFQUNSLEVBQUUsY0FBYyxFQUFFLFlBQVksRUFBRSxPQUFPLEVBQUUsRUFDekMsRUFBRSxHQUFHLEVBQUU7WUFFUCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLEdBQUcsRUFBRSxjQUFjLEVBQUUsWUFBWSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ2pGLENBQUM7S0FDRjtDQUNGLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgRWxhc3RpY3NlYXJjaCBCLlYuIGFuZC9vciBsaWNlbnNlZCB0byBFbGFzdGljc2VhcmNoIEIuVi4gdW5kZXIgb25lXG4gKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gTGljZW5zZWQgdW5kZXIgdGhlIEVsYXN0aWMgTGljZW5zZTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgRWxhc3RpYyBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IFVNR3FsUmFuZ2UgfSBmcm9tICcuLi8uLi8uLi9jb21tb24vZG9tYWluX3R5cGVzJztcbmltcG9ydCB7IFVNUmVzb2x2ZXIgfSBmcm9tICcuLi8uLi8uLi9jb21tb24vZ3JhcGhxbC9yZXNvbHZlcl90eXBlcyc7XG5pbXBvcnQge1xuICBGaWx0ZXJCYXIsXG4gIEdldEVycm9yc0xpc3RRdWVyeUFyZ3MsXG4gIEdldEZpbHRlckJhclF1ZXJ5QXJncyxcbiAgR2V0TGF0ZXN0TW9uaXRvcnNRdWVyeUFyZ3MsXG4gIEdldE1vbml0b3JDaGFydHNEYXRhUXVlcnlBcmdzLFxuICBHZXRNb25pdG9yc1F1ZXJ5QXJncyxcbiAgR2V0U25hcHNob3RRdWVyeUFyZ3MsXG4gIFBpbmcsXG4gIFNuYXBzaG90LFxufSBmcm9tICcuLi8uLi8uLi9jb21tb24vZ3JhcGhxbC90eXBlcyc7XG5pbXBvcnQgeyBVTVNlcnZlckxpYnMgfSBmcm9tICcuLi8uLi9saWIvbGliJztcbmltcG9ydCB7IENyZWF0ZVVNR3JhcGhRTFJlc29sdmVycywgVU1Db250ZXh0IH0gZnJvbSAnLi4vdHlwZXMnO1xuXG5leHBvcnQgdHlwZSBVTVNuYXBzaG90UmVzb2x2ZXIgPSBVTVJlc29sdmVyPFxuICBTbmFwc2hvdCB8IFByb21pc2U8U25hcHNob3Q+LFxuICBhbnksXG4gIEdldFNuYXBzaG90UXVlcnlBcmdzLFxuICBVTUNvbnRleHRcbj47XG5cbmV4cG9ydCB0eXBlIFVNTW9uaXRvcnNSZXNvbHZlciA9IFVNUmVzb2x2ZXI8YW55IHwgUHJvbWlzZTxhbnk+LCBhbnksIFVNR3FsUmFuZ2UsIFVNQ29udGV4dD47XG5cbmV4cG9ydCB0eXBlIFVNR2V0TW9uaXRvcnNSZXNvbHZlciA9IFVNUmVzb2x2ZXI8XG4gIGFueSB8IFByb21pc2U8YW55PixcbiAgYW55LFxuICBHZXRNb25pdG9yc1F1ZXJ5QXJncyxcbiAgVU1Db250ZXh0XG4+O1xuXG5leHBvcnQgdHlwZSBVTUxhdGVzdE1vbml0b3JzUmVzb2x2ZXIgPSBVTVJlc29sdmVyPFxuICBQaW5nW10gfCBQcm9taXNlPFBpbmdbXT4sXG4gIGFueSxcbiAgR2V0TGF0ZXN0TW9uaXRvcnNRdWVyeUFyZ3MsXG4gIFVNQ29udGV4dFxuPjtcblxuZXhwb3J0IHR5cGUgVU1HZXRNb25pdG9yQ2hhcnRzUmVzb2x2ZXIgPSBVTVJlc29sdmVyPFxuICBhbnkgfCBQcm9taXNlPGFueT4sXG4gIGFueSxcbiAgR2V0TW9uaXRvckNoYXJ0c0RhdGFRdWVyeUFyZ3MsXG4gIFVNQ29udGV4dFxuPjtcblxuZXhwb3J0IHR5cGUgVU1HZXRGaWx0ZXJCYXJSZXNvbHZlciA9IFVNUmVzb2x2ZXI8XG4gIGFueSB8IFByb21pc2U8YW55PixcbiAgYW55LFxuICBHZXRGaWx0ZXJCYXJRdWVyeUFyZ3MsXG4gIFVNQ29udGV4dFxuPjtcblxuZXhwb3J0IHR5cGUgVU1HZXRFcnJvcnNMaXN0UmVzb2x2ZXIgPSBVTVJlc29sdmVyPFxuICBhbnkgfCBQcm9taXNlPGFueT4sXG4gIGFueSxcbiAgR2V0RXJyb3JzTGlzdFF1ZXJ5QXJncyxcbiAgVU1Db250ZXh0XG4+O1xuXG5leHBvcnQgY29uc3QgY3JlYXRlTW9uaXRvcnNSZXNvbHZlcnM6IENyZWF0ZVVNR3JhcGhRTFJlc29sdmVycyA9IChcbiAgbGliczogVU1TZXJ2ZXJMaWJzXG4pOiB7XG4gIFF1ZXJ5OiB7XG4gICAgZ2V0TW9uaXRvcnM6IFVNR2V0TW9uaXRvcnNSZXNvbHZlcjtcbiAgICBnZXRTbmFwc2hvdDogVU1TbmFwc2hvdFJlc29sdmVyO1xuICAgIGdldE1vbml0b3JDaGFydHNEYXRhOiBVTUdldE1vbml0b3JDaGFydHNSZXNvbHZlcjtcbiAgICBnZXRMYXRlc3RNb25pdG9yczogVU1MYXRlc3RNb25pdG9yc1Jlc29sdmVyO1xuICAgIGdldEZpbHRlckJhcjogVU1HZXRGaWx0ZXJCYXJSZXNvbHZlcjtcbiAgICBnZXRFcnJvcnNMaXN0OiBVTUdldEVycm9yc0xpc3RSZXNvbHZlcjtcbiAgfTtcbn0gPT4gKHtcbiAgUXVlcnk6IHtcbiAgICAvLyBAdHMtaWdub3JlIFRPRE8gdXBkYXRlIHR5cGluZ3MgYW5kIHJlbW92ZSB0aGlzIGNvbW1lbnRcbiAgICBhc3luYyBnZXRNb25pdG9ycyhyZXNvbHZlciwgeyBkYXRlUmFuZ2VTdGFydCwgZGF0ZVJhbmdlRW5kLCBmaWx0ZXJzIH0sIHsgcmVxIH0pOiBQcm9taXNlPGFueT4ge1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgbGlicy5tb25pdG9ycy5nZXRNb25pdG9ycyhyZXEsIGRhdGVSYW5nZVN0YXJ0LCBkYXRlUmFuZ2VFbmQsIGZpbHRlcnMpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbW9uaXRvcnM6IHJlc3VsdCxcbiAgICAgIH07XG4gICAgfSxcbiAgICBhc3luYyBnZXRTbmFwc2hvdChyZXNvbHZlciwgeyBkYXRlUmFuZ2VTdGFydCwgZGF0ZVJhbmdlRW5kLCBmaWx0ZXJzIH0sIHsgcmVxIH0pOiBQcm9taXNlPGFueT4ge1xuICAgICAgY29uc3QgeyB1cCwgZG93biwgdG90YWwgfSA9IGF3YWl0IGxpYnMubW9uaXRvcnMuZ2V0U25hcHNob3RDb3VudChcbiAgICAgICAgcmVxLFxuICAgICAgICBkYXRlUmFuZ2VTdGFydCxcbiAgICAgICAgZGF0ZVJhbmdlRW5kLFxuICAgICAgICBmaWx0ZXJzXG4gICAgICApO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICB1cCxcbiAgICAgICAgZG93bixcbiAgICAgICAgdG90YWwsXG4gICAgICAgIGhpc3RvZ3JhbTogYXdhaXQgbGlicy5waW5ncy5nZXRQaW5nSGlzdG9ncmFtKHJlcSwgZGF0ZVJhbmdlU3RhcnQsIGRhdGVSYW5nZUVuZCwgZmlsdGVycyksXG4gICAgICB9O1xuICAgIH0sXG4gICAgYXN5bmMgZ2V0TW9uaXRvckNoYXJ0c0RhdGEoXG4gICAgICByZXNvbHZlcixcbiAgICAgIHsgbW9uaXRvcklkLCBkYXRlUmFuZ2VTdGFydCwgZGF0ZVJhbmdlRW5kIH0sXG4gICAgICB7IHJlcSB9XG4gICAgKTogUHJvbWlzZTxhbnk+IHtcbiAgICAgIHJldHVybiBsaWJzLm1vbml0b3JzLmdldE1vbml0b3JDaGFydHNEYXRhKHJlcSwgbW9uaXRvcklkLCBkYXRlUmFuZ2VTdGFydCwgZGF0ZVJhbmdlRW5kKTtcbiAgICB9LFxuICAgIGFzeW5jIGdldExhdGVzdE1vbml0b3JzKFxuICAgICAgcmVzb2x2ZXIsXG4gICAgICB7IGRhdGVSYW5nZVN0YXJ0LCBkYXRlUmFuZ2VFbmQsIG1vbml0b3JJZCB9LFxuICAgICAgeyByZXEgfVxuICAgICk6IFByb21pc2U8UGluZ1tdPiB7XG4gICAgICByZXR1cm4gbGlicy5waW5ncy5nZXRMYXRlc3RNb25pdG9yRG9jcyhyZXEsIGRhdGVSYW5nZVN0YXJ0LCBkYXRlUmFuZ2VFbmQsIG1vbml0b3JJZCk7XG4gICAgfSxcbiAgICBhc3luYyBnZXRGaWx0ZXJCYXIocmVzb2x2ZXIsIHsgZGF0ZVJhbmdlU3RhcnQsIGRhdGVSYW5nZUVuZCB9LCB7IHJlcSB9KTogUHJvbWlzZTxGaWx0ZXJCYXI+IHtcbiAgICAgIHJldHVybiBsaWJzLm1vbml0b3JzLmdldEZpbHRlckJhcihyZXEsIGRhdGVSYW5nZVN0YXJ0LCBkYXRlUmFuZ2VFbmQpO1xuICAgIH0sXG4gICAgYXN5bmMgZ2V0RXJyb3JzTGlzdChcbiAgICAgIHJlc29sdmVyLFxuICAgICAgeyBkYXRlUmFuZ2VTdGFydCwgZGF0ZVJhbmdlRW5kLCBmaWx0ZXJzIH0sXG4gICAgICB7IHJlcSB9XG4gICAgKTogUHJvbWlzZTxhbnk+IHtcbiAgICAgIHJldHVybiBsaWJzLm1vbml0b3JzLmdldEVycm9yc0xpc3QocmVxLCBkYXRlUmFuZ2VTdGFydCwgZGF0ZVJhbmdlRW5kLCBmaWx0ZXJzKTtcbiAgICB9LFxuICB9LFxufSk7XG4iXX0=