"use strict";
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = require("lodash");
const ts_optchain_1 = require("ts-optchain");
const i18n_1 = require("x-pack/plugins/apm/common/i18n");
function timeseriesTransformer({ timeseriesResponse, bucketSize }) {
    const aggs = timeseriesResponse.aggregations;
    const overallAvgDuration = ts_optchain_1.oc(aggs).overall_avg_duration.value();
    const responseTimeBuckets = ts_optchain_1.oc(aggs)
        .response_times.buckets([])
        .slice(1, -1);
    const { avg, p95, p99 } = getResponseTime(responseTimeBuckets);
    const transactionResultBuckets = ts_optchain_1.oc(aggs).transaction_results.buckets([]);
    const tpmBuckets = getTpmBuckets(transactionResultBuckets, bucketSize);
    return {
        totalHits: timeseriesResponse.hits.total,
        responseTimes: {
            avg,
            p95,
            p99
        },
        tpmBuckets,
        overallAvgDuration
    };
}
exports.timeseriesTransformer = timeseriesTransformer;
function getTpmBuckets(transactionResultBuckets, bucketSize) {
    const buckets = transactionResultBuckets.map(({ key: resultKey, timeseries }) => {
        const dataPoints = timeseries.buckets.slice(1, -1).map(bucket => {
            return {
                x: bucket.key,
                y: lodash_1.round(bucket.doc_count * (60 / bucketSize), 1)
            };
        });
        // Handle empty string result keys
        const key = resultKey === '' ? i18n_1.NOT_AVAILABLE_LABEL : resultKey;
        return { key, dataPoints };
    });
    return lodash_1.sortBy(buckets, bucket => bucket.key.replace(/^HTTP (\d)xx$/, '00$1') // ensure that HTTP 3xx are sorted at the top
    );
}
exports.getTpmBuckets = getTpmBuckets;
function getResponseTime(responseTimeBuckets) {
    return responseTimeBuckets.reduce((acc, bucket) => {
        const { '95.0': p95, '99.0': p99 } = bucket.pct.values;
        acc.avg.push({ x: bucket.key, y: bucket.avg.value });
        acc.p95.push({ x: bucket.key, y: lodash_1.isNumber(p95) ? p95 : null });
        acc.p99.push({ x: bucket.key, y: lodash_1.isNumber(p99) ? p99 : null });
        return acc;
    }, {
        avg: [],
        p95: [],
        p99: []
    });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2hvbWUvYW50aG9ueS9naXRfd29ya3NwYWNlcy9raWJhbmEveC1wYWNrL3BsdWdpbnMvYXBtL3NlcnZlci9saWIvdHJhbnNhY3Rpb25zL2NoYXJ0cy9nZXRfdGltZXNlcmllc19kYXRhL3RyYW5zZm9ybS50cyIsInNvdXJjZXMiOlsiL2hvbWUvYW50aG9ueS9naXRfd29ya3NwYWNlcy9raWJhbmEveC1wYWNrL3BsdWdpbnMvYXBtL3NlcnZlci9saWIvdHJhbnNhY3Rpb25zL2NoYXJ0cy9nZXRfdGltZXNlcmllc19kYXRhL3RyYW5zZm9ybS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7R0FJRzs7QUFFSCxtQ0FBaUQ7QUFDakQsNkNBQWlDO0FBQ2pDLHlEQUFxRTtBQWtCckUsU0FBZ0IscUJBQXFCLENBQUMsRUFDcEMsa0JBQWtCLEVBQ2xCLFVBQVUsRUFJWDtJQUNDLE1BQU0sSUFBSSxHQUFHLGtCQUFrQixDQUFDLFlBQVksQ0FBQztJQUM3QyxNQUFNLGtCQUFrQixHQUFHLGdCQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsb0JBQW9CLENBQUMsS0FBSyxFQUFFLENBQUM7SUFFakUsTUFBTSxtQkFBbUIsR0FBRyxnQkFBRSxDQUFDLElBQUksQ0FBQztTQUNqQyxjQUFjLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztTQUMxQixLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDaEIsTUFBTSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsZUFBZSxDQUFDLG1CQUFtQixDQUFDLENBQUM7SUFDL0QsTUFBTSx3QkFBd0IsR0FBRyxnQkFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLG1CQUFtQixDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUMxRSxNQUFNLFVBQVUsR0FBRyxhQUFhLENBQUMsd0JBQXdCLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFFdkUsT0FBTztRQUNMLFNBQVMsRUFBRSxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsS0FBSztRQUN4QyxhQUFhLEVBQUU7WUFDYixHQUFHO1lBQ0gsR0FBRztZQUNILEdBQUc7U0FDSjtRQUNELFVBQVU7UUFDVixrQkFBa0I7S0FDbkIsQ0FBQztBQUNKLENBQUM7QUEzQkQsc0RBMkJDO0FBRUQsU0FBZ0IsYUFBYSxDQUMzQix3QkFBc0YsRUFDdEYsVUFBa0I7SUFFbEIsTUFBTSxPQUFPLEdBQUcsd0JBQXdCLENBQUMsR0FBRyxDQUMxQyxDQUFDLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsRUFBRSxFQUFFO1FBQ2pDLE1BQU0sVUFBVSxHQUFHLFVBQVUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUM5RCxPQUFPO2dCQUNMLENBQUMsRUFBRSxNQUFNLENBQUMsR0FBRztnQkFDYixDQUFDLEVBQUUsY0FBSyxDQUFDLE1BQU0sQ0FBQyxTQUFTLEdBQUcsQ0FBQyxFQUFFLEdBQUcsVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2FBQ2xELENBQUM7UUFDSixDQUFDLENBQUMsQ0FBQztRQUVILGtDQUFrQztRQUNsQyxNQUFNLEdBQUcsR0FBRyxTQUFTLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQywwQkFBbUIsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO1FBRS9ELE9BQU8sRUFBRSxHQUFHLEVBQUUsVUFBVSxFQUFFLENBQUM7SUFDN0IsQ0FBQyxDQUNGLENBQUM7SUFFRixPQUFPLGVBQU0sQ0FDWCxPQUFPLEVBQ1AsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxlQUFlLEVBQUUsTUFBTSxDQUFDLENBQUMsNkNBQTZDO0tBQ3BHLENBQUM7QUFDSixDQUFDO0FBeEJELHNDQXdCQztBQUVELFNBQVMsZUFBZSxDQUN0QixtQkFBNEU7SUFFNUUsT0FBTyxtQkFBbUIsQ0FBQyxNQUFNLENBQy9CLENBQUMsR0FBRyxFQUFFLE1BQU0sRUFBRSxFQUFFO1FBQ2QsTUFBTSxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDO1FBRXZELEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUNyRCxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxpQkFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7UUFDL0QsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsaUJBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQy9ELE9BQU8sR0FBRyxDQUFDO0lBQ2IsQ0FBQyxFQUNEO1FBQ0UsR0FBRyxFQUFFLEVBQWtCO1FBQ3ZCLEdBQUcsRUFBRSxFQUFrQjtRQUN2QixHQUFHLEVBQUUsRUFBa0I7S0FDeEIsQ0FDRixDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgRWxhc3RpY3NlYXJjaCBCLlYuIGFuZC9vciBsaWNlbnNlZCB0byBFbGFzdGljc2VhcmNoIEIuVi4gdW5kZXIgb25lXG4gKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gTGljZW5zZWQgdW5kZXIgdGhlIEVsYXN0aWMgTGljZW5zZTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgRWxhc3RpYyBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IGlzTnVtYmVyLCByb3VuZCwgc29ydEJ5IH0gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IG9jIH0gZnJvbSAndHMtb3B0Y2hhaW4nO1xuaW1wb3J0IHsgTk9UX0FWQUlMQUJMRV9MQUJFTCB9IGZyb20gJ3gtcGFjay9wbHVnaW5zL2FwbS9jb21tb24vaTE4bic7XG5pbXBvcnQgeyBDb29yZGluYXRlIH0gZnJvbSAneC1wYWNrL3BsdWdpbnMvYXBtL3R5cGluZ3MvdGltZXNlcmllcyc7XG5pbXBvcnQgeyBFU1Jlc3BvbnNlIH0gZnJvbSAnLi9mZXRjaGVyJztcblxuZXhwb3J0IGludGVyZmFjZSBBcG1UaW1lU2VyaWVzUmVzcG9uc2Uge1xuICB0b3RhbEhpdHM6IG51bWJlcjtcbiAgcmVzcG9uc2VUaW1lczoge1xuICAgIGF2ZzogQ29vcmRpbmF0ZVtdO1xuICAgIHA5NTogQ29vcmRpbmF0ZVtdO1xuICAgIHA5OTogQ29vcmRpbmF0ZVtdO1xuICB9O1xuICB0cG1CdWNrZXRzOiBBcnJheTx7XG4gICAga2V5OiBzdHJpbmc7XG4gICAgZGF0YVBvaW50czogQ29vcmRpbmF0ZVtdO1xuICB9PjtcbiAgb3ZlcmFsbEF2Z0R1cmF0aW9uPzogbnVtYmVyO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGltZXNlcmllc1RyYW5zZm9ybWVyKHtcbiAgdGltZXNlcmllc1Jlc3BvbnNlLFxuICBidWNrZXRTaXplXG59OiB7XG4gIHRpbWVzZXJpZXNSZXNwb25zZTogRVNSZXNwb25zZTtcbiAgYnVja2V0U2l6ZTogbnVtYmVyO1xufSk6IEFwbVRpbWVTZXJpZXNSZXNwb25zZSB7XG4gIGNvbnN0IGFnZ3MgPSB0aW1lc2VyaWVzUmVzcG9uc2UuYWdncmVnYXRpb25zO1xuICBjb25zdCBvdmVyYWxsQXZnRHVyYXRpb24gPSBvYyhhZ2dzKS5vdmVyYWxsX2F2Z19kdXJhdGlvbi52YWx1ZSgpO1xuXG4gIGNvbnN0IHJlc3BvbnNlVGltZUJ1Y2tldHMgPSBvYyhhZ2dzKVxuICAgIC5yZXNwb25zZV90aW1lcy5idWNrZXRzKFtdKVxuICAgIC5zbGljZSgxLCAtMSk7XG4gIGNvbnN0IHsgYXZnLCBwOTUsIHA5OSB9ID0gZ2V0UmVzcG9uc2VUaW1lKHJlc3BvbnNlVGltZUJ1Y2tldHMpO1xuICBjb25zdCB0cmFuc2FjdGlvblJlc3VsdEJ1Y2tldHMgPSBvYyhhZ2dzKS50cmFuc2FjdGlvbl9yZXN1bHRzLmJ1Y2tldHMoW10pO1xuICBjb25zdCB0cG1CdWNrZXRzID0gZ2V0VHBtQnVja2V0cyh0cmFuc2FjdGlvblJlc3VsdEJ1Y2tldHMsIGJ1Y2tldFNpemUpO1xuXG4gIHJldHVybiB7XG4gICAgdG90YWxIaXRzOiB0aW1lc2VyaWVzUmVzcG9uc2UuaGl0cy50b3RhbCxcbiAgICByZXNwb25zZVRpbWVzOiB7XG4gICAgICBhdmcsXG4gICAgICBwOTUsXG4gICAgICBwOTlcbiAgICB9LFxuICAgIHRwbUJ1Y2tldHMsXG4gICAgb3ZlcmFsbEF2Z0R1cmF0aW9uXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRUcG1CdWNrZXRzKFxuICB0cmFuc2FjdGlvblJlc3VsdEJ1Y2tldHM6IEVTUmVzcG9uc2VbJ2FnZ3JlZ2F0aW9ucyddWyd0cmFuc2FjdGlvbl9yZXN1bHRzJ11bJ2J1Y2tldHMnXSxcbiAgYnVja2V0U2l6ZTogbnVtYmVyXG4pIHtcbiAgY29uc3QgYnVja2V0cyA9IHRyYW5zYWN0aW9uUmVzdWx0QnVja2V0cy5tYXAoXG4gICAgKHsga2V5OiByZXN1bHRLZXksIHRpbWVzZXJpZXMgfSkgPT4ge1xuICAgICAgY29uc3QgZGF0YVBvaW50cyA9IHRpbWVzZXJpZXMuYnVja2V0cy5zbGljZSgxLCAtMSkubWFwKGJ1Y2tldCA9PiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgeDogYnVja2V0LmtleSxcbiAgICAgICAgICB5OiByb3VuZChidWNrZXQuZG9jX2NvdW50ICogKDYwIC8gYnVja2V0U2l6ZSksIDEpXG4gICAgICAgIH07XG4gICAgICB9KTtcblxuICAgICAgLy8gSGFuZGxlIGVtcHR5IHN0cmluZyByZXN1bHQga2V5c1xuICAgICAgY29uc3Qga2V5ID0gcmVzdWx0S2V5ID09PSAnJyA/IE5PVF9BVkFJTEFCTEVfTEFCRUwgOiByZXN1bHRLZXk7XG5cbiAgICAgIHJldHVybiB7IGtleSwgZGF0YVBvaW50cyB9O1xuICAgIH1cbiAgKTtcblxuICByZXR1cm4gc29ydEJ5KFxuICAgIGJ1Y2tldHMsXG4gICAgYnVja2V0ID0+IGJ1Y2tldC5rZXkucmVwbGFjZSgvXkhUVFAgKFxcZCl4eCQvLCAnMDAkMScpIC8vIGVuc3VyZSB0aGF0IEhUVFAgM3h4IGFyZSBzb3J0ZWQgYXQgdGhlIHRvcFxuICApO1xufVxuXG5mdW5jdGlvbiBnZXRSZXNwb25zZVRpbWUoXG4gIHJlc3BvbnNlVGltZUJ1Y2tldHM6IEVTUmVzcG9uc2VbJ2FnZ3JlZ2F0aW9ucyddWydyZXNwb25zZV90aW1lcyddWydidWNrZXRzJ11cbikge1xuICByZXR1cm4gcmVzcG9uc2VUaW1lQnVja2V0cy5yZWR1Y2UoXG4gICAgKGFjYywgYnVja2V0KSA9PiB7XG4gICAgICBjb25zdCB7ICc5NS4wJzogcDk1LCAnOTkuMCc6IHA5OSB9ID0gYnVja2V0LnBjdC52YWx1ZXM7XG5cbiAgICAgIGFjYy5hdmcucHVzaCh7IHg6IGJ1Y2tldC5rZXksIHk6IGJ1Y2tldC5hdmcudmFsdWUgfSk7XG4gICAgICBhY2MucDk1LnB1c2goeyB4OiBidWNrZXQua2V5LCB5OiBpc051bWJlcihwOTUpID8gcDk1IDogbnVsbCB9KTtcbiAgICAgIGFjYy5wOTkucHVzaCh7IHg6IGJ1Y2tldC5rZXksIHk6IGlzTnVtYmVyKHA5OSkgPyBwOTkgOiBudWxsIH0pO1xuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LFxuICAgIHtcbiAgICAgIGF2ZzogW10gYXMgQ29vcmRpbmF0ZVtdLFxuICAgICAgcDk1OiBbXSBhcyBDb29yZGluYXRlW10sXG4gICAgICBwOTk6IFtdIGFzIENvb3JkaW5hdGVbXVxuICAgIH1cbiAgKTtcbn1cbiJdfQ==