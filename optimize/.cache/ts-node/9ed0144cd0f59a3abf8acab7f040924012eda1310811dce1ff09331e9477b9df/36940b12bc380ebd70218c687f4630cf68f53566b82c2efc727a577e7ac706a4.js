"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const CPU_METRIC_NAMES = [
    'systemCPUAverage',
    'systemCPUMax',
    'processCPUAverage',
    'processCPUMax'
];
function transform(result) {
    const { aggregations, hits } = result;
    const { timeseriesData, systemCPUAverage, systemCPUMax, processCPUAverage, processCPUMax } = aggregations;
    const series = {
        systemCPUAverage: [],
        systemCPUMax: [],
        processCPUAverage: [],
        processCPUMax: []
    };
    // using forEach here to avoid looping over the entire dataset
    // 4 times or doing a complicated, memory-heavy map/reduce
    timeseriesData.buckets.forEach(({ key, ...bucket }) => {
        CPU_METRIC_NAMES.forEach(name => {
            series[name].push({ x: key, y: bucket[name].value });
        });
    });
    return {
        series,
        overallValues: {
            systemCPUAverage: systemCPUAverage.value,
            systemCPUMax: systemCPUMax.value,
            processCPUAverage: processCPUAverage.value,
            processCPUMax: processCPUMax.value
        },
        totalHits: hits.total
    };
}
exports.transform = transform;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2hvbWUvYW50aG9ueS9naXRfd29ya3NwYWNlcy9raWJhbmEveC1wYWNrL3BsdWdpbnMvYXBtL3NlcnZlci9saWIvbWV0cmljcy9nZXRfY3B1X2NoYXJ0X2RhdGEvdHJhbnNmb3JtZXIudHMiLCJzb3VyY2VzIjpbIi9ob21lL2FudGhvbnkvZ2l0X3dvcmtzcGFjZXMva2liYW5hL3gtcGFjay9wbHVnaW5zL2FwbS9zZXJ2ZXIvbGliL21ldHJpY3MvZ2V0X2NwdV9jaGFydF9kYXRhL3RyYW5zZm9ybWVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBK0JBLE1BQU0sZ0JBQWdCLEdBQW9CO0lBQ3hDLGtCQUFrQjtJQUNsQixjQUFjO0lBQ2QsbUJBQW1CO0lBQ25CLGVBQWU7Q0FDaEIsQ0FBQztBQUVGLFNBQWdCLFNBQVMsQ0FBQyxNQUFrQjtJQUMxQyxNQUFNLEVBQUUsWUFBWSxFQUFFLElBQUksRUFBRSxHQUFHLE1BQU0sQ0FBQztJQUN0QyxNQUFNLEVBQ0osY0FBYyxFQUNkLGdCQUFnQixFQUNoQixZQUFZLEVBQ1osaUJBQWlCLEVBQ2pCLGFBQWEsRUFDZCxHQUFHLFlBQVksQ0FBQztJQUVqQixNQUFNLE1BQU0sR0FBa0M7UUFDNUMsZ0JBQWdCLEVBQUUsRUFBRTtRQUNwQixZQUFZLEVBQUUsRUFBRTtRQUNoQixpQkFBaUIsRUFBRSxFQUFFO1FBQ3JCLGFBQWEsRUFBRSxFQUFFO0tBQ2xCLENBQUM7SUFFRiw4REFBOEQ7SUFDOUQsMERBQTBEO0lBQzFELGNBQWMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRyxNQUFNLEVBQUUsRUFBRSxFQUFFO1FBQ3BELGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUM5QixNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7UUFDdkQsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILE9BQU87UUFDTCxNQUFNO1FBQ04sYUFBYSxFQUFFO1lBQ2IsZ0JBQWdCLEVBQUUsZ0JBQWdCLENBQUMsS0FBSztZQUN4QyxZQUFZLEVBQUUsWUFBWSxDQUFDLEtBQUs7WUFDaEMsaUJBQWlCLEVBQUUsaUJBQWlCLENBQUMsS0FBSztZQUMxQyxhQUFhLEVBQUUsYUFBYSxDQUFDLEtBQUs7U0FDbkM7UUFDRCxTQUFTLEVBQUUsSUFBSSxDQUFDLEtBQUs7S0FDdEIsQ0FBQztBQUNKLENBQUM7QUFuQ0QsOEJBbUNDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBFbGFzdGljc2VhcmNoIEIuVi4gYW5kL29yIGxpY2Vuc2VkIHRvIEVsYXN0aWNzZWFyY2ggQi5WLiB1bmRlciBvbmVcbiAqIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiBMaWNlbnNlZCB1bmRlciB0aGUgRWxhc3RpYyBMaWNlbnNlO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBFbGFzdGljIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7IENvb3JkaW5hdGUgfSBmcm9tICd4LXBhY2svcGx1Z2lucy9hcG0vdHlwaW5ncy90aW1lc2VyaWVzJztcbmltcG9ydCB7IEVTUmVzcG9uc2UgfSBmcm9tICcuL2ZldGNoZXInO1xuXG5leHBvcnQgaW50ZXJmYWNlIENQVUNoYXJ0QVBJUmVzcG9uc2Uge1xuICBzZXJpZXM6IHtcbiAgICBzeXN0ZW1DUFVBdmVyYWdlOiBDb29yZGluYXRlW107XG4gICAgc3lzdGVtQ1BVTWF4OiBDb29yZGluYXRlW107XG4gICAgcHJvY2Vzc0NQVUF2ZXJhZ2U6IENvb3JkaW5hdGVbXTtcbiAgICBwcm9jZXNzQ1BVTWF4OiBDb29yZGluYXRlW107XG4gIH07XG4gIC8vIG92ZXJhbGwgdG90YWxzIGZvciB0aGUgd2hvbGUgdGltZSByYW5nZVxuICBvdmVyYWxsVmFsdWVzOiB7XG4gICAgc3lzdGVtQ1BVQXZlcmFnZTogbnVtYmVyIHwgbnVsbDtcbiAgICBzeXN0ZW1DUFVNYXg6IG51bWJlciB8IG51bGw7XG4gICAgcHJvY2Vzc0NQVUF2ZXJhZ2U6IG51bWJlciB8IG51bGw7XG4gICAgcHJvY2Vzc0NQVU1heDogbnVtYmVyIHwgbnVsbDtcbiAgfTtcbiAgdG90YWxIaXRzOiBudW1iZXI7XG59XG5cbmV4cG9ydCB0eXBlIENQVU1ldHJpY05hbWUgPVxuICB8ICdzeXN0ZW1DUFVBdmVyYWdlJ1xuICB8ICdzeXN0ZW1DUFVNYXgnXG4gIHwgJ3Byb2Nlc3NDUFVBdmVyYWdlJ1xuICB8ICdwcm9jZXNzQ1BVTWF4JztcblxuY29uc3QgQ1BVX01FVFJJQ19OQU1FUzogQ1BVTWV0cmljTmFtZVtdID0gW1xuICAnc3lzdGVtQ1BVQXZlcmFnZScsXG4gICdzeXN0ZW1DUFVNYXgnLFxuICAncHJvY2Vzc0NQVUF2ZXJhZ2UnLFxuICAncHJvY2Vzc0NQVU1heCdcbl07XG5cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm0ocmVzdWx0OiBFU1Jlc3BvbnNlKTogQ1BVQ2hhcnRBUElSZXNwb25zZSB7XG4gIGNvbnN0IHsgYWdncmVnYXRpb25zLCBoaXRzIH0gPSByZXN1bHQ7XG4gIGNvbnN0IHtcbiAgICB0aW1lc2VyaWVzRGF0YSxcbiAgICBzeXN0ZW1DUFVBdmVyYWdlLFxuICAgIHN5c3RlbUNQVU1heCxcbiAgICBwcm9jZXNzQ1BVQXZlcmFnZSxcbiAgICBwcm9jZXNzQ1BVTWF4XG4gIH0gPSBhZ2dyZWdhdGlvbnM7XG5cbiAgY29uc3Qgc2VyaWVzOiBDUFVDaGFydEFQSVJlc3BvbnNlWydzZXJpZXMnXSA9IHtcbiAgICBzeXN0ZW1DUFVBdmVyYWdlOiBbXSxcbiAgICBzeXN0ZW1DUFVNYXg6IFtdLFxuICAgIHByb2Nlc3NDUFVBdmVyYWdlOiBbXSxcbiAgICBwcm9jZXNzQ1BVTWF4OiBbXVxuICB9O1xuXG4gIC8vIHVzaW5nIGZvckVhY2ggaGVyZSB0byBhdm9pZCBsb29waW5nIG92ZXIgdGhlIGVudGlyZSBkYXRhc2V0XG4gIC8vIDQgdGltZXMgb3IgZG9pbmcgYSBjb21wbGljYXRlZCwgbWVtb3J5LWhlYXZ5IG1hcC9yZWR1Y2VcbiAgdGltZXNlcmllc0RhdGEuYnVja2V0cy5mb3JFYWNoKCh7IGtleSwgLi4uYnVja2V0IH0pID0+IHtcbiAgICBDUFVfTUVUUklDX05BTUVTLmZvckVhY2gobmFtZSA9PiB7XG4gICAgICBzZXJpZXNbbmFtZV0ucHVzaCh7IHg6IGtleSwgeTogYnVja2V0W25hbWVdLnZhbHVlIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICByZXR1cm4ge1xuICAgIHNlcmllcyxcbiAgICBvdmVyYWxsVmFsdWVzOiB7XG4gICAgICBzeXN0ZW1DUFVBdmVyYWdlOiBzeXN0ZW1DUFVBdmVyYWdlLnZhbHVlLFxuICAgICAgc3lzdGVtQ1BVTWF4OiBzeXN0ZW1DUFVNYXgudmFsdWUsXG4gICAgICBwcm9jZXNzQ1BVQXZlcmFnZTogcHJvY2Vzc0NQVUF2ZXJhZ2UudmFsdWUsXG4gICAgICBwcm9jZXNzQ1BVTWF4OiBwcm9jZXNzQ1BVTWF4LnZhbHVlXG4gICAgfSxcbiAgICB0b3RhbEhpdHM6IGhpdHMudG90YWxcbiAgfTtcbn1cbiJdfQ==