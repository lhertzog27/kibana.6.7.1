"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = require("x-pack/plugins/apm/common/constants");
const get_bucket_size_1 = require("../../helpers/get_bucket_size");
async function fetch({ serviceName, setup }) {
    const { start, end, esFilterQuery, client, config } = setup;
    const { intervalString } = get_bucket_size_1.getBucketSize(start, end, 'auto');
    const filters = [
        { term: { [constants_1.SERVICE_NAME]: serviceName } },
        { term: { [constants_1.PROCESSOR_NAME]: 'metric' } },
        {
            range: { '@timestamp': { gte: start, lte: end, format: 'epoch_millis' } }
        }
    ];
    if (esFilterQuery) {
        filters.push(esFilterQuery);
    }
    const params = {
        index: config.get('apm_oss.metricsIndices'),
        body: {
            size: 0,
            query: { bool: { filter: filters } },
            aggs: {
                timeseriesData: {
                    date_histogram: {
                        field: '@timestamp',
                        interval: intervalString,
                        min_doc_count: 0,
                        extended_bounds: { min: start, max: end }
                    },
                    aggs: {
                        systemCPUAverage: { avg: { field: constants_1.METRIC_SYSTEM_CPU_PERCENT } },
                        systemCPUMax: { max: { field: constants_1.METRIC_SYSTEM_CPU_PERCENT } },
                        processCPUAverage: { avg: { field: constants_1.METRIC_PROCESS_CPU_PERCENT } },
                        processCPUMax: { max: { field: constants_1.METRIC_PROCESS_CPU_PERCENT } }
                    }
                },
                systemCPUAverage: { avg: { field: constants_1.METRIC_SYSTEM_CPU_PERCENT } },
                systemCPUMax: { max: { field: constants_1.METRIC_SYSTEM_CPU_PERCENT } },
                processCPUAverage: { avg: { field: constants_1.METRIC_PROCESS_CPU_PERCENT } },
                processCPUMax: { max: { field: constants_1.METRIC_PROCESS_CPU_PERCENT } }
            }
        }
    };
    return client('search', params);
}
exports.fetch = fetch;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2hvbWUvYW50aG9ueS9naXRfd29ya3NwYWNlcy9raWJhbmEveC1wYWNrL3BsdWdpbnMvYXBtL3NlcnZlci9saWIvbWV0cmljcy9nZXRfY3B1X2NoYXJ0X2RhdGEvZmV0Y2hlci50cyIsInNvdXJjZXMiOlsiL2hvbWUvYW50aG9ueS9naXRfd29ya3NwYWNlcy9raWJhbmEveC1wYWNrL3BsdWdpbnMvYXBtL3NlcnZlci9saWIvbWV0cmljcy9nZXRfY3B1X2NoYXJ0X2RhdGEvZmV0Y2hlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQU1BLG1FQUs2QztBQUM3QyxtRUFBOEQ7QUFzQnZELEtBQUssVUFBVSxLQUFLLENBQUMsRUFDMUIsV0FBVyxFQUNYLEtBQUssRUFDYztJQUNuQixNQUFNLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxhQUFhLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxHQUFHLEtBQUssQ0FBQztJQUM1RCxNQUFNLEVBQUUsY0FBYyxFQUFFLEdBQUcsK0JBQWEsQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQzdELE1BQU0sT0FBTyxHQUFlO1FBQzFCLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyx3QkFBWSxDQUFDLEVBQUUsV0FBVyxFQUFFLEVBQUU7UUFDekMsRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLDBCQUFjLENBQUMsRUFBRSxRQUFRLEVBQUUsRUFBRTtRQUN4QztZQUNFLEtBQUssRUFBRSxFQUFFLFlBQVksRUFBRSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsY0FBYyxFQUFFLEVBQUU7U0FDMUU7S0FDRixDQUFDO0lBRUYsSUFBSSxhQUFhLEVBQUU7UUFDakIsT0FBTyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztLQUM3QjtJQUVELE1BQU0sTUFBTSxHQUFHO1FBQ2IsS0FBSyxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQVMsd0JBQXdCLENBQUM7UUFDbkQsSUFBSSxFQUFFO1lBQ0osSUFBSSxFQUFFLENBQUM7WUFDUCxLQUFLLEVBQUUsRUFBRSxJQUFJLEVBQUUsRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLEVBQUU7WUFDcEMsSUFBSSxFQUFFO2dCQUNKLGNBQWMsRUFBRTtvQkFDZCxjQUFjLEVBQUU7d0JBQ2QsS0FBSyxFQUFFLFlBQVk7d0JBQ25CLFFBQVEsRUFBRSxjQUFjO3dCQUN4QixhQUFhLEVBQUUsQ0FBQzt3QkFDaEIsZUFBZSxFQUFFLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFO3FCQUMxQztvQkFDRCxJQUFJLEVBQUU7d0JBQ0osZ0JBQWdCLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxLQUFLLEVBQUUscUNBQXlCLEVBQUUsRUFBRTt3QkFDL0QsWUFBWSxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsS0FBSyxFQUFFLHFDQUF5QixFQUFFLEVBQUU7d0JBQzNELGlCQUFpQixFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsS0FBSyxFQUFFLHNDQUEwQixFQUFFLEVBQUU7d0JBQ2pFLGFBQWEsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLEtBQUssRUFBRSxzQ0FBMEIsRUFBRSxFQUFFO3FCQUM5RDtpQkFDRjtnQkFDRCxnQkFBZ0IsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLEtBQUssRUFBRSxxQ0FBeUIsRUFBRSxFQUFFO2dCQUMvRCxZQUFZLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxLQUFLLEVBQUUscUNBQXlCLEVBQUUsRUFBRTtnQkFDM0QsaUJBQWlCLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxLQUFLLEVBQUUsc0NBQTBCLEVBQUUsRUFBRTtnQkFDakUsYUFBYSxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsS0FBSyxFQUFFLHNDQUEwQixFQUFFLEVBQUU7YUFDOUQ7U0FDRjtLQUNGLENBQUM7SUFFRixPQUFPLE1BQU0sQ0FBYSxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDOUMsQ0FBQztBQS9DRCxzQkErQ0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IEVsYXN0aWNzZWFyY2ggQi5WLiBhbmQvb3IgbGljZW5zZWQgdG8gRWxhc3RpY3NlYXJjaCBCLlYuIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuIExpY2Vuc2VkIHVuZGVyIHRoZSBFbGFzdGljIExpY2Vuc2U7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIEVsYXN0aWMgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgQWdncmVnYXRpb25TZWFyY2hSZXNwb25zZSwgRVNGaWx0ZXIgfSBmcm9tICdlbGFzdGljc2VhcmNoJztcbmltcG9ydCB7XG4gIE1FVFJJQ19QUk9DRVNTX0NQVV9QRVJDRU5ULFxuICBNRVRSSUNfU1lTVEVNX0NQVV9QRVJDRU5ULFxuICBQUk9DRVNTT1JfTkFNRSxcbiAgU0VSVklDRV9OQU1FXG59IGZyb20gJ3gtcGFjay9wbHVnaW5zL2FwbS9jb21tb24vY29uc3RhbnRzJztcbmltcG9ydCB7IGdldEJ1Y2tldFNpemUgfSBmcm9tICcuLi8uLi9oZWxwZXJzL2dldF9idWNrZXRfc2l6ZSc7XG5pbXBvcnQgeyBBZ2dWYWx1ZSwgTWV0cmljc1JlcXVlc3RBcmdzLCBUaW1lU2VyaWVzQnVja2V0IH0gZnJvbSAnLi4vcXVlcnlfdHlwZXMnO1xuXG5pbnRlcmZhY2UgQnVja2V0IGV4dGVuZHMgVGltZVNlcmllc0J1Y2tldCB7XG4gIHN5c3RlbUNQVUF2ZXJhZ2U6IEFnZ1ZhbHVlO1xuICBzeXN0ZW1DUFVNYXg6IEFnZ1ZhbHVlO1xuICBwcm9jZXNzQ1BVQXZlcmFnZTogQWdnVmFsdWU7XG4gIHByb2Nlc3NDUFVNYXg6IEFnZ1ZhbHVlO1xufVxuXG5pbnRlcmZhY2UgQWdncyB7XG4gIHRpbWVzZXJpZXNEYXRhOiB7XG4gICAgYnVja2V0czogQnVja2V0W107XG4gIH07XG4gIHN5c3RlbUNQVUF2ZXJhZ2U6IEFnZ1ZhbHVlO1xuICBzeXN0ZW1DUFVNYXg6IEFnZ1ZhbHVlO1xuICBwcm9jZXNzQ1BVQXZlcmFnZTogQWdnVmFsdWU7XG4gIHByb2Nlc3NDUFVNYXg6IEFnZ1ZhbHVlO1xufVxuXG5leHBvcnQgdHlwZSBFU1Jlc3BvbnNlID0gQWdncmVnYXRpb25TZWFyY2hSZXNwb25zZTx2b2lkLCBBZ2dzPjtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGZldGNoKHtcbiAgc2VydmljZU5hbWUsXG4gIHNldHVwXG59OiBNZXRyaWNzUmVxdWVzdEFyZ3MpOiBQcm9taXNlPEVTUmVzcG9uc2U+IHtcbiAgY29uc3QgeyBzdGFydCwgZW5kLCBlc0ZpbHRlclF1ZXJ5LCBjbGllbnQsIGNvbmZpZyB9ID0gc2V0dXA7XG4gIGNvbnN0IHsgaW50ZXJ2YWxTdHJpbmcgfSA9IGdldEJ1Y2tldFNpemUoc3RhcnQsIGVuZCwgJ2F1dG8nKTtcbiAgY29uc3QgZmlsdGVyczogRVNGaWx0ZXJbXSA9IFtcbiAgICB7IHRlcm06IHsgW1NFUlZJQ0VfTkFNRV06IHNlcnZpY2VOYW1lIH0gfSxcbiAgICB7IHRlcm06IHsgW1BST0NFU1NPUl9OQU1FXTogJ21ldHJpYycgfSB9LFxuICAgIHtcbiAgICAgIHJhbmdlOiB7ICdAdGltZXN0YW1wJzogeyBndGU6IHN0YXJ0LCBsdGU6IGVuZCwgZm9ybWF0OiAnZXBvY2hfbWlsbGlzJyB9IH1cbiAgICB9XG4gIF07XG5cbiAgaWYgKGVzRmlsdGVyUXVlcnkpIHtcbiAgICBmaWx0ZXJzLnB1c2goZXNGaWx0ZXJRdWVyeSk7XG4gIH1cblxuICBjb25zdCBwYXJhbXMgPSB7XG4gICAgaW5kZXg6IGNvbmZpZy5nZXQ8c3RyaW5nPignYXBtX29zcy5tZXRyaWNzSW5kaWNlcycpLFxuICAgIGJvZHk6IHtcbiAgICAgIHNpemU6IDAsXG4gICAgICBxdWVyeTogeyBib29sOiB7IGZpbHRlcjogZmlsdGVycyB9IH0sXG4gICAgICBhZ2dzOiB7XG4gICAgICAgIHRpbWVzZXJpZXNEYXRhOiB7XG4gICAgICAgICAgZGF0ZV9oaXN0b2dyYW06IHtcbiAgICAgICAgICAgIGZpZWxkOiAnQHRpbWVzdGFtcCcsXG4gICAgICAgICAgICBpbnRlcnZhbDogaW50ZXJ2YWxTdHJpbmcsXG4gICAgICAgICAgICBtaW5fZG9jX2NvdW50OiAwLFxuICAgICAgICAgICAgZXh0ZW5kZWRfYm91bmRzOiB7IG1pbjogc3RhcnQsIG1heDogZW5kIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIGFnZ3M6IHtcbiAgICAgICAgICAgIHN5c3RlbUNQVUF2ZXJhZ2U6IHsgYXZnOiB7IGZpZWxkOiBNRVRSSUNfU1lTVEVNX0NQVV9QRVJDRU5UIH0gfSxcbiAgICAgICAgICAgIHN5c3RlbUNQVU1heDogeyBtYXg6IHsgZmllbGQ6IE1FVFJJQ19TWVNURU1fQ1BVX1BFUkNFTlQgfSB9LFxuICAgICAgICAgICAgcHJvY2Vzc0NQVUF2ZXJhZ2U6IHsgYXZnOiB7IGZpZWxkOiBNRVRSSUNfUFJPQ0VTU19DUFVfUEVSQ0VOVCB9IH0sXG4gICAgICAgICAgICBwcm9jZXNzQ1BVTWF4OiB7IG1heDogeyBmaWVsZDogTUVUUklDX1BST0NFU1NfQ1BVX1BFUkNFTlQgfSB9XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBzeXN0ZW1DUFVBdmVyYWdlOiB7IGF2ZzogeyBmaWVsZDogTUVUUklDX1NZU1RFTV9DUFVfUEVSQ0VOVCB9IH0sXG4gICAgICAgIHN5c3RlbUNQVU1heDogeyBtYXg6IHsgZmllbGQ6IE1FVFJJQ19TWVNURU1fQ1BVX1BFUkNFTlQgfSB9LFxuICAgICAgICBwcm9jZXNzQ1BVQXZlcmFnZTogeyBhdmc6IHsgZmllbGQ6IE1FVFJJQ19QUk9DRVNTX0NQVV9QRVJDRU5UIH0gfSxcbiAgICAgICAgcHJvY2Vzc0NQVU1heDogeyBtYXg6IHsgZmllbGQ6IE1FVFJJQ19QUk9DRVNTX0NQVV9QRVJDRU5UIH0gfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICByZXR1cm4gY2xpZW50PHZvaWQsIEFnZ3M+KCdzZWFyY2gnLCBwYXJhbXMpO1xufVxuIl19