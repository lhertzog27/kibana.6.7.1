"use strict";
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const lodash_1 = require("lodash");
const moment_1 = tslib_1.__importDefault(require("moment"));
const constants_1 = require("../constants");
const get_bucket_size_in_seconds_1 = require("./get_bucket_size_in_seconds");
// TODO: Break these function into seperate files and expand beyond just documnet count
// In the code below it looks like overkill to split these three functions out
// but in reality the create metrics functions will be different per node type.
const findLastFullBucket = (bucket, bucketSize, options) => {
    const { buckets } = bucket.timeseries;
    const to = moment_1.default.utc(options.timerange.to);
    return buckets.reduce((current, item) => {
        const itemKey = lodash_1.isNumber(item.key) ? item.key : parseInt(item.key, 10);
        const date = moment_1.default.utc(itemKey + bucketSize * 1000);
        if (!date.isAfter(to) && item.doc_count > 0) {
            return item;
        }
        return current;
    }, lodash_1.last(buckets));
};
const getMetricValueFromBucket = (type) => (bucket) => {
    const metric = bucket[type];
    return (metric && (metric.normalized_value || metric.value)) || 0;
};
function calculateMax(bucket, type) {
    const { buckets } = bucket.timeseries;
    return lodash_1.max(buckets.map(getMetricValueFromBucket(type))) || 0;
}
function calculateAvg(bucket, type) {
    const { buckets } = bucket.timeseries;
    return lodash_1.sum(buckets.map(getMetricValueFromBucket(type))) / buckets.length || 0;
}
function createNodeMetrics(options, node, bucket) {
    const { timerange, metric } = options;
    const bucketSize = get_bucket_size_in_seconds_1.getBucketSizeInSeconds(timerange.interval);
    const lastBucket = findLastFullBucket(bucket, bucketSize, options);
    if (!lastBucket) {
        throw new Error('Date histogram returned an empty set of buckets.');
    }
    return {
        name: metric.type,
        value: getMetricValueFromBucket(metric.type)(lastBucket),
        max: calculateMax(bucket, metric.type),
        avg: calculateAvg(bucket, metric.type),
    };
}
function createNodeItem(options, node, bucket) {
    const nodeDoc = lodash_1.get(node, ['nodeDetails', 'hits', 'hits', 0]);
    return {
        metric: createNodeMetrics(options, node, bucket),
        path: [{ value: node.key, label: lodash_1.get(nodeDoc, `_source.${constants_1.NAME_FIELDS[options.nodeType]}`) }],
    };
}
exports.createNodeItem = createNodeItem;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2hvbWUvYW50aG9ueS9naXRfd29ya3NwYWNlcy9raWJhbmEveC1wYWNrL3BsdWdpbnMvaW5mcmEvc2VydmVyL2xpYi9hZGFwdGVycy9ub2Rlcy9saWIvY3JlYXRlX25vZGVfaXRlbS50cyIsInNvdXJjZXMiOlsiL2hvbWUvYW50aG9ueS9naXRfd29ya3NwYWNlcy9raWJhbmEveC1wYWNrL3BsdWdpbnMvaW5mcmEvc2VydmVyL2xpYi9hZGFwdGVycy9ub2Rlcy9saWIvY3JlYXRlX25vZGVfaXRlbS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7R0FJRzs7O0FBRUgsbUNBQXVEO0FBQ3ZELDREQUE0QjtBQUk1Qiw0Q0FBMkM7QUFDM0MsNkVBQXNFO0FBRXRFLHVGQUF1RjtBQUN2Riw4RUFBOEU7QUFDOUUsK0VBQStFO0FBRS9FLE1BQU0sa0JBQWtCLEdBQUcsQ0FDekIsTUFBbUIsRUFDbkIsVUFBa0IsRUFDbEIsT0FBZ0MsRUFDUCxFQUFFO0lBQzNCLE1BQU0sRUFBRSxPQUFPLEVBQUUsR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDO0lBQ3RDLE1BQU0sRUFBRSxHQUFHLGdCQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDNUMsT0FBTyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxFQUFFO1FBQ3RDLE1BQU0sT0FBTyxHQUFHLGlCQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUN2RSxNQUFNLElBQUksR0FBRyxnQkFBTSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEdBQUcsVUFBVSxHQUFHLElBQUksQ0FBQyxDQUFDO1FBQ3JELElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxJQUFJLElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxFQUFFO1lBQzNDLE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFDRCxPQUFPLE9BQU8sQ0FBQztJQUNqQixDQUFDLEVBQUUsYUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7QUFDcEIsQ0FBQyxDQUFDO0FBRUYsTUFBTSx3QkFBd0IsR0FBRyxDQUFDLElBQXFCLEVBQUUsRUFBRSxDQUFDLENBQUMsTUFBbUIsRUFBRSxFQUFFO0lBQ2xGLE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM1QixPQUFPLENBQUMsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLGdCQUFnQixJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNwRSxDQUFDLENBQUM7QUFFRixTQUFTLFlBQVksQ0FBQyxNQUFtQixFQUFFLElBQXFCO0lBQzlELE1BQU0sRUFBRSxPQUFPLEVBQUUsR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDO0lBQ3RDLE9BQU8sWUFBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsd0JBQXdCLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUMvRCxDQUFDO0FBRUQsU0FBUyxZQUFZLENBQUMsTUFBbUIsRUFBRSxJQUFxQjtJQUM5RCxNQUFNLEVBQUUsT0FBTyxFQUFFLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQztJQUN0QyxPQUFPLFlBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLHdCQUF3QixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsTUFBTSxJQUFJLENBQUMsQ0FBQztBQUNoRixDQUFDO0FBRUQsU0FBUyxpQkFBaUIsQ0FDeEIsT0FBZ0MsRUFDaEMsSUFBaUIsRUFDakIsTUFBbUI7SUFFbkIsTUFBTSxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsR0FBRyxPQUFPLENBQUM7SUFDdEMsTUFBTSxVQUFVLEdBQUcsbURBQXNCLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzlELE1BQU0sVUFBVSxHQUFHLGtCQUFrQixDQUFDLE1BQU0sRUFBRSxVQUFVLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDbkUsSUFBSSxDQUFDLFVBQVUsRUFBRTtRQUNmLE1BQU0sSUFBSSxLQUFLLENBQUMsa0RBQWtELENBQUMsQ0FBQztLQUNyRTtJQUNELE9BQU87UUFDTCxJQUFJLEVBQUUsTUFBTSxDQUFDLElBQUk7UUFDakIsS0FBSyxFQUFFLHdCQUF3QixDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxVQUFVLENBQUM7UUFDeEQsR0FBRyxFQUFFLFlBQVksQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQztRQUN0QyxHQUFHLEVBQUUsWUFBWSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDO0tBQ3ZDLENBQUM7QUFDSixDQUFDO0FBRUQsU0FBZ0IsY0FBYyxDQUM1QixPQUFnQyxFQUNoQyxJQUFpQixFQUNqQixNQUFtQjtJQUVuQixNQUFNLE9BQU8sR0FBRyxZQUFHLENBQUMsSUFBSSxFQUFFLENBQUMsYUFBYSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM5RCxPQUFPO1FBQ0wsTUFBTSxFQUFFLGlCQUFpQixDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDO1FBQ2hELElBQUksRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLFlBQUcsQ0FBQyxPQUFPLEVBQUUsV0FBVyx1QkFBVyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztLQUNoRixDQUFDO0FBQ2pCLENBQUM7QUFWRCx3Q0FVQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgRWxhc3RpY3NlYXJjaCBCLlYuIGFuZC9vciBsaWNlbnNlZCB0byBFbGFzdGljc2VhcmNoIEIuVi4gdW5kZXIgb25lXG4gKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gTGljZW5zZWQgdW5kZXIgdGhlIEVsYXN0aWMgTGljZW5zZTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgRWxhc3RpYyBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IGdldCwgaXNOdW1iZXIsIGxhc3QsIG1heCwgc3VtIH0gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcblxuaW1wb3J0IHsgSW5mcmFNZXRyaWNUeXBlLCBJbmZyYU5vZGUsIEluZnJhTm9kZU1ldHJpYyB9IGZyb20gJy4uLy4uLy4uLy4uL2dyYXBocWwvdHlwZXMnO1xuaW1wb3J0IHsgSW5mcmFCdWNrZXQsIEluZnJhTm9kZVJlcXVlc3RPcHRpb25zIH0gZnJvbSAnLi4vYWRhcHRlcl90eXBlcyc7XG5pbXBvcnQgeyBOQU1FX0ZJRUxEUyB9IGZyb20gJy4uL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBnZXRCdWNrZXRTaXplSW5TZWNvbmRzIH0gZnJvbSAnLi9nZXRfYnVja2V0X3NpemVfaW5fc2Vjb25kcyc7XG5cbi8vIFRPRE86IEJyZWFrIHRoZXNlIGZ1bmN0aW9uIGludG8gc2VwZXJhdGUgZmlsZXMgYW5kIGV4cGFuZCBiZXlvbmQganVzdCBkb2N1bW5ldCBjb3VudFxuLy8gSW4gdGhlIGNvZGUgYmVsb3cgaXQgbG9va3MgbGlrZSBvdmVya2lsbCB0byBzcGxpdCB0aGVzZSB0aHJlZSBmdW5jdGlvbnMgb3V0XG4vLyBidXQgaW4gcmVhbGl0eSB0aGUgY3JlYXRlIG1ldHJpY3MgZnVuY3Rpb25zIHdpbGwgYmUgZGlmZmVyZW50IHBlciBub2RlIHR5cGUuXG5cbmNvbnN0IGZpbmRMYXN0RnVsbEJ1Y2tldCA9IChcbiAgYnVja2V0OiBJbmZyYUJ1Y2tldCxcbiAgYnVja2V0U2l6ZTogbnVtYmVyLFxuICBvcHRpb25zOiBJbmZyYU5vZGVSZXF1ZXN0T3B0aW9uc1xuKTogSW5mcmFCdWNrZXQgfCB1bmRlZmluZWQgPT4ge1xuICBjb25zdCB7IGJ1Y2tldHMgfSA9IGJ1Y2tldC50aW1lc2VyaWVzO1xuICBjb25zdCB0byA9IG1vbWVudC51dGMob3B0aW9ucy50aW1lcmFuZ2UudG8pO1xuICByZXR1cm4gYnVja2V0cy5yZWR1Y2UoKGN1cnJlbnQsIGl0ZW0pID0+IHtcbiAgICBjb25zdCBpdGVtS2V5ID0gaXNOdW1iZXIoaXRlbS5rZXkpID8gaXRlbS5rZXkgOiBwYXJzZUludChpdGVtLmtleSwgMTApO1xuICAgIGNvbnN0IGRhdGUgPSBtb21lbnQudXRjKGl0ZW1LZXkgKyBidWNrZXRTaXplICogMTAwMCk7XG4gICAgaWYgKCFkYXRlLmlzQWZ0ZXIodG8pICYmIGl0ZW0uZG9jX2NvdW50ID4gMCkge1xuICAgICAgcmV0dXJuIGl0ZW07XG4gICAgfVxuICAgIHJldHVybiBjdXJyZW50O1xuICB9LCBsYXN0KGJ1Y2tldHMpKTtcbn07XG5cbmNvbnN0IGdldE1ldHJpY1ZhbHVlRnJvbUJ1Y2tldCA9ICh0eXBlOiBJbmZyYU1ldHJpY1R5cGUpID0+IChidWNrZXQ6IEluZnJhQnVja2V0KSA9PiB7XG4gIGNvbnN0IG1ldHJpYyA9IGJ1Y2tldFt0eXBlXTtcbiAgcmV0dXJuIChtZXRyaWMgJiYgKG1ldHJpYy5ub3JtYWxpemVkX3ZhbHVlIHx8IG1ldHJpYy52YWx1ZSkpIHx8IDA7XG59O1xuXG5mdW5jdGlvbiBjYWxjdWxhdGVNYXgoYnVja2V0OiBJbmZyYUJ1Y2tldCwgdHlwZTogSW5mcmFNZXRyaWNUeXBlKSB7XG4gIGNvbnN0IHsgYnVja2V0cyB9ID0gYnVja2V0LnRpbWVzZXJpZXM7XG4gIHJldHVybiBtYXgoYnVja2V0cy5tYXAoZ2V0TWV0cmljVmFsdWVGcm9tQnVja2V0KHR5cGUpKSkgfHwgMDtcbn1cblxuZnVuY3Rpb24gY2FsY3VsYXRlQXZnKGJ1Y2tldDogSW5mcmFCdWNrZXQsIHR5cGU6IEluZnJhTWV0cmljVHlwZSkge1xuICBjb25zdCB7IGJ1Y2tldHMgfSA9IGJ1Y2tldC50aW1lc2VyaWVzO1xuICByZXR1cm4gc3VtKGJ1Y2tldHMubWFwKGdldE1ldHJpY1ZhbHVlRnJvbUJ1Y2tldCh0eXBlKSkpIC8gYnVja2V0cy5sZW5ndGggfHwgMDtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTm9kZU1ldHJpY3MoXG4gIG9wdGlvbnM6IEluZnJhTm9kZVJlcXVlc3RPcHRpb25zLFxuICBub2RlOiBJbmZyYUJ1Y2tldCxcbiAgYnVja2V0OiBJbmZyYUJ1Y2tldFxuKTogSW5mcmFOb2RlTWV0cmljIHtcbiAgY29uc3QgeyB0aW1lcmFuZ2UsIG1ldHJpYyB9ID0gb3B0aW9ucztcbiAgY29uc3QgYnVja2V0U2l6ZSA9IGdldEJ1Y2tldFNpemVJblNlY29uZHModGltZXJhbmdlLmludGVydmFsKTtcbiAgY29uc3QgbGFzdEJ1Y2tldCA9IGZpbmRMYXN0RnVsbEJ1Y2tldChidWNrZXQsIGJ1Y2tldFNpemUsIG9wdGlvbnMpO1xuICBpZiAoIWxhc3RCdWNrZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0RhdGUgaGlzdG9ncmFtIHJldHVybmVkIGFuIGVtcHR5IHNldCBvZiBidWNrZXRzLicpO1xuICB9XG4gIHJldHVybiB7XG4gICAgbmFtZTogbWV0cmljLnR5cGUsXG4gICAgdmFsdWU6IGdldE1ldHJpY1ZhbHVlRnJvbUJ1Y2tldChtZXRyaWMudHlwZSkobGFzdEJ1Y2tldCksXG4gICAgbWF4OiBjYWxjdWxhdGVNYXgoYnVja2V0LCBtZXRyaWMudHlwZSksXG4gICAgYXZnOiBjYWxjdWxhdGVBdmcoYnVja2V0LCBtZXRyaWMudHlwZSksXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVOb2RlSXRlbShcbiAgb3B0aW9uczogSW5mcmFOb2RlUmVxdWVzdE9wdGlvbnMsXG4gIG5vZGU6IEluZnJhQnVja2V0LFxuICBidWNrZXQ6IEluZnJhQnVja2V0XG4pOiBJbmZyYU5vZGUge1xuICBjb25zdCBub2RlRG9jID0gZ2V0KG5vZGUsIFsnbm9kZURldGFpbHMnLCAnaGl0cycsICdoaXRzJywgMF0pO1xuICByZXR1cm4ge1xuICAgIG1ldHJpYzogY3JlYXRlTm9kZU1ldHJpY3Mob3B0aW9ucywgbm9kZSwgYnVja2V0KSxcbiAgICBwYXRoOiBbeyB2YWx1ZTogbm9kZS5rZXksIGxhYmVsOiBnZXQobm9kZURvYywgYF9zb3VyY2UuJHtOQU1FX0ZJRUxEU1tvcHRpb25zLm5vZGVUeXBlXX1gKSB9XSxcbiAgfSBhcyBJbmZyYU5vZGU7XG59XG4iXX0=