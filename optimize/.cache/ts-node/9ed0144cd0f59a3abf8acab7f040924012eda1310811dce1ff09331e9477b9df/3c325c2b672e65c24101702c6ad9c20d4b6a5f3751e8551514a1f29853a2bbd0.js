"use strict";
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const kibana_configuration_adapter_1 = require("../adapters/configuration/kibana_configuration_adapter");
const framework_fields_adapter_1 = require("../adapters/fields/framework_fields_adapter");
const kibana_framework_adapter_1 = require("../adapters/framework/kibana_framework_adapter");
const kibana_log_entries_adapter_1 = require("../adapters/log_entries/kibana_log_entries_adapter");
const elasticsearch_metadata_adapter_1 = require("../adapters/metadata/elasticsearch_metadata_adapter");
const kibana_metrics_adapter_1 = require("../adapters/metrics/kibana_metrics_adapter");
const elasticsearch_nodes_adapter_1 = require("../adapters/nodes/elasticsearch_nodes_adapter");
const source_status_1 = require("../adapters/source_status");
const fields_domain_1 = require("../domains/fields_domain");
const log_entries_domain_1 = require("../domains/log_entries_domain");
const metadata_domain_1 = require("../domains/metadata_domain");
const metrics_domain_1 = require("../domains/metrics_domain");
const nodes_domain_1 = require("../domains/nodes_domain");
const source_status_2 = require("../source_status");
const sources_1 = require("../sources");
function compose(server) {
    const configuration = new kibana_configuration_adapter_1.InfraKibanaConfigurationAdapter(server);
    const framework = new kibana_framework_adapter_1.InfraKibanaBackendFrameworkAdapter(server);
    const sources = new sources_1.InfraSources({
        configuration,
        savedObjects: framework.getSavedObjectsService(),
    });
    const sourceStatus = new source_status_2.InfraSourceStatus(new source_status_1.InfraElasticsearchSourceStatusAdapter(framework), {
        sources,
    });
    const domainLibs = {
        metadata: new metadata_domain_1.InfraMetadataDomain(new elasticsearch_metadata_adapter_1.ElasticsearchMetadataAdapter(framework), {
            sources,
        }),
        fields: new fields_domain_1.InfraFieldsDomain(new framework_fields_adapter_1.FrameworkFieldsAdapter(framework), {
            sources,
        }),
        logEntries: new log_entries_domain_1.InfraLogEntriesDomain(new kibana_log_entries_adapter_1.InfraKibanaLogEntriesAdapter(framework), {
            sources,
        }),
        nodes: new nodes_domain_1.InfraNodesDomain(new elasticsearch_nodes_adapter_1.ElasticsearchNodesAdapter(framework)),
        metrics: new metrics_domain_1.InfraMetricsDomain(new kibana_metrics_adapter_1.KibanaMetricsAdapter(framework)),
    };
    const libs = {
        configuration,
        framework,
        sources,
        sourceStatus,
        ...domainLibs,
    };
    return libs;
}
exports.compose = compose;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2hvbWUvYW50aG9ueS9naXRfd29ya3NwYWNlcy9raWJhbmEveC1wYWNrL3BsdWdpbnMvaW5mcmEvc2VydmVyL2xpYi9jb21wb3NlL2tpYmFuYS50cyIsInNvdXJjZXMiOlsiL2hvbWUvYW50aG9ueS9naXRfd29ya3NwYWNlcy9raWJhbmEveC1wYWNrL3BsdWdpbnMvaW5mcmEvc2VydmVyL2xpYi9jb21wb3NlL2tpYmFuYS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7R0FJRzs7QUFJSCx5R0FBeUc7QUFDekcsMEZBQXFGO0FBQ3JGLDZGQUFvRztBQUNwRyxtR0FBa0c7QUFDbEcsd0dBQW1HO0FBQ25HLHVGQUFrRjtBQUNsRiwrRkFBMEY7QUFDMUYsNkRBQWtGO0FBQ2xGLDREQUE2RDtBQUM3RCxzRUFBc0U7QUFDdEUsZ0VBQWlFO0FBQ2pFLDhEQUErRDtBQUMvRCwwREFBMkQ7QUFFM0Qsb0RBQXFEO0FBQ3JELHdDQUEwQztBQUUxQyxTQUFnQixPQUFPLENBQUMsTUFBYztJQUNwQyxNQUFNLGFBQWEsR0FBRyxJQUFJLDhEQUErQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2xFLE1BQU0sU0FBUyxHQUFHLElBQUksNkRBQWtDLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDakUsTUFBTSxPQUFPLEdBQUcsSUFBSSxzQkFBWSxDQUFDO1FBQy9CLGFBQWE7UUFDYixZQUFZLEVBQUUsU0FBUyxDQUFDLHNCQUFzQixFQUFFO0tBQ2pELENBQUMsQ0FBQztJQUNILE1BQU0sWUFBWSxHQUFHLElBQUksaUNBQWlCLENBQUMsSUFBSSxxREFBcUMsQ0FBQyxTQUFTLENBQUMsRUFBRTtRQUMvRixPQUFPO0tBQ1IsQ0FBQyxDQUFDO0lBRUgsTUFBTSxVQUFVLEdBQW9CO1FBQ2xDLFFBQVEsRUFBRSxJQUFJLHFDQUFtQixDQUFDLElBQUksNkRBQTRCLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFDN0UsT0FBTztTQUNSLENBQUM7UUFDRixNQUFNLEVBQUUsSUFBSSxpQ0FBaUIsQ0FBQyxJQUFJLGlEQUFzQixDQUFDLFNBQVMsQ0FBQyxFQUFFO1lBQ25FLE9BQU87U0FDUixDQUFDO1FBQ0YsVUFBVSxFQUFFLElBQUksMENBQXFCLENBQUMsSUFBSSx5REFBNEIsQ0FBQyxTQUFTLENBQUMsRUFBRTtZQUNqRixPQUFPO1NBQ1IsQ0FBQztRQUNGLEtBQUssRUFBRSxJQUFJLCtCQUFnQixDQUFDLElBQUksdURBQXlCLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDckUsT0FBTyxFQUFFLElBQUksbUNBQWtCLENBQUMsSUFBSSw2Q0FBb0IsQ0FBQyxTQUFTLENBQUMsQ0FBQztLQUNyRSxDQUFDO0lBRUYsTUFBTSxJQUFJLEdBQXFCO1FBQzdCLGFBQWE7UUFDYixTQUFTO1FBQ1QsT0FBTztRQUNQLFlBQVk7UUFDWixHQUFHLFVBQVU7S0FDZCxDQUFDO0lBRUYsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDO0FBbENELDBCQWtDQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgRWxhc3RpY3NlYXJjaCBCLlYuIGFuZC9vciBsaWNlbnNlZCB0byBFbGFzdGljc2VhcmNoIEIuVi4gdW5kZXIgb25lXG4gKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gTGljZW5zZWQgdW5kZXIgdGhlIEVsYXN0aWMgTGljZW5zZTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgRWxhc3RpYyBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IFNlcnZlciB9IGZyb20gJ2hhcGknO1xuXG5pbXBvcnQgeyBJbmZyYUtpYmFuYUNvbmZpZ3VyYXRpb25BZGFwdGVyIH0gZnJvbSAnLi4vYWRhcHRlcnMvY29uZmlndXJhdGlvbi9raWJhbmFfY29uZmlndXJhdGlvbl9hZGFwdGVyJztcbmltcG9ydCB7IEZyYW1ld29ya0ZpZWxkc0FkYXB0ZXIgfSBmcm9tICcuLi9hZGFwdGVycy9maWVsZHMvZnJhbWV3b3JrX2ZpZWxkc19hZGFwdGVyJztcbmltcG9ydCB7IEluZnJhS2liYW5hQmFja2VuZEZyYW1ld29ya0FkYXB0ZXIgfSBmcm9tICcuLi9hZGFwdGVycy9mcmFtZXdvcmsva2liYW5hX2ZyYW1ld29ya19hZGFwdGVyJztcbmltcG9ydCB7IEluZnJhS2liYW5hTG9nRW50cmllc0FkYXB0ZXIgfSBmcm9tICcuLi9hZGFwdGVycy9sb2dfZW50cmllcy9raWJhbmFfbG9nX2VudHJpZXNfYWRhcHRlcic7XG5pbXBvcnQgeyBFbGFzdGljc2VhcmNoTWV0YWRhdGFBZGFwdGVyIH0gZnJvbSAnLi4vYWRhcHRlcnMvbWV0YWRhdGEvZWxhc3RpY3NlYXJjaF9tZXRhZGF0YV9hZGFwdGVyJztcbmltcG9ydCB7IEtpYmFuYU1ldHJpY3NBZGFwdGVyIH0gZnJvbSAnLi4vYWRhcHRlcnMvbWV0cmljcy9raWJhbmFfbWV0cmljc19hZGFwdGVyJztcbmltcG9ydCB7IEVsYXN0aWNzZWFyY2hOb2Rlc0FkYXB0ZXIgfSBmcm9tICcuLi9hZGFwdGVycy9ub2Rlcy9lbGFzdGljc2VhcmNoX25vZGVzX2FkYXB0ZXInO1xuaW1wb3J0IHsgSW5mcmFFbGFzdGljc2VhcmNoU291cmNlU3RhdHVzQWRhcHRlciB9IGZyb20gJy4uL2FkYXB0ZXJzL3NvdXJjZV9zdGF0dXMnO1xuaW1wb3J0IHsgSW5mcmFGaWVsZHNEb21haW4gfSBmcm9tICcuLi9kb21haW5zL2ZpZWxkc19kb21haW4nO1xuaW1wb3J0IHsgSW5mcmFMb2dFbnRyaWVzRG9tYWluIH0gZnJvbSAnLi4vZG9tYWlucy9sb2dfZW50cmllc19kb21haW4nO1xuaW1wb3J0IHsgSW5mcmFNZXRhZGF0YURvbWFpbiB9IGZyb20gJy4uL2RvbWFpbnMvbWV0YWRhdGFfZG9tYWluJztcbmltcG9ydCB7IEluZnJhTWV0cmljc0RvbWFpbiB9IGZyb20gJy4uL2RvbWFpbnMvbWV0cmljc19kb21haW4nO1xuaW1wb3J0IHsgSW5mcmFOb2Rlc0RvbWFpbiB9IGZyb20gJy4uL2RvbWFpbnMvbm9kZXNfZG9tYWluJztcbmltcG9ydCB7IEluZnJhQmFja2VuZExpYnMsIEluZnJhRG9tYWluTGlicyB9IGZyb20gJy4uL2luZnJhX3R5cGVzJztcbmltcG9ydCB7IEluZnJhU291cmNlU3RhdHVzIH0gZnJvbSAnLi4vc291cmNlX3N0YXR1cyc7XG5pbXBvcnQgeyBJbmZyYVNvdXJjZXMgfSBmcm9tICcuLi9zb3VyY2VzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGNvbXBvc2Uoc2VydmVyOiBTZXJ2ZXIpOiBJbmZyYUJhY2tlbmRMaWJzIHtcbiAgY29uc3QgY29uZmlndXJhdGlvbiA9IG5ldyBJbmZyYUtpYmFuYUNvbmZpZ3VyYXRpb25BZGFwdGVyKHNlcnZlcik7XG4gIGNvbnN0IGZyYW1ld29yayA9IG5ldyBJbmZyYUtpYmFuYUJhY2tlbmRGcmFtZXdvcmtBZGFwdGVyKHNlcnZlcik7XG4gIGNvbnN0IHNvdXJjZXMgPSBuZXcgSW5mcmFTb3VyY2VzKHtcbiAgICBjb25maWd1cmF0aW9uLFxuICAgIHNhdmVkT2JqZWN0czogZnJhbWV3b3JrLmdldFNhdmVkT2JqZWN0c1NlcnZpY2UoKSxcbiAgfSk7XG4gIGNvbnN0IHNvdXJjZVN0YXR1cyA9IG5ldyBJbmZyYVNvdXJjZVN0YXR1cyhuZXcgSW5mcmFFbGFzdGljc2VhcmNoU291cmNlU3RhdHVzQWRhcHRlcihmcmFtZXdvcmspLCB7XG4gICAgc291cmNlcyxcbiAgfSk7XG5cbiAgY29uc3QgZG9tYWluTGliczogSW5mcmFEb21haW5MaWJzID0ge1xuICAgIG1ldGFkYXRhOiBuZXcgSW5mcmFNZXRhZGF0YURvbWFpbihuZXcgRWxhc3RpY3NlYXJjaE1ldGFkYXRhQWRhcHRlcihmcmFtZXdvcmspLCB7XG4gICAgICBzb3VyY2VzLFxuICAgIH0pLFxuICAgIGZpZWxkczogbmV3IEluZnJhRmllbGRzRG9tYWluKG5ldyBGcmFtZXdvcmtGaWVsZHNBZGFwdGVyKGZyYW1ld29yayksIHtcbiAgICAgIHNvdXJjZXMsXG4gICAgfSksXG4gICAgbG9nRW50cmllczogbmV3IEluZnJhTG9nRW50cmllc0RvbWFpbihuZXcgSW5mcmFLaWJhbmFMb2dFbnRyaWVzQWRhcHRlcihmcmFtZXdvcmspLCB7XG4gICAgICBzb3VyY2VzLFxuICAgIH0pLFxuICAgIG5vZGVzOiBuZXcgSW5mcmFOb2Rlc0RvbWFpbihuZXcgRWxhc3RpY3NlYXJjaE5vZGVzQWRhcHRlcihmcmFtZXdvcmspKSxcbiAgICBtZXRyaWNzOiBuZXcgSW5mcmFNZXRyaWNzRG9tYWluKG5ldyBLaWJhbmFNZXRyaWNzQWRhcHRlcihmcmFtZXdvcmspKSxcbiAgfTtcblxuICBjb25zdCBsaWJzOiBJbmZyYUJhY2tlbmRMaWJzID0ge1xuICAgIGNvbmZpZ3VyYXRpb24sXG4gICAgZnJhbWV3b3JrLFxuICAgIHNvdXJjZXMsXG4gICAgc291cmNlU3RhdHVzLFxuICAgIC4uLmRvbWFpbkxpYnMsXG4gIH07XG5cbiAgcmV0dXJuIGxpYnM7XG59XG4iXX0=