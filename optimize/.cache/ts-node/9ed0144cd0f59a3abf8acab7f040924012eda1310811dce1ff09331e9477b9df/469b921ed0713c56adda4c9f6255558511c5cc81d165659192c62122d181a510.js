"use strict";
/*
 * Licensed to Elasticsearch B.V. under one or more contributor
 * license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch B.V. licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const path_1 = require("path");
const process_1 = tslib_1.__importDefault(require("process"));
const package_json_1 = require("../../../utils/package_json");
class Env {
    /**
     * @internal
     */
    constructor(homeDir, options) {
        this.homeDir = homeDir;
        this.configDir = path_1.resolve(this.homeDir, 'config');
        this.binDir = path_1.resolve(this.homeDir, 'bin');
        this.logDir = path_1.resolve(this.homeDir, 'log');
        this.staticFilesDir = path_1.resolve(this.homeDir, 'ui');
        this.pluginSearchPaths = [
            path_1.resolve(this.homeDir, 'src', 'plugins'),
            path_1.resolve(this.homeDir, 'plugins'),
            path_1.resolve(this.homeDir, '..', 'kibana-extra'),
        ];
        this.cliArgs = Object.freeze(options.cliArgs);
        this.configs = Object.freeze(options.configs);
        this.isDevClusterMaster = options.isDevClusterMaster;
        const isDevMode = this.cliArgs.dev || this.cliArgs.envName === 'development';
        this.mode = Object.freeze({
            dev: isDevMode,
            name: isDevMode ? 'development' : 'production',
            prod: !isDevMode,
        });
        const isKibanaDistributable = package_json_1.pkg.build && package_json_1.pkg.build.distributable === true;
        this.packageInfo = Object.freeze({
            branch: package_json_1.pkg.branch,
            buildNum: isKibanaDistributable ? package_json_1.pkg.build.number : Number.MAX_SAFE_INTEGER,
            buildSha: isKibanaDistributable ? package_json_1.pkg.build.sha : 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX',
            version: package_json_1.pkg.version,
        });
    }
    /**
     * @internal
     */
    static createDefault(options) {
        return new Env(process_1.default.cwd(), options);
    }
}
exports.Env = Env;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2hvbWUvYW50aG9ueS9naXRfd29ya3NwYWNlcy9raWJhbmEvc3JjL2NvcmUvc2VydmVyL2NvbmZpZy9lbnYudHMiLCJzb3VyY2VzIjpbIi9ob21lL2FudGhvbnkvZ2l0X3dvcmtzcGFjZXMva2liYW5hL3NyYy9jb3JlL3NlcnZlci9jb25maWcvZW52LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FpQkc7OztBQUVILCtCQUErQjtBQUMvQiw4REFBOEI7QUFFOUIsOERBQWtEO0FBa0NsRCxNQUFhLEdBQUc7SUErQ2Q7O09BRUc7SUFDSCxZQUFxQixPQUFlLEVBQUUsT0FBbUI7UUFBcEMsWUFBTyxHQUFQLE9BQU8sQ0FBUTtRQUNsQyxJQUFJLENBQUMsU0FBUyxHQUFHLGNBQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQ2pELElBQUksQ0FBQyxNQUFNLEdBQUcsY0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDM0MsSUFBSSxDQUFDLE1BQU0sR0FBRyxjQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQztRQUMzQyxJQUFJLENBQUMsY0FBYyxHQUFHLGNBQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBRWxELElBQUksQ0FBQyxpQkFBaUIsR0FBRztZQUN2QixjQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxLQUFLLEVBQUUsU0FBUyxDQUFDO1lBQ3ZDLGNBQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQztZQUNoQyxjQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsY0FBYyxDQUFDO1NBQzVDLENBQUM7UUFFRixJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzlDLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDOUMsSUFBSSxDQUFDLGtCQUFrQixHQUFHLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQztRQUVyRCxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sS0FBSyxhQUFhLENBQUM7UUFDN0UsSUFBSSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFrQjtZQUN6QyxHQUFHLEVBQUUsU0FBUztZQUNkLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsWUFBWTtZQUM5QyxJQUFJLEVBQUUsQ0FBQyxTQUFTO1NBQ2pCLENBQUMsQ0FBQztRQUVILE1BQU0scUJBQXFCLEdBQUcsa0JBQUcsQ0FBQyxLQUFLLElBQUksa0JBQUcsQ0FBQyxLQUFLLENBQUMsYUFBYSxLQUFLLElBQUksQ0FBQztRQUM1RSxJQUFJLENBQUMsV0FBVyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUM7WUFDL0IsTUFBTSxFQUFFLGtCQUFHLENBQUMsTUFBTTtZQUNsQixRQUFRLEVBQUUscUJBQXFCLENBQUMsQ0FBQyxDQUFDLGtCQUFHLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLGdCQUFnQjtZQUM1RSxRQUFRLEVBQUUscUJBQXFCLENBQUMsQ0FBQyxDQUFDLGtCQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsMENBQTBDO1lBQzVGLE9BQU8sRUFBRSxrQkFBRyxDQUFDLE9BQU87U0FDckIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQS9FRDs7T0FFRztJQUNJLE1BQU0sQ0FBQyxhQUFhLENBQUMsT0FBbUI7UUFDN0MsT0FBTyxJQUFJLEdBQUcsQ0FBQyxpQkFBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3pDLENBQUM7Q0EyRUY7QUFqRkQsa0JBaUZDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIExpY2Vuc2VkIHRvIEVsYXN0aWNzZWFyY2ggQi5WLiB1bmRlciBvbmUgb3IgbW9yZSBjb250cmlidXRvclxuICogbGljZW5zZSBhZ3JlZW1lbnRzLiBTZWUgdGhlIE5PVElDRSBmaWxlIGRpc3RyaWJ1dGVkIHdpdGhcbiAqIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiByZWdhcmRpbmcgY29weXJpZ2h0XG4gKiBvd25lcnNoaXAuIEVsYXN0aWNzZWFyY2ggQi5WLiBsaWNlbnNlcyB0aGlzIGZpbGUgdG8geW91IHVuZGVyXG4gKiB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpOyB5b3UgbWF5XG4gKiBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IHJlc29sdmUgfSBmcm9tICdwYXRoJztcbmltcG9ydCBwcm9jZXNzIGZyb20gJ3Byb2Nlc3MnO1xuXG5pbXBvcnQgeyBwa2cgfSBmcm9tICcuLi8uLi8uLi91dGlscy9wYWNrYWdlX2pzb24nO1xuXG5leHBvcnQgaW50ZXJmYWNlIFBhY2thZ2VJbmZvIHtcbiAgdmVyc2lvbjogc3RyaW5nO1xuICBicmFuY2g6IHN0cmluZztcbiAgYnVpbGROdW06IG51bWJlcjtcbiAgYnVpbGRTaGE6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBFbnZpcm9ubWVudE1vZGUge1xuICBuYW1lOiAnZGV2ZWxvcG1lbnQnIHwgJ3Byb2R1Y3Rpb24nO1xuICBkZXY6IGJvb2xlYW47XG4gIHByb2Q6IGJvb2xlYW47XG59XG5cbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBpbnRlcmZhY2UgRW52T3B0aW9ucyB7XG4gIGNvbmZpZ3M6IHN0cmluZ1tdO1xuICBjbGlBcmdzOiBDbGlBcmdzO1xuICBpc0RldkNsdXN0ZXJNYXN0ZXI6IGJvb2xlYW47XG59XG5cbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ2xpQXJncyB7XG4gIGRldjogYm9vbGVhbjtcbiAgZW52TmFtZT86IHN0cmluZztcbiAgcXVpZXQ6IGJvb2xlYW47XG4gIHNpbGVudDogYm9vbGVhbjtcbiAgd2F0Y2g6IGJvb2xlYW47XG4gIGJhc2VQYXRoOiBib29sZWFuO1xuICBvcHRpbWl6ZTogYm9vbGVhbjtcbiAgb3BlbjogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGNsYXNzIEVudiB7XG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgY3JlYXRlRGVmYXVsdChvcHRpb25zOiBFbnZPcHRpb25zKTogRW52IHtcbiAgICByZXR1cm4gbmV3IEVudihwcm9jZXNzLmN3ZCgpLCBvcHRpb25zKTtcbiAgfVxuXG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgcHVibGljIHJlYWRvbmx5IGNvbmZpZ0Rpcjogc3RyaW5nO1xuICAvKiogQGludGVybmFsICovXG4gIHB1YmxpYyByZWFkb25seSBiaW5EaXI6IHN0cmluZztcbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBwdWJsaWMgcmVhZG9ubHkgbG9nRGlyOiBzdHJpbmc7XG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgcHVibGljIHJlYWRvbmx5IHN0YXRpY0ZpbGVzRGlyOiBzdHJpbmc7XG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgcHVibGljIHJlYWRvbmx5IHBsdWdpblNlYXJjaFBhdGhzOiBSZWFkb25seUFycmF5PHN0cmluZz47XG5cbiAgLyoqXG4gICAqIEluZm9ybWF0aW9uIGFib3V0IEtpYmFuYSBwYWNrYWdlICh2ZXJzaW9uLCBidWlsZCBudW1iZXIgZXRjLikuXG4gICAqL1xuICBwdWJsaWMgcmVhZG9ubHkgcGFja2FnZUluZm86IFJlYWRvbmx5PFBhY2thZ2VJbmZvPjtcblxuICAvKipcbiAgICogTW9kZSBLaWJhbmEgY3VycmVudGx5IHJ1biBpbiAoZGV2ZWxvcG1lbnQgb3IgcHJvZHVjdGlvbikuXG4gICAqL1xuICBwdWJsaWMgcmVhZG9ubHkgbW9kZTogUmVhZG9ubHk8RW52aXJvbm1lbnRNb2RlPjtcblxuICAvKipcbiAgICogQXJndW1lbnRzIHByb3ZpZGVkIHRocm91Z2ggY29tbWFuZCBsaW5lLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHB1YmxpYyByZWFkb25seSBjbGlBcmdzOiBSZWFkb25seTxDbGlBcmdzPjtcblxuICAvKipcbiAgICogUGF0aHMgdG8gdGhlIGNvbmZpZ3VyYXRpb24gZmlsZXMuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgcHVibGljIHJlYWRvbmx5IGNvbmZpZ3M6IFJlYWRvbmx5QXJyYXk8c3RyaW5nPjtcblxuICAvKipcbiAgICogSW5kaWNhdGVzIHRoYXQgdGhpcyBLaWJhbmEgaW5zdGFuY2UgaXMgcnVuIGFzIGRldmVsb3BtZW50IE5vZGUgQ2x1c3RlciBtYXN0ZXIuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgcHVibGljIHJlYWRvbmx5IGlzRGV2Q2x1c3Rlck1hc3RlcjogYm9vbGVhbjtcblxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICBjb25zdHJ1Y3RvcihyZWFkb25seSBob21lRGlyOiBzdHJpbmcsIG9wdGlvbnM6IEVudk9wdGlvbnMpIHtcbiAgICB0aGlzLmNvbmZpZ0RpciA9IHJlc29sdmUodGhpcy5ob21lRGlyLCAnY29uZmlnJyk7XG4gICAgdGhpcy5iaW5EaXIgPSByZXNvbHZlKHRoaXMuaG9tZURpciwgJ2JpbicpO1xuICAgIHRoaXMubG9nRGlyID0gcmVzb2x2ZSh0aGlzLmhvbWVEaXIsICdsb2cnKTtcbiAgICB0aGlzLnN0YXRpY0ZpbGVzRGlyID0gcmVzb2x2ZSh0aGlzLmhvbWVEaXIsICd1aScpO1xuXG4gICAgdGhpcy5wbHVnaW5TZWFyY2hQYXRocyA9IFtcbiAgICAgIHJlc29sdmUodGhpcy5ob21lRGlyLCAnc3JjJywgJ3BsdWdpbnMnKSxcbiAgICAgIHJlc29sdmUodGhpcy5ob21lRGlyLCAncGx1Z2lucycpLFxuICAgICAgcmVzb2x2ZSh0aGlzLmhvbWVEaXIsICcuLicsICdraWJhbmEtZXh0cmEnKSxcbiAgICBdO1xuXG4gICAgdGhpcy5jbGlBcmdzID0gT2JqZWN0LmZyZWV6ZShvcHRpb25zLmNsaUFyZ3MpO1xuICAgIHRoaXMuY29uZmlncyA9IE9iamVjdC5mcmVlemUob3B0aW9ucy5jb25maWdzKTtcbiAgICB0aGlzLmlzRGV2Q2x1c3Rlck1hc3RlciA9IG9wdGlvbnMuaXNEZXZDbHVzdGVyTWFzdGVyO1xuXG4gICAgY29uc3QgaXNEZXZNb2RlID0gdGhpcy5jbGlBcmdzLmRldiB8fCB0aGlzLmNsaUFyZ3MuZW52TmFtZSA9PT0gJ2RldmVsb3BtZW50JztcbiAgICB0aGlzLm1vZGUgPSBPYmplY3QuZnJlZXplPEVudmlyb25tZW50TW9kZT4oe1xuICAgICAgZGV2OiBpc0Rldk1vZGUsXG4gICAgICBuYW1lOiBpc0Rldk1vZGUgPyAnZGV2ZWxvcG1lbnQnIDogJ3Byb2R1Y3Rpb24nLFxuICAgICAgcHJvZDogIWlzRGV2TW9kZSxcbiAgICB9KTtcblxuICAgIGNvbnN0IGlzS2liYW5hRGlzdHJpYnV0YWJsZSA9IHBrZy5idWlsZCAmJiBwa2cuYnVpbGQuZGlzdHJpYnV0YWJsZSA9PT0gdHJ1ZTtcbiAgICB0aGlzLnBhY2thZ2VJbmZvID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgICBicmFuY2g6IHBrZy5icmFuY2gsXG4gICAgICBidWlsZE51bTogaXNLaWJhbmFEaXN0cmlidXRhYmxlID8gcGtnLmJ1aWxkLm51bWJlciA6IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSLFxuICAgICAgYnVpbGRTaGE6IGlzS2liYW5hRGlzdHJpYnV0YWJsZSA/IHBrZy5idWlsZC5zaGEgOiAnWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWCcsXG4gICAgICB2ZXJzaW9uOiBwa2cudmVyc2lvbixcbiAgICB9KTtcbiAgfVxufVxuIl19