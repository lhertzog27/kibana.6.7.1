"use strict";
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const runtimeTypes = tslib_1.__importStar(require("io-ts"));
const moment_1 = tslib_1.__importDefault(require("moment"));
exports.TimestampFromString = new runtimeTypes.Type('TimestampFromString', (input) => typeof input === 'number', (input, context) => runtimeTypes.string.validate(input, context).chain(stringInput => {
    const momentValue = moment_1.default(stringInput);
    return momentValue.isValid()
        ? runtimeTypes.success(momentValue.valueOf())
        : runtimeTypes.failure(stringInput, context);
}), output => new Date(output).toISOString());
/**
 * Stored source configuration as read from and written to saved objects
 */
const SavedSourceConfigurationFieldsRuntimeType = runtimeTypes.partial({
    container: runtimeTypes.string,
    host: runtimeTypes.string,
    pod: runtimeTypes.string,
    tiebreaker: runtimeTypes.string,
    timestamp: runtimeTypes.string,
});
exports.SavedSourceConfigurationRuntimeType = runtimeTypes.partial({
    name: runtimeTypes.string,
    description: runtimeTypes.string,
    metricAlias: runtimeTypes.string,
    logAlias: runtimeTypes.string,
    fields: SavedSourceConfigurationFieldsRuntimeType,
});
exports.pickSavedSourceConfiguration = (value) => {
    const { container, host, pod, tiebreaker, timestamp } = value.fields;
    return {
        ...value,
        fields: { container, host, pod, tiebreaker, timestamp },
    };
};
/**
 * Static source configuration as read from the configuration file
 */
const StaticSourceConfigurationFieldsRuntimeType = runtimeTypes.partial({
    ...SavedSourceConfigurationFieldsRuntimeType.props,
    message: runtimeTypes.array(runtimeTypes.string),
});
exports.StaticSourceConfigurationRuntimeType = runtimeTypes.partial({
    name: runtimeTypes.string,
    description: runtimeTypes.string,
    metricAlias: runtimeTypes.string,
    logAlias: runtimeTypes.string,
    fields: StaticSourceConfigurationFieldsRuntimeType,
});
/**
 * Full source configuration type after all cleanup has been done at the edges
 */
const SourceConfigurationFieldsRuntimeType = runtimeTypes.type({
    ...StaticSourceConfigurationFieldsRuntimeType.props,
});
exports.SourceConfigurationRuntimeType = runtimeTypes.type({
    ...exports.SavedSourceConfigurationRuntimeType.props,
    fields: SourceConfigurationFieldsRuntimeType,
});
/**
 * Saved object type with metadata
 */
exports.SourceConfigurationSavedObjectRuntimeType = runtimeTypes.intersection([
    runtimeTypes.type({
        id: runtimeTypes.string,
        attributes: exports.SavedSourceConfigurationRuntimeType,
    }),
    runtimeTypes.partial({
        version: runtimeTypes.string,
        updated_at: exports.TimestampFromString,
    }),
]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2hvbWUvYW50aG9ueS9naXRfd29ya3NwYWNlcy9raWJhbmEveC1wYWNrL3BsdWdpbnMvaW5mcmEvc2VydmVyL2xpYi9zb3VyY2VzL3R5cGVzLnRzIiwic291cmNlcyI6WyIvaG9tZS9hbnRob255L2dpdF93b3Jrc3BhY2VzL2tpYmFuYS94LXBhY2svcGx1Z2lucy9pbmZyYS9zZXJ2ZXIvbGliL3NvdXJjZXMvdHlwZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7O0dBSUc7OztBQUVILDREQUFzQztBQUN0Qyw0REFBNEI7QUFFZixRQUFBLG1CQUFtQixHQUFHLElBQUksWUFBWSxDQUFDLElBQUksQ0FDdEQscUJBQXFCLEVBQ3JCLENBQUMsS0FBSyxFQUFtQixFQUFFLENBQUMsT0FBTyxLQUFLLEtBQUssUUFBUSxFQUNyRCxDQUFDLEtBQUssRUFBRSxPQUFPLEVBQUUsRUFBRSxDQUNqQixZQUFZLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxFQUFFO0lBQy9ELE1BQU0sV0FBVyxHQUFHLGdCQUFNLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDeEMsT0FBTyxXQUFXLENBQUMsT0FBTyxFQUFFO1FBQzFCLENBQUMsQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUM3QyxDQUFDLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDakQsQ0FBQyxDQUFDLEVBQ0osTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FDekMsQ0FBQztBQUVGOztHQUVHO0FBRUgsTUFBTSx5Q0FBeUMsR0FBRyxZQUFZLENBQUMsT0FBTyxDQUFDO0lBQ3JFLFNBQVMsRUFBRSxZQUFZLENBQUMsTUFBTTtJQUM5QixJQUFJLEVBQUUsWUFBWSxDQUFDLE1BQU07SUFDekIsR0FBRyxFQUFFLFlBQVksQ0FBQyxNQUFNO0lBQ3hCLFVBQVUsRUFBRSxZQUFZLENBQUMsTUFBTTtJQUMvQixTQUFTLEVBQUUsWUFBWSxDQUFDLE1BQU07Q0FDL0IsQ0FBQyxDQUFDO0FBRVUsUUFBQSxtQ0FBbUMsR0FBRyxZQUFZLENBQUMsT0FBTyxDQUFDO0lBQ3RFLElBQUksRUFBRSxZQUFZLENBQUMsTUFBTTtJQUN6QixXQUFXLEVBQUUsWUFBWSxDQUFDLE1BQU07SUFDaEMsV0FBVyxFQUFFLFlBQVksQ0FBQyxNQUFNO0lBQ2hDLFFBQVEsRUFBRSxZQUFZLENBQUMsTUFBTTtJQUM3QixNQUFNLEVBQUUseUNBQXlDO0NBQ2xELENBQUMsQ0FBQztBQUtVLFFBQUEsNEJBQTRCLEdBQUcsQ0FBQyxLQUErQixFQUFFLEVBQUU7SUFDOUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDO0lBRXJFLE9BQU87UUFDTCxHQUFHLEtBQUs7UUFDUixNQUFNLEVBQUUsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFO0tBQ3hELENBQUM7QUFDSixDQUFDLENBQUM7QUFFRjs7R0FFRztBQUVILE1BQU0sMENBQTBDLEdBQUcsWUFBWSxDQUFDLE9BQU8sQ0FBQztJQUN0RSxHQUFHLHlDQUF5QyxDQUFDLEtBQUs7SUFDbEQsT0FBTyxFQUFFLFlBQVksQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQztDQUNqRCxDQUFDLENBQUM7QUFFVSxRQUFBLG9DQUFvQyxHQUFHLFlBQVksQ0FBQyxPQUFPLENBQUM7SUFDdkUsSUFBSSxFQUFFLFlBQVksQ0FBQyxNQUFNO0lBQ3pCLFdBQVcsRUFBRSxZQUFZLENBQUMsTUFBTTtJQUNoQyxXQUFXLEVBQUUsWUFBWSxDQUFDLE1BQU07SUFDaEMsUUFBUSxFQUFFLFlBQVksQ0FBQyxNQUFNO0lBQzdCLE1BQU0sRUFBRSwwQ0FBMEM7Q0FDbkQsQ0FBQyxDQUFDO0FBS0g7O0dBRUc7QUFFSCxNQUFNLG9DQUFvQyxHQUFHLFlBQVksQ0FBQyxJQUFJLENBQUM7SUFDN0QsR0FBRywwQ0FBMEMsQ0FBQyxLQUFLO0NBQ3BELENBQUMsQ0FBQztBQUVVLFFBQUEsOEJBQThCLEdBQUcsWUFBWSxDQUFDLElBQUksQ0FBQztJQUM5RCxHQUFHLDJDQUFtQyxDQUFDLEtBQUs7SUFDNUMsTUFBTSxFQUFFLG9DQUFvQztDQUM3QyxDQUFDLENBQUM7QUFLSDs7R0FFRztBQUVVLFFBQUEseUNBQXlDLEdBQUcsWUFBWSxDQUFDLFlBQVksQ0FBQztJQUNqRixZQUFZLENBQUMsSUFBSSxDQUFDO1FBQ2hCLEVBQUUsRUFBRSxZQUFZLENBQUMsTUFBTTtRQUN2QixVQUFVLEVBQUUsMkNBQW1DO0tBQ2hELENBQUM7SUFDRixZQUFZLENBQUMsT0FBTyxDQUFDO1FBQ25CLE9BQU8sRUFBRSxZQUFZLENBQUMsTUFBTTtRQUM1QixVQUFVLEVBQUUsMkJBQW1CO0tBQ2hDLENBQUM7Q0FDSCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IEVsYXN0aWNzZWFyY2ggQi5WLiBhbmQvb3IgbGljZW5zZWQgdG8gRWxhc3RpY3NlYXJjaCBCLlYuIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuIExpY2Vuc2VkIHVuZGVyIHRoZSBFbGFzdGljIExpY2Vuc2U7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIEVsYXN0aWMgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgKiBhcyBydW50aW1lVHlwZXMgZnJvbSAnaW8tdHMnO1xuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xuXG5leHBvcnQgY29uc3QgVGltZXN0YW1wRnJvbVN0cmluZyA9IG5ldyBydW50aW1lVHlwZXMuVHlwZTxudW1iZXIsIHN0cmluZz4oXG4gICdUaW1lc3RhbXBGcm9tU3RyaW5nJyxcbiAgKGlucHV0KTogaW5wdXQgaXMgbnVtYmVyID0+IHR5cGVvZiBpbnB1dCA9PT0gJ251bWJlcicsXG4gIChpbnB1dCwgY29udGV4dCkgPT5cbiAgICBydW50aW1lVHlwZXMuc3RyaW5nLnZhbGlkYXRlKGlucHV0LCBjb250ZXh0KS5jaGFpbihzdHJpbmdJbnB1dCA9PiB7XG4gICAgICBjb25zdCBtb21lbnRWYWx1ZSA9IG1vbWVudChzdHJpbmdJbnB1dCk7XG4gICAgICByZXR1cm4gbW9tZW50VmFsdWUuaXNWYWxpZCgpXG4gICAgICAgID8gcnVudGltZVR5cGVzLnN1Y2Nlc3MobW9tZW50VmFsdWUudmFsdWVPZigpKVxuICAgICAgICA6IHJ1bnRpbWVUeXBlcy5mYWlsdXJlKHN0cmluZ0lucHV0LCBjb250ZXh0KTtcbiAgICB9KSxcbiAgb3V0cHV0ID0+IG5ldyBEYXRlKG91dHB1dCkudG9JU09TdHJpbmcoKVxuKTtcblxuLyoqXG4gKiBTdG9yZWQgc291cmNlIGNvbmZpZ3VyYXRpb24gYXMgcmVhZCBmcm9tIGFuZCB3cml0dGVuIHRvIHNhdmVkIG9iamVjdHNcbiAqL1xuXG5jb25zdCBTYXZlZFNvdXJjZUNvbmZpZ3VyYXRpb25GaWVsZHNSdW50aW1lVHlwZSA9IHJ1bnRpbWVUeXBlcy5wYXJ0aWFsKHtcbiAgY29udGFpbmVyOiBydW50aW1lVHlwZXMuc3RyaW5nLFxuICBob3N0OiBydW50aW1lVHlwZXMuc3RyaW5nLFxuICBwb2Q6IHJ1bnRpbWVUeXBlcy5zdHJpbmcsXG4gIHRpZWJyZWFrZXI6IHJ1bnRpbWVUeXBlcy5zdHJpbmcsXG4gIHRpbWVzdGFtcDogcnVudGltZVR5cGVzLnN0cmluZyxcbn0pO1xuXG5leHBvcnQgY29uc3QgU2F2ZWRTb3VyY2VDb25maWd1cmF0aW9uUnVudGltZVR5cGUgPSBydW50aW1lVHlwZXMucGFydGlhbCh7XG4gIG5hbWU6IHJ1bnRpbWVUeXBlcy5zdHJpbmcsXG4gIGRlc2NyaXB0aW9uOiBydW50aW1lVHlwZXMuc3RyaW5nLFxuICBtZXRyaWNBbGlhczogcnVudGltZVR5cGVzLnN0cmluZyxcbiAgbG9nQWxpYXM6IHJ1bnRpbWVUeXBlcy5zdHJpbmcsXG4gIGZpZWxkczogU2F2ZWRTb3VyY2VDb25maWd1cmF0aW9uRmllbGRzUnVudGltZVR5cGUsXG59KTtcblxuZXhwb3J0IGludGVyZmFjZSBJbmZyYVNhdmVkU291cmNlQ29uZmlndXJhdGlvblxuICBleHRlbmRzIHJ1bnRpbWVUeXBlcy5UeXBlT2Y8dHlwZW9mIFNhdmVkU291cmNlQ29uZmlndXJhdGlvblJ1bnRpbWVUeXBlPiB7fVxuXG5leHBvcnQgY29uc3QgcGlja1NhdmVkU291cmNlQ29uZmlndXJhdGlvbiA9ICh2YWx1ZTogSW5mcmFTb3VyY2VDb25maWd1cmF0aW9uKSA9PiB7XG4gIGNvbnN0IHsgY29udGFpbmVyLCBob3N0LCBwb2QsIHRpZWJyZWFrZXIsIHRpbWVzdGFtcCB9ID0gdmFsdWUuZmllbGRzO1xuXG4gIHJldHVybiB7XG4gICAgLi4udmFsdWUsXG4gICAgZmllbGRzOiB7IGNvbnRhaW5lciwgaG9zdCwgcG9kLCB0aWVicmVha2VyLCB0aW1lc3RhbXAgfSxcbiAgfTtcbn07XG5cbi8qKlxuICogU3RhdGljIHNvdXJjZSBjb25maWd1cmF0aW9uIGFzIHJlYWQgZnJvbSB0aGUgY29uZmlndXJhdGlvbiBmaWxlXG4gKi9cblxuY29uc3QgU3RhdGljU291cmNlQ29uZmlndXJhdGlvbkZpZWxkc1J1bnRpbWVUeXBlID0gcnVudGltZVR5cGVzLnBhcnRpYWwoe1xuICAuLi5TYXZlZFNvdXJjZUNvbmZpZ3VyYXRpb25GaWVsZHNSdW50aW1lVHlwZS5wcm9wcyxcbiAgbWVzc2FnZTogcnVudGltZVR5cGVzLmFycmF5KHJ1bnRpbWVUeXBlcy5zdHJpbmcpLFxufSk7XG5cbmV4cG9ydCBjb25zdCBTdGF0aWNTb3VyY2VDb25maWd1cmF0aW9uUnVudGltZVR5cGUgPSBydW50aW1lVHlwZXMucGFydGlhbCh7XG4gIG5hbWU6IHJ1bnRpbWVUeXBlcy5zdHJpbmcsXG4gIGRlc2NyaXB0aW9uOiBydW50aW1lVHlwZXMuc3RyaW5nLFxuICBtZXRyaWNBbGlhczogcnVudGltZVR5cGVzLnN0cmluZyxcbiAgbG9nQWxpYXM6IHJ1bnRpbWVUeXBlcy5zdHJpbmcsXG4gIGZpZWxkczogU3RhdGljU291cmNlQ29uZmlndXJhdGlvbkZpZWxkc1J1bnRpbWVUeXBlLFxufSk7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSW5mcmFTdGF0aWNTb3VyY2VDb25maWd1cmF0aW9uXG4gIGV4dGVuZHMgcnVudGltZVR5cGVzLlR5cGVPZjx0eXBlb2YgU3RhdGljU291cmNlQ29uZmlndXJhdGlvblJ1bnRpbWVUeXBlPiB7fVxuXG4vKipcbiAqIEZ1bGwgc291cmNlIGNvbmZpZ3VyYXRpb24gdHlwZSBhZnRlciBhbGwgY2xlYW51cCBoYXMgYmVlbiBkb25lIGF0IHRoZSBlZGdlc1xuICovXG5cbmNvbnN0IFNvdXJjZUNvbmZpZ3VyYXRpb25GaWVsZHNSdW50aW1lVHlwZSA9IHJ1bnRpbWVUeXBlcy50eXBlKHtcbiAgLi4uU3RhdGljU291cmNlQ29uZmlndXJhdGlvbkZpZWxkc1J1bnRpbWVUeXBlLnByb3BzLFxufSk7XG5cbmV4cG9ydCBjb25zdCBTb3VyY2VDb25maWd1cmF0aW9uUnVudGltZVR5cGUgPSBydW50aW1lVHlwZXMudHlwZSh7XG4gIC4uLlNhdmVkU291cmNlQ29uZmlndXJhdGlvblJ1bnRpbWVUeXBlLnByb3BzLFxuICBmaWVsZHM6IFNvdXJjZUNvbmZpZ3VyYXRpb25GaWVsZHNSdW50aW1lVHlwZSxcbn0pO1xuXG5leHBvcnQgaW50ZXJmYWNlIEluZnJhU291cmNlQ29uZmlndXJhdGlvblxuICBleHRlbmRzIHJ1bnRpbWVUeXBlcy5UeXBlT2Y8dHlwZW9mIFNvdXJjZUNvbmZpZ3VyYXRpb25SdW50aW1lVHlwZT4ge31cblxuLyoqXG4gKiBTYXZlZCBvYmplY3QgdHlwZSB3aXRoIG1ldGFkYXRhXG4gKi9cblxuZXhwb3J0IGNvbnN0IFNvdXJjZUNvbmZpZ3VyYXRpb25TYXZlZE9iamVjdFJ1bnRpbWVUeXBlID0gcnVudGltZVR5cGVzLmludGVyc2VjdGlvbihbXG4gIHJ1bnRpbWVUeXBlcy50eXBlKHtcbiAgICBpZDogcnVudGltZVR5cGVzLnN0cmluZyxcbiAgICBhdHRyaWJ1dGVzOiBTYXZlZFNvdXJjZUNvbmZpZ3VyYXRpb25SdW50aW1lVHlwZSxcbiAgfSksXG4gIHJ1bnRpbWVUeXBlcy5wYXJ0aWFsKHtcbiAgICB2ZXJzaW9uOiBydW50aW1lVHlwZXMuc3RyaW5nLFxuICAgIHVwZGF0ZWRfYXQ6IFRpbWVzdGFtcEZyb21TdHJpbmcsXG4gIH0pLFxuXSk7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU291cmNlQ29uZmlndXJhdGlvblNhdmVkT2JqZWN0XG4gIGV4dGVuZHMgcnVudGltZVR5cGVzLlR5cGVPZjx0eXBlb2YgU291cmNlQ29uZmlndXJhdGlvblNhdmVkT2JqZWN0UnVudGltZVR5cGU+IHt9XG4iXX0=