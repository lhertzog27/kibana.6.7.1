"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */
const lodash_1 = require("lodash");
const configuration_blocks_1 = require("../../common/constants/configuration_blocks");
class CMTagsDomain {
    constructor(adapter, configurationBlocksAdapter, beatsAdabter) {
        this.adapter = adapter;
        this.configurationBlocksAdapter = configurationBlocksAdapter;
        this.beatsAdabter = beatsAdabter;
    }
    async getAll(user, ESQuery) {
        const tags = await this.adapter.getAll(user, ESQuery);
        return tags;
    }
    async getWithIds(user, tagIds) {
        const tags = await this.adapter.getTagsWithIds(user, tagIds);
        return tags;
    }
    async delete(user, tagIds) {
        const beats = await this.beatsAdabter.getAllWithTags(user, tagIds);
        if (beats.filter(b => b.active).length > 0) {
            return false;
        }
        await this.configurationBlocksAdapter.deleteForTags(user, tagIds);
        return await this.adapter.delete(user, tagIds);
    }
    async getNonConflictingTags(user, existingTagIds) {
        const tags = await this.adapter.getTagsWithIds(user, existingTagIds);
        const existingUniqueBlockTypes = lodash_1.uniq(tags.reduce((existingUniqueTypes, tag) => {
            if (tag.hasConfigurationBlocksTypes) {
                existingUniqueTypes = existingUniqueTypes.concat(tag.hasConfigurationBlocksTypes);
            }
            return existingUniqueTypes;
        }, [])).filter(type => configuration_blocks_1.UNIQUENESS_ENFORCING_TYPES.includes(type));
        const safeTags = await this.adapter.getWithoutConfigTypes(user, existingUniqueBlockTypes);
        return safeTags;
    }
    async upsertTag(user, tag) {
        const tagId = await this.adapter.upsertTag(user, tag);
        return tagId;
    }
}
exports.CMTagsDomain = CMTagsDomain;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2hvbWUvYW50aG9ueS9naXRfd29ya3NwYWNlcy9raWJhbmEveC1wYWNrL3BsdWdpbnMvYmVhdHNfbWFuYWdlbWVudC9zZXJ2ZXIvbGliL3RhZ3MudHMiLCJzb3VyY2VzIjpbIi9ob21lL2FudGhvbnkvZ2l0X3dvcmtzcGFjZXMva2liYW5hL3gtcGFjay9wbHVnaW5zL2JlYXRzX21hbmFnZW1lbnQvc2VydmVyL2xpYi90YWdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7R0FJRztBQUNILG1DQUE4QjtBQUM5QixzRkFBeUY7QUFPekYsTUFBYSxZQUFZO0lBQ3ZCLFlBQ21CLE9BQXNCLEVBQ3RCLDBCQUFxRCxFQUNyRCxZQUE0QjtRQUY1QixZQUFPLEdBQVAsT0FBTyxDQUFlO1FBQ3RCLCtCQUEwQixHQUExQiwwQkFBMEIsQ0FBMkI7UUFDckQsaUJBQVksR0FBWixZQUFZLENBQWdCO0lBQzVDLENBQUM7SUFFRyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQW1CLEVBQUUsT0FBYTtRQUNwRCxNQUFNLElBQUksR0FBRyxNQUFNLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztRQUN0RCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFTSxLQUFLLENBQUMsVUFBVSxDQUFDLElBQW1CLEVBQUUsTUFBZ0I7UUFDM0QsTUFBTSxJQUFJLEdBQUcsTUFBTSxJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDN0QsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRU0sS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFtQixFQUFFLE1BQWdCO1FBQ3ZELE1BQU0sS0FBSyxHQUFHLE1BQU0sSUFBSSxDQUFDLFlBQVksQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ25FLElBQUksS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQzFDLE9BQU8sS0FBSyxDQUFDO1NBQ2Q7UUFDRCxNQUFNLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ2xFLE9BQU8sTUFBTSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDakQsQ0FBQztJQUVNLEtBQUssQ0FBQyxxQkFBcUIsQ0FBQyxJQUFtQixFQUFFLGNBQXdCO1FBQzlFLE1BQU0sSUFBSSxHQUFHLE1BQU0sSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLGNBQWMsQ0FBQyxDQUFDO1FBQ3JFLE1BQU0sd0JBQXdCLEdBQUcsYUFBSSxDQUNuQyxJQUFJLENBQUMsTUFBTSxDQUNULENBQUMsbUJBQW1CLEVBQUUsR0FBRyxFQUFFLEVBQUU7WUFDM0IsSUFBSSxHQUFHLENBQUMsMkJBQTJCLEVBQUU7Z0JBQ25DLG1CQUFtQixHQUFHLG1CQUFtQixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsMkJBQTJCLENBQUMsQ0FBQzthQUNuRjtZQUNELE9BQU8sbUJBQW1CLENBQUM7UUFDN0IsQ0FBQyxFQUNELEVBQWMsQ0FDZixDQUNGLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsaURBQTBCLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFFNUQsTUFBTSxRQUFRLEdBQUcsTUFBTSxJQUFJLENBQUMsT0FBTyxDQUFDLHFCQUFxQixDQUFDLElBQUksRUFBRSx3QkFBd0IsQ0FBQyxDQUFDO1FBQzFGLE9BQU8sUUFBUSxDQUFDO0lBQ2xCLENBQUM7SUFFTSxLQUFLLENBQUMsU0FBUyxDQUFDLElBQW1CLEVBQUUsR0FBWTtRQUN0RCxNQUFNLEtBQUssR0FBRyxNQUFNLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztRQUV0RCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7Q0FDRjtBQWpERCxvQ0FpREMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IEVsYXN0aWNzZWFyY2ggQi5WLiBhbmQvb3IgbGljZW5zZWQgdG8gRWxhc3RpY3NlYXJjaCBCLlYuIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuIExpY2Vuc2VkIHVuZGVyIHRoZSBFbGFzdGljIExpY2Vuc2U7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIEVsYXN0aWMgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgdW5pcSB9IGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBVTklRVUVORVNTX0VORk9SQ0lOR19UWVBFUyB9IGZyb20gJy4uLy4uL2NvbW1vbi9jb25zdGFudHMvY29uZmlndXJhdGlvbl9ibG9ja3MnO1xuaW1wb3J0IHsgQmVhdFRhZyB9IGZyb20gJy4uLy4uL2NvbW1vbi9kb21haW5fdHlwZXMnO1xuaW1wb3J0IHsgQ01CZWF0c0FkYXB0ZXIgfSBmcm9tICcuL2FkYXB0ZXJzL2JlYXRzL2FkYXB0ZXJfdHlwZXMnO1xuaW1wb3J0IHsgQ29uZmlndXJhdGlvbkJsb2NrQWRhcHRlciB9IGZyb20gJy4vYWRhcHRlcnMvY29uZmlndXJhdGlvbl9ibG9ja3MvYWRhcHRlcl90eXBlcyc7XG5pbXBvcnQgeyBGcmFtZXdvcmtVc2VyIH0gZnJvbSAnLi9hZGFwdGVycy9mcmFtZXdvcmsvYWRhcHRlcl90eXBlcyc7XG5pbXBvcnQgeyBDTVRhZ3NBZGFwdGVyIH0gZnJvbSAnLi9hZGFwdGVycy90YWdzL2FkYXB0ZXJfdHlwZXMnO1xuXG5leHBvcnQgY2xhc3MgQ01UYWdzRG9tYWluIHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWFkb25seSBhZGFwdGVyOiBDTVRhZ3NBZGFwdGVyLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgY29uZmlndXJhdGlvbkJsb2Nrc0FkYXB0ZXI6IENvbmZpZ3VyYXRpb25CbG9ja0FkYXB0ZXIsXG4gICAgcHJpdmF0ZSByZWFkb25seSBiZWF0c0FkYWJ0ZXI6IENNQmVhdHNBZGFwdGVyXG4gICkge31cblxuICBwdWJsaWMgYXN5bmMgZ2V0QWxsKHVzZXI6IEZyYW1ld29ya1VzZXIsIEVTUXVlcnk/OiBhbnkpOiBQcm9taXNlPEJlYXRUYWdbXT4ge1xuICAgIGNvbnN0IHRhZ3MgPSBhd2FpdCB0aGlzLmFkYXB0ZXIuZ2V0QWxsKHVzZXIsIEVTUXVlcnkpO1xuICAgIHJldHVybiB0YWdzO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGdldFdpdGhJZHModXNlcjogRnJhbWV3b3JrVXNlciwgdGFnSWRzOiBzdHJpbmdbXSk6IFByb21pc2U8QmVhdFRhZ1tdPiB7XG4gICAgY29uc3QgdGFncyA9IGF3YWl0IHRoaXMuYWRhcHRlci5nZXRUYWdzV2l0aElkcyh1c2VyLCB0YWdJZHMpO1xuICAgIHJldHVybiB0YWdzO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGRlbGV0ZSh1c2VyOiBGcmFtZXdvcmtVc2VyLCB0YWdJZHM6IHN0cmluZ1tdKSB7XG4gICAgY29uc3QgYmVhdHMgPSBhd2FpdCB0aGlzLmJlYXRzQWRhYnRlci5nZXRBbGxXaXRoVGFncyh1c2VyLCB0YWdJZHMpO1xuICAgIGlmIChiZWF0cy5maWx0ZXIoYiA9PiBiLmFjdGl2ZSkubGVuZ3RoID4gMCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBhd2FpdCB0aGlzLmNvbmZpZ3VyYXRpb25CbG9ja3NBZGFwdGVyLmRlbGV0ZUZvclRhZ3ModXNlciwgdGFnSWRzKTtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5hZGFwdGVyLmRlbGV0ZSh1c2VyLCB0YWdJZHMpO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGdldE5vbkNvbmZsaWN0aW5nVGFncyh1c2VyOiBGcmFtZXdvcmtVc2VyLCBleGlzdGluZ1RhZ0lkczogc3RyaW5nW10pIHtcbiAgICBjb25zdCB0YWdzID0gYXdhaXQgdGhpcy5hZGFwdGVyLmdldFRhZ3NXaXRoSWRzKHVzZXIsIGV4aXN0aW5nVGFnSWRzKTtcbiAgICBjb25zdCBleGlzdGluZ1VuaXF1ZUJsb2NrVHlwZXMgPSB1bmlxKFxuICAgICAgdGFncy5yZWR1Y2UoXG4gICAgICAgIChleGlzdGluZ1VuaXF1ZVR5cGVzLCB0YWcpID0+IHtcbiAgICAgICAgICBpZiAodGFnLmhhc0NvbmZpZ3VyYXRpb25CbG9ja3NUeXBlcykge1xuICAgICAgICAgICAgZXhpc3RpbmdVbmlxdWVUeXBlcyA9IGV4aXN0aW5nVW5pcXVlVHlwZXMuY29uY2F0KHRhZy5oYXNDb25maWd1cmF0aW9uQmxvY2tzVHlwZXMpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gZXhpc3RpbmdVbmlxdWVUeXBlcztcbiAgICAgICAgfSxcbiAgICAgICAgW10gYXMgc3RyaW5nW11cbiAgICAgIClcbiAgICApLmZpbHRlcih0eXBlID0+IFVOSVFVRU5FU1NfRU5GT1JDSU5HX1RZUEVTLmluY2x1ZGVzKHR5cGUpKTtcblxuICAgIGNvbnN0IHNhZmVUYWdzID0gYXdhaXQgdGhpcy5hZGFwdGVyLmdldFdpdGhvdXRDb25maWdUeXBlcyh1c2VyLCBleGlzdGluZ1VuaXF1ZUJsb2NrVHlwZXMpO1xuICAgIHJldHVybiBzYWZlVGFncztcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyB1cHNlcnRUYWcodXNlcjogRnJhbWV3b3JrVXNlciwgdGFnOiBCZWF0VGFnKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICBjb25zdCB0YWdJZCA9IGF3YWl0IHRoaXMuYWRhcHRlci51cHNlcnRUYWcodXNlciwgdGFnKTtcblxuICAgIHJldHVybiB0YWdJZDtcbiAgfVxufVxuIl19