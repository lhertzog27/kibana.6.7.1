"use strict";
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const calculate_cardinality_1 = require("./lib/calculate_cardinality");
const create_partition_bodies_1 = require("./lib/create_partition_bodies");
const process_nodes_1 = require("./lib/process_nodes");
class ElasticsearchNodesAdapter {
    constructor(framework) {
        this.framework = framework;
    }
    async getNodes(req, options) {
        const search = (searchOptions) => this.framework.callWithRequest(req, 'search', searchOptions);
        const msearch = (msearchOptions) => this.framework.callWithRequest(req, 'msearch', msearchOptions);
        const nodeField = options.sourceConfiguration.fields[options.nodeType];
        const totalNodes = await calculate_cardinality_1.calculateCardinalityOfNodeField(search, nodeField, options);
        if (totalNodes === 0) {
            return [];
        }
        const body = create_partition_bodies_1.createPartitionBodies(totalNodes, options.nodeType, nodeField, options);
        const response = await msearch({
            body,
        });
        if (response && response.responses) {
            const nodeBuckets = response.responses.reduce((current, resp) => {
                if (!resp.aggregations) {
                    return current;
                }
                const buckets = resp.aggregations.waffle.nodes.buckets;
                return current.concat(buckets);
            }, []);
            return process_nodes_1.processNodes(options, nodeBuckets);
        }
        return [];
    }
}
exports.ElasticsearchNodesAdapter = ElasticsearchNodesAdapter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2hvbWUvYW50aG9ueS9naXRfd29ya3NwYWNlcy9raWJhbmEveC1wYWNrL3BsdWdpbnMvaW5mcmEvc2VydmVyL2xpYi9hZGFwdGVycy9ub2Rlcy9lbGFzdGljc2VhcmNoX25vZGVzX2FkYXB0ZXIudHMiLCJzb3VyY2VzIjpbIi9ob21lL2FudGhvbnkvZ2l0X3dvcmtzcGFjZXMva2liYW5hL3gtcGFjay9wbHVnaW5zL2luZnJhL3NlcnZlci9saWIvYWRhcHRlcnMvbm9kZXMvZWxhc3RpY3NlYXJjaF9ub2Rlc19hZGFwdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7OztHQUlHOztBQVdILHVFQUE4RTtBQUM5RSwyRUFBc0U7QUFDdEUsdURBQW1EO0FBRW5ELE1BQWEseUJBQXlCO0lBRXBDLFlBQVksU0FBdUM7UUFDakQsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7SUFDN0IsQ0FBQztJQUVNLEtBQUssQ0FBQyxRQUFRLENBQ25CLEdBQTBCLEVBQzFCLE9BQWdDO1FBRWhDLE1BQU0sTUFBTSxHQUFHLENBQWMsYUFBcUIsRUFBRSxFQUFFLENBQ3BELElBQUksQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFrQixHQUFHLEVBQUUsUUFBUSxFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBQ2hGLE1BQU0sT0FBTyxHQUFHLENBQWMsY0FBc0IsRUFBRSxFQUFFLENBQ3RELElBQUksQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFrQixHQUFHLEVBQUUsU0FBUyxFQUFFLGNBQWMsQ0FBQyxDQUFDO1FBRWxGLE1BQU0sU0FBUyxHQUFHLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3ZFLE1BQU0sVUFBVSxHQUFHLE1BQU0sdURBQStCLENBQUMsTUFBTSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUVyRixJQUFJLFVBQVUsS0FBSyxDQUFDLEVBQUU7WUFDcEIsT0FBTyxFQUFFLENBQUM7U0FDWDtRQUVELE1BQU0sSUFBSSxHQUFHLCtDQUFxQixDQUFDLFVBQVUsRUFBRSxPQUFPLENBQUMsUUFBUSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUVyRixNQUFNLFFBQVEsR0FBRyxNQUFNLE9BQU8sQ0FBeUI7WUFDckQsSUFBSTtTQUNMLENBQUMsQ0FBQztRQUVILElBQUksUUFBUSxJQUFJLFFBQVEsQ0FBQyxTQUFTLEVBQUU7WUFDbEMsTUFBTSxXQUFXLEdBQWtCLFFBQVEsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUMxRCxDQUFDLE9BQXNCLEVBQUUsSUFBSSxFQUFFLEVBQUU7Z0JBQy9CLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFO29CQUN0QixPQUFPLE9BQU8sQ0FBQztpQkFDaEI7Z0JBQ0QsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQztnQkFDdkQsT0FBTyxPQUFPLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ2pDLENBQUMsRUFDRCxFQUFFLENBQ0gsQ0FBQztZQUNGLE9BQU8sNEJBQVksQ0FBQyxPQUFPLEVBQUUsV0FBVyxDQUFDLENBQUM7U0FDM0M7UUFFRCxPQUFPLEVBQUUsQ0FBQztJQUNaLENBQUM7Q0FDRjtBQTVDRCw4REE0Q0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IEVsYXN0aWNzZWFyY2ggQi5WLiBhbmQvb3IgbGljZW5zZWQgdG8gRWxhc3RpY3NlYXJjaCBCLlYuIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuIExpY2Vuc2VkIHVuZGVyIHRoZSBFbGFzdGljIExpY2Vuc2U7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIEVsYXN0aWMgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBJbmZyYUJhY2tlbmRGcmFtZXdvcmtBZGFwdGVyLCBJbmZyYUZyYW1ld29ya1JlcXVlc3QgfSBmcm9tICcuLi9mcmFtZXdvcmsnO1xuaW1wb3J0IHtcbiAgSW5mcmFCdWNrZXQsXG4gIEluZnJhTm9kZVJlcXVlc3RPcHRpb25zLFxuICBJbmZyYU5vZGVzQWRhcHRlcixcbiAgSW5mcmFOb2Rlc0FnZ3JlZ2F0aW9ucyxcbn0gZnJvbSAnLi9hZGFwdGVyX3R5cGVzJztcblxuaW1wb3J0IHsgSW5mcmFOb2RlIH0gZnJvbSAnLi4vLi4vLi4vZ3JhcGhxbC90eXBlcyc7XG5pbXBvcnQgeyBjYWxjdWxhdGVDYXJkaW5hbGl0eU9mTm9kZUZpZWxkIH0gZnJvbSAnLi9saWIvY2FsY3VsYXRlX2NhcmRpbmFsaXR5JztcbmltcG9ydCB7IGNyZWF0ZVBhcnRpdGlvbkJvZGllcyB9IGZyb20gJy4vbGliL2NyZWF0ZV9wYXJ0aXRpb25fYm9kaWVzJztcbmltcG9ydCB7IHByb2Nlc3NOb2RlcyB9IGZyb20gJy4vbGliL3Byb2Nlc3Nfbm9kZXMnO1xuXG5leHBvcnQgY2xhc3MgRWxhc3RpY3NlYXJjaE5vZGVzQWRhcHRlciBpbXBsZW1lbnRzIEluZnJhTm9kZXNBZGFwdGVyIHtcbiAgcHJpdmF0ZSBmcmFtZXdvcms6IEluZnJhQmFja2VuZEZyYW1ld29ya0FkYXB0ZXI7XG4gIGNvbnN0cnVjdG9yKGZyYW1ld29yazogSW5mcmFCYWNrZW5kRnJhbWV3b3JrQWRhcHRlcikge1xuICAgIHRoaXMuZnJhbWV3b3JrID0gZnJhbWV3b3JrO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGdldE5vZGVzKFxuICAgIHJlcTogSW5mcmFGcmFtZXdvcmtSZXF1ZXN0LFxuICAgIG9wdGlvbnM6IEluZnJhTm9kZVJlcXVlc3RPcHRpb25zXG4gICk6IFByb21pc2U8SW5mcmFOb2RlW10+IHtcbiAgICBjb25zdCBzZWFyY2ggPSA8QWdncmVnYXRpb24+KHNlYXJjaE9wdGlvbnM6IG9iamVjdCkgPT5cbiAgICAgIHRoaXMuZnJhbWV3b3JrLmNhbGxXaXRoUmVxdWVzdDx7fSwgQWdncmVnYXRpb24+KHJlcSwgJ3NlYXJjaCcsIHNlYXJjaE9wdGlvbnMpO1xuICAgIGNvbnN0IG1zZWFyY2ggPSA8QWdncmVnYXRpb24+KG1zZWFyY2hPcHRpb25zOiBvYmplY3QpID0+XG4gICAgICB0aGlzLmZyYW1ld29yay5jYWxsV2l0aFJlcXVlc3Q8e30sIEFnZ3JlZ2F0aW9uPihyZXEsICdtc2VhcmNoJywgbXNlYXJjaE9wdGlvbnMpO1xuXG4gICAgY29uc3Qgbm9kZUZpZWxkID0gb3B0aW9ucy5zb3VyY2VDb25maWd1cmF0aW9uLmZpZWxkc1tvcHRpb25zLm5vZGVUeXBlXTtcbiAgICBjb25zdCB0b3RhbE5vZGVzID0gYXdhaXQgY2FsY3VsYXRlQ2FyZGluYWxpdHlPZk5vZGVGaWVsZChzZWFyY2gsIG5vZGVGaWVsZCwgb3B0aW9ucyk7XG5cbiAgICBpZiAodG90YWxOb2RlcyA9PT0gMCkge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIGNvbnN0IGJvZHkgPSBjcmVhdGVQYXJ0aXRpb25Cb2RpZXModG90YWxOb2Rlcywgb3B0aW9ucy5ub2RlVHlwZSwgbm9kZUZpZWxkLCBvcHRpb25zKTtcblxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgbXNlYXJjaDxJbmZyYU5vZGVzQWdncmVnYXRpb25zPih7XG4gICAgICBib2R5LFxuICAgIH0pO1xuXG4gICAgaWYgKHJlc3BvbnNlICYmIHJlc3BvbnNlLnJlc3BvbnNlcykge1xuICAgICAgY29uc3Qgbm9kZUJ1Y2tldHM6IEluZnJhQnVja2V0W10gPSByZXNwb25zZS5yZXNwb25zZXMucmVkdWNlKFxuICAgICAgICAoY3VycmVudDogSW5mcmFCdWNrZXRbXSwgcmVzcCkgPT4ge1xuICAgICAgICAgIGlmICghcmVzcC5hZ2dyZWdhdGlvbnMpIHtcbiAgICAgICAgICAgIHJldHVybiBjdXJyZW50O1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCBidWNrZXRzID0gcmVzcC5hZ2dyZWdhdGlvbnMud2FmZmxlLm5vZGVzLmJ1Y2tldHM7XG4gICAgICAgICAgcmV0dXJuIGN1cnJlbnQuY29uY2F0KGJ1Y2tldHMpO1xuICAgICAgICB9LFxuICAgICAgICBbXVxuICAgICAgKTtcbiAgICAgIHJldHVybiBwcm9jZXNzTm9kZXMob3B0aW9ucywgbm9kZUJ1Y2tldHMpO1xuICAgIH1cblxuICAgIHJldHVybiBbXTtcbiAgfVxufVxuIl19