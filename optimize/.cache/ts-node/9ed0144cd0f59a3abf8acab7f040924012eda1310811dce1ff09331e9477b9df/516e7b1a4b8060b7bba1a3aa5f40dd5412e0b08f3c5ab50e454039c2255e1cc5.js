"use strict";
/*
 * Licensed to Elasticsearch B.V. under one or more contributor
 * license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch B.V. licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = require("events");
/**
 * List of the server events to be forwarded to the legacy platform.
 */
const ServerEventsToForward = [
    'clientError',
    'close',
    'connection',
    'error',
    'listening',
    'upgrade',
];
/**
 * Represents "proxy" between legacy and current platform.
 * @internal
 */
class LegacyPlatformProxy extends events_1.EventEmitter {
    constructor(log, server) {
        super();
        this.log = log;
        this.server = server;
        // HapiJS expects that the following events will be generated by `listener`, see:
        // https://github.com/hapijs/hapi/blob/v14.2.0/lib/connection.js.
        this.eventHandlers = new Map(ServerEventsToForward.map(eventName => {
            return [
                eventName,
                (...args) => {
                    this.log.debug(`Event is being forwarded: ${eventName}`);
                    this.emit(eventName, ...args);
                },
            ];
        }));
        for (const [eventName, eventHandler] of this.eventHandlers) {
            this.server.addListener(eventName, eventHandler);
        }
    }
    /**
     * Neither new nor legacy platform should use this method directly.
     */
    address() {
        this.log.debug('"address" has been called.');
        return this.server.address();
    }
    /**
     * Neither new nor legacy platform should use this method directly.
     */
    listen(port, host, callback) {
        this.log.debug(`"listen" has been called (${host}:${port}).`);
        if (callback !== undefined) {
            callback();
        }
    }
    /**
     * Neither new nor legacy platform should use this method directly.
     */
    close(callback) {
        this.log.debug('"close" has been called.');
        if (callback !== undefined) {
            callback();
        }
    }
    /**
     * Neither new nor legacy platform should use this method directly.
     */
    getConnections(callback) {
        this.log.debug('"getConnections" has been called.');
        // This method is used by `even-better` (before we start platform).
        // It seems that the latest version of parent `good` doesn't use this anymore.
        this.server.getConnections(callback);
    }
}
exports.LegacyPlatformProxy = LegacyPlatformProxy;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2hvbWUvYW50aG9ueS9naXRfd29ya3NwYWNlcy9raWJhbmEvc3JjL2NvcmUvc2VydmVyL2xlZ2FjeV9jb21wYXQvbGVnYWN5X3BsYXRmb3JtX3Byb3h5LnRzIiwic291cmNlcyI6WyIvaG9tZS9hbnRob255L2dpdF93b3Jrc3BhY2VzL2tpYmFuYS9zcmMvY29yZS9zZXJ2ZXIvbGVnYWN5X2NvbXBhdC9sZWdhY3lfcGxhdGZvcm1fcHJveHkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7Ozs7OztHQWlCRzs7QUFFSCxtQ0FBc0M7QUFLdEM7O0dBRUc7QUFDSCxNQUFNLHFCQUFxQixHQUFHO0lBQzVCLGFBQWE7SUFDYixPQUFPO0lBQ1AsWUFBWTtJQUNaLE9BQU87SUFDUCxXQUFXO0lBQ1gsU0FBUztDQUNWLENBQUM7QUFFRjs7O0dBR0c7QUFDSCxNQUFhLG1CQUFvQixTQUFRLHFCQUFZO0lBR25ELFlBQTZCLEdBQVcsRUFBbUIsTUFBYztRQUN2RSxLQUFLLEVBQUUsQ0FBQztRQURtQixRQUFHLEdBQUgsR0FBRyxDQUFRO1FBQW1CLFdBQU0sR0FBTixNQUFNLENBQVE7UUFHdkUsaUZBQWlGO1FBQ2pGLGlFQUFpRTtRQUNqRSxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksR0FBRyxDQUMxQixxQkFBcUIsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFDcEMsT0FBTztnQkFDTCxTQUFTO2dCQUNULENBQUMsR0FBRyxJQUFXLEVBQUUsRUFBRTtvQkFDakIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsNkJBQTZCLFNBQVMsRUFBRSxDQUFDLENBQUM7b0JBQ3pELElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7Z0JBQ2hDLENBQUM7YUFDb0MsQ0FBQztRQUMxQyxDQUFDLENBQUMsQ0FDSCxDQUFDO1FBRUYsS0FBSyxNQUFNLENBQUMsU0FBUyxFQUFFLFlBQVksQ0FBQyxJQUFJLElBQUksQ0FBQyxhQUFhLEVBQUU7WUFDMUQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsU0FBUyxFQUFFLFlBQVksQ0FBQyxDQUFDO1NBQ2xEO0lBQ0gsQ0FBQztJQUVEOztPQUVHO0lBQ0ksT0FBTztRQUNaLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLDRCQUE0QixDQUFDLENBQUM7UUFFN0MsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQy9CLENBQUM7SUFFRDs7T0FFRztJQUNJLE1BQU0sQ0FBQyxJQUFZLEVBQUUsSUFBWSxFQUFFLFFBQWtDO1FBQzFFLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLDZCQUE2QixJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsQ0FBQztRQUU5RCxJQUFJLFFBQVEsS0FBSyxTQUFTLEVBQUU7WUFDMUIsUUFBUSxFQUFFLENBQUM7U0FDWjtJQUNILENBQUM7SUFFRDs7T0FFRztJQUNJLEtBQUssQ0FBQyxRQUFrQztRQUM3QyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO1FBRTNDLElBQUksUUFBUSxLQUFLLFNBQVMsRUFBRTtZQUMxQixRQUFRLEVBQUUsQ0FBQztTQUNaO0lBQ0gsQ0FBQztJQUVEOztPQUVHO0lBQ0ksY0FBYyxDQUFDLFFBQXVEO1FBQzNFLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLG1DQUFtQyxDQUFDLENBQUM7UUFFcEQsbUVBQW1FO1FBQ25FLDhFQUE4RTtRQUM5RSxJQUFJLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUN2QyxDQUFDO0NBQ0Y7QUFsRUQsa0RBa0VDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIExpY2Vuc2VkIHRvIEVsYXN0aWNzZWFyY2ggQi5WLiB1bmRlciBvbmUgb3IgbW9yZSBjb250cmlidXRvclxuICogbGljZW5zZSBhZ3JlZW1lbnRzLiBTZWUgdGhlIE5PVElDRSBmaWxlIGRpc3RyaWJ1dGVkIHdpdGhcbiAqIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiByZWdhcmRpbmcgY29weXJpZ2h0XG4gKiBvd25lcnNoaXAuIEVsYXN0aWNzZWFyY2ggQi5WLiBsaWNlbnNlcyB0aGlzIGZpbGUgdG8geW91IHVuZGVyXG4gKiB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpOyB5b3UgbWF5XG4gKiBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gJ2V2ZW50cyc7XG5pbXBvcnQgeyBTZXJ2ZXIgfSBmcm9tICduZXQnO1xuXG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tICcuLi9sb2dnaW5nJztcblxuLyoqXG4gKiBMaXN0IG9mIHRoZSBzZXJ2ZXIgZXZlbnRzIHRvIGJlIGZvcndhcmRlZCB0byB0aGUgbGVnYWN5IHBsYXRmb3JtLlxuICovXG5jb25zdCBTZXJ2ZXJFdmVudHNUb0ZvcndhcmQgPSBbXG4gICdjbGllbnRFcnJvcicsXG4gICdjbG9zZScsXG4gICdjb25uZWN0aW9uJyxcbiAgJ2Vycm9yJyxcbiAgJ2xpc3RlbmluZycsXG4gICd1cGdyYWRlJyxcbl07XG5cbi8qKlxuICogUmVwcmVzZW50cyBcInByb3h5XCIgYmV0d2VlbiBsZWdhY3kgYW5kIGN1cnJlbnQgcGxhdGZvcm0uXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNsYXNzIExlZ2FjeVBsYXRmb3JtUHJveHkgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuICBwcml2YXRlIHJlYWRvbmx5IGV2ZW50SGFuZGxlcnM6IE1hcDxzdHJpbmcsICguLi5hcmdzOiBhbnlbXSkgPT4gdm9pZD47XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBsb2c6IExvZ2dlciwgcHJpdmF0ZSByZWFkb25seSBzZXJ2ZXI6IFNlcnZlcikge1xuICAgIHN1cGVyKCk7XG5cbiAgICAvLyBIYXBpSlMgZXhwZWN0cyB0aGF0IHRoZSBmb2xsb3dpbmcgZXZlbnRzIHdpbGwgYmUgZ2VuZXJhdGVkIGJ5IGBsaXN0ZW5lcmAsIHNlZTpcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vaGFwaWpzL2hhcGkvYmxvYi92MTQuMi4wL2xpYi9jb25uZWN0aW9uLmpzLlxuICAgIHRoaXMuZXZlbnRIYW5kbGVycyA9IG5ldyBNYXAoXG4gICAgICBTZXJ2ZXJFdmVudHNUb0ZvcndhcmQubWFwKGV2ZW50TmFtZSA9PiB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgZXZlbnROYW1lLFxuICAgICAgICAgICguLi5hcmdzOiBhbnlbXSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5sb2cuZGVidWcoYEV2ZW50IGlzIGJlaW5nIGZvcndhcmRlZDogJHtldmVudE5hbWV9YCk7XG4gICAgICAgICAgICB0aGlzLmVtaXQoZXZlbnROYW1lLCAuLi5hcmdzKTtcbiAgICAgICAgICB9LFxuICAgICAgICBdIGFzIFtzdHJpbmcsICguLi5hcmdzOiBhbnlbXSkgPT4gdm9pZF07XG4gICAgICB9KVxuICAgICk7XG5cbiAgICBmb3IgKGNvbnN0IFtldmVudE5hbWUsIGV2ZW50SGFuZGxlcl0gb2YgdGhpcy5ldmVudEhhbmRsZXJzKSB7XG4gICAgICB0aGlzLnNlcnZlci5hZGRMaXN0ZW5lcihldmVudE5hbWUsIGV2ZW50SGFuZGxlcik7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIE5laXRoZXIgbmV3IG5vciBsZWdhY3kgcGxhdGZvcm0gc2hvdWxkIHVzZSB0aGlzIG1ldGhvZCBkaXJlY3RseS5cbiAgICovXG4gIHB1YmxpYyBhZGRyZXNzKCkge1xuICAgIHRoaXMubG9nLmRlYnVnKCdcImFkZHJlc3NcIiBoYXMgYmVlbiBjYWxsZWQuJyk7XG5cbiAgICByZXR1cm4gdGhpcy5zZXJ2ZXIuYWRkcmVzcygpO1xuICB9XG5cbiAgLyoqXG4gICAqIE5laXRoZXIgbmV3IG5vciBsZWdhY3kgcGxhdGZvcm0gc2hvdWxkIHVzZSB0aGlzIG1ldGhvZCBkaXJlY3RseS5cbiAgICovXG4gIHB1YmxpYyBsaXN0ZW4ocG9ydDogbnVtYmVyLCBob3N0OiBzdHJpbmcsIGNhbGxiYWNrPzogKGVycm9yPzogRXJyb3IpID0+IHZvaWQpIHtcbiAgICB0aGlzLmxvZy5kZWJ1ZyhgXCJsaXN0ZW5cIiBoYXMgYmVlbiBjYWxsZWQgKCR7aG9zdH06JHtwb3J0fSkuYCk7XG5cbiAgICBpZiAoY2FsbGJhY2sgIT09IHVuZGVmaW5lZCkge1xuICAgICAgY2FsbGJhY2soKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogTmVpdGhlciBuZXcgbm9yIGxlZ2FjeSBwbGF0Zm9ybSBzaG91bGQgdXNlIHRoaXMgbWV0aG9kIGRpcmVjdGx5LlxuICAgKi9cbiAgcHVibGljIGNsb3NlKGNhbGxiYWNrPzogKGVycm9yPzogRXJyb3IpID0+IHZvaWQpIHtcbiAgICB0aGlzLmxvZy5kZWJ1ZygnXCJjbG9zZVwiIGhhcyBiZWVuIGNhbGxlZC4nKTtcblxuICAgIGlmIChjYWxsYmFjayAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBjYWxsYmFjaygpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBOZWl0aGVyIG5ldyBub3IgbGVnYWN5IHBsYXRmb3JtIHNob3VsZCB1c2UgdGhpcyBtZXRob2QgZGlyZWN0bHkuXG4gICAqL1xuICBwdWJsaWMgZ2V0Q29ubmVjdGlvbnMoY2FsbGJhY2s6IChlcnJvcjogRXJyb3IgfCBudWxsLCBjb3VudD86IG51bWJlcikgPT4gdm9pZCkge1xuICAgIHRoaXMubG9nLmRlYnVnKCdcImdldENvbm5lY3Rpb25zXCIgaGFzIGJlZW4gY2FsbGVkLicpO1xuXG4gICAgLy8gVGhpcyBtZXRob2QgaXMgdXNlZCBieSBgZXZlbi1iZXR0ZXJgIChiZWZvcmUgd2Ugc3RhcnQgcGxhdGZvcm0pLlxuICAgIC8vIEl0IHNlZW1zIHRoYXQgdGhlIGxhdGVzdCB2ZXJzaW9uIG9mIHBhcmVudCBgZ29vZGAgZG9lc24ndCB1c2UgdGhpcyBhbnltb3JlLlxuICAgIHRoaXMuc2VydmVyLmdldENvbm5lY3Rpb25zKGNhbGxiYWNrKTtcbiAgfVxufVxuIl19