"use strict";
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const source_configuration_1 = require("../../../common/source_configuration");
exports.createSourcesResolvers = (libs) => ({
    Query: {
        async source(root, args, { req }) {
            const requestedSourceConfiguration = await libs.sources.getSourceConfiguration(req, args.id);
            return requestedSourceConfiguration;
        },
        async allSources(root, args, { req }) {
            const sourceConfigurations = await libs.sources.getAllSourceConfigurations(req);
            return sourceConfigurations;
        },
    },
    InfraSource: {
        async status(source) {
            return source;
        },
    },
    Mutation: {
        async createSource(root, args, { req }) {
            const sourceConfiguration = await libs.sources.createSourceConfiguration(req, args.id, compactObject({
                ...args.source,
                fields: args.source.fields ? compactObject(args.source.fields) : undefined,
            }));
            return {
                source: sourceConfiguration,
            };
        },
        async deleteSource(root, args, { req }) {
            await libs.sources.deleteSourceConfiguration(req, args.id);
            return {
                id: args.id,
            };
        },
        async updateSource(root, args, { req }) {
            const updaters = args.changes.map(source_configuration_1.convertChangeToUpdater);
            const updatedSourceConfiguration = await libs.sources.updateSourceConfiguration(req, args.id, updaters);
            return {
                source: updatedSourceConfiguration,
            };
        },
    },
});
const compactObject = (obj) => Object.entries(obj).reduce((accumulatedObj, [key, value]) => typeof value === 'undefined' || value === null
    ? accumulatedObj
    : {
        ...accumulatedObj,
        [key]: value,
    }, {});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2hvbWUvYW50aG9ueS9naXRfd29ya3NwYWNlcy9raWJhbmEveC1wYWNrL3BsdWdpbnMvaW5mcmEvc2VydmVyL2dyYXBocWwvc291cmNlcy9yZXNvbHZlcnMudHMiLCJzb3VyY2VzIjpbIi9ob21lL2FudGhvbnkvZ2l0X3dvcmtzcGFjZXMva2liYW5hL3gtcGFjay9wbHVnaW5zL2luZnJhL3NlcnZlci9ncmFwaHFsL3NvdXJjZXMvcmVzb2x2ZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7OztHQUlHOztBQUVILCtFQUE4RTtBQTZDakUsUUFBQSxzQkFBc0IsR0FBRyxDQUNwQyxJQUEwQixFQWMxQixFQUFFLENBQUMsQ0FBQztJQUNKLEtBQUssRUFBRTtRQUNMLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxFQUFFLEdBQUcsRUFBRTtZQUM5QixNQUFNLDRCQUE0QixHQUFHLE1BQU0sSUFBSSxDQUFDLE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBRTdGLE9BQU8sNEJBQTRCLENBQUM7UUFDdEMsQ0FBQztRQUNELEtBQUssQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxFQUFFLEdBQUcsRUFBRTtZQUNsQyxNQUFNLG9CQUFvQixHQUFHLE1BQU0sSUFBSSxDQUFDLE9BQU8sQ0FBQywwQkFBMEIsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUVoRixPQUFPLG9CQUFvQixDQUFDO1FBQzlCLENBQUM7S0FDRjtJQUNELFdBQVcsRUFBRTtRQUNYLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTTtZQUNqQixPQUFPLE1BQU0sQ0FBQztRQUNoQixDQUFDO0tBQ0Y7SUFDRCxRQUFRLEVBQUU7UUFDUixLQUFLLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsRUFBRSxHQUFHLEVBQUU7WUFDcEMsTUFBTSxtQkFBbUIsR0FBRyxNQUFNLElBQUksQ0FBQyxPQUFPLENBQUMseUJBQXlCLENBQ3RFLEdBQUcsRUFDSCxJQUFJLENBQUMsRUFBRSxFQUNQLGFBQWEsQ0FBQztnQkFDWixHQUFHLElBQUksQ0FBQyxNQUFNO2dCQUNkLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVM7YUFDM0UsQ0FBQyxDQUNILENBQUM7WUFFRixPQUFPO2dCQUNMLE1BQU0sRUFBRSxtQkFBbUI7YUFDNUIsQ0FBQztRQUNKLENBQUM7UUFDRCxLQUFLLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsRUFBRSxHQUFHLEVBQUU7WUFDcEMsTUFBTSxJQUFJLENBQUMsT0FBTyxDQUFDLHlCQUF5QixDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7WUFFM0QsT0FBTztnQkFDTCxFQUFFLEVBQUUsSUFBSSxDQUFDLEVBQUU7YUFDWixDQUFDO1FBQ0osQ0FBQztRQUNELEtBQUssQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxFQUFFLEdBQUcsRUFBRTtZQUNwQyxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyw2Q0FBc0IsQ0FBQyxDQUFDO1lBRTFELE1BQU0sMEJBQTBCLEdBQUcsTUFBTSxJQUFJLENBQUMsT0FBTyxDQUFDLHlCQUF5QixDQUM3RSxHQUFHLEVBQ0gsSUFBSSxDQUFDLEVBQUUsRUFDUCxRQUFRLENBQ1QsQ0FBQztZQUVGLE9BQU87Z0JBQ0wsTUFBTSxFQUFFLDBCQUEwQjthQUNuQyxDQUFDO1FBQ0osQ0FBQztLQUNGO0NBQ0YsQ0FBQyxDQUFDO0FBSUgsTUFBTSxhQUFhLEdBQUcsQ0FBSSxHQUFNLEVBQW9CLEVBQUUsQ0FDcEQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQ3hCLENBQUMsY0FBYyxFQUFFLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxFQUFFLEVBQUUsQ0FDL0IsT0FBTyxLQUFLLEtBQUssV0FBVyxJQUFJLEtBQUssS0FBSyxJQUFJO0lBQzVDLENBQUMsQ0FBQyxjQUFjO0lBQ2hCLENBQUMsQ0FBQztRQUNFLEdBQUksY0FBc0I7UUFDMUIsQ0FBQyxHQUFHLENBQUMsRUFBRSxLQUFLO0tBQ2IsRUFDUCxFQUFzQixDQUN2QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBFbGFzdGljc2VhcmNoIEIuVi4gYW5kL29yIGxpY2Vuc2VkIHRvIEVsYXN0aWNzZWFyY2ggQi5WLiB1bmRlciBvbmVcbiAqIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiBMaWNlbnNlZCB1bmRlciB0aGUgRWxhc3RpYyBMaWNlbnNlO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBFbGFzdGljIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgY29udmVydENoYW5nZVRvVXBkYXRlciB9IGZyb20gJy4uLy4uLy4uL2NvbW1vbi9zb3VyY2VfY29uZmlndXJhdGlvbic7XG5pbXBvcnQgeyBJbmZyYVNvdXJjZVJlc29sdmVycywgTXV0YXRpb25SZXNvbHZlcnMsIFF1ZXJ5UmVzb2x2ZXJzIH0gZnJvbSAnLi4vLi4vZ3JhcGhxbC90eXBlcyc7XG5pbXBvcnQgeyBJbmZyYVNvdXJjZVN0YXR1cyB9IGZyb20gJy4uLy4uL2xpYi9zb3VyY2Vfc3RhdHVzJztcbmltcG9ydCB7IEluZnJhU291cmNlcyB9IGZyb20gJy4uLy4uL2xpYi9zb3VyY2VzJztcbmltcG9ydCB7XG4gIENoaWxkUmVzb2x2ZXJPZixcbiAgSW5mcmFSZXNvbHZlck9mLFxuICBJbmZyYVJlc29sdmVyV2l0aEZpZWxkcyxcbiAgUmVzdWx0T2YsXG59IGZyb20gJy4uLy4uL3V0aWxzL3R5cGVkX3Jlc29sdmVycyc7XG5cbmV4cG9ydCB0eXBlIFF1ZXJ5U291cmNlUmVzb2x2ZXIgPSBJbmZyYVJlc29sdmVyV2l0aEZpZWxkczxcbiAgUXVlcnlSZXNvbHZlcnMuU291cmNlUmVzb2x2ZXIsXG4gICdpZCcgfCAndmVyc2lvbicgfCAndXBkYXRlZEF0JyB8ICdjb25maWd1cmF0aW9uJ1xuPjtcblxuZXhwb3J0IHR5cGUgUXVlcnlBbGxTb3VyY2VzUmVzb2x2ZXIgPSBJbmZyYVJlc29sdmVyV2l0aEZpZWxkczxcbiAgUXVlcnlSZXNvbHZlcnMuQWxsU291cmNlc1Jlc29sdmVyLFxuICAnaWQnIHwgJ3ZlcnNpb24nIHwgJ3VwZGF0ZWRBdCcgfCAnY29uZmlndXJhdGlvbidcbj47XG5cbmV4cG9ydCB0eXBlIEluZnJhU291cmNlU3RhdHVzUmVzb2x2ZXIgPSBDaGlsZFJlc29sdmVyT2Y8XG4gIEluZnJhUmVzb2x2ZXJPZjxJbmZyYVNvdXJjZVJlc29sdmVycy5TdGF0dXNSZXNvbHZlcjxSZXN1bHRPZjxRdWVyeVNvdXJjZVJlc29sdmVyPj4+LFxuICBRdWVyeVNvdXJjZVJlc29sdmVyXG4+O1xuXG5leHBvcnQgdHlwZSBNdXRhdGlvbkNyZWF0ZVNvdXJjZVJlc29sdmVyID0gSW5mcmFSZXNvbHZlck9mPFxuICBNdXRhdGlvblJlc29sdmVycy5DcmVhdGVTb3VyY2VSZXNvbHZlcjx7XG4gICAgc291cmNlOiBSZXN1bHRPZjxRdWVyeVNvdXJjZVJlc29sdmVyPjtcbiAgfT5cbj47XG5cbmV4cG9ydCB0eXBlIE11dGF0aW9uRGVsZXRlU291cmNlUmVzb2x2ZXIgPSBJbmZyYVJlc29sdmVyT2Y8TXV0YXRpb25SZXNvbHZlcnMuRGVsZXRlU291cmNlUmVzb2x2ZXI+O1xuXG5leHBvcnQgdHlwZSBNdXRhdGlvblVwZGF0ZVNvdXJjZVJlc29sdmVyID0gSW5mcmFSZXNvbHZlck9mPFxuICBNdXRhdGlvblJlc29sdmVycy5VcGRhdGVTb3VyY2VSZXNvbHZlcjx7XG4gICAgc291cmNlOiBSZXN1bHRPZjxRdWVyeVNvdXJjZVJlc29sdmVyPjtcbiAgfT5cbj47XG5cbmludGVyZmFjZSBTb3VyY2VzUmVzb2x2ZXJzRGVwcyB7XG4gIHNvdXJjZXM6IEluZnJhU291cmNlcztcbiAgc291cmNlU3RhdHVzOiBJbmZyYVNvdXJjZVN0YXR1cztcbn1cblxuZXhwb3J0IGNvbnN0IGNyZWF0ZVNvdXJjZXNSZXNvbHZlcnMgPSAoXG4gIGxpYnM6IFNvdXJjZXNSZXNvbHZlcnNEZXBzXG4pOiB7XG4gIFF1ZXJ5OiB7XG4gICAgc291cmNlOiBRdWVyeVNvdXJjZVJlc29sdmVyO1xuICAgIGFsbFNvdXJjZXM6IFF1ZXJ5QWxsU291cmNlc1Jlc29sdmVyO1xuICB9O1xuICBJbmZyYVNvdXJjZToge1xuICAgIHN0YXR1czogSW5mcmFTb3VyY2VTdGF0dXNSZXNvbHZlcjtcbiAgfTtcbiAgTXV0YXRpb246IHtcbiAgICBjcmVhdGVTb3VyY2U6IE11dGF0aW9uQ3JlYXRlU291cmNlUmVzb2x2ZXI7XG4gICAgZGVsZXRlU291cmNlOiBNdXRhdGlvbkRlbGV0ZVNvdXJjZVJlc29sdmVyO1xuICAgIHVwZGF0ZVNvdXJjZTogTXV0YXRpb25VcGRhdGVTb3VyY2VSZXNvbHZlcjtcbiAgfTtcbn0gPT4gKHtcbiAgUXVlcnk6IHtcbiAgICBhc3luYyBzb3VyY2Uocm9vdCwgYXJncywgeyByZXEgfSkge1xuICAgICAgY29uc3QgcmVxdWVzdGVkU291cmNlQ29uZmlndXJhdGlvbiA9IGF3YWl0IGxpYnMuc291cmNlcy5nZXRTb3VyY2VDb25maWd1cmF0aW9uKHJlcSwgYXJncy5pZCk7XG5cbiAgICAgIHJldHVybiByZXF1ZXN0ZWRTb3VyY2VDb25maWd1cmF0aW9uO1xuICAgIH0sXG4gICAgYXN5bmMgYWxsU291cmNlcyhyb290LCBhcmdzLCB7IHJlcSB9KSB7XG4gICAgICBjb25zdCBzb3VyY2VDb25maWd1cmF0aW9ucyA9IGF3YWl0IGxpYnMuc291cmNlcy5nZXRBbGxTb3VyY2VDb25maWd1cmF0aW9ucyhyZXEpO1xuXG4gICAgICByZXR1cm4gc291cmNlQ29uZmlndXJhdGlvbnM7XG4gICAgfSxcbiAgfSxcbiAgSW5mcmFTb3VyY2U6IHtcbiAgICBhc3luYyBzdGF0dXMoc291cmNlKSB7XG4gICAgICByZXR1cm4gc291cmNlO1xuICAgIH0sXG4gIH0sXG4gIE11dGF0aW9uOiB7XG4gICAgYXN5bmMgY3JlYXRlU291cmNlKHJvb3QsIGFyZ3MsIHsgcmVxIH0pIHtcbiAgICAgIGNvbnN0IHNvdXJjZUNvbmZpZ3VyYXRpb24gPSBhd2FpdCBsaWJzLnNvdXJjZXMuY3JlYXRlU291cmNlQ29uZmlndXJhdGlvbihcbiAgICAgICAgcmVxLFxuICAgICAgICBhcmdzLmlkLFxuICAgICAgICBjb21wYWN0T2JqZWN0KHtcbiAgICAgICAgICAuLi5hcmdzLnNvdXJjZSxcbiAgICAgICAgICBmaWVsZHM6IGFyZ3Muc291cmNlLmZpZWxkcyA/IGNvbXBhY3RPYmplY3QoYXJncy5zb3VyY2UuZmllbGRzKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgfSlcbiAgICAgICk7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHNvdXJjZTogc291cmNlQ29uZmlndXJhdGlvbixcbiAgICAgIH07XG4gICAgfSxcbiAgICBhc3luYyBkZWxldGVTb3VyY2Uocm9vdCwgYXJncywgeyByZXEgfSkge1xuICAgICAgYXdhaXQgbGlicy5zb3VyY2VzLmRlbGV0ZVNvdXJjZUNvbmZpZ3VyYXRpb24ocmVxLCBhcmdzLmlkKTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaWQ6IGFyZ3MuaWQsXG4gICAgICB9O1xuICAgIH0sXG4gICAgYXN5bmMgdXBkYXRlU291cmNlKHJvb3QsIGFyZ3MsIHsgcmVxIH0pIHtcbiAgICAgIGNvbnN0IHVwZGF0ZXJzID0gYXJncy5jaGFuZ2VzLm1hcChjb252ZXJ0Q2hhbmdlVG9VcGRhdGVyKTtcblxuICAgICAgY29uc3QgdXBkYXRlZFNvdXJjZUNvbmZpZ3VyYXRpb24gPSBhd2FpdCBsaWJzLnNvdXJjZXMudXBkYXRlU291cmNlQ29uZmlndXJhdGlvbihcbiAgICAgICAgcmVxLFxuICAgICAgICBhcmdzLmlkLFxuICAgICAgICB1cGRhdGVyc1xuICAgICAgKTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc291cmNlOiB1cGRhdGVkU291cmNlQ29uZmlndXJhdGlvbixcbiAgICAgIH07XG4gICAgfSxcbiAgfSxcbn0pO1xuXG50eXBlIENvbXBhY3RPYmplY3Q8VD4gPSB7IFtLIGluIGtleW9mIFRdOiBOb25OdWxsYWJsZTxUW0tdPiB9O1xuXG5jb25zdCBjb21wYWN0T2JqZWN0ID0gPFQ+KG9iajogVCk6IENvbXBhY3RPYmplY3Q8VD4gPT5cbiAgT2JqZWN0LmVudHJpZXMob2JqKS5yZWR1Y2U8Q29tcGFjdE9iamVjdDxUPj4oXG4gICAgKGFjY3VtdWxhdGVkT2JqLCBba2V5LCB2YWx1ZV0pID0+XG4gICAgICB0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnIHx8IHZhbHVlID09PSBudWxsXG4gICAgICAgID8gYWNjdW11bGF0ZWRPYmpcbiAgICAgICAgOiB7XG4gICAgICAgICAgICAuLi4oYWNjdW11bGF0ZWRPYmogYXMgYW55KSxcbiAgICAgICAgICAgIFtrZXldOiB2YWx1ZSxcbiAgICAgICAgICB9LFxuICAgIHt9IGFzIENvbXBhY3RPYmplY3Q8VD5cbiAgKTtcbiJdfQ==