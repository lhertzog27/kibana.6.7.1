"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */
const numeral_1 = tslib_1.__importDefault(require("@elastic/numeral"));
const lodash_1 = require("lodash");
const KIBANA_MAX_SIZE_BYTES_PATH = 'xpack.reporting.csv.maxSizeBytes';
const ES_MAX_SIZE_BYTES_PATH = 'http.max_content_length';
async function validateMaxContentLength(server, log) {
    const config = server.config();
    const { callWithInternalUser } = server.plugins.elasticsearch.getCluster('data');
    try {
        const elasticClusterSettingsResponse = await callWithInternalUser('cluster.getSettings', {
            includeDefaults: true,
        });
        const { persistent, transient, defaults: defaultSettings } = elasticClusterSettingsResponse;
        const elasticClusterSettings = lodash_1.defaults({}, persistent, transient, defaultSettings);
        const elasticSearchMaxContent = lodash_1.get(elasticClusterSettings, 'http.max_content_length', '100mb');
        const elasticSearchMaxContentBytes = numeral_1.default().unformat(elasticSearchMaxContent.toUpperCase());
        const kibanaMaxContentBytes = config.get(KIBANA_MAX_SIZE_BYTES_PATH);
        if (kibanaMaxContentBytes > elasticSearchMaxContentBytes) {
            log(`${KIBANA_MAX_SIZE_BYTES_PATH} (${kibanaMaxContentBytes}) is higher than ElasticSearch's ${ES_MAX_SIZE_BYTES_PATH} (${elasticSearchMaxContentBytes}). ` +
                `Please set ${ES_MAX_SIZE_BYTES_PATH} in ElasticSearch to match, or lower your ${KIBANA_MAX_SIZE_BYTES_PATH} in Kibana to avoid this warning.`);
        }
    }
    catch (e) {
        log(`Could not retrieve cluster settings, because of ${e.message}`);
    }
}
exports.validateMaxContentLength = validateMaxContentLength;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2hvbWUvYW50aG9ueS9naXRfd29ya3NwYWNlcy9raWJhbmEveC1wYWNrL3BsdWdpbnMvcmVwb3J0aW5nL3NlcnZlci9saWIvdmFsaWRhdGVfbWF4X2NvbnRlbnRfbGVuZ3RoLnRzIiwic291cmNlcyI6WyIvaG9tZS9hbnRob255L2dpdF93b3Jrc3BhY2VzL2tpYmFuYS94LXBhY2svcGx1Z2lucy9yZXBvcnRpbmcvc2VydmVyL2xpYi92YWxpZGF0ZV9tYXhfY29udGVudF9sZW5ndGgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUE7Ozs7R0FJRztBQUNILHVFQUF1QztBQUN2QyxtQ0FBdUM7QUFDdkMsTUFBTSwwQkFBMEIsR0FBRyxrQ0FBa0MsQ0FBQztBQUN0RSxNQUFNLHNCQUFzQixHQUFHLHlCQUF5QixDQUFDO0FBRWxELEtBQUssVUFBVSx3QkFBd0IsQ0FBQyxNQUFXLEVBQUUsR0FBNkI7SUFDdkYsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQy9CLE1BQU0sRUFBRSxvQkFBb0IsRUFBRSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRixJQUFJO1FBQ0YsTUFBTSw4QkFBOEIsR0FBRyxNQUFNLG9CQUFvQixDQUFDLHFCQUFxQixFQUFFO1lBQ3ZGLGVBQWUsRUFBRSxJQUFJO1NBQ3RCLENBQUMsQ0FBQztRQUNILE1BQU0sRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxlQUFlLEVBQUUsR0FBRyw4QkFBOEIsQ0FBQztRQUM1RixNQUFNLHNCQUFzQixHQUFHLGlCQUFRLENBQUMsRUFBRSxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsZUFBZSxDQUFDLENBQUM7UUFFcEYsTUFBTSx1QkFBdUIsR0FBRyxZQUFHLENBQUMsc0JBQXNCLEVBQUUseUJBQXlCLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDaEcsTUFBTSw0QkFBNEIsR0FBRyxpQkFBTyxFQUFFLENBQUMsUUFBUSxDQUFDLHVCQUF1QixDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7UUFDL0YsTUFBTSxxQkFBcUIsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLDBCQUEwQixDQUFDLENBQUM7UUFFckUsSUFBSSxxQkFBcUIsR0FBRyw0QkFBNEIsRUFBRTtZQUN4RCxHQUFHLENBQ0QsR0FBRywwQkFBMEIsS0FBSyxxQkFBcUIsb0NBQW9DLHNCQUFzQixLQUFLLDRCQUE0QixLQUFLO2dCQUNySixjQUFjLHNCQUFzQiw2Q0FBNkMsMEJBQTBCLG1DQUFtQyxDQUNqSixDQUFDO1NBQ0g7S0FDRjtJQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ1YsR0FBRyxDQUFDLG1EQUFtRCxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztLQUNyRTtBQUNILENBQUM7QUF4QkQsNERBd0JDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBFbGFzdGljc2VhcmNoIEIuVi4gYW5kL29yIGxpY2Vuc2VkIHRvIEVsYXN0aWNzZWFyY2ggQi5WLiB1bmRlciBvbmVcbiAqIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiBMaWNlbnNlZCB1bmRlciB0aGUgRWxhc3RpYyBMaWNlbnNlO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBFbGFzdGljIExpY2Vuc2UuXG4gKi9cbmltcG9ydCBudW1lcmFsIGZyb20gJ0BlbGFzdGljL251bWVyYWwnO1xuaW1wb3J0IHsgZGVmYXVsdHMsIGdldCB9IGZyb20gJ2xvZGFzaCc7XG5jb25zdCBLSUJBTkFfTUFYX1NJWkVfQllURVNfUEFUSCA9ICd4cGFjay5yZXBvcnRpbmcuY3N2Lm1heFNpemVCeXRlcyc7XG5jb25zdCBFU19NQVhfU0laRV9CWVRFU19QQVRIID0gJ2h0dHAubWF4X2NvbnRlbnRfbGVuZ3RoJztcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHZhbGlkYXRlTWF4Q29udGVudExlbmd0aChzZXJ2ZXI6IGFueSwgbG9nOiAobWVzc2FnZTogc3RyaW5nKSA9PiBhbnkpIHtcbiAgY29uc3QgY29uZmlnID0gc2VydmVyLmNvbmZpZygpO1xuICBjb25zdCB7IGNhbGxXaXRoSW50ZXJuYWxVc2VyIH0gPSBzZXJ2ZXIucGx1Z2lucy5lbGFzdGljc2VhcmNoLmdldENsdXN0ZXIoJ2RhdGEnKTtcblxuICB0cnkge1xuICAgIGNvbnN0IGVsYXN0aWNDbHVzdGVyU2V0dGluZ3NSZXNwb25zZSA9IGF3YWl0IGNhbGxXaXRoSW50ZXJuYWxVc2VyKCdjbHVzdGVyLmdldFNldHRpbmdzJywge1xuICAgICAgaW5jbHVkZURlZmF1bHRzOiB0cnVlLFxuICAgIH0pO1xuICAgIGNvbnN0IHsgcGVyc2lzdGVudCwgdHJhbnNpZW50LCBkZWZhdWx0czogZGVmYXVsdFNldHRpbmdzIH0gPSBlbGFzdGljQ2x1c3RlclNldHRpbmdzUmVzcG9uc2U7XG4gICAgY29uc3QgZWxhc3RpY0NsdXN0ZXJTZXR0aW5ncyA9IGRlZmF1bHRzKHt9LCBwZXJzaXN0ZW50LCB0cmFuc2llbnQsIGRlZmF1bHRTZXR0aW5ncyk7XG5cbiAgICBjb25zdCBlbGFzdGljU2VhcmNoTWF4Q29udGVudCA9IGdldChlbGFzdGljQ2x1c3RlclNldHRpbmdzLCAnaHR0cC5tYXhfY29udGVudF9sZW5ndGgnLCAnMTAwbWInKTtcbiAgICBjb25zdCBlbGFzdGljU2VhcmNoTWF4Q29udGVudEJ5dGVzID0gbnVtZXJhbCgpLnVuZm9ybWF0KGVsYXN0aWNTZWFyY2hNYXhDb250ZW50LnRvVXBwZXJDYXNlKCkpO1xuICAgIGNvbnN0IGtpYmFuYU1heENvbnRlbnRCeXRlcyA9IGNvbmZpZy5nZXQoS0lCQU5BX01BWF9TSVpFX0JZVEVTX1BBVEgpO1xuXG4gICAgaWYgKGtpYmFuYU1heENvbnRlbnRCeXRlcyA+IGVsYXN0aWNTZWFyY2hNYXhDb250ZW50Qnl0ZXMpIHtcbiAgICAgIGxvZyhcbiAgICAgICAgYCR7S0lCQU5BX01BWF9TSVpFX0JZVEVTX1BBVEh9ICgke2tpYmFuYU1heENvbnRlbnRCeXRlc30pIGlzIGhpZ2hlciB0aGFuIEVsYXN0aWNTZWFyY2gncyAke0VTX01BWF9TSVpFX0JZVEVTX1BBVEh9ICgke2VsYXN0aWNTZWFyY2hNYXhDb250ZW50Qnl0ZXN9KS4gYCArXG4gICAgICAgICAgYFBsZWFzZSBzZXQgJHtFU19NQVhfU0laRV9CWVRFU19QQVRIfSBpbiBFbGFzdGljU2VhcmNoIHRvIG1hdGNoLCBvciBsb3dlciB5b3VyICR7S0lCQU5BX01BWF9TSVpFX0JZVEVTX1BBVEh9IGluIEtpYmFuYSB0byBhdm9pZCB0aGlzIHdhcm5pbmcuYFxuICAgICAgKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBsb2coYENvdWxkIG5vdCByZXRyaWV2ZSBjbHVzdGVyIHNldHRpbmdzLCBiZWNhdXNlIG9mICR7ZS5tZXNzYWdlfWApO1xuICB9XG59XG4iXX0=