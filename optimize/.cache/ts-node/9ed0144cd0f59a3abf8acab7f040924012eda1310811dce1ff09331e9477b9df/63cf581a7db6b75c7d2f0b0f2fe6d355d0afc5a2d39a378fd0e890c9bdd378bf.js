"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */
const lodash_1 = require("lodash");
async function getDeprecationLoggingStatus(callWithRequest, req) {
    const response = await callWithRequest(req, 'cluster.getSettings', {
        includeDefaults: true,
    });
    return {
        isEnabled: isDeprecationLoggingEnabled(response),
    };
}
exports.getDeprecationLoggingStatus = getDeprecationLoggingStatus;
async function setDeprecationLogging(callWithRequest, req, isEnabled) {
    const response = await callWithRequest(req, 'cluster.putSettings', {
        body: {
            transient: {
                'logger.deprecation': isEnabled ? 'WARN' : 'ERROR',
            },
        },
    });
    return {
        isEnabled: isDeprecationLoggingEnabled(response),
    };
}
exports.setDeprecationLogging = setDeprecationLogging;
function isDeprecationLoggingEnabled(settings) {
    const deprecationLogLevel = ['default', 'persistent', 'transient'].reduce((currentLogLevel, settingsTier) => lodash_1.get(settings, [settingsTier, 'logger', 'deprecation'], currentLogLevel), 'WARN');
    return ['ALL', 'TRACE', 'DEBUG', 'INFO', 'WARN'].includes(deprecationLogLevel);
}
exports.isDeprecationLoggingEnabled = isDeprecationLoggingEnabled;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2hvbWUvYW50aG9ueS9naXRfd29ya3NwYWNlcy9raWJhbmEveC1wYWNrL3BsdWdpbnMvdXBncmFkZV9hc3Npc3RhbnQvc2VydmVyL2xpYi9lc19kZXByZWNhdGlvbl9sb2dnaW5nX2FwaXMudHMiLCJzb3VyY2VzIjpbIi9ob21lL2FudGhvbnkvZ2l0X3dvcmtzcGFjZXMva2liYW5hL3gtcGFjay9wbHVnaW5zL3VwZ3JhZGVfYXNzaXN0YW50L3NlcnZlci9saWIvZXNfZGVwcmVjYXRpb25fbG9nZ2luZ19hcGlzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7R0FJRztBQUNILG1DQUE2QjtBQVN0QixLQUFLLFVBQVUsMkJBQTJCLENBQy9DLGVBQXVDLEVBQ3ZDLEdBQW1CO0lBRW5CLE1BQU0sUUFBUSxHQUFHLE1BQU0sZUFBZSxDQUFDLEdBQUcsRUFBRSxxQkFBcUIsRUFBRTtRQUNqRSxlQUFlLEVBQUUsSUFBSTtLQUN0QixDQUFDLENBQUM7SUFFSCxPQUFPO1FBQ0wsU0FBUyxFQUFFLDJCQUEyQixDQUFDLFFBQVEsQ0FBQztLQUNqRCxDQUFDO0FBQ0osQ0FBQztBQVhELGtFQVdDO0FBRU0sS0FBSyxVQUFVLHFCQUFxQixDQUN6QyxlQUF1QyxFQUN2QyxHQUFtQixFQUNuQixTQUFrQjtJQUVsQixNQUFNLFFBQVEsR0FBRyxNQUFNLGVBQWUsQ0FBQyxHQUFHLEVBQUUscUJBQXFCLEVBQUU7UUFDakUsSUFBSSxFQUFFO1lBQ0osU0FBUyxFQUFFO2dCQUNULG9CQUFvQixFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxPQUFPO2FBQ25EO1NBQ0Y7S0FDRixDQUFDLENBQUM7SUFFSCxPQUFPO1FBQ0wsU0FBUyxFQUFFLDJCQUEyQixDQUFDLFFBQVEsQ0FBQztLQUNqRCxDQUFDO0FBQ0osQ0FBQztBQWhCRCxzREFnQkM7QUFFRCxTQUFnQiwyQkFBMkIsQ0FBQyxRQUFhO0lBQ3ZELE1BQU0sbUJBQW1CLEdBQUcsQ0FBQyxTQUFTLEVBQUUsWUFBWSxFQUFFLFdBQVcsQ0FBQyxDQUFDLE1BQU0sQ0FDdkUsQ0FBQyxlQUFlLEVBQUUsWUFBWSxFQUFFLEVBQUUsQ0FDaEMsWUFBRyxDQUFDLFFBQVEsRUFBRSxDQUFDLFlBQVksRUFBRSxRQUFRLEVBQUUsYUFBYSxDQUFDLEVBQUUsZUFBZSxDQUFDLEVBQ3pFLE1BQU0sQ0FDUCxDQUFDO0lBRUYsT0FBTyxDQUFDLEtBQUssRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQyxRQUFRLENBQUMsbUJBQW1CLENBQUMsQ0FBQztBQUNqRixDQUFDO0FBUkQsa0VBUUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IEVsYXN0aWNzZWFyY2ggQi5WLiBhbmQvb3IgbGljZW5zZWQgdG8gRWxhc3RpY3NlYXJjaCBCLlYuIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuIExpY2Vuc2VkIHVuZGVyIHRoZSBFbGFzdGljIExpY2Vuc2U7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIEVsYXN0aWMgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgZ2V0IH0gZnJvbSAnbG9kYXNoJztcblxuaW1wb3J0IHsgTGVnYWN5IH0gZnJvbSAna2liYW5hJztcbmltcG9ydCB7IENhbGxDbHVzdGVyV2l0aFJlcXVlc3QgfSBmcm9tICdzcmMvbGVnYWN5L2NvcmVfcGx1Z2lucy9lbGFzdGljc2VhcmNoJztcblxuaW50ZXJmYWNlIERlcHJlY2F0aW9uTG9nZ2luZ1N0YXR1cyB7XG4gIGlzRW5hYmxlZDogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldERlcHJlY2F0aW9uTG9nZ2luZ1N0YXR1cyhcbiAgY2FsbFdpdGhSZXF1ZXN0OiBDYWxsQ2x1c3RlcldpdGhSZXF1ZXN0LFxuICByZXE6IExlZ2FjeS5SZXF1ZXN0XG4pOiBQcm9taXNlPERlcHJlY2F0aW9uTG9nZ2luZ1N0YXR1cz4ge1xuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGNhbGxXaXRoUmVxdWVzdChyZXEsICdjbHVzdGVyLmdldFNldHRpbmdzJywge1xuICAgIGluY2x1ZGVEZWZhdWx0czogdHJ1ZSxcbiAgfSk7XG5cbiAgcmV0dXJuIHtcbiAgICBpc0VuYWJsZWQ6IGlzRGVwcmVjYXRpb25Mb2dnaW5nRW5hYmxlZChyZXNwb25zZSksXG4gIH07XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzZXREZXByZWNhdGlvbkxvZ2dpbmcoXG4gIGNhbGxXaXRoUmVxdWVzdDogQ2FsbENsdXN0ZXJXaXRoUmVxdWVzdCxcbiAgcmVxOiBMZWdhY3kuUmVxdWVzdCxcbiAgaXNFbmFibGVkOiBib29sZWFuXG4pOiBQcm9taXNlPERlcHJlY2F0aW9uTG9nZ2luZ1N0YXR1cz4ge1xuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGNhbGxXaXRoUmVxdWVzdChyZXEsICdjbHVzdGVyLnB1dFNldHRpbmdzJywge1xuICAgIGJvZHk6IHtcbiAgICAgIHRyYW5zaWVudDoge1xuICAgICAgICAnbG9nZ2VyLmRlcHJlY2F0aW9uJzogaXNFbmFibGVkID8gJ1dBUk4nIDogJ0VSUk9SJyxcbiAgICAgIH0sXG4gICAgfSxcbiAgfSk7XG5cbiAgcmV0dXJuIHtcbiAgICBpc0VuYWJsZWQ6IGlzRGVwcmVjYXRpb25Mb2dnaW5nRW5hYmxlZChyZXNwb25zZSksXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0RlcHJlY2F0aW9uTG9nZ2luZ0VuYWJsZWQoc2V0dGluZ3M6IGFueSkge1xuICBjb25zdCBkZXByZWNhdGlvbkxvZ0xldmVsID0gWydkZWZhdWx0JywgJ3BlcnNpc3RlbnQnLCAndHJhbnNpZW50J10ucmVkdWNlKFxuICAgIChjdXJyZW50TG9nTGV2ZWwsIHNldHRpbmdzVGllcikgPT5cbiAgICAgIGdldChzZXR0aW5ncywgW3NldHRpbmdzVGllciwgJ2xvZ2dlcicsICdkZXByZWNhdGlvbiddLCBjdXJyZW50TG9nTGV2ZWwpLFxuICAgICdXQVJOJ1xuICApO1xuXG4gIHJldHVybiBbJ0FMTCcsICdUUkFDRScsICdERUJVRycsICdJTkZPJywgJ1dBUk4nXS5pbmNsdWRlcyhkZXByZWNhdGlvbkxvZ0xldmVsKTtcbn1cbiJdfQ==