"use strict";
/*
 * Licensed to Elasticsearch B.V. under one or more contributor
 * license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch B.V. licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const path_1 = require("path");
const minimatch_1 = require("minimatch");
const typescript_1 = require("typescript");
const constants_1 = require("../constants");
function makeMatchers(directory, patterns) {
    return patterns.map(pattern => new minimatch_1.Minimatch(path_1.resolve(directory, pattern), {
        dot: true,
    }));
}
function parseTsConfig(path) {
    const { error, config } = typescript_1.parseConfigFileTextToJson(path, fs_1.readFileSync(path, 'utf8'));
    if (error) {
        throw error;
    }
    return config;
}
function testMatchers(matchers, path) {
    return matchers.some(matcher => matcher.match(path));
}
class Project {
    constructor(tsConfigPath, name) {
        this.tsConfigPath = tsConfigPath;
        this.config = parseTsConfig(tsConfigPath);
        const { files, include, exclude = [] } = this.config;
        if (files || !include) {
            throw new Error('tsconfig.json files in the Kibana repo must use "include" keys and not "files"');
        }
        this.directory = path_1.dirname(this.tsConfigPath);
        this.name = name || path_1.relative(constants_1.REPO_ROOT, this.directory) || path_1.basename(this.directory);
        this.include = makeMatchers(this.directory, include);
        this.exclude = makeMatchers(this.directory, exclude);
    }
    isAbsolutePathSelected(path) {
        return testMatchers(this.exclude, path) ? false : testMatchers(this.include, path);
    }
}
exports.Project = Project;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2hvbWUvYW50aG9ueS9naXRfd29ya3NwYWNlcy9raWJhbmEvc3JjL2Rldi90eXBlc2NyaXB0L3Byb2plY3QudHMiLCJzb3VyY2VzIjpbIi9ob21lL2FudGhvbnkvZ2l0X3dvcmtzcGFjZXMva2liYW5hL3NyYy9kZXYvdHlwZXNjcmlwdC9wcm9qZWN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FpQkc7O0FBRUgsMkJBQWtDO0FBQ2xDLCtCQUE0RDtBQUU1RCx5Q0FBa0Q7QUFDbEQsMkNBQXVEO0FBRXZELDRDQUF5QztBQUV6QyxTQUFTLFlBQVksQ0FBQyxTQUFpQixFQUFFLFFBQWtCO0lBQ3pELE9BQU8sUUFBUSxDQUFDLEdBQUcsQ0FDakIsT0FBTyxDQUFDLEVBQUUsQ0FDUixJQUFJLHFCQUFTLENBQUMsY0FBTyxDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsRUFBRTtRQUN6QyxHQUFHLEVBQUUsSUFBSTtLQUNWLENBQUMsQ0FDTCxDQUFDO0FBQ0osQ0FBQztBQUVELFNBQVMsYUFBYSxDQUFDLElBQVk7SUFDakMsTUFBTSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsR0FBRyxzQ0FBeUIsQ0FBQyxJQUFJLEVBQUUsaUJBQVksQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUV0RixJQUFJLEtBQUssRUFBRTtRQUNULE1BQU0sS0FBSyxDQUFDO0tBQ2I7SUFFRCxPQUFPLE1BQU0sQ0FBQztBQUNoQixDQUFDO0FBRUQsU0FBUyxZQUFZLENBQUMsUUFBc0IsRUFBRSxJQUFZO0lBQ3hELE9BQU8sUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztBQUN2RCxDQUFDO0FBRUQsTUFBYSxPQUFPO0lBUWxCLFlBQW1CLFlBQW9CLEVBQUUsSUFBYTtRQUFuQyxpQkFBWSxHQUFaLFlBQVksQ0FBUTtRQUNyQyxJQUFJLENBQUMsTUFBTSxHQUFHLGFBQWEsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUUxQyxNQUFNLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxPQUFPLEdBQUcsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLE1BSTdDLENBQUM7UUFFRixJQUFJLEtBQUssSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNyQixNQUFNLElBQUksS0FBSyxDQUNiLGdGQUFnRixDQUNqRixDQUFDO1NBQ0g7UUFFRCxJQUFJLENBQUMsU0FBUyxHQUFHLGNBQU8sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDNUMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLElBQUksZUFBUSxDQUFDLHFCQUFTLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLGVBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDcEYsSUFBSSxDQUFDLE9BQU8sR0FBRyxZQUFZLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUNyRCxJQUFJLENBQUMsT0FBTyxHQUFHLFlBQVksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3ZELENBQUM7SUFFTSxzQkFBc0IsQ0FBQyxJQUFZO1FBQ3hDLE9BQU8sWUFBWSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDckYsQ0FBQztDQUNGO0FBaENELDBCQWdDQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBMaWNlbnNlZCB0byBFbGFzdGljc2VhcmNoIEIuVi4gdW5kZXIgb25lIG9yIG1vcmUgY29udHJpYnV0b3JcbiAqIGxpY2Vuc2UgYWdyZWVtZW50cy4gU2VlIHRoZSBOT1RJQ0UgZmlsZSBkaXN0cmlidXRlZCB3aXRoXG4gKiB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gcmVnYXJkaW5nIGNvcHlyaWdodFxuICogb3duZXJzaGlwLiBFbGFzdGljc2VhcmNoIEIuVi4gbGljZW5zZXMgdGhpcyBmaWxlIHRvIHlvdSB1bmRlclxuICogdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heVxuICogbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyByZWFkRmlsZVN5bmMgfSBmcm9tICdmcyc7XG5pbXBvcnQgeyBiYXNlbmFtZSwgZGlybmFtZSwgcmVsYXRpdmUsIHJlc29sdmUgfSBmcm9tICdwYXRoJztcblxuaW1wb3J0IHsgSU1pbmltYXRjaCwgTWluaW1hdGNoIH0gZnJvbSAnbWluaW1hdGNoJztcbmltcG9ydCB7IHBhcnNlQ29uZmlnRmlsZVRleHRUb0pzb24gfSBmcm9tICd0eXBlc2NyaXB0JztcblxuaW1wb3J0IHsgUkVQT19ST09UIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcblxuZnVuY3Rpb24gbWFrZU1hdGNoZXJzKGRpcmVjdG9yeTogc3RyaW5nLCBwYXR0ZXJuczogc3RyaW5nW10pIHtcbiAgcmV0dXJuIHBhdHRlcm5zLm1hcChcbiAgICBwYXR0ZXJuID0+XG4gICAgICBuZXcgTWluaW1hdGNoKHJlc29sdmUoZGlyZWN0b3J5LCBwYXR0ZXJuKSwge1xuICAgICAgICBkb3Q6IHRydWUsXG4gICAgICB9KVxuICApO1xufVxuXG5mdW5jdGlvbiBwYXJzZVRzQ29uZmlnKHBhdGg6IHN0cmluZykge1xuICBjb25zdCB7IGVycm9yLCBjb25maWcgfSA9IHBhcnNlQ29uZmlnRmlsZVRleHRUb0pzb24ocGF0aCwgcmVhZEZpbGVTeW5jKHBhdGgsICd1dGY4JykpO1xuXG4gIGlmIChlcnJvcikge1xuICAgIHRocm93IGVycm9yO1xuICB9XG5cbiAgcmV0dXJuIGNvbmZpZztcbn1cblxuZnVuY3Rpb24gdGVzdE1hdGNoZXJzKG1hdGNoZXJzOiBJTWluaW1hdGNoW10sIHBhdGg6IHN0cmluZykge1xuICByZXR1cm4gbWF0Y2hlcnMuc29tZShtYXRjaGVyID0+IG1hdGNoZXIubWF0Y2gocGF0aCkpO1xufVxuXG5leHBvcnQgY2xhc3MgUHJvamVjdCB7XG4gIHB1YmxpYyBkaXJlY3Rvcnk6IHN0cmluZztcbiAgcHVibGljIG5hbWU6IHN0cmluZztcbiAgcHVibGljIGNvbmZpZzogYW55O1xuXG4gIHByaXZhdGUgcmVhZG9ubHkgaW5jbHVkZTogSU1pbmltYXRjaFtdO1xuICBwcml2YXRlIHJlYWRvbmx5IGV4Y2x1ZGU6IElNaW5pbWF0Y2hbXTtcblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgdHNDb25maWdQYXRoOiBzdHJpbmcsIG5hbWU/OiBzdHJpbmcpIHtcbiAgICB0aGlzLmNvbmZpZyA9IHBhcnNlVHNDb25maWcodHNDb25maWdQYXRoKTtcblxuICAgIGNvbnN0IHsgZmlsZXMsIGluY2x1ZGUsIGV4Y2x1ZGUgPSBbXSB9ID0gdGhpcy5jb25maWcgYXMge1xuICAgICAgZmlsZXM/OiBzdHJpbmdbXTtcbiAgICAgIGluY2x1ZGU/OiBzdHJpbmdbXTtcbiAgICAgIGV4Y2x1ZGU/OiBzdHJpbmdbXTtcbiAgICB9O1xuXG4gICAgaWYgKGZpbGVzIHx8ICFpbmNsdWRlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICd0c2NvbmZpZy5qc29uIGZpbGVzIGluIHRoZSBLaWJhbmEgcmVwbyBtdXN0IHVzZSBcImluY2x1ZGVcIiBrZXlzIGFuZCBub3QgXCJmaWxlc1wiJ1xuICAgICAgKTtcbiAgICB9XG5cbiAgICB0aGlzLmRpcmVjdG9yeSA9IGRpcm5hbWUodGhpcy50c0NvbmZpZ1BhdGgpO1xuICAgIHRoaXMubmFtZSA9IG5hbWUgfHwgcmVsYXRpdmUoUkVQT19ST09ULCB0aGlzLmRpcmVjdG9yeSkgfHwgYmFzZW5hbWUodGhpcy5kaXJlY3RvcnkpO1xuICAgIHRoaXMuaW5jbHVkZSA9IG1ha2VNYXRjaGVycyh0aGlzLmRpcmVjdG9yeSwgaW5jbHVkZSk7XG4gICAgdGhpcy5leGNsdWRlID0gbWFrZU1hdGNoZXJzKHRoaXMuZGlyZWN0b3J5LCBleGNsdWRlKTtcbiAgfVxuXG4gIHB1YmxpYyBpc0Fic29sdXRlUGF0aFNlbGVjdGVkKHBhdGg6IHN0cmluZykge1xuICAgIHJldHVybiB0ZXN0TWF0Y2hlcnModGhpcy5leGNsdWRlLCBwYXRoKSA/IGZhbHNlIDogdGVzdE1hdGNoZXJzKHRoaXMuaW5jbHVkZSwgcGF0aCk7XG4gIH1cbn1cbiJdfQ==