"use strict";
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const types_1 = require("../../graphql/types");
exports.createSourceStatusResolvers = (libs) => ({
    InfraSourceStatus: {
        async metricAliasExists(source, args, { req }) {
            return await libs.sourceStatus.hasMetricAlias(req, source.id);
        },
        async metricIndicesExist(source, args, { req }) {
            return await libs.sourceStatus.hasMetricIndices(req, source.id);
        },
        async metricIndices(source, args, { req }) {
            return await libs.sourceStatus.getMetricIndexNames(req, source.id);
        },
        async logAliasExists(source, args, { req }) {
            return await libs.sourceStatus.hasLogAlias(req, source.id);
        },
        async logIndicesExist(source, args, { req }) {
            return await libs.sourceStatus.hasLogIndices(req, source.id);
        },
        async logIndices(source, args, { req }) {
            return await libs.sourceStatus.getLogIndexNames(req, source.id);
        },
        async indexFields(source, args, { req }) {
            const fields = await libs.fields.getFields(req, source.id, args.indexType || types_1.InfraIndexType.ANY);
            return fields;
        },
    },
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2hvbWUvYW50aG9ueS9naXRfd29ya3NwYWNlcy9raWJhbmEveC1wYWNrL3BsdWdpbnMvaW5mcmEvc2VydmVyL2dyYXBocWwvc291cmNlX3N0YXR1cy9yZXNvbHZlcnMudHMiLCJzb3VyY2VzIjpbIi9ob21lL2FudGhvbnkvZ2l0X3dvcmtzcGFjZXMva2liYW5hL3gtcGFjay9wbHVnaW5zL2luZnJhL3NlcnZlci9ncmFwaHFsL3NvdXJjZV9zdGF0dXMvcmVzb2x2ZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7OztHQUlHOztBQUVILCtDQUFpRjtBQXlDcEUsUUFBQSwyQkFBMkIsR0FBRyxDQUFDLElBRzNDLEVBVUMsRUFBRSxDQUFDLENBQUM7SUFDSixpQkFBaUIsRUFBRTtRQUNqQixLQUFLLENBQUMsaUJBQWlCLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxFQUFFLEdBQUcsRUFBRTtZQUMzQyxPQUFPLE1BQU0sSUFBSSxDQUFDLFlBQVksQ0FBQyxjQUFjLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNoRSxDQUFDO1FBQ0QsS0FBSyxDQUFDLGtCQUFrQixDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsRUFBRSxHQUFHLEVBQUU7WUFDNUMsT0FBTyxNQUFNLElBQUksQ0FBQyxZQUFZLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNsRSxDQUFDO1FBQ0QsS0FBSyxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLEVBQUUsR0FBRyxFQUFFO1lBQ3ZDLE9BQU8sTUFBTSxJQUFJLENBQUMsWUFBWSxDQUFDLG1CQUFtQixDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDckUsQ0FBQztRQUNELEtBQUssQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxFQUFFLEdBQUcsRUFBRTtZQUN4QyxPQUFPLE1BQU0sSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUM3RCxDQUFDO1FBQ0QsS0FBSyxDQUFDLGVBQWUsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLEVBQUUsR0FBRyxFQUFFO1lBQ3pDLE9BQU8sTUFBTSxJQUFJLENBQUMsWUFBWSxDQUFDLGFBQWEsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQy9ELENBQUM7UUFDRCxLQUFLLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsRUFBRSxHQUFHLEVBQUU7WUFDcEMsT0FBTyxNQUFNLElBQUksQ0FBQyxZQUFZLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNsRSxDQUFDO1FBQ0QsS0FBSyxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLEVBQUUsR0FBRyxFQUFFO1lBQ3JDLE1BQU0sTUFBTSxHQUFHLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQ3hDLEdBQUcsRUFDSCxNQUFNLENBQUMsRUFBRSxFQUNULElBQUksQ0FBQyxTQUFTLElBQUksc0JBQWMsQ0FBQyxHQUFHLENBQ3JDLENBQUM7WUFDRixPQUFPLE1BQU0sQ0FBQztRQUNoQixDQUFDO0tBQ0Y7Q0FDRixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IEVsYXN0aWNzZWFyY2ggQi5WLiBhbmQvb3IgbGljZW5zZWQgdG8gRWxhc3RpY3NlYXJjaCBCLlYuIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuIExpY2Vuc2VkIHVuZGVyIHRoZSBFbGFzdGljIExpY2Vuc2U7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIEVsYXN0aWMgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBJbmZyYUluZGV4VHlwZSwgSW5mcmFTb3VyY2VTdGF0dXNSZXNvbHZlcnMgfSBmcm9tICcuLi8uLi9ncmFwaHFsL3R5cGVzJztcbmltcG9ydCB7IEluZnJhRmllbGRzRG9tYWluIH0gZnJvbSAnLi4vLi4vbGliL2RvbWFpbnMvZmllbGRzX2RvbWFpbic7XG5pbXBvcnQgeyBJbmZyYVNvdXJjZVN0YXR1cyB9IGZyb20gJy4uLy4uL2xpYi9zb3VyY2Vfc3RhdHVzJztcbmltcG9ydCB7IENoaWxkUmVzb2x2ZXJPZiwgSW5mcmFSZXNvbHZlck9mIH0gZnJvbSAnLi4vLi4vdXRpbHMvdHlwZWRfcmVzb2x2ZXJzJztcbmltcG9ydCB7IFF1ZXJ5U291cmNlUmVzb2x2ZXIgfSBmcm9tICcuLi9zb3VyY2VzL3Jlc29sdmVycyc7XG5cbmV4cG9ydCB0eXBlIEluZnJhU291cmNlU3RhdHVzTWV0cmljQWxpYXNFeGlzdHNSZXNvbHZlciA9IENoaWxkUmVzb2x2ZXJPZjxcbiAgSW5mcmFSZXNvbHZlck9mPEluZnJhU291cmNlU3RhdHVzUmVzb2x2ZXJzLk1ldHJpY0FsaWFzRXhpc3RzUmVzb2x2ZXI+LFxuICBRdWVyeVNvdXJjZVJlc29sdmVyXG4+O1xuXG5leHBvcnQgdHlwZSBJbmZyYVNvdXJjZVN0YXR1c01ldHJpY0luZGljZXNFeGlzdFJlc29sdmVyID0gQ2hpbGRSZXNvbHZlck9mPFxuICBJbmZyYVJlc29sdmVyT2Y8SW5mcmFTb3VyY2VTdGF0dXNSZXNvbHZlcnMuTWV0cmljSW5kaWNlc0V4aXN0UmVzb2x2ZXI+LFxuICBRdWVyeVNvdXJjZVJlc29sdmVyXG4+O1xuXG5leHBvcnQgdHlwZSBJbmZyYVNvdXJjZVN0YXR1c01ldHJpY0luZGljZXNSZXNvbHZlciA9IENoaWxkUmVzb2x2ZXJPZjxcbiAgSW5mcmFSZXNvbHZlck9mPEluZnJhU291cmNlU3RhdHVzUmVzb2x2ZXJzLk1ldHJpY0luZGljZXNSZXNvbHZlcj4sXG4gIFF1ZXJ5U291cmNlUmVzb2x2ZXJcbj47XG5cbmV4cG9ydCB0eXBlIEluZnJhU291cmNlU3RhdHVzTG9nQWxpYXNFeGlzdHNSZXNvbHZlciA9IENoaWxkUmVzb2x2ZXJPZjxcbiAgSW5mcmFSZXNvbHZlck9mPEluZnJhU291cmNlU3RhdHVzUmVzb2x2ZXJzLkxvZ0FsaWFzRXhpc3RzUmVzb2x2ZXI+LFxuICBRdWVyeVNvdXJjZVJlc29sdmVyXG4+O1xuXG5leHBvcnQgdHlwZSBJbmZyYVNvdXJjZVN0YXR1c0xvZ0luZGljZXNFeGlzdFJlc29sdmVyID0gQ2hpbGRSZXNvbHZlck9mPFxuICBJbmZyYVJlc29sdmVyT2Y8SW5mcmFTb3VyY2VTdGF0dXNSZXNvbHZlcnMuTG9nSW5kaWNlc0V4aXN0UmVzb2x2ZXI+LFxuICBRdWVyeVNvdXJjZVJlc29sdmVyXG4+O1xuXG5leHBvcnQgdHlwZSBJbmZyYVNvdXJjZVN0YXR1c0xvZ0luZGljZXNSZXNvbHZlciA9IENoaWxkUmVzb2x2ZXJPZjxcbiAgSW5mcmFSZXNvbHZlck9mPEluZnJhU291cmNlU3RhdHVzUmVzb2x2ZXJzLkxvZ0luZGljZXNSZXNvbHZlcj4sXG4gIFF1ZXJ5U291cmNlUmVzb2x2ZXJcbj47XG5cbmV4cG9ydCB0eXBlIEluZnJhU291cmNlU3RhdHVzSW5kZXhGaWVsZHNSZXNvbHZlciA9IENoaWxkUmVzb2x2ZXJPZjxcbiAgSW5mcmFSZXNvbHZlck9mPEluZnJhU291cmNlU3RhdHVzUmVzb2x2ZXJzLkluZGV4RmllbGRzUmVzb2x2ZXI+LFxuICBRdWVyeVNvdXJjZVJlc29sdmVyXG4+O1xuXG5leHBvcnQgY29uc3QgY3JlYXRlU291cmNlU3RhdHVzUmVzb2x2ZXJzID0gKGxpYnM6IHtcbiAgc291cmNlU3RhdHVzOiBJbmZyYVNvdXJjZVN0YXR1cztcbiAgZmllbGRzOiBJbmZyYUZpZWxkc0RvbWFpbjtcbn0pOiB7XG4gIEluZnJhU291cmNlU3RhdHVzOiB7XG4gICAgbWV0cmljQWxpYXNFeGlzdHM6IEluZnJhU291cmNlU3RhdHVzTWV0cmljQWxpYXNFeGlzdHNSZXNvbHZlcjtcbiAgICBtZXRyaWNJbmRpY2VzRXhpc3Q6IEluZnJhU291cmNlU3RhdHVzTWV0cmljSW5kaWNlc0V4aXN0UmVzb2x2ZXI7XG4gICAgbWV0cmljSW5kaWNlczogSW5mcmFTb3VyY2VTdGF0dXNNZXRyaWNJbmRpY2VzUmVzb2x2ZXI7XG4gICAgbG9nQWxpYXNFeGlzdHM6IEluZnJhU291cmNlU3RhdHVzTG9nQWxpYXNFeGlzdHNSZXNvbHZlcjtcbiAgICBsb2dJbmRpY2VzRXhpc3Q6IEluZnJhU291cmNlU3RhdHVzTG9nSW5kaWNlc0V4aXN0UmVzb2x2ZXI7XG4gICAgbG9nSW5kaWNlczogSW5mcmFTb3VyY2VTdGF0dXNMb2dJbmRpY2VzUmVzb2x2ZXI7XG4gICAgaW5kZXhGaWVsZHM6IEluZnJhU291cmNlU3RhdHVzSW5kZXhGaWVsZHNSZXNvbHZlcjtcbiAgfTtcbn0gPT4gKHtcbiAgSW5mcmFTb3VyY2VTdGF0dXM6IHtcbiAgICBhc3luYyBtZXRyaWNBbGlhc0V4aXN0cyhzb3VyY2UsIGFyZ3MsIHsgcmVxIH0pIHtcbiAgICAgIHJldHVybiBhd2FpdCBsaWJzLnNvdXJjZVN0YXR1cy5oYXNNZXRyaWNBbGlhcyhyZXEsIHNvdXJjZS5pZCk7XG4gICAgfSxcbiAgICBhc3luYyBtZXRyaWNJbmRpY2VzRXhpc3Qoc291cmNlLCBhcmdzLCB7IHJlcSB9KSB7XG4gICAgICByZXR1cm4gYXdhaXQgbGlicy5zb3VyY2VTdGF0dXMuaGFzTWV0cmljSW5kaWNlcyhyZXEsIHNvdXJjZS5pZCk7XG4gICAgfSxcbiAgICBhc3luYyBtZXRyaWNJbmRpY2VzKHNvdXJjZSwgYXJncywgeyByZXEgfSkge1xuICAgICAgcmV0dXJuIGF3YWl0IGxpYnMuc291cmNlU3RhdHVzLmdldE1ldHJpY0luZGV4TmFtZXMocmVxLCBzb3VyY2UuaWQpO1xuICAgIH0sXG4gICAgYXN5bmMgbG9nQWxpYXNFeGlzdHMoc291cmNlLCBhcmdzLCB7IHJlcSB9KSB7XG4gICAgICByZXR1cm4gYXdhaXQgbGlicy5zb3VyY2VTdGF0dXMuaGFzTG9nQWxpYXMocmVxLCBzb3VyY2UuaWQpO1xuICAgIH0sXG4gICAgYXN5bmMgbG9nSW5kaWNlc0V4aXN0KHNvdXJjZSwgYXJncywgeyByZXEgfSkge1xuICAgICAgcmV0dXJuIGF3YWl0IGxpYnMuc291cmNlU3RhdHVzLmhhc0xvZ0luZGljZXMocmVxLCBzb3VyY2UuaWQpO1xuICAgIH0sXG4gICAgYXN5bmMgbG9nSW5kaWNlcyhzb3VyY2UsIGFyZ3MsIHsgcmVxIH0pIHtcbiAgICAgIHJldHVybiBhd2FpdCBsaWJzLnNvdXJjZVN0YXR1cy5nZXRMb2dJbmRleE5hbWVzKHJlcSwgc291cmNlLmlkKTtcbiAgICB9LFxuICAgIGFzeW5jIGluZGV4RmllbGRzKHNvdXJjZSwgYXJncywgeyByZXEgfSkge1xuICAgICAgY29uc3QgZmllbGRzID0gYXdhaXQgbGlicy5maWVsZHMuZ2V0RmllbGRzKFxuICAgICAgICByZXEsXG4gICAgICAgIHNvdXJjZS5pZCxcbiAgICAgICAgYXJncy5pbmRleFR5cGUgfHwgSW5mcmFJbmRleFR5cGUuQU5ZXG4gICAgICApO1xuICAgICAgcmV0dXJuIGZpZWxkcztcbiAgICB9LFxuICB9LFxufSk7XG4iXX0=