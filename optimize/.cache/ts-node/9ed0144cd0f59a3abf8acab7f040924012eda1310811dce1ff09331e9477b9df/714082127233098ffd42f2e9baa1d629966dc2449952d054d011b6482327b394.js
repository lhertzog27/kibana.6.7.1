"use strict";
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const crypto_1 = require("crypto");
const json_stable_stringify_1 = tslib_1.__importDefault(require("json-stable-stringify"));
exports.credentialStoreFactory = () => {
    const credMap = new Map();
    // Generates a stable hash for the reindex operation's current state.
    const getHash = (reindexOp) => crypto_1.createHash('sha256')
        .update(json_stable_stringify_1.default({ id: reindexOp.id, ...reindexOp.attributes }))
        .digest('base64');
    return {
        get(reindexOp) {
            return credMap.get(getHash(reindexOp));
        },
        set(reindexOp, credential) {
            credMap.set(getHash(reindexOp), credential);
        },
        clear() {
            for (const k of credMap.keys()) {
                credMap.delete(k);
            }
        },
    };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2hvbWUvYW50aG9ueS9naXRfd29ya3NwYWNlcy9raWJhbmEveC1wYWNrL3BsdWdpbnMvdXBncmFkZV9hc3Npc3RhbnQvc2VydmVyL2xpYi9yZWluZGV4aW5nL2NyZWRlbnRpYWxfc3RvcmUudHMiLCJzb3VyY2VzIjpbIi9ob21lL2FudGhvbnkvZ2l0X3dvcmtzcGFjZXMva2liYW5hL3gtcGFjay9wbHVnaW5zL3VwZ3JhZGVfYXNzaXN0YW50L3NlcnZlci9saWIvcmVpbmRleGluZy9jcmVkZW50aWFsX3N0b3JlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7OztHQUlHOzs7QUFFSCxtQ0FBb0M7QUFFcEMsMEZBQThDO0FBa0JqQyxRQUFBLHNCQUFzQixHQUFHLEdBQW9CLEVBQUU7SUFDMUQsTUFBTSxPQUFPLEdBQUcsSUFBSSxHQUFHLEVBQXNCLENBQUM7SUFFOUMscUVBQXFFO0lBQ3JFLE1BQU0sT0FBTyxHQUFHLENBQUMsU0FBNkIsRUFBRSxFQUFFLENBQ2hELG1CQUFVLENBQUMsUUFBUSxDQUFDO1NBQ2pCLE1BQU0sQ0FBQywrQkFBUyxDQUFDLEVBQUUsRUFBRSxFQUFFLFNBQVMsQ0FBQyxFQUFFLEVBQUUsR0FBRyxTQUFTLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQztTQUNoRSxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7SUFFdEIsT0FBTztRQUNMLEdBQUcsQ0FBQyxTQUE2QjtZQUMvQixPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7UUFDekMsQ0FBQztRQUVELEdBQUcsQ0FBQyxTQUE2QixFQUFFLFVBQXNCO1lBQ3ZELE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBQzlDLENBQUM7UUFFRCxLQUFLO1lBQ0gsS0FBSyxNQUFNLENBQUMsSUFBSSxPQUFPLENBQUMsSUFBSSxFQUFFLEVBQUU7Z0JBQzlCLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDbkI7UUFDSCxDQUFDO0tBQ0YsQ0FBQztBQUNKLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgRWxhc3RpY3NlYXJjaCBCLlYuIGFuZC9vciBsaWNlbnNlZCB0byBFbGFzdGljc2VhcmNoIEIuVi4gdW5kZXIgb25lXG4gKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gTGljZW5zZWQgdW5kZXIgdGhlIEVsYXN0aWMgTGljZW5zZTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgRWxhc3RpYyBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IGNyZWF0ZUhhc2ggfSBmcm9tICdjcnlwdG8nO1xuaW1wb3J0IHsgUmVxdWVzdCB9IGZyb20gJ2hhcGknO1xuaW1wb3J0IHN0cmluZ2lmeSBmcm9tICdqc29uLXN0YWJsZS1zdHJpbmdpZnknO1xuXG5pbXBvcnQgeyBSZWluZGV4U2F2ZWRPYmplY3QgfSBmcm9tICcuLi8uLi8uLi9jb21tb24vdHlwZXMnO1xuXG5leHBvcnQgdHlwZSBDcmVkZW50aWFsID0gUmVxdWVzdFsnaGVhZGVycyddO1xuXG4vKipcbiAqIEFuIGluLW1lbW9yeSBjYWNoZSBmb3IgdXNlciBjcmVkZW50aWFscyB0byBiZSB1c2VkIGZvciByZWluZGV4aW5nIG9wZXJhdGlvbnMuIFdoZW4gbG9va2luZyB1cFxuICogY3JlZGVudGlhbHMsIHRoZSByZWluZGV4IG9wZXJhdGlvbiBtdXN0IGJlIGluIHRoZSBzYW1lIHN0YXRlIGl0IHdhcyBpbiB3aGVuIHRoZSBjcmVkZW50aWFsc1xuICogd2VyZSBzdG9yZWQuIFRoaXMgcHJldmVudHMgYW55IHRhbXBlcmluZyBvZiB0aGUgLmtpYmFuYSBpbmRleCBieSBhbiB1bnByaXZpbGVkZ2VkIHVzZXIgZnJvbVxuICogYWZmZWN0aW5nIHRoZSByZWluZGV4IHByb2Nlc3MuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ3JlZGVudGlhbFN0b3JlIHtcbiAgZ2V0KHJlaW5kZXhPcDogUmVpbmRleFNhdmVkT2JqZWN0KTogQ3JlZGVudGlhbCB8IHVuZGVmaW5lZDtcbiAgc2V0KHJlaW5kZXhPcDogUmVpbmRleFNhdmVkT2JqZWN0LCBjcmVkZW50aWFsOiBDcmVkZW50aWFsKTogdm9pZDtcbiAgY2xlYXIoKTogdm9pZDtcbn1cblxuZXhwb3J0IGNvbnN0IGNyZWRlbnRpYWxTdG9yZUZhY3RvcnkgPSAoKTogQ3JlZGVudGlhbFN0b3JlID0+IHtcbiAgY29uc3QgY3JlZE1hcCA9IG5ldyBNYXA8c3RyaW5nLCBDcmVkZW50aWFsPigpO1xuXG4gIC8vIEdlbmVyYXRlcyBhIHN0YWJsZSBoYXNoIGZvciB0aGUgcmVpbmRleCBvcGVyYXRpb24ncyBjdXJyZW50IHN0YXRlLlxuICBjb25zdCBnZXRIYXNoID0gKHJlaW5kZXhPcDogUmVpbmRleFNhdmVkT2JqZWN0KSA9PlxuICAgIGNyZWF0ZUhhc2goJ3NoYTI1NicpXG4gICAgICAudXBkYXRlKHN0cmluZ2lmeSh7IGlkOiByZWluZGV4T3AuaWQsIC4uLnJlaW5kZXhPcC5hdHRyaWJ1dGVzIH0pKVxuICAgICAgLmRpZ2VzdCgnYmFzZTY0Jyk7XG5cbiAgcmV0dXJuIHtcbiAgICBnZXQocmVpbmRleE9wOiBSZWluZGV4U2F2ZWRPYmplY3QpIHtcbiAgICAgIHJldHVybiBjcmVkTWFwLmdldChnZXRIYXNoKHJlaW5kZXhPcCkpO1xuICAgIH0sXG5cbiAgICBzZXQocmVpbmRleE9wOiBSZWluZGV4U2F2ZWRPYmplY3QsIGNyZWRlbnRpYWw6IENyZWRlbnRpYWwpIHtcbiAgICAgIGNyZWRNYXAuc2V0KGdldEhhc2gocmVpbmRleE9wKSwgY3JlZGVudGlhbCk7XG4gICAgfSxcblxuICAgIGNsZWFyKCkge1xuICAgICAgZm9yIChjb25zdCBrIG9mIGNyZWRNYXAua2V5cygpKSB7XG4gICAgICAgIGNyZWRNYXAuZGVsZXRlKGspO1xuICAgICAgfVxuICAgIH0sXG4gIH07XG59O1xuIl19