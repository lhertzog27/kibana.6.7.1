"use strict";
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
class UMMemoryMonitorsAdapter {
    constructor(monitorsDB) {
        this.monitorsDB = monitorsDB;
    }
    async getLatestMonitors(request, dateRangeStart, dateRangeEnd, filters) {
        return this.monitorsDB.filter(ping => {
            // const timestamp = moment(ping.timestamp).valueOf();
            throw new Error('Method not implemented.');
            // return dateRangeStart <= timestamp && timestamp <= dateRangeEnd;
        });
    }
    async getMonitorChartsData(req, monitorId, dateRangeStart, dateRangeEnd) {
        throw new Error('Method not implemented.');
    }
    async getSnapshotCount(request, dateRangeStart, dateRangeEnd, filters) {
        throw new Error('Method not implemented.');
    }
    async getFilterBar(request) {
        throw new Error('Method not implemented.');
    }
    async getErrorsList(request, dateRangeStart, dateRangeEnd, filters) {
        throw new Error('Method not implemented.');
    }
}
exports.UMMemoryMonitorsAdapter = UMMemoryMonitorsAdapter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2hvbWUvYW50aG9ueS9naXRfd29ya3NwYWNlcy9raWJhbmEveC1wYWNrL3BsdWdpbnMvdXB0aW1lL3NlcnZlci9saWIvYWRhcHRlcnMvbW9uaXRvcnMvbWVtb3J5X3BpbmdzX2FkYXB0ZXIudHMiLCJzb3VyY2VzIjpbIi9ob21lL2FudGhvbnkvZ2l0X3dvcmtzcGFjZXMva2liYW5hL3gtcGFjay9wbHVnaW5zL3VwdGltZS9zZXJ2ZXIvbGliL2FkYXB0ZXJzL21vbml0b3JzL21lbW9yeV9waW5nc19hZGFwdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7OztHQUlHOztBQUtILE1BQWEsdUJBQXVCO0lBR2xDLFlBQVksVUFBa0I7UUFDNUIsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7SUFDL0IsQ0FBQztJQUVNLEtBQUssQ0FBQyxpQkFBaUIsQ0FDNUIsT0FBWSxFQUNaLGNBQXNCLEVBQ3RCLFlBQW9CLEVBQ3BCLE9BQXVCO1FBRXZCLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDbkMsc0RBQXNEO1lBQ3RELE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQztZQUMzQyxtRUFBbUU7UUFDckUsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBQ00sS0FBSyxDQUFDLG9CQUFvQixDQUMvQixHQUFRLEVBQ1IsU0FBaUIsRUFDakIsY0FBc0IsRUFDdEIsWUFBb0I7UUFFcEIsTUFBTSxJQUFJLEtBQUssQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO0lBQzdDLENBQUM7SUFFTSxLQUFLLENBQUMsZ0JBQWdCLENBQzNCLE9BQVksRUFDWixjQUFzQixFQUN0QixZQUFvQixFQUNwQixPQUF1QjtRQUV2QixNQUFNLElBQUksS0FBSyxDQUFDLHlCQUF5QixDQUFDLENBQUM7SUFDN0MsQ0FBQztJQUNNLEtBQUssQ0FBQyxZQUFZLENBQUMsT0FBWTtRQUNwQyxNQUFNLElBQUksS0FBSyxDQUFDLHlCQUF5QixDQUFDLENBQUM7SUFDN0MsQ0FBQztJQUVNLEtBQUssQ0FBQyxhQUFhLENBQ3hCLE9BQVksRUFDWixjQUFzQixFQUN0QixZQUFvQixFQUNwQixPQUF1QjtRQUV2QixNQUFNLElBQUksS0FBSyxDQUFDLHlCQUF5QixDQUFDLENBQUM7SUFDN0MsQ0FBQztDQUNGO0FBaERELDBEQWdEQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgRWxhc3RpY3NlYXJjaCBCLlYuIGFuZC9vciBsaWNlbnNlZCB0byBFbGFzdGljc2VhcmNoIEIuVi4gdW5kZXIgb25lXG4gKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gTGljZW5zZWQgdW5kZXIgdGhlIEVsYXN0aWMgTGljZW5zZTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgRWxhc3RpYyBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IFBpbmcgfSBmcm9tICcuLi8uLi8uLi8uLi9jb21tb24vZ3JhcGhxbC90eXBlcyc7XG5pbXBvcnQgeyBVTU1vbml0b3JzQWRhcHRlciB9IGZyb20gJy4vYWRhcHRlcl90eXBlcyc7XG5cbmV4cG9ydCBjbGFzcyBVTU1lbW9yeU1vbml0b3JzQWRhcHRlciBpbXBsZW1lbnRzIFVNTW9uaXRvcnNBZGFwdGVyIHtcbiAgcHJpdmF0ZSBtb25pdG9yc0RCOiBQaW5nW107XG5cbiAgY29uc3RydWN0b3IobW9uaXRvcnNEQjogUGluZ1tdKSB7XG4gICAgdGhpcy5tb25pdG9yc0RCID0gbW9uaXRvcnNEQjtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBnZXRMYXRlc3RNb25pdG9ycyhcbiAgICByZXF1ZXN0OiBhbnksXG4gICAgZGF0ZVJhbmdlU3RhcnQ6IHN0cmluZyxcbiAgICBkYXRlUmFuZ2VFbmQ6IHN0cmluZyxcbiAgICBmaWx0ZXJzPzogc3RyaW5nIHwgbnVsbFxuICApOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybiB0aGlzLm1vbml0b3JzREIuZmlsdGVyKHBpbmcgPT4ge1xuICAgICAgLy8gY29uc3QgdGltZXN0YW1wID0gbW9tZW50KHBpbmcudGltZXN0YW1wKS52YWx1ZU9mKCk7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ01ldGhvZCBub3QgaW1wbGVtZW50ZWQuJyk7XG4gICAgICAvLyByZXR1cm4gZGF0ZVJhbmdlU3RhcnQgPD0gdGltZXN0YW1wICYmIHRpbWVzdGFtcCA8PSBkYXRlUmFuZ2VFbmQ7XG4gICAgfSk7XG4gIH1cbiAgcHVibGljIGFzeW5jIGdldE1vbml0b3JDaGFydHNEYXRhKFxuICAgIHJlcTogYW55LFxuICAgIG1vbml0b3JJZDogc3RyaW5nLFxuICAgIGRhdGVSYW5nZVN0YXJ0OiBzdHJpbmcsXG4gICAgZGF0ZVJhbmdlRW5kOiBzdHJpbmdcbiAgKTogUHJvbWlzZTxhbnk+IHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ01ldGhvZCBub3QgaW1wbGVtZW50ZWQuJyk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgZ2V0U25hcHNob3RDb3VudChcbiAgICByZXF1ZXN0OiBhbnksXG4gICAgZGF0ZVJhbmdlU3RhcnQ6IHN0cmluZyxcbiAgICBkYXRlUmFuZ2VFbmQ6IHN0cmluZyxcbiAgICBmaWx0ZXJzPzogc3RyaW5nIHwgbnVsbFxuICApOiBQcm9taXNlPGFueT4ge1xuICAgIHRocm93IG5ldyBFcnJvcignTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC4nKTtcbiAgfVxuICBwdWJsaWMgYXN5bmMgZ2V0RmlsdGVyQmFyKHJlcXVlc3Q6IGFueSk6IFByb21pc2U8YW55PiB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdNZXRob2Qgbm90IGltcGxlbWVudGVkLicpO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGdldEVycm9yc0xpc3QoXG4gICAgcmVxdWVzdDogYW55LFxuICAgIGRhdGVSYW5nZVN0YXJ0OiBzdHJpbmcsXG4gICAgZGF0ZVJhbmdlRW5kOiBzdHJpbmcsXG4gICAgZmlsdGVycz86IHN0cmluZyB8IG51bGxcbiAgKTogUHJvbWlzZTxhbnk+IHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ01ldGhvZCBub3QgaW1wbGVtZW50ZWQuJyk7XG4gIH1cbn1cbiJdfQ==