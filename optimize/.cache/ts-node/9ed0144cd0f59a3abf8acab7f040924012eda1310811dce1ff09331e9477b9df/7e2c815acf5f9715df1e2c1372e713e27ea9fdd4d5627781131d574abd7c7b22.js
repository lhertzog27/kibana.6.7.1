"use strict";
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const moment_1 = tslib_1.__importDefault(require("moment"));
const ts_optchain_1 = require("ts-optchain");
function calculateRelativeImpacts(results) {
    const values = results.map(({ impact }) => impact);
    const max = Math.max(...values);
    const min = Math.min(...values);
    return results.map(bucket => ({
        ...bucket,
        impact: ((bucket.impact - min) / (max - min)) * 100 || 0
    }));
}
function transactionGroupsTransformer({ response, start, end }) {
    const buckets = ts_optchain_1.oc(response).aggregations.transactions.buckets([]);
    const duration = moment_1.default.duration(end - start);
    const minutes = duration.asMinutes();
    const results = buckets.map(bucket => {
        const averageResponseTime = bucket.avg.value;
        const transactionsPerMinute = bucket.doc_count / minutes;
        const impact = bucket.sum.value;
        const sample = bucket.sample.hits.hits[0]._source;
        return {
            name: bucket.key,
            sample,
            p95: bucket.p95.values['95.0'],
            averageResponseTime,
            transactionsPerMinute,
            impact
        };
    });
    return calculateRelativeImpacts(results);
}
exports.transactionGroupsTransformer = transactionGroupsTransformer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2hvbWUvYW50aG9ueS9naXRfd29ya3NwYWNlcy9raWJhbmEveC1wYWNrL3BsdWdpbnMvYXBtL3NlcnZlci9saWIvdHJhbnNhY3Rpb25fZ3JvdXBzL3RyYW5zZm9ybS50cyIsInNvdXJjZXMiOlsiL2hvbWUvYW50aG9ueS9naXRfd29ya3NwYWNlcy9raWJhbmEveC1wYWNrL3BsdWdpbnMvYXBtL3NlcnZlci9saWIvdHJhbnNhY3Rpb25fZ3JvdXBzL3RyYW5zZm9ybS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7R0FJRzs7O0FBRUgsNERBQTRCO0FBQzVCLDZDQUFpQztBQWFqQyxTQUFTLHdCQUF3QixDQUFDLE9BQTRCO0lBQzVELE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNuRCxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUM7SUFDaEMsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDO0lBRWhDLE9BQU8sT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDNUIsR0FBRyxNQUFNO1FBQ1QsTUFBTSxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUM7S0FDekQsQ0FBQyxDQUFDLENBQUM7QUFDTixDQUFDO0FBRUQsU0FBZ0IsNEJBQTRCLENBQUMsRUFDM0MsUUFBUSxFQUNSLEtBQUssRUFDTCxHQUFHLEVBS0o7SUFDQyxNQUFNLE9BQU8sR0FBRyxnQkFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ25FLE1BQU0sUUFBUSxHQUFHLGdCQUFNLENBQUMsUUFBUSxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUMsQ0FBQztJQUM5QyxNQUFNLE9BQU8sR0FBRyxRQUFRLENBQUMsU0FBUyxFQUFFLENBQUM7SUFDckMsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRTtRQUNuQyxNQUFNLG1CQUFtQixHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDO1FBQzdDLE1BQU0scUJBQXFCLEdBQUcsTUFBTSxDQUFDLFNBQVMsR0FBRyxPQUFPLENBQUM7UUFDekQsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUM7UUFDaEMsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQztRQUVsRCxPQUFPO1lBQ0wsSUFBSSxFQUFFLE1BQU0sQ0FBQyxHQUFHO1lBQ2hCLE1BQU07WUFDTixHQUFHLEVBQUUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO1lBQzlCLG1CQUFtQjtZQUNuQixxQkFBcUI7WUFDckIsTUFBTTtTQUNQLENBQUM7SUFDSixDQUFDLENBQUMsQ0FBQztJQUVILE9BQU8sd0JBQXdCLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDM0MsQ0FBQztBQTdCRCxvRUE2QkMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IEVsYXN0aWNzZWFyY2ggQi5WLiBhbmQvb3IgbGljZW5zZWQgdG8gRWxhc3RpY3NlYXJjaCBCLlYuIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuIExpY2Vuc2VkIHVuZGVyIHRoZSBFbGFzdGljIExpY2Vuc2U7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIEVsYXN0aWMgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XG5pbXBvcnQgeyBvYyB9IGZyb20gJ3RzLW9wdGNoYWluJztcbmltcG9ydCB7IFRyYW5zYWN0aW9uIH0gZnJvbSAneC1wYWNrL3BsdWdpbnMvYXBtL3R5cGluZ3MvZXNfc2NoZW1hcy9UcmFuc2FjdGlvbic7XG5pbXBvcnQgeyBFU1Jlc3BvbnNlIH0gZnJvbSAnLi9mZXRjaGVyJztcblxuZXhwb3J0IGludGVyZmFjZSBJVHJhbnNhY3Rpb25Hcm91cCB7XG4gIG5hbWU6IHN0cmluZztcbiAgc2FtcGxlOiBUcmFuc2FjdGlvbjtcbiAgcDk1OiBudW1iZXI7XG4gIGF2ZXJhZ2VSZXNwb25zZVRpbWU6IG51bWJlcjtcbiAgdHJhbnNhY3Rpb25zUGVyTWludXRlOiBudW1iZXI7XG4gIGltcGFjdDogbnVtYmVyO1xufVxuXG5mdW5jdGlvbiBjYWxjdWxhdGVSZWxhdGl2ZUltcGFjdHMocmVzdWx0czogSVRyYW5zYWN0aW9uR3JvdXBbXSkge1xuICBjb25zdCB2YWx1ZXMgPSByZXN1bHRzLm1hcCgoeyBpbXBhY3QgfSkgPT4gaW1wYWN0KTtcbiAgY29uc3QgbWF4ID0gTWF0aC5tYXgoLi4udmFsdWVzKTtcbiAgY29uc3QgbWluID0gTWF0aC5taW4oLi4udmFsdWVzKTtcblxuICByZXR1cm4gcmVzdWx0cy5tYXAoYnVja2V0ID0+ICh7XG4gICAgLi4uYnVja2V0LFxuICAgIGltcGFjdDogKChidWNrZXQuaW1wYWN0IC0gbWluKSAvIChtYXggLSBtaW4pKSAqIDEwMCB8fCAwXG4gIH0pKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zYWN0aW9uR3JvdXBzVHJhbnNmb3JtZXIoe1xuICByZXNwb25zZSxcbiAgc3RhcnQsXG4gIGVuZFxufToge1xuICByZXNwb25zZTogRVNSZXNwb25zZTtcbiAgc3RhcnQ6IG51bWJlcjtcbiAgZW5kOiBudW1iZXI7XG59KTogSVRyYW5zYWN0aW9uR3JvdXBbXSB7XG4gIGNvbnN0IGJ1Y2tldHMgPSBvYyhyZXNwb25zZSkuYWdncmVnYXRpb25zLnRyYW5zYWN0aW9ucy5idWNrZXRzKFtdKTtcbiAgY29uc3QgZHVyYXRpb24gPSBtb21lbnQuZHVyYXRpb24oZW5kIC0gc3RhcnQpO1xuICBjb25zdCBtaW51dGVzID0gZHVyYXRpb24uYXNNaW51dGVzKCk7XG4gIGNvbnN0IHJlc3VsdHMgPSBidWNrZXRzLm1hcChidWNrZXQgPT4ge1xuICAgIGNvbnN0IGF2ZXJhZ2VSZXNwb25zZVRpbWUgPSBidWNrZXQuYXZnLnZhbHVlO1xuICAgIGNvbnN0IHRyYW5zYWN0aW9uc1Blck1pbnV0ZSA9IGJ1Y2tldC5kb2NfY291bnQgLyBtaW51dGVzO1xuICAgIGNvbnN0IGltcGFjdCA9IGJ1Y2tldC5zdW0udmFsdWU7XG4gICAgY29uc3Qgc2FtcGxlID0gYnVja2V0LnNhbXBsZS5oaXRzLmhpdHNbMF0uX3NvdXJjZTtcblxuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiBidWNrZXQua2V5LFxuICAgICAgc2FtcGxlLFxuICAgICAgcDk1OiBidWNrZXQucDk1LnZhbHVlc1snOTUuMCddLFxuICAgICAgYXZlcmFnZVJlc3BvbnNlVGltZSxcbiAgICAgIHRyYW5zYWN0aW9uc1Blck1pbnV0ZSxcbiAgICAgIGltcGFjdFxuICAgIH07XG4gIH0pO1xuXG4gIHJldHVybiBjYWxjdWxhdGVSZWxhdGl2ZUltcGFjdHMocmVzdWx0cyk7XG59XG4iXX0=