"use strict";
/*
 * Licensed to Elasticsearch B.V. under one or more contributor
 * license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch B.V. licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Creates a function which uses a dictionary of property validators to validate
 * individual saved object documents.
 *
 * @export
 * @param {Validators} validators
 * @param {SavedObjectDoc} doc
 */
function docValidator(validators = {}) {
    return function validateDoc(doc) {
        Object.keys(doc)
            .concat(doc.type)
            .forEach(prop => {
            const validator = validators[prop];
            if (validator) {
                validator(doc);
            }
        });
    };
}
exports.docValidator = docValidator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2hvbWUvYW50aG9ueS9naXRfd29ya3NwYWNlcy9raWJhbmEvc3JjL3NlcnZlci9zYXZlZF9vYmplY3RzL3ZhbGlkYXRpb24vaW5kZXgudHMiLCJzb3VyY2VzIjpbIi9ob21lL2FudGhvbnkvZ2l0X3dvcmtzcGFjZXMva2liYW5hL3NyYy9zZXJ2ZXIvc2F2ZWRfb2JqZWN0cy92YWxpZGF0aW9uL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FpQkc7O0FBOEJIOzs7Ozs7O0dBT0c7QUFDSCxTQUFnQixZQUFZLENBQUMsYUFBaUMsRUFBRTtJQUM5RCxPQUFPLFNBQVMsV0FBVyxDQUFDLEdBQW1CO1FBQzdDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO2FBQ2IsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUM7YUFDaEIsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ2QsTUFBTSxTQUFTLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ25DLElBQUksU0FBUyxFQUFFO2dCQUNiLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUNoQjtRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQVhELG9DQVdDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIExpY2Vuc2VkIHRvIEVsYXN0aWNzZWFyY2ggQi5WLiB1bmRlciBvbmUgb3IgbW9yZSBjb250cmlidXRvclxuICogbGljZW5zZSBhZ3JlZW1lbnRzLiBTZWUgdGhlIE5PVElDRSBmaWxlIGRpc3RyaWJ1dGVkIHdpdGhcbiAqIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiByZWdhcmRpbmcgY29weXJpZ2h0XG4gKiBvd25lcnNoaXAuIEVsYXN0aWNzZWFyY2ggQi5WLiBsaWNlbnNlcyB0aGlzIGZpbGUgdG8geW91IHVuZGVyXG4gKiB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpOyB5b3UgbWF5XG4gKiBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbi8qXG4gKiBUaGlzIGlzIHRoZSBjb3JlIGxvZ2ljIGZvciB2YWxpZGF0aW5nIHNhdmVkIG9iamVjdCBwcm9wZXJ0aWVzLiBUaGUgc2F2ZWQgb2JqZWN0IGNsaWVudFxuICogYW5kIG1pZ3JhdGlvbnMgY29uc3VtZSB0aGlzIGluIG9yZGVyIHRvIHZhbGlkYXRlIHNhdmVkIG9iamVjdCBkb2N1bWVudHMgcHJpb3IgdG9cbiAqIHBlcnNpc3RpbmcgdGhlbS5cbiAqL1xuXG5pbnRlcmZhY2UgU2F2ZWRPYmplY3REb2Mge1xuICB0eXBlOiBzdHJpbmc7XG4gIFtwcm9wOiBzdHJpbmddOiBhbnk7XG59XG5cbi8qKlxuICogQSBkaWN0aW9uYXJ5IG9mIHByb3BlcnR5IG5hbWUgLT4gdmFsaWRhdGlvbiBmdW5jdGlvbi4gVGhlIHByb3BlcnR5IG5hbWVcbiAqIGlzIGdlbmVyYWxseSB0aGUgZG9jdW1lbnQncyB0eXBlIChlLmcuIFwiZGFzaGJvYXJkXCIpLCBidXQgd2lsbCBhbHNvXG4gKiBtYXRjaCBvdGhlciBwcm9wZXJ0aWVzLlxuICpcbiAqIEZvciBleGFtcGxlLCB0aGUgXCJhY2xcIiBhbmQgXCJkYXNoYm9hcmRcIiB2YWxpZGF0b3JzIGJvdGggYXBwbHkgdG8gdGhlXG4gKiBmb2xsb3dpbmcgc2F2ZWQgb2JqZWN0OiB7IHR5cGU6IFwiZGFzaGJvYXJkXCIsIGF0dHJpYnV0ZXM6IHt9LCBhY2w6IFwic2RsYWozd1wiIH1cbiAqXG4gKiBAZXhwb3J0XG4gKiBAaW50ZXJmYWNlIFZhbGlkYXRvcnNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBQcm9wZXJ0eVZhbGlkYXRvcnMge1xuICBbcHJvcDogc3RyaW5nXTogVmFsaWRhdGVEb2M7XG59XG5cbmV4cG9ydCB0eXBlIFZhbGlkYXRlRG9jID0gKGRvYzogU2F2ZWRPYmplY3REb2MpID0+IHZvaWQ7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHdoaWNoIHVzZXMgYSBkaWN0aW9uYXJ5IG9mIHByb3BlcnR5IHZhbGlkYXRvcnMgdG8gdmFsaWRhdGVcbiAqIGluZGl2aWR1YWwgc2F2ZWQgb2JqZWN0IGRvY3VtZW50cy5cbiAqXG4gKiBAZXhwb3J0XG4gKiBAcGFyYW0ge1ZhbGlkYXRvcnN9IHZhbGlkYXRvcnNcbiAqIEBwYXJhbSB7U2F2ZWRPYmplY3REb2N9IGRvY1xuICovXG5leHBvcnQgZnVuY3Rpb24gZG9jVmFsaWRhdG9yKHZhbGlkYXRvcnM6IFByb3BlcnR5VmFsaWRhdG9ycyA9IHt9KTogVmFsaWRhdGVEb2Mge1xuICByZXR1cm4gZnVuY3Rpb24gdmFsaWRhdGVEb2MoZG9jOiBTYXZlZE9iamVjdERvYykge1xuICAgIE9iamVjdC5rZXlzKGRvYylcbiAgICAgIC5jb25jYXQoZG9jLnR5cGUpXG4gICAgICAuZm9yRWFjaChwcm9wID0+IHtcbiAgICAgICAgY29uc3QgdmFsaWRhdG9yID0gdmFsaWRhdG9yc1twcm9wXTtcbiAgICAgICAgaWYgKHZhbGlkYXRvcikge1xuICAgICAgICAgIHZhbGlkYXRvcihkb2MpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgfTtcbn1cbiJdfQ==