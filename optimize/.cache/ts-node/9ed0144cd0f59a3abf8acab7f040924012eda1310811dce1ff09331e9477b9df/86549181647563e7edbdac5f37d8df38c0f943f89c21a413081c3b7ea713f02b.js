"use strict";
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertChangeToUpdater = (change) => (configuration) => {
    const updaters = [
        c => (change.setName ? Object.assign({}, c, { name: change.setName.name }) : c),
        c => change.setDescription
            ? Object.assign({}, c, { description: change.setDescription.description })
            : c,
        c => change.setAliases
            ? Object.assign({}, c, {
                metricAlias: defaultTo(c.metricAlias, change.setAliases.metricAlias),
                logAlias: defaultTo(c.logAlias, change.setAliases.logAlias),
            })
            : c,
        c => change.setFields
            ? Object.assign({}, c, {
                fields: {
                    container: defaultTo(c.fields.container, change.setFields.container),
                    host: defaultTo(c.fields.host, change.setFields.host),
                    message: c.fields.message,
                    pod: defaultTo(c.fields.pod, change.setFields.pod),
                    tiebreaker: defaultTo(c.fields.tiebreaker, change.setFields.tiebreaker),
                    timestamp: defaultTo(c.fields.timestamp, change.setFields.timestamp),
                },
            })
            : c,
    ];
    return updaters.reduce((updatedConfiguration, updater) => updater(updatedConfiguration), configuration);
};
const defaultTo = (defaultValue, maybeValue) => typeof maybeValue === 'undefined' || maybeValue === null ? defaultValue : maybeValue;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2hvbWUvYW50aG9ueS9naXRfd29ya3NwYWNlcy9raWJhbmEveC1wYWNrL3BsdWdpbnMvaW5mcmEvY29tbW9uL3NvdXJjZV9jb25maWd1cmF0aW9uLnRzIiwic291cmNlcyI6WyIvaG9tZS9hbnRob255L2dpdF93b3Jrc3BhY2VzL2tpYmFuYS94LXBhY2svcGx1Z2lucy9pbmZyYS9jb21tb24vc291cmNlX2NvbmZpZ3VyYXRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7O0dBSUc7O0FBSVUsUUFBQSxzQkFBc0IsR0FBRyxDQUFDLE1BQXlCLEVBQUUsRUFBRSxDQUFDLENBR25FLGFBQWdCLEVBQ2IsRUFBRTtJQUNMLE1BQU0sUUFBUSxHQUF1QjtRQUNuQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQy9FLENBQUMsQ0FBQyxFQUFFLENBQ0YsTUFBTSxDQUFDLGNBQWM7WUFDbkIsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLFdBQVcsRUFBRSxNQUFNLENBQUMsY0FBYyxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQzFFLENBQUMsQ0FBQyxDQUFDO1FBQ1AsQ0FBQyxDQUFDLEVBQUUsQ0FDRixNQUFNLENBQUMsVUFBVTtZQUNmLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUU7Z0JBQ25CLFdBQVcsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxNQUFNLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQztnQkFDcEUsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDO2FBQzVELENBQUM7WUFDSixDQUFDLENBQUMsQ0FBQztRQUNQLENBQUMsQ0FBQyxFQUFFLENBQ0YsTUFBTSxDQUFDLFNBQVM7WUFDZCxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFO2dCQUNuQixNQUFNLEVBQUU7b0JBQ04sU0FBUyxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQztvQkFDcEUsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQztvQkFDckQsT0FBTyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTztvQkFDekIsR0FBRyxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQztvQkFDbEQsVUFBVSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBRSxNQUFNLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQztvQkFDdkUsU0FBUyxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQztpQkFDckU7YUFDRixDQUFDO1lBQ0osQ0FBQyxDQUFDLENBQUM7S0FDUixDQUFDO0lBQ0YsT0FBTyxRQUFRLENBQUMsTUFBTSxDQUNwQixDQUFDLG9CQUFvQixFQUFFLE9BQU8sRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLG9CQUFvQixDQUFDLEVBQ2hFLGFBQWEsQ0FDZCxDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBRUYsTUFBTSxTQUFTLEdBQUcsQ0FBSSxZQUFlLEVBQUUsVUFBZ0MsRUFBSyxFQUFFLENBQzVFLE9BQU8sVUFBVSxLQUFLLFdBQVcsSUFBSSxVQUFVLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgRWxhc3RpY3NlYXJjaCBCLlYuIGFuZC9vciBsaWNlbnNlZCB0byBFbGFzdGljc2VhcmNoIEIuVi4gdW5kZXIgb25lXG4gKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gTGljZW5zZWQgdW5kZXIgdGhlIEVsYXN0aWMgTGljZW5zZTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgRWxhc3RpYyBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEluZnJhU291cmNlQ29uZmlndXJhdGlvbiwgVXBkYXRlU291cmNlSW5wdXQgfSBmcm9tICcuL2dyYXBocWwvdHlwZXMnO1xuXG5leHBvcnQgY29uc3QgY29udmVydENoYW5nZVRvVXBkYXRlciA9IChjaGFuZ2U6IFVwZGF0ZVNvdXJjZUlucHV0KSA9PiA8XG4gIEMgZXh0ZW5kcyBJbmZyYVNvdXJjZUNvbmZpZ3VyYXRpb25cbj4oXG4gIGNvbmZpZ3VyYXRpb246IENcbik6IEMgPT4ge1xuICBjb25zdCB1cGRhdGVyczogQXJyYXk8KGM6IEMpID0+IEM+ID0gW1xuICAgIGMgPT4gKGNoYW5nZS5zZXROYW1lID8gT2JqZWN0LmFzc2lnbih7fSwgYywgeyBuYW1lOiBjaGFuZ2Uuc2V0TmFtZS5uYW1lIH0pIDogYyksXG4gICAgYyA9PlxuICAgICAgY2hhbmdlLnNldERlc2NyaXB0aW9uXG4gICAgICAgID8gT2JqZWN0LmFzc2lnbih7fSwgYywgeyBkZXNjcmlwdGlvbjogY2hhbmdlLnNldERlc2NyaXB0aW9uLmRlc2NyaXB0aW9uIH0pXG4gICAgICAgIDogYyxcbiAgICBjID0+XG4gICAgICBjaGFuZ2Uuc2V0QWxpYXNlc1xuICAgICAgICA/IE9iamVjdC5hc3NpZ24oe30sIGMsIHtcbiAgICAgICAgICAgIG1ldHJpY0FsaWFzOiBkZWZhdWx0VG8oYy5tZXRyaWNBbGlhcywgY2hhbmdlLnNldEFsaWFzZXMubWV0cmljQWxpYXMpLFxuICAgICAgICAgICAgbG9nQWxpYXM6IGRlZmF1bHRUbyhjLmxvZ0FsaWFzLCBjaGFuZ2Uuc2V0QWxpYXNlcy5sb2dBbGlhcyksXG4gICAgICAgICAgfSlcbiAgICAgICAgOiBjLFxuICAgIGMgPT5cbiAgICAgIGNoYW5nZS5zZXRGaWVsZHNcbiAgICAgICAgPyBPYmplY3QuYXNzaWduKHt9LCBjLCB7XG4gICAgICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICAgICAgY29udGFpbmVyOiBkZWZhdWx0VG8oYy5maWVsZHMuY29udGFpbmVyLCBjaGFuZ2Uuc2V0RmllbGRzLmNvbnRhaW5lciksXG4gICAgICAgICAgICAgIGhvc3Q6IGRlZmF1bHRUbyhjLmZpZWxkcy5ob3N0LCBjaGFuZ2Uuc2V0RmllbGRzLmhvc3QpLFxuICAgICAgICAgICAgICBtZXNzYWdlOiBjLmZpZWxkcy5tZXNzYWdlLFxuICAgICAgICAgICAgICBwb2Q6IGRlZmF1bHRUbyhjLmZpZWxkcy5wb2QsIGNoYW5nZS5zZXRGaWVsZHMucG9kKSxcbiAgICAgICAgICAgICAgdGllYnJlYWtlcjogZGVmYXVsdFRvKGMuZmllbGRzLnRpZWJyZWFrZXIsIGNoYW5nZS5zZXRGaWVsZHMudGllYnJlYWtlciksXG4gICAgICAgICAgICAgIHRpbWVzdGFtcDogZGVmYXVsdFRvKGMuZmllbGRzLnRpbWVzdGFtcCwgY2hhbmdlLnNldEZpZWxkcy50aW1lc3RhbXApLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9KVxuICAgICAgICA6IGMsXG4gIF07XG4gIHJldHVybiB1cGRhdGVycy5yZWR1Y2UoXG4gICAgKHVwZGF0ZWRDb25maWd1cmF0aW9uLCB1cGRhdGVyKSA9PiB1cGRhdGVyKHVwZGF0ZWRDb25maWd1cmF0aW9uKSxcbiAgICBjb25maWd1cmF0aW9uXG4gICk7XG59O1xuXG5jb25zdCBkZWZhdWx0VG8gPSA8VD4oZGVmYXVsdFZhbHVlOiBULCBtYXliZVZhbHVlOiBUIHwgdW5kZWZpbmVkIHwgbnVsbCk6IFQgPT5cbiAgdHlwZW9mIG1heWJlVmFsdWUgPT09ICd1bmRlZmluZWQnIHx8IG1heWJlVmFsdWUgPT09IG51bGwgPyBkZWZhdWx0VmFsdWUgOiBtYXliZVZhbHVlO1xuIl19