"use strict";
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = require("lodash");
const types_1 = require("../../../common/types");
const es_deprecation_logging_apis_1 = require("../es_deprecation_logging_apis");
async function getSavedObjectAttributesFromRepo(savedObjectsRepository, docType, docID) {
    try {
        return (await savedObjectsRepository.get(docType, docID)).attributes;
    }
    catch (e) {
        return null;
    }
}
async function getDeprecationLoggingStatusValue(callCluster) {
    try {
        const loggerDeprecationCallResult = await callCluster('cluster.getSettings', {
            includeDefaults: true,
        });
        return es_deprecation_logging_apis_1.isDeprecationLoggingEnabled(loggerDeprecationCallResult);
    }
    catch (e) {
        return false;
    }
}
async function fetchUpgradeAssistantMetrics(callCluster, server) {
    const { getSavedObjectsRepository } = server.savedObjects;
    const savedObjectsRepository = getSavedObjectsRepository(callCluster);
    const upgradeAssistantSOAttributes = await getSavedObjectAttributesFromRepo(savedObjectsRepository, types_1.UPGRADE_ASSISTANT_TYPE, types_1.UPGRADE_ASSISTANT_DOC_ID);
    const deprecationLoggingStatusValue = await getDeprecationLoggingStatusValue(callCluster);
    const getTelemetrySavedObject = (upgradeAssistantTelemetrySavedObjectAttrs) => {
        const defaultTelemetrySavedObject = {
            ui_open: {
                overview: 0,
                cluster: 0,
                indices: 0,
            },
            ui_reindex: {
                close: 0,
                open: 0,
                start: 0,
                stop: 0,
            },
        };
        if (!upgradeAssistantTelemetrySavedObjectAttrs) {
            return defaultTelemetrySavedObject;
        }
        const upgradeAssistantTelemetrySOAttrsKeys = Object.keys(upgradeAssistantTelemetrySavedObjectAttrs);
        const telemetryObj = defaultTelemetrySavedObject;
        upgradeAssistantTelemetrySOAttrsKeys.forEach((key) => {
            lodash_1.set(telemetryObj, key, upgradeAssistantTelemetrySavedObjectAttrs[key]);
        });
        return telemetryObj;
    };
    return {
        ...getTelemetrySavedObject(upgradeAssistantSOAttributes),
        features: {
            deprecation_logging: {
                enabled: deprecationLoggingStatusValue,
            },
        },
    };
}
exports.fetchUpgradeAssistantMetrics = fetchUpgradeAssistantMetrics;
function makeUpgradeAssistantUsageCollector(server) {
    const kbnServer = server;
    const upgradeAssistantUsageCollector = kbnServer.usage.collectorSet.makeUsageCollector({
        type: types_1.UPGRADE_ASSISTANT_TYPE,
        fetch: async (callCluster) => fetchUpgradeAssistantMetrics(callCluster, server),
    });
    kbnServer.usage.collectorSet.register(upgradeAssistantUsageCollector);
}
exports.makeUpgradeAssistantUsageCollector = makeUpgradeAssistantUsageCollector;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2hvbWUvYW50aG9ueS9naXRfd29ya3NwYWNlcy9raWJhbmEveC1wYWNrL3BsdWdpbnMvdXBncmFkZV9hc3Npc3RhbnQvc2VydmVyL2xpYi90ZWxlbWV0cnkvdXNhZ2VfY29sbGVjdG9yLnRzIiwic291cmNlcyI6WyIvaG9tZS9hbnRob255L2dpdF93b3Jrc3BhY2VzL2tpYmFuYS94LXBhY2svcGx1Z2lucy91cGdyYWRlX2Fzc2lzdGFudC9zZXJ2ZXIvbGliL3RlbGVtZXRyeS91c2FnZV9jb2xsZWN0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7O0dBSUc7O0FBRUgsbUNBQTZCO0FBRTdCLGlEQU8rQjtBQUMvQixnRkFBNkU7QUFFN0UsS0FBSyxVQUFVLGdDQUFnQyxDQUM3QyxzQkFBOEMsRUFDOUMsT0FBZSxFQUNmLEtBQWE7SUFFYixJQUFJO1FBQ0YsT0FBTyxDQUFDLE1BQU0sc0JBQXNCLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQztLQUN0RTtJQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ1YsT0FBTyxJQUFJLENBQUM7S0FDYjtBQUNILENBQUM7QUFFRCxLQUFLLFVBQVUsZ0NBQWdDLENBQUMsV0FBZ0I7SUFDOUQsSUFBSTtRQUNGLE1BQU0sMkJBQTJCLEdBQUcsTUFBTSxXQUFXLENBQUMscUJBQXFCLEVBQUU7WUFDM0UsZUFBZSxFQUFFLElBQUk7U0FDdEIsQ0FBQyxDQUFDO1FBRUgsT0FBTyx5REFBMkIsQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO0tBQ2pFO0lBQUMsT0FBTyxDQUFDLEVBQUU7UUFDVixPQUFPLEtBQUssQ0FBQztLQUNkO0FBQ0gsQ0FBQztBQUVNLEtBQUssVUFBVSw0QkFBNEIsQ0FDaEQsV0FBZ0IsRUFDaEIsTUFBdUM7SUFFdkMsTUFBTSxFQUFFLHlCQUF5QixFQUFFLEdBQUcsTUFBTSxDQUFDLFlBQVksQ0FBQztJQUMxRCxNQUFNLHNCQUFzQixHQUFHLHlCQUF5QixDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ3RFLE1BQU0sNEJBQTRCLEdBQUcsTUFBTSxnQ0FBZ0MsQ0FDekUsc0JBQXNCLEVBQ3RCLDhCQUFzQixFQUN0QixnQ0FBd0IsQ0FDekIsQ0FBQztJQUNGLE1BQU0sNkJBQTZCLEdBQUcsTUFBTSxnQ0FBZ0MsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUUxRixNQUFNLHVCQUF1QixHQUFHLENBQzlCLHlDQUFnRyxFQUMxRCxFQUFFO1FBQ3hDLE1BQU0sMkJBQTJCLEdBQUc7WUFDbEMsT0FBTyxFQUFFO2dCQUNQLFFBQVEsRUFBRSxDQUFDO2dCQUNYLE9BQU8sRUFBRSxDQUFDO2dCQUNWLE9BQU8sRUFBRSxDQUFDO2FBQ1g7WUFDRCxVQUFVLEVBQUU7Z0JBQ1YsS0FBSyxFQUFFLENBQUM7Z0JBQ1IsSUFBSSxFQUFFLENBQUM7Z0JBQ1AsS0FBSyxFQUFFLENBQUM7Z0JBQ1IsSUFBSSxFQUFFLENBQUM7YUFDUjtTQUNGLENBQUM7UUFFRixJQUFJLENBQUMseUNBQXlDLEVBQUU7WUFDOUMsT0FBTywyQkFBMkIsQ0FBQztTQUNwQztRQUVELE1BQU0sb0NBQW9DLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FDdEQseUNBQXlDLENBQzFDLENBQUM7UUFDRixNQUFNLFlBQVksR0FBRywyQkFBMkIsQ0FBQztRQUVqRCxvQ0FBb0MsQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFXLEVBQUUsRUFBRTtZQUMzRCxZQUFHLENBQUMsWUFBWSxFQUFFLEdBQUcsRUFBRSx5Q0FBeUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3pFLENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxZQUFvRCxDQUFDO0lBQzlELENBQUMsQ0FBQztJQUVGLE9BQU87UUFDTCxHQUFHLHVCQUF1QixDQUFDLDRCQUE0QixDQUFDO1FBQ3hELFFBQVEsRUFBRTtZQUNSLG1CQUFtQixFQUFFO2dCQUNuQixPQUFPLEVBQUUsNkJBQTZCO2FBQ3ZDO1NBQ0Y7S0FDRixDQUFDO0FBQ0osQ0FBQztBQXRERCxvRUFzREM7QUFFRCxTQUFnQixrQ0FBa0MsQ0FBQyxNQUF1QztJQUN4RixNQUFNLFNBQVMsR0FBRyxNQUF5QyxDQUFDO0lBQzVELE1BQU0sOEJBQThCLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsa0JBQWtCLENBQUM7UUFDckYsSUFBSSxFQUFFLDhCQUFzQjtRQUM1QixLQUFLLEVBQUUsS0FBSyxFQUFFLFdBQWdCLEVBQUUsRUFBRSxDQUFDLDRCQUE0QixDQUFDLFdBQVcsRUFBRSxNQUFNLENBQUM7S0FDckYsQ0FBQyxDQUFDO0lBRUgsU0FBUyxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLDhCQUE4QixDQUFDLENBQUM7QUFDeEUsQ0FBQztBQVJELGdGQVFDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBFbGFzdGljc2VhcmNoIEIuVi4gYW5kL29yIGxpY2Vuc2VkIHRvIEVsYXN0aWNzZWFyY2ggQi5WLiB1bmRlciBvbmVcbiAqIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiBMaWNlbnNlZCB1bmRlciB0aGUgRWxhc3RpYyBMaWNlbnNlO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBFbGFzdGljIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgc2V0IH0gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IFNhdmVkT2JqZWN0c1JlcG9zaXRvcnkgfSBmcm9tICdzcmMvc2VydmVyL3NhdmVkX29iamVjdHMvc2VydmljZS9saWIvcmVwb3NpdG9yeSc7XG5pbXBvcnQge1xuICBVUEdSQURFX0FTU0lTVEFOVF9ET0NfSUQsXG4gIFVQR1JBREVfQVNTSVNUQU5UX1RZUEUsXG4gIFVwZ3JhZGVBc3Npc3RhbnRUZWxlbWV0cnksXG4gIFVwZ3JhZGVBc3Npc3RhbnRUZWxlbWV0cnlTYXZlZE9iamVjdCxcbiAgVXBncmFkZUFzc2lzdGFudFRlbGVtZXRyeVNhdmVkT2JqZWN0QXR0cmlidXRlcyxcbiAgVXBncmFkZUFzc2lzdGFudFRlbGVtZXRyeVNlcnZlcixcbn0gZnJvbSAnLi4vLi4vLi4vY29tbW9uL3R5cGVzJztcbmltcG9ydCB7IGlzRGVwcmVjYXRpb25Mb2dnaW5nRW5hYmxlZCB9IGZyb20gJy4uL2VzX2RlcHJlY2F0aW9uX2xvZ2dpbmdfYXBpcyc7XG5cbmFzeW5jIGZ1bmN0aW9uIGdldFNhdmVkT2JqZWN0QXR0cmlidXRlc0Zyb21SZXBvKFxuICBzYXZlZE9iamVjdHNSZXBvc2l0b3J5OiBTYXZlZE9iamVjdHNSZXBvc2l0b3J5LFxuICBkb2NUeXBlOiBzdHJpbmcsXG4gIGRvY0lEOiBzdHJpbmdcbikge1xuICB0cnkge1xuICAgIHJldHVybiAoYXdhaXQgc2F2ZWRPYmplY3RzUmVwb3NpdG9yeS5nZXQoZG9jVHlwZSwgZG9jSUQpKS5hdHRyaWJ1dGVzO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0RGVwcmVjYXRpb25Mb2dnaW5nU3RhdHVzVmFsdWUoY2FsbENsdXN0ZXI6IGFueSk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICB0cnkge1xuICAgIGNvbnN0IGxvZ2dlckRlcHJlY2F0aW9uQ2FsbFJlc3VsdCA9IGF3YWl0IGNhbGxDbHVzdGVyKCdjbHVzdGVyLmdldFNldHRpbmdzJywge1xuICAgICAgaW5jbHVkZURlZmF1bHRzOiB0cnVlLFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGlzRGVwcmVjYXRpb25Mb2dnaW5nRW5hYmxlZChsb2dnZXJEZXByZWNhdGlvbkNhbGxSZXN1bHQpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBmZXRjaFVwZ3JhZGVBc3Npc3RhbnRNZXRyaWNzKFxuICBjYWxsQ2x1c3RlcjogYW55LFxuICBzZXJ2ZXI6IFVwZ3JhZGVBc3Npc3RhbnRUZWxlbWV0cnlTZXJ2ZXJcbik6IFByb21pc2U8VXBncmFkZUFzc2lzdGFudFRlbGVtZXRyeT4ge1xuICBjb25zdCB7IGdldFNhdmVkT2JqZWN0c1JlcG9zaXRvcnkgfSA9IHNlcnZlci5zYXZlZE9iamVjdHM7XG4gIGNvbnN0IHNhdmVkT2JqZWN0c1JlcG9zaXRvcnkgPSBnZXRTYXZlZE9iamVjdHNSZXBvc2l0b3J5KGNhbGxDbHVzdGVyKTtcbiAgY29uc3QgdXBncmFkZUFzc2lzdGFudFNPQXR0cmlidXRlcyA9IGF3YWl0IGdldFNhdmVkT2JqZWN0QXR0cmlidXRlc0Zyb21SZXBvKFxuICAgIHNhdmVkT2JqZWN0c1JlcG9zaXRvcnksXG4gICAgVVBHUkFERV9BU1NJU1RBTlRfVFlQRSxcbiAgICBVUEdSQURFX0FTU0lTVEFOVF9ET0NfSURcbiAgKTtcbiAgY29uc3QgZGVwcmVjYXRpb25Mb2dnaW5nU3RhdHVzVmFsdWUgPSBhd2FpdCBnZXREZXByZWNhdGlvbkxvZ2dpbmdTdGF0dXNWYWx1ZShjYWxsQ2x1c3Rlcik7XG5cbiAgY29uc3QgZ2V0VGVsZW1ldHJ5U2F2ZWRPYmplY3QgPSAoXG4gICAgdXBncmFkZUFzc2lzdGFudFRlbGVtZXRyeVNhdmVkT2JqZWN0QXR0cnM6IFVwZ3JhZGVBc3Npc3RhbnRUZWxlbWV0cnlTYXZlZE9iamVjdEF0dHJpYnV0ZXMgfCBudWxsXG4gICk6IFVwZ3JhZGVBc3Npc3RhbnRUZWxlbWV0cnlTYXZlZE9iamVjdCA9PiB7XG4gICAgY29uc3QgZGVmYXVsdFRlbGVtZXRyeVNhdmVkT2JqZWN0ID0ge1xuICAgICAgdWlfb3Blbjoge1xuICAgICAgICBvdmVydmlldzogMCxcbiAgICAgICAgY2x1c3RlcjogMCxcbiAgICAgICAgaW5kaWNlczogMCxcbiAgICAgIH0sXG4gICAgICB1aV9yZWluZGV4OiB7XG4gICAgICAgIGNsb3NlOiAwLFxuICAgICAgICBvcGVuOiAwLFxuICAgICAgICBzdGFydDogMCxcbiAgICAgICAgc3RvcDogMCxcbiAgICAgIH0sXG4gICAgfTtcblxuICAgIGlmICghdXBncmFkZUFzc2lzdGFudFRlbGVtZXRyeVNhdmVkT2JqZWN0QXR0cnMpIHtcbiAgICAgIHJldHVybiBkZWZhdWx0VGVsZW1ldHJ5U2F2ZWRPYmplY3Q7XG4gICAgfVxuXG4gICAgY29uc3QgdXBncmFkZUFzc2lzdGFudFRlbGVtZXRyeVNPQXR0cnNLZXlzID0gT2JqZWN0LmtleXMoXG4gICAgICB1cGdyYWRlQXNzaXN0YW50VGVsZW1ldHJ5U2F2ZWRPYmplY3RBdHRyc1xuICAgICk7XG4gICAgY29uc3QgdGVsZW1ldHJ5T2JqID0gZGVmYXVsdFRlbGVtZXRyeVNhdmVkT2JqZWN0O1xuXG4gICAgdXBncmFkZUFzc2lzdGFudFRlbGVtZXRyeVNPQXR0cnNLZXlzLmZvckVhY2goKGtleTogc3RyaW5nKSA9PiB7XG4gICAgICBzZXQodGVsZW1ldHJ5T2JqLCBrZXksIHVwZ3JhZGVBc3Npc3RhbnRUZWxlbWV0cnlTYXZlZE9iamVjdEF0dHJzW2tleV0pO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRlbGVtZXRyeU9iaiBhcyBVcGdyYWRlQXNzaXN0YW50VGVsZW1ldHJ5U2F2ZWRPYmplY3Q7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICAuLi5nZXRUZWxlbWV0cnlTYXZlZE9iamVjdCh1cGdyYWRlQXNzaXN0YW50U09BdHRyaWJ1dGVzKSxcbiAgICBmZWF0dXJlczoge1xuICAgICAgZGVwcmVjYXRpb25fbG9nZ2luZzoge1xuICAgICAgICBlbmFibGVkOiBkZXByZWNhdGlvbkxvZ2dpbmdTdGF0dXNWYWx1ZSxcbiAgICAgIH0sXG4gICAgfSxcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1ha2VVcGdyYWRlQXNzaXN0YW50VXNhZ2VDb2xsZWN0b3Ioc2VydmVyOiBVcGdyYWRlQXNzaXN0YW50VGVsZW1ldHJ5U2VydmVyKSB7XG4gIGNvbnN0IGtiblNlcnZlciA9IHNlcnZlciBhcyBVcGdyYWRlQXNzaXN0YW50VGVsZW1ldHJ5U2VydmVyO1xuICBjb25zdCB1cGdyYWRlQXNzaXN0YW50VXNhZ2VDb2xsZWN0b3IgPSBrYm5TZXJ2ZXIudXNhZ2UuY29sbGVjdG9yU2V0Lm1ha2VVc2FnZUNvbGxlY3Rvcih7XG4gICAgdHlwZTogVVBHUkFERV9BU1NJU1RBTlRfVFlQRSxcbiAgICBmZXRjaDogYXN5bmMgKGNhbGxDbHVzdGVyOiBhbnkpID0+IGZldGNoVXBncmFkZUFzc2lzdGFudE1ldHJpY3MoY2FsbENsdXN0ZXIsIHNlcnZlciksXG4gIH0pO1xuXG4gIGtiblNlcnZlci51c2FnZS5jb2xsZWN0b3JTZXQucmVnaXN0ZXIodXBncmFkZUFzc2lzdGFudFVzYWdlQ29sbGVjdG9yKTtcbn1cbiJdfQ==