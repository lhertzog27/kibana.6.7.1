"use strict";
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const i18n_1 = require("@kbn/i18n");
const lodash_1 = require("lodash");
// @ts-ignore
const constants_1 = require("../../common/constants");
const file_integrity_1 = require("./file_integrity");
async function getTranslationCount(loader, locale) {
    const translations = await loader.getTranslationsByLocale(locale);
    return lodash_1.size(translations.messages);
}
exports.getTranslationCount = getTranslationCount;
function createCollectorFetch(server) {
    return async function fetchUsageStats() {
        const config = server.config();
        const locale = config.get('i18n.locale');
        const translationFilePaths = server.getTranslationsFilePaths();
        const [labelsCount, integrities] = await Promise.all([
            getTranslationCount(i18n_1.i18nLoader, locale),
            file_integrity_1.getIntegrityHashes(translationFilePaths),
        ]);
        return {
            locale,
            integrities,
            labelsCount,
        };
    };
}
exports.createCollectorFetch = createCollectorFetch;
/*
 * @param {Object} server
 * @return {Object} kibana usage stats type collection object
 */
function getLocalizationUsageCollector(server) {
    const { collectorSet } = server.usage;
    return collectorSet.makeUsageCollector({
        type: constants_1.KIBANA_LOCALIZATION_STATS_TYPE,
        fetch: createCollectorFetch(server),
    });
}
exports.getLocalizationUsageCollector = getLocalizationUsageCollector;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2hvbWUvYW50aG9ueS9naXRfd29ya3NwYWNlcy9raWJhbmEveC1wYWNrL3BsdWdpbnMveHBhY2tfbWFpbi9zZXJ2ZXIvbGliL2dldF9sb2NhbGl6YXRpb25fdXNhZ2VfY29sbGVjdG9yLnRzIiwic291cmNlcyI6WyIvaG9tZS9hbnRob255L2dpdF93b3Jrc3BhY2VzL2tpYmFuYS94LXBhY2svcGx1Z2lucy94cGFja19tYWluL3NlcnZlci9saWIvZ2V0X2xvY2FsaXphdGlvbl91c2FnZV9jb2xsZWN0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7O0dBSUc7O0FBRUgsb0NBQXVDO0FBQ3ZDLG1DQUE4QjtBQUM5QixhQUFhO0FBQ2Isc0RBQXdFO0FBQ3hFLHFEQUFtRTtBQVE1RCxLQUFLLFVBQVUsbUJBQW1CLENBQUMsTUFBVyxFQUFFLE1BQWM7SUFDbkUsTUFBTSxZQUFZLEdBQUcsTUFBTSxNQUFNLENBQUMsdUJBQXVCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDbEUsT0FBTyxhQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ3JDLENBQUM7QUFIRCxrREFHQztBQUVELFNBQWdCLG9CQUFvQixDQUFDLE1BQVc7SUFDOUMsT0FBTyxLQUFLLFVBQVUsZUFBZTtRQUNuQyxNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDL0IsTUFBTSxNQUFNLEdBQVcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUNqRCxNQUFNLG9CQUFvQixHQUFhLE1BQU0sQ0FBQyx3QkFBd0IsRUFBRSxDQUFDO1FBRXpFLE1BQU0sQ0FBQyxXQUFXLEVBQUUsV0FBVyxDQUFDLEdBQUcsTUFBTSxPQUFPLENBQUMsR0FBRyxDQUFDO1lBQ25ELG1CQUFtQixDQUFDLGlCQUFVLEVBQUUsTUFBTSxDQUFDO1lBQ3ZDLG1DQUFrQixDQUFDLG9CQUFvQixDQUFDO1NBQ3pDLENBQUMsQ0FBQztRQUVILE9BQU87WUFDTCxNQUFNO1lBQ04sV0FBVztZQUNYLFdBQVc7U0FDWixDQUFDO0lBQ0osQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQWpCRCxvREFpQkM7QUFFRDs7O0dBR0c7QUFDSCxTQUFnQiw2QkFBNkIsQ0FBQyxNQUFXO0lBQ3ZELE1BQU0sRUFBRSxZQUFZLEVBQUUsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDO0lBQ3RDLE9BQU8sWUFBWSxDQUFDLGtCQUFrQixDQUFDO1FBQ3JDLElBQUksRUFBRSwwQ0FBOEI7UUFDcEMsS0FBSyxFQUFFLG9CQUFvQixDQUFDLE1BQU0sQ0FBQztLQUNwQyxDQUFDLENBQUM7QUFDTCxDQUFDO0FBTkQsc0VBTUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IEVsYXN0aWNzZWFyY2ggQi5WLiBhbmQvb3IgbGljZW5zZWQgdG8gRWxhc3RpY3NlYXJjaCBCLlYuIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuIExpY2Vuc2VkIHVuZGVyIHRoZSBFbGFzdGljIExpY2Vuc2U7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIEVsYXN0aWMgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBpMThuTG9hZGVyIH0gZnJvbSAnQGtibi9pMThuJztcbmltcG9ydCB7IHNpemUgfSBmcm9tICdsb2Rhc2gnO1xuLy8gQHRzLWlnbm9yZVxuaW1wb3J0IHsgS0lCQU5BX0xPQ0FMSVpBVElPTl9TVEFUU19UWVBFIH0gZnJvbSAnLi4vLi4vY29tbW9uL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBnZXRJbnRlZ3JpdHlIYXNoZXMsIEludGVncml0aWVzIH0gZnJvbSAnLi9maWxlX2ludGVncml0eSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXNhZ2VTdGF0cyB7XG4gIGxvY2FsZTogc3RyaW5nO1xuICBpbnRlZ3JpdGllczogSW50ZWdyaXRpZXM7XG4gIGxhYmVsc0NvdW50PzogbnVtYmVyO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0VHJhbnNsYXRpb25Db3VudChsb2FkZXI6IGFueSwgbG9jYWxlOiBzdHJpbmcpOiBQcm9taXNlPG51bWJlcj4ge1xuICBjb25zdCB0cmFuc2xhdGlvbnMgPSBhd2FpdCBsb2FkZXIuZ2V0VHJhbnNsYXRpb25zQnlMb2NhbGUobG9jYWxlKTtcbiAgcmV0dXJuIHNpemUodHJhbnNsYXRpb25zLm1lc3NhZ2VzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNvbGxlY3RvckZldGNoKHNlcnZlcjogYW55KSB7XG4gIHJldHVybiBhc3luYyBmdW5jdGlvbiBmZXRjaFVzYWdlU3RhdHMoKTogUHJvbWlzZTxVc2FnZVN0YXRzPiB7XG4gICAgY29uc3QgY29uZmlnID0gc2VydmVyLmNvbmZpZygpO1xuICAgIGNvbnN0IGxvY2FsZTogc3RyaW5nID0gY29uZmlnLmdldCgnaTE4bi5sb2NhbGUnKTtcbiAgICBjb25zdCB0cmFuc2xhdGlvbkZpbGVQYXRoczogc3RyaW5nW10gPSBzZXJ2ZXIuZ2V0VHJhbnNsYXRpb25zRmlsZVBhdGhzKCk7XG5cbiAgICBjb25zdCBbbGFiZWxzQ291bnQsIGludGVncml0aWVzXSA9IGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgIGdldFRyYW5zbGF0aW9uQ291bnQoaTE4bkxvYWRlciwgbG9jYWxlKSxcbiAgICAgIGdldEludGVncml0eUhhc2hlcyh0cmFuc2xhdGlvbkZpbGVQYXRocyksXG4gICAgXSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgbG9jYWxlLFxuICAgICAgaW50ZWdyaXRpZXMsXG4gICAgICBsYWJlbHNDb3VudCxcbiAgICB9O1xuICB9O1xufVxuXG4vKlxuICogQHBhcmFtIHtPYmplY3R9IHNlcnZlclxuICogQHJldHVybiB7T2JqZWN0fSBraWJhbmEgdXNhZ2Ugc3RhdHMgdHlwZSBjb2xsZWN0aW9uIG9iamVjdFxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0TG9jYWxpemF0aW9uVXNhZ2VDb2xsZWN0b3Ioc2VydmVyOiBhbnkpIHtcbiAgY29uc3QgeyBjb2xsZWN0b3JTZXQgfSA9IHNlcnZlci51c2FnZTtcbiAgcmV0dXJuIGNvbGxlY3RvclNldC5tYWtlVXNhZ2VDb2xsZWN0b3Ioe1xuICAgIHR5cGU6IEtJQkFOQV9MT0NBTElaQVRJT05fU1RBVFNfVFlQRSxcbiAgICBmZXRjaDogY3JlYXRlQ29sbGVjdG9yRmV0Y2goc2VydmVyKSxcbiAgfSk7XG59XG4iXX0=