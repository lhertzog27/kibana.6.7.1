"use strict";
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = require("lodash");
const sortPings = (sort) => sort === 'asc'
    ? (a, b) => (Date.parse(a.timestamp) > Date.parse(b.timestamp) ? 1 : 0)
    : (a, b) => (Date.parse(a.timestamp) > Date.parse(b.timestamp) ? 0 : 1);
class MemoryPingsAdapter {
    constructor(pingsDB) {
        this.pingsDB = pingsDB;
    }
    async getAll(request, dateRangeStart, dateRangeEnd, monitorId, status, sort, size) {
        let pings = this.pingsDB;
        if (monitorId) {
            pings = pings.filter(ping => ping.monitor && ping.monitor.id === monitorId);
        }
        size = size ? size : 10;
        return {
            total: size,
            pings: lodash_1.take(sort ? pings.sort(sortPings(sort)) : pings, size),
        };
    }
    // TODO: implement
    getLatestMonitorDocs(request, dateRangeStart, dateRangeEnd, monitorId) {
        throw new Error('Method not implemented.');
    }
    // TODO: implement
    getPingHistogram(request, dateRangeStart, dateRangeEnd, filters) {
        throw new Error('Method not implemented.');
    }
    // TODO: implement
    getDocCount(request) {
        throw new Error('Method not implemented.');
    }
}
exports.MemoryPingsAdapter = MemoryPingsAdapter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2hvbWUvYW50aG9ueS9naXRfd29ya3NwYWNlcy9raWJhbmEveC1wYWNrL3BsdWdpbnMvdXB0aW1lL3NlcnZlci9saWIvYWRhcHRlcnMvcGluZ3MvbWVtb3J5X3BpbmdzX2FkYXB0ZXIudHMiLCJzb3VyY2VzIjpbIi9ob21lL2FudGhvbnkvZ2l0X3dvcmtzcGFjZXMva2liYW5hL3gtcGFjay9wbHVnaW5zL3VwdGltZS9zZXJ2ZXIvbGliL2FkYXB0ZXJzL3BpbmdzL21lbW9yeV9waW5nc19hZGFwdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7OztHQUlHOztBQUVILG1DQUE4QjtBQUk5QixNQUFNLFNBQVMsR0FBRyxDQUFDLElBQVksRUFBRSxFQUFFLENBQ2pDLElBQUksS0FBSyxLQUFLO0lBQ1osQ0FBQyxDQUFDLENBQUMsQ0FBTyxFQUFFLENBQU8sRUFBRSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbkYsQ0FBQyxDQUFDLENBQUMsQ0FBTyxFQUFFLENBQU8sRUFBRSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUV4RixNQUFhLGtCQUFrQjtJQUc3QixZQUFZLE9BQWU7UUFDekIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7SUFDekIsQ0FBQztJQUVNLEtBQUssQ0FBQyxNQUFNLENBQ2pCLE9BQVksRUFDWixjQUFzQixFQUN0QixZQUFvQixFQUNwQixTQUF5QixFQUN6QixNQUFzQixFQUN0QixJQUFvQixFQUNwQixJQUFvQjtRQUVwQixJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQ3pCLElBQUksU0FBUyxFQUFFO1lBQ2IsS0FBSyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxLQUFLLFNBQVMsQ0FBQyxDQUFDO1NBQzdFO1FBRUQsSUFBSSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDeEIsT0FBTztZQUNMLEtBQUssRUFBRSxJQUFJO1lBQ1gsS0FBSyxFQUFFLGFBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUM7U0FDOUQsQ0FBQztJQUNKLENBQUM7SUFFRCxrQkFBa0I7SUFDWCxvQkFBb0IsQ0FDekIsT0FBWSxFQUNaLGNBQXNCLEVBQ3RCLFlBQW9CLEVBQ3BCLFNBQXlCO1FBRXpCLE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBRUQsa0JBQWtCO0lBQ1gsZ0JBQWdCLENBQ3JCLE9BQVksRUFDWixjQUFzQixFQUN0QixZQUFvQixFQUNwQixPQUFtQztRQUVuQyxNQUFNLElBQUksS0FBSyxDQUFDLHlCQUF5QixDQUFDLENBQUM7SUFDN0MsQ0FBQztJQUVELGtCQUFrQjtJQUNYLFdBQVcsQ0FBQyxPQUFZO1FBQzdCLE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQztJQUM3QyxDQUFDO0NBQ0Y7QUFwREQsZ0RBb0RDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBFbGFzdGljc2VhcmNoIEIuVi4gYW5kL29yIGxpY2Vuc2VkIHRvIEVsYXN0aWNzZWFyY2ggQi5WLiB1bmRlciBvbmVcbiAqIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiBMaWNlbnNlZCB1bmRlciB0aGUgRWxhc3RpYyBMaWNlbnNlO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBFbGFzdGljIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgdGFrZSB9IGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBEb2NDb3VudCwgSGlzdG9ncmFtRGF0YVBvaW50LCBQaW5nLCBQaW5nUmVzdWx0cyB9IGZyb20gJy4uLy4uLy4uLy4uL2NvbW1vbi9ncmFwaHFsL3R5cGVzJztcbmltcG9ydCB7IFVNUGluZ3NBZGFwdGVyIH0gZnJvbSAnLi9hZGFwdGVyX3R5cGVzJztcblxuY29uc3Qgc29ydFBpbmdzID0gKHNvcnQ6IHN0cmluZykgPT5cbiAgc29ydCA9PT0gJ2FzYydcbiAgICA/IChhOiBQaW5nLCBiOiBQaW5nKSA9PiAoRGF0ZS5wYXJzZShhLnRpbWVzdGFtcCkgPiBEYXRlLnBhcnNlKGIudGltZXN0YW1wKSA/IDEgOiAwKVxuICAgIDogKGE6IFBpbmcsIGI6IFBpbmcpID0+IChEYXRlLnBhcnNlKGEudGltZXN0YW1wKSA+IERhdGUucGFyc2UoYi50aW1lc3RhbXApID8gMCA6IDEpO1xuXG5leHBvcnQgY2xhc3MgTWVtb3J5UGluZ3NBZGFwdGVyIGltcGxlbWVudHMgVU1QaW5nc0FkYXB0ZXIge1xuICBwcml2YXRlIHBpbmdzREI6IFBpbmdbXTtcblxuICBjb25zdHJ1Y3RvcihwaW5nc0RCOiBQaW5nW10pIHtcbiAgICB0aGlzLnBpbmdzREIgPSBwaW5nc0RCO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGdldEFsbChcbiAgICByZXF1ZXN0OiBhbnksXG4gICAgZGF0ZVJhbmdlU3RhcnQ6IHN0cmluZyxcbiAgICBkYXRlUmFuZ2VFbmQ6IHN0cmluZyxcbiAgICBtb25pdG9ySWQ/OiBzdHJpbmcgfCBudWxsLFxuICAgIHN0YXR1cz86IHN0cmluZyB8IG51bGwsXG4gICAgc29ydD86IHN0cmluZyB8IG51bGwsXG4gICAgc2l6ZT86IG51bWJlciB8IG51bGxcbiAgKTogUHJvbWlzZTxQaW5nUmVzdWx0cz4ge1xuICAgIGxldCBwaW5ncyA9IHRoaXMucGluZ3NEQjtcbiAgICBpZiAobW9uaXRvcklkKSB7XG4gICAgICBwaW5ncyA9IHBpbmdzLmZpbHRlcihwaW5nID0+IHBpbmcubW9uaXRvciAmJiBwaW5nLm1vbml0b3IuaWQgPT09IG1vbml0b3JJZCk7XG4gICAgfVxuXG4gICAgc2l6ZSA9IHNpemUgPyBzaXplIDogMTA7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRvdGFsOiBzaXplLFxuICAgICAgcGluZ3M6IHRha2Uoc29ydCA/IHBpbmdzLnNvcnQoc29ydFBpbmdzKHNvcnQpKSA6IHBpbmdzLCBzaXplKSxcbiAgICB9O1xuICB9XG5cbiAgLy8gVE9ETzogaW1wbGVtZW50XG4gIHB1YmxpYyBnZXRMYXRlc3RNb25pdG9yRG9jcyhcbiAgICByZXF1ZXN0OiBhbnksXG4gICAgZGF0ZVJhbmdlU3RhcnQ6IHN0cmluZyxcbiAgICBkYXRlUmFuZ2VFbmQ6IHN0cmluZyxcbiAgICBtb25pdG9ySWQ/OiBzdHJpbmcgfCBudWxsXG4gICk6IFByb21pc2U8UGluZ1tdPiB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdNZXRob2Qgbm90IGltcGxlbWVudGVkLicpO1xuICB9XG5cbiAgLy8gVE9ETzogaW1wbGVtZW50XG4gIHB1YmxpYyBnZXRQaW5nSGlzdG9ncmFtKFxuICAgIHJlcXVlc3Q6IGFueSxcbiAgICBkYXRlUmFuZ2VTdGFydDogc3RyaW5nLFxuICAgIGRhdGVSYW5nZUVuZDogc3RyaW5nLFxuICAgIGZpbHRlcnM/OiBzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkXG4gICk6IFByb21pc2U8SGlzdG9ncmFtRGF0YVBvaW50W10+IHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ01ldGhvZCBub3QgaW1wbGVtZW50ZWQuJyk7XG4gIH1cblxuICAvLyBUT0RPOiBpbXBsZW1lbnRcbiAgcHVibGljIGdldERvY0NvdW50KHJlcXVlc3Q6IGFueSk6IFByb21pc2U8RG9jQ291bnQ+IHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ01ldGhvZCBub3QgaW1wbGVtZW50ZWQuJyk7XG4gIH1cbn1cbiJdfQ==