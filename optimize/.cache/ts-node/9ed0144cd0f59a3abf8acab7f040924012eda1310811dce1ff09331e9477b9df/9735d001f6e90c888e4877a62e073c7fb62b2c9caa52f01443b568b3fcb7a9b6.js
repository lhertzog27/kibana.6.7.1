"use strict";
/*
 * Licensed to Elasticsearch B.V. under one or more contributor
 * license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch B.V. licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const podium_1 = tslib_1.__importDefault(require("podium"));
// @ts-ignore: implicit any for JS file
const config_1 = require("../../../../server/config");
// @ts-ignore: implicit any for JS file
const logging_1 = require("../../../../server/logging");
/**
 * Converts core log level to a one that's known to the legacy platform.
 * @param level Log level from the core.
 */
function getLegacyLogLevel(level) {
    const logLevel = level.id.toLowerCase();
    if (logLevel === 'warn') {
        return 'warning';
    }
    if (logLevel === 'trace') {
        return 'debug';
    }
    return logLevel;
}
/**
 *  The "legacy" Kibana uses Hapi server + even-better plugin to log, so we should
 *  use the same approach here to make log records generated by the core to look the
 *  same as the rest of the records generated by the "legacy" Kibana. But to reduce
 *  overhead of having full blown Hapi server instance we create our own "light" version.
 *  @internal
 */
class LegacyLoggingServer {
    constructor(legacyLoggingConfig) {
        this.connections = [];
        // Emulates Hapi's usage of the podium event bus.
        this.events = new podium_1.default(['log', 'request', 'response']);
        // We set `ops.interval` to max allowed number and `ops` filter to value
        // that doesn't exist to avoid logging of ops at all, if turned on it will be
        // logged by the "legacy" Kibana.
        const config = {
            logging: {
                ...legacyLoggingConfig,
                events: {
                    ...legacyLoggingConfig.events,
                    ops: '__no-ops__',
                },
            },
            ops: { interval: 2147483647 },
        };
        logging_1.setupLogging(this, config_1.Config.withDefaultSchema(config_1.transformDeprecations(config)));
    }
    register({ plugin: { register }, options }) {
        return register(this, options);
    }
    log({ level, context, message, error, timestamp, meta = {} }) {
        this.events.emit('log', {
            data: error || message,
            tags: [getLegacyLogLevel(level), ...context.split('.'), ...(meta.tags || [])],
            timestamp: timestamp.getTime(),
        });
    }
    stop() {
        // Tell the plugin we're stopping.
        if (this.onPostStopCallback !== undefined) {
            this.onPostStopCallback();
        }
    }
    ext(eventName, callback) {
        // method is called by plugin that's being registered.
        if (eventName === 'onPostStop') {
            this.onPostStopCallback = callback;
        }
        // We don't care about any others the plugin registers
    }
    expose() {
        // method is called by plugin that's being registered.
    }
}
exports.LegacyLoggingServer = LegacyLoggingServer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2hvbWUvYW50aG9ueS9naXRfd29ya3NwYWNlcy9raWJhbmEvc3JjL2NvcmUvc2VydmVyL2xlZ2FjeV9jb21wYXQvbG9nZ2luZy9sZWdhY3lfbG9nZ2luZ19zZXJ2ZXIudHMiLCJzb3VyY2VzIjpbIi9ob21lL2FudGhvbnkvZ2l0X3dvcmtzcGFjZXMva2liYW5hL3NyYy9jb3JlL3NlcnZlci9sZWdhY3lfY29tcGF0L2xvZ2dpbmcvbGVnYWN5X2xvZ2dpbmdfc2VydmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FpQkc7OztBQUdILDREQUE0QjtBQUM1Qix1Q0FBdUM7QUFDdkMsc0RBQTBFO0FBQzFFLHVDQUF1QztBQUN2Qyx3REFBMEQ7QUFjMUQ7OztHQUdHO0FBQ0gsU0FBUyxpQkFBaUIsQ0FBQyxLQUFlO0lBQ3hDLE1BQU0sUUFBUSxHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDeEMsSUFBSSxRQUFRLEtBQUssTUFBTSxFQUFFO1FBQ3ZCLE9BQU8sU0FBUyxDQUFDO0tBQ2xCO0lBRUQsSUFBSSxRQUFRLEtBQUssT0FBTyxFQUFFO1FBQ3hCLE9BQU8sT0FBTyxDQUFDO0tBQ2hCO0lBRUQsT0FBTyxRQUFRLENBQUM7QUFDbEIsQ0FBQztBQUVEOzs7Ozs7R0FNRztBQUNILE1BQWEsbUJBQW1CO0lBTzlCLFlBQVksbUJBQWtEO1FBTnZELGdCQUFXLEdBQUcsRUFBRSxDQUFDO1FBQ3hCLGlEQUFpRDtRQUMxQyxXQUFNLEdBQVcsSUFBSSxnQkFBTSxDQUFDLENBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFDO1FBS2pFLHdFQUF3RTtRQUN4RSw2RUFBNkU7UUFDN0UsaUNBQWlDO1FBQ2pDLE1BQU0sTUFBTSxHQUFHO1lBQ2IsT0FBTyxFQUFFO2dCQUNQLEdBQUcsbUJBQW1CO2dCQUN0QixNQUFNLEVBQUU7b0JBQ04sR0FBRyxtQkFBbUIsQ0FBQyxNQUFNO29CQUM3QixHQUFHLEVBQUUsWUFBWTtpQkFDbEI7YUFDRjtZQUNELEdBQUcsRUFBRSxFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQUU7U0FDOUIsQ0FBQztRQUVGLHNCQUFZLENBQUMsSUFBSSxFQUFFLGVBQU0sQ0FBQyxpQkFBaUIsQ0FBQyw4QkFBcUIsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDOUUsQ0FBQztJQUVNLFFBQVEsQ0FBQyxFQUFFLE1BQU0sRUFBRSxFQUFFLFFBQVEsRUFBRSxFQUFFLE9BQU8sRUFBd0I7UUFDckUsT0FBTyxRQUFRLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFFTSxHQUFHLENBQUMsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLElBQUksR0FBRyxFQUFFLEVBQWE7UUFDNUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ3RCLElBQUksRUFBRSxLQUFLLElBQUksT0FBTztZQUN0QixJQUFJLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsRUFBRSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDLENBQUM7WUFDN0UsU0FBUyxFQUFFLFNBQVMsQ0FBQyxPQUFPLEVBQUU7U0FDL0IsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVNLElBQUk7UUFDVCxrQ0FBa0M7UUFDbEMsSUFBSSxJQUFJLENBQUMsa0JBQWtCLEtBQUssU0FBUyxFQUFFO1lBQ3pDLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO1NBQzNCO0lBQ0gsQ0FBQztJQUVNLEdBQUcsQ0FBQyxTQUF3QixFQUFFLFFBQW9CO1FBQ3ZELHNEQUFzRDtRQUN0RCxJQUFJLFNBQVMsS0FBSyxZQUFZLEVBQUU7WUFDOUIsSUFBSSxDQUFDLGtCQUFrQixHQUFHLFFBQVEsQ0FBQztTQUNwQztRQUNELHNEQUFzRDtJQUN4RCxDQUFDO0lBRU0sTUFBTTtRQUNYLHNEQUFzRDtJQUN4RCxDQUFDO0NBQ0Y7QUF2REQsa0RBdURDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIExpY2Vuc2VkIHRvIEVsYXN0aWNzZWFyY2ggQi5WLiB1bmRlciBvbmUgb3IgbW9yZSBjb250cmlidXRvclxuICogbGljZW5zZSBhZ3JlZW1lbnRzLiBTZWUgdGhlIE5PVElDRSBmaWxlIGRpc3RyaWJ1dGVkIHdpdGhcbiAqIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiByZWdhcmRpbmcgY29weXJpZ2h0XG4gKiBvd25lcnNoaXAuIEVsYXN0aWNzZWFyY2ggQi5WLiBsaWNlbnNlcyB0aGlzIGZpbGUgdG8geW91IHVuZGVyXG4gKiB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpOyB5b3UgbWF5XG4gKiBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IFNlcnZlckV4dFR5cGUgfSBmcm9tICdoYXBpJztcbmltcG9ydCBQb2RpdW0gZnJvbSAncG9kaXVtJztcbi8vIEB0cy1pZ25vcmU6IGltcGxpY2l0IGFueSBmb3IgSlMgZmlsZVxuaW1wb3J0IHsgQ29uZmlnLCB0cmFuc2Zvcm1EZXByZWNhdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9zZXJ2ZXIvY29uZmlnJztcbi8vIEB0cy1pZ25vcmU6IGltcGxpY2l0IGFueSBmb3IgSlMgZmlsZVxuaW1wb3J0IHsgc2V0dXBMb2dnaW5nIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2VydmVyL2xvZ2dpbmcnO1xuaW1wb3J0IHsgTG9nTGV2ZWwgfSBmcm9tICcuLi8uLi9sb2dnaW5nL2xvZ19sZXZlbCc7XG5pbXBvcnQgeyBMb2dSZWNvcmQgfSBmcm9tICcuLi8uLi9sb2dnaW5nL2xvZ19yZWNvcmQnO1xuXG5pbnRlcmZhY2UgUGx1Z2luUmVnaXN0ZXJQYXJhbXMge1xuICBwbHVnaW46IHtcbiAgICByZWdpc3RlcjogKFxuICAgICAgc2VydmVyOiBMZWdhY3lMb2dnaW5nU2VydmVyLFxuICAgICAgb3B0aW9uczogUGx1Z2luUmVnaXN0ZXJQYXJhbXNbJ29wdGlvbnMnXVxuICAgICkgPT4gUHJvbWlzZTx2b2lkPjtcbiAgfTtcbiAgb3B0aW9uczogUmVjb3JkPHN0cmluZywgYW55Pjtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBjb3JlIGxvZyBsZXZlbCB0byBhIG9uZSB0aGF0J3Mga25vd24gdG8gdGhlIGxlZ2FjeSBwbGF0Zm9ybS5cbiAqIEBwYXJhbSBsZXZlbCBMb2cgbGV2ZWwgZnJvbSB0aGUgY29yZS5cbiAqL1xuZnVuY3Rpb24gZ2V0TGVnYWN5TG9nTGV2ZWwobGV2ZWw6IExvZ0xldmVsKSB7XG4gIGNvbnN0IGxvZ0xldmVsID0gbGV2ZWwuaWQudG9Mb3dlckNhc2UoKTtcbiAgaWYgKGxvZ0xldmVsID09PSAnd2FybicpIHtcbiAgICByZXR1cm4gJ3dhcm5pbmcnO1xuICB9XG5cbiAgaWYgKGxvZ0xldmVsID09PSAndHJhY2UnKSB7XG4gICAgcmV0dXJuICdkZWJ1Zyc7XG4gIH1cblxuICByZXR1cm4gbG9nTGV2ZWw7XG59XG5cbi8qKlxuICogIFRoZSBcImxlZ2FjeVwiIEtpYmFuYSB1c2VzIEhhcGkgc2VydmVyICsgZXZlbi1iZXR0ZXIgcGx1Z2luIHRvIGxvZywgc28gd2Ugc2hvdWxkXG4gKiAgdXNlIHRoZSBzYW1lIGFwcHJvYWNoIGhlcmUgdG8gbWFrZSBsb2cgcmVjb3JkcyBnZW5lcmF0ZWQgYnkgdGhlIGNvcmUgdG8gbG9vayB0aGVcbiAqICBzYW1lIGFzIHRoZSByZXN0IG9mIHRoZSByZWNvcmRzIGdlbmVyYXRlZCBieSB0aGUgXCJsZWdhY3lcIiBLaWJhbmEuIEJ1dCB0byByZWR1Y2VcbiAqICBvdmVyaGVhZCBvZiBoYXZpbmcgZnVsbCBibG93biBIYXBpIHNlcnZlciBpbnN0YW5jZSB3ZSBjcmVhdGUgb3VyIG93biBcImxpZ2h0XCIgdmVyc2lvbi5cbiAqICBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNsYXNzIExlZ2FjeUxvZ2dpbmdTZXJ2ZXIge1xuICBwdWJsaWMgY29ubmVjdGlvbnMgPSBbXTtcbiAgLy8gRW11bGF0ZXMgSGFwaSdzIHVzYWdlIG9mIHRoZSBwb2RpdW0gZXZlbnQgYnVzLlxuICBwdWJsaWMgZXZlbnRzOiBQb2RpdW0gPSBuZXcgUG9kaXVtKFsnbG9nJywgJ3JlcXVlc3QnLCAncmVzcG9uc2UnXSk7XG5cbiAgcHJpdmF0ZSBvblBvc3RTdG9wQ2FsbGJhY2s/OiAoKSA9PiB2b2lkO1xuXG4gIGNvbnN0cnVjdG9yKGxlZ2FjeUxvZ2dpbmdDb25maWc6IFJlYWRvbmx5PFJlY29yZDxzdHJpbmcsIGFueT4+KSB7XG4gICAgLy8gV2Ugc2V0IGBvcHMuaW50ZXJ2YWxgIHRvIG1heCBhbGxvd2VkIG51bWJlciBhbmQgYG9wc2AgZmlsdGVyIHRvIHZhbHVlXG4gICAgLy8gdGhhdCBkb2Vzbid0IGV4aXN0IHRvIGF2b2lkIGxvZ2dpbmcgb2Ygb3BzIGF0IGFsbCwgaWYgdHVybmVkIG9uIGl0IHdpbGwgYmVcbiAgICAvLyBsb2dnZWQgYnkgdGhlIFwibGVnYWN5XCIgS2liYW5hLlxuICAgIGNvbnN0IGNvbmZpZyA9IHtcbiAgICAgIGxvZ2dpbmc6IHtcbiAgICAgICAgLi4ubGVnYWN5TG9nZ2luZ0NvbmZpZyxcbiAgICAgICAgZXZlbnRzOiB7XG4gICAgICAgICAgLi4ubGVnYWN5TG9nZ2luZ0NvbmZpZy5ldmVudHMsXG4gICAgICAgICAgb3BzOiAnX19uby1vcHNfXycsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAgb3BzOiB7IGludGVydmFsOiAyMTQ3NDgzNjQ3IH0sXG4gICAgfTtcblxuICAgIHNldHVwTG9nZ2luZyh0aGlzLCBDb25maWcud2l0aERlZmF1bHRTY2hlbWEodHJhbnNmb3JtRGVwcmVjYXRpb25zKGNvbmZpZykpKTtcbiAgfVxuXG4gIHB1YmxpYyByZWdpc3Rlcih7IHBsdWdpbjogeyByZWdpc3RlciB9LCBvcHRpb25zIH06IFBsdWdpblJlZ2lzdGVyUGFyYW1zKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuIHJlZ2lzdGVyKHRoaXMsIG9wdGlvbnMpO1xuICB9XG5cbiAgcHVibGljIGxvZyh7IGxldmVsLCBjb250ZXh0LCBtZXNzYWdlLCBlcnJvciwgdGltZXN0YW1wLCBtZXRhID0ge30gfTogTG9nUmVjb3JkKSB7XG4gICAgdGhpcy5ldmVudHMuZW1pdCgnbG9nJywge1xuICAgICAgZGF0YTogZXJyb3IgfHwgbWVzc2FnZSxcbiAgICAgIHRhZ3M6IFtnZXRMZWdhY3lMb2dMZXZlbChsZXZlbCksIC4uLmNvbnRleHQuc3BsaXQoJy4nKSwgLi4uKG1ldGEudGFncyB8fCBbXSldLFxuICAgICAgdGltZXN0YW1wOiB0aW1lc3RhbXAuZ2V0VGltZSgpLFxuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIHN0b3AoKSB7XG4gICAgLy8gVGVsbCB0aGUgcGx1Z2luIHdlJ3JlIHN0b3BwaW5nLlxuICAgIGlmICh0aGlzLm9uUG9zdFN0b3BDYWxsYmFjayAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLm9uUG9zdFN0b3BDYWxsYmFjaygpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBleHQoZXZlbnROYW1lOiBTZXJ2ZXJFeHRUeXBlLCBjYWxsYmFjazogKCkgPT4gdm9pZCkge1xuICAgIC8vIG1ldGhvZCBpcyBjYWxsZWQgYnkgcGx1Z2luIHRoYXQncyBiZWluZyByZWdpc3RlcmVkLlxuICAgIGlmIChldmVudE5hbWUgPT09ICdvblBvc3RTdG9wJykge1xuICAgICAgdGhpcy5vblBvc3RTdG9wQ2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgICB9XG4gICAgLy8gV2UgZG9uJ3QgY2FyZSBhYm91dCBhbnkgb3RoZXJzIHRoZSBwbHVnaW4gcmVnaXN0ZXJzXG4gIH1cblxuICBwdWJsaWMgZXhwb3NlKCkge1xuICAgIC8vIG1ldGhvZCBpcyBjYWxsZWQgYnkgcGx1Z2luIHRoYXQncyBiZWluZyByZWdpc3RlcmVkLlxuICB9XG59XG4iXX0=