"use strict";
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const CLOUD_FILTERS = [
    'Security realm settings structure changed',
    'TLS v1.0 has been removed from default TLS/SSL protocols',
    'GCS Repository settings changed',
];
async function getUpgradeAssistantStatus(callWithRequest, req, isCloudEnabled) {
    const deprecations = await callWithRequest(req, 'transport.request', {
        path: '/_xpack/migration/deprecations',
        method: 'GET',
    });
    const cluster = getClusterDeprecations(deprecations, isCloudEnabled);
    const indices = getCombinedIndexInfos(deprecations);
    const criticalWarnings = cluster.concat(indices).filter(d => d.level === 'critical');
    return {
        readyForUpgrade: criticalWarnings.length === 0,
        cluster,
        indices,
    };
}
exports.getUpgradeAssistantStatus = getUpgradeAssistantStatus;
// Reformats the index deprecations to an array of deprecation warnings extended with an index field.
const getCombinedIndexInfos = (deprecations) => Object.keys(deprecations.index_settings).reduce((indexDeprecations, indexName) => {
    return indexDeprecations.concat(deprecations.index_settings[indexName].map(d => ({ ...d, index: indexName })));
}, []);
const getClusterDeprecations = (deprecations, isCloudEnabled) => {
    const combined = deprecations.cluster_settings
        .concat(deprecations.ml_settings)
        .concat(deprecations.node_settings);
    if (isCloudEnabled) {
        // In Cloud, this is handled at upgrade time. Filter it out improve upgrade UX.
        return combined.filter(d => CLOUD_FILTERS.indexOf(d.message) === -1);
    }
    else {
        return combined;
    }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2hvbWUvYW50aG9ueS9naXRfd29ya3NwYWNlcy9raWJhbmEveC1wYWNrL3BsdWdpbnMvdXBncmFkZV9hc3Npc3RhbnQvc2VydmVyL2xpYi9lc19taWdyYXRpb25fYXBpcy50cyIsInNvdXJjZXMiOlsiL2hvbWUvYW50aG9ueS9naXRfd29ya3NwYWNlcy9raWJhbmEveC1wYWNrL3BsdWdpbnMvdXBncmFkZV9hc3Npc3RhbnQvc2VydmVyL2xpYi9lc19taWdyYXRpb25fYXBpcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7R0FJRzs7QUFXSCxNQUFNLGFBQWEsR0FBRztJQUNwQiwyQ0FBMkM7SUFDM0MsMERBQTBEO0lBQzFELGlDQUFpQztDQUNsQyxDQUFDO0FBYUssS0FBSyxVQUFVLHlCQUF5QixDQUM3QyxlQUF1QyxFQUN2QyxHQUFZLEVBQ1osY0FBdUI7SUFFdkIsTUFBTSxZQUFZLEdBQUcsTUFBTSxlQUFlLENBQUMsR0FBRyxFQUFFLG1CQUFtQixFQUFFO1FBQ25FLElBQUksRUFBRSxnQ0FBZ0M7UUFDdEMsTUFBTSxFQUFFLEtBQUs7S0FDZCxDQUFDLENBQUM7SUFFSCxNQUFNLE9BQU8sR0FBRyxzQkFBc0IsQ0FBQyxZQUFZLEVBQUUsY0FBYyxDQUFDLENBQUM7SUFDckUsTUFBTSxPQUFPLEdBQUcscUJBQXFCLENBQUMsWUFBWSxDQUFDLENBQUM7SUFFcEQsTUFBTSxnQkFBZ0IsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLEtBQUssVUFBVSxDQUFDLENBQUM7SUFFckYsT0FBTztRQUNMLGVBQWUsRUFBRSxnQkFBZ0IsQ0FBQyxNQUFNLEtBQUssQ0FBQztRQUM5QyxPQUFPO1FBQ1AsT0FBTztLQUNSLENBQUM7QUFDSixDQUFDO0FBcEJELDhEQW9CQztBQUVELHFHQUFxRztBQUNyRyxNQUFNLHFCQUFxQixHQUFHLENBQUMsWUFBb0MsRUFBRSxFQUFFLENBQ3JFLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLGNBQWMsQ0FBQyxDQUFDLE1BQU0sQ0FDN0MsQ0FBQyxpQkFBaUIsRUFBRSxTQUFTLEVBQUUsRUFBRTtJQUMvQixPQUFPLGlCQUFpQixDQUFDLE1BQU0sQ0FDN0IsWUFBWSxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxHQUFHLENBQ3hDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQThCLENBQUEsQ0FDN0QsQ0FDRixDQUFDO0FBQ0osQ0FBQyxFQUNELEVBQStCLENBQ2hDLENBQUM7QUFFSixNQUFNLHNCQUFzQixHQUFHLENBQUMsWUFBb0MsRUFBRSxjQUF1QixFQUFFLEVBQUU7SUFDL0YsTUFBTSxRQUFRLEdBQUcsWUFBWSxDQUFDLGdCQUFnQjtTQUMzQyxNQUFNLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQztTQUNoQyxNQUFNLENBQUMsWUFBWSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBRXRDLElBQUksY0FBYyxFQUFFO1FBQ2xCLCtFQUErRTtRQUMvRSxPQUFPLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ3RFO1NBQU07UUFDTCxPQUFPLFFBQVEsQ0FBQztLQUNqQjtBQUNILENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgRWxhc3RpY3NlYXJjaCBCLlYuIGFuZC9vciBsaWNlbnNlZCB0byBFbGFzdGljc2VhcmNoIEIuVi4gdW5kZXIgb25lXG4gKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gTGljZW5zZWQgdW5kZXIgdGhlIEVsYXN0aWMgTGljZW5zZTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgRWxhc3RpYyBMaWNlbnNlLlxuICovXG5cbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5cbmltcG9ydCB7IFJlcXVlc3QgfSBmcm9tICdoYXBpJztcbmltcG9ydCB7XG4gIENhbGxDbHVzdGVyV2l0aFJlcXVlc3QsXG4gIERlcHJlY2F0aW9uQVBJUmVzcG9uc2UsXG4gIERlcHJlY2F0aW9uSW5mbyxcbn0gZnJvbSAnc3JjL2xlZ2FjeS9jb3JlX3BsdWdpbnMvZWxhc3RpY3NlYXJjaCc7XG5cbmNvbnN0IENMT1VEX0ZJTFRFUlMgPSBbXG4gICdTZWN1cml0eSByZWFsbSBzZXR0aW5ncyBzdHJ1Y3R1cmUgY2hhbmdlZCcsXG4gICdUTFMgdjEuMCBoYXMgYmVlbiByZW1vdmVkIGZyb20gZGVmYXVsdCBUTFMvU1NMIHByb3RvY29scycsXG4gICdHQ1MgUmVwb3NpdG9yeSBzZXR0aW5ncyBjaGFuZ2VkJyxcbl07XG5cbmV4cG9ydCBpbnRlcmZhY2UgRW5yaWNoZWREZXByZWNhdGlvbkluZm8gZXh0ZW5kcyBEZXByZWNhdGlvbkluZm8ge1xuICBpbmRleD86IHN0cmluZztcbiAgbm9kZT86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBVcGdyYWRlQXNzaXN0YW50U3RhdHVzIHtcbiAgcmVhZHlGb3JVcGdyYWRlOiBib29sZWFuO1xuICBjbHVzdGVyOiBFbnJpY2hlZERlcHJlY2F0aW9uSW5mb1tdO1xuICBpbmRpY2VzOiBFbnJpY2hlZERlcHJlY2F0aW9uSW5mb1tdO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0VXBncmFkZUFzc2lzdGFudFN0YXR1cyhcbiAgY2FsbFdpdGhSZXF1ZXN0OiBDYWxsQ2x1c3RlcldpdGhSZXF1ZXN0LFxuICByZXE6IFJlcXVlc3QsXG4gIGlzQ2xvdWRFbmFibGVkOiBib29sZWFuXG4pOiBQcm9taXNlPFVwZ3JhZGVBc3Npc3RhbnRTdGF0dXM+IHtcbiAgY29uc3QgZGVwcmVjYXRpb25zID0gYXdhaXQgY2FsbFdpdGhSZXF1ZXN0KHJlcSwgJ3RyYW5zcG9ydC5yZXF1ZXN0Jywge1xuICAgIHBhdGg6ICcvX3hwYWNrL21pZ3JhdGlvbi9kZXByZWNhdGlvbnMnLFxuICAgIG1ldGhvZDogJ0dFVCcsXG4gIH0pO1xuXG4gIGNvbnN0IGNsdXN0ZXIgPSBnZXRDbHVzdGVyRGVwcmVjYXRpb25zKGRlcHJlY2F0aW9ucywgaXNDbG91ZEVuYWJsZWQpO1xuICBjb25zdCBpbmRpY2VzID0gZ2V0Q29tYmluZWRJbmRleEluZm9zKGRlcHJlY2F0aW9ucyk7XG5cbiAgY29uc3QgY3JpdGljYWxXYXJuaW5ncyA9IGNsdXN0ZXIuY29uY2F0KGluZGljZXMpLmZpbHRlcihkID0+IGQubGV2ZWwgPT09ICdjcml0aWNhbCcpO1xuXG4gIHJldHVybiB7XG4gICAgcmVhZHlGb3JVcGdyYWRlOiBjcml0aWNhbFdhcm5pbmdzLmxlbmd0aCA9PT0gMCxcbiAgICBjbHVzdGVyLFxuICAgIGluZGljZXMsXG4gIH07XG59XG5cbi8vIFJlZm9ybWF0cyB0aGUgaW5kZXggZGVwcmVjYXRpb25zIHRvIGFuIGFycmF5IG9mIGRlcHJlY2F0aW9uIHdhcm5pbmdzIGV4dGVuZGVkIHdpdGggYW4gaW5kZXggZmllbGQuXG5jb25zdCBnZXRDb21iaW5lZEluZGV4SW5mb3MgPSAoZGVwcmVjYXRpb25zOiBEZXByZWNhdGlvbkFQSVJlc3BvbnNlKSA9PlxuICBPYmplY3Qua2V5cyhkZXByZWNhdGlvbnMuaW5kZXhfc2V0dGluZ3MpLnJlZHVjZShcbiAgICAoaW5kZXhEZXByZWNhdGlvbnMsIGluZGV4TmFtZSkgPT4ge1xuICAgICAgcmV0dXJuIGluZGV4RGVwcmVjYXRpb25zLmNvbmNhdChcbiAgICAgICAgZGVwcmVjYXRpb25zLmluZGV4X3NldHRpbmdzW2luZGV4TmFtZV0ubWFwKFxuICAgICAgICAgIGQgPT4gKHsgLi4uZCwgaW5kZXg6IGluZGV4TmFtZSB9IGFzIEVucmljaGVkRGVwcmVjYXRpb25JbmZvKVxuICAgICAgICApXG4gICAgICApO1xuICAgIH0sXG4gICAgW10gYXMgRW5yaWNoZWREZXByZWNhdGlvbkluZm9bXVxuICApO1xuXG5jb25zdCBnZXRDbHVzdGVyRGVwcmVjYXRpb25zID0gKGRlcHJlY2F0aW9uczogRGVwcmVjYXRpb25BUElSZXNwb25zZSwgaXNDbG91ZEVuYWJsZWQ6IGJvb2xlYW4pID0+IHtcbiAgY29uc3QgY29tYmluZWQgPSBkZXByZWNhdGlvbnMuY2x1c3Rlcl9zZXR0aW5nc1xuICAgIC5jb25jYXQoZGVwcmVjYXRpb25zLm1sX3NldHRpbmdzKVxuICAgIC5jb25jYXQoZGVwcmVjYXRpb25zLm5vZGVfc2V0dGluZ3MpO1xuXG4gIGlmIChpc0Nsb3VkRW5hYmxlZCkge1xuICAgIC8vIEluIENsb3VkLCB0aGlzIGlzIGhhbmRsZWQgYXQgdXBncmFkZSB0aW1lLiBGaWx0ZXIgaXQgb3V0IGltcHJvdmUgdXBncmFkZSBVWC5cbiAgICByZXR1cm4gY29tYmluZWQuZmlsdGVyKGQgPT4gQ0xPVURfRklMVEVSUy5pbmRleE9mKGQubWVzc2FnZSkgPT09IC0xKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gY29tYmluZWQ7XG4gIH1cbn07XG4iXX0=