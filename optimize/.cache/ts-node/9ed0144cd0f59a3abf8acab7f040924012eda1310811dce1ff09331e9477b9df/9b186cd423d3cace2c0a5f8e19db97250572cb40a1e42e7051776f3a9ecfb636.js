"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const MEMORY_METRIC_NAMES = [
    'memoryUsedAvg',
    'memoryUsedMax'
];
function transform(result) {
    const { aggregations, hits } = result;
    const { timeseriesData, memoryUsedAvg, memoryUsedMax } = aggregations;
    const series = {
        memoryUsedAvg: [],
        memoryUsedMax: []
    };
    // using forEach here to avoid looping over the entire dataset
    // multiple times or doing a complicated, memory-heavy map/reduce
    timeseriesData.buckets.forEach(({ key, ...bucket }) => {
        MEMORY_METRIC_NAMES.forEach(name => {
            series[name].push({ x: key, y: bucket[name].value });
        });
    });
    return {
        series,
        overallValues: {
            memoryUsedAvg: memoryUsedAvg.value,
            memoryUsedMax: memoryUsedMax.value
        },
        totalHits: hits.total
    };
}
exports.transform = transform;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2hvbWUvYW50aG9ueS9naXRfd29ya3NwYWNlcy9raWJhbmEveC1wYWNrL3BsdWdpbnMvYXBtL3NlcnZlci9saWIvbWV0cmljcy9nZXRfbWVtb3J5X2NoYXJ0X2RhdGEvdHJhbnNmb3JtZXIudHMiLCJzb3VyY2VzIjpbIi9ob21lL2FudGhvbnkvZ2l0X3dvcmtzcGFjZXMva2liYW5hL3gtcGFjay9wbHVnaW5zL2FwbS9zZXJ2ZXIvbGliL21ldHJpY3MvZ2V0X21lbW9yeV9jaGFydF9kYXRhL3RyYW5zZm9ybWVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBdUJBLE1BQU0sbUJBQW1CLEdBQXVCO0lBQzlDLGVBQWU7SUFDZixlQUFlO0NBQ2hCLENBQUM7QUFFRixTQUFnQixTQUFTLENBQUMsTUFBa0I7SUFDMUMsTUFBTSxFQUFFLFlBQVksRUFBRSxJQUFJLEVBQUUsR0FBRyxNQUFNLENBQUM7SUFDdEMsTUFBTSxFQUFFLGNBQWMsRUFBRSxhQUFhLEVBQUUsYUFBYSxFQUFFLEdBQUcsWUFBWSxDQUFDO0lBRXRFLE1BQU0sTUFBTSxHQUFxQztRQUMvQyxhQUFhLEVBQUUsRUFBRTtRQUNqQixhQUFhLEVBQUUsRUFBRTtLQUNsQixDQUFDO0lBRUYsOERBQThEO0lBQzlELGlFQUFpRTtJQUNqRSxjQUFjLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsTUFBTSxFQUFFLEVBQUUsRUFBRTtRQUNwRCxtQkFBbUIsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDakMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZELENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxPQUFPO1FBQ0wsTUFBTTtRQUNOLGFBQWEsRUFBRTtZQUNiLGFBQWEsRUFBRSxhQUFhLENBQUMsS0FBSztZQUNsQyxhQUFhLEVBQUUsYUFBYSxDQUFDLEtBQUs7U0FDbkM7UUFDRCxTQUFTLEVBQUUsSUFBSSxDQUFDLEtBQUs7S0FDdEIsQ0FBQztBQUNKLENBQUM7QUF6QkQsOEJBeUJDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBFbGFzdGljc2VhcmNoIEIuVi4gYW5kL29yIGxpY2Vuc2VkIHRvIEVsYXN0aWNzZWFyY2ggQi5WLiB1bmRlciBvbmVcbiAqIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiBMaWNlbnNlZCB1bmRlciB0aGUgRWxhc3RpYyBMaWNlbnNlO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBFbGFzdGljIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7IENvb3JkaW5hdGUgfSBmcm9tICd4LXBhY2svcGx1Z2lucy9hcG0vdHlwaW5ncy90aW1lc2VyaWVzJztcbmltcG9ydCB7IEVTUmVzcG9uc2UgfSBmcm9tICcuL2ZldGNoZXInO1xuXG5leHBvcnQgaW50ZXJmYWNlIE1lbW9yeUNoYXJ0QVBJUmVzcG9uc2Uge1xuICBzZXJpZXM6IHtcbiAgICBtZW1vcnlVc2VkQXZnOiBDb29yZGluYXRlW107XG4gICAgbWVtb3J5VXNlZE1heDogQ29vcmRpbmF0ZVtdO1xuICB9O1xuICAvLyBvdmVyYWxsIHRvdGFscyBmb3IgdGhlIHdob2xlIHRpbWUgcmFuZ2VcbiAgb3ZlcmFsbFZhbHVlczoge1xuICAgIG1lbW9yeVVzZWRBdmc6IG51bWJlciB8IG51bGw7XG4gICAgbWVtb3J5VXNlZE1heDogbnVtYmVyIHwgbnVsbDtcbiAgfTtcbiAgdG90YWxIaXRzOiBudW1iZXI7XG59XG5cbmV4cG9ydCB0eXBlIE1lbW9yeU1ldHJpY05hbWUgPSAnbWVtb3J5VXNlZEF2ZycgfCAnbWVtb3J5VXNlZE1heCc7XG5cbmNvbnN0IE1FTU9SWV9NRVRSSUNfTkFNRVM6IE1lbW9yeU1ldHJpY05hbWVbXSA9IFtcbiAgJ21lbW9yeVVzZWRBdmcnLFxuICAnbWVtb3J5VXNlZE1heCdcbl07XG5cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm0ocmVzdWx0OiBFU1Jlc3BvbnNlKTogTWVtb3J5Q2hhcnRBUElSZXNwb25zZSB7XG4gIGNvbnN0IHsgYWdncmVnYXRpb25zLCBoaXRzIH0gPSByZXN1bHQ7XG4gIGNvbnN0IHsgdGltZXNlcmllc0RhdGEsIG1lbW9yeVVzZWRBdmcsIG1lbW9yeVVzZWRNYXggfSA9IGFnZ3JlZ2F0aW9ucztcblxuICBjb25zdCBzZXJpZXM6IE1lbW9yeUNoYXJ0QVBJUmVzcG9uc2VbJ3NlcmllcyddID0ge1xuICAgIG1lbW9yeVVzZWRBdmc6IFtdLFxuICAgIG1lbW9yeVVzZWRNYXg6IFtdXG4gIH07XG5cbiAgLy8gdXNpbmcgZm9yRWFjaCBoZXJlIHRvIGF2b2lkIGxvb3Bpbmcgb3ZlciB0aGUgZW50aXJlIGRhdGFzZXRcbiAgLy8gbXVsdGlwbGUgdGltZXMgb3IgZG9pbmcgYSBjb21wbGljYXRlZCwgbWVtb3J5LWhlYXZ5IG1hcC9yZWR1Y2VcbiAgdGltZXNlcmllc0RhdGEuYnVja2V0cy5mb3JFYWNoKCh7IGtleSwgLi4uYnVja2V0IH0pID0+IHtcbiAgICBNRU1PUllfTUVUUklDX05BTUVTLmZvckVhY2gobmFtZSA9PiB7XG4gICAgICBzZXJpZXNbbmFtZV0ucHVzaCh7IHg6IGtleSwgeTogYnVja2V0W25hbWVdLnZhbHVlIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICByZXR1cm4ge1xuICAgIHNlcmllcyxcbiAgICBvdmVyYWxsVmFsdWVzOiB7XG4gICAgICBtZW1vcnlVc2VkQXZnOiBtZW1vcnlVc2VkQXZnLnZhbHVlLFxuICAgICAgbWVtb3J5VXNlZE1heDogbWVtb3J5VXNlZE1heC52YWx1ZVxuICAgIH0sXG4gICAgdG90YWxIaXRzOiBoaXRzLnRvdGFsXG4gIH07XG59XG4iXX0=