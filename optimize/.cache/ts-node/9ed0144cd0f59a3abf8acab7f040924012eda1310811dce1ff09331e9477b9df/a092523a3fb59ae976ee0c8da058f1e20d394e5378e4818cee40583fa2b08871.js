"use strict";
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const log_entry_1 = require("./log_entry");
function getIndexNearLogEntry(logEntries, key, highest = false) {
    let minIndex = 0;
    let maxIndex = logEntries.length;
    let currentIndex;
    let currentKey;
    while (minIndex < maxIndex) {
        currentIndex = (minIndex + maxIndex) >>> 1; // tslint:disable-line:no-bitwise
        currentKey = log_entry_1.getLogEntryKey(logEntries[currentIndex]);
        if ((highest ? log_entry_1.isLessOrEqual : log_entry_1.isLess)(currentKey, key)) {
            minIndex = currentIndex + 1;
        }
        else {
            maxIndex = currentIndex;
        }
    }
    return maxIndex;
}
exports.getIndexNearLogEntry = getIndexNearLogEntry;
function getIndexOfLogEntry(logEntries, key) {
    const index = getIndexNearLogEntry(logEntries, key);
    const logEntry = logEntries[index];
    return logEntry && log_entry_1.isEqual(key, log_entry_1.getLogEntryKey(logEntry)) ? index : null;
}
exports.getIndexOfLogEntry = getIndexOfLogEntry;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2hvbWUvYW50aG9ueS9naXRfd29ya3NwYWNlcy9raWJhbmEveC1wYWNrL3BsdWdpbnMvaW5mcmEvY29tbW9uL2xvZ19lbnRyeS9sb2dfZW50cnlfbGlzdC50cyIsInNvdXJjZXMiOlsiL2hvbWUvYW50aG9ueS9naXRfd29ya3NwYWNlcy9raWJhbmEveC1wYWNrL3BsdWdpbnMvaW5mcmEvY29tbW9uL2xvZ19lbnRyeS9sb2dfZW50cnlfbGlzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7R0FJRzs7QUFFSCwyQ0FPcUI7QUFJckIsU0FBZ0Isb0JBQW9CLENBQUMsVUFBd0IsRUFBRSxHQUFpQixFQUFFLE9BQU8sR0FBRyxLQUFLO0lBQy9GLElBQUksUUFBUSxHQUFHLENBQUMsQ0FBQztJQUNqQixJQUFJLFFBQVEsR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDO0lBQ2pDLElBQUksWUFBb0IsQ0FBQztJQUN6QixJQUFJLFVBQXdCLENBQUM7SUFFN0IsT0FBTyxRQUFRLEdBQUcsUUFBUSxFQUFFO1FBQzFCLFlBQVksR0FBRyxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxpQ0FBaUM7UUFDN0UsVUFBVSxHQUFHLDBCQUFjLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7UUFFdEQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMseUJBQWEsQ0FBQyxDQUFDLENBQUMsa0JBQU0sQ0FBQyxDQUFDLFVBQVUsRUFBRSxHQUFHLENBQUMsRUFBRTtZQUN2RCxRQUFRLEdBQUcsWUFBWSxHQUFHLENBQUMsQ0FBQztTQUM3QjthQUFNO1lBQ0wsUUFBUSxHQUFHLFlBQVksQ0FBQztTQUN6QjtLQUNGO0lBRUQsT0FBTyxRQUFRLENBQUM7QUFDbEIsQ0FBQztBQWxCRCxvREFrQkM7QUFFRCxTQUFnQixrQkFBa0IsQ0FBQyxVQUFzQixFQUFFLEdBQWlCO0lBQzFFLE1BQU0sS0FBSyxHQUFHLG9CQUFvQixDQUFDLFVBQVUsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNwRCxNQUFNLFFBQVEsR0FBRyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFFbkMsT0FBTyxRQUFRLElBQUksbUJBQU8sQ0FBQyxHQUFHLEVBQUUsMEJBQWMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztBQUMzRSxDQUFDO0FBTEQsZ0RBS0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IEVsYXN0aWNzZWFyY2ggQi5WLiBhbmQvb3IgbGljZW5zZWQgdG8gRWxhc3RpY3NlYXJjaCBCLlYuIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuIExpY2Vuc2VkIHVuZGVyIHRoZSBFbGFzdGljIExpY2Vuc2U7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIEVsYXN0aWMgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQge1xuICBnZXRMb2dFbnRyeUtleSxcbiAgaXNFcXVhbCxcbiAgaXNMZXNzLFxuICBpc0xlc3NPckVxdWFsLFxuICBMb2dFbnRyeSxcbiAgTG9nRW50cnlUaW1lLFxufSBmcm9tICcuL2xvZ19lbnRyeSc7XG5cbmV4cG9ydCB0eXBlIExvZ0VudHJ5TGlzdCA9IExvZ0VudHJ5W107XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRJbmRleE5lYXJMb2dFbnRyeShsb2dFbnRyaWVzOiBMb2dFbnRyeUxpc3QsIGtleTogTG9nRW50cnlUaW1lLCBoaWdoZXN0ID0gZmFsc2UpIHtcbiAgbGV0IG1pbkluZGV4ID0gMDtcbiAgbGV0IG1heEluZGV4ID0gbG9nRW50cmllcy5sZW5ndGg7XG4gIGxldCBjdXJyZW50SW5kZXg6IG51bWJlcjtcbiAgbGV0IGN1cnJlbnRLZXk6IExvZ0VudHJ5VGltZTtcblxuICB3aGlsZSAobWluSW5kZXggPCBtYXhJbmRleCkge1xuICAgIGN1cnJlbnRJbmRleCA9IChtaW5JbmRleCArIG1heEluZGV4KSA+Pj4gMTsgLy8gdHNsaW50OmRpc2FibGUtbGluZTpuby1iaXR3aXNlXG4gICAgY3VycmVudEtleSA9IGdldExvZ0VudHJ5S2V5KGxvZ0VudHJpZXNbY3VycmVudEluZGV4XSk7XG5cbiAgICBpZiAoKGhpZ2hlc3QgPyBpc0xlc3NPckVxdWFsIDogaXNMZXNzKShjdXJyZW50S2V5LCBrZXkpKSB7XG4gICAgICBtaW5JbmRleCA9IGN1cnJlbnRJbmRleCArIDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIG1heEluZGV4ID0gY3VycmVudEluZGV4O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBtYXhJbmRleDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEluZGV4T2ZMb2dFbnRyeShsb2dFbnRyaWVzOiBMb2dFbnRyeVtdLCBrZXk6IExvZ0VudHJ5VGltZSkge1xuICBjb25zdCBpbmRleCA9IGdldEluZGV4TmVhckxvZ0VudHJ5KGxvZ0VudHJpZXMsIGtleSk7XG4gIGNvbnN0IGxvZ0VudHJ5ID0gbG9nRW50cmllc1tpbmRleF07XG5cbiAgcmV0dXJuIGxvZ0VudHJ5ICYmIGlzRXF1YWwoa2V5LCBnZXRMb2dFbnRyeUtleShsb2dFbnRyeSkpID8gaW5kZXggOiBudWxsO1xufVxuIl19