"use strict";
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const call_with_internal_user_factory_1 = require("../../client/call_with_internal_user_factory");
exports.ML_TELEMETRY_DOC_ID = 'ml-telemetry';
function createMlTelemetry(count = 0) {
    return {
        file_data_visualizer: {
            index_creation_count: count,
        },
    };
}
exports.createMlTelemetry = createMlTelemetry;
function storeMlTelemetry(server, mlTelemetry) {
    const savedObjectsClient = getSavedObjectsClient(server);
    savedObjectsClient.create('ml-telemetry', mlTelemetry, {
        id: exports.ML_TELEMETRY_DOC_ID,
        overwrite: true,
    });
}
exports.storeMlTelemetry = storeMlTelemetry;
function getSavedObjectsClient(server) {
    const { SavedObjectsClient, getSavedObjectsRepository } = server.savedObjects;
    const callWithInternalUser = call_with_internal_user_factory_1.callWithInternalUserFactory(server);
    const internalRepository = getSavedObjectsRepository(callWithInternalUser);
    return new SavedObjectsClient(internalRepository);
}
exports.getSavedObjectsClient = getSavedObjectsClient;
async function incrementFileDataVisualizerIndexCreationCount(server) {
    const savedObjectsClient = getSavedObjectsClient(server);
    try {
        const { attributes } = await savedObjectsClient.get('telemetry', 'telemetry');
        if (attributes.enabled === false) {
            return;
        }
    }
    catch (error) {
        // if we aren't allowed to get the telemetry document,
        // we assume we couldn't opt in to telemetry and won't increment the index count.
        return;
    }
    let indicesCount = 1;
    try {
        const { attributes } = (await savedObjectsClient.get('ml-telemetry', exports.ML_TELEMETRY_DOC_ID));
        indicesCount = attributes.file_data_visualizer.index_creation_count + 1;
    }
    catch (e) {
        /* silently fail, this will happen if the saved object doesn't exist yet. */
    }
    const mlTelemetry = createMlTelemetry(indicesCount);
    storeMlTelemetry(server, mlTelemetry);
}
exports.incrementFileDataVisualizerIndexCreationCount = incrementFileDataVisualizerIndexCreationCount;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2hvbWUvYW50aG9ueS9naXRfd29ya3NwYWNlcy9raWJhbmEveC1wYWNrL3BsdWdpbnMvbWwvc2VydmVyL2xpYi9tbF90ZWxlbWV0cnkvbWxfdGVsZW1ldHJ5LnRzIiwic291cmNlcyI6WyIvaG9tZS9hbnRob255L2dpdF93b3Jrc3BhY2VzL2tpYmFuYS94LXBhY2svcGx1Z2lucy9tbC9zZXJ2ZXIvbGliL21sX3RlbGVtZXRyeS9tbF90ZWxlbWV0cnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7O0dBSUc7O0FBR0gsa0dBQTJGO0FBWTlFLFFBQUEsbUJBQW1CLEdBQUcsY0FBYyxDQUFDO0FBRWxELFNBQWdCLGlCQUFpQixDQUFDLFFBQWdCLENBQUM7SUFDakQsT0FBTztRQUNMLG9CQUFvQixFQUFFO1lBQ3BCLG9CQUFvQixFQUFFLEtBQUs7U0FDNUI7S0FDRixDQUFDO0FBQ0osQ0FBQztBQU5ELDhDQU1DO0FBRUQsU0FBZ0IsZ0JBQWdCLENBQUMsTUFBYyxFQUFFLFdBQXdCO0lBQ3ZFLE1BQU0sa0JBQWtCLEdBQUcscUJBQXFCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDekQsa0JBQWtCLENBQUMsTUFBTSxDQUFDLGNBQWMsRUFBRSxXQUFXLEVBQUU7UUFDckQsRUFBRSxFQUFFLDJCQUFtQjtRQUN2QixTQUFTLEVBQUUsSUFBSTtLQUNoQixDQUFDLENBQUM7QUFDTCxDQUFDO0FBTkQsNENBTUM7QUFFRCxTQUFnQixxQkFBcUIsQ0FBQyxNQUFjO0lBQ2xELE1BQU0sRUFBRSxrQkFBa0IsRUFBRSx5QkFBeUIsRUFBRSxHQUFHLE1BQU0sQ0FBQyxZQUFZLENBQUM7SUFDOUUsTUFBTSxvQkFBb0IsR0FBRyw2REFBMkIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNqRSxNQUFNLGtCQUFrQixHQUFHLHlCQUF5QixDQUFDLG9CQUFvQixDQUFDLENBQUM7SUFDM0UsT0FBTyxJQUFJLGtCQUFrQixDQUFDLGtCQUFrQixDQUFDLENBQUM7QUFDcEQsQ0FBQztBQUxELHNEQUtDO0FBRU0sS0FBSyxVQUFVLDZDQUE2QyxDQUFDLE1BQWM7SUFDaEYsTUFBTSxrQkFBa0IsR0FBRyxxQkFBcUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUV6RCxJQUFJO1FBQ0YsTUFBTSxFQUFFLFVBQVUsRUFBRSxHQUFHLE1BQU0sa0JBQWtCLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxXQUFXLENBQUMsQ0FBQztRQUM5RSxJQUFJLFVBQVUsQ0FBQyxPQUFPLEtBQUssS0FBSyxFQUFFO1lBQ2hDLE9BQU87U0FDUjtLQUNGO0lBQUMsT0FBTyxLQUFLLEVBQUU7UUFDZCxzREFBc0Q7UUFDdEQsaUZBQWlGO1FBQ2pGLE9BQU87S0FDUjtJQUVELElBQUksWUFBWSxHQUFHLENBQUMsQ0FBQztJQUVyQixJQUFJO1FBQ0YsTUFBTSxFQUFFLFVBQVUsRUFBRSxHQUFHLENBQUMsTUFBTSxrQkFBa0IsQ0FBQyxHQUFHLENBQ2xELGNBQWMsRUFDZCwyQkFBbUIsQ0FDcEIsQ0FBMkIsQ0FBQztRQUM3QixZQUFZLEdBQUcsVUFBVSxDQUFDLG9CQUFvQixDQUFDLG9CQUFvQixHQUFHLENBQUMsQ0FBQztLQUN6RTtJQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ1YsNEVBQTRFO0tBQzdFO0lBRUQsTUFBTSxXQUFXLEdBQUcsaUJBQWlCLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDcEQsZ0JBQWdCLENBQUMsTUFBTSxFQUFFLFdBQVcsQ0FBQyxDQUFDO0FBQ3hDLENBQUM7QUE1QkQsc0dBNEJDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBFbGFzdGljc2VhcmNoIEIuVi4gYW5kL29yIGxpY2Vuc2VkIHRvIEVsYXN0aWNzZWFyY2ggQi5WLiB1bmRlciBvbmVcbiAqIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiBMaWNlbnNlZCB1bmRlciB0aGUgRWxhc3RpYyBMaWNlbnNlO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBFbGFzdGljIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgU2VydmVyIH0gZnJvbSAnaGFwaSc7XG5pbXBvcnQgeyBjYWxsV2l0aEludGVybmFsVXNlckZhY3RvcnkgfSBmcm9tICcuLi8uLi9jbGllbnQvY2FsbF93aXRoX2ludGVybmFsX3VzZXJfZmFjdG9yeSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTWxUZWxlbWV0cnkge1xuICBmaWxlX2RhdGFfdmlzdWFsaXplcjoge1xuICAgIGluZGV4X2NyZWF0aW9uX2NvdW50OiBudW1iZXI7XG4gIH07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTWxUZWxlbWV0cnlTYXZlZE9iamVjdCB7XG4gIGF0dHJpYnV0ZXM6IE1sVGVsZW1ldHJ5O1xufVxuXG5leHBvcnQgY29uc3QgTUxfVEVMRU1FVFJZX0RPQ19JRCA9ICdtbC10ZWxlbWV0cnknO1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTWxUZWxlbWV0cnkoY291bnQ6IG51bWJlciA9IDApOiBNbFRlbGVtZXRyeSB7XG4gIHJldHVybiB7XG4gICAgZmlsZV9kYXRhX3Zpc3VhbGl6ZXI6IHtcbiAgICAgIGluZGV4X2NyZWF0aW9uX2NvdW50OiBjb3VudCxcbiAgICB9LFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3RvcmVNbFRlbGVtZXRyeShzZXJ2ZXI6IFNlcnZlciwgbWxUZWxlbWV0cnk6IE1sVGVsZW1ldHJ5KTogdm9pZCB7XG4gIGNvbnN0IHNhdmVkT2JqZWN0c0NsaWVudCA9IGdldFNhdmVkT2JqZWN0c0NsaWVudChzZXJ2ZXIpO1xuICBzYXZlZE9iamVjdHNDbGllbnQuY3JlYXRlKCdtbC10ZWxlbWV0cnknLCBtbFRlbGVtZXRyeSwge1xuICAgIGlkOiBNTF9URUxFTUVUUllfRE9DX0lELFxuICAgIG92ZXJ3cml0ZTogdHJ1ZSxcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRTYXZlZE9iamVjdHNDbGllbnQoc2VydmVyOiBTZXJ2ZXIpOiBhbnkge1xuICBjb25zdCB7IFNhdmVkT2JqZWN0c0NsaWVudCwgZ2V0U2F2ZWRPYmplY3RzUmVwb3NpdG9yeSB9ID0gc2VydmVyLnNhdmVkT2JqZWN0cztcbiAgY29uc3QgY2FsbFdpdGhJbnRlcm5hbFVzZXIgPSBjYWxsV2l0aEludGVybmFsVXNlckZhY3Rvcnkoc2VydmVyKTtcbiAgY29uc3QgaW50ZXJuYWxSZXBvc2l0b3J5ID0gZ2V0U2F2ZWRPYmplY3RzUmVwb3NpdG9yeShjYWxsV2l0aEludGVybmFsVXNlcik7XG4gIHJldHVybiBuZXcgU2F2ZWRPYmplY3RzQ2xpZW50KGludGVybmFsUmVwb3NpdG9yeSk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBpbmNyZW1lbnRGaWxlRGF0YVZpc3VhbGl6ZXJJbmRleENyZWF0aW9uQ291bnQoc2VydmVyOiBTZXJ2ZXIpOiBQcm9taXNlPHZvaWQ+IHtcbiAgY29uc3Qgc2F2ZWRPYmplY3RzQ2xpZW50ID0gZ2V0U2F2ZWRPYmplY3RzQ2xpZW50KHNlcnZlcik7XG5cbiAgdHJ5IHtcbiAgICBjb25zdCB7IGF0dHJpYnV0ZXMgfSA9IGF3YWl0IHNhdmVkT2JqZWN0c0NsaWVudC5nZXQoJ3RlbGVtZXRyeScsICd0ZWxlbWV0cnknKTtcbiAgICBpZiAoYXR0cmlidXRlcy5lbmFibGVkID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAvLyBpZiB3ZSBhcmVuJ3QgYWxsb3dlZCB0byBnZXQgdGhlIHRlbGVtZXRyeSBkb2N1bWVudCxcbiAgICAvLyB3ZSBhc3N1bWUgd2UgY291bGRuJ3Qgb3B0IGluIHRvIHRlbGVtZXRyeSBhbmQgd29uJ3QgaW5jcmVtZW50IHRoZSBpbmRleCBjb3VudC5cbiAgICByZXR1cm47XG4gIH1cblxuICBsZXQgaW5kaWNlc0NvdW50ID0gMTtcblxuICB0cnkge1xuICAgIGNvbnN0IHsgYXR0cmlidXRlcyB9ID0gKGF3YWl0IHNhdmVkT2JqZWN0c0NsaWVudC5nZXQoXG4gICAgICAnbWwtdGVsZW1ldHJ5JyxcbiAgICAgIE1MX1RFTEVNRVRSWV9ET0NfSURcbiAgICApKSBhcyBNbFRlbGVtZXRyeVNhdmVkT2JqZWN0O1xuICAgIGluZGljZXNDb3VudCA9IGF0dHJpYnV0ZXMuZmlsZV9kYXRhX3Zpc3VhbGl6ZXIuaW5kZXhfY3JlYXRpb25fY291bnQgKyAxO1xuICB9IGNhdGNoIChlKSB7XG4gICAgLyogc2lsZW50bHkgZmFpbCwgdGhpcyB3aWxsIGhhcHBlbiBpZiB0aGUgc2F2ZWQgb2JqZWN0IGRvZXNuJ3QgZXhpc3QgeWV0LiAqL1xuICB9XG5cbiAgY29uc3QgbWxUZWxlbWV0cnkgPSBjcmVhdGVNbFRlbGVtZXRyeShpbmRpY2VzQ291bnQpO1xuICBzdG9yZU1sVGVsZW1ldHJ5KHNlcnZlciwgbWxUZWxlbWV0cnkpO1xufVxuIl19