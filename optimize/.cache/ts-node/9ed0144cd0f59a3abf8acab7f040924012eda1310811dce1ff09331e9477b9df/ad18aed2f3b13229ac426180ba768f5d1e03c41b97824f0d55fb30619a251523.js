"use strict";
/*
 * Licensed to Elasticsearch B.V. under one or more contributor
 * license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch B.V. licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const path_1 = require("path");
const semver_1 = require("semver");
const util_1 = require("util");
const config_1 = require("../../config");
const plugin_discovery_error_1 = require("./plugin_discovery_error");
const fsReadFileAsync = util_1.promisify(fs_1.readFile);
const fsStatAsync = util_1.promisify(fs_1.stat);
/**
 * Name of the JSON manifest file that should be located in the plugin directory.
 */
const MANIFEST_FILE_NAME = 'kibana.json';
/**
 * The special "kibana" version can be used by the plugins to be always compatible.
 */
const ALWAYS_COMPATIBLE_VERSION = 'kibana';
/**
 * Names of the known manifest fields.
 */
const KNOWN_MANIFEST_FIELDS = (() => {
    // We use this trick to have type safety around the keys we use, if we forget to
    // add a new key here or misspell existing one, TypeScript compiler will complain.
    // We do this once at run time, so performance impact is negligible.
    const manifestFields = {
        id: true,
        kibanaVersion: true,
        version: true,
        configPath: true,
        requiredPlugins: true,
        optionalPlugins: true,
        ui: true,
        server: true,
    };
    return new Set(Object.keys(manifestFields));
})();
/**
 * Tries to load and parse the plugin manifest file located at the provided plugin
 * directory path and produces an error result if it fails to do so or plugin manifest
 * isn't valid.
 * @param pluginPath Path to the plugin directory where manifest should be loaded from.
 * @param packageInfo Kibana package info.
 * @internal
 */
async function parseManifest(pluginPath, packageInfo) {
    const manifestPath = path_1.resolve(pluginPath, MANIFEST_FILE_NAME);
    let manifestContent;
    try {
        manifestContent = await fsReadFileAsync(manifestPath);
    }
    catch (err) {
        throw plugin_discovery_error_1.PluginDiscoveryError.missingManifest(manifestPath, err);
    }
    let manifest;
    try {
        manifest = JSON.parse(manifestContent.toString());
    }
    catch (err) {
        throw plugin_discovery_error_1.PluginDiscoveryError.invalidManifest(manifestPath, err);
    }
    if (!manifest || typeof manifest !== 'object') {
        throw plugin_discovery_error_1.PluginDiscoveryError.invalidManifest(manifestPath, new Error('Plugin manifest must contain a JSON encoded object.'));
    }
    if (!manifest.id || typeof manifest.id !== 'string') {
        throw plugin_discovery_error_1.PluginDiscoveryError.invalidManifest(manifestPath, new Error('Plugin manifest must contain an "id" property.'));
    }
    // Plugin id can be used as a config path or as a logger context and having dots
    // in there may lead to various issues, so we forbid that.
    if (manifest.id.includes('.')) {
        throw plugin_discovery_error_1.PluginDiscoveryError.invalidManifest(manifestPath, new Error('Plugin "id" must not include `.` characters.'));
    }
    if (!manifest.version || typeof manifest.version !== 'string') {
        throw plugin_discovery_error_1.PluginDiscoveryError.invalidManifest(manifestPath, new Error(`Plugin manifest for "${manifest.id}" must contain a "version" property.`));
    }
    if (manifest.configPath !== undefined && !config_1.isConfigPath(manifest.configPath)) {
        throw plugin_discovery_error_1.PluginDiscoveryError.invalidManifest(manifestPath, new Error(`The "configPath" in plugin manifest for "${manifest.id}" should either be a string or an array of strings.`));
    }
    const expectedKibanaVersion = typeof manifest.kibanaVersion === 'string' && manifest.kibanaVersion
        ? manifest.kibanaVersion
        : manifest.version;
    if (!isVersionCompatible(expectedKibanaVersion, packageInfo.version)) {
        throw plugin_discovery_error_1.PluginDiscoveryError.incompatibleVersion(manifestPath, new Error(`Plugin "${manifest.id}" is only compatible with Kibana version "${expectedKibanaVersion}", but used Kibana version is "${packageInfo.version}".`));
    }
    const includesServerPlugin = typeof manifest.server === 'boolean' ? manifest.server : false;
    const includesUiPlugin = typeof manifest.ui === 'boolean' ? manifest.ui : false;
    if (!includesServerPlugin && !includesUiPlugin) {
        throw plugin_discovery_error_1.PluginDiscoveryError.invalidManifest(manifestPath, new Error(`Both "server" and "ui" are missing or set to "false" in plugin manifest for "${manifest.id}", but at least one of these must be set to "true".`));
    }
    const unknownManifestKeys = Object.keys(manifest).filter(key => !KNOWN_MANIFEST_FIELDS.has(key));
    if (unknownManifestKeys.length > 0) {
        throw plugin_discovery_error_1.PluginDiscoveryError.invalidManifest(manifestPath, new Error(`Manifest for plugin "${manifest.id}" contains the following unrecognized properties: ${unknownManifestKeys}.`));
    }
    return {
        id: manifest.id,
        version: manifest.version,
        kibanaVersion: expectedKibanaVersion,
        configPath: manifest.configPath || manifest.id,
        requiredPlugins: Array.isArray(manifest.requiredPlugins) ? manifest.requiredPlugins : [],
        optionalPlugins: Array.isArray(manifest.optionalPlugins) ? manifest.optionalPlugins : [],
        ui: includesUiPlugin,
        server: includesServerPlugin,
    };
}
exports.parseManifest = parseManifest;
/**
 * Checks whether specified folder contains Kibana new platform plugin. It's only
 * intended to be used by the legacy systems when they need to check whether specific
 * plugin path is handled by the core plugin system or not.
 * @param pluginPath Path to the plugin.
 * @internal
 */
async function isNewPlatformPlugin(pluginPath) {
    try {
        return (await fsStatAsync(path_1.resolve(pluginPath, MANIFEST_FILE_NAME))).isFile();
    }
    catch (err) {
        return false;
    }
}
exports.isNewPlatformPlugin = isNewPlatformPlugin;
/**
 * Checks whether plugin expected Kibana version is compatible with the used Kibana version.
 * @param expectedKibanaVersion Kibana version expected by the plugin.
 * @param actualKibanaVersion Used Kibana version.
 */
function isVersionCompatible(expectedKibanaVersion, actualKibanaVersion) {
    if (expectedKibanaVersion === ALWAYS_COMPATIBLE_VERSION) {
        return true;
    }
    const coercedActualKibanaVersion = semver_1.coerce(actualKibanaVersion);
    if (coercedActualKibanaVersion == null) {
        return false;
    }
    const coercedExpectedKibanaVersion = semver_1.coerce(expectedKibanaVersion);
    if (coercedExpectedKibanaVersion == null) {
        return false;
    }
    // Compare coerced versions, e.g. `1.2.3` ---> `1.2.3` and `7.0.0-alpha1` ---> `7.0.0`.
    return coercedActualKibanaVersion.compare(coercedExpectedKibanaVersion) === 0;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,