"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */
const t = tslib_1.__importStar(require("io-ts"));
const config_schemas_1 = require("./config_schemas");
const io_ts_types_1 = require("./io_ts_types");
exports.OutputTypesArray = ['elasticsearch', 'logstash', 'kafka', 'redis'];
// Here we create the runtime check for a generic, unknown beat config type.
// We can also pass in optional params to create spacific runtime checks that
// can be used to validate blocs on the API and UI
exports.createConfigurationBlockInterface = (configType = t.union(config_schemas_1.configBlockSchemas.map(s => t.literal(s.id))), beatConfigInterface = t.Dictionary) => t.interface({
    id: t.union([t.undefined, t.string]),
    type: configType,
    description: t.union([t.undefined, t.string]),
    tag: t.string,
    config: beatConfigInterface,
    last_updated: t.union([t.undefined, t.number]),
}, 'ConfigBlock');
const BaseConfigurationBlock = exports.createConfigurationBlockInterface();
exports.RuntimeBeatTag = t.interface({
    id: t.union([t.undefined, t.string]),
    name: t.string,
    color: t.string,
    hasConfigurationBlocksTypes: t.array(t.string),
}, 'CMBeat');
exports.RuntimeBeatEvent = t.interface({
    type: t.union([t.literal('STATE'), t.literal('ERROR')]),
    beat: t.union([t.undefined, t.string]),
    timestamp: io_ts_types_1.DateFromString,
    event: t.type({
        type: t.union([
            t.literal('RUNNING'),
            t.literal('STARTING'),
            t.literal('IN_PROGRESS'),
            t.literal('CONFIG'),
            t.literal('FAILED'),
            t.literal('STOPPED'),
        ]),
        message: t.string,
        uuid: t.union([t.undefined, t.string]),
    }),
}, 'BeatEvent');
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2hvbWUvYW50aG9ueS9naXRfd29ya3NwYWNlcy9raWJhbmEveC1wYWNrL3BsdWdpbnMvYmVhdHNfbWFuYWdlbWVudC9jb21tb24vZG9tYWluX3R5cGVzLnRzIiwic291cmNlcyI6WyIvaG9tZS9hbnRob255L2dpdF93b3Jrc3BhY2VzL2tpYmFuYS94LXBhY2svcGx1Z2lucy9iZWF0c19tYW5hZ2VtZW50L2NvbW1vbi9kb21haW5fdHlwZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUE7Ozs7R0FJRztBQUNILGlEQUEyQjtBQUMzQixxREFBc0Q7QUFDdEQsK0NBQStDO0FBRWxDLFFBQUEsZ0JBQWdCLEdBQUcsQ0FBQyxlQUFlLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztBQUVoRiw0RUFBNEU7QUFDNUUsNkVBQTZFO0FBQzdFLGtEQUFrRDtBQUNyQyxRQUFBLGlDQUFpQyxHQUFHLENBQy9DLGFBQWdGLENBQUMsQ0FBQyxLQUFLLENBQ3JGLG1DQUFrQixDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQzdDLEVBQ0Qsc0JBQStCLENBQUMsQ0FBQyxVQUFVLEVBQzNDLEVBQUUsQ0FDRixDQUFDLENBQUMsU0FBUyxDQUNUO0lBQ0UsRUFBRSxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNwQyxJQUFJLEVBQUUsVUFBVTtJQUNoQixXQUFXLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzdDLEdBQUcsRUFBRSxDQUFDLENBQUMsTUFBTTtJQUNiLE1BQU0sRUFBRSxtQkFBbUI7SUFDM0IsWUFBWSxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQztDQUMvQyxFQUNELGFBQWEsQ0FDZCxDQUFDO0FBQ0osTUFBTSxzQkFBc0IsR0FBRyx5Q0FBaUMsRUFBRSxDQUFDO0FBMER0RCxRQUFBLGNBQWMsR0FBRyxDQUFDLENBQUMsU0FBUyxDQUN2QztJQUNFLEVBQUUsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDcEMsSUFBSSxFQUFFLENBQUMsQ0FBQyxNQUFNO0lBQ2QsS0FBSyxFQUFFLENBQUMsQ0FBQyxNQUFNO0lBQ2YsMkJBQTJCLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO0NBQy9DLEVBQ0QsUUFBUSxDQUNULENBQUM7QUFXVyxRQUFBLGdCQUFnQixHQUFHLENBQUMsQ0FBQyxTQUFTLENBQ3pDO0lBQ0UsSUFBSSxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUN2RCxJQUFJLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3RDLFNBQVMsRUFBRSw0QkFBYztJQUN6QixLQUFLLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQztRQUNaLElBQUksRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDO1lBQ1osQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUM7WUFDcEIsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUM7WUFDckIsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUM7WUFDeEIsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUM7WUFDbkIsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUM7WUFDbkIsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUM7U0FDckIsQ0FBQztRQUNGLE9BQU8sRUFBRSxDQUFDLENBQUMsTUFBTTtRQUNqQixJQUFJLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0tBQ3ZDLENBQUM7Q0FDSCxFQUNELFdBQVcsQ0FDWixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBFbGFzdGljc2VhcmNoIEIuVi4gYW5kL29yIGxpY2Vuc2VkIHRvIEVsYXN0aWNzZWFyY2ggQi5WLiB1bmRlciBvbmVcbiAqIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiBMaWNlbnNlZCB1bmRlciB0aGUgRWxhc3RpYyBMaWNlbnNlO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBFbGFzdGljIExpY2Vuc2UuXG4gKi9cbmltcG9ydCAqIGFzIHQgZnJvbSAnaW8tdHMnO1xuaW1wb3J0IHsgY29uZmlnQmxvY2tTY2hlbWFzIH0gZnJvbSAnLi9jb25maWdfc2NoZW1hcyc7XG5pbXBvcnQgeyBEYXRlRnJvbVN0cmluZyB9IGZyb20gJy4vaW9fdHNfdHlwZXMnO1xuXG5leHBvcnQgY29uc3QgT3V0cHV0VHlwZXNBcnJheSA9IFsnZWxhc3RpY3NlYXJjaCcsICdsb2dzdGFzaCcsICdrYWZrYScsICdyZWRpcyddO1xuXG4vLyBIZXJlIHdlIGNyZWF0ZSB0aGUgcnVudGltZSBjaGVjayBmb3IgYSBnZW5lcmljLCB1bmtub3duIGJlYXQgY29uZmlnIHR5cGUuXG4vLyBXZSBjYW4gYWxzbyBwYXNzIGluIG9wdGlvbmFsIHBhcmFtcyB0byBjcmVhdGUgc3BhY2lmaWMgcnVudGltZSBjaGVja3MgdGhhdFxuLy8gY2FuIGJlIHVzZWQgdG8gdmFsaWRhdGUgYmxvY3Mgb24gdGhlIEFQSSBhbmQgVUlcbmV4cG9ydCBjb25zdCBjcmVhdGVDb25maWd1cmF0aW9uQmxvY2tJbnRlcmZhY2UgPSAoXG4gIGNvbmZpZ1R5cGU6IHQuTGl0ZXJhbFR5cGU8c3RyaW5nPiB8IHQuVW5pb25UeXBlPEFycmF5PHQuTGl0ZXJhbFR5cGU8c3RyaW5nPj4+ID0gdC51bmlvbihcbiAgICBjb25maWdCbG9ja1NjaGVtYXMubWFwKHMgPT4gdC5saXRlcmFsKHMuaWQpKVxuICApLFxuICBiZWF0Q29uZmlnSW50ZXJmYWNlOiB0Lk1peGVkID0gdC5EaWN0aW9uYXJ5XG4pID0+XG4gIHQuaW50ZXJmYWNlKFxuICAgIHtcbiAgICAgIGlkOiB0LnVuaW9uKFt0LnVuZGVmaW5lZCwgdC5zdHJpbmddKSxcbiAgICAgIHR5cGU6IGNvbmZpZ1R5cGUsXG4gICAgICBkZXNjcmlwdGlvbjogdC51bmlvbihbdC51bmRlZmluZWQsIHQuc3RyaW5nXSksXG4gICAgICB0YWc6IHQuc3RyaW5nLFxuICAgICAgY29uZmlnOiBiZWF0Q29uZmlnSW50ZXJmYWNlLFxuICAgICAgbGFzdF91cGRhdGVkOiB0LnVuaW9uKFt0LnVuZGVmaW5lZCwgdC5udW1iZXJdKSxcbiAgICB9LFxuICAgICdDb25maWdCbG9jaydcbiAgKTtcbmNvbnN0IEJhc2VDb25maWd1cmF0aW9uQmxvY2sgPSBjcmVhdGVDb25maWd1cmF0aW9uQmxvY2tJbnRlcmZhY2UoKTtcbmV4cG9ydCBpbnRlcmZhY2UgQ29uZmlndXJhdGlvbkJsb2NrXG4gIGV4dGVuZHMgUGljazxcbiAgICB0LlR5cGVPZjx0eXBlb2YgQmFzZUNvbmZpZ3VyYXRpb25CbG9jaz4sXG4gICAgRXhjbHVkZTxrZXlvZiB0LlR5cGVPZjx0eXBlb2YgQmFzZUNvbmZpZ3VyYXRpb25CbG9jaz4sICdpZCc+XG4gID4ge1xuICBpZDogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENNQmVhdCB7XG4gIGlkOiBzdHJpbmc7XG4gIHN0YXR1cz86IEJlYXRFdmVudDtcbiAgZW5yb2xsbWVudF90b2tlbjogc3RyaW5nO1xuICBhY3RpdmU6IGJvb2xlYW47XG4gIGFjY2Vzc190b2tlbjogc3RyaW5nO1xuICB2ZXJpZmllZF9vbj86IHN0cmluZztcbiAgdHlwZTogc3RyaW5nO1xuICB2ZXJzaW9uPzogc3RyaW5nO1xuICBob3N0X2lwOiBzdHJpbmc7XG4gIGhvc3RfbmFtZTogc3RyaW5nO1xuICBlcGhlbWVyYWxfaWQ/OiBzdHJpbmc7XG4gIGxhc3RfY2hlY2tpbj86IERhdGU7XG4gIGV2ZW50X3JhdGU/OiBzdHJpbmc7XG4gIGxvY2FsX2NvbmZpZ3VyYXRpb25feW1sPzogc3RyaW5nO1xuICB0YWdzOiBzdHJpbmdbXTtcbiAgY2VudHJhbF9jb25maWd1cmF0aW9uX3ltbD86IHN0cmluZztcbiAgbWV0YWRhdGE/OiB7fTtcbiAgbmFtZT86IHN0cmluZztcbiAgbGFzdF91cGRhdGVkOiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29uZmlnQmxvY2tTY2hlbWEge1xuICBpZDogc3RyaW5nO1xuICBuYW1lOiBzdHJpbmc7XG4gIHZlcnNpb246IG51bWJlcjtcbiAgYWxsb3dPdGhlckNvbmZpZ3M/OiBib29sZWFuO1xuICBjb25maWdzOiBCZWF0Q29uZmlnU2NoZW1hW107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmVhdENvbmZpZ1NjaGVtYSB7XG4gIGlkOiBzdHJpbmc7XG4gIHVpOiB7XG4gICAgbGFiZWw6IHN0cmluZztcbiAgICBsYWJlbElkPzogc3RyaW5nO1xuICAgIHR5cGU6ICdpbnB1dCcgfCAnbXVsdGktaW5wdXQnIHwgJ3NlbGVjdCcgfCAnY29kZScgfCAncGFzc3dvcmQnO1xuICAgIGhlbHBUZXh0Pzogc3RyaW5nO1xuICAgIGhlbHBUZXh0SWQ/OiBzdHJpbmc7XG4gICAgcGxhY2Vob2xkZXI/OiBzdHJpbmc7XG4gIH07XG4gIG9wdGlvbnM/OiBBcnJheTx7IHZhbHVlOiBzdHJpbmc7IHRleHQ6IHN0cmluZyB9PjtcbiAgdmFsaWRhdGlvbj86ICdpc0hvc3RzJyB8ICdpc1N0cmluZycgfCAnaXNQZXJpb2QnIHwgJ2lzUGF0aCcgfCAnaXNQYXRocycgfCAnaXNZYW1sJztcbiAgZXJyb3I6IHN0cmluZztcbiAgZXJyb3JJZDogc3RyaW5nO1xuICBkZWZhdWx0VmFsdWU/OiBzdHJpbmc7XG4gIHJlcXVpcmVkPzogYm9vbGVhbjtcbiAgcGFyc2VWYWxpZFJlc3VsdD86ICh2YWx1ZTogYW55KSA9PiBhbnk7XG59XG5cbmV4cG9ydCBjb25zdCBSdW50aW1lQmVhdFRhZyA9IHQuaW50ZXJmYWNlKFxuICB7XG4gICAgaWQ6IHQudW5pb24oW3QudW5kZWZpbmVkLCB0LnN0cmluZ10pLFxuICAgIG5hbWU6IHQuc3RyaW5nLFxuICAgIGNvbG9yOiB0LnN0cmluZyxcbiAgICBoYXNDb25maWd1cmF0aW9uQmxvY2tzVHlwZXM6IHQuYXJyYXkodC5zdHJpbmcpLFxuICB9LFxuICAnQ01CZWF0J1xuKTtcbmV4cG9ydCBpbnRlcmZhY2UgQmVhdFRhZ1xuICBleHRlbmRzIFBpY2s8XG4gICAgdC5UeXBlT2Y8dHlwZW9mIFJ1bnRpbWVCZWF0VGFnPixcbiAgICBFeGNsdWRlPGtleW9mIHQuVHlwZU9mPHR5cGVvZiBSdW50aW1lQmVhdFRhZz4sICdpZCc+XG4gID4ge1xuICBpZDogc3RyaW5nO1xuICAvLyBVc2VkIGJ5IHRoZSBVSSBhbmQgYXBpIHdoZW4gYSB0YWcgZXhpc3RzIGJ1dCBpcyBhbiBpbnZhbGlkIG9wdGlvblxuICBkaXNhYmxlZD86IGJvb2xlYW47XG59XG5cbmV4cG9ydCBjb25zdCBSdW50aW1lQmVhdEV2ZW50ID0gdC5pbnRlcmZhY2UoXG4gIHtcbiAgICB0eXBlOiB0LnVuaW9uKFt0LmxpdGVyYWwoJ1NUQVRFJyksIHQubGl0ZXJhbCgnRVJST1InKV0pLFxuICAgIGJlYXQ6IHQudW5pb24oW3QudW5kZWZpbmVkLCB0LnN0cmluZ10pLFxuICAgIHRpbWVzdGFtcDogRGF0ZUZyb21TdHJpbmcsXG4gICAgZXZlbnQ6IHQudHlwZSh7XG4gICAgICB0eXBlOiB0LnVuaW9uKFtcbiAgICAgICAgdC5saXRlcmFsKCdSVU5OSU5HJyksXG4gICAgICAgIHQubGl0ZXJhbCgnU1RBUlRJTkcnKSxcbiAgICAgICAgdC5saXRlcmFsKCdJTl9QUk9HUkVTUycpLFxuICAgICAgICB0LmxpdGVyYWwoJ0NPTkZJRycpLFxuICAgICAgICB0LmxpdGVyYWwoJ0ZBSUxFRCcpLFxuICAgICAgICB0LmxpdGVyYWwoJ1NUT1BQRUQnKSxcbiAgICAgIF0pLFxuICAgICAgbWVzc2FnZTogdC5zdHJpbmcsXG4gICAgICB1dWlkOiB0LnVuaW9uKFt0LnVuZGVmaW5lZCwgdC5zdHJpbmddKSxcbiAgICB9KSxcbiAgfSxcbiAgJ0JlYXRFdmVudCdcbik7XG5leHBvcnQgaW50ZXJmYWNlIEJlYXRFdmVudFxuICBleHRlbmRzIFBpY2s8XG4gICAgdC5UeXBlT2Y8dHlwZW9mIFJ1bnRpbWVCZWF0RXZlbnQ+LFxuICAgIEV4Y2x1ZGU8a2V5b2YgdC5UeXBlT2Y8dHlwZW9mIFJ1bnRpbWVCZWF0RXZlbnQ+LCAndGltZXN0YW1wJz5cbiAgPiB7XG4gIGJlYXQ6IHN0cmluZztcbiAgdGltZXN0YW1wOiBEYXRlO1xufVxuIl19