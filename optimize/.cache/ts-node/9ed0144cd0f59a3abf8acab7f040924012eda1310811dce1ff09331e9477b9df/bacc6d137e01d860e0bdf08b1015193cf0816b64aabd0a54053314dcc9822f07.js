"use strict";
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const joi_1 = tslib_1.__importDefault(require("joi"));
const task_1 = require("../task");
/**
 * Sanitizes the system's task definitions. Task definitions have optional properties, and
 * this ensures they all are given a reasonable default. This also overrides certain task
 * definition properties with kibana.yml overrides (such as the `override_num_workers` config
 * value).
 *
 * @param maxWorkers - The maxiumum numer of workers allowed to run at once
 * @param taskDefinitions - The Kibana task definitions dictionary
 * @param overrideNumWorkers - The kibana.yml overrides numWorkers per task type.
 */
function sanitizeTaskDefinitions(taskDefinitions = {}, maxWorkers, overrideNumWorkers) {
    return Object.keys(taskDefinitions).reduce((acc, type) => {
        const rawDefinition = taskDefinitions[type];
        rawDefinition.type = type;
        const definition = joi_1.default.attempt(rawDefinition, task_1.validateTaskDefinition);
        const numWorkers = Math.min(maxWorkers, overrideNumWorkers[definition.type] || definition.numWorkers || 1);
        acc[type] = {
            ...definition,
            numWorkers,
        };
        return acc;
    }, {});
}
exports.sanitizeTaskDefinitions = sanitizeTaskDefinitions;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2hvbWUvYW50aG9ueS9naXRfd29ya3NwYWNlcy9raWJhbmEveC1wYWNrL3BsdWdpbnMvdGFza19tYW5hZ2VyL2xpYi9zYW5pdGl6ZV90YXNrX2RlZmluaXRpb25zLnRzIiwic291cmNlcyI6WyIvaG9tZS9hbnRob255L2dpdF93b3Jrc3BhY2VzL2tpYmFuYS94LXBhY2svcGx1Z2lucy90YXNrX21hbmFnZXIvbGliL3Nhbml0aXplX3Rhc2tfZGVmaW5pdGlvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7O0dBSUc7OztBQUVILHNEQUFzQjtBQUN0QixrQ0FLaUI7QUFFakI7Ozs7Ozs7OztHQVNHO0FBQ0gsU0FBZ0IsdUJBQXVCLENBQ3JDLGtCQUFrRCxFQUFFLEVBQ3BELFVBQWtCLEVBQ2xCLGtCQUFrRDtJQUVsRCxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsTUFBTSxDQUN4QyxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsRUFBRTtRQUNaLE1BQU0sYUFBYSxHQUFHLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM1QyxhQUFhLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUMxQixNQUFNLFVBQVUsR0FBRyxhQUFHLENBQUMsT0FBTyxDQUFDLGFBQWEsRUFBRSw2QkFBc0IsQ0FBbUIsQ0FBQztRQUN4RixNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUN6QixVQUFVLEVBQ1Ysa0JBQWtCLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLFVBQVUsQ0FBQyxVQUFVLElBQUksQ0FBQyxDQUNsRSxDQUFDO1FBRUYsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHO1lBQ1YsR0FBRyxVQUFVO1lBQ2IsVUFBVTtTQUNYLENBQUM7UUFFRixPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUMsRUFDRCxFQUE2QyxDQUM5QyxDQUFDO0FBQ0osQ0FBQztBQXhCRCwwREF3QkMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IEVsYXN0aWNzZWFyY2ggQi5WLiBhbmQvb3IgbGljZW5zZWQgdG8gRWxhc3RpY3NlYXJjaCBCLlYuIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuIExpY2Vuc2VkIHVuZGVyIHRoZSBFbGFzdGljIExpY2Vuc2U7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIEVsYXN0aWMgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgSm9pIGZyb20gJ2pvaSc7XG5pbXBvcnQge1xuICBTYW5pdGl6ZWRUYXNrRGVmaW5pdGlvbixcbiAgVGFza0RlZmluaXRpb24sXG4gIFRhc2tEaWN0aW9uYXJ5LFxuICB2YWxpZGF0ZVRhc2tEZWZpbml0aW9uLFxufSBmcm9tICcuLi90YXNrJztcblxuLyoqXG4gKiBTYW5pdGl6ZXMgdGhlIHN5c3RlbSdzIHRhc2sgZGVmaW5pdGlvbnMuIFRhc2sgZGVmaW5pdGlvbnMgaGF2ZSBvcHRpb25hbCBwcm9wZXJ0aWVzLCBhbmRcbiAqIHRoaXMgZW5zdXJlcyB0aGV5IGFsbCBhcmUgZ2l2ZW4gYSByZWFzb25hYmxlIGRlZmF1bHQuIFRoaXMgYWxzbyBvdmVycmlkZXMgY2VydGFpbiB0YXNrXG4gKiBkZWZpbml0aW9uIHByb3BlcnRpZXMgd2l0aCBraWJhbmEueW1sIG92ZXJyaWRlcyAoc3VjaCBhcyB0aGUgYG92ZXJyaWRlX251bV93b3JrZXJzYCBjb25maWdcbiAqIHZhbHVlKS5cbiAqXG4gKiBAcGFyYW0gbWF4V29ya2VycyAtIFRoZSBtYXhpdW11bSBudW1lciBvZiB3b3JrZXJzIGFsbG93ZWQgdG8gcnVuIGF0IG9uY2VcbiAqIEBwYXJhbSB0YXNrRGVmaW5pdGlvbnMgLSBUaGUgS2liYW5hIHRhc2sgZGVmaW5pdGlvbnMgZGljdGlvbmFyeVxuICogQHBhcmFtIG92ZXJyaWRlTnVtV29ya2VycyAtIFRoZSBraWJhbmEueW1sIG92ZXJyaWRlcyBudW1Xb3JrZXJzIHBlciB0YXNrIHR5cGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzYW5pdGl6ZVRhc2tEZWZpbml0aW9ucyhcbiAgdGFza0RlZmluaXRpb25zOiBUYXNrRGljdGlvbmFyeTxUYXNrRGVmaW5pdGlvbj4gPSB7fSxcbiAgbWF4V29ya2VyczogbnVtYmVyLFxuICBvdmVycmlkZU51bVdvcmtlcnM6IHsgW3Rhc2tUeXBlOiBzdHJpbmddOiBudW1iZXIgfVxuKTogVGFza0RpY3Rpb25hcnk8U2FuaXRpemVkVGFza0RlZmluaXRpb24+IHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKHRhc2tEZWZpbml0aW9ucykucmVkdWNlKFxuICAgIChhY2MsIHR5cGUpID0+IHtcbiAgICAgIGNvbnN0IHJhd0RlZmluaXRpb24gPSB0YXNrRGVmaW5pdGlvbnNbdHlwZV07XG4gICAgICByYXdEZWZpbml0aW9uLnR5cGUgPSB0eXBlO1xuICAgICAgY29uc3QgZGVmaW5pdGlvbiA9IEpvaS5hdHRlbXB0KHJhd0RlZmluaXRpb24sIHZhbGlkYXRlVGFza0RlZmluaXRpb24pIGFzIFRhc2tEZWZpbml0aW9uO1xuICAgICAgY29uc3QgbnVtV29ya2VycyA9IE1hdGgubWluKFxuICAgICAgICBtYXhXb3JrZXJzLFxuICAgICAgICBvdmVycmlkZU51bVdvcmtlcnNbZGVmaW5pdGlvbi50eXBlXSB8fCBkZWZpbml0aW9uLm51bVdvcmtlcnMgfHwgMVxuICAgICAgKTtcblxuICAgICAgYWNjW3R5cGVdID0ge1xuICAgICAgICAuLi5kZWZpbml0aW9uLFxuICAgICAgICBudW1Xb3JrZXJzLFxuICAgICAgfTtcblxuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LFxuICAgIHt9IGFzIFRhc2tEaWN0aW9uYXJ5PFNhbml0aXplZFRhc2tEZWZpbml0aW9uPlxuICApO1xufVxuIl19