"use strict";
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = require("lodash");
const ts_optchain_1 = require("ts-optchain");
function getDefaultSample(buckets) {
    const samples = buckets
        .filter(bucket => bucket.count > 0 && bucket.sample)
        .map(bucket => bucket.sample);
    if (lodash_1.isEmpty(samples)) {
        return;
    }
    const middleIndex = Math.floor(samples.length / 2);
    return samples[middleIndex];
}
function bucketTransformer(response) {
    const buckets = response.aggregations.distribution.buckets.map(bucket => {
        const sampleSource = ts_optchain_1.oc(bucket).sample.hits.hits[0]._source();
        const isSampled = ts_optchain_1.oc(sampleSource).transaction.sampled(false);
        const sample = {
            traceId: ts_optchain_1.oc(sampleSource).trace.id(),
            transactionId: ts_optchain_1.oc(sampleSource).transaction.id()
        };
        return {
            key: bucket.key,
            count: bucket.doc_count,
            sample: isSampled ? sample : undefined
        };
    });
    return {
        totalHits: response.hits.total,
        buckets,
        defaultSample: getDefaultSample(buckets)
    };
}
exports.bucketTransformer = bucketTransformer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2hvbWUvYW50aG9ueS9naXRfd29ya3NwYWNlcy9raWJhbmEveC1wYWNrL3BsdWdpbnMvYXBtL3NlcnZlci9saWIvdHJhbnNhY3Rpb25zL2Rpc3RyaWJ1dGlvbi9nZXRfYnVja2V0cy90cmFuc2Zvcm0udHMiLCJzb3VyY2VzIjpbIi9ob21lL2FudGhvbnkvZ2l0X3dvcmtzcGFjZXMva2liYW5hL3gtcGFjay9wbHVnaW5zL2FwbS9zZXJ2ZXIvbGliL3RyYW5zYWN0aW9ucy9kaXN0cmlidXRpb24vZ2V0X2J1Y2tldHMvdHJhbnNmb3JtLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7OztHQUlHOztBQUVILG1DQUFpQztBQUNqQyw2Q0FBaUM7QUFvQmpDLFNBQVMsZ0JBQWdCLENBQUMsT0FBa0I7SUFDMUMsTUFBTSxPQUFPLEdBQUcsT0FBTztTQUNwQixNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxHQUFHLENBQUMsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDO1NBQ25ELEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVoQyxJQUFJLGdCQUFPLENBQUMsT0FBTyxDQUFDLEVBQUU7UUFDcEIsT0FBTztLQUNSO0lBRUQsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ25ELE9BQU8sT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQzlCLENBQUM7QUFFRCxTQUFnQixpQkFBaUIsQ0FBQyxRQUFvQjtJQUNwRCxNQUFNLE9BQU8sR0FBRyxRQUFRLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFO1FBQ3RFLE1BQU0sWUFBWSxHQUFHLGdCQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDOUQsTUFBTSxTQUFTLEdBQUcsZ0JBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzlELE1BQU0sTUFBTSxHQUFHO1lBQ2IsT0FBTyxFQUFFLGdCQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBRTtZQUNwQyxhQUFhLEVBQUUsZ0JBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxXQUFXLENBQUMsRUFBRSxFQUFFO1NBQ2pELENBQUM7UUFFRixPQUFPO1lBQ0wsR0FBRyxFQUFFLE1BQU0sQ0FBQyxHQUFHO1lBQ2YsS0FBSyxFQUFFLE1BQU0sQ0FBQyxTQUFTO1lBQ3ZCLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsU0FBUztTQUN2QyxDQUFDO0lBQ0osQ0FBQyxDQUFDLENBQUM7SUFFSCxPQUFPO1FBQ0wsU0FBUyxFQUFFLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSztRQUM5QixPQUFPO1FBQ1AsYUFBYSxFQUFFLGdCQUFnQixDQUFDLE9BQU8sQ0FBQztLQUN6QyxDQUFDO0FBQ0osQ0FBQztBQXJCRCw4Q0FxQkMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IEVsYXN0aWNzZWFyY2ggQi5WLiBhbmQvb3IgbGljZW5zZWQgdG8gRWxhc3RpY3NlYXJjaCBCLlYuIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuIExpY2Vuc2VkIHVuZGVyIHRoZSBFbGFzdGljIExpY2Vuc2U7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIEVsYXN0aWMgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBpc0VtcHR5IH0gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IG9jIH0gZnJvbSAndHMtb3B0Y2hhaW4nO1xuaW1wb3J0IHsgRVNSZXNwb25zZSB9IGZyb20gJy4vZmV0Y2hlcic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUJ1Y2tldCB7XG4gIGtleTogbnVtYmVyO1xuICBjb3VudDogbnVtYmVyO1xuICBzYW1wbGU/OiBJQnVja2V0U2FtcGxlO1xufVxuXG5pbnRlcmZhY2UgSUJ1Y2tldFNhbXBsZSB7XG4gIHRyYWNlSWQ/OiBzdHJpbmc7XG4gIHRyYW5zYWN0aW9uSWQ/OiBzdHJpbmc7XG59XG5cbmludGVyZmFjZSBJQnVja2V0c1Jlc3BvbnNlIHtcbiAgdG90YWxIaXRzOiBudW1iZXI7XG4gIGJ1Y2tldHM6IElCdWNrZXRbXTtcbiAgZGVmYXVsdFNhbXBsZT86IElCdWNrZXRTYW1wbGU7XG59XG5cbmZ1bmN0aW9uIGdldERlZmF1bHRTYW1wbGUoYnVja2V0czogSUJ1Y2tldFtdKSB7XG4gIGNvbnN0IHNhbXBsZXMgPSBidWNrZXRzXG4gICAgLmZpbHRlcihidWNrZXQgPT4gYnVja2V0LmNvdW50ID4gMCAmJiBidWNrZXQuc2FtcGxlKVxuICAgIC5tYXAoYnVja2V0ID0+IGJ1Y2tldC5zYW1wbGUpO1xuXG4gIGlmIChpc0VtcHR5KHNhbXBsZXMpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgbWlkZGxlSW5kZXggPSBNYXRoLmZsb29yKHNhbXBsZXMubGVuZ3RoIC8gMik7XG4gIHJldHVybiBzYW1wbGVzW21pZGRsZUluZGV4XTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJ1Y2tldFRyYW5zZm9ybWVyKHJlc3BvbnNlOiBFU1Jlc3BvbnNlKTogSUJ1Y2tldHNSZXNwb25zZSB7XG4gIGNvbnN0IGJ1Y2tldHMgPSByZXNwb25zZS5hZ2dyZWdhdGlvbnMuZGlzdHJpYnV0aW9uLmJ1Y2tldHMubWFwKGJ1Y2tldCA9PiB7XG4gICAgY29uc3Qgc2FtcGxlU291cmNlID0gb2MoYnVja2V0KS5zYW1wbGUuaGl0cy5oaXRzWzBdLl9zb3VyY2UoKTtcbiAgICBjb25zdCBpc1NhbXBsZWQgPSBvYyhzYW1wbGVTb3VyY2UpLnRyYW5zYWN0aW9uLnNhbXBsZWQoZmFsc2UpO1xuICAgIGNvbnN0IHNhbXBsZSA9IHtcbiAgICAgIHRyYWNlSWQ6IG9jKHNhbXBsZVNvdXJjZSkudHJhY2UuaWQoKSxcbiAgICAgIHRyYW5zYWN0aW9uSWQ6IG9jKHNhbXBsZVNvdXJjZSkudHJhbnNhY3Rpb24uaWQoKVxuICAgIH07XG5cbiAgICByZXR1cm4ge1xuICAgICAga2V5OiBidWNrZXQua2V5LFxuICAgICAgY291bnQ6IGJ1Y2tldC5kb2NfY291bnQsXG4gICAgICBzYW1wbGU6IGlzU2FtcGxlZCA/IHNhbXBsZSA6IHVuZGVmaW5lZFxuICAgIH07XG4gIH0pO1xuXG4gIHJldHVybiB7XG4gICAgdG90YWxIaXRzOiByZXNwb25zZS5oaXRzLnRvdGFsLFxuICAgIGJ1Y2tldHMsXG4gICAgZGVmYXVsdFNhbXBsZTogZ2V0RGVmYXVsdFNhbXBsZShidWNrZXRzKVxuICB9O1xufVxuIl19