"use strict";
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const credential_store_1 = require("./lib/reindexing/credential_store");
const telemetry_1 = require("./lib/telemetry");
const cluster_checkup_1 = require("./routes/cluster_checkup");
const delete_tasks_1 = require("./routes/delete_tasks");
const deprecation_logging_1 = require("./routes/deprecation_logging");
const query_default_field_1 = require("./routes/query_default_field");
const reindex_indices_1 = require("./routes/reindex_indices");
const telemetry_2 = require("./routes/telemetry");
function initServer(server) {
    cluster_checkup_1.registerClusterCheckupRoutes(server);
    delete_tasks_1.registerDeleteTasksRoutes(server);
    deprecation_logging_1.registerDeprecationLoggingRoutes(server);
    query_default_field_1.registerQueryDefaultFieldRoutes(server);
    // The ReindexWorker uses a map of request headers that contain the authentication credentials
    // for a given reindex. We cannot currently store these in an the .kibana index b/c we do not
    // want to expose these credentials to any unauthenticated users. We also want to avoid any need
    // to add a user for a special index just for upgrading. This in-memory cache allows us to
    // process jobs without the browser staying on the page, but will require that jobs go into
    // a paused state if no Kibana nodes have the required credentials.
    const credentialStore = credential_store_1.credentialStoreFactory();
    const worker = reindex_indices_1.registerReindexWorker(server, credentialStore);
    reindex_indices_1.registerReindexIndicesRoutes(server, worker, credentialStore);
    // Bootstrap the needed routes and the collector for the telemetry
    telemetry_2.registerTelemetryRoutes(server);
    telemetry_1.makeUpgradeAssistantUsageCollector(server);
}
exports.initServer = initServer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2hvbWUvYW50aG9ueS9naXRfd29ya3NwYWNlcy9raWJhbmEveC1wYWNrL3BsdWdpbnMvdXBncmFkZV9hc3Npc3RhbnQvc2VydmVyL2luZGV4LnRzIiwic291cmNlcyI6WyIvaG9tZS9hbnRob255L2dpdF93b3Jrc3BhY2VzL2tpYmFuYS94LXBhY2svcGx1Z2lucy91cGdyYWRlX2Fzc2lzdGFudC9zZXJ2ZXIvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7O0dBSUc7O0FBSUgsd0VBQTJFO0FBQzNFLCtDQUFxRTtBQUNyRSw4REFBd0U7QUFDeEUsd0RBQWtFO0FBQ2xFLHNFQUFnRjtBQUNoRixzRUFBK0U7QUFDL0UsOERBQStGO0FBQy9GLGtEQUE2RDtBQUU3RCxTQUFnQixVQUFVLENBQUMsTUFBcUI7SUFDOUMsOENBQTRCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDckMsd0NBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDbEMsc0RBQWdDLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDekMscURBQStCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFFeEMsOEZBQThGO0lBQzlGLDZGQUE2RjtJQUM3RixnR0FBZ0c7SUFDaEcsMEZBQTBGO0lBQzFGLDJGQUEyRjtJQUMzRixtRUFBbUU7SUFDbkUsTUFBTSxlQUFlLEdBQUcseUNBQXNCLEVBQUUsQ0FBQztJQUVqRCxNQUFNLE1BQU0sR0FBRyx1Q0FBcUIsQ0FBQyxNQUFNLEVBQUUsZUFBZSxDQUFDLENBQUM7SUFDOUQsOENBQTRCLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxlQUFlLENBQUMsQ0FBQztJQUU5RCxrRUFBa0U7SUFDbEUsbUNBQXVCLENBQUMsTUFBeUMsQ0FBQyxDQUFDO0lBQ25FLDhDQUFrQyxDQUFDLE1BQXlDLENBQUMsQ0FBQztBQUNoRixDQUFDO0FBcEJELGdDQW9CQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgRWxhc3RpY3NlYXJjaCBCLlYuIGFuZC9vciBsaWNlbnNlZCB0byBFbGFzdGljc2VhcmNoIEIuVi4gdW5kZXIgb25lXG4gKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gTGljZW5zZWQgdW5kZXIgdGhlIEVsYXN0aWMgTGljZW5zZTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgRWxhc3RpYyBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IExlZ2FjeSB9IGZyb20gJ2tpYmFuYSc7XG5pbXBvcnQgeyBVcGdyYWRlQXNzaXN0YW50VGVsZW1ldHJ5U2VydmVyIH0gZnJvbSAnLi4vY29tbW9uL3R5cGVzJztcbmltcG9ydCB7IGNyZWRlbnRpYWxTdG9yZUZhY3RvcnkgfSBmcm9tICcuL2xpYi9yZWluZGV4aW5nL2NyZWRlbnRpYWxfc3RvcmUnO1xuaW1wb3J0IHsgbWFrZVVwZ3JhZGVBc3Npc3RhbnRVc2FnZUNvbGxlY3RvciB9IGZyb20gJy4vbGliL3RlbGVtZXRyeSc7XG5pbXBvcnQgeyByZWdpc3RlckNsdXN0ZXJDaGVja3VwUm91dGVzIH0gZnJvbSAnLi9yb3V0ZXMvY2x1c3Rlcl9jaGVja3VwJztcbmltcG9ydCB7IHJlZ2lzdGVyRGVsZXRlVGFza3NSb3V0ZXMgfSBmcm9tICcuL3JvdXRlcy9kZWxldGVfdGFza3MnO1xuaW1wb3J0IHsgcmVnaXN0ZXJEZXByZWNhdGlvbkxvZ2dpbmdSb3V0ZXMgfSBmcm9tICcuL3JvdXRlcy9kZXByZWNhdGlvbl9sb2dnaW5nJztcbmltcG9ydCB7IHJlZ2lzdGVyUXVlcnlEZWZhdWx0RmllbGRSb3V0ZXMgfSBmcm9tICcuL3JvdXRlcy9xdWVyeV9kZWZhdWx0X2ZpZWxkJztcbmltcG9ydCB7IHJlZ2lzdGVyUmVpbmRleEluZGljZXNSb3V0ZXMsIHJlZ2lzdGVyUmVpbmRleFdvcmtlciB9IGZyb20gJy4vcm91dGVzL3JlaW5kZXhfaW5kaWNlcyc7XG5pbXBvcnQgeyByZWdpc3RlclRlbGVtZXRyeVJvdXRlcyB9IGZyb20gJy4vcm91dGVzL3RlbGVtZXRyeSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0U2VydmVyKHNlcnZlcjogTGVnYWN5LlNlcnZlcikge1xuICByZWdpc3RlckNsdXN0ZXJDaGVja3VwUm91dGVzKHNlcnZlcik7XG4gIHJlZ2lzdGVyRGVsZXRlVGFza3NSb3V0ZXMoc2VydmVyKTtcbiAgcmVnaXN0ZXJEZXByZWNhdGlvbkxvZ2dpbmdSb3V0ZXMoc2VydmVyKTtcbiAgcmVnaXN0ZXJRdWVyeURlZmF1bHRGaWVsZFJvdXRlcyhzZXJ2ZXIpO1xuXG4gIC8vIFRoZSBSZWluZGV4V29ya2VyIHVzZXMgYSBtYXAgb2YgcmVxdWVzdCBoZWFkZXJzIHRoYXQgY29udGFpbiB0aGUgYXV0aGVudGljYXRpb24gY3JlZGVudGlhbHNcbiAgLy8gZm9yIGEgZ2l2ZW4gcmVpbmRleC4gV2UgY2Fubm90IGN1cnJlbnRseSBzdG9yZSB0aGVzZSBpbiBhbiB0aGUgLmtpYmFuYSBpbmRleCBiL2Mgd2UgZG8gbm90XG4gIC8vIHdhbnQgdG8gZXhwb3NlIHRoZXNlIGNyZWRlbnRpYWxzIHRvIGFueSB1bmF1dGhlbnRpY2F0ZWQgdXNlcnMuIFdlIGFsc28gd2FudCB0byBhdm9pZCBhbnkgbmVlZFxuICAvLyB0byBhZGQgYSB1c2VyIGZvciBhIHNwZWNpYWwgaW5kZXgganVzdCBmb3IgdXBncmFkaW5nLiBUaGlzIGluLW1lbW9yeSBjYWNoZSBhbGxvd3MgdXMgdG9cbiAgLy8gcHJvY2VzcyBqb2JzIHdpdGhvdXQgdGhlIGJyb3dzZXIgc3RheWluZyBvbiB0aGUgcGFnZSwgYnV0IHdpbGwgcmVxdWlyZSB0aGF0IGpvYnMgZ28gaW50b1xuICAvLyBhIHBhdXNlZCBzdGF0ZSBpZiBubyBLaWJhbmEgbm9kZXMgaGF2ZSB0aGUgcmVxdWlyZWQgY3JlZGVudGlhbHMuXG4gIGNvbnN0IGNyZWRlbnRpYWxTdG9yZSA9IGNyZWRlbnRpYWxTdG9yZUZhY3RvcnkoKTtcblxuICBjb25zdCB3b3JrZXIgPSByZWdpc3RlclJlaW5kZXhXb3JrZXIoc2VydmVyLCBjcmVkZW50aWFsU3RvcmUpO1xuICByZWdpc3RlclJlaW5kZXhJbmRpY2VzUm91dGVzKHNlcnZlciwgd29ya2VyLCBjcmVkZW50aWFsU3RvcmUpO1xuXG4gIC8vIEJvb3RzdHJhcCB0aGUgbmVlZGVkIHJvdXRlcyBhbmQgdGhlIGNvbGxlY3RvciBmb3IgdGhlIHRlbGVtZXRyeVxuICByZWdpc3RlclRlbGVtZXRyeVJvdXRlcyhzZXJ2ZXIgYXMgVXBncmFkZUFzc2lzdGFudFRlbGVtZXRyeVNlcnZlcik7XG4gIG1ha2VVcGdyYWRlQXNzaXN0YW50VXNhZ2VDb2xsZWN0b3Ioc2VydmVyIGFzIFVwZ3JhZGVBc3Npc3RhbnRUZWxlbWV0cnlTZXJ2ZXIpO1xufVxuIl19