"use strict";
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const types_1 = require("../../graphql/types");
class InfraFieldsDomain {
    constructor(adapter, libs) {
        this.adapter = adapter;
        this.libs = libs;
    }
    async getFields(request, sourceId, indexType) {
        const { configuration } = await this.libs.sources.getSourceConfiguration(request, sourceId);
        const includeMetricIndices = [types_1.InfraIndexType.ANY, types_1.InfraIndexType.METRICS].includes(indexType);
        const includeLogIndices = [types_1.InfraIndexType.ANY, types_1.InfraIndexType.LOGS].includes(indexType);
        const fields = await this.adapter.getIndexFields(request, `${includeMetricIndices ? configuration.metricAlias : ''},${includeLogIndices ? configuration.logAlias : ''}`);
        return fields;
    }
}
exports.InfraFieldsDomain = InfraFieldsDomain;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2hvbWUvYW50aG9ueS9naXRfd29ya3NwYWNlcy9raWJhbmEveC1wYWNrL3BsdWdpbnMvaW5mcmEvc2VydmVyL2xpYi9kb21haW5zL2ZpZWxkc19kb21haW4udHMiLCJzb3VyY2VzIjpbIi9ob21lL2FudGhvbnkvZ2l0X3dvcmtzcGFjZXMva2liYW5hL3gtcGFjay9wbHVnaW5zL2luZnJhL3NlcnZlci9saWIvZG9tYWlucy9maWVsZHNfZG9tYWluLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7OztHQUlHOztBQUVILCtDQUFzRTtBQUt0RSxNQUFhLGlCQUFpQjtJQUM1QixZQUNtQixPQUFzQixFQUN0QixJQUErQjtRQUQvQixZQUFPLEdBQVAsT0FBTyxDQUFlO1FBQ3RCLFNBQUksR0FBSixJQUFJLENBQTJCO0lBQy9DLENBQUM7SUFFRyxLQUFLLENBQUMsU0FBUyxDQUNwQixPQUE4QixFQUM5QixRQUFnQixFQUNoQixTQUF5QjtRQUV6QixNQUFNLEVBQUUsYUFBYSxFQUFFLEdBQUcsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDNUYsTUFBTSxvQkFBb0IsR0FBRyxDQUFDLHNCQUFjLENBQUMsR0FBRyxFQUFFLHNCQUFjLENBQUMsT0FBTyxDQUFDLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzlGLE1BQU0saUJBQWlCLEdBQUcsQ0FBQyxzQkFBYyxDQUFDLEdBQUcsRUFBRSxzQkFBYyxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUV4RixNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUM5QyxPQUFPLEVBQ1AsR0FBRyxvQkFBb0IsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUN0RCxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFDL0MsRUFBRSxDQUNILENBQUM7UUFFRixPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0NBQ0Y7QUF4QkQsOENBd0JDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBFbGFzdGljc2VhcmNoIEIuVi4gYW5kL29yIGxpY2Vuc2VkIHRvIEVsYXN0aWNzZWFyY2ggQi5WLiB1bmRlciBvbmVcbiAqIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiBMaWNlbnNlZCB1bmRlciB0aGUgRWxhc3RpYyBMaWNlbnNlO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBFbGFzdGljIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgSW5mcmFJbmRleEZpZWxkLCBJbmZyYUluZGV4VHlwZSB9IGZyb20gJy4uLy4uL2dyYXBocWwvdHlwZXMnO1xuaW1wb3J0IHsgRmllbGRzQWRhcHRlciB9IGZyb20gJy4uL2FkYXB0ZXJzL2ZpZWxkcyc7XG5pbXBvcnQgeyBJbmZyYUZyYW1ld29ya1JlcXVlc3QgfSBmcm9tICcuLi9hZGFwdGVycy9mcmFtZXdvcmsnO1xuaW1wb3J0IHsgSW5mcmFTb3VyY2VzIH0gZnJvbSAnLi4vc291cmNlcyc7XG5cbmV4cG9ydCBjbGFzcyBJbmZyYUZpZWxkc0RvbWFpbiB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVhZG9ubHkgYWRhcHRlcjogRmllbGRzQWRhcHRlcixcbiAgICBwcml2YXRlIHJlYWRvbmx5IGxpYnM6IHsgc291cmNlczogSW5mcmFTb3VyY2VzIH1cbiAgKSB7fVxuXG4gIHB1YmxpYyBhc3luYyBnZXRGaWVsZHMoXG4gICAgcmVxdWVzdDogSW5mcmFGcmFtZXdvcmtSZXF1ZXN0LFxuICAgIHNvdXJjZUlkOiBzdHJpbmcsXG4gICAgaW5kZXhUeXBlOiBJbmZyYUluZGV4VHlwZVxuICApOiBQcm9taXNlPEluZnJhSW5kZXhGaWVsZFtdPiB7XG4gICAgY29uc3QgeyBjb25maWd1cmF0aW9uIH0gPSBhd2FpdCB0aGlzLmxpYnMuc291cmNlcy5nZXRTb3VyY2VDb25maWd1cmF0aW9uKHJlcXVlc3QsIHNvdXJjZUlkKTtcbiAgICBjb25zdCBpbmNsdWRlTWV0cmljSW5kaWNlcyA9IFtJbmZyYUluZGV4VHlwZS5BTlksIEluZnJhSW5kZXhUeXBlLk1FVFJJQ1NdLmluY2x1ZGVzKGluZGV4VHlwZSk7XG4gICAgY29uc3QgaW5jbHVkZUxvZ0luZGljZXMgPSBbSW5mcmFJbmRleFR5cGUuQU5ZLCBJbmZyYUluZGV4VHlwZS5MT0dTXS5pbmNsdWRlcyhpbmRleFR5cGUpO1xuXG4gICAgY29uc3QgZmllbGRzID0gYXdhaXQgdGhpcy5hZGFwdGVyLmdldEluZGV4RmllbGRzKFxuICAgICAgcmVxdWVzdCxcbiAgICAgIGAke2luY2x1ZGVNZXRyaWNJbmRpY2VzID8gY29uZmlndXJhdGlvbi5tZXRyaWNBbGlhcyA6ICcnfSwke1xuICAgICAgICBpbmNsdWRlTG9nSW5kaWNlcyA/IGNvbmZpZ3VyYXRpb24ubG9nQWxpYXMgOiAnJ1xuICAgICAgfWBcbiAgICApO1xuXG4gICAgcmV0dXJuIGZpZWxkcztcbiAgfVxufVxuIl19