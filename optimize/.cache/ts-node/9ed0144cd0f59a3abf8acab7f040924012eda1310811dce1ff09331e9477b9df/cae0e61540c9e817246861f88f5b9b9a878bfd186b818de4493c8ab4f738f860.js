"use strict";
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const moment_1 = tslib_1.__importDefault(require("moment"));
function decodeEsQuery(esQuery) {
    return esQuery ? JSON.parse(decodeURIComponent(esQuery)) : null;
}
function setupRequest(req) {
    const query = req.query;
    const cluster = req.server.plugins.elasticsearch.getCluster('data');
    const client = (type, params) => {
        if (query._debug) {
            console.log(`DEBUG ES QUERY:`);
            console.log(`${req.method.toUpperCase()} ${req.url.pathname} ${JSON.stringify(query)}`);
            console.log(`GET ${params.index}/_search`);
            console.log(JSON.stringify(params.body, null, 4));
        }
        const nextParams = {
            ...params,
            rest_total_hits_as_int: true // ensure that ES returns accurate hits.total with pre-6.6 format
        };
        return cluster.callWithRequest(req, type, nextParams);
    };
    return {
        start: moment_1.default.utc(query.start).valueOf(),
        end: moment_1.default.utc(query.end).valueOf(),
        esFilterQuery: decodeEsQuery(query.esFilterQuery),
        client,
        config: req.server.config()
    };
}
exports.setupRequest = setupRequest;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2hvbWUvYW50aG9ueS9naXRfd29ya3NwYWNlcy9raWJhbmEveC1wYWNrL3BsdWdpbnMvYXBtL3NlcnZlci9saWIvaGVscGVycy9zZXR1cF9yZXF1ZXN0LnRzIiwic291cmNlcyI6WyIvaG9tZS9hbnRob255L2dpdF93b3Jrc3BhY2VzL2tpYmFuYS94LXBhY2svcGx1Z2lucy9hcG0vc2VydmVyL2xpYi9oZWxwZXJzL3NldHVwX3JlcXVlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7O0dBSUc7OztBQVNILDREQUE0QjtBQUU1QixTQUFTLGFBQWEsQ0FBQyxPQUFnQjtJQUNyQyxPQUFPLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7QUFDbEUsQ0FBQztBQXNCRCxTQUFnQixZQUFZLENBQUMsR0FBbUI7SUFDOUMsTUFBTSxLQUFLLEdBQUksR0FBRyxDQUFDLEtBQW9DLENBQUM7SUFDeEQsTUFBTSxPQUFPLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVwRSxNQUFNLE1BQU0sR0FBYSxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsRUFBRTtRQUN4QyxJQUFJLEtBQUssQ0FBQyxNQUFNLEVBQUU7WUFDaEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1lBQy9CLE9BQU8sQ0FBQyxHQUFHLENBQ1QsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRSxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxTQUFTLENBQy9ELEtBQUssQ0FDTixFQUFFLENBQ0osQ0FBQztZQUNGLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxNQUFNLENBQUMsS0FBSyxVQUFVLENBQUMsQ0FBQztZQUMzQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNuRDtRQUVELE1BQU0sVUFBVSxHQUFHO1lBQ2pCLEdBQUcsTUFBTTtZQUNULHNCQUFzQixFQUFFLElBQUksQ0FBQyxpRUFBaUU7U0FDL0YsQ0FBQztRQUNGLE9BQU8sT0FBTyxDQUFDLGVBQWUsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBQ3hELENBQUMsQ0FBQztJQUVGLE9BQU87UUFDTCxLQUFLLEVBQUUsZ0JBQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sRUFBRTtRQUN4QyxHQUFHLEVBQUUsZ0JBQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sRUFBRTtRQUNwQyxhQUFhLEVBQUUsYUFBYSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUM7UUFDakQsTUFBTTtRQUNOLE1BQU0sRUFBRSxHQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRTtLQUM1QixDQUFDO0FBQ0osQ0FBQztBQTlCRCxvQ0E4QkMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IEVsYXN0aWNzZWFyY2ggQi5WLiBhbmQvb3IgbGljZW5zZWQgdG8gRWxhc3RpY3NlYXJjaCBCLlYuIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuIExpY2Vuc2VkIHVuZGVyIHRoZSBFbGFzdGljIExpY2Vuc2U7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIEVsYXN0aWMgTGljZW5zZS5cbiAqL1xuXG4vKiB0c2xpbnQ6ZGlzYWJsZSBuby1jb25zb2xlICovXG5pbXBvcnQge1xuICBBZ2dyZWdhdGlvblNlYXJjaFJlc3BvbnNlLFxuICBFU0ZpbHRlcixcbiAgU2VhcmNoUGFyYW1zXG59IGZyb20gJ2VsYXN0aWNzZWFyY2gnO1xuaW1wb3J0IHsgTGVnYWN5IH0gZnJvbSAna2liYW5hJztcbmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcblxuZnVuY3Rpb24gZGVjb2RlRXNRdWVyeShlc1F1ZXJ5Pzogc3RyaW5nKSB7XG4gIHJldHVybiBlc1F1ZXJ5ID8gSlNPTi5wYXJzZShkZWNvZGVVUklDb21wb25lbnQoZXNRdWVyeSkpIDogbnVsbDtcbn1cblxuZXhwb3J0IHR5cGUgRVNDbGllbnQgPSA8VCA9IHZvaWQsIFUgPSB2b2lkPihcbiAgdHlwZTogc3RyaW5nLFxuICBwYXJhbXM6IFNlYXJjaFBhcmFtc1xuKSA9PiBQcm9taXNlPEFnZ3JlZ2F0aW9uU2VhcmNoUmVzcG9uc2U8VCwgVT4+O1xuXG5leHBvcnQgaW50ZXJmYWNlIFNldHVwIHtcbiAgc3RhcnQ6IG51bWJlcjtcbiAgZW5kOiBudW1iZXI7XG4gIGVzRmlsdGVyUXVlcnk/OiBFU0ZpbHRlcjtcbiAgY2xpZW50OiBFU0NsaWVudDtcbiAgY29uZmlnOiBMZWdhY3kuS2liYW5hQ29uZmlnO1xufVxuXG5pbnRlcmZhY2UgQVBNUmVxdWVzdFF1ZXJ5IHtcbiAgX2RlYnVnOiBzdHJpbmc7XG4gIHN0YXJ0OiBzdHJpbmc7XG4gIGVuZDogc3RyaW5nO1xuICBlc0ZpbHRlclF1ZXJ5OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXR1cFJlcXVlc3QocmVxOiBMZWdhY3kuUmVxdWVzdCk6IFNldHVwIHtcbiAgY29uc3QgcXVlcnkgPSAocmVxLnF1ZXJ5IGFzIHVua25vd24pIGFzIEFQTVJlcXVlc3RRdWVyeTtcbiAgY29uc3QgY2x1c3RlciA9IHJlcS5zZXJ2ZXIucGx1Z2lucy5lbGFzdGljc2VhcmNoLmdldENsdXN0ZXIoJ2RhdGEnKTtcblxuICBjb25zdCBjbGllbnQ6IEVTQ2xpZW50ID0gKHR5cGUsIHBhcmFtcykgPT4ge1xuICAgIGlmIChxdWVyeS5fZGVidWcpIHtcbiAgICAgIGNvbnNvbGUubG9nKGBERUJVRyBFUyBRVUVSWTpgKTtcbiAgICAgIGNvbnNvbGUubG9nKFxuICAgICAgICBgJHtyZXEubWV0aG9kLnRvVXBwZXJDYXNlKCl9ICR7cmVxLnVybC5wYXRobmFtZX0gJHtKU09OLnN0cmluZ2lmeShcbiAgICAgICAgICBxdWVyeVxuICAgICAgICApfWBcbiAgICAgICk7XG4gICAgICBjb25zb2xlLmxvZyhgR0VUICR7cGFyYW1zLmluZGV4fS9fc2VhcmNoYCk7XG4gICAgICBjb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeShwYXJhbXMuYm9keSwgbnVsbCwgNCkpO1xuICAgIH1cblxuICAgIGNvbnN0IG5leHRQYXJhbXMgPSB7XG4gICAgICAuLi5wYXJhbXMsXG4gICAgICByZXN0X3RvdGFsX2hpdHNfYXNfaW50OiB0cnVlIC8vIGVuc3VyZSB0aGF0IEVTIHJldHVybnMgYWNjdXJhdGUgaGl0cy50b3RhbCB3aXRoIHByZS02LjYgZm9ybWF0XG4gICAgfTtcbiAgICByZXR1cm4gY2x1c3Rlci5jYWxsV2l0aFJlcXVlc3QocmVxLCB0eXBlLCBuZXh0UGFyYW1zKTtcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIHN0YXJ0OiBtb21lbnQudXRjKHF1ZXJ5LnN0YXJ0KS52YWx1ZU9mKCksXG4gICAgZW5kOiBtb21lbnQudXRjKHF1ZXJ5LmVuZCkudmFsdWVPZigpLFxuICAgIGVzRmlsdGVyUXVlcnk6IGRlY29kZUVzUXVlcnkocXVlcnkuZXNGaWx0ZXJRdWVyeSksXG4gICAgY2xpZW50LFxuICAgIGNvbmZpZzogcmVxLnNlcnZlci5jb25maWcoKVxuICB9O1xufVxuIl19