"use strict";
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
class InfraSourceStatus {
    constructor(adapter, libs) {
        this.adapter = adapter;
        this.libs = libs;
    }
    async getLogIndexNames(request, sourceId) {
        const sourceConfiguration = await this.libs.sources.getSourceConfiguration(request, sourceId);
        const indexNames = await this.adapter.getIndexNames(request, sourceConfiguration.configuration.logAlias);
        return indexNames;
    }
    async getMetricIndexNames(request, sourceId) {
        const sourceConfiguration = await this.libs.sources.getSourceConfiguration(request, sourceId);
        const indexNames = await this.adapter.getIndexNames(request, sourceConfiguration.configuration.metricAlias);
        return indexNames;
    }
    async hasLogAlias(request, sourceId) {
        const sourceConfiguration = await this.libs.sources.getSourceConfiguration(request, sourceId);
        const hasAlias = await this.adapter.hasAlias(request, sourceConfiguration.configuration.logAlias);
        return hasAlias;
    }
    async hasMetricAlias(request, sourceId) {
        const sourceConfiguration = await this.libs.sources.getSourceConfiguration(request, sourceId);
        const hasAlias = await this.adapter.hasAlias(request, sourceConfiguration.configuration.metricAlias);
        return hasAlias;
    }
    async hasLogIndices(request, sourceId) {
        const sourceConfiguration = await this.libs.sources.getSourceConfiguration(request, sourceId);
        const hasIndices = await this.adapter.hasIndices(request, sourceConfiguration.configuration.logAlias);
        return hasIndices;
    }
    async hasMetricIndices(request, sourceId) {
        const sourceConfiguration = await this.libs.sources.getSourceConfiguration(request, sourceId);
        const hasIndices = await this.adapter.hasIndices(request, sourceConfiguration.configuration.metricAlias);
        return hasIndices;
    }
}
exports.InfraSourceStatus = InfraSourceStatus;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2hvbWUvYW50aG9ueS9naXRfd29ya3NwYWNlcy9raWJhbmEveC1wYWNrL3BsdWdpbnMvaW5mcmEvc2VydmVyL2xpYi9zb3VyY2Vfc3RhdHVzLnRzIiwic291cmNlcyI6WyIvaG9tZS9hbnRob255L2dpdF93b3Jrc3BhY2VzL2tpYmFuYS94LXBhY2svcGx1Z2lucy9pbmZyYS9zZXJ2ZXIvbGliL3NvdXJjZV9zdGF0dXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7O0dBSUc7O0FBS0gsTUFBYSxpQkFBaUI7SUFDNUIsWUFDbUIsT0FBaUMsRUFDakMsSUFBK0I7UUFEL0IsWUFBTyxHQUFQLE9BQU8sQ0FBMEI7UUFDakMsU0FBSSxHQUFKLElBQUksQ0FBMkI7SUFDL0MsQ0FBQztJQUVHLEtBQUssQ0FBQyxnQkFBZ0IsQ0FDM0IsT0FBOEIsRUFDOUIsUUFBZ0I7UUFFaEIsTUFBTSxtQkFBbUIsR0FBRyxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLHNCQUFzQixDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUMsQ0FBQztRQUM5RixNQUFNLFVBQVUsR0FBRyxNQUFNLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUNqRCxPQUFPLEVBQ1AsbUJBQW1CLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FDM0MsQ0FBQztRQUNGLE9BQU8sVUFBVSxDQUFDO0lBQ3BCLENBQUM7SUFDTSxLQUFLLENBQUMsbUJBQW1CLENBQzlCLE9BQThCLEVBQzlCLFFBQWdCO1FBRWhCLE1BQU0sbUJBQW1CLEdBQUcsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDOUYsTUFBTSxVQUFVLEdBQUcsTUFBTSxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FDakQsT0FBTyxFQUNQLG1CQUFtQixDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQzlDLENBQUM7UUFDRixPQUFPLFVBQVUsQ0FBQztJQUNwQixDQUFDO0lBQ00sS0FBSyxDQUFDLFdBQVcsQ0FBQyxPQUE4QixFQUFFLFFBQWdCO1FBQ3ZFLE1BQU0sbUJBQW1CLEdBQUcsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDOUYsTUFBTSxRQUFRLEdBQUcsTUFBTSxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FDMUMsT0FBTyxFQUNQLG1CQUFtQixDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQzNDLENBQUM7UUFDRixPQUFPLFFBQVEsQ0FBQztJQUNsQixDQUFDO0lBQ00sS0FBSyxDQUFDLGNBQWMsQ0FBQyxPQUE4QixFQUFFLFFBQWdCO1FBQzFFLE1BQU0sbUJBQW1CLEdBQUcsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDOUYsTUFBTSxRQUFRLEdBQUcsTUFBTSxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FDMUMsT0FBTyxFQUNQLG1CQUFtQixDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQzlDLENBQUM7UUFDRixPQUFPLFFBQVEsQ0FBQztJQUNsQixDQUFDO0lBQ00sS0FBSyxDQUFDLGFBQWEsQ0FBQyxPQUE4QixFQUFFLFFBQWdCO1FBQ3pFLE1BQU0sbUJBQW1CLEdBQUcsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDOUYsTUFBTSxVQUFVLEdBQUcsTUFBTSxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FDOUMsT0FBTyxFQUNQLG1CQUFtQixDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQzNDLENBQUM7UUFDRixPQUFPLFVBQVUsQ0FBQztJQUNwQixDQUFDO0lBQ00sS0FBSyxDQUFDLGdCQUFnQixDQUMzQixPQUE4QixFQUM5QixRQUFnQjtRQUVoQixNQUFNLG1CQUFtQixHQUFHLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsc0JBQXNCLENBQUMsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQzlGLE1BQU0sVUFBVSxHQUFHLE1BQU0sSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQzlDLE9BQU8sRUFDUCxtQkFBbUIsQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUM5QyxDQUFDO1FBQ0YsT0FBTyxVQUFVLENBQUM7SUFDcEIsQ0FBQztDQUNGO0FBL0RELDhDQStEQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgRWxhc3RpY3NlYXJjaCBCLlYuIGFuZC9vciBsaWNlbnNlZCB0byBFbGFzdGljc2VhcmNoIEIuVi4gdW5kZXIgb25lXG4gKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gTGljZW5zZWQgdW5kZXIgdGhlIEVsYXN0aWMgTGljZW5zZTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgRWxhc3RpYyBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEluZnJhRnJhbWV3b3JrUmVxdWVzdCB9IGZyb20gJy4vYWRhcHRlcnMvZnJhbWV3b3JrJztcbmltcG9ydCB7IEluZnJhU291cmNlcyB9IGZyb20gJy4vc291cmNlcyc7XG5cbmV4cG9ydCBjbGFzcyBJbmZyYVNvdXJjZVN0YXR1cyB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVhZG9ubHkgYWRhcHRlcjogSW5mcmFTb3VyY2VTdGF0dXNBZGFwdGVyLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgbGliczogeyBzb3VyY2VzOiBJbmZyYVNvdXJjZXMgfVxuICApIHt9XG5cbiAgcHVibGljIGFzeW5jIGdldExvZ0luZGV4TmFtZXMoXG4gICAgcmVxdWVzdDogSW5mcmFGcmFtZXdvcmtSZXF1ZXN0LFxuICAgIHNvdXJjZUlkOiBzdHJpbmdcbiAgKTogUHJvbWlzZTxzdHJpbmdbXT4ge1xuICAgIGNvbnN0IHNvdXJjZUNvbmZpZ3VyYXRpb24gPSBhd2FpdCB0aGlzLmxpYnMuc291cmNlcy5nZXRTb3VyY2VDb25maWd1cmF0aW9uKHJlcXVlc3QsIHNvdXJjZUlkKTtcbiAgICBjb25zdCBpbmRleE5hbWVzID0gYXdhaXQgdGhpcy5hZGFwdGVyLmdldEluZGV4TmFtZXMoXG4gICAgICByZXF1ZXN0LFxuICAgICAgc291cmNlQ29uZmlndXJhdGlvbi5jb25maWd1cmF0aW9uLmxvZ0FsaWFzXG4gICAgKTtcbiAgICByZXR1cm4gaW5kZXhOYW1lcztcbiAgfVxuICBwdWJsaWMgYXN5bmMgZ2V0TWV0cmljSW5kZXhOYW1lcyhcbiAgICByZXF1ZXN0OiBJbmZyYUZyYW1ld29ya1JlcXVlc3QsXG4gICAgc291cmNlSWQ6IHN0cmluZ1xuICApOiBQcm9taXNlPHN0cmluZ1tdPiB7XG4gICAgY29uc3Qgc291cmNlQ29uZmlndXJhdGlvbiA9IGF3YWl0IHRoaXMubGlicy5zb3VyY2VzLmdldFNvdXJjZUNvbmZpZ3VyYXRpb24ocmVxdWVzdCwgc291cmNlSWQpO1xuICAgIGNvbnN0IGluZGV4TmFtZXMgPSBhd2FpdCB0aGlzLmFkYXB0ZXIuZ2V0SW5kZXhOYW1lcyhcbiAgICAgIHJlcXVlc3QsXG4gICAgICBzb3VyY2VDb25maWd1cmF0aW9uLmNvbmZpZ3VyYXRpb24ubWV0cmljQWxpYXNcbiAgICApO1xuICAgIHJldHVybiBpbmRleE5hbWVzO1xuICB9XG4gIHB1YmxpYyBhc3luYyBoYXNMb2dBbGlhcyhyZXF1ZXN0OiBJbmZyYUZyYW1ld29ya1JlcXVlc3QsIHNvdXJjZUlkOiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICBjb25zdCBzb3VyY2VDb25maWd1cmF0aW9uID0gYXdhaXQgdGhpcy5saWJzLnNvdXJjZXMuZ2V0U291cmNlQ29uZmlndXJhdGlvbihyZXF1ZXN0LCBzb3VyY2VJZCk7XG4gICAgY29uc3QgaGFzQWxpYXMgPSBhd2FpdCB0aGlzLmFkYXB0ZXIuaGFzQWxpYXMoXG4gICAgICByZXF1ZXN0LFxuICAgICAgc291cmNlQ29uZmlndXJhdGlvbi5jb25maWd1cmF0aW9uLmxvZ0FsaWFzXG4gICAgKTtcbiAgICByZXR1cm4gaGFzQWxpYXM7XG4gIH1cbiAgcHVibGljIGFzeW5jIGhhc01ldHJpY0FsaWFzKHJlcXVlc3Q6IEluZnJhRnJhbWV3b3JrUmVxdWVzdCwgc291cmNlSWQ6IHN0cmluZyk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIGNvbnN0IHNvdXJjZUNvbmZpZ3VyYXRpb24gPSBhd2FpdCB0aGlzLmxpYnMuc291cmNlcy5nZXRTb3VyY2VDb25maWd1cmF0aW9uKHJlcXVlc3QsIHNvdXJjZUlkKTtcbiAgICBjb25zdCBoYXNBbGlhcyA9IGF3YWl0IHRoaXMuYWRhcHRlci5oYXNBbGlhcyhcbiAgICAgIHJlcXVlc3QsXG4gICAgICBzb3VyY2VDb25maWd1cmF0aW9uLmNvbmZpZ3VyYXRpb24ubWV0cmljQWxpYXNcbiAgICApO1xuICAgIHJldHVybiBoYXNBbGlhcztcbiAgfVxuICBwdWJsaWMgYXN5bmMgaGFzTG9nSW5kaWNlcyhyZXF1ZXN0OiBJbmZyYUZyYW1ld29ya1JlcXVlc3QsIHNvdXJjZUlkOiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICBjb25zdCBzb3VyY2VDb25maWd1cmF0aW9uID0gYXdhaXQgdGhpcy5saWJzLnNvdXJjZXMuZ2V0U291cmNlQ29uZmlndXJhdGlvbihyZXF1ZXN0LCBzb3VyY2VJZCk7XG4gICAgY29uc3QgaGFzSW5kaWNlcyA9IGF3YWl0IHRoaXMuYWRhcHRlci5oYXNJbmRpY2VzKFxuICAgICAgcmVxdWVzdCxcbiAgICAgIHNvdXJjZUNvbmZpZ3VyYXRpb24uY29uZmlndXJhdGlvbi5sb2dBbGlhc1xuICAgICk7XG4gICAgcmV0dXJuIGhhc0luZGljZXM7XG4gIH1cbiAgcHVibGljIGFzeW5jIGhhc01ldHJpY0luZGljZXMoXG4gICAgcmVxdWVzdDogSW5mcmFGcmFtZXdvcmtSZXF1ZXN0LFxuICAgIHNvdXJjZUlkOiBzdHJpbmdcbiAgKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgY29uc3Qgc291cmNlQ29uZmlndXJhdGlvbiA9IGF3YWl0IHRoaXMubGlicy5zb3VyY2VzLmdldFNvdXJjZUNvbmZpZ3VyYXRpb24ocmVxdWVzdCwgc291cmNlSWQpO1xuICAgIGNvbnN0IGhhc0luZGljZXMgPSBhd2FpdCB0aGlzLmFkYXB0ZXIuaGFzSW5kaWNlcyhcbiAgICAgIHJlcXVlc3QsXG4gICAgICBzb3VyY2VDb25maWd1cmF0aW9uLmNvbmZpZ3VyYXRpb24ubWV0cmljQWxpYXNcbiAgICApO1xuICAgIHJldHVybiBoYXNJbmRpY2VzO1xuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSW5mcmFTb3VyY2VTdGF0dXNBZGFwdGVyIHtcbiAgZ2V0SW5kZXhOYW1lcyhyZXF1ZXN0OiBJbmZyYUZyYW1ld29ya1JlcXVlc3QsIGFsaWFzTmFtZTogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmdbXT47XG4gIGhhc0FsaWFzKHJlcXVlc3Q6IEluZnJhRnJhbWV3b3JrUmVxdWVzdCwgYWxpYXNOYW1lOiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+O1xuICBoYXNJbmRpY2VzKHJlcXVlc3Q6IEluZnJhRnJhbWV3b3JrUmVxdWVzdCwgaW5kZXhOYW1lczogc3RyaW5nKTogUHJvbWlzZTxib29sZWFuPjtcbn1cbiJdfQ==