"use strict";
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const d3_array_1 = require("d3-array");
const pick_1 = tslib_1.__importDefault(require("lodash/fp/pick"));
exports.isTimeKey = (value) => value &&
    typeof value === 'object' &&
    typeof value.time === 'number' &&
    typeof value.tiebreaker === 'number';
exports.pickTimeKey = (value) => pick_1.default(['time', 'tiebreaker'], value);
function compareTimeKeys(firstKey, secondKey, compareValues = d3_array_1.ascending) {
    const timeComparison = compareValues(firstKey.time, secondKey.time);
    if (timeComparison === 0) {
        const tiebreakerComparison = compareValues(firstKey.tiebreaker, secondKey.tiebreaker);
        if (tiebreakerComparison === 0 &&
            typeof firstKey.gid !== 'undefined' &&
            typeof secondKey.gid !== 'undefined') {
            return compareValues(firstKey.gid, secondKey.gid);
        }
        return tiebreakerComparison;
    }
    return timeComparison;
}
exports.compareTimeKeys = compareTimeKeys;
exports.compareToTimeKey = (keyAccessor, compareValues) => (value, key) => compareTimeKeys(keyAccessor(value), key, compareValues);
exports.getIndexAtTimeKey = (keyAccessor, compareValues) => {
    const comparator = exports.compareToTimeKey(keyAccessor, compareValues);
    const collectionBisector = d3_array_1.bisector(comparator);
    return (collection, key) => {
        const index = collectionBisector.left(collection, key);
        if (index >= collection.length) {
            return null;
        }
        if (comparator(collection[index], key) !== 0) {
            return null;
        }
        return index;
    };
};
exports.timeKeyIsBetween = (min, max, operand) => compareTimeKeys(min, operand) <= 0 && compareTimeKeys(max, operand) >= 0;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2hvbWUvYW50aG9ueS9naXRfd29ya3NwYWNlcy9raWJhbmEveC1wYWNrL3BsdWdpbnMvaW5mcmEvY29tbW9uL3RpbWUvdGltZV9rZXkudHMiLCJzb3VyY2VzIjpbIi9ob21lL2FudGhvbnkvZ2l0X3dvcmtzcGFjZXMva2liYW5hL3gtcGFjay9wbHVnaW5zL2luZnJhL2NvbW1vbi90aW1lL3RpbWVfa2V5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7OztHQUlHOzs7QUFFSCx1Q0FBK0M7QUFDL0Msa0VBQWtDO0FBVXJCLFFBQUEsU0FBUyxHQUFHLENBQUMsS0FBVSxFQUFvQixFQUFFLENBQ3hELEtBQUs7SUFDTCxPQUFPLEtBQUssS0FBSyxRQUFRO0lBQ3pCLE9BQU8sS0FBSyxDQUFDLElBQUksS0FBSyxRQUFRO0lBQzlCLE9BQU8sS0FBSyxDQUFDLFVBQVUsS0FBSyxRQUFRLENBQUM7QUFFMUIsUUFBQSxXQUFXLEdBQUcsQ0FBb0IsS0FBUSxFQUFXLEVBQUUsQ0FDbEUsY0FBSSxDQUFDLENBQUMsTUFBTSxFQUFFLFlBQVksQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBRXRDLFNBQWdCLGVBQWUsQ0FDN0IsUUFBaUIsRUFDakIsU0FBa0IsRUFDbEIsZ0JBQTRCLG9CQUFTO0lBRXJDLE1BQU0sY0FBYyxHQUFHLGFBQWEsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUVwRSxJQUFJLGNBQWMsS0FBSyxDQUFDLEVBQUU7UUFDeEIsTUFBTSxvQkFBb0IsR0FBRyxhQUFhLENBQUMsUUFBUSxDQUFDLFVBQVUsRUFBRSxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUM7UUFFdEYsSUFDRSxvQkFBb0IsS0FBSyxDQUFDO1lBQzFCLE9BQU8sUUFBUSxDQUFDLEdBQUcsS0FBSyxXQUFXO1lBQ25DLE9BQU8sU0FBUyxDQUFDLEdBQUcsS0FBSyxXQUFXLEVBQ3BDO1lBQ0EsT0FBTyxhQUFhLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDbkQ7UUFFRCxPQUFPLG9CQUFvQixDQUFDO0tBQzdCO0lBRUQsT0FBTyxjQUFjLENBQUM7QUFDeEIsQ0FBQztBQXRCRCwwQ0FzQkM7QUFFWSxRQUFBLGdCQUFnQixHQUFHLENBQzlCLFdBQXNDLEVBQ3RDLGFBQTBCLEVBQzFCLEVBQUUsQ0FBQyxDQUFDLEtBQVksRUFBRSxHQUFZLEVBQUUsRUFBRSxDQUFDLGVBQWUsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLEVBQUUsR0FBRyxFQUFFLGFBQWEsQ0FBQyxDQUFDO0FBRWhGLFFBQUEsaUJBQWlCLEdBQUcsQ0FDL0IsV0FBc0MsRUFDdEMsYUFBMEIsRUFDMUIsRUFBRTtJQUNGLE1BQU0sVUFBVSxHQUFHLHdCQUFnQixDQUFDLFdBQVcsRUFBRSxhQUFhLENBQUMsQ0FBQztJQUNoRSxNQUFNLGtCQUFrQixHQUFHLG1CQUFRLENBQUMsVUFBVSxDQUFDLENBQUM7SUFFaEQsT0FBTyxDQUFDLFVBQW1CLEVBQUUsR0FBWSxFQUFpQixFQUFFO1FBQzFELE1BQU0sS0FBSyxHQUFHLGtCQUFrQixDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFFdkQsSUFBSSxLQUFLLElBQUksVUFBVSxDQUFDLE1BQU0sRUFBRTtZQUM5QixPQUFPLElBQUksQ0FBQztTQUNiO1FBRUQsSUFBSSxVQUFVLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxFQUFFLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUM1QyxPQUFPLElBQUksQ0FBQztTQUNiO1FBRUQsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDLENBQUM7QUFDSixDQUFDLENBQUM7QUFFVyxRQUFBLGdCQUFnQixHQUFHLENBQUMsR0FBWSxFQUFFLEdBQVksRUFBRSxPQUFnQixFQUFFLEVBQUUsQ0FDL0UsZUFBZSxDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksZUFBZSxDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IEVsYXN0aWNzZWFyY2ggQi5WLiBhbmQvb3IgbGljZW5zZWQgdG8gRWxhc3RpY3NlYXJjaCBCLlYuIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuIExpY2Vuc2VkIHVuZGVyIHRoZSBFbGFzdGljIExpY2Vuc2U7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIEVsYXN0aWMgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBhc2NlbmRpbmcsIGJpc2VjdG9yIH0gZnJvbSAnZDMtYXJyYXknO1xuaW1wb3J0IHBpY2sgZnJvbSAnbG9kYXNoL2ZwL3BpY2snO1xuXG5leHBvcnQgaW50ZXJmYWNlIFRpbWVLZXkge1xuICB0aW1lOiBudW1iZXI7XG4gIHRpZWJyZWFrZXI6IG51bWJlcjtcbiAgZ2lkPzogc3RyaW5nO1xufVxuXG5leHBvcnQgdHlwZSBDb21wYXJhdG9yID0gKGZpcnN0VmFsdWU6IGFueSwgc2Vjb25kVmFsdWU6IGFueSkgPT4gbnVtYmVyO1xuXG5leHBvcnQgY29uc3QgaXNUaW1lS2V5ID0gKHZhbHVlOiBhbnkpOiB2YWx1ZSBpcyBUaW1lS2V5ID0+XG4gIHZhbHVlICYmXG4gIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiZcbiAgdHlwZW9mIHZhbHVlLnRpbWUgPT09ICdudW1iZXInICYmXG4gIHR5cGVvZiB2YWx1ZS50aWVicmVha2VyID09PSAnbnVtYmVyJztcblxuZXhwb3J0IGNvbnN0IHBpY2tUaW1lS2V5ID0gPFQgZXh0ZW5kcyBUaW1lS2V5Pih2YWx1ZTogVCk6IFRpbWVLZXkgPT5cbiAgcGljayhbJ3RpbWUnLCAndGllYnJlYWtlciddLCB2YWx1ZSk7XG5cbmV4cG9ydCBmdW5jdGlvbiBjb21wYXJlVGltZUtleXMoXG4gIGZpcnN0S2V5OiBUaW1lS2V5LFxuICBzZWNvbmRLZXk6IFRpbWVLZXksXG4gIGNvbXBhcmVWYWx1ZXM6IENvbXBhcmF0b3IgPSBhc2NlbmRpbmdcbik6IG51bWJlciB7XG4gIGNvbnN0IHRpbWVDb21wYXJpc29uID0gY29tcGFyZVZhbHVlcyhmaXJzdEtleS50aW1lLCBzZWNvbmRLZXkudGltZSk7XG5cbiAgaWYgKHRpbWVDb21wYXJpc29uID09PSAwKSB7XG4gICAgY29uc3QgdGllYnJlYWtlckNvbXBhcmlzb24gPSBjb21wYXJlVmFsdWVzKGZpcnN0S2V5LnRpZWJyZWFrZXIsIHNlY29uZEtleS50aWVicmVha2VyKTtcblxuICAgIGlmIChcbiAgICAgIHRpZWJyZWFrZXJDb21wYXJpc29uID09PSAwICYmXG4gICAgICB0eXBlb2YgZmlyc3RLZXkuZ2lkICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgdHlwZW9mIHNlY29uZEtleS5naWQgIT09ICd1bmRlZmluZWQnXG4gICAgKSB7XG4gICAgICByZXR1cm4gY29tcGFyZVZhbHVlcyhmaXJzdEtleS5naWQsIHNlY29uZEtleS5naWQpO1xuICAgIH1cblxuICAgIHJldHVybiB0aWVicmVha2VyQ29tcGFyaXNvbjtcbiAgfVxuXG4gIHJldHVybiB0aW1lQ29tcGFyaXNvbjtcbn1cblxuZXhwb3J0IGNvbnN0IGNvbXBhcmVUb1RpbWVLZXkgPSA8VmFsdWU+KFxuICBrZXlBY2Nlc3NvcjogKHZhbHVlOiBWYWx1ZSkgPT4gVGltZUtleSxcbiAgY29tcGFyZVZhbHVlcz86IENvbXBhcmF0b3JcbikgPT4gKHZhbHVlOiBWYWx1ZSwga2V5OiBUaW1lS2V5KSA9PiBjb21wYXJlVGltZUtleXMoa2V5QWNjZXNzb3IodmFsdWUpLCBrZXksIGNvbXBhcmVWYWx1ZXMpO1xuXG5leHBvcnQgY29uc3QgZ2V0SW5kZXhBdFRpbWVLZXkgPSA8VmFsdWU+KFxuICBrZXlBY2Nlc3NvcjogKHZhbHVlOiBWYWx1ZSkgPT4gVGltZUtleSxcbiAgY29tcGFyZVZhbHVlcz86IENvbXBhcmF0b3JcbikgPT4ge1xuICBjb25zdCBjb21wYXJhdG9yID0gY29tcGFyZVRvVGltZUtleShrZXlBY2Nlc3NvciwgY29tcGFyZVZhbHVlcyk7XG4gIGNvbnN0IGNvbGxlY3Rpb25CaXNlY3RvciA9IGJpc2VjdG9yKGNvbXBhcmF0b3IpO1xuXG4gIHJldHVybiAoY29sbGVjdGlvbjogVmFsdWVbXSwga2V5OiBUaW1lS2V5KTogbnVtYmVyIHwgbnVsbCA9PiB7XG4gICAgY29uc3QgaW5kZXggPSBjb2xsZWN0aW9uQmlzZWN0b3IubGVmdChjb2xsZWN0aW9uLCBrZXkpO1xuXG4gICAgaWYgKGluZGV4ID49IGNvbGxlY3Rpb24ubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAoY29tcGFyYXRvcihjb2xsZWN0aW9uW2luZGV4XSwga2V5KSAhPT0gMCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIGluZGV4O1xuICB9O1xufTtcblxuZXhwb3J0IGNvbnN0IHRpbWVLZXlJc0JldHdlZW4gPSAobWluOiBUaW1lS2V5LCBtYXg6IFRpbWVLZXksIG9wZXJhbmQ6IFRpbWVLZXkpID0+XG4gIGNvbXBhcmVUaW1lS2V5cyhtaW4sIG9wZXJhbmQpIDw9IDAgJiYgY29tcGFyZVRpbWVLZXlzKG1heCwgb3BlcmFuZCkgPj0gMDtcbiJdfQ==