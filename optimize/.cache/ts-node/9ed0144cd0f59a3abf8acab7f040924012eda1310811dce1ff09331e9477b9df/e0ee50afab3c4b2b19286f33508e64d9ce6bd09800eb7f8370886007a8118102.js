"use strict";
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const types_1 = require("../../../common/types");
async function incrementUIOpenOptionCounter(server, uiOpenOptionCounter) {
    const { getSavedObjectsRepository } = server.savedObjects;
    const { callWithInternalUser } = server.plugins.elasticsearch.getCluster('admin');
    const internalRepository = getSavedObjectsRepository(callWithInternalUser);
    await internalRepository.incrementCounter(types_1.UPGRADE_ASSISTANT_TYPE, types_1.UPGRADE_ASSISTANT_DOC_ID, `ui_open.${uiOpenOptionCounter}`);
}
async function upsertUIOpenOption(server, req) {
    const { overview, cluster, indices } = req.payload;
    if (overview) {
        await incrementUIOpenOptionCounter(server, 'overview');
    }
    if (cluster) {
        await incrementUIOpenOptionCounter(server, 'cluster');
    }
    if (indices) {
        await incrementUIOpenOptionCounter(server, 'indices');
    }
    return {
        overview,
        cluster,
        indices,
    };
}
exports.upsertUIOpenOption = upsertUIOpenOption;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2hvbWUvYW50aG9ueS9naXRfd29ya3NwYWNlcy9raWJhbmEveC1wYWNrL3BsdWdpbnMvdXBncmFkZV9hc3Npc3RhbnQvc2VydmVyL2xpYi90ZWxlbWV0cnkvZXNfdWlfb3Blbl9hcGlzLnRzIiwic291cmNlcyI6WyIvaG9tZS9hbnRob255L2dpdF93b3Jrc3BhY2VzL2tpYmFuYS94LXBhY2svcGx1Z2lucy91cGdyYWRlX2Fzc2lzdGFudC9zZXJ2ZXIvbGliL3RlbGVtZXRyeS9lc191aV9vcGVuX2FwaXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7O0dBSUc7O0FBR0gsaURBTStCO0FBRS9CLEtBQUssVUFBVSw0QkFBNEIsQ0FDekMsTUFBdUMsRUFDdkMsbUJBQWlDO0lBRWpDLE1BQU0sRUFBRSx5QkFBeUIsRUFBRSxHQUFHLE1BQU0sQ0FBQyxZQUFZLENBQUM7SUFDMUQsTUFBTSxFQUFFLG9CQUFvQixFQUFFLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ2xGLE1BQU0sa0JBQWtCLEdBQUcseUJBQXlCLENBQUMsb0JBQW9CLENBQUMsQ0FBQztJQUUzRSxNQUFNLGtCQUFrQixDQUFDLGdCQUFnQixDQUN2Qyw4QkFBc0IsRUFDdEIsZ0NBQXdCLEVBQ3hCLFdBQVcsbUJBQW1CLEVBQUUsQ0FDakMsQ0FBQztBQUNKLENBQUM7QUFFTSxLQUFLLFVBQVUsa0JBQWtCLENBQ3RDLE1BQXVDLEVBQ3ZDLEdBQW1CO0lBRW5CLE1BQU0sRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxHQUFHLEdBQUcsQ0FBQyxPQUFpQixDQUFDO0lBRTdELElBQUksUUFBUSxFQUFFO1FBQ1osTUFBTSw0QkFBNEIsQ0FBQyxNQUFNLEVBQUUsVUFBVSxDQUFDLENBQUM7S0FDeEQ7SUFFRCxJQUFJLE9BQU8sRUFBRTtRQUNYLE1BQU0sNEJBQTRCLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0tBQ3ZEO0lBRUQsSUFBSSxPQUFPLEVBQUU7UUFDWCxNQUFNLDRCQUE0QixDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQztLQUN2RDtJQUVELE9BQU87UUFDTCxRQUFRO1FBQ1IsT0FBTztRQUNQLE9BQU87S0FDUixDQUFDO0FBQ0osQ0FBQztBQXZCRCxnREF1QkMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IEVsYXN0aWNzZWFyY2ggQi5WLiBhbmQvb3IgbGljZW5zZWQgdG8gRWxhc3RpY3NlYXJjaCBCLlYuIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuIExpY2Vuc2VkIHVuZGVyIHRoZSBFbGFzdGljIExpY2Vuc2U7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIEVsYXN0aWMgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBMZWdhY3kgfSBmcm9tICdraWJhbmEnO1xuaW1wb3J0IHtcbiAgVUlPcGVuLFxuICBVSU9wZW5PcHRpb24sXG4gIFVQR1JBREVfQVNTSVNUQU5UX0RPQ19JRCxcbiAgVVBHUkFERV9BU1NJU1RBTlRfVFlQRSxcbiAgVXBncmFkZUFzc2lzdGFudFRlbGVtZXRyeVNlcnZlcixcbn0gZnJvbSAnLi4vLi4vLi4vY29tbW9uL3R5cGVzJztcblxuYXN5bmMgZnVuY3Rpb24gaW5jcmVtZW50VUlPcGVuT3B0aW9uQ291bnRlcihcbiAgc2VydmVyOiBVcGdyYWRlQXNzaXN0YW50VGVsZW1ldHJ5U2VydmVyLFxuICB1aU9wZW5PcHRpb25Db3VudGVyOiBVSU9wZW5PcHRpb25cbikge1xuICBjb25zdCB7IGdldFNhdmVkT2JqZWN0c1JlcG9zaXRvcnkgfSA9IHNlcnZlci5zYXZlZE9iamVjdHM7XG4gIGNvbnN0IHsgY2FsbFdpdGhJbnRlcm5hbFVzZXIgfSA9IHNlcnZlci5wbHVnaW5zLmVsYXN0aWNzZWFyY2guZ2V0Q2x1c3RlcignYWRtaW4nKTtcbiAgY29uc3QgaW50ZXJuYWxSZXBvc2l0b3J5ID0gZ2V0U2F2ZWRPYmplY3RzUmVwb3NpdG9yeShjYWxsV2l0aEludGVybmFsVXNlcik7XG5cbiAgYXdhaXQgaW50ZXJuYWxSZXBvc2l0b3J5LmluY3JlbWVudENvdW50ZXIoXG4gICAgVVBHUkFERV9BU1NJU1RBTlRfVFlQRSxcbiAgICBVUEdSQURFX0FTU0lTVEFOVF9ET0NfSUQsXG4gICAgYHVpX29wZW4uJHt1aU9wZW5PcHRpb25Db3VudGVyfWBcbiAgKTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHVwc2VydFVJT3Blbk9wdGlvbihcbiAgc2VydmVyOiBVcGdyYWRlQXNzaXN0YW50VGVsZW1ldHJ5U2VydmVyLFxuICByZXE6IExlZ2FjeS5SZXF1ZXN0XG4pOiBQcm9taXNlPFVJT3Blbj4ge1xuICBjb25zdCB7IG92ZXJ2aWV3LCBjbHVzdGVyLCBpbmRpY2VzIH0gPSByZXEucGF5bG9hZCBhcyBVSU9wZW47XG5cbiAgaWYgKG92ZXJ2aWV3KSB7XG4gICAgYXdhaXQgaW5jcmVtZW50VUlPcGVuT3B0aW9uQ291bnRlcihzZXJ2ZXIsICdvdmVydmlldycpO1xuICB9XG5cbiAgaWYgKGNsdXN0ZXIpIHtcbiAgICBhd2FpdCBpbmNyZW1lbnRVSU9wZW5PcHRpb25Db3VudGVyKHNlcnZlciwgJ2NsdXN0ZXInKTtcbiAgfVxuXG4gIGlmIChpbmRpY2VzKSB7XG4gICAgYXdhaXQgaW5jcmVtZW50VUlPcGVuT3B0aW9uQ291bnRlcihzZXJ2ZXIsICdpbmRpY2VzJyk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG92ZXJ2aWV3LFxuICAgIGNsdXN0ZXIsXG4gICAgaW5kaWNlcyxcbiAgfTtcbn1cbiJdfQ==