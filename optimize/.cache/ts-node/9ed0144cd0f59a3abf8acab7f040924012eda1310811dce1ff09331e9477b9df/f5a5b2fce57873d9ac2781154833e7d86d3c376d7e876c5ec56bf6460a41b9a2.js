"use strict";
/*
 * Licensed to Elasticsearch B.V. under one or more contributor
 * license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch B.V. licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const config_schema_1 = require("@kbn/config-schema");
const utils_1 = require("../../../utils");
const legacy_appender_1 = require("../../legacy_compat/logging/appenders/legacy_appender");
const layouts_1 = require("../layouts/layouts");
const console_appender_1 = require("./console/console_appender");
const file_appender_1 = require("./file/file_appender");
const appendersSchema = config_schema_1.schema.oneOf([
    console_appender_1.ConsoleAppender.configSchema,
    file_appender_1.FileAppender.configSchema,
    legacy_appender_1.LegacyAppender.configSchema,
]);
/** @internal */
class Appenders {
    /**
     * Factory method that creates specific `Appender` instances based on the passed `config` parameter.
     * @param config Configuration specific to a particular `Appender` implementation.
     * @returns Fully constructed `Appender` instance.
     */
    static create(config) {
        switch (config.kind) {
            case 'console':
                return new console_appender_1.ConsoleAppender(layouts_1.Layouts.create(config.layout));
            case 'file':
                return new file_appender_1.FileAppender(layouts_1.Layouts.create(config.layout), config.path);
            case 'legacy-appender':
                return new legacy_appender_1.LegacyAppender(config.legacyLoggingConfig);
            default:
                return utils_1.assertNever(config);
        }
    }
}
Appenders.configSchema = appendersSchema;
exports.Appenders = Appenders;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2hvbWUvYW50aG9ueS9naXRfd29ya3NwYWNlcy9raWJhbmEvc3JjL2NvcmUvc2VydmVyL2xvZ2dpbmcvYXBwZW5kZXJzL2FwcGVuZGVycy50cyIsInNvdXJjZXMiOlsiL2hvbWUvYW50aG9ueS9naXRfd29ya3NwYWNlcy9raWJhbmEvc3JjL2NvcmUvc2VydmVyL2xvZ2dpbmcvYXBwZW5kZXJzL2FwcGVuZGVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBaUJHOztBQUVILHNEQUFvRDtBQUVwRCwwQ0FBNkM7QUFDN0MsMkZBQXVGO0FBQ3ZGLGdEQUE2QztBQUU3QyxpRUFBNkQ7QUFDN0Qsd0RBQW9EO0FBRXBELE1BQU0sZUFBZSxHQUFHLHNCQUFNLENBQUMsS0FBSyxDQUFDO0lBQ25DLGtDQUFlLENBQUMsWUFBWTtJQUM1Qiw0QkFBWSxDQUFDLFlBQVk7SUFDekIsZ0NBQWMsQ0FBQyxZQUFZO0NBQzVCLENBQUMsQ0FBQztBQXdCSCxnQkFBZ0I7QUFDaEIsTUFBYSxTQUFTO0lBR3BCOzs7O09BSUc7SUFDSSxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQTBCO1FBQzdDLFFBQVEsTUFBTSxDQUFDLElBQUksRUFBRTtZQUNuQixLQUFLLFNBQVM7Z0JBQ1osT0FBTyxJQUFJLGtDQUFlLENBQUMsaUJBQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFFNUQsS0FBSyxNQUFNO2dCQUNULE9BQU8sSUFBSSw0QkFBWSxDQUFDLGlCQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7WUFFdEUsS0FBSyxpQkFBaUI7Z0JBQ3BCLE9BQU8sSUFBSSxnQ0FBYyxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1lBRXhEO2dCQUNFLE9BQU8sbUJBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUM5QjtJQUNILENBQUM7O0FBckJhLHNCQUFZLEdBQUcsZUFBZSxDQUFDO0FBRC9DLDhCQXVCQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBMaWNlbnNlZCB0byBFbGFzdGljc2VhcmNoIEIuVi4gdW5kZXIgb25lIG9yIG1vcmUgY29udHJpYnV0b3JcbiAqIGxpY2Vuc2UgYWdyZWVtZW50cy4gU2VlIHRoZSBOT1RJQ0UgZmlsZSBkaXN0cmlidXRlZCB3aXRoXG4gKiB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gcmVnYXJkaW5nIGNvcHlyaWdodFxuICogb3duZXJzaGlwLiBFbGFzdGljc2VhcmNoIEIuVi4gbGljZW5zZXMgdGhpcyBmaWxlIHRvIHlvdSB1bmRlclxuICogdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heVxuICogbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBzY2hlbWEsIFR5cGVPZiB9IGZyb20gJ0BrYm4vY29uZmlnLXNjaGVtYSc7XG5cbmltcG9ydCB7IGFzc2VydE5ldmVyIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMnO1xuaW1wb3J0IHsgTGVnYWN5QXBwZW5kZXIgfSBmcm9tICcuLi8uLi9sZWdhY3lfY29tcGF0L2xvZ2dpbmcvYXBwZW5kZXJzL2xlZ2FjeV9hcHBlbmRlcic7XG5pbXBvcnQgeyBMYXlvdXRzIH0gZnJvbSAnLi4vbGF5b3V0cy9sYXlvdXRzJztcbmltcG9ydCB7IExvZ1JlY29yZCB9IGZyb20gJy4uL2xvZ19yZWNvcmQnO1xuaW1wb3J0IHsgQ29uc29sZUFwcGVuZGVyIH0gZnJvbSAnLi9jb25zb2xlL2NvbnNvbGVfYXBwZW5kZXInO1xuaW1wb3J0IHsgRmlsZUFwcGVuZGVyIH0gZnJvbSAnLi9maWxlL2ZpbGVfYXBwZW5kZXInO1xuXG5jb25zdCBhcHBlbmRlcnNTY2hlbWEgPSBzY2hlbWEub25lT2YoW1xuICBDb25zb2xlQXBwZW5kZXIuY29uZmlnU2NoZW1hLFxuICBGaWxlQXBwZW5kZXIuY29uZmlnU2NoZW1hLFxuICBMZWdhY3lBcHBlbmRlci5jb25maWdTY2hlbWEsXG5dKTtcblxuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IHR5cGUgQXBwZW5kZXJDb25maWdUeXBlID0gVHlwZU9mPHR5cGVvZiBhcHBlbmRlcnNTY2hlbWE+O1xuXG4vKipcbiAqIEVudGl0eSB0aGF0IGNhbiBhcHBlbmQgYExvZ1JlY29yZGAgaW5zdGFuY2VzIHRvIGZpbGUsIHN0ZG91dCwgbWVtb3J5IG9yIHdoYXRldmVyXG4gKiBpcyBpbXBsZW1lbnRlZCBpbnRlcm5hbGx5LiBJdCdzIHN1cHBvc2VkIHRvIGJlIHVzZWQgYnkgYExvZ2dlcmAuXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBBcHBlbmRlciB7XG4gIGFwcGVuZChyZWNvcmQ6IExvZ1JlY29yZCk6IHZvaWQ7XG59XG5cbi8qKlxuICogVGhpcyBpbnRlcmZhY2Ugc2hvdWxkIGJlIGFkZGl0aW9uYWxseSBpbXBsZW1lbnRlZCBieSB0aGUgYEFwcGVuZGVyYCdzIGlmIHRoZXkgYXJlIHN1cHBvc2VkXG4gKiB0byBiZSBwcm9wZXJseSBkaXNwb3NlZC4gSXQncyBpbnRlbnRpb25hbGx5IHNlcGFyYXRlZCBmcm9tIGBBcHBlbmRlcmAgaW50ZXJmYWNlIHNvIHRoYXQgYExvZ2dlcmBcbiAqIHRoYXQgaW50ZXJhY3RzIHdpdGggYEFwcGVuZGVyYCBkb2Vzbid0IGhhdmUgY29udHJvbCBvdmVyIGFwcGVuZGVyIGxpZmV0aW1lLlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRGlzcG9zYWJsZUFwcGVuZGVyIGV4dGVuZHMgQXBwZW5kZXIge1xuICBkaXNwb3NlOiAoKSA9PiB2b2lkO1xufVxuXG4vKiogQGludGVybmFsICovXG5leHBvcnQgY2xhc3MgQXBwZW5kZXJzIHtcbiAgcHVibGljIHN0YXRpYyBjb25maWdTY2hlbWEgPSBhcHBlbmRlcnNTY2hlbWE7XG5cbiAgLyoqXG4gICAqIEZhY3RvcnkgbWV0aG9kIHRoYXQgY3JlYXRlcyBzcGVjaWZpYyBgQXBwZW5kZXJgIGluc3RhbmNlcyBiYXNlZCBvbiB0aGUgcGFzc2VkIGBjb25maWdgIHBhcmFtZXRlci5cbiAgICogQHBhcmFtIGNvbmZpZyBDb25maWd1cmF0aW9uIHNwZWNpZmljIHRvIGEgcGFydGljdWxhciBgQXBwZW5kZXJgIGltcGxlbWVudGF0aW9uLlxuICAgKiBAcmV0dXJucyBGdWxseSBjb25zdHJ1Y3RlZCBgQXBwZW5kZXJgIGluc3RhbmNlLlxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBjcmVhdGUoY29uZmlnOiBBcHBlbmRlckNvbmZpZ1R5cGUpOiBEaXNwb3NhYmxlQXBwZW5kZXIge1xuICAgIHN3aXRjaCAoY29uZmlnLmtpbmQpIHtcbiAgICAgIGNhc2UgJ2NvbnNvbGUnOlxuICAgICAgICByZXR1cm4gbmV3IENvbnNvbGVBcHBlbmRlcihMYXlvdXRzLmNyZWF0ZShjb25maWcubGF5b3V0KSk7XG5cbiAgICAgIGNhc2UgJ2ZpbGUnOlxuICAgICAgICByZXR1cm4gbmV3IEZpbGVBcHBlbmRlcihMYXlvdXRzLmNyZWF0ZShjb25maWcubGF5b3V0KSwgY29uZmlnLnBhdGgpO1xuXG4gICAgICBjYXNlICdsZWdhY3ktYXBwZW5kZXInOlxuICAgICAgICByZXR1cm4gbmV3IExlZ2FjeUFwcGVuZGVyKGNvbmZpZy5sZWdhY3lMb2dnaW5nQ29uZmlnKTtcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGFzc2VydE5ldmVyKGNvbmZpZyk7XG4gICAgfVxuICB9XG59XG4iXX0=