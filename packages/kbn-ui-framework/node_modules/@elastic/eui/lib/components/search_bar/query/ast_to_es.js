'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.astToES = exports._isFlagToQuery = exports._fieldValuesToQuery = exports._termValuesToQuery = undefined;

var _ast = require('./ast');

var _predicate = require('../../../services/predicate');

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _termValuesToQuery = exports._termValuesToQuery = function _termValuesToQuery(values, options) {
  var body = {
    query: values.join(' ')
  };
  if (body.query === '') {
    return;
  }
  if (options.defaultFields) {
    body.fields = options.defaultFields;
  }
  return {
    'simple_query_string': body
  };
};

var _fieldValuesToQuery = exports._fieldValuesToQuery = function _fieldValuesToQuery(field, values, operator) {
  var _values$reduce = values.reduce(function (split, value) {
    if (value.match(/\s/)) {
      split.phrases.push(value);
    } else {
      split.terms.push(value);
    }
    return split;
  }, { terms: [], phrases: [] }),
      terms = _values$reduce.terms,
      phrases = _values$reduce.phrases;

  var termsQuery = terms.length === 0 ? undefined : {
    match: _defineProperty({}, field, {
      query: terms.join(' '),
      operator: operator
    })
  };

  var phraseQueries = phrases.length === 0 ? undefined : phrases.map(function (phrase) {
    return {
      match_phrase: _defineProperty({}, field, phrase)
    };
  });

  var key = operator === 'and' ? 'must' : 'should';

  if (termsQuery && phraseQueries) {
    return {
      bool: _defineProperty({}, key, [termsQuery].concat(_toConsumableArray(phraseQueries)))
    };
  }
  if (termsQuery) {
    return termsQuery;
  }
  if (phraseQueries) {
    if (phraseQueries.length === 1) {
      return phraseQueries[0];
    }
    return {
      bool: _defineProperty({}, key, phraseQueries)
    };
  }
};

var _isFlagToQuery = exports._isFlagToQuery = function _isFlagToQuery(flag, on) {
  return {
    term: _defineProperty({}, flag, on)
  };
};

var collectTerms = function collectTerms(ast) {
  return ast.getTermClauses().reduce(function (values, clause) {
    if (_ast.AST.Match.isMustClause(clause)) {
      values.must.push(clause.value);
    } else {
      values.mustNot.push(clause.value);
    }
    return values;
  }, { must: [], mustNot: [] });
};

var collectFields = function collectFields(ast) {

  var fieldArray = function fieldArray(obj, field) {
    if (!obj[field]) {
      obj[field] = [];
    }
    return obj[field];
  };

  return ast.getFieldClauses().reduce(function (fields, clause) {
    if (_ast.AST.Match.isMustClause(clause)) {
      if ((0, _predicate.isArray)(clause.value)) {
        var _fieldArray;

        (_fieldArray = fieldArray(fields.must.or, clause.field)).push.apply(_fieldArray, _toConsumableArray(clause.value));
      } else {
        fieldArray(fields.must.and, clause.field).push(clause.value);
      }
    } else {
      if ((0, _predicate.isArray)(clause.value)) {
        var _fieldArray2;

        (_fieldArray2 = fieldArray(fields.mustNot.or, clause.field)).push.apply(_fieldArray2, _toConsumableArray(clause.value));
      } else {
        fieldArray(fields.mustNot.and, clause.field).push(clause.value);
      }
    }
    return fields;
  }, {
    must: { and: {}, or: {} },
    mustNot: { and: {}, or: {} }
  });
};

var astToES = exports.astToES = function astToES(ast) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};


  if (ast.clauses.length === 0) {
    return { match_all: {} };
  }

  var extraMustQueries = options.extraMustQueries || [];
  var extraMustNotQueries = options.extraMustNotQueries || [];
  var termValuesToQuery = options.termValuesToQuery || _termValuesToQuery;
  var fieldValuesToQuery = options.fieldValuesToQuery || _fieldValuesToQuery;
  var isFlagToQuery = options.isFlagToQuery || _isFlagToQuery;

  var terms = collectTerms(ast);
  var fields = collectFields(ast);

  var must = [];
  must.push.apply(must, _toConsumableArray(extraMustQueries));
  var termMustQuery = termValuesToQuery(terms.must, options);
  if (termMustQuery) {
    must.push(termMustQuery);
  }
  must.push.apply(must, _toConsumableArray(Object.keys(fields.must.and).map(function (field) {
    return fieldValuesToQuery(field, fields.must.and[field], 'and');
  })));
  must.push.apply(must, _toConsumableArray(Object.keys(fields.must.or).map(function (field) {
    return fieldValuesToQuery(field, fields.must.or[field], 'or');
  })));
  must.push.apply(must, _toConsumableArray(ast.getIsClauses().map(function (clause) {
    return isFlagToQuery(clause.flag, _ast.AST.Match.isMustClause(clause));
  })));

  var mustNot = [];
  mustNot.push.apply(mustNot, _toConsumableArray(extraMustNotQueries));
  var termMustNotQuery = termValuesToQuery(terms.mustNot, options);
  if (termMustNotQuery) {
    mustNot.push(termMustNotQuery);
  }
  mustNot.push.apply(mustNot, _toConsumableArray(Object.keys(fields.mustNot.and).map(function (field) {
    return fieldValuesToQuery(field, fields.mustNot.and[field], 'and');
  })));
  mustNot.push.apply(mustNot, _toConsumableArray(Object.keys(fields.mustNot.or).map(function (field) {
    return fieldValuesToQuery(field, fields.mustNot.or[field], 'or');
  })));

  var bool = {};
  if (must.length !== 0) {
    bool.must = must;
  }
  if (mustNot.length !== 0) {
    bool.must_not = mustNot;
  }
  return { bool: bool };
};