'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CollapsedRecordActions = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _context_menu = require('../context_menu');

var _popover = require('../popover');

var _button = require('../button');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var CollapsedRecordActions = exports.CollapsedRecordActions = function (_React$Component) {
  _inherits(CollapsedRecordActions, _React$Component);

  function CollapsedRecordActions(props) {
    _classCallCheck(this, CollapsedRecordActions);

    var _this = _possibleConstructorReturn(this, (CollapsedRecordActions.__proto__ || Object.getPrototypeOf(CollapsedRecordActions)).call(this, props));

    _this.togglePopover = function () {
      _this.setState(function (prevState) {
        return { popoverOpen: !prevState.popoverOpen };
      });
    };

    _this.closePopover = function () {
      _this.setState({ popoverOpen: false });
    };

    _this.onPopoverBlur = function () {
      // you must be asking... WTF? I know... but this timeout is
      // required to make sure we process the onBlur events after the initial
      // event cycle. Reference:
      // https://medium.com/@jessebeach/dealing-with-focus-and-blur-in-a-composite-widget-in-react-90d3c3b49a9b
      window.requestAnimationFrame(function () {
        if (!_this.popoverDiv.contains(document.activeElement)) {
          _this.props.onBlur();
        }
      });
    };

    _this.registerPopoverDiv = function (popoverDiv) {
      if (!_this.popoverDiv) {
        _this.popoverDiv = popoverDiv;
        _this.popoverDiv.addEventListener('focusout', _this.onPopoverBlur);
      }
    };

    _this.state = { popoverOpen: false };
    return _this;
  }

  _createClass(CollapsedRecordActions, [{
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this.popoverDiv) {
        this.popoverDiv.removeEventListener('focusout', this.onPopoverBlur);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          actions = _props.actions,
          recordId = _props.recordId,
          record = _props.record,
          model = _props.model,
          actionEnabled = _props.actionEnabled,
          onFocus = _props.onFocus;


      var isOpen = this.state.popoverOpen;

      var allDisabled = true;
      var items = actions.reduce(function (items, action, index) {
        var key = 'action_' + recordId + '_' + index;
        var available = action.available ? action.available(record, model) : true;
        if (!available) {
          return items;
        }
        var enabled = actionEnabled(action);
        allDisabled = allDisabled && !enabled;
        if (action.render) {
          var item = action.render(record, model, enabled);
          items.push(_react2.default.createElement(
            _context_menu.EuiContextMenuItem,
            { key: key },
            item
          ));
        } else {
          items.push(_react2.default.createElement(
            _context_menu.EuiContextMenuItem,
            {
              key: key,
              disabled: !enabled,
              icon: action.icon,
              onClick: action.onClick.bind(null, record, model)
            },
            action.name
          ));
        }
        return items;
      }, []);

      var popoverButton = _react2.default.createElement(_button.EuiButtonIcon, {
        'aria-label': 'actions',
        iconType: 'gear',
        color: 'text',
        isDisabled: allDisabled,
        onClick: this.togglePopover.bind(this),
        onFocus: onFocus
      });

      return _react2.default.createElement(
        _popover.EuiPopover,
        {
          popoverRef: this.registerPopoverDiv,
          id: recordId + '-actions',
          isOpen: isOpen,
          button: popoverButton,
          closePopover: this.closePopover,
          panelPaddingSize: 'none',
          anchorPosition: 'leftCenter'
        },
        _react2.default.createElement(_context_menu.EuiContextMenuPanel, { items: items })
      );
    }
  }]);

  return CollapsedRecordActions;
}(_react2.default.Component);

CollapsedRecordActions.__docgenInfo = [{
  'description': '',
  'displayName': 'CollapsedRecordActions',
  'methods': [{
    'name': 'togglePopover',
    'docblock': null,
    'modifiers': [],
    'params': [],
    'returns': null
  }, {
    'name': 'closePopover',
    'docblock': null,
    'modifiers': [],
    'params': [],
    'returns': null
  }, {
    'name': 'onPopoverBlur',
    'docblock': null,
    'modifiers': [],
    'params': [],
    'returns': null
  }, {
    'name': 'registerPopoverDiv',
    'docblock': null,
    'modifiers': [],
    'params': [{
      'name': 'popoverDiv',
      'type': null
    }],
    'returns': null
  }]
}];