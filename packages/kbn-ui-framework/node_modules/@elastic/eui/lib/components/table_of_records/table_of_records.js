'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EuiTableOfRecords = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _predicate = require('../../services/predicate');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _table = require('../table');

var _checkbox = require('../form/checkbox');

var _icon = require('../icon');

var _button_icon = require('../button/button_icon/button_icon');

var _services = require('../../services');

var _pagination_bar = require('./pagination_bar');

var _collapsed_record_actions = require('./collapsed_record_actions');

var _expanded_record_actions = require('./expanded_record_actions');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var dataTypesProfiles = {
  auto: {
    align: _services.LEFT_ALIGNMENT,
    render: function render(value) {
      return (0, _services.formatAuto)(value);
    }
  },
  string: {
    align: _services.LEFT_ALIGNMENT,
    render: function render(value) {
      return (0, _services.formatText)(value);
    }
  },
  number: {
    align: _services.RIGHT_ALIGNMENT,
    render: function render(value) {
      return (0, _services.formatNumber)(value);
    }
  },
  boolean: {
    align: _services.LEFT_ALIGNMENT,
    render: function render(value) {
      return (0, _services.formatBoolean)(value);
    }
  },
  date: {
    align: _services.LEFT_ALIGNMENT,
    render: function render(value) {
      return (0, _services.formatDate)(value);
    }
  }
};

var DATA_TYPES = Object.keys(dataTypesProfiles);

var DefaultRecordActionType = _propTypes2.default.shape({
  type: _propTypes2.default.oneOf(['icon', 'button']), // default is 'button'
  name: _propTypes2.default.string.isRequired,
  description: _propTypes2.default.string.isRequired,
  onClick: _propTypes2.default.func.isRequired, // (record, model) => void,
  available: _propTypes2.default.func, // (record, model) => boolean;
  enabled: _propTypes2.default.func, // (record, model) => boolean;
  icon: _propTypes2.default.oneOfType([// required when type is 'icon'
  _propTypes2.default.oneOf(_icon.ICON_TYPES), _propTypes2.default.func // (record, model) => oneOf(ICON_TYPES)
  ]),
  color: _propTypes2.default.oneOfType([_propTypes2.default.oneOf(_button_icon.COLORS), _propTypes2.default.func // (record, model) => oneOf(ICON_BUTTON_COLORS)
  ])
});

var CustomRecordActionType = _propTypes2.default.shape({
  render: _propTypes2.default.func.isRequired, // (record, model, enabled) => PropTypes.node;
  available: _propTypes2.default.func, // (record, model) => boolean;
  enabled: _propTypes2.default.func // (record, model) => boolean;
});

var SupportedRecordActionType = _propTypes2.default.oneOfType([DefaultRecordActionType, CustomRecordActionType]);

var FieldDataColumnType = _propTypes2.default.shape({
  field: _propTypes2.default.string.isRequired,
  name: _propTypes2.default.string.isRequired,
  description: _propTypes2.default.string,
  dataType: _propTypes2.default.oneOf(DATA_TYPES),
  width: _propTypes2.default.string,
  sortable: _propTypes2.default.bool,
  align: _propTypes2.default.oneOf([_services.LEFT_ALIGNMENT, _services.RIGHT_ALIGNMENT]),
  truncateText: _propTypes2.default.bool,
  render: _propTypes2.default.func // ((value, record) => PropTypes.node (also see [services/value_renderer] for basic implementations)
});

var ComputedColumnType = _propTypes2.default.shape({
  render: _propTypes2.default.func.isRequired, // (record) => PropTypes.node
  name: _propTypes2.default.string,
  description: _propTypes2.default.string,
  width: _propTypes2.default.string,
  truncateText: _propTypes2.default.bool
});

var ActionsColumnType = _propTypes2.default.shape({
  actions: _propTypes2.default.arrayOf(SupportedRecordActionType).isRequired,
  name: _propTypes2.default.string,
  description: _propTypes2.default.string,
  width: _propTypes2.default.string
});

var ColumnType = _propTypes2.default.oneOfType([FieldDataColumnType, ComputedColumnType, ActionsColumnType]);

var PaginationType = _propTypes2.default.shape({
  pageSizeOptions: _propTypes2.default.arrayOf(_propTypes2.default.number)
});

var SelectionType = _propTypes2.default.shape({
  onSelectionChanged: _propTypes2.default.func, // (selection: Record[]) => void;,
  selectable: _propTypes2.default.func // (record, model) => boolean;
});

var RecordIdType = _propTypes2.default.oneOfType([_propTypes2.default.string, // the name of the record id property
_propTypes2.default.func // (record) => string
]);

var ConfigType = _propTypes2.default.shape({
  // when string, it's treated as the id property name
  // when function it needs to have the following signature: (record) => string
  recordId: RecordIdType.isRequired,
  columns: _propTypes2.default.arrayOf(ColumnType).isRequired,
  onDataCriteriaChange: _propTypes2.default.func,
  selection: SelectionType,
  pagination: PaginationType
});

var ModelType = _propTypes2.default.shape({
  data: _propTypes2.default.shape({
    records: _propTypes2.default.array.isRequired,
    totalRecordCount: _propTypes2.default.number
  }).isRequired,
  criteria: _propTypes2.default.shape({
    page: _propTypes2.default.shape({
      index: _propTypes2.default.number.isRequired,
      size: _propTypes2.default.number.isRequired
    }),
    sort: _services.PropertySortType
  })
});

var EuiTableOfRecordsPropTypes = {
  config: ConfigType.isRequired,
  model: ModelType.isRequired,
  className: _propTypes2.default.string
};

var EuiTableOfRecords = exports.EuiTableOfRecords = function (_React$Component) {
  _inherits(EuiTableOfRecords, _React$Component);

  function EuiTableOfRecords(props) {
    _classCallCheck(this, EuiTableOfRecords);

    var _this = _possibleConstructorReturn(this, (EuiTableOfRecords.__proto__ || Object.getPrototypeOf(EuiTableOfRecords)).call(this, props));

    _this.state = {
      hoverRecordId: null,
      selection: []
    };
    return _this;
  }

  _createClass(EuiTableOfRecords, [{
    key: 'recordId',
    value: function recordId(record) {
      var id = this.props.config.recordId;
      return (0, _predicate.isString)(id) ? record[id] : id(record);
    }
  }, {
    key: 'changeSelection',
    value: function changeSelection(selection) {
      if (!this.props.config.selection) {
        return;
      }
      this.setState({ selection: selection });
      if (this.props.config.selection.onSelectionChanged) {
        this.props.config.selection.onSelectionChanged(selection);
      }
    }
  }, {
    key: 'clearSelection',
    value: function clearSelection() {
      this.changeSelection([]);
    }
  }, {
    key: 'onPageSizeChange',
    value: function onPageSizeChange(size) {
      this.clearSelection();
      var criteria = _extends({}, this.props.model.criteria, {
        page: _extends({}, this.props.model.criteria.page, {
          index: 0, // when page size changes, we take the user back to the first page
          size: size
        })
      });
      this.props.config.onDataCriteriaChange(criteria);
    }
  }, {
    key: 'onPageChange',
    value: function onPageChange(index) {
      this.clearSelection();
      var criteria = _extends({}, this.props.model.criteria, {
        page: _extends({}, this.props.model.criteria.page, {
          index: index
        })
      });
      this.props.config.onDataCriteriaChange(criteria);
    }
  }, {
    key: 'onColumnSortChange',
    value: function onColumnSortChange(column) {
      this.clearSelection();
      var currentCriteria = this.props.model.criteria;
      var direction = _services.SortDirection.ASC;
      if (currentCriteria && currentCriteria.sort && currentCriteria.sort.field === column.field) {
        direction = _services.SortDirection.reverse(currentCriteria.sort.direction);
      }
      var criteria = _extends({}, currentCriteria, {
        // resetting the page if the criteria has one
        page: !currentCriteria.page ? undefined : {
          index: 0,
          size: currentCriteria.page.size
        },
        sort: {
          field: column.field,
          direction: direction
        }
      });
      this.props.config.onDataCriteriaChange(criteria);
    }
  }, {
    key: 'onRecordHover',
    value: function onRecordHover(recordId) {
      this.setState({ hoverRecordId: recordId });
    }
  }, {
    key: 'clearRecordHover',
    value: function clearRecordHover() {
      this.setState({ hoverRecordId: null });
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      // Don't call changeSelection here or else we can get into an infinite loop:
      // changeSelection calls props.onSelectionChanged on owner ->
      // owner sets its state -> we receive new props, calling componentWillReceiveProps -> ad infinitum
      if (!this.props.config.selection) {
        return;
      }

      this.setState(function (prevState) {
        // Remove any records which don't exist any more.
        var newSelection = prevState.selection.filter(function (selectedRecord) {
          return nextProps.model.data.records.findIndex(function (record) {
            return record.id === selectedRecord.id;
          }) !== -1;
        });

        return {
          selection: newSelection
        };
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          className = _props.className,
          config = _props.config,
          model = _props.model,
          rest = _objectWithoutProperties(_props, ['className', 'config', 'model']);

      var classes = (0, _classnames2.default)('euiRecordsTable', className);

      var table = this.renderTable(config, model);
      var paginationBar = this.renderPaginationBar(config, model);

      return _react2.default.createElement(
        'div',
        _extends({ className: classes }, rest),
        table,
        paginationBar
      );
    }
  }, {
    key: 'renderTable',
    value: function renderTable(config, model) {
      var head = this.renderTableHead(config, model);
      var body = this.renderTableBody(config, model);
      return _react2.default.createElement(
        _table.EuiTable,
        null,
        head,
        body
      );
    }
  }, {
    key: 'renderTableHead',
    value: function renderTableHead(config, model) {
      var _this2 = this;

      var headers = [];

      if (config.selection) {
        var selectableRecords = model.data.records.filter(function (record) {
          return !config.selection.selectable || config.selection.selectable(record, model);
        });

        var checked = this.state.selection && selectableRecords.length !== 0 && this.state.selection.length === selectableRecords.length;

        var onChange = function onChange(event) {
          if (event.target.checked) {
            _this2.changeSelection(selectableRecords);
          } else {
            _this2.changeSelection([]);
          }
        };

        headers.push(_react2.default.createElement(
          _table.EuiTableHeaderCellCheckbox,
          { key: '_selection_column_h', width: '24px' },
          _react2.default.createElement(_checkbox.EuiCheckbox, {
            id: '_selection_column-checkbox',
            type: 'inList',
            checked: checked,
            onChange: onChange,
            'data-test-subj': 'checkboxSelectAll'
          })
        ));
      }

      config.columns.forEach(function (column, index) {
        // actions column
        if (column.actions) {
          headers.push(_react2.default.createElement(
            _table.EuiTableHeaderCell,
            {
              key: '_actions_h_' + index,
              align: 'right',
              width: column.width
            },
            column.name
          ));
          return;
        }

        var align = _this2.resolveColumnAlign(column);

        // computed column
        if (!column.field) {
          headers.push(_react2.default.createElement(
            _table.EuiTableHeaderCell,
            {
              key: '_computed_column_h_' + index,
              align: align,
              width: column.width
            },
            column.name
          ));
          return;
        }

        // field data column
        var sortDirection = _this2.resolveColumnSortDirection(column, config, model);
        var onSort = _this2.resolveColumnOnSort(column, config);
        var isSorted = !!sortDirection;
        var isSortAscending = _services.SortDirection.isAsc(sortDirection);
        headers.push(_react2.default.createElement(
          _table.EuiTableHeaderCell,
          {
            key: '_data_h_' + column.field + '_' + index,
            align: align,
            isSorted: isSorted,
            isSortAscending: isSortAscending,
            onSort: onSort,
            width: column.width
          },
          column.name
        ));
      });

      return _react2.default.createElement(
        _table.EuiTableHeader,
        null,
        headers
      );
    }
  }, {
    key: 'resolveColumnAlign',
    value: function resolveColumnAlign(column) {
      if (column.align) {
        return column.align;
      }
      var dataType = column.dataType || 'auto';
      var profile = dataTypesProfiles[dataType];
      if (!profile) {
        throw new Error('Unknown dataType [' + dataType + ']. The supported data types are [' + DATA_TYPES.join(', ') + ']');
      }
      return profile.align;
    }
  }, {
    key: 'resolveColumnSortDirection',
    value: function resolveColumnSortDirection(column, config, model) {
      var modelCriteriaSort = model.criteria ? model.criteria.sort : undefined;
      if (column.sortable && modelCriteriaSort && modelCriteriaSort.field === column.field) {
        return modelCriteriaSort.direction;
      }
    }
  }, {
    key: 'resolveColumnOnSort',
    value: function resolveColumnOnSort(column, config) {
      var _this3 = this;

      if (column.sortable) {
        if (!config.onDataCriteriaChange) {
          throw new Error('The table of records is configured to be sortable on column [' + column.field + '] but\n          [onDataCriteriaChange] is not configured. This callback must be implemented to handle to handle the\n          sort requests');
        }
        return function () {
          return _this3.onColumnSortChange(column);
        };
      }
    }
  }, {
    key: 'renderTableBody',
    value: function renderTableBody(config, model) {
      var _this4 = this;

      var rows = model.data.records.map(function (record, index) {
        return _this4.renderTableRecordRow(record, config, model, index);
      });
      return _react2.default.createElement(
        _table.EuiTableBody,
        null,
        rows
      );
    }
  }, {
    key: 'renderTableRecordRow',
    value: function renderTableRecordRow(record, config, model, rowIndex) {
      var _this5 = this;

      var recordId = this.recordId(record);
      var selected = this.state.selection && !!this.state.selection.find(function (selectedRecord) {
        return _this5.recordId(selectedRecord) === recordId;
      });

      var cells = [];

      if (config.selection) {
        cells.push(this.renderTableRecordSelectionCell(recordId, record, config, model, selected));
      }

      config.columns.forEach(function (column, columnIndex) {
        if (column.actions) {
          cells.push(_this5.renderTableRecordActionsCell(recordId, record, column.actions, config, model, columnIndex));
        } else if (column.field) {
          cells.push(_this5.renderTableRecordFieldDataCell(recordId, record, column, columnIndex));
        } else {
          cells.push(_this5.renderTableRecordComputedCell(recordId, record, column, model, columnIndex));
        }
      });

      var onMouseOver = function onMouseOver() {
        return _this5.onRecordHover(recordId);
      };
      var onMouseOut = function onMouseOut() {
        return _this5.clearRecordHover();
      };
      return _react2.default.createElement(
        _table.EuiTableRow,
        {
          key: 'row_' + recordId + '_' + rowIndex,
          isSelected: selected,
          onMouseOver: onMouseOver,
          onMouseOut: onMouseOut
        },
        cells
      );
    }
  }, {
    key: 'renderTableRecordFieldDataCell',
    value: function renderTableRecordFieldDataCell(recordId, record, column, index) {
      var key = '_data_column_' + column.field + '_' + recordId + '_' + index;
      var align = this.resolveColumnAlign(column);
      var textOnly = !column.render;
      var value = _lodash2.default.get(record, column.field);
      var contentRenderer = this.resolveContentRenderer(column);
      var content = contentRenderer(value, record);
      return _react2.default.createElement(
        _table.EuiTableRowCell,
        { key: key, align: align, truncateText: column.truncateText, textOnly: textOnly },
        content
      );
    }
  }, {
    key: 'renderTableRecordComputedCell',
    value: function renderTableRecordComputedCell(recordId, record, column, model, index) {
      var key = '_computed_column_' + recordId + '_' + index;
      var align = this.resolveColumnAlign(column);
      var contentRenderer = this.resolveContentRenderer(column);
      var content = contentRenderer(record, model);
      return _react2.default.createElement(
        _table.EuiTableRowCell,
        { key: key, align: align, truncateText: column.truncateText, textOnly: false },
        content
      );
    }
  }, {
    key: 'resolveContentRenderer',
    value: function resolveContentRenderer(column) {
      if (column.render) {
        return column.render;
      }
      var dataType = column.dataType || 'auto';
      var profile = dataTypesProfiles[dataType];
      if (!profile) {
        throw new Error('Unknown dataType [' + dataType + ']. The supported data types are [' + DATA_TYPES.join(', ') + ']');
      }
      return profile.render;
    }
  }, {
    key: 'renderTableRecordSelectionCell',
    value: function renderTableRecordSelectionCell(recordId, record, config, model, selected) {
      var _this6 = this;

      var key = '_selection_column_' + recordId;
      var checked = selected;
      var disabled = config.selection.selectable && !config.selection.selectable(record);
      var title = config.selection.selectableMessage && config.selection.selectableMessage(record);
      var onChange = function onChange(event) {
        if (event.target.checked) {
          _this6.changeSelection([].concat(_toConsumableArray(_this6.state.selection), [record]));
        } else {
          _this6.changeSelection(_this6.state.selection.reduce(function (selection, selectedRecord) {
            if (_this6.recordId(selectedRecord) !== recordId) {
              selection.push(selectedRecord);
            }
            return selection;
          }, []));
        }
      };

      return _react2.default.createElement(
        _table.EuiTableRowCellCheckbox,
        { key: key },
        _react2.default.createElement(_checkbox.EuiCheckbox, {
          id: key + '-checkbox',
          type: 'inList',
          disabled: disabled,
          checked: checked,
          onChange: onChange,
          title: title,
          'data-test-subj': 'checkboxSelectRow-' + recordId
        })
      );
    }
  }, {
    key: 'renderTableRecordActionsCell',
    value: function renderTableRecordActionsCell(recordId, record, actions, config, model, columnIndex) {
      var _this7 = this;

      var visible = this.state.hoverRecordId === recordId;

      var actionEnabled = function actionEnabled(action) {
        return _this7.state.selection.length === 0 && (!action.enabled || action.enabled(record, model));
      };

      var actualActions = actions;
      if (actions.length > 1) {

        // if we have more than 1 action, we don't show them all in the cell, instead we
        // put them all in a popover tool. This effectively means we can only have a maximum
        // of one tool per row (it's either and normal action, or it's a popover that shows multiple actions)
        //
        // here we create a single custom action that triggers the popover with all the configured actions

        actualActions = [{
          name: 'Actions',
          render: function render(record, model) {
            return _react2.default.createElement(_collapsed_record_actions.CollapsedRecordActions, {
              actions: actions,
              visible: visible,
              recordId: recordId,
              record: record,
              model: model,
              actionEnabled: actionEnabled
            });
          }
        }];
      }

      var tools = _react2.default.createElement(_expanded_record_actions.ExpandedRecordActions, {
        actions: actualActions,
        visible: visible,
        recordId: recordId,
        record: record,
        model: model,
        actionEnabled: actionEnabled
      });

      var key = 'record_actions_' + recordId + '_' + columnIndex;
      return _react2.default.createElement(
        _table.EuiTableRowCell,
        { key: key, align: 'right', textOnly: false },
        tools
      );
    }
  }, {
    key: 'renderPaginationBar',
    value: function renderPaginationBar(config, model) {
      if (config.pagination) {
        return _react2.default.createElement(_pagination_bar.PaginationBar, {
          config: config,
          model: model,
          onPageSizeChange: this.onPageSizeChange.bind(this),
          onPageChange: this.onPageChange.bind(this)
        });
      }
    }
  }]);

  return EuiTableOfRecords;
}(_react2.default.Component);

EuiTableOfRecords.propTypes = EuiTableOfRecordsPropTypes;
EuiTableOfRecords.__docgenInfo = [{
  'description': '',
  'displayName': 'EuiTableOfRecords',
  'methods': [{
    'name': 'recordId',
    'docblock': null,
    'modifiers': [],
    'params': [{
      'name': 'record',
      'type': null
    }],
    'returns': null
  }, {
    'name': 'changeSelection',
    'docblock': null,
    'modifiers': [],
    'params': [{
      'name': 'selection',
      'type': null
    }],
    'returns': null
  }, {
    'name': 'clearSelection',
    'docblock': null,
    'modifiers': [],
    'params': [],
    'returns': null
  }, {
    'name': 'onPageSizeChange',
    'docblock': null,
    'modifiers': [],
    'params': [{
      'name': 'size',
      'type': null
    }],
    'returns': null
  }, {
    'name': 'onPageChange',
    'docblock': null,
    'modifiers': [],
    'params': [{
      'name': 'index',
      'type': null
    }],
    'returns': null
  }, {
    'name': 'onColumnSortChange',
    'docblock': null,
    'modifiers': [],
    'params': [{
      'name': 'column',
      'type': null
    }],
    'returns': null
  }, {
    'name': 'onRecordHover',
    'docblock': null,
    'modifiers': [],
    'params': [{
      'name': 'recordId',
      'type': null
    }],
    'returns': null
  }, {
    'name': 'clearRecordHover',
    'docblock': null,
    'modifiers': [],
    'params': [],
    'returns': null
  }, {
    'name': 'renderTable',
    'docblock': null,
    'modifiers': [],
    'params': [{
      'name': 'config',
      'type': null
    }, {
      'name': 'model',
      'type': null
    }],
    'returns': null
  }, {
    'name': 'renderTableHead',
    'docblock': null,
    'modifiers': [],
    'params': [{
      'name': 'config',
      'type': null
    }, {
      'name': 'model',
      'type': null
    }],
    'returns': null
  }, {
    'name': 'resolveColumnAlign',
    'docblock': null,
    'modifiers': [],
    'params': [{
      'name': 'column',
      'type': null
    }],
    'returns': null
  }, {
    'name': 'resolveColumnSortDirection',
    'docblock': null,
    'modifiers': [],
    'params': [{
      'name': 'column',
      'type': null
    }, {
      'name': 'config',
      'type': null
    }, {
      'name': 'model',
      'type': null
    }],
    'returns': null
  }, {
    'name': 'resolveColumnOnSort',
    'docblock': null,
    'modifiers': [],
    'params': [{
      'name': 'column',
      'type': null
    }, {
      'name': 'config',
      'type': null
    }],
    'returns': null
  }, {
    'name': 'renderTableBody',
    'docblock': null,
    'modifiers': [],
    'params': [{
      'name': 'config',
      'type': null
    }, {
      'name': 'model',
      'type': null
    }],
    'returns': null
  }, {
    'name': 'renderTableRecordRow',
    'docblock': null,
    'modifiers': [],
    'params': [{
      'name': 'record',
      'type': null
    }, {
      'name': 'config',
      'type': null
    }, {
      'name': 'model',
      'type': null
    }, {
      'name': 'rowIndex',
      'type': null
    }],
    'returns': null
  }, {
    'name': 'renderTableRecordFieldDataCell',
    'docblock': null,
    'modifiers': [],
    'params': [{
      'name': 'recordId',
      'type': null
    }, {
      'name': 'record',
      'type': null
    }, {
      'name': 'column',
      'type': null
    }, {
      'name': 'index',
      'type': null
    }],
    'returns': null
  }, {
    'name': 'renderTableRecordComputedCell',
    'docblock': null,
    'modifiers': [],
    'params': [{
      'name': 'recordId',
      'type': null
    }, {
      'name': 'record',
      'type': null
    }, {
      'name': 'column',
      'type': null
    }, {
      'name': 'model',
      'type': null
    }, {
      'name': 'index',
      'type': null
    }],
    'returns': null
  }, {
    'name': 'resolveContentRenderer',
    'docblock': null,
    'modifiers': [],
    'params': [{
      'name': 'column',
      'type': null
    }],
    'returns': null
  }, {
    'name': 'renderTableRecordSelectionCell',
    'docblock': null,
    'modifiers': [],
    'params': [{
      'name': 'recordId',
      'type': null
    }, {
      'name': 'record',
      'type': null
    }, {
      'name': 'config',
      'type': null
    }, {
      'name': 'model',
      'type': null
    }, {
      'name': 'selected',
      'type': null
    }],
    'returns': null
  }, {
    'name': 'renderTableRecordActionsCell',
    'docblock': null,
    'modifiers': [],
    'params': [{
      'name': 'recordId',
      'type': null
    }, {
      'name': 'record',
      'type': null
    }, {
      'name': 'actions',
      'type': null
    }, {
      'name': 'config',
      'type': null
    }, {
      'name': 'model',
      'type': null
    }, {
      'name': 'columnIndex',
      'type': null
    }],
    'returns': null
  }, {
    'name': 'renderPaginationBar',
    'docblock': null,
    'modifiers': [],
    'params': [{
      'name': 'config',
      'type': null
    }, {
      'name': 'model',
      'type': null
    }],
    'returns': null
  }],
  'props': {
    'config': {
      'type': {
        'name': 'custom',
        'raw': 'ConfigType.isRequired'
      },
      'required': false,
      'description': ''
    },
    'model': {
      'type': {
        'name': 'custom',
        'raw': 'ModelType.isRequired'
      },
      'required': false,
      'description': ''
    },
    'className': {
      'type': {
        'name': 'string'
      },
      'required': false,
      'description': ''
    }
  }
}];