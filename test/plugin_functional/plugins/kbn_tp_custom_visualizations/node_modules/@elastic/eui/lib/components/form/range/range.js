"use strict";

require("core-js/modules/es6.array.find");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EuiRange = exports.LEVEL_COLORS = void 0;

require("core-js/modules/es7.symbol.async-iterator");

require("core-js/modules/es6.symbol");

require("core-js/modules/es6.object.assign");

require("core-js/modules/web.dom.iterable");

require("core-js/modules/es6.array.iterator");

require("core-js/modules/es6.object.keys");

require("core-js/modules/es6.object.set-prototype-of");

require("core-js/modules/es6.number.constructor");

require("core-js/modules/es6.function.name");

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _lodash = require("lodash");

var _field_number = require("../field_number");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var LEVEL_COLORS = ['primary', 'success', 'warning', 'danger'];
exports.LEVEL_COLORS = LEVEL_COLORS;

var EuiRange =
/*#__PURE__*/
function (_Component) {
  _inherits(EuiRange, _Component);

  function EuiRange(props) {
    var _this;

    _classCallCheck(this, EuiRange);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(EuiRange).call(this, props));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "renderLabel", function (side) {
      var showLabels = _this.props.showLabels;

      if (!showLabels) {
        return;
      }

      return _react.default.createElement("label", {
        className: "euiRange__".concat(side, "Label")
      }, _this.props[side]);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "renderTicks", function (tickObject) {
      var _this$props = _this.props,
          disabled = _this$props.disabled,
          onChange = _this$props.onChange,
          showTicks = _this$props.showTicks,
          ticks = _this$props.ticks,
          value = _this$props.value,
          max = _this$props.max;

      if (!showTicks) {
        return;
      } // Align with item labels across the range by adding
      // left and right negative margins that is half of the tick marks


      var ticksStyle = !!ticks ? undefined : {
        margin: "0 ".concat(tickObject.percentageWidth / -2, "%"),
        left: 0,
        right: 0
      };
      return _react.default.createElement("div", {
        className: "euiRange__ticks",
        style: ticksStyle
      }, tickObject.sequence.map(function (tickValue) {
        var tickStyle = {};
        var customTick;

        if (ticks) {
          customTick = (0, _lodash.find)(ticks, function (o) {
            return o.value === tickValue;
          });

          if (customTick == null) {
            return;
          } else {
            tickStyle.left = "".concat(customTick.value / max * 100, "%");
          }
        } else {
          tickStyle.width = "".concat(tickObject.percentageWidth, "%");
        }

        var tickClasses = (0, _classnames.default)('euiRange__tick', {
          'euiRange__tick--selected': value === tickValue,
          'euiRange__tick-isCustom': customTick
        });
        return _react.default.createElement("button", {
          type: "button",
          className: tickClasses,
          key: tickValue,
          value: tickValue,
          disabled: disabled,
          onClick: onChange,
          style: tickStyle // Don't allow tabbing and just let the range to do the work for non-sighted users
          ,
          tabIndex: "-1"
        }, customTick ? customTick.label : tickValue);
      }));
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "renderRange", function () {
      var _this$props2 = _this.props,
          showRange = _this$props2.showRange,
          value = _this$props2.value,
          max = _this$props2.max,
          min = _this$props2.min;

      if (!showRange) {
        return;
      } // Calculate the width the range based on value


      var rangeWidth = (value - min) / (max - min);
      var rangeWidthStyle = {
        width: "".concat(rangeWidth * 100, "%")
      };
      return _react.default.createElement("div", {
        className: "euiRange__range"
      }, _react.default.createElement("div", {
        className: "euiRange__range__progress",
        style: rangeWidthStyle
      }));
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "renderValue", function () {
      var _this$props3 = _this.props,
          showValue = _this$props3.showValue,
          value = _this$props3.value,
          valueAppend = _this$props3.valueAppend,
          max = _this$props3.max,
          min = _this$props3.min,
          name = _this$props3.name;

      if (!showValue) {
        return;
      } // Calculate the left position based on value


      var decimal = (value - min) / (max - min); // Must be between 0-100%

      var valuePosition = decimal <= 1 ? decimal : 1;
      valuePosition = valuePosition >= 0 ? valuePosition : 0;
      var valuePositionSide;

      if (valuePosition > .5) {
        valuePositionSide = 'left';
      } else {
        valuePositionSide = 'right';
      }

      var valuePositionStyle = {
        left: "".concat(valuePosition * 100, "%")
      }; // Change left/right position based on value (half way point)

      var valueClasses = (0, _classnames.default)('euiRange__value', "euiRange__value--".concat(valuePositionSide));
      return _react.default.createElement("div", {
        className: "euiRange__valueWrapper"
      }, _react.default.createElement("output", {
        className: valueClasses,
        htmlFor: name,
        style: valuePositionStyle
      }, value, valueAppend));
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "renderLevels", function () {
      var _this$props4 = _this.props,
          levels = _this$props4.levels,
          max = _this$props4.max,
          min = _this$props4.min;

      if (levels.length < 1) {
        return;
      }

      return _react.default.createElement("div", {
        className: "euiRange__levels"
      }, levels.map(function (level, index) {
        var range = level.max - level.min;
        var width = range / (max - min) * 100;
        return _react.default.createElement("span", {
          key: index,
          style: {
            width: "".concat(width, "%")
          },
          className: "euiRange__level--".concat(level.color)
        });
      }));
    });

    return _this;
  }

  _createClass(EuiRange, [{
    key: "render",
    value: function render() {
      var _this$props5 = this.props,
          className = _this$props5.className,
          compressed = _this$props5.compressed,
          disabled = _this$props5.disabled,
          fullWidth = _this$props5.fullWidth,
          id = _this$props5.id,
          max = _this$props5.max,
          min = _this$props5.min,
          name = _this$props5.name,
          step = _this$props5.step,
          showLabels = _this$props5.showLabels,
          showInput = _this$props5.showInput,
          showTicks = _this$props5.showTicks,
          tickInterval = _this$props5.tickInterval,
          ticks = _this$props5.ticks,
          levels = _this$props5.levels,
          showRange = _this$props5.showRange,
          showValue = _this$props5.showValue,
          valueAppend = _this$props5.valueAppend,
          onChange = _this$props5.onChange,
          value = _this$props5.value,
          style = _this$props5.style,
          rest = _objectWithoutProperties(_this$props5, ["className", "compressed", "disabled", "fullWidth", "id", "max", "min", "name", "step", "showLabels", "showInput", "showTicks", "tickInterval", "ticks", "levels", "showRange", "showValue", "valueAppend", "onChange", "value", "style"]);

      var classes = (0, _classnames.default)('euiRange', {
        'euiRange--fullWidth': fullWidth,
        'euiRange--compressed': compressed
      }, className);
      var wrapperClasses = (0, _classnames.default)('euiRange__wrapper', {
        'euiRange__wrapper--fullWidth': fullWidth,
        'euiRange__wrapper--compressed': compressed,
        'euiRange__wrapper--disabled': disabled,
        'euiRange__wrapper--hasLabels': showLabels,
        'euiRange__wrapper--hasLevels': levels.length,
        'euiRange__wrapper--hasRange': showRange,
        'euiRange__wrapper--hasTicks': showTicks,
        'euiRange__wrapper--hasValue': showValue
      });
      var sliderTabIndex;
      var extraInputNode;

      if (showInput) {
        // Chrome will properly size the input based on the max value, but FF & IE does not.
        // Calculate the max-width of the input based on number of characters in min or max unit, whichever is greater.
        // Add 2 to accomodate for input stepper
        var maxWidthStyle = {
          maxWidth: "".concat(Math.max(String(min).length, String(max).length) + 2, "em")
        }; // Make this input the main control by disabling screen reader access to slider control

        sliderTabIndex = '-1';
        extraInputNode = _react.default.createElement(_field_number.EuiFieldNumber, _extends({
          name: name,
          className: "euiRange__extraInput",
          min: min,
          max: max,
          step: step,
          value: Number(value),
          disabled: disabled,
          compressed: compressed,
          onChange: onChange,
          style: maxWidthStyle
        }, rest));
      }

      var tickObject;
      var inputWrapperStyle = {};

      if (showTicks) {
        tickObject = calculateTicksObject(min, max, tickInterval || step || 1); // Calculate if any extra margin should be added to the inputWrapper
        // because of longer tick labels on the ends

        var lengthOfMinLabel = String(tickObject.sequence[0]).length;
        var lenghtOfMaxLabel = String(tickObject.sequence[tickObject.sequence.length - 1]).length;
        var isLastTickTheMax = tickObject.sequence[tickObject.sequence.length - 1] === max;

        if (lengthOfMinLabel > 2) {
          inputWrapperStyle.marginLeft = "".concat(lengthOfMinLabel / 5, "em");
        }

        if (isLastTickTheMax && lenghtOfMaxLabel > 2) {
          inputWrapperStyle.marginRight = "".concat(lenghtOfMaxLabel / 5, "em");
        }
      }

      return _react.default.createElement("div", {
        className: wrapperClasses
      }, this.renderLabel('min'), _react.default.createElement("div", {
        className: "euiRange__inputWrapper",
        style: inputWrapperStyle
      }, _react.default.createElement("input", _extends({
        type: "range",
        id: id,
        name: name,
        className: classes,
        min: min,
        max: max,
        step: step,
        value: value,
        disabled: disabled,
        onChange: onChange,
        style: style,
        tabIndex: sliderTabIndex
      }, rest)), this.renderValue(), this.renderRange(), this.renderLevels(), this.renderTicks(tickObject)), this.renderLabel('max'), extraInputNode);
    }
  }]);

  return EuiRange;
}(_react.Component);

exports.EuiRange = EuiRange;

function calculateTicksObject(min, max, interval) {
  // Calculate the width of each tick mark
  var tickWidthDecimal = interval / (max - min + interval);
  var tickWidthPercentage = tickWidthDecimal * 100; // Loop from min to max, creating ticks at each interval
  // (adds a very small number to the max since `range` is not inclusive of the max value)

  var toBeInclusive = .000000001;
  var sequence = (0, _lodash.range)(min, max + toBeInclusive, interval);
  return {
    decimalWidth: tickWidthDecimal,
    percentageWidth: tickWidthPercentage,
    sequence: sequence
  };
}

EuiRange.propTypes = {
  name: _propTypes.default.string,
  id: _propTypes.default.string,
  min: _propTypes.default.number.isRequired,
  max: _propTypes.default.number.isRequired,
  step: _propTypes.default.number,
  value: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
  fullWidth: _propTypes.default.bool,
  compressed: _propTypes.default.bool,

  /**
   * Shows static min/max labels on the sides of the range slider
   */
  showLabels: _propTypes.default.bool,

  /**
   * Displays an extra input control for direct manipulation
   */
  showInput: _propTypes.default.bool,

  /**
   * Shows clickable tick marks and labels at the given interval (`step`/`tickInterval`)
   */
  showTicks: _propTypes.default.bool,

  /**
   * Modifies the number of tick marks and at what interval
   */
  tickInterval: _propTypes.default.number,

  /**
   * Specified ticks at specified values
   */
  ticks: _propTypes.default.arrayOf(_propTypes.default.shape({
    value: _propTypes.default.number.isRequired,
    label: _propTypes.default.node.isRequired
  })),
  onChange: _propTypes.default.func,

  /**
   * Create colored indicators for certain intervals
   */
  levels: _propTypes.default.arrayOf(_propTypes.default.shape({
    min: _propTypes.default.number,
    max: _propTypes.default.number,
    color: _propTypes.default.oneOf(LEVEL_COLORS)
  })),

  /**
   * Shows a thick line from min to value
   */
  showRange: _propTypes.default.bool,

  /**
   * Shows a tooltip styled value
   */
  showValue: _propTypes.default.bool,

  /**
   * Shows a tooltip styled value
   */
  valueAppend: _propTypes.default.node
};
EuiRange.defaultProps = {
  min: 1,
  max: 100,
  fullWidth: false,
  compressed: false,
  showLabels: false,
  showInput: false,
  showTicks: false,
  showValue: false,
  levels: []
};
EuiRange.__docgenInfo = {
  "description": "",
  "methods": [{
    "name": "renderLabel",
    "docblock": null,
    "modifiers": [],
    "params": [{
      "name": "side",
      "type": null
    }],
    "returns": null
  }, {
    "name": "renderTicks",
    "docblock": null,
    "modifiers": [],
    "params": [{
      "name": "tickObject",
      "type": null
    }],
    "returns": null
  }, {
    "name": "renderRange",
    "docblock": null,
    "modifiers": [],
    "params": [],
    "returns": null
  }, {
    "name": "renderValue",
    "docblock": null,
    "modifiers": [],
    "params": [],
    "returns": null
  }, {
    "name": "renderLevels",
    "docblock": null,
    "modifiers": [],
    "params": [],
    "returns": null
  }],
  "displayName": "EuiRange",
  "props": {
    "min": {
      "defaultValue": {
        "value": "1",
        "computed": false
      },
      "type": {
        "name": "number"
      },
      "required": false,
      "description": ""
    },
    "max": {
      "defaultValue": {
        "value": "100",
        "computed": false
      },
      "type": {
        "name": "number"
      },
      "required": false,
      "description": ""
    },
    "fullWidth": {
      "defaultValue": {
        "value": "false",
        "computed": false
      },
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": ""
    },
    "compressed": {
      "defaultValue": {
        "value": "false",
        "computed": false
      },
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": ""
    },
    "showLabels": {
      "defaultValue": {
        "value": "false",
        "computed": false
      },
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "Shows static min/max labels on the sides of the range slider"
    },
    "showInput": {
      "defaultValue": {
        "value": "false",
        "computed": false
      },
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "Displays an extra input control for direct manipulation"
    },
    "showTicks": {
      "defaultValue": {
        "value": "false",
        "computed": false
      },
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "Shows clickable tick marks and labels at the given interval (`step`/`tickInterval`)"
    },
    "showValue": {
      "defaultValue": {
        "value": "false",
        "computed": false
      },
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "Shows a tooltip styled value"
    },
    "levels": {
      "defaultValue": {
        "value": "[]",
        "computed": false
      },
      "type": {
        "name": "arrayOf",
        "value": {
          "name": "shape",
          "value": {
            "min": {
              "name": "number",
              "required": false
            },
            "max": {
              "name": "number",
              "required": false
            },
            "color": {
              "name": "enum",
              "value": [{
                "value": "'primary'",
                "computed": false
              }, {
                "value": "'success'",
                "computed": false
              }, {
                "value": "'warning'",
                "computed": false
              }, {
                "value": "'danger'",
                "computed": false
              }],
              "required": false
            }
          }
        }
      },
      "required": false,
      "description": "Create colored indicators for certain intervals"
    },
    "name": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": ""
    },
    "id": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": ""
    },
    "step": {
      "type": {
        "name": "number"
      },
      "required": false,
      "description": ""
    },
    "value": {
      "type": {
        "name": "union",
        "value": [{
          "name": "number"
        }, {
          "name": "string"
        }]
      },
      "required": false,
      "description": ""
    },
    "tickInterval": {
      "type": {
        "name": "number"
      },
      "required": false,
      "description": "Modifies the number of tick marks and at what interval"
    },
    "ticks": {
      "type": {
        "name": "arrayOf",
        "value": {
          "name": "shape",
          "value": {
            "value": {
              "name": "number",
              "required": true
            },
            "label": {
              "name": "node",
              "required": true
            }
          }
        }
      },
      "required": false,
      "description": "Specified ticks at specified values"
    },
    "onChange": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": ""
    },
    "showRange": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "Shows a thick line from min to value"
    },
    "valueAppend": {
      "type": {
        "name": "node"
      },
      "required": false,
      "description": "Shows a tooltip styled value"
    }
  }
};