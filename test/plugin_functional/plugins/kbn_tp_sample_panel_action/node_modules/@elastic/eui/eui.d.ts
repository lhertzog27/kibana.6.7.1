declare module '@elastic/eui/src/components/common' {
	import { Component, SFC } from 'react';
	export interface CommonProps {
	    className?: string;
	    'aria-label'?: string;
	    'data-test-subj'?: string;
	}
	export type NoArgCallback<T> = () => T;
	export type RefCallback<Element extends HTMLElement> = (element: Element) => void;
	export type Omit<T, K> = Pick<T, Exclude<keyof T, K>>;
	export function keysOf<T, K extends keyof T>(obj: T): K[];
	export type PropsOf<C> = C extends SFC<infer SFCProps> ? SFCProps : C extends Component<infer ComponentProps> ? ComponentProps : never;
	/**
	 * Returns member keys in U not present in T set to never
	 * T = { 'one', 'two', 'three' }
	 * U = { 'three', 'four', 'five' }
	 * returns { 'four': never, 'five': never }
	 */
	export type DisambiguateSet<T, U> = {
	    [P in Exclude<keyof T, keyof U>]?: never;
	};
	/**
	 * Allow either T or U, preventing any additional keys of the other type from being present
	 */
	export type ExclusiveUnion<T, U> = (T | U) extends object ? (DisambiguateSet<T, U> & U) | (DisambiguateSet<U, T> & T) : T | U;

}
declare module '@elastic/eui' {
	import { HTMLAttributes, Component, ReactNode } from 'react';

	import { CommonProps } from '@elastic/eui/src/components/common'; module '@elastic/eui' {
	  export type EuiAccordionSize = 'none' | 'xs' | 's' | 'm' | 'l' | 'xl';

	  export interface EuiAccordionProps {
	    id: string;
	    buttonContentClassName?: string;
	    buttonContent?: ReactNode;
	    extraAction?: ReactNode;
	    initialIsOpen?: boolean;
	    paddingSize?: EuiAccordionSize;
	  }

	  export class EuiAccordion extends Component<
	    CommonProps & HTMLAttributes<HTMLDivElement> & EuiAccordionProps
	    > {}
	}

}
declare module '@elastic/eui' {
	import { CommonProps } from '@elastic/eui/src/components/common';

	import { HTMLAttributes, SFC } from 'react'; module '@elastic/eui' {

	  export type AvatarSize = 's' | 'm' | 'l' | 'xl';

	  export type AvatarType = 'user' | 'space';

	  export interface EuiAvatarProps {
	    name: string;
	    color?: string;
	    initials?: string;
	    initialsLength?: number;
	    className?: string;
	    imageUrl?: string;
	    size?: AvatarSize;
	    type?: AvatarType;
	  }

	  export const EuiAvatar: SFC<
	    CommonProps & HTMLAttributes<HTMLDivElement> & EuiAvatarProps
	    >;
	}

}
declare module '@elastic/eui/src/components/icon/icon' {
	import { SFC, SVGAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common'; const typeToIconMap: {
	    addDataApp: any;
	    advancedSettingsApp: any;
	    alert: any;
	    apmApp: any;
	    apmTrace: any;
	    apps: any;
	    arrowDown: any;
	    arrowLeft: any;
	    arrowRight: any;
	    arrowUp: any;
	    asterisk: any;
	    auditbeatApp: any;
	    beaker: any;
	    bell: any;
	    bolt: any;
	    boxesHorizontal: any;
	    boxesVertical: any;
	    branch: any;
	    broom: any;
	    brush: any;
	    bullseye: any;
	    calendar: any;
	    canvasApp: any;
	    codeApp: any;
	    check: any;
	    checkInCircleFilled: any;
	    clock: any;
	    compute: any;
	    console: any;
	    consoleApp: any;
	    controlsHorizontal: any;
	    controlsVertical: any;
	    copy: any;
	    copyClipboard: any;
	    createAdvancedJob: any;
	    createMultiMetricJob: any;
	    createPopulationJob: any;
	    createSingleMetricJob: any;
	    cross: any;
	    crossClusterReplicationApp: any;
	    crosshairs: any;
	    crossInACircleFilled: any;
	    dashboardApp: any;
	    database: any;
	    dataVisualizer: any;
	    devToolsApp: any;
	    discoverApp: any;
	    document: any;
	    dot: any;
	    editorAlignCenter: any;
	    editorAlignLeft: any;
	    editorAlignRight: any;
	    editorBold: any;
	    editorCodeBlock: any;
	    editorComment: any;
	    editorHeading: any;
	    editorItalic: any;
	    editorLink: any;
	    editorOrderedList: any;
	    editorRedo: any;
	    editorStrike: any;
	    editorTable: any;
	    editorUnderline: any;
	    editorUndo: any;
	    editorUnorderedList: any;
	    email: any;
	    empty: any;
	    emsApp: any;
	    exit: any;
	    expand: any;
	    exportAction: any;
	    eye: any;
	    eyeClosed: any;
	    faceHappy: any;
	    faceNeutral: any;
	    faceSad: any;
	    filebeatApp: any;
	    filter: any;
	    folderClosed: any;
	    folderOpen: any;
	    fullScreen: any;
	    gear: any;
	    gisApp: any;
	    globe: any;
	    grab: any;
	    grabHorizontal: any;
	    graphApp: any;
	    grid: any;
	    grokApp: any;
	    heartbeatApp: any;
	    heatmap: any;
	    help: any;
	    iInCircle: any;
	    importAction: any;
	    indexClose: any;
	    indexEdit: any;
	    indexFlush: any;
	    indexManagementApp: any;
	    indexMapping: any;
	    indexOpen: any;
	    indexPatternApp: any;
	    indexRollupApp: any;
	    indexSettings: any;
	    infraApp: any;
	    inputOutput: any;
	    inspect: any;
	    invert: any;
	    kqlField: any;
	    kqlFunction: any;
	    kqlOperand: any;
	    kqlSelector: any;
	    kqlValue: any;
	    link: any;
	    list: any;
	    listAdd: any;
	    lock: any;
	    lockOpen: any;
	    loggingApp: any;
	    logoAerospike: any;
	    logoApache: any;
	    logoAPM: any;
	    logoAppSearch: any;
	    logoAWS: any;
	    logoAWSMono: any;
	    logoBeats: any;
	    logoBusinessAnalytics: any;
	    logoCeph: any;
	    logoCloud: any;
	    logoCloudEnterprise: any;
	    logoCodesandbox: any;
	    logoCouchbase: any;
	    logoDocker: any;
	    logoDropwizard: any;
	    logoElastic: any;
	    logoElasticsearch: any;
	    logoElasticStack: any;
	    logoEnterpriseSearch: any;
	    logoEtcd: any;
	    logoGCP: any;
	    logoGCPMono: any;
	    logoGithub: any;
	    logoGmail: any;
	    logoGolang: any;
	    logoHAproxy: any;
	    logoIBM: any;
	    logoIBMMono: any;
	    logoKafka: any;
	    logoKibana: any;
	    logoKubernetes: any;
	    logoLogstash: any;
	    logoMemcached: any;
	    logoMetrics: any;
	    logoMongodb: any;
	    logoMySQL: any;
	    logoNginx: any;
	    logoOsquery: any;
	    logoPhp: any;
	    logoPostgres: any;
	    logoPrometheus: any;
	    logoRabbitmq: any;
	    logoRedis: any;
	    logoSiteSearch: any;
	    logoSketch: any;
	    logoSlack: any;
	    logoWebhook: any;
	    logoWindows: any;
	    logoXpack: any;
	    logstashFilter: any;
	    logstashIf: any;
	    logstashInput: any;
	    logstashOutput: any;
	    logstashQueue: any;
	    machineLearningApp: any;
	    managementApp: any;
	    mapMarker: any;
	    memory: any;
	    merge: any;
	    metricbeatApp: any;
	    minusInCircle: any;
	    minusInCircleFilled: any;
	    monitoringApp: any;
	    node: any;
	    notebookApp: any;
	    number: any;
	    offline: any;
	    online: any;
	    packetbeatApp: any;
	    pause: any;
	    pencil: any;
	    pin: any;
	    pipelineApp: any;
	    play: any;
	    plusInCircle: any;
	    plusInCircleFilled: any;
	    popout: any;
	    questionInCircle: any;
	    refresh: any;
	    reportingApp: any;
	    save: any;
	    savedObjectsApp: any;
	    scale: any;
	    search: any;
	    searchProfilerApp: any;
	    securityAnalyticsApp: any;
	    securityApp: any;
	    shard: any;
	    share: any;
	    snowflake: any;
	    sortable: any;
	    sortDown: any;
	    sortLeft: any;
	    sortRight: any;
	    sortUp: any;
	    spacesApp: any;
	    sqlApp: any;
	    starEmpty: any;
	    starEmptySpace: any;
	    starFilled: any;
	    starFilledSpace: any;
	    starMinusEmpty: any;
	    starMinusFilled: any;
	    starPlusEmpty: any;
	    starPlusFilled: any;
	    stats: any;
	    stop: any;
	    stopFilled: any;
	    storage: any;
	    string: any;
	    submodule: any;
	    symlink: any;
	    tableOfContents: any;
	    tag: any;
	    tear: any;
	    temperature: any;
	    timelionApp: any;
	    tokenAnnotation: any;
	    tokenArray: any;
	    tokenBoolean: any;
	    tokenClass: any;
	    tokenConstant: any;
	    tokenElement: any;
	    tokenEnum: any;
	    tokenEnumMember: any;
	    tokenEvent: any;
	    tokenException: any;
	    tokenField: any;
	    tokenFile: any;
	    tokenFunction: any;
	    tokenInterface: any;
	    tokenKey: any;
	    tokenMethod: any;
	    tokenNull: any;
	    tokenNumber: any;
	    tokenObject: any;
	    tokenOperator: any;
	    tokenPackage: any;
	    tokenParameter: any;
	    tokenProperty: any;
	    tokenRepo: any;
	    tokenString: any;
	    tokenStruct: any;
	    tokenSymbol: any;
	    tokenVariable: any;
	    trash: any;
	    upgradeAssistantApp: any;
	    pinFilled: any;
	    uptimeApp: any;
	    user: any;
	    usersRolesApp: any;
	    vector: any;
	    visArea: any;
	    visBarHorizontal: any;
	    visBarVertical: any;
	    visControls: any;
	    visGauge: any;
	    visGoal: any;
	    visHeatmap: any;
	    visLine: any;
	    visMapCoordinate: any;
	    visMapRegion: any;
	    visMetric: any;
	    visPie: any;
	    visTable: any;
	    visTagCloud: any;
	    visText: any;
	    visTimelion: any;
	    visualizeApp: any;
	    visVega: any;
	    visVisualBuilder: any;
	    watchesApp: any;
	    wrench: any;
	};
	export const TYPES: IconType[];
	export type IconType = keyof typeof typeToIconMap; const colorToClassMap: {
	    [color: string]: string | null;
	};
	export const COLORS: IconColor[];
	export type IconColor = string | keyof typeof colorToClassMap; const sizeToClassNameMap: {
	    original: null;
	    s: string;
	    m: string;
	    l: string;
	    xl: string;
	    xxl: string;
	};
	export const SIZES: IconSize[];
	export type IconSize = keyof typeof sizeToClassNameMap;
	export interface EuiIconProps {
	    type?: IconType;
	    /**
	     * One of EUI's color palette or a valid CSS color value https://developer.mozilla.org/en-US/docs/Web/CSS/color_value
	     */
	    color?: IconColor;
	    size?: IconSize;
	} type Props = CommonProps & SVGAttributes<SVGElement> & EuiIconProps;
	export const EuiIcon: SFC<Props>;
	export {};

}
declare module '@elastic/eui' {
	export { EuiIcon, IconColor, IconSize, IconType, TYPES as ICON_TYPES, SIZES as ICON_SIZES, COLORS as ICON_COLORS, } from '@elastic/eui/src/components/icon/icon';

}
declare module '@elastic/eui' {
	import { IconType } from '@elastic/eui'
	

	import { HTMLAttributes, MouseEventHandler, SFC, ReactNode } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common'; module '@elastic/eui' {

	  type IconSide = 'left' | 'right';

	  export interface EuiBadgeProps {
	    iconType?: IconType;
	    iconSide?: IconSide;
	    iconOnClick?: MouseEventHandler<HTMLButtonElement>;
	    iconOnClickAriaLabel?: string;
	    onClick?: MouseEventHandler<HTMLButtonElement>;
	    onClickAriaLabel?: string;
	    color?: string;
	    closeButtonProps?: object;
	  }

	  export const EuiBadge: SFC<
	    CommonProps & HTMLAttributes<HTMLSpanElement> & HTMLAttributes<HTMLButtonElement> & EuiBadgeProps
	  >;

	  export interface EuiBetaBadgeProps {
	    iconType?: IconType;
	    label: ReactNode;
	    tooltipContent?: ReactNode;
	    tooltipPosition?: ToolTipPositions;
	    title?: string;
	  }

	  export const EuiBetaBadge: SFC<
	    CommonProps & HTMLAttributes<HTMLSpanElement> & EuiBetaBadgeProps
	  >;
	}

}
declare module '@elastic/eui' {
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { IconType } from '@elastic/eui'

	import { SFC, ButtonHTMLAttributes, AnchorHTMLAttributes, MouseEventHandler, HTMLAttributes } from 'react'; module '@elastic/eui' {
	  type EuiButtonPropsForButtonOrLink<Props> = (
	    (Props & { onClick: MouseEventHandler<HTMLButtonElement> } & ButtonHTMLAttributes<HTMLButtonElement>) |
	    (Props & { href: string; onClick: MouseEventHandler<HTMLAnchorElement> } & AnchorHTMLAttributes<HTMLAnchorElement>) |
	    (Props & AnchorHTMLAttributes<HTMLAnchorElement> & ButtonHTMLAttributes<HTMLButtonElement>)
	  )

	  /**
	   * Normal button type defs
	   *
	   * @see './button.js'
	   */

	  export type ButtonIconSide = 'left' | 'right';
	  export type ButtonColor =
	    | 'primary'
	    | 'secondary'
	    | 'warning'
	    | 'danger'
	    | 'ghost';
	  export type ButtonSize = 's' | 'l';

	  export interface EuiButtonProps {
	    iconType?: IconType;
	    iconSide?: ButtonIconSide;
	    fill?: boolean;
	    color?: ButtonColor;
	    size?: ButtonSize;
	    isLoading?: boolean;
	    isDisabled?: boolean;
	    fullWidth?: boolean;
	    contentProps?: HTMLAttributes<HTMLSpanElement>;
	    textProps?: HTMLAttributes<HTMLSpanElement>;
	  }
	  export const EuiButton: SFC<
	    EuiButtonPropsForButtonOrLink<CommonProps & EuiButtonProps>
	  >;

	  /**
	   * button icon type defs
	   *
	   * @see './button_icon/button_icon.js'
	   */

	  export type ButtonIconColor =
	    | 'primary'
	    | 'danger'
	    | 'disabled'
	    | 'ghost'
	    | 'text';

	  export interface EuiButtonIconProps {
	    iconType?: IconType;
	    color?: ButtonIconColor;
	    'aria-label'?: string;
	    'aria-labelledby'?: string;
	    isDisabled?: boolean;
	    size?: ButtonSize;
	  }
	  export const EuiButtonIcon: SFC<
	    EuiButtonPropsForButtonOrLink<CommonProps & EuiButtonIconProps>
	  >;

	  /**
	   * button icon type defs
	   *
	   * @see './button_empty/button_empty.js'
	   */

	  export type EmptyButtonIconSide = 'left' | 'right';
	  export type EmptyButtonColor =
	    | 'primary'
	    | 'danger'
	    | 'disabled'
	    | 'text'
	    | 'ghost';
	  export type EmptyButtonSizes = 'xs' | 's' | 'l';
	  export type EmptyButtonFlush = 'left' | 'right';

	  export interface EuiButtonEmptyProps {
	    iconType?: IconType;
	    iconSide?: EmptyButtonIconSide;
	    color?: EmptyButtonColor;
	    size?: EmptyButtonSizes;
	    flush?: EmptyButtonFlush;
	    isLoading?: boolean;
	    isDisabled?: boolean;
	    contentProps?: HTMLAttributes<HTMLSpanElement>;
	    textProps?: HTMLAttributes<HTMLSpanElement>;
	  }

	  export const EuiButtonEmpty: SFC<
	    EuiButtonPropsForButtonOrLink<CommonProps & EuiButtonEmptyProps>
	  >;
	}

}
declare module '@elastic/eui' {
	import { CommonProps, Omit } from '@elastic/eui/src/components/common';
	import { IconType } from '@elastic/eui'

	import { SFC, ReactNode, HTMLAttributes } from 'react'; module '@elastic/eui' {
	  /**
	   * EuiCallOut type defs
	   *
	   * @see './code.js'
	   */

	  type Color = 'primary' | 'success' | 'warning' | 'danger';
	  type Size = 's' | 'm';

	  export interface EuiCallOutProps {
	    title?: ReactNode,
	    iconType?: IconType,
	    color?: Color,
	    size?: Size,
	  }

	  export const EuiCallOut: SFC<
	    CommonProps & EuiCallOutProps & Omit<HTMLAttributes<HTMLDivElement>, 'title'>
	  >;
	}

}
declare module '@elastic/eui' {
	import { CommonProps } from '@elastic/eui/src/components/common';

	import { SFC, HTMLAttributes } from 'react'; module '@elastic/eui' {
	  type FontSize = 's' | 'm' | 'l';
	  type PaddingSize = 'none' | 's' | 'm' | 'l';

	  // there isn't a specific type for the <code> element, and MDN
	  // says that it only supports the HTMLElement interface
	  // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/code
	  type HTMLCodeElement = HTMLElement

	  interface EuiCodeSharedProps {
	    paddingSize?: PaddingSize;

	    /**
	     * Sets the syntax highlighting for a specific language
	     * See http://highlightjs.readthedocs.io/en/latest/css-classes-reference.html#language-names-and-aliases
	     * for options
	     */
	    language?: string;

	    overflowHeight?: number;
	    fontSize?: FontSize;
	    transparentBackground?: boolean;
	  }


	  /**
	   * EuiCode type defs
	   *
	   * @see './code.js'
	   */

	  export interface EuiCodeProps extends EuiCodeSharedProps {
	    inline?: true
	  }

	  export const EuiCode: SFC<
	    CommonProps & EuiCodeProps & HTMLAttributes<HTMLCodeElement>
	  >;

	  /**
	   * EuiCodeBlock type defs
	   *
	   * @see './code_block.js'
	   */

	  export interface EuiCodeBlockProps extends EuiCodeSharedProps {
	    inline?: false
	  }

	  export const EuiCodeBlock: SFC<
	    CommonProps & EuiCodeBlockProps & HTMLAttributes<HTMLCodeElement>
	  >;
	}

}
declare module '@elastic/eui' {
	import { ButtonHTMLAttributes, ReactNode, SFC, FocusEventHandler } from 'react';
	import { ListProps } from 'react-virtualized';
	import {
	  EuiComboBoxOption,
	  EuiComboBoxOptionProps,
	  EuiComboBoxOptionsListPosition,
	  EuiComboBoxOptionsListProps,
	} from '@elastic/eui';
	import { RefCallback } from '@elastic/eui/src/components/common'; module '@elastic/eui' {
	  export type EuiComboBoxOptionProps = ButtonHTMLAttributes<HTMLButtonElement> & {
	    label: string,
	    isGroupLabelOption?: boolean,
	  }

	  export type EuiComboBoxOptionsListPosition = 'top' | 'bottom'

	  export interface EuiComboBoxOption {
	    option: EuiComboBoxOptionProps,
	    children?: ReactNode,
	    className?: string,
	    optionRef?: RefCallback<HTMLButtonElement>,
	    onClick: (option: EuiComboBoxOptionProps) => any,
	    onEnterKey: (option: EuiComboBoxOptionProps) => any,
	    disabled?: boolean,
	  }

	  export interface EuiComboBoxOptionsListProps {
	    options?: Array<EuiComboBoxOptionProps>,
	    isLoading?: boolean,
	    selectedOptions?: Array<any>,
	    onCreateOption?: any,
	    searchValue?: string,
	    matchingOptions?: Array<EuiComboBoxOptionProps>,
	    optionRef?: EuiComboBoxOption['optionRef'],
	    onOptionClick?: EuiComboBoxOption['onClick'],
	    onOptionEnterKey?: EuiComboBoxOption['onEnterKey'],
	    areAllOptionsSelected?: boolean,
	    getSelectedOptionForSearchValue?: (searchValue: string, selectedOptions: Array<any>) => EuiComboBoxOptionProps,
	    updatePosition: (parameter?: UIEvent | EuiPanelProps['panelRef']) => any,
	    position?: EuiComboBoxOptionsListPosition,
	    listRef: EuiPanelProps['panelRef'],
	    renderOption?: (option: EuiComboBoxOptionProps, searchValue: string, OPTION_CONTENT_CLASSNAME: string) => ReactNode,
	    width?: number,
	    scrollToIndex?: number,
	    onScroll?: ListProps['onScroll'],
	    rowHeight?: number,
	    fullWidth?: boolean,
	  }
	  export const EuiComboBoxOptionsList: SFC<EuiComboBoxOptionsListProps>;

	  export type EuiComboBoxSingleSelectionShape = { asPlainText?: boolean; };

	  export interface EuiComboBoxProps {
	    id?: string,
	    isDisabled?: boolean,
	    className?: string,
	    placeholder?: string,
	    isLoading?: boolean,
	    async?: boolean,
	    singleSelection?: EuiComboBoxSingleSelectionShape | boolean,
	    noSuggestions?: boolean,
	    options?: EuiComboBoxOptionsListProps['options'],
	    selectedOptions?: EuiComboBoxOptionsListProps['selectedOptions'],
	    onBlur?: FocusEventHandler<HTMLInputElement>,
	    onChange?: (options: Array<EuiComboBoxOptionProps>) => any,
	    onFocus?: FocusEventHandler<HTMLInputElement>,
	    onSearchChange?: (searchValue: string) => any,
	    onCreateOption?: EuiComboBoxOptionsListProps['onCreateOption'],
	    renderOption?: EuiComboBoxOptionsListProps['renderOption'],
	    isInvalid?: boolean,
	    rowHeight?: number,
	    isClearable?: boolean,
	    fullWidth?: boolean,
	    inputRef?: (element: HTMLInputElement) => void;
	  }
	  export const EuiComboBox: SFC<EuiComboBoxProps>;
	}

}
declare module '@elastic/eui' {
	import { CommonProps, RefCallback, NoArgCallback, Omit } from '@elastic/eui/src/components/common';

	import {
	  SFC,
	  ButtonHTMLAttributes,
	  HTMLAttributes,
	  ReactElement,
	  ReactNode
	} from 'react';
	import * as React from 'react'; module '@elastic/eui' {
	  /**
	   * context menu panel type defs
	   *
	   * @see './context_menu_panel.js`
	   */

	  export type EuiContextMenuPanelHeightChangeHandler = (height: number) => void;
	  export type EuiContextMenuPanelTransitionType = 'in' | 'out';
	  export type EuiContextMenuPanelTransitionDirection = 'next' | 'previous';
	  export type EuiContextMenuPanelShowPanelCallback = (
	    currentPanelIndex: number
	  ) => void;

	  export interface EuiContextMenuPanelProps {
	    items?: ReactNode[];
	    title?: ReactNode;
	    onClose?: NoArgCallback<void>;
	    onHeightChange?: EuiContextMenuPanelHeightChangeHandler;
	    transitionType?: EuiContextMenuPanelTransitionType;
	    transitionDirection?: EuiContextMenuPanelTransitionDirection;
	    onTransitionComplete?: NoArgCallback<void>;
	    onUseKeyboardToNavigate?: NoArgCallback<void>;
	    hasFocus?: boolean;
	    showNextPanel?: EuiContextMenuPanelShowPanelCallback;
	    showPreviousPanel?: EuiContextMenuPanelShowPanelCallback;
	    initialFocusedItemIndex?: number;
	  }

	  export const EuiContextMenuPanel: SFC<
	    CommonProps &
	      Omit<
	        HTMLAttributes<HTMLDivElement>,
	        'onKeyDown' | 'tabIndex' | 'onAnimationEnd'
	      > &
	      EuiContextMenuPanelProps
	  >;

	  /**
	   * context menu item type defs
	   *
	   * @see './context_menu_item.js`
	   */

	  export type EuiContextMenuItemIcon = ReactElement<any> | string | HTMLElement;

	  export interface EuiContextMenuItemProps extends CommonProps {
	    icon?: EuiContextMenuItemIcon;
	    hasPanel?: boolean;
	    disabled?: boolean;
	    onClick?: () => void;
	    buttonRef?: RefCallback<HTMLButtonElement>;
	    toolTipContent?: ReactNode;
	    toolTipTitle?: ReactNode;
	    toolTipPosition?: string;
	    href?: string;
	    target?: string;
	    rel?: string;
	    children?: ReactNode;
	  }

	  export const EuiContextMenuItem: SFC<
	    CommonProps &
	      Omit<ButtonHTMLAttributes<HTMLButtonElement>, 'type'> &
	      EuiContextMenuItemProps
	  >;

	  /**
	   * context menu type defs
	   *
	   * @see './context_menu.js`
	   */

	  export type EuiContextMenuPanelId = string | number;

	  export type EuiContextMenuPanelItemDescriptor = Omit<
	    EuiContextMenuItemProps,
	    'hasPanel'
	  > & {
	    name: string;
	    panel?: EuiContextMenuPanelId;
	  };

	  interface EuiContextMenuPanelDescriptor {
	    id: EuiContextMenuPanelId;
	    title?: string;
	    items?: EuiContextMenuPanelItemDescriptor[];
	    content?: React.ReactNode;
	    width?: number;
	  }

	  export type EuiContextMenuProps = CommonProps &
	    Omit<HTMLAttributes<HTMLDivElement>, 'style'> & {
	      panels?: EuiContextMenuPanelDescriptor[];
	      initialPanelId?: EuiContextMenuPanelId;
	    };

	  export const EuiContextMenu: SFC<EuiContextMenuProps>;
	}

}
declare module '@elastic/eui' {
	import React from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { IconType } from '@elastic/eui';
	import ReactDatePicker, { ReactDatePickerProps } from 'react-datepicker';
	import { Moment } from 'moment'; module '@elastic/eui' {
	  interface OnTimeChangeProps {
	    start: string;
	    end: string;
	    isInvalid: boolean;
	    isQuickSelection: boolean;
	  }

	  interface OnRefreshChangeProps {
	    isPaused: boolean;
	    refreshInterval: number;
	  }

	  interface EuiExtendedDatePickerProps extends ReactDatePickerProps {
	    fullWidth?: boolean;
	    isInvalid?: boolean;
	    isLoading?: boolean;
	    injectTimes?: Moment[]; // added here because the type is missing in @types/react-datepicker@1.8.0
	    inputRef?: React.Ref<typeof ReactDatePicker>;
	    placeholder?: string;
	    shadow?: boolean;
	    showIcon?: boolean;
	  }

	  export type EuiDatePickerProps = CommonProps & EuiExtendedDatePickerProps;
	  export const EuiDatePicker: React.SFC<EuiDatePickerProps>;

	  export type EuiDatePickerRangeProps = CommonProps & {
	    startDateControl: React.ReactElement<EuiDatePickerProps>;
	    endDateControl: React.ReactElement<EuiDatePickerProps>;
	    iconType?: boolean | IconType;
	    fullWidth?: boolean;
	    isCustom?: boolean;
	  };

	  export const EuiDatePickerRange: React.SFC<EuiDatePickerRangeProps>;

	  export interface EuiSuperDatePickerCommonRange {
	    start: string;
	    end: string;
	    label: string;
	  }

	  export interface EuiSuperDatePickerRecentRange {
	    start: string;
	    end: string;
	  }

	  export interface EuiSuperDatePickerQuickSelectPanel {
	    title: string;
	    content: React.ReactNode;
	  }

	  export type EuiSuperDatePickerProps = CommonProps & {
	    start?: string;
	    end?: string;
	    isPaused?: boolean;
	    refreshInterval?: number;
	    onTimeChange: (props: OnTimeChangeProps) => void;
	    onRefreshChange?: (props: OnRefreshChangeProps) => void;
	    commonlyUsedRanges?: EuiSuperDatePickerCommonRange[];
	    dateFormat?: string;
	    recentlyUsedRanges?: EuiSuperDatePickerRecentRange[];
	    showUpdateButton?: boolean;
	    isAutoRefreshOnly?: boolean;
	    customQuickSelectPanels?: EuiSuperDatePickerQuickSelectPanel[];
	  };

	  export const EuiSuperDatePicker: React.SFC<EuiSuperDatePickerProps>;
	}

}
declare module '@elastic/eui' {
	import { HTMLAttributes, Component, ReactNode } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common'; module '@elastic/eui' {
	  export type EuiDescriptionListType = 'row' | 'column' | 'inline';
	  export type EuiDescriptionListAlignment = 'center' | 'left';
	  export type EuiDescriptionListTextStyle = 'normal' | 'reverse';

	  export interface EuiDescriptionListProps {
	    listItems?: Array<{ title: ReactNode, description: ReactNode }>;
	    align?: EuiDescriptionListAlignment;
	    compressed?: boolean;
	    textStyle?: EuiDescriptionListTextStyle;
	    type?: EuiDescriptionListType;
	    titleProps?: HTMLAttributes<HTMLElement>;
	    descriptionProps?: HTMLAttributes<HTMLElement>;
	  }

	  export class EuiDescriptionList extends Component<
	    CommonProps & HTMLAttributes<HTMLDListElement> & EuiDescriptionListProps
	    > {}

	  export interface EuiDescriptionListTitleProps {}

	  export class EuiDescriptionListTitle extends Component<
	    CommonProps & HTMLAttributes<HTMLElement> & EuiDescriptionListTitleProps
	    > {}

	  export interface EuiDescriptionListDescriptionProps {}

	  export class EuiDescriptionListDescription extends Component<
	    CommonProps & HTMLAttributes<HTMLElement> & EuiDescriptionListDescriptionProps
	    > {}
	}

}
declare module '@elastic/eui' {
	import { CommonProps, Omit } from '@elastic/eui/src/components/common';
	import { IconColor, IconType } from '@elastic/eui'
	

	import { SFC, ReactNode, HTMLAttributes } from 'react'; module '@elastic/eui' {
	  /**
	   * EuiEmptyPrompt type defs
	   *
	   * @see './empty_prompt.js'
	   */

	  export interface EuiEmptyPromptProps {
	    iconType?: IconType;
	    iconColor?: IconColor;
	    title?: ReactNode;
	    titleSize?: EuiTitleSize;
	    body?: ReactNode;
	    actions?: ReactNode;
	  }

	  export const EuiEmptyPrompt: SFC<
	    CommonProps & EuiEmptyPromptProps & Omit<HTMLAttributes<HTMLDivElement>, 'title'>
	  >;


	}

}
declare module '@elastic/eui' {
	import { HTMLAttributes, Component } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common'; module '@elastic/eui' {
	  export class EuiErrorBoundary extends Component<
	    CommonProps & HTMLAttributes<HTMLDivElement>
	    > {}
	}

}
declare module '@elastic/eui' {
	import { CommonProps } from '@elastic/eui/src/components/common';

	import { SFC, HTMLAttributes } from 'react'; module '@elastic/eui' {
	  /**
	   * flex grid type defs
	   *
	   * @see './flex_grid.js'
	   */

	  export type FlexGridGutterSize = 'none' | 's' | 'm' | 'l' | 'xl';
	  export type FlexGridColumns = 0 | 1 | 2 | 3 | 4;

	  export interface EuiFlexGridProps {
	    columns?: FlexGridColumns;
	    gutterSize?: FlexGridGutterSize;
	  }

	  export const EuiFlexGrid: SFC<
	    CommonProps & HTMLAttributes<HTMLDivElement> & EuiFlexGridProps
	  >;

	  /**
	   * flex group type defs
	   *
	   * @see './flex_group.js'
	   */

	  export type FlexGroupAlignItems =
	    | 'stretch'
	    | 'flexStart'
	    | 'flexEnd'
	    | 'center'
	    | 'baseline';
	  export type FlexGroupComponentType = 'div' | 'span';
	  export type FlexGroupDirection =
	    | 'column'
	    | 'columnReverse'
	    | 'row'
	    | 'rowReverse';
	  export type FlexGroupGutterSize = 'none' | 'xs' | 's' | 'm' | 'l' | 'xl';
	  export type FlexGroupJustifyContent =
	    | 'flexStart'
	    | 'flexEnd'
	    | 'center'
	    | 'spaceBetween'
	    | 'spaceAround'
	    | 'spaceEvenly';

	  export interface EuiFlexGroupProps {
	    alignItems?: FlexGroupAlignItems;
	    children?: React.ReactNode;
	    className?: string;
	    component?: FlexGroupComponentType;
	    direction?: FlexGroupDirection;
	    gutterSize?: FlexGroupGutterSize;
	    justifyContent?: FlexGroupJustifyContent;
	    responsive?: boolean;
	    wrap?: boolean;
	  }

	  export const EuiFlexGroup: SFC<
	    CommonProps &
	      HTMLAttributes<HTMLDivElement | HTMLSpanElement> &
	      EuiFlexGroupProps
	  >;

	  /**
	   * flex item type defs
	   *
	   * @see './flex_item.js'
	   */

	  export type FlexItemGrowSize =
	    | 1
	    | 2
	    | 3
	    | 4
	    | 5
	    | 6
	    | 7
	    | 8
	    | 9
	    | 10
	    | true
	    | false
	    | null;
	  export type FlexItemComponentType = 'div' | 'span';

	  export interface EuiFlexItemProps {
	    grow?: FlexItemGrowSize;
	    component?: FlexItemComponentType;
	  }

	  export const EuiFlexItem: SFC<
	    CommonProps &
	      HTMLAttributes<HTMLDivElement | HTMLSpanElement> &
	      EuiFlexItemProps
	  >;
	}

}
declare module '@elastic/eui' {
	import { CommonProps } from '@elastic/eui/src/components/common'; module '@elastic/eui' {
	  export interface EuiFlyoutProps {
	    onClose: () => void;
	    size?: 's' | 'm' | 'l';
	    /**
	     * Hides the default close button. You must provide another close button somewhere within the flyout.
	     */
	    hideCloseButton?: boolean;
	    /**
	     * Locks the mouse / keyboard focus to within the flyout
	     */
	    ownFocus?: boolean;
	    /**
	     * Specify an aria-label for the close button of the flyout.
	     */
	    closeButtonAriaLabel?: string;
	    /**
	     * Sets the max-width of the page,
	     * set to `true` to use the default size,
	     * set to `false` to not restrict the width,
	     * set to a number for a custom width in px,
	     * set to a string for a custom width in custom measurement.
	     */
	    maxWidth?: boolean | number | string;
	  }

	  export const EuiFlyout: React.SFC<
	    CommonProps &
	    EuiFlyoutProps
	  >;

	  export const EuiFlyoutBody: React.SFC<CommonProps>;

	  export interface EuiFlyoutHeaderProps {
	    hasBorder?: boolean;
	  }
	  export const EuiFlyoutHeader: React.SFC<CommonProps & EuiFlyoutHeaderProps>;

	  export const EuiFlyoutFooter: React.SFC<CommonProps>;
	}

}
declare module '@elastic/eui' {
	import { CommonProps } from '@elastic/eui/src/components/common';
	
	
	
	
	
	
	
	
	
	
	
	
	

	import { SFC, FormHTMLAttributes, ReactNode } from 'react'; module '@elastic/eui' {
	  /**
	   * @see './form.js'
	   */
	  export type EuiFormProps = CommonProps &
	    FormHTMLAttributes<HTMLFormElement> & {
	      isInvalid?: boolean;
	      error?: ReactNode | ReactNode[];
	    };

	  export const EuiForm: SFC<EuiFormProps>;
	}

}
declare module '@elastic/eui' {
	import { IconColor } from '@elastic/eui'

	import { SFC, HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common'; module '@elastic/eui' {
	  /**
	   * health type defs
	   *
	   * @see './health.js'
	   */

	  type EuiHealthProps = CommonProps &
	    HTMLAttributes<HTMLDivElement> & {
	      color: IconColor;
	    };

	  export const EuiHealth: SFC<EuiHealthProps>;
	}

}
declare module '@elastic/eui' {
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { IconType } from '@elastic/eui';

	import { AnchorHTMLAttributes, ButtonHTMLAttributes, HTMLAttributes, MouseEventHandler, ReactNode, SFC } from 'react'; module '@elastic/eui' {

	  export const EuiKeyPadMenu: SFC<
	    CommonProps & HTMLAttributes<HTMLDivElement>
	  >;

	  interface EuiKeyPadMenuItemCommonProps {
	    label: ReactNode;
	    betaBadgeLabel?: string;
	    betaBadgeIconType?: IconType;
	    betaBadgeTooltipContent?: ReactNode;
	  }

	  export const EuiKeyPadMenuItemButton: SFC<
	    CommonProps & ButtonHTMLAttributes<HTMLButtonElement> & EuiKeyPadMenuItemCommonProps
	  >;

	  export const EuiKeyPadMenuItem: SFC<
	    CommonProps & AnchorHTMLAttributes<HTMLAnchorElement> & EuiKeyPadMenuItemCommonProps
	  >;
	}

}
declare module '@elastic/eui' {
	import { CommonProps, Omit } from '@elastic/eui/src/components/common';

	import {
	  SFC,
	  AnchorHTMLAttributes,
	  ButtonHTMLAttributes,
	  MouseEventHandler
	} from 'react'; module '@elastic/eui' {
	  /**
	   * link type defs
	   *
	   * @see './link.js'
	   */

	  export type EuiLinkType = 'button' | 'reset' | 'submit';
	  export type EuiLinkColor =
	    | 'primary'
	    | 'subdued'
	    | 'secondary'
	    | 'accent'
	    | 'danger'
	    | 'warning'
	    | 'ghost';

	  export interface LinkButtonProps {
	    type?: EuiLinkType;
	    color?: EuiLinkColor;
	    onClick?: MouseEventHandler<HTMLButtonElement>;
	  }

	  type EuiLinkButtonProps = CommonProps &
	    ButtonHTMLAttributes<HTMLButtonElement> &
	    LinkButtonProps;

	  export interface LinkAnchorProps {
	    type?: EuiLinkType;
	    color?: EuiLinkColor;
	  }

	  type EuiLinkAnchorProps = CommonProps &
	    Omit<AnchorHTMLAttributes<HTMLAnchorElement>, 'onClick'> &
	    LinkAnchorProps;

	  export const EuiLink: SFC<EuiLinkButtonProps | EuiLinkAnchorProps>;
	}

}
declare module '@elastic/eui' {
	import { CommonProps } from '@elastic/eui/src/components/common';

	import { SFC, HTMLAttributes } from 'react'; module '@elastic/eui' {
	  /**
	   * @see './loading_spinner.js'
	   */
	  export type EuiLoadingSpinnerSize = 's' | 'm' | 'l' | 'xl';

	  export type EuiLoadingSpinnerProps = CommonProps &
	    HTMLAttributes<HTMLDivElement> & {
	      size?: EuiLoadingSpinnerSize;
	    };

	  export const EuiLoadingSpinner: SFC<EuiLoadingSpinnerProps>;

	  /**
	   * @see './loading_chart.js'
	   */
	  export type EuiLoadingChartSize = 'm' | 'l' | 'xl';

	  export type EuiLoadingChartProps = CommonProps &
	    HTMLAttributes<HTMLDivElement> & {
	      mono?: boolean;
	      size?: EuiLoadingChartSize;
	    };

	  export const EuiLoadingChart: SFC<EuiLoadingChartProps>;


	  /**
	   * @see './loading_kibana.js'
	   */
	  export interface EuiLoadingKibanaProps {
	    size: 'm' | 'l' | 'xl';
	  }

	  export const EuiLoadingKibana: SFC<
	    CommonProps & HTMLAttributes<HTMLDivElement> & EuiLoadingKibanaProps
	    >;
	}

}
declare module '@elastic/eui' {
	import { CommonProps, Omit } from '@elastic/eui/src/components/common';
	

	import { FocusTarget } from 'focus-trap';
	import { ReactNode, SFC, HTMLAttributes } from 'react'; module '@elastic/eui' {

	  /**
	   * Modal type defs
	   *
	   * @see './modal.js'
	   */
	  export interface EuiModalProps {
	    onClose: () => void;
	    /**
	     * Sets the max-width of the modal,
	     * set to `true` to use the default size,
	     * set to `false` to not restrict the width,
	     * set to a number for a custom width in px,
	     * set to a string for a custom width in custom measurement.
	     */
	    maxWidth?: boolean | number | string;

	    /** 
	     * Specifies what element should initially have focus; 
	     * Can be a DOM node, or a selector string (which will be passed to document.querySelector() to find the DOM node), or a function that returns a DOM node. 
	     */
	    initialFocus?: FocusTarget;
	  }

	  export const EuiModal: SFC<
	    CommonProps & HTMLAttributes<HTMLDivElement> & EuiModalProps
	    >;


	  /**
	   * @see './modal_body.js'
	   */
	  export const EuiModalBody: SFC<
	    CommonProps & HTMLAttributes<HTMLDivElement>
	    >;


	  /**
	   * @see './modal_footer.js'
	   */
	  export const EuiModalFooter: SFC<
	    CommonProps & HTMLAttributes<HTMLDivElement>
	    >;


	  /**
	   * @see './modal_header.js'
	   */
	  export const EuiModalHeader: SFC<
	    CommonProps & HTMLAttributes<HTMLDivElement>
	    >;


	  /**
	   * @see './modal_header_title.js'
	   */
	  export const EuiModalHeaderTitle: SFC<
	    CommonProps & HTMLAttributes<HTMLDivElement>
	    >;

	  /**
	   * Confirm modal type defs
	   *
	   * @see './confirm_modal.js'
	   */

	  // index.js re-exports values from confirm_modal.js with these names.
	  export const EUI_MODAL_CONFIRM_BUTTON: 'confirm';
	  export const EUI_MODAL_CANCEL_BUTTON: 'cancel';

	  export interface EuiConfirmModalProps {
	    buttonColor?: ButtonColor;
	    cancelButtonText?: ReactNode;
	    confirmButtonText?: ReactNode;
	    defaultFocusedButton?: 'confirm' | 'cancel';
	    title?: ReactNode;
	    onCancel?: () => void;
	    onConfirm?: () => void;
	    /**
	     * Sets the max-width of the modal,
	     * set to `true` to use the default size,
	     * set to `false` to not restrict the width,
	     * set to a number for a custom width in px,
	     * set to a string for a custom width in custom measurement.
	     */
	    maxWidth?: boolean | number | string;
	  }

	  // `title` from the React defs conflicts with our definition above
	  export const EuiConfirmModal: SFC<
	    CommonProps & Omit<HTMLAttributes<HTMLDivElement>, 'title'> & EuiConfirmModalProps
	    >;

	}

}
declare module '@elastic/eui' {
	import { CommonProps } from '@elastic/eui/src/components/common';

	import { SFC, HTMLAttributes } from 'react'; module '@elastic/eui' {

	  /**
	   * EuiOverlayMask type defs
	   *
	   * @see './overlay_mask.js'
	   */
	  export interface EuiOverlayMaskProps {
	    onClick?: () => void;
	  }

	  export const EuiOverlayMask: SFC<
	    CommonProps & HTMLAttributes<HTMLDivElement> & EuiOverlayMaskProps
	    >;

	}

}
declare module '@elastic/eui' {
	import { CommonProps } from '@elastic/eui/src/components/common';
	

	import { SFC, HTMLAttributes } from 'react'; module '@elastic/eui' {
	  export interface EuiPageWidthProps {
	    /**
	     * Sets the max-width of the page,
	     * set to `true` to use the default size,
	     * set to `false` to not restrict the width,
	     * set to a number for a custom width in px,
	     * set to a string for a custom width in custom measurement.
	     */
	    restrictWidth?: boolean | number | string;
	  }

	  /**
	   * @see './page.js'
	   */
	  export const EuiPage: SFC<CommonProps & EuiPageWidthProps &HTMLAttributes<HTMLDivElement>>;

	  /**
	   * @see ./page_header/page_header.js
	   */
	  export const EuiPageHeader: SFC<CommonProps & HTMLAttributes<HTMLDivElement>>;

	  /**
	   * @see ./page_header/page_header_section.js
	   */
	  export const EuiPageHeaderSection: SFC<CommonProps & HTMLAttributes<HTMLDivElement>>;

	  /**
	   * @see ./page_body/page_body.js
	   */
	  export const EuiPageBody: SFC<CommonProps & EuiPageWidthProps & HTMLAttributes<HTMLDivElement>>;

	  /**
	   * @see ./page_content/page_content.js
	   */

	  export type EuiPageContentPaddingSize = 'none' | 's' | 'm' | 'l';
	  export type EuiPageContentVerticalPosition = 'center';
	  export type EuiPageContentHorizontalPosition = 'center';

	  export interface EuiPageContentProps {
	    panelPaddingSize?: EuiPageContentPaddingSize;
	    verticalPosition?: EuiPageContentVerticalPosition;
	    horizontalPosition?: EuiPageContentHorizontalPosition;
	  }

	  export const EuiPageContent: SFC<CommonProps & EuiPanelProps & EuiPageContentProps>;

	  /**
	   * @see ./page_content/page_content_body.js
	   */
	  export const EuiPageContentBody: SFC<CommonProps & HTMLAttributes<HTMLDivElement>>;

	  /**
	   * @see ./page_content/page_content_header.js
	   */
	  export const EuiPageContentHeader: SFC<CommonProps & HTMLAttributes<HTMLDivElement>>;

	  /**
	   * @see ./page_content/page_content_header_section.js
	   */
	  export const EuiPageContentHeaderSection: SFC<CommonProps & HTMLAttributes<HTMLDivElement>>;

	  /**
	   * @see ./page_side_bar/page_side_bar.js
	   */
	  export const EuiPageSideBar: SFC<CommonProps & HTMLAttributes<HTMLDivElement>>;
	}

}
declare module '@elastic/eui' {
	import { CommonProps, Omit } from '@elastic/eui/src/components/common';
	

	import { HTMLAttributes, SFC } from 'react'; module '@elastic/eui' {
	  /**
	   * pagination type defs
	   *
	   * @see './pagination.js'
	   */

	  export type PageClickHandler = (pageIndex: number) => void;

	  export interface EuiPaginationProps {
	    pageCount?: number;
	    activePage?: number;
	    onPageClick?: PageClickHandler;
	  }

	  export const EuiPagination: SFC<
	    CommonProps & HTMLAttributes<HTMLDivElement> & EuiPaginationProps
	  >;

	  /**
	   * pagination button type defs
	   *
	   * @see './pagination_button.js'
	   */

	  export interface EuiPaginationButtonProps {
	    isActive?: boolean;
	    isPlaceholder?: boolean;
	    hideOnMobile?: boolean;
	  }

	  export const EuiPaginationButton: SFC<
	    CommonProps &
	      Omit<EuiButtonEmptyProps, 'size' | 'color'> &
	      EuiPaginationButtonProps
	  >;
	}

}
declare module '@elastic/eui' {
	import { CommonProps, RefCallback } from '@elastic/eui/src/components/common';

	import { HTMLAttributes, SFC } from 'react'; module '@elastic/eui' {
	  /**
	   * panel type defs
	   *
	   * @see './panel.js'
	   */

	  export type PanelPaddingSize = 'none' | 's' | 'm' | 'l';

	  export interface EuiPanelProps {
	    hasShadow?: boolean;
	    paddingSize?: PanelPaddingSize;
	    grow?: boolean;
	    panelRef?: RefCallback<HTMLDivElement>;
	  }

	  export const EuiPanel: SFC<
	    CommonProps & HTMLAttributes<HTMLDivElement> & EuiPanelProps
	  >;
	}

}
declare module '@elastic/eui' {
	import { CommonProps, NoArgCallback } from '@elastic/eui/src/components/common';
	

	import { FocusTarget } from 'focus-trap';
	import { SFC, ReactNode, HTMLAttributes } from 'react'; module '@elastic/eui' {
	  /**
	   * popover type defs
	   *
	   * @see './popover.js'
	   */

	  export type PopoverAnchorPosition =
	    | 'upCenter'
	    | 'upLeft'
	    | 'upRight'
	    | 'downCenter'
	    | 'downLeft'
	    | 'downRight'
	    | 'leftCenter'
	    | 'leftUp'
	    | 'leftDown'
	    | 'rightCenter'
	    | 'rightUp'
	    | 'rightDown';

	  interface EuiPopoverProps {
	    id: string;
	    closePopover: NoArgCallback<void>;
	    button: ReactNode;
	    withTitle?: boolean;
	    isOpen?: boolean;
	    ownFocus?: boolean;
	    initialFocus?: FocusTarget;
	    hasArrow?: boolean;
	    anchorClassName?: string;
	    anchorPosition?: PopoverAnchorPosition;
	    panelClassName?: string;
	    panelPaddingSize?: PanelPaddingSize;
	  }

	  export const EuiPopover: SFC<
	    CommonProps & HTMLAttributes<HTMLDivElement> & EuiPopoverProps
	  >;

	  export const EuiPopoverTitle: SFC<
	    CommonProps & HTMLAttributes<HTMLDivElement>
	  >;
	}

}
declare module '@elastic/eui' {
  import { SFC } from 'react';

  /**
   * portal type defs
   *
   * @see './portal.js'
   */
  type EuiPortalProps = {
    children: React.ReactNode;
  };

  export const EuiPortal: SFC<EuiPortalProps>;
}
declare module '@elastic/eui' {
	import { CommonProps } from '@elastic/eui/src/components/common';

	import { SFC, ProgressHTMLAttributes } from 'react'; module '@elastic/eui' {
	  /**
	   * @see './progress.js'
	   */
	  export type EuiProgressColor =
	    | 'accent'
	    | 'danger'
	    | 'primary'
	    | 'secondary'
	    | 'subdued';

	  export type EuiProgressSize = 'xs' | 's' | 'm' | 'l';

	  export type EuiProgressPosition = 'fixed' | 'absolute' | 'static';

	  export type EuiProgressProps = CommonProps &
	    ProgressHTMLAttributes<HTMLProgressElement> & {
	      size?: EuiProgressSize;
	      color?: EuiProgressColor;
	      position?: EuiProgressPosition;
	      max?: number;
	    };

	  export const EuiProgress: SFC<EuiProgressProps>;
	}

}
declare module '@elastic/eui' {
	import { SFC, ReactNode, HTMLAttributes, MouseEventHandler } from 'react';
	import { CommonProps, Omit } from '@elastic/eui/src/components/common'; module '@elastic/eui' {
	  export type EuiStepStatus = 'complete' | 'incomplete' | 'warning' | 'danger' | 'disabled'

	  /**
	   * @see './step.js'
	   */

	  export interface EuiStepProps {
	    children: ReactNode, // required
	    status?: EuiStepStatus,
	    step: number,
	    title: string,
	    headingElement?: string,
	  }

	  type StandaloneEuiStepProps =
	    CommonProps & HTMLAttributes<HTMLDivElement> & EuiStepProps

	  export const EuiStep: SFC<StandaloneEuiStepProps>;

	  /**
	   * @see './steps.js'
	   */

	  export type EuiContainedStepProps = Omit<StandaloneEuiStepProps, 'step'>;

	  export interface EuiStepsProps {
	    firstStepNumber?: number,
	    headingElement?: string,
	    steps: Array<EuiContainedStepProps>,
	  }

	  export const EuiSteps: SFC<
	    CommonProps & HTMLAttributes<HTMLDivElement> & EuiStepsProps
	  >;

	  /**
	   * @see './sub_steps.js'
	   */

	  export interface EuiSubStepsProps {
	  }

	  export const EuiSubSteps: SFC<
	    CommonProps & HTMLAttributes<HTMLDivElement> & EuiSubStepsProps
	  >;

	  /**
	   * @see './steps_horizontal.js'
	   */

	  // EuiStepHorizontal is not exported by EUI
	  type EuiStepHorizontalProp = CommonProps & HTMLAttributes<HTMLDivElement> & {
	    isSelected?: boolean,
	    isComplete?: boolean,
	    onClick: MouseEventHandler<HTMLDivElement>, // required
	    step: number,
	    title: ReactNode,
	    disabled?: boolean,
	    status?: EuiStepStatus,
	  };

	  type ContainedEuiStepHorizontalProps = Omit<EuiStepHorizontalProp, 'step'>;

	  export interface EuiStepsHorizontalProps {
	    steps: Array<ContainedEuiStepHorizontalProps>,
	  }

	  export const EuiStepsHorizontal: SFC<
	    CommonProps & HTMLAttributes<HTMLDivElement> & EuiStepsHorizontalProps
	  >;
	}


}
declare module '@elastic/eui' {
	import { CommonProps } from '@elastic/eui/src/components/common';

	import { SFC } from 'react'; module '@elastic/eui' {
	  /**
	   * table pagination type defs
	   *
	   * @see './table_pagination.js'
	   */

	  export type PageChangeHandler = (pageIndex: number) => void;
	  export type ItemsPerPageChangeHandler = (pageSize: number) => void;

	  export interface EuiTablePaginationProps {
	    activePage?: number;
	    itemsPerPage?: number;
	    itemsPerPageOptions?: number[];
	    onChangeItemsPerPage?: ItemsPerPageChangeHandler;
	    onChangePage?: PageChangeHandler;
	    pageCount?: number;
	  }

	  export const EuiTablePagination: SFC<EuiTablePaginationProps>;
	}

}
declare module '@elastic/eui/src/services/alignment' {
	export const LEFT_ALIGNMENT = "left";
	export const RIGHT_ALIGNMENT = "right";
	export const CENTER_ALIGNMENT = "center";
	export type HorizontalAlignment = 'left' | 'right' | 'center';

}
declare module '@elastic/eui' {
	
	import { CommonProps, NoArgCallback } from '@elastic/eui/src/components/common';
	import { IconType } from '@elastic/eui';
	import { HorizontalAlignment } from '@elastic/eui/src/services/alignment';

	import {
	  SFC,
	  HTMLAttributes,
	  TableHTMLAttributes,
	  ButtonHTMLAttributes,
	  ThHTMLAttributes,
	  TdHTMLAttributes
	} from 'react'; module '@elastic/eui' {
	  /**
	   * table type defs
	   *
	   * @see './table.js'
	   */

	  export interface EuiTableProps {
	    compressed?: boolean;
	    responsive?: boolean;
	  }

	  export const EuiTable: SFC<
	    CommonProps & TableHTMLAttributes<HTMLTableElement> & EuiTableProps
	  >;

	  /**
	   * table body type defs
	   *
	   * @see './table_body.js'
	   */

	  export interface EuiTableBodyProps {}

	  export const EuiTableBody: SFC<CommonProps & EuiTableBodyProps>;

	  /**
	   * table header type defs
	   *
	   * @see './table_header.js'
	   */

	  export interface EuiTableHeaderProps {}

	  export const EuiTableHeader: SFC<CommonProps & EuiTableHeaderProps>;

	  /**
	   * table header button type defs
	   *
	   * @see './table_header_button.js'
	   */

	  export interface EuiTableHeaderButtonProps {
	    iconType?: IconType;
	  }

	  export const EuiTableHeaderButton: SFC<
	    CommonProps &
	      ButtonHTMLAttributes<HTMLButtonElement> &
	      EuiTableHeaderButtonProps
	  >;

	  /**
	   * table header cell type defs
	   *
	   * @see './table_header_cell.js'
	   */

	  export type TableHeaderCellScope = 'col' | 'row' | 'colgroup' | 'rowgroup';

	  export interface EuiTableHeaderCellProps {
	    align?: HorizontalAlignment;
	    width?: string;
	    onSort?: NoArgCallback<void>;
	    isSorted?: boolean;
	    isSortAscending?: boolean;
	    scope?: TableHeaderCellScope;
	  }

	  export const EuiTableHeaderCell: SFC<
	    CommonProps &
	      ThHTMLAttributes<HTMLTableHeaderCellElement> &
	      EuiTableHeaderCellProps
	  >;

	  /**
	   * table header cell checkbox type defs
	   *
	   * @see './table_header_cell_checkbox.js'
	   */

	  export type EuiTableHeaderCellCheckboxScope =
	    | 'col'
	    | 'row'
	    | 'colgroup'
	    | 'rowgroup';

	  export interface EuiTableHeaderCellCheckboxProps {
	    width?: string;
	    scope?: EuiTableHeaderCellCheckboxScope;
	  }

	  export const EuiTableHeaderCellCheckbox: SFC<
	    CommonProps &
	      TdHTMLAttributes<HTMLTableCellElement> &
	      EuiTableHeaderCellCheckboxProps
	  >;

	  /**
	   * table row type defs
	   *
	   * @see './table_row.js'
	   */

	  export interface EuiTableRowProps {
	    isSelected?: boolean;
	  }

	  export const EuiTableRow: SFC<
	    CommonProps & EuiTableRowProps & HTMLAttributes<HTMLTableRowElement>
	  >;

	  /**
	   * table row cell type defs
	   *
	   * @see './table_row_cell.js'
	   */

	  export interface EuiTableRowCellProps {
	    align?: HorizontalAlignment;
	    hasActions?: boolean;
	    header?: string;
	    hideForMobile?: boolean;
	    isExpander?: boolean;
	    isMobileFullWidth?: boolean;
	    isMobileHeader?: boolean;
	    showOnHover?: boolean;
	    textOnly?: boolean;
	    truncateText?: boolean;
	  }

	  export const EuiTableRowCell: SFC<
	    CommonProps & TdHTMLAttributes<HTMLTableCellElement> & EuiTableRowCellProps
	  >;

	  /**
	   * table row cell checkbox type defs
	   *
	   * @see './table_row_cell_checkbox.js'
	   */

	  export interface EuiTableRowCellCheckboxProps {}

	  export const EuiTableRowCellCheckbox: SFC<
	    CommonProps &
	      TdHTMLAttributes<HTMLTableCellElement> &
	      EuiTableRowCellCheckboxProps
	  >;
	}

}
declare module '@elastic/eui' {
	import { MouseEventHandler, ReactNode, SFC, HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common'; module '@elastic/eui' {
	  type TAB_SIZES = 's' | 'm';

	  type EuiTabProps = {
	    onClick: MouseEventHandler<HTMLButtonElement>;
	    isSelected?: boolean;
	    disabled?: boolean;
	  };

	  type EuiTabsProps = {
	    size?: TAB_SIZES;
	    expand?: boolean;
	  };

	  export interface EuiTabbedContentTab {
	    id: string;
	    name: string;
	    content: ReactNode;
	  }

	  type EuiTabbedContentProps = {
	    tabs: EuiTabbedContentTab[];
	    onTabClick?: (tab: EuiTabbedContentTab) => void;
	    selectedTab?: EuiTabbedContentTab;
	    initialSelectedTab?: EuiTabbedContentTab;
	    size?: TAB_SIZES;
	    expand?: boolean;
	  }

	  export const EuiTab: SFC<EuiTabProps & CommonProps & HTMLAttributes<HTMLDivElement>>;
	  export const EuiTabs: SFC<EuiTabsProps & CommonProps & HTMLAttributes<HTMLDivElement>>;
	  export const EuiTabbedContent: SFC<EuiTabbedContentProps & CommonProps & HTMLAttributes<HTMLDivElement>>;
	}

}
declare module '@elastic/eui' {
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { SFC, HTMLAttributes } from 'react'; module '@elastic/eui' {
	  /**
	   * text type defs
	   *
	   * @see './text.js'
	   * @see './text_color.js'
	   */
	  type TEXT_SIZES = 'm' | 's' | 'xs';

	  /**
	   * text alignment options
	   *
	   * @see './text.js'
	   * @see './text_align.js'
	   */
	  type ALIGNMENTS = 'left' | 'center' | 'right';

	  type COLORS =
	    | 'default'
	    | 'subdued'
	    | 'secondary'
	    | 'accent'
	    | 'danger'
	    | 'warning'
	    | 'ghost';

	  type EuiTextAlignProps = CommonProps &
	    HTMLAttributes<HTMLDivElement> & {
	      textAlign?: ALIGNMENTS;
	    };

	  type EuiTextProps = EuiTextAlignProps & {
	      size?: TEXT_SIZES;
	      color?: COLORS;
	      grow?: boolean;
	    };

	  type EuiTextColorProps = CommonProps &
	    HTMLAttributes<HTMLDivElement> &
	    HTMLAttributes<HTMLSpanElement> & {
	    color?: COLORS;
	  };



	  export const EuiText: SFC<EuiTextProps>;
	  export const EuiTextAlign: SFC<EuiTextAlignProps>;
	  export const EuiTextColor: SFC<EuiTextColorProps>;
	}

}
declare module '@elastic/eui' {
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { SFC } from 'react'; module '@elastic/eui' {
	  /**
	   * title type defs
	   *
	   * @see './title.js'
	   */

	  type EuiTitleSize = 'xxxs' | 'xxs' | 'xs' | 's' | 'm' | 'l';

	  type EuiTitleTextTransform = 'uppercase';

	  type EuiTitleProps = CommonProps & {
	    size?: EuiTitleSize;
	    textTransform?: EuiTitleTextTransform;
	  };

	  export const EuiTitle: SFC<EuiTitleProps>;
	}

}
declare module '@elastic/eui' {
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { IconType } from '@elastic/eui';

	import { Component, SFC, HTMLAttributes, ReactChild } from 'react'; module '@elastic/eui' {
	  /**
	   * EuiToast type def
	   *
	   * @see './toast.js'
	   */
	  export interface EuiToastProps extends CommonProps, HTMLAttributes<HTMLDivElement> {
	    title?: string,
	    color?: 'primary' | 'success' | 'warning' | 'danger',
	    iconType?: IconType,
	    onClose?: () => void,
	  }

	  export const EuiToast: SFC<EuiToastProps>;


	  /**
	   * EuiGlobalToastListItem type def
	   *
	   * @see './global_toast_list_item.js'
	   */
	  export interface EuiGlobalToastListItemProps {
	    isDismissed?: boolean;
	  }

	  export const EuiGlobalToastListItem: SFC<
	    EuiGlobalToastListItemProps
	  >

	  /**
	   * EuiGlobalToastList type def
	   *
	   * @see './global_toast_list.js'
	   */
	  export interface Toast extends EuiToastProps {
	    id: string,
	    text?: ReactChild,
	  }

	  export interface EuiGlobalToastListProps {
	    toasts?: Toast[];
	    dismissToast: (this: EuiGlobalToastList, toast: Toast) => void;
	    toastLifeTimeMs: number
	  }

	  export class EuiGlobalToastList extends Component<EuiGlobalToastListProps> {
	    scheduleAllToastsForDismissal(): void;
	    scheduleToastForDismissal(toast: Toast): void;
	    dismissToast(toast: Toast): void;
	  }
	}

}
declare module '@elastic/eui' {
	import { ReactElement, ReactNode, SFC } from 'react';
	import { EuiIcon } from '@elastic/eui';
	import { Omit, PropsOf } from '@elastic/eui/src/components/common'; module '@elastic/eui' {
	  export type ToolTipPositions =
	    | 'top'
	    | 'right'
	    | 'bottom'
	    | 'left';

	  export type ToolTipDelay =
	    | 'regular'
	    | 'long';

	  export interface EuiToolTipProps {
	    children: ReactElement<any>;
	    className?: string;
	    content?: ReactNode;
	    delay?: ToolTipDelay;
	    title?: ReactNode;
	    id?: string;
	    position?: ToolTipPositions;
	  }
	  export const EuiToolTip: SFC<EuiToolTipProps>;

	  export interface EuiIconTipProps {
	    color?: string;
	    type?: string;
	    size?: string;
	    'aria-label'?: string;
	    iconProps?: PropsOf<typeof EuiIcon>;
	  }
	  export const EuiIconTip: SFC<Omit<EuiToolTipProps, 'children'> & EuiIconTipProps>;
	}

}




































declare module '@elastic/eui' {
  // @ts-ignore
  export * from '@elastic/eui/src/components/common';
}
declare module "@elastic/eui/dist/eui_theme_*.json" {
    const value: any;
    export default value;
}
declare module '@elastic/eui' {
	import { ShallowWrapper, ReactWrapper } from 'enzyme'; module '@elastic/eui' {
	  export function findTestSubject<T extends ShallowWrapper | ReactWrapper> (
	    mountedComponent: T,
	    testSubjectSelector: string
	  ): ReturnType<T["find"]>;
	}

}



declare module '@elastic/eui/src/services/key_codes' {
	export const ENTER = 13;
	export const SPACE = 32;
	export const ESCAPE = 27;
	export const TAB = 9;
	export const BACKSPACE = 8;
	export const DOWN = 40;
	export const UP = 38;
	export const LEFT = 37;
	export const RIGHT = 39;
	export enum keyCodes {
	    ENTER = 13,
	    SPACE = 32,
	    ESCAPE = 27,
	    TAB = 9,
	    BACKSPACE = 8,
	    DOWN = 40,
	    UP = 38,
	    LEFT = 37,
	    RIGHT = 39
	}

}
declare module '@elastic/eui/src/services/accessibility/accessible_click_keys' {
	import { ENTER, SPACE } from '@elastic/eui/src/services/key_codes';
	export const accessibleClickKeys: {
	    [ENTER]: string;
	    [SPACE]: string;
	};

}
declare module '@elastic/eui/src/services/accessibility/cascading_menu_key_codes' {
	/**
	 * These keys are used for navigating cascading menu UI components.
	 *
	 * UP: Select the previous item in the list.
	 * DOWN: Select the next item in the list.
	 * LEFT: Show the previous menu.
	 * RIGHT: Show the next menu for the selected item.
	 * ESC: Deselect the current selection and hide the list.
	 * TAB: Normal tabbing navigation is still supported.
	 */
	export const cascadingMenuKeyCodes: {
	    DOWN: number;
	    ESCAPE: number;
	    LEFT: number;
	    RIGHT: number;
	    UP: number;
	    TAB: number;
	};

}
declare module '@elastic/eui/src/services/accessibility/combo_box_key_codes' {
	/**
	 * These keys are used for navigating combobox UI components.
	 *
	 * UP: Select the previous item in the list.
	 * DOWN: Select the next item in the list.
	 * ENTER / TAB: Complete input with the current selection.
	 * ESC: Deselect the current selection and hide the list.
	 */
	export const comboBoxKeyCodes: {
	    DOWN: number;
	    ENTER: number;
	    ESCAPE: number;
	    TAB: number;
	    UP: number;
	};

}
declare module '@elastic/eui/src/services/accessibility/html_id_generator' {
	/**
	 * This function returns a function to generate ids.
	 * This can be used to generate unique, but predictable ids to pair labels
	 * with their inputs. It takes an optional prefix as a parameter. If you don't
	 * specify it, it generates a random id prefix. If you specify a custom prefix
	 * it should begin with an letter to be HTML4 compliant.
	 */
	export function htmlIdGenerator(idPrefix?: string): (suffix?: string | undefined) => string;

}
declare module '@elastic/eui/src/services/accessibility' {
	export { accessibleClickKeys } from '@elastic/eui/src/services/accessibility/accessible_click_keys';
	export { cascadingMenuKeyCodes } from '@elastic/eui/src/services/accessibility/cascading_menu_key_codes';
	export { comboBoxKeyCodes } from '@elastic/eui/src/services/accessibility/combo_box_key_codes';
	export { htmlIdGenerator } from '@elastic/eui/src/services/accessibility/html_id_generator';

}
declare module '@elastic/eui/src/services/color/is_color_dark' {
	/**
	 * This function calculates if the specified color is "dark", which usually means
	 * you need light text if you use it as a background color to fulfill WCAG contrast
	 * requirement.
	 * The color must be specified via its red, green and blue value in the range of
	 * 0 to 255.
	 * The formula is based on this Stackoverflow answer: https://stackoverflow.com/a/3943023
	 * which itself is based upon the WCAG recommendation for color contrast.
	 *
	 * @param {number} red The red component in the range 0 to 255
	 * @param {number} green The green component in the range 0 to 255
	 * @param {number} blue The blue component in the range 0 to 255
	 * @returns {boolean} True if the color is dark, false otherwise.
	 */
	export function isColorDark(red: number, green: number, blue: number): boolean;

}
declare module '@elastic/eui/src/services/color/color_types' {
	export type rgbDef = [number, number, number];

}
declare module '@elastic/eui/src/services/color/hex_to_rgb' {
	import { rgbDef } from '@elastic/eui/src/services/color/color_types';
	export function hexToRgb(hex: string): rgbDef;

}
declare module '@elastic/eui/src/services/color/rgb_to_hex' {
	export function rgbToHex(rgb: string): string;

}
declare module '@elastic/eui/src/services/color/luminance_and_contrast' {
	import { rgbDef } from '@elastic/eui/src/services/color/color_types';
	export function calculateLuminance(r: number, g: number, b: number): number;
	export function calculateContrast(rgb1: rgbDef, rgb2: rgbDef): number;

}
declare module '@elastic/eui/src/services/color/visualization_colors' {
	export const VISUALIZATION_COLORS: string[];
	export const DEFAULT_VISUALIZATION_COLOR: string;

}
declare module '@elastic/eui/src/services/color/color_palette' {
	/**
	 * This function takes a color palette name and returns an array of hex color
	 * codes for use in UI elements such as charts.
	 *
	 * @param {string} hexStart The beginning hexadecimal color code
	 * @param {string} hexEnd The ending hexadecimal color code
	 * @param {number} len The number of colors in the resulting array (default 10)
	 * @returns {Array} Returns an array of hexadecimal color codes
	 */
	export function colorPalette(hexStart: string, hexEnd: string, len?: number): string[];

}
declare module '@elastic/eui/src/services/color/eui_palettes' {
	interface EuiPalette {
	    colors: string[];
	}
	export const palettes: {
	    euiPaletteColorBlind: EuiPalette;
	    euiPaletteForLightBackground: EuiPalette;
	    euiPaletteForDarkBackground: EuiPalette;
	    euiPaletteForStatus: EuiPalette;
	};
	export {};

}
declare module '@elastic/eui/src/services/color' {
	export { isColorDark } from '@elastic/eui/src/services/color/is_color_dark';
	export { hexToRgb } from '@elastic/eui/src/services/color/hex_to_rgb';
	export { rgbToHex } from '@elastic/eui/src/services/color/rgb_to_hex';
	export { calculateContrast, calculateLuminance, } from '@elastic/eui/src/services/color/luminance_and_contrast';
	export { VISUALIZATION_COLORS, DEFAULT_VISUALIZATION_COLOR, } from '@elastic/eui/src/services/color/visualization_colors';
	export { colorPalette } from '@elastic/eui/src/services/color/color_palette';
	export { palettes } from '@elastic/eui/src/services/color/eui_palettes';
	export { rgbDef } from '@elastic/eui/src/services/color/color_types';

}
declare module '@elastic/eui/src/services/copy_to_clipboard' {
	export function copyToClipboard(text: string): boolean;

}
declare module '@elastic/eui/src/services/predicate/common_predicates' {
	export const always: (value?: any) => boolean;
	export const never: (value?: any) => boolean;
	export const isUndefined: (value: any) => boolean;
	export const isNull: (value: any) => boolean;
	export const isNil: (value: any) => boolean;
	export const isMoment: (value: any) => boolean;
	export const isDate: (value: any) => boolean;
	export const isDateLike: (value: any) => boolean;

}
declare module '@elastic/eui/src/services/predicate/lodash_predicates' {
	export { isFunction, isArray, isString, isBoolean, isNumber, isNaN, } from 'lodash';

}
declare module '@elastic/eui/src/services/predicate' {
	export * from '@elastic/eui/src/services/predicate/common_predicates';
	export * from '@elastic/eui/src/services/predicate/lodash_predicates';

}
declare module '@elastic/eui/src/services/format/format_boolean' {
	export const formatBoolean: (value: boolean, { yes, no, nil }?: {
	    yes?: string;
	    no?: string;
	    nil?: string;
	}) => string;

}
declare module '@elastic/eui/src/services/format/format_date' {
	import moment from 'moment';
	export const dateFormatAliases: {
	    [alias: string]: any;
	}; type DateFormat = keyof typeof dateFormatAliases;
	interface FormatDateConfig {
	    format: DateFormat;
	    nil: string;
	    options: any;
	}
	export const formatDate: (value?: string | number | void | moment.Moment | Date | (string | number)[] | moment.MomentInputObject | undefined, dateFormatKeyOrConfig?: string | Partial<FormatDateConfig>) => any;
	export {};

}
declare module '@elastic/eui/src/services/format/format_number' {
	interface FormatNumberConfig {
	    format: string;
	    nil: string;
	    round: boolean;
	}
	export const formatNumber: (value?: number | null | undefined, numberFormatOrConfig?: string | Partial<FormatNumberConfig>) => string;
	export {};

}
declare module '@elastic/eui/src/services/format/format_text' {
	interface FormatTextOptions {
	    nil: string;
	}
	export const formatText: (value?: any, options?: Partial<FormatTextOptions>) => any;
	export {};

}
declare module '@elastic/eui/src/services/format/format_auto' {
	export const formatAuto: (value: any) => string;

}
declare module '@elastic/eui/src/services/format' {
	export { formatAuto } from '@elastic/eui/src/services/format/format_auto';
	export { formatBoolean } from '@elastic/eui/src/services/format/format_boolean';
	export { formatDate, dateFormatAliases } from '@elastic/eui/src/services/format/format_date';
	export { formatNumber } from '@elastic/eui/src/services/format/format_number';
	export { formatText } from '@elastic/eui/src/services/format/format_text';

}
declare module '@elastic/eui/src/services/paging/pager' {
	export class Pager {
	    currentPageIndex: number;
	    firstItemIndex: number;
	    itemsPerPage: number;
	    lastItemIndex: number;
	    totalItems: number;
	    totalPages: number;
	    constructor(totalItems: number, itemsPerPage: number, initialPageIndex?: number);
	    setTotalItems: (totalItems: number) => void;
	    setItemsPerPage: (itemsPerPage: number) => void;
	    isPageable: () => boolean;
	    getTotalPages: () => number;
	    getCurrentPageIndex: () => number;
	    getFirstItemIndex: () => number;
	    getLastItemIndex: () => number;
	    hasNextPage: () => boolean;
	    hasPreviousPage: () => boolean;
	    goToNextPage: () => void;
	    goToPreviousPage: () => void;
	    goToPageIndex: (pageIndex: number) => void;
	    update: () => void;
	}

}
declare module '@elastic/eui/src/services/paging' {
	export { Pager } from '@elastic/eui/src/services/paging/pager';

}
declare module '@elastic/eui/src/services/utils' {
	export { times, memoize } from 'lodash';
	export const browserTick: (callback: FrameRequestCallback) => void;

}
declare module '@elastic/eui/src/services/random' {
	import moment from 'moment';
	export class Random {
	    private readonly rand;
	    constructor(rand?: () => number);
	    boolean: () => boolean;
	    number: (options?: {
	        min?: number | undefined;
	        max?: number | undefined;
	    }) => number;
	    integer: (options?: {
	        min?: number | undefined;
	        max?: number | undefined;
	    }) => number;
	    oneOf: <T>(values: T[]) => T;
	    oneToOne: <T>(values: T[], index: number) => T;
	    setOf: <T>(values: T[], options?: {
	        min?: number | undefined;
	        max?: number | undefined;
	    }) => T[];
	    date: (options?: {
	        min?: Date | undefined;
	        max?: Date | undefined;
	    }) => Date;
	    moment: (options?: {
	        min?: moment.Moment | undefined;
	        max?: moment.Moment | undefined;
	    }) => moment.Moment;
	}

}
declare module '@elastic/eui/src/services/url' {
	export const isDomainSecure: (url?: string) => boolean;

}
declare module '@elastic/eui/src/services/security/get_secure_rel_for_target' {
	export const getSecureRelForTarget: ({ href, target, rel, }: {
	    href?: string | undefined;
	    target?: string | undefined;
	    rel?: string | undefined;
	}) => string | undefined;

}
declare module '@elastic/eui/src/services/security' {
	export { getSecureRelForTarget } from '@elastic/eui/src/services/security/get_secure_rel_for_target';

}
declare module '@elastic/eui/src/services/string/to_initials' {
	/**
	 * This function calculates the initials/acronym for a given name.
	 * It defaults to only 2 characters and will take the first character (of each word).
	 * If only one word is supplied for the name, it will only pass back the first letter of the word,
	 * unless forced to 2 letters by setting `initialsLength` to `2`.
	 * It will pass back the characters with the same casing as the original string
	 * unless otherwise specified.
	 *
	 * @param {string} name The full name of the item to turn into initials
	 * @param {number} initialsLength (Optional) How many characters to show (max 2 allowed)
	 * @param {string} initials (Optional) Custom initials (max 2 characters)
	 * @returns {string} True if the color is dark, false otherwise.
	 */
	export const MAX_INITIALS: number;
	export function toInitials(name: string, initialsLength?: 1 | 2, initials?: string): string | null;

}
declare module '@elastic/eui/src/services/string' {
	export { toInitials } from '@elastic/eui/src/services/string/to_initials';

}
declare module '@elastic/eui/src/services/sort/sort_direction' {
	import PropTypes from 'prop-types'; const ASC: 'asc'; const DESC: 'desc';
	export type Direction = typeof ASC | typeof DESC;
	export const SortDirection: Readonly<{
	    ASC: "asc";
	    DESC: "desc";
	    isAsc(direction: Direction): boolean;
	    reverse(direction: Direction): Direction;
	}>;
	export const SortDirectionType: PropTypes.Requireable<any>;
	export {};

}
declare module '@elastic/eui/src/services/objects' {
	export { get, omit } from 'lodash';

}
declare module '@elastic/eui/src/services/sort/comparators' {
	export type Primitive = string | boolean | number | null | undefined; type Comparator<T = Primitive> = (a: T, b: T) => number;
	export const Comparators: Readonly<{
	    default: (direction?: import("@elastic/eui/src/services/sort/sort_direction").Direction) => (v1: Primitive, v2: Primitive) => number;
	    reverse: <T>(comparator: Comparator<T>) => Comparator<T>;
	    value<T>(valueCallback: (value: T) => Primitive, comparator?: Comparator<Primitive> | undefined): Comparator<T>;
	    property<T>(prop: string, comparator?: Comparator<Primitive> | undefined): Comparator<T>;
	}>;
	export {};

}
declare module '@elastic/eui/src/services/sort/sortable_properties' {
	import { Primitive } from '@elastic/eui/src/services/sort/comparators';
	export interface SortableProperty<T> {
	    name: string;
	    getValue: (obj: T) => Primitive;
	    isAscending: boolean;
	}
	/**
	 * @typedef {Object} SortableProperty
	 * @property {string} sortableProperty.name - Name of the property.
	 * @property {function} sortableProperty.getValue - A function that takes in an object and returns a value to sort
	 * by.
	 * @property {boolean} sortableProperty.isAscending - The direction of the last sort by this property. Used to preserve
	 * past sort orders.
	 */
	/**
	 * Stores sort information for a set of SortableProperties, including which property is currently being sorted on, as
	 * well as the last sort order for each property.
	 */
	export class SortableProperties<T> {
	    sortableProperties: Array<SortableProperty<T>>;
	    currentSortedProperty: SortableProperty<T>;
	    /**
	     * @param {Array<SortableProperty>} sortableProperties - a set of sortable properties.
	     * @param {string} initialSortablePropertyName - Which sort property should be sorted on by default.
	     */
	    constructor(sortableProperties: Array<SortableProperty<T>>, initialSortablePropertyName: string);
	    /**
	     * @returns {SortableProperty} The current property that is being sorted on. Undefined if no sort order is applied.
	     */
	    getSortedProperty(): SortableProperty<T>;
	    /**
	     * Sorts the items passed in and returns a newly sorted array.
	     * @param items {Array.<Object>}
	     * @returns {Array.<Object>} sorted array of items, based off the sort properties.
	     */
	    sortItems(items: T[]): T[];
	    /**
	     * Returns the SortProperty with the given name, if found.
	     * @param {String} propertyName
	     * @returns {SortableProperty|undefined}
	     */
	    getSortablePropertyByName(propertyName: string): SortableProperty<T> | undefined;
	    /**
	     * Updates the sort property, potentially flipping the sort order based on whether the same
	     * property was already being sorted.
	     * @param propertyName {String}
	     */
	    sortOn(propertyName: string): void;
	    /**
	     * @returns {boolean} True if the current sortable property is sorted in ascending order.
	     */
	    isCurrentSortAscending(): boolean;
	    /**
	     * @param {string} propertyName
	     * @returns {boolean} True if the given sort property is sorted in ascending order.
	     */
	    isAscendingByName(propertyName: string): boolean;
	    /**
	     * Flips the current sorted property sort order.
	     */
	    flipCurrentSortOrder(): void;
	}

}
declare module '@elastic/eui/src/services/sort/property_sort' {
	import PropTypes from 'prop-types';
	export const PropertySortType: PropTypes.Requireable<any>;

}
declare module '@elastic/eui/src/services/sort' {
	export { SortableProperties } from '@elastic/eui/src/services/sort/sortable_properties';
	export { SortDirectionType, SortDirection } from '@elastic/eui/src/services/sort/sort_direction';
	export { PropertySortType } from '@elastic/eui/src/services/sort/property_sort';
	export { Comparators } from '@elastic/eui/src/services/sort/comparators';

}
declare module '@elastic/eui/src/services/popover/types' {
	export type EuiPopoverPosition = 'top' | 'right' | 'bottom' | 'left';

}
declare module '@elastic/eui/src/services/popover/calculate_popover_position' {
	import { EuiPopoverPosition } from '@elastic/eui/src/services/popover/types';
	interface EuiPopoverBoundingBox {
	    top: number;
	    left: number;
	    width: number;
	    height: number;
	}
	interface EuiPopoverAnchorRect extends EuiPopoverBoundingBox {
	    right: number;
	    bottom: number;
	}
	interface EuiPopoverDimensions {
	    width: number;
	    height: number;
	}
	interface EuiPopoverPositionedBox extends EuiPopoverBoundingBox {
	    position: EuiPopoverPosition;
	}
	/**
	 * Determine the best position for a popover that avoids clipping by the window view port.
	 *
	 * @param {Object} anchorBounds - getBoundingClientRect() of the node the popover is tethered to (e.g. a button).
	 * @param {Object} popoverBounds - getBoundingClientRect() of the popover node (e.g. the tooltip).
	 * @param {string} requestedPosition - Position the user wants. One of ["top", "right", "bottom", "left"]
	 * @param {number} buffer - The space between the wrapper and the popover. Also the minimum space between the
	 * popover and the window.
	 * @param {Array} positions - List of acceptable positions. Defaults to ["top", "right", "bottom", "left"].
	 *
	 * @returns {Object} With properties position (one of ["top", "right", "bottom", "left"]), left, top, width, and height.
	 */
	export function calculatePopoverPosition(anchorBounds: EuiPopoverAnchorRect, popoverBounds: EuiPopoverDimensions, requestedPosition: EuiPopoverPosition, buffer?: number, positions?: EuiPopoverPosition[]): EuiPopoverPositionedBox;
	export {};

}
declare module '@elastic/eui/src/services/popover/popover_positioning' {
	import { EuiPopoverPosition } from '@elastic/eui/src/services/popover/types';
	export const POSITIONS: EuiPopoverPosition[];
	interface BoundingBox {
	    [position: string]: number;
	    top: number;
	    right: number;
	    bottom: number;
	    left: number;
	}
	export interface EuiClientRect extends BoundingBox {
	    height: number;
	    width: number;
	}
	interface FindPopoverPositionArgs {
	    anchor: HTMLElement;
	    popover: HTMLElement;
	    align?: EuiPopoverPosition;
	    position: EuiPopoverPosition;
	    forcePosition?: boolean;
	    buffer?: number;
	    offset?: number;
	    allowCrossAxis?: boolean;
	    container?: HTMLElement;
	    arrowConfig?: {
	        arrowWidth: number;
	        arrowBuffer: number;
	    };
	}
	/**
	 * Calculates the absolute positioning (relative to document.body) to place a popover element
	 *
	 * @param anchor {HTMLElement} Element to anchor the popover to
	 * @param popover {HTMLElement} Element containing the popover content
	 * @param position {string} Position the user wants. One of ["top", "right", "bottom", "left"]
	 * @param [forcePosition] {boolean} If true, use only the provided `position` value and don't try any other position
	 * @param [align] {string} Cross-axis alignment. One of ["top", "right", "bottom", "left"]
	 * @param [buffer=16] {number} Minimum distance between the popover and the bounding container
	 * @param [offset=0] {number} Distance between the popover and the anchor
	 * @param [allowCrossAxis=true] {boolean} Whether to allow the popover to be positioned on the cross-axis
	 * @param [container] {HTMLElement} Element the popover must be constrained to fit within
	 * @param [arrowConfig] {{arrowWidth: number, arrowBuffer: number}} If
	 *  present, describes the size & constraints for an arrow element, and the
	 *  function return value will include an `arrow` param with position details
	 *
	 * @returns {{
	 *   top: number,
	 *   left: number,
	 *   position: string,
	 *   fit: number,
	 *   arrow?: {left: number, top: number}
	 * } | null} absolute page coordinates for the popover, and the
	 *  placements's relation to the anchor; if there's no room this returns null
	 */
	export function findPopoverPosition({ anchor, popover, align, position, forcePosition, buffer, offset, allowCrossAxis, container, arrowConfig, }: FindPopoverPositionArgs): {
	    fit: number;
	    position: EuiPopoverPosition;
	    top: number;
	    left: number;
	    arrow: {
	        [x: string]: number | undefined;
	    } | undefined;
	} | null;
	interface GetPopoverScreenCoordinatesArgs {
	    position: EuiPopoverPosition;
	    align?: EuiPopoverPosition | null;
	    anchorBoundingBox: EuiClientRect;
	    popoverBoundingBox: EuiClientRect;
	    windowBoundingBox: EuiClientRect;
	    containerBoundingBox: EuiClientRect;
	    arrowConfig?: {
	        arrowWidth: number;
	        arrowBuffer: number;
	    };
	    offset?: number;
	    buffer?: number;
	}
	/**
	 * Given a target position and the popover's surrounding context, returns either an
	 * object with {top, left} screen coordinates or `null` if it's not possible to show
	 * content in the target position
	 * @param position {string} the target position, one of ["top", "right", "bottom", "left"]
	 * @param align {string} target alignment on the cross-axis, one of ["top", "right", "bottom", "left"]
	 * @param anchorBoundingBox {Object} bounding box of the anchor element
	 * @param popoverBoundingBox {Object} bounding box of the popover element
	 * @param windowBoundingBox {Object} bounding box of the window
	 * @param containerBoundingBox {Object} bounding box of the container
	 * @param [arrowConfig] {{arrowWidth: number, arrowBuffer: number}} If present, describes the size &
	 *  constraints for an arrow element, and the function return value will include an `arrow` param
	 *  with position details
	 * @param [offset=0] {number} Distance between the popover and the anchor
	 * @param [buffer=0] {number} Minimum distance between the popover's
	 *  placement and the container edge
	 *
	 * @returns {{top: number, left: number, relativePlacement: string, fit:
	 * number, arrow?: {top: number, left: number}}|null}
	 *  object with top/left coordinates, the popover's relative position to the anchor, and how well the
	 *  popover fits in the location (0.0 -> 1.0) oordinates and the popover's relative position, if
	 *  there is no room in this placement then null
	 */
	export function getPopoverScreenCoordinates({ position, align, anchorBoundingBox, popoverBoundingBox, windowBoundingBox, containerBoundingBox, arrowConfig, offset, buffer, }: GetPopoverScreenCoordinatesArgs): {
	    fit: number;
	    top: number;
	    left: number;
	    arrow: {
	        [x: string]: number | undefined;
	    } | undefined;
	};
	/**
	 * Finds the client pixel coordinate of each edge for the element's bounding box,
	 * and the bounding box's width & height
	 *
	 * @param {HTMLElement} element
	 * @returns {{top: number, right: number, bottom: number, left: number, height: number, width: number}}
	 */
	export function getElementBoundingBox(element: HTMLElement): EuiClientRect;
	/**
	 * Calculates the available content space between anchor and container
	 *
	 * @param {Object} anchorBoundingBox Client bounding box of the anchor element
	 * @param {Object} containerBoundingBox Client bounding box of the container element
	 * @param {number} buffer Minimum distance between the popover and the bounding container
	 * @param {number} offset Distance between the popover and the anchor
	 * @param {string} offsetSide Side the offset needs to be applied to, one
	 *  of ["top", "right", "bottom", "left"]
	 * @returns {{top: number, right: number, bottom: number, left: number}}
	 */
	export function getAvailableSpace(anchorBoundingBox: BoundingBox, containerBoundingBox: BoundingBox, buffer: number, offset: number, offsetSide: EuiPopoverPosition): BoundingBox;
	/**
	 * Computes the fit (overlap) of the content within the container, fit is in range 0.0 => 1.0
	 * @param contentBoundingBox bounding box of content to calculate fit for
	 * @param containerBoundingBox bounding box of container
	 * @returns {number}
	 */
	export function getVisibleFit(contentBoundingBox: BoundingBox, containerBoundingBox: BoundingBox): number;
	/**
	 * Calculates the intersection space between two bounding boxes
	 *
	 * @param firstBox
	 * @param secondBox
	 * @returns {EuiClientRect}
	 */
	export function intersectBoundingBoxes(firstBox: BoundingBox, secondBox: BoundingBox): EuiClientRect;
	/**
	 * Returns the top-most defined z-index in the element's ancestor hierarchy
	 * relative to the `target` element; if no z-index is defined, returns "0"
	 * @param element {HTMLElement}
	 * @param cousin {HTMLElement}
	 * @returns {string}
	 */
	export function getElementZIndex(element: HTMLElement, cousin: HTMLElement): string;
	export {};

}
declare module '@elastic/eui/src/services/popover' {
	export { calculatePopoverPosition } from '@elastic/eui/src/services/popover/calculate_popover_position';
	export { findPopoverPosition } from '@elastic/eui/src/services/popover/popover_positioning';

}
declare module '@elastic/eui/src/services/window_event/window_event' {
	import { Component } from 'react'; type EventNames = keyof WindowEventMap;
	interface Props<Ev extends EventNames> {
	    event: Ev;
	    handler: (this: Window, ev: WindowEventMap[Ev]) => any;
	}
	export class EuiWindowEvent<E extends EventNames> extends Component<Props<E>> {
	    componentDidMount(): void;
	    componentDidUpdate(prevProps: Props<E>): void;
	    componentWillUnmount(): void;
	    addEvent<Ev extends EventNames>({ event, handler }: Props<Ev>): void;
	    removeEvent<Ev extends EventNames>({ event, handler }: Props<Ev>): void;
	    render(): null;
	}
	export {};

}
declare module '@elastic/eui/src/services/window_event' {
	export { EuiWindowEvent } from '@elastic/eui/src/services/window_event/window_event';

}
declare module '@elastic/eui' {
	import * as keyCodes from '@elastic/eui/src/services/key_codes';
	export { keyCodes };
	export { accessibleClickKeys, cascadingMenuKeyCodes, comboBoxKeyCodes, htmlIdGenerator, } from '@elastic/eui/src/services/accessibility';
	export { LEFT_ALIGNMENT, RIGHT_ALIGNMENT, CENTER_ALIGNMENT } from '@elastic/eui/src/services/alignment';
	export { isColorDark, calculateContrast, calculateLuminance, hexToRgb, rgbToHex, VISUALIZATION_COLORS, DEFAULT_VISUALIZATION_COLOR, colorPalette, palettes, } from '@elastic/eui/src/services/color';
	export { copyToClipboard } from '@elastic/eui/src/services/copy_to_clipboard';
	export { formatAuto, formatBoolean, formatDate, formatNumber, formatText, } from '@elastic/eui/src/services/format';
	export { Pager } from '@elastic/eui/src/services/paging';
	export { Random } from '@elastic/eui/src/services/random';
	export { getSecureRelForTarget } from '@elastic/eui/src/services/security';
	export { toInitials } from '@elastic/eui/src/services/string';
	export { PropertySortType, SortDirectionType, SortDirection, SortableProperties, Comparators, } from '@elastic/eui/src/services/sort';
	export { calculatePopoverPosition, findPopoverPosition } from '@elastic/eui/src/services/popover';
	export { EuiWindowEvent } from '@elastic/eui/src/services/window_event';

}
declare module '@elastic/eui/src/components/accessibility/keyboard_accessible' {
	/**
	 * Interactive elements must be able to receive focus.
	 *
	 * Ideally, this means using elements that are natively keyboard accessible (<a href="">,
	 * <input type="button">, or <button>). Note that links should be used when navigating and buttons
	 * should be used when performing an action on the page.
	 *
	 * If, however, you need to use elements that aren't natively keyboard accessible (for example, <div>,
	 * <p>, or <a> without the href attribute), then you need to allow them to receive focus and to
	 * respond to keyboard input. The workaround is to:
	 *
	 *   - Give the element tabindex="0" so that it can receive keyboard focus.
	 *   - Add a JavaScript onkeyup event handler that triggers element functionality if the Enter key
	 *     is pressed while the element is focused. This is necessary because some browsers do not trigger
	 *    onclick events for such elements when activated via the keyboard.
	 *   - If the item is meant to function as a button, the onkeyup event handler should also detect the
	 *     Spacebar in addition to the Enter key, and the element should be given role="button".
	 *
	 * Wrap any such elements that aren't natively keyboard accessible in this component to automatically
	 * apply the above workaround to them.
	 */
	import { Component, KeyboardEvent, ReactElement } from 'react';
	interface Props {
	    children: ReactElement<any>;
	}
	export class EuiKeyboardAccessible extends Component<Props> {
	    onKeyDown: (e: KeyboardEvent<any>) => void;
	    onKeyUp: (e: KeyboardEvent<any>) => void;
	    applyKeyboardAccessibility: (child: ReactElement<any>) => ReactElement<any>;
	    render(): ReactElement<any>;
	}
	export {};

}
declare module '@elastic/eui/src/components/accessibility/screen_reader' {
	import { ReactElement, SFC } from 'react';
	export interface EuiScreenReaderOnlyProps {
	    children: ReactElement<any>;
	}
	export const EuiScreenReaderOnly: SFC<EuiScreenReaderOnlyProps>;

}
declare module '@elastic/eui' {
	export { EuiKeyboardAccessible } from '@elastic/eui/src/components/accessibility/keyboard_accessible';
	export { EuiScreenReaderOnly } from '@elastic/eui/src/components/accessibility/screen_reader';

}
declare module '@elastic/eui/src/components/accessibility/keyboard_accessible.test' {
	export {};

}
declare module '@elastic/eui/src/components/accessibility/screen_reader.test' {
	export {};

}
declare module '@elastic/eui/src/components/avatar/avatar' {
	import { HTMLAttributes, SFC } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common'; const sizeToClassNameMap: {
	    none: null;
	    s: string;
	    m: string;
	    l: string;
	    xl: string;
	};
	export const SIZES: ("s" | "m" | "l" | "xl" | "none")[];
	export type EuiAvatarSize = keyof typeof sizeToClassNameMap; const typeToClassNameMap: {
	    space: string;
	    user: string;
	};
	export const TYPES: ("user" | "space")[];
	export type EuiAvatarType = keyof typeof typeToClassNameMap;
	export type EuiAvatarProps = HTMLAttributes<HTMLDivElement> & CommonProps & {
	    /**
	     * Full name of avatar for title attribute and calculating initial if not provided
	     */
	    name: string;
	    /**
	     * Accepts hex value `#FFFFFF`, `#000` otherwise a viz palette color will be assigned
	     */
	    color?: string;
	    /**
	     * Custom initials (max 2 characters).
	     * By default will take the first character (of each word).
	     */
	    initials?: string;
	    /**
	     * Specify how many characters to show (max 2 allowed).
	     * By default, will show based on number of words.
	     */
	    initialsLength?: 1 | 2;
	    /**
	     * The type of avatar this is displaying
	     */
	    type?: EuiAvatarType;
	    imageUrl?: string;
	    size?: EuiAvatarSize;
	};
	export const EuiAvatar: SFC<EuiAvatarProps>;
	export {};

}
declare module '@elastic/eui/src/test/required_props' {
	export const requiredProps: {
	    'aria-label': string;
	    className: string;
	    'data-test-subj': string;
	};

}
declare module '@elastic/eui/src/components/badge/notification_badge/badge_notification' {
	import { HTMLAttributes, ReactNode, SFC } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export interface EuiNotificationBadgeProps extends CommonProps, HTMLAttributes<HTMLSpanElement> {
	    children?: ReactNode;
	}
	export const EuiNotificationBadge: SFC<EuiNotificationBadgeProps>;

}
declare module '@elastic/eui/src/components/badge/notification_badge/badge_notification.test' {
	export {};

}
declare module '@elastic/eui' {
	export { EuiNotificationBadge } from '@elastic/eui/src/components/badge/notification_badge/badge_notification';

}
declare module '@elastic/eui/src/components/color_picker/color_picker_empty_swatch' {
	import { SFC } from 'react';
	export const EuiColorPickerEmptySwatch: SFC<{}>;

}
declare module '@elastic/eui/src/components/color_picker/color_picker_swatch' {
	import { HTMLAttributes, SFC } from 'react';
	export interface EuiColorPickerSwatchProps extends HTMLAttributes<HTMLDivElement> {
	    color?: string;
	}
	export const EuiColorPickerSwatch: SFC<EuiColorPickerSwatchProps>;

}
declare module '@elastic/eui/src/components/combo_box/combo_box_options_list/combo_box_title' {
	import { SFC } from 'react';
	export const EuiComboBoxTitle: SFC<{}>;

}
declare module '@elastic/eui/src/components/context/context' {
	import React, { ReactChild } from 'react';
	export interface RenderableValues {
	    [key: string]: ReactChild;
	}
	export type Renderable<T> = ReactChild | ((values: T) => ReactChild);
	export interface I18nShape {
	    mapping?: {
	        [key: string]: Renderable<any>;
	    };
	    formatNumber?: (x: number) => string;
	    formatDateTime?: (x: Date) => string;
	} const EuiI18nConsumer: React.ComponentType<React.ConsumerProps<I18nShape>>;
	interface IEuiContextProps {
	    i18n: I18nShape;
	    children: React.ReactNode;
	} const EuiContext: React.SFC<IEuiContextProps>;
	export { EuiContext, EuiI18nConsumer };

}
declare module '@elastic/eui' {
	export { EuiContext, EuiI18nConsumer } from '@elastic/eui/src/components/context/context';

}
declare module '@elastic/eui/src/components/delay_hide/delay_hide' {
	import { Component, ReactNode } from 'react';
	export interface EuiDelayHideProps {
	    hide?: boolean;
	    minimumDuration?: number;
	    render: () => ReactNode;
	}
	interface EuiDelayHideState {
	    hide?: boolean;
	    countdownExpired?: boolean;
	}
	export class EuiDelayHide extends Component<EuiDelayHideProps, EuiDelayHideState> {
	    static defaultProps: {
	        hide: boolean;
	        minimumDuration: number;
	    };
	    static getDerivedStateFromProps(nextProps: EuiDelayHideProps, prevState: EuiDelayHideState): {
	        hide: boolean | undefined;
	        countdownExpired: boolean | undefined;
	    };
	    state: {
	        hide: boolean | undefined;
	        countdownExpired: boolean | undefined;
	    };
	    private timeoutId?;
	    componentDidMount(): void;
	    componentDidUpdate(prevProps: EuiDelayHideProps): void;
	    componentWillUnmount(): void;
	    startCountdown: () => void;
	    finishCountdown: () => void;
	    render(): {} | null | undefined;
	}
	export {};

}
declare module '@elastic/eui' {
	export { EuiDelayHide } from '@elastic/eui/src/components/delay_hide/delay_hide';

}
declare module '@elastic/eui/src/components/delay_hide/delay_hide.test' {
	export {};

}
declare module '@elastic/eui/src/components/expression/expression' {
	import React, { ButtonHTMLAttributes, HTMLAttributes, MouseEventHandler, ReactNode } from 'react';
	import { CommonProps, ExclusiveUnion } from '@elastic/eui/src/components/common'; const colorToClassNameMap: {
	    subdued: string;
	    primary: string;
	    secondary: string;
	    accent: string;
	    warning: string;
	    danger: string;
	};
	export const COLORS: ("subdued" | "primary" | "secondary" | "accent" | "warning" | "danger")[];
	export type ExpressionColor = keyof typeof colorToClassNameMap;
	export type EuiExpressionProps = CommonProps & {
	    /**
	     * First part of the expression
	     */
	    description: ReactNode;
	    descriptionProps?: HTMLAttributes<HTMLSpanElement>;
	    /**
	     * Second part of the expression
	     */
	    value: ReactNode;
	    valueProps?: HTMLAttributes<HTMLSpanElement>;
	    /**
	     * Color of the `description`
	     */
	    color?: ExpressionColor;
	    /**
	     * Should the `description` auto-uppercase?
	     */
	    uppercase?: boolean;
	    /**
	     * Adds an solid border at the bottom
	     */
	    isActive?: boolean;
	    /**
	     * Turns the component into a button and adds an editable style border at the bottom
	     */
	    onClick?: MouseEventHandler<HTMLButtonElement>;
	}; type Buttonlike = EuiExpressionProps & ButtonHTMLAttributes<HTMLButtonElement> & {
	    onClick: MouseEventHandler<HTMLButtonElement>;
	}; type Spanlike = EuiExpressionProps & HTMLAttributes<HTMLSpanElement>;
	export const EuiExpression: React.SFC<ExclusiveUnion<Buttonlike, Spanlike>>;
	export {};

}
declare module '@elastic/eui/src/components/expression/expression.test' {
	export {};

}
declare module '@elastic/eui' {
	export { EuiExpression } from '@elastic/eui/src/components/expression/expression';

}
declare module '@elastic/eui' {
	import { CommonProps } from '@elastic/eui/src/components/common';

	import { SFC, ReactNode, HTMLAttributes, ChangeEventHandler, InputHTMLAttributes } from 'react'; module '@elastic/eui' {
	  /**
	   * checkbox type defs
	   *
	   * @see './checkbox.js'
	   */

	  export type EuiCheckboxType = 'inList';

	  export interface EuiCheckboxProps {
	    id: string;
	    checked?: boolean;
	    onChange: ChangeEventHandler<HTMLInputElement>; // overriding to make it required
	    label?: ReactNode;
	    type?: EuiCheckboxType;
	    disabled?: boolean;
	    indeterminate?: boolean;
	  }

	  export const EuiCheckbox: SFC<
	    CommonProps & InputHTMLAttributes<HTMLInputElement> & EuiCheckboxProps
	  >;

	  /**
	   * checkbox group type defs
	   *
	   * @see './checkbox_group.js'
	   */

	  export type EuiCheckboxGroupOption = {
	    id: string;
	    label?: ReactNode;
	  };

	  export type EuiCheckboxGroupIdToSelectedMap = { [id: string]: boolean };

	  export interface EuiCheckboxGroupProps {
	    options: EuiCheckboxGroupOption[];
	    idToSelectedMap: EuiCheckboxGroupIdToSelectedMap;
	    onChange: ChangeEventHandler<HTMLInputElement>;
	  }

	  export const EuiCheckboxGroup: SFC<
	    CommonProps & HTMLAttributes<HTMLDivElement> & EuiCheckboxGroupProps
	  >;
	}

}
declare module '@elastic/eui' {
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { IconType } from '@elastic/eui';

	import { ReactNode, SFC, InputHTMLAttributes, Ref } from 'react'; module '@elastic/eui' {

	  /**
	   * text field type defs
	   *
	   * @see './field_number.js'
	   */
	  export interface EuiFieldNumberProps {
	    icon?: IconType;
	    isInvalid?: boolean;
	    fullWidth?: boolean;
	    isLoading?: boolean;
	    compressed?: boolean;
	    prepend?: ReactNode | ReactNode[];
	    append?: ReactNode | ReactNode[];
	    inputRef?: Ref<HTMLInputElement>;
	  }

	  export const EuiFieldNumber: SFC<
	    CommonProps & InputHTMLAttributes<HTMLInputElement> & EuiFieldNumberProps
	    >;
	}

}
declare module '@elastic/eui' {
	import { CommonProps } from '@elastic/eui/src/components/common';

	import { SFC, InputHTMLAttributes, Ref } from 'react'; module '@elastic/eui' {

	  /**
	   * password field type defs
	   *
	   * @see './field_password.js'
	   */
	  export interface EuiFieldPasswordProps {
	    isInvalid?: boolean;
	    inputRef?: Ref<HTMLInputElement>;
	    fullWidth?: boolean;
	    isLoading?: boolean;
	    compressed?: boolean;
	  }

	  export const EuiFieldPassword: SFC<
	    CommonProps & InputHTMLAttributes<HTMLInputElement> & EuiFieldPasswordProps
	  >;
	}

}
declare module '@elastic/eui' {
	import { CommonProps } from '@elastic/eui/src/components/common';

	import { SFC, InputHTMLAttributes } from 'react'; module '@elastic/eui' {
	  /**
	   * search field type defs
	   *
	   * @see './field_search.js'
	   */

	  export interface EuiFieldSearchProps {
	    name?: string;
	    id?: string;
	    placeholder?: string;
	    value?: string;
	    isInvalid?: boolean;
	    fullWidth?: boolean;
	    isLoading?: boolean;
	    incremental?: boolean;
	  }

	  export const EuiFieldSearch: SFC<
	    CommonProps & InputHTMLAttributes<HTMLInputElement> & EuiFieldSearchProps
	  >;
	}

}
declare module '@elastic/eui' {
	import { CommonProps } from '@elastic/eui/src/components/common';

	import { SFC, InputHTMLAttributes, Ref } from 'react'; module '@elastic/eui' {

	  /**
	   * text field type defs
	   *
	   * @see './field_text.js'
	   */
	  export interface EuiFieldTextProps {
	    icon?: string;
	    isInvalid?: boolean;
	    inputRef?: Ref<HTMLInputElement>;
	    fullWidth?: boolean;
	    isLoading?: boolean;
	    prepend?: React.ReactNode;
	    append?: React.ReactNode;
	  }

	  export const EuiFieldText: SFC<
	    CommonProps & InputHTMLAttributes<HTMLInputElement> & EuiFieldTextProps
	    >;
	}

}
declare module '@elastic/eui' {
	import { CommonProps } from '@elastic/eui/src/components/common';
	

	import { ReactNode, SFC, HTMLAttributes } from 'react'; module '@elastic/eui' {

	  /**
	   * @see './field_help_text.js'
	   */
	  export interface EuiFormHelpTextProps {
	  }

	  export const EuiFormHelpText: SFC<
	    CommonProps & HTMLAttributes<HTMLDivElement> & EuiFormHelpTextProps
	    >;
	}

}
declare module '@elastic/eui' {
	import { CommonProps } from '@elastic/eui/src/components/common';

	import { SFC, ReactNode, LabelHTMLAttributes } from 'react'; module '@elastic/eui' {
	  /**
	   * @see './form_label.js'
	   */

	  export type EuiFormLabelProps = CommonProps &
	    LabelHTMLAttributes<HTMLLabelElement> & {
	      isFocused?: boolean;
	      isInvalid?: boolean;
	    };

	  export const EuiFormLabel: SFC<EuiFormLabelProps>;
	}

}
declare module '@elastic/eui' {
	import { CommonProps } from '@elastic/eui/src/components/common';

	import { SFC, ReactNode, HTMLAttributes } from 'react'; module '@elastic/eui' {
	  /**
	   * @see './form_row.js'
	   */

	  export type EuiFormRowProps = CommonProps &
	    HTMLAttributes<HTMLDivElement> & {
	      error?: ReactNode | ReactNode[];
	      fullWidth?: boolean;
	      hasEmptyLabelSpace?: boolean;
	      helpText?: ReactNode;
	      isInvalid?: boolean;
	      label?: ReactNode;
	      describedByIds?: string[];
	      compressed?: boolean;
	    };

	  export const EuiFormRow: SFC<EuiFormRowProps>;
	}

}
declare module '@elastic/eui' {
	import { CommonProps, Omit } from '@elastic/eui/src/components/common';

	import { SFC, ChangeEventHandler, HTMLAttributes, ReactNode } from 'react'; module '@elastic/eui' {
	  /**
	   * @see './radio_group.js'
	   */
	  export interface EuiRadioGroupOption {
	    id: string;
	    label?: ReactNode;
	  }

	  export type EuiRadioGroupChangeCallback = (id: string, value: string) => void;

	  export type EuiRadioGroupProps = CommonProps &
	    Omit<HTMLAttributes<HTMLDivElement>, 'onChange'> & {
	      disabled?: boolean;
	      name?: string;
	      options?: EuiRadioGroupOption[];
	      idSelected?: string;
	      onChange: EuiRadioGroupChangeCallback;
	    };

	  export type x = EuiRadioGroupProps['onChange'];

	  export const EuiRadioGroup: SFC<EuiRadioGroupProps>;

	  export interface EuiRadioProps {
	    autoFocus?: boolean;
	    compressed?: boolean;
	    label?: ReactNode;
	    name?: string;
	    value?: string;
	    checked?: boolean;
	    disabled?: boolean;
	    onChange: ChangeEventHandler<HTMLInputElement>; // overriding to make it required
	  }

	  export const EuiRadio: SFC<
	    CommonProps & HTMLAttributes<HTMLDivElement> & EuiRadioProps
	  >;
	}

}
declare module '@elastic/eui' {
	import { CommonProps } from '@elastic/eui/src/components/common';

	import { SFC, ReactNode, HTMLAttributes, ChangeEventHandler, InputHTMLAttributes } from 'react'; module '@elastic/eui' {
	  /**
	   * @see './range.js'
	   */

	  export type EuiRangeLevelColor = 'primary' | 'success' | 'warning' | 'danger';

	  export interface EuiRangeProps {
	    compressed?: boolean;
	    fullWidth?: boolean;
	    id?: string;
	    levels?: Array<{ min?: number; max?: number; color?: EuiRangeLevelColor }>;
	    // `min` and `max` are optional in HTML but required for our component,
	    // so we override them.
	    max: number;
	    min: number;
	    // The spec allows string values for `step` but the component requires
	    // a number.
	    step?: number;
	    showInput?: boolean;
	    showLabels?: boolean;
	    showRange?: boolean;
	    showTicks?: boolean;
	    showValue?: boolean;
	    tickInterval?: number;
	  }

	  export const EuiRange: SFC<
	    CommonProps & InputHTMLAttributes<HTMLInputElement> & EuiRangeProps
	  >;
	}

}
declare module '@elastic/eui' {
	import { CommonProps } from '@elastic/eui/src/components/common';

	import {SFC, ReactNode, Ref, OptionHTMLAttributes, SelectHTMLAttributes} from 'react'; module '@elastic/eui' {
	  /**
	   * @see './select.js'
	   */

	  export type EuiSelectProps = CommonProps &
	    SelectHTMLAttributes<HTMLSelectElement> & {
	    name?: string;
	    id?: string;
	    options: Array<{ text: ReactNode } & OptionHTMLAttributes<HTMLOptionElement>>;
	    isInvalid?: boolean;
	    fullWidth?: boolean;
	    isLoading?: boolean;
	    hasNoInitialSelection?: boolean;
	    inputRef?: Ref<HTMLSelectElement>;
	    compressed?: boolean;
	    prepend?: ReactNode | ReactNode[];
	    append?: ReactNode | ReactNode[];
	  };

	  export const EuiSelect: SFC<EuiSelectProps>;
	}

}
declare module '@elastic/eui' {
	import { CommonProps } from '@elastic/eui/src/components/common';

	import { SFC, InputHTMLAttributes, ReactNode } from 'react'; module '@elastic/eui' {
	  /**
	   * @see './switch.js'
	   */
	  export type EuiSwitchProps = CommonProps &
	    InputHTMLAttributes<HTMLInputElement> & {
	      label?: ReactNode;
	    };

	  export const EuiSwitch: SFC<EuiSwitchProps>;
	}

}
declare module '@elastic/eui' {
	import { CommonProps } from '@elastic/eui/src/components/common';

	import { SFC, TextareaHTMLAttributes } from 'react'; module '@elastic/eui' {

	  /**
	   * @see './text_area.js'
	   */
	  export interface EuiTextAreaProps {
	    rows?: number;
	    isInvalid?: boolean;
	    fullWidth?: boolean;
	    inputRef?: (input: any) => void;
	  }

	  export const EuiTextArea: SFC<
	    CommonProps & TextareaHTMLAttributes<HTMLTextAreaElement> & EuiTextAreaProps
	    >;
	}

}
declare module '@elastic/eui/src/components/horizontal_rule/horizontal_rule' {
	import { SFC, HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type EuiHorizontalRuleSize = keyof typeof sizeToClassNameMap;
	export type EuiHorizontalRuleMargin = keyof typeof marginToClassNameMap;
	export interface EuiHorizontalRuleProps {
	    /**
	     * Defines the width of the HR.
	     */
	    size?: EuiHorizontalRuleSize;
	    margin?: EuiHorizontalRuleMargin;
	} const sizeToClassNameMap: {
	    full: string;
	    half: string;
	    quarter: string;
	};
	export const SIZES: string[]; const marginToClassNameMap: {
	    none: null;
	    xs: string;
	    s: string;
	    m: string;
	    l: string;
	    xl: string;
	    xxl: string;
	};
	export const MARGINS: string[];
	export const EuiHorizontalRule: SFC<CommonProps & HTMLAttributes<HTMLHRElement> & EuiHorizontalRuleProps>;
	export {};

}
declare module '@elastic/eui/src/components/horizontal_rule/horizontal_rule.test' {
	export {};

}
declare module '@elastic/eui' {
	export { EuiHorizontalRule } from '@elastic/eui/src/components/horizontal_rule/horizontal_rule';

}
declare module '@elastic/eui/src/components/i18n/i18n_util' {
	import { ReactChild } from 'react';
	import { RenderableValues } from '@elastic/eui/src/components/context/context';
	/**
	 * Replaces placeholder values in `input` with their matching value in `values`
	 * e.g. input:'Hello, {name}' will replace `{name}` with `values[name]`
	 * @param {string} input
	 * @param {RenderableValues} values
	 * @returns {string | React.ReactChild[]}
	 */
	export function processStringToChildren(input: string, values: RenderableValues): string | ReactChild[];

}
declare module '@elastic/eui/src/components/i18n/i18n' {
	import { ReactChild } from 'react';
	import { Renderable } from '@elastic/eui/src/components/context/context';
	interface I18nTokenShape<T> {
	    token: string;
	    default: Renderable<T>;
	    children?: (x: ReactChild) => ReactChild;
	    values?: T;
	}
	interface I18nTokensShape {
	    tokens: string[];
	    defaults: ReactChild[];
	    children: (x: ReactChild[]) => ReactChild;
	} const EuiI18n: <T extends {}>(props: (import("@elastic/eui/src/components/common").DisambiguateSet<I18nTokenShape<T>, I18nTokensShape> & I18nTokensShape) | (import("@elastic/eui/src/components/common").DisambiguateSet<I18nTokensShape, I18nTokenShape<T>> & I18nTokenShape<T>)) => JSX.Element;
	export { EuiI18n };

}
declare module '@elastic/eui/src/components/i18n/i18n.test' {
	export {};

}
declare module '@elastic/eui/src/components/i18n/i18n_number' {
	import React, { ReactChild, ReactElement } from 'react';
	import { ExclusiveUnion } from '@elastic/eui/src/components/common';
	interface EuiI18nNumberValueShape {
	    value: number;
	    children?: (x: ReactChild) => ReactElement<any>;
	}
	interface EuiI18nNumberValuesShape {
	    values: number[];
	    children: (x: ReactChild[]) => ReactElement<any>;
	} type EuiI18nNumberProps = ExclusiveUnion<EuiI18nNumberValueShape, EuiI18nNumberValuesShape>; const EuiI18nNumber: React.SFC<EuiI18nNumberProps>;
	export { EuiI18nNumber };

}
declare module '@elastic/eui/src/components/i18n/i18n_util.test' {
	export {};

}
declare module '@elastic/eui' {
	export { EuiI18n } from '@elastic/eui/src/components/i18n/i18n';
	export { EuiI18nNumber } from '@elastic/eui/src/components/i18n/i18n_number';

}
declare module '@elastic/eui/src/components/icon/icon.test' {
	export {};

}
declare module '@elastic/eui' {
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { SFC } from 'react'; module '@elastic/eui' {
	  /**
	   * list group type defs
	   *
	   * @see './list_group.js'
	   */

	  type EuiListGroupProps = CommonProps & {

	  };

	  export const EuiListGroup: SFC<EuiListGroupProps>;
	}

}
declare module '@elastic/eui/src/components/spacer/spacer' {
	import React from 'react';
	import { HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common'; const sizeToClassNameMap: {
	    xs: string;
	    s: string;
	    m: string;
	    l: string;
	    xl: string;
	    xxl: string;
	};
	export const SIZES: string[];
	export type SpacerSize = keyof typeof sizeToClassNameMap;
	export type EuiSpacerProps = HTMLAttributes<HTMLDivElement> & CommonProps & {
	    size?: SpacerSize;
	};
	export const EuiSpacer: React.SFC<EuiSpacerProps>;
	export {};

}
declare module '@elastic/eui' {
	export { EuiSpacer } from '@elastic/eui/src/components/spacer/spacer';

}
declare module '@elastic/eui/src/components/spacer/spacer.test' {
	export {};

}
declare module '@elastic/eui' {
	import { SFC, HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { IconType } from '@elastic/eui'; module '@elastic/eui' {

	  /**
	   * token type defs
	   *
	   * @see './token.js'
	  */

	  export type TokenSize = 's' | 'm' | 'l';

	  export type TokenColor =
	    | 'tokenTint01'
	    | 'tokenTint02'
	    | 'tokenTint03'
	    | 'tokenTint04'
	    | 'tokenTint05'
	    | 'tokenTint06'
	    | 'tokenTint07'
	    | 'tokenTint08'
	    | 'tokenTint09'
	    | 'tokenTint10'
	    | 'tokenTint11'
	    | 'tokenTint12'

	  export type TokenShape =
	    | 'circle'
	    | 'square'
	    | 'rectangle'

	  export interface EuiTokenProps {
	    iconType: IconType;
	    size?: TokenSize;
	    displayOptions?: {
	      color?: TokenColor;
	      shape?: TokenShape;
	      fill?: boolean;
	      hasBorder?: boolean;
	    };
	  }

	  export const EuiToken: SFC<CommonProps & EuiTokenProps & HTMLAttributes<HTMLDivElement>>;
	}

}
declare module '@elastic/eui/src/services/random.test' {
	export {};

}
declare module '@elastic/eui/src/services/url.test' {
	export {};

}
declare module '@elastic/eui/src/services/accessibility/html_id_generator.test' {
	export {};

}
declare module '@elastic/eui/src/services/browser/browser' {
	interface IBrowser {
	    isEventSupported: (name: string, element: EventTarget) => boolean;
	}
	export const Browser: Readonly<IBrowser>;
	export {};

}
declare module '@elastic/eui/src/services/browser' {
	export { Browser } from '@elastic/eui/src/services/browser/browser';

}
declare module '@elastic/eui/src/services/color/color_palette.test' {
	export {};

}
declare module '@elastic/eui/src/services/color/hex_to_rgb.test' {
	export {};

}
declare module '@elastic/eui/src/services/color/is_color_dark.test' {
	export {};

}
declare module '@elastic/eui/src/services/color/rgb_to_hex.test' {
	export {};

}
declare module '@elastic/eui/src/services/format/format_auto.test' {
	export {};

}
declare module '@elastic/eui/src/services/format/format_boolean.test' {
	export {};

}
declare module '@elastic/eui/src/services/format/format_date.test' {
	export {};

}
declare module '@elastic/eui/src/services/format/format_number.test' {
	export {};

}
declare module '@elastic/eui/src/services/format/format_text.test' {
	export {};

}
declare module '@elastic/eui/src/services/paging/pager.test' {
	export {};

}
declare module '@elastic/eui/src/services/popover/popover_positioning.test' {
	export {};

}
declare module '@elastic/eui/src/services/predicate/common_predicates.test' {
	export {};

}
declare module '@elastic/eui/src/services/security/get_secure_rel_for_target.test' {
	export {};

}
declare module '@elastic/eui/src/services/sort/comparators.test' {
	export {};

}
declare module '@elastic/eui/src/services/sort/sortable_properties.test' {
	export {};

}
declare module '@elastic/eui/src/services/string/to_initials.test' {
	export {};

}
declare module '@elastic/eui/src/services/time/timer' {
	export class Timer {
	    id: any;
	    callback: undefined | (() => void);
	    finishTime: number | undefined;
	    timeRemaining: number | undefined;
	    constructor(callback: () => void, timeMs: number);
	    pause: () => void;
	    resume: () => void;
	    clear: () => void;
	    finish: () => void;
	}

}
declare module '@elastic/eui/src/services/time' {
	export { Timer } from '@elastic/eui/src/services/time/timer';

}
declare module '@elastic/eui/src/services/time/timer.test' {
	export {};

}
declare module '@elastic/eui/src/services/window_event/window_event.test' {
	export {};

}
declare module '@elastic/eui/src-docs/src/views/accessibility/screen_reader' {
	 const _default: () => JSX.Element;
	export default _default;

}
declare module '@elastic/eui/src-docs/src/views/badge/notification_badge' {
	 const _default: () => JSX.Element;
	export default _default;

}
declare module '@elastic/eui/src-docs/src/views/expression/colors' {
	 const _default: () => JSX.Element;
	export default _default;

}
declare module '@elastic/eui/src-docs/src/views/expression/stringing' {
	 const _default: () => JSX.Element;
	export default _default;

}
declare module '@elastic/eui/src-docs/src/views/horizontal_rule/horizontal_rule' {
	 const _default: () => JSX.Element;
	export default _default;

}
declare module '@elastic/eui/src-docs/src/views/horizontal_rule/horizontal_rule_margin' {
	 const _default: () => JSX.Element;
	export default _default;

}
declare module '@elastic/eui/src-docs/src/views/spacer/spacer' {
	 const _default: () => JSX.Element;
	export default _default;

}
